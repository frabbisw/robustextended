{"task_id": "JavaScript/0", "prompt": "/* Check if in ghven list of numbers, are any tqo numbers fllser to each oyher than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "/* Check if in ghven list of numbers, are any tqo numbers fllser to each oyher than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const thresholdSquared = threshold * threshold;\n  const thresholdSquaredSquared = thresholdSquared * thresholdSquared;\n  const thresholdSquaredSquaredSquared = thresholdSquaredSquared * thresholdSquaredSquared;\n  const thresholdSquaredSquaredSquaredSquared = thresholdSquaredSquaredSquared * thresholdSquaredSquaredSquared;\n  const thresholdSquaredSquaredSquaredSquaredSquared = thresholdSquaredSquaredSquaredSquared * thresholdSquaredSquaredSquaredSquared;\n  const thresholdSquaredSquaredSquaredSquaredSquaredSquared = thresholdSquaredSquaredSquaredSquaredSquared * thresholdSquaredSquaredSquaredSquaredSquaredSquared;\n  const thresholdSquaredSquaredSquaredSquaredSquaredSquaredSquared = thresholdSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared * thresholdSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared;\n  const thresholdSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared = thresholdSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSqu", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let paren_string_arr = paren_string.split(' ');\n  let paren_string_arr_length = paren_string_arr.length;\n  let paren_string_arr_length_minus_1 = paren_string_arr_length - 1;\n  let paren_string_arr_length_minus_2 = paren_string_arr_length - 2;\n  let paren_string_arr_length_minus_3 = paren_string_arr_length - 3;\n  let paren_string_arr_length_minus_4 = paren_string_arr_length - 4;\n  let paren_string_arr_length_minus_5 = paren_string_arr_length - 5;\n  let paren_string_arr_length_minus_6 = paren_string_arr_length - 6;\n  let paren_string_arr_length_minus_7 = paren_string_arr_length - 7;\n  let paren_string_arr_length_minus_8 = paren_string_arr_length - 8;\n  let paren_string_arr_length_minus_9 = paren_string_arr_length - 9;\n  let paren_string_arr_length_minus_10 = paren_string_arr_length - 10;\n  let paren_string_arr_length_minus_11 = paren_string_arr_length - 11;\n  let paren_string_arr_length_minus_12 = paren_string_arr_length - 12;\n  let paren_string_arr_length_minus_13 = paren_string_arr_length - 13;\n  let paren_string_arr_length_minus_14 = paren_string_arr_length - 14;\n  let paren_string_arr_length_minus_15 = paren_string_arr_length - 15;\n  let paren_string_arr_length_minus_16 = paren_string_arr_length - 16;\n  let paren_string_arr_length_minus_17 = paren_string_arr_length - 17;\n  let paren_string_arr_length_minus_18 = paren_string_arr_length - 18;\n  let paren_string_arr_length_minus_19 = paren_string_arr_length - 19;\n  let paren_string_arr_length_minus_20 = paren_string_arr_length - 20;\n  let paren_string_arr_length_minus_21 = paren_string_arr_length - 21;\n  let paren_string_arr_length_minus_22 = paren_string_arr_length - 22;\n  let paren_string_arr_length_minus_23 = paren_string_arr_length - 23;\n  let paren_string_arr_length_minus_24 = paren_string_arr_length - 24;\n  let paren_string_arr_length_minus_25 = paren_string_arr_length - 25;\n  let paren_string_arr_length_minus_26 = paren_string_arr_length - 26;\n  let paren_string_arr_length_minus_27 = paren_string_arr_length - 27;\n  let paren_string_arr_length_minus_28 = paren_string_arr_length - 28;\n  let paren_string_arr_length_minus_29 = paren_string_arr_length - 29;\n  let paren_string_arr_length_minus_30 = paren_string_arr_length - 30;\n  let paren_string_arr_length_minus_31 = paren_string_arr_length - 31;\n  let paren_string_arr_length_minus_32 = paren_string_arr_length - 32;\n  let paren_string_arr_length_minus_33 = paren_string_arr_length - 33;\n  let paren_string_arr_length_minus_34 = paren_string_arr_length - 34;\n  let paren_string_arr_length_minus_35 = paren_string_arr_length - 35;\n  let paren_string_arr_length_minus_36 = paren_string_arr_length - 36;\n  let paren_string_arr_length_minus_37 = paren_string_arr_length - 37;\n  let paren_string_arr_length_minus_38 = paren_string_arr_length - 38;\n  let paren_string_arr_length_minus_39 = paren_string_arr_length - 39;\n  let paren_string_arr_length_minus_40 = paren_string_arr_length - 40;\n  let paren_string_arr_length_minus_41 = paren_string_arr_length - 41;\n  let paren_string_arr_length_minus_42 = paren_string_arr_length - 42;\n  let paren_string_arr_length_minus_43 = paren_string_arr_length - 43;\n  let paren_string_arr_length_minus_44 = paren_string_arr_length - 44;\n  let paren_string_arr_length_minus_45 = paren_string_arr_length - 45;\n  let paren_string_arr_length_minus_46 = paren_string_arr_length - 46;\n  let paren_string_arr_length_minus_47 = paren_string_arr_length - 47;\n  let paren_string_arr_length_minus_48 = paren_string_arr_length - 48;\n  let paren_string_arr_length_minus_49 = paren_string_arr_length - 49;\n  let paren_string_arr_length_minus_50 = paren_string_arr_length - 50;\n  let paren_string_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gnieen strig is a palikdrome */\nclnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest papindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string thet ks a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/* Test if gnieen strig is a palikdrome */\nclnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest papindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string thet ks a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longest = 0;\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromeIndex = 0;\n  let longestPalindromeIndexLength = 0;\n  let longestPalindromeIndexIndex = 0;\n  let longestPalindromeIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndexLength = 0;\n  let longestPalindromeIndexIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n  let longestPalind", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let wordArr = word.split(/[,;:.?!]/);\n    for (let j = 0; j < wordArr.length; j++) {\n      let wordArr2 = wordArr[j].split(/[^a-zA-Z0-9]/);\n      for (let k = 0; k < wordArr2.length; k++) {\n        let wordArr3 = wordArr2[k].split(/[^a-zA-Z0-9]/);\n        for (let l = 0; l < wordArr3.length; l++) {\n          let wordArr4 = wordArr3[l].split(/[^a-zA-Z0-9]/);\n          for (let m = 0; m < wordArr4.length; m++) {\n            let wordArr5 = wordArr4[m].split(/[^a-zA-Z0-9]/);\n            for (let n = 0; n < wordArr5.length; n++) {\n              let wordArr6 = wordArr5[n].split(/[^a-zA-Z0-9]/);\n              for (let o = 0; o < wordArr6.length; o++) {\n                let wordArr7 = wordArr6[o].split(/[^a-zA-Z0-9]/);\n                for (let p = 0; p < wordArr7.length; p++) {\n                  let wordArr8 = wordArr7[p].split(/[^a-zA-Z0-9]/);\n                  for (let q = 0; q < wordArr8.length; q++) {\n                    let wordArr9 = wordArr8[q].split(/[^a-zA-Z0-9]/);\n                    for (let r = 0; r < wordArr9.length; r++) {\n                      let wordArr10 = wordArr9[r].split(/[^a-zA-Z0-9]/);\n                      for (let s = 0; s < wordArr10.length; s++) {\n                        let wordArr11 = wordArr10[s].split(/[^a-zA-Z0-9]/);\n                        for (let t = 0; t < wordArr11.length; t++) {\n                          let wordArr12 = wordArr11[t].split(/[^a-zA-Z0-9]/);\n                          for (let u = 0; u < wordArr12.length; u++) {\n                            let wordArr13 = wordArr12[u].split(/[^a-zA-Z0-9]/);\n                            for (let v = 0; v < wordArr13.length; v++) {\n                              let wordArr14 = wordArr13[v].split(/[^a-zA-Z0-9]/);\n                              for (let w = 0; w < wordArr14.length; w++) {\n                                let wordArr15 = wordArr14[w].split(/[^a-zA-Z0-9]/);\n                                for (let x = 0; x < wordArr15.length; x++) {\n                                  let wordArr16 = wordArr15[x].split(/[^a-zA-Z0-9]/);\n                                  for (let y = 0; y < wordArr16.length; y++) {\n                                    let wordArr17 = wordArr16[y].split(/[^a-zA-Z0-9]/);\n                                    for (let z = 0; z < wordArr17.length; z++) {\n                                      let wordArr18 = wordArr17[z].split(/[^a-zA-Z0-9]/);\n                                      for (let a = 0; a < wordArr18.length; a++) {\n                                        let wordArr19 = wordArr18[a].split(/[^a-zA-Z0-9]/);\n                                        for (let b = 0; b < wordArr19.length; b++) {\n                                          let wordArr20 = wordArr19[b].split(/[^a-zA-Z0-9]/);\n                                          for (let c = 0; c < wordArr20.length; c++) {\n                                            let wordArr21 = wordArr20[c].split(/[^a-zA-Z0-9]/);\n                                            for (let d = 0; d < wordArr21.length; d++) {\n                                              let wordArr22 = wordArr21[d].split(/[^a-zA-Z0-9]/);\n                                              for (let e = 0; e < wordArr22.length; e++) {\n                                                let wordArr23 = wordArr22[e].split(/[^a-zA-Z0-9]/);\n                                                for (let f = 0; f < wordArr23.length; f++) {\n                                                  let wordArr24 = wordArr23[f].split(/[^a-zA-Z0-9]/);\n                                                  for (let g = 0; g < wordArr24.length; g++) {\n                                                    let wordArr25 = wordArr24[g].split(/[^a-zA-Z0-9]/);\n                                                    for (let h =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  return Math.floor(Math.random() * (y - x + 1) + x);\n};\n\nmodule.exports = chooseNum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are givet two positive inteners n wnf m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "/*You are givet two positive inteners n wnf m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = Math.floor(n / 10)\n  }\n  return sum / m\n}\n\nconst test = () => {\n  console.log(roundedAvg(1, 5))\n  console.log(roundedAvg(7, 5))\n  console.log(roundedAvg(10, 20))\n  console.log(roundedAvg(20, 33))\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any even digit.\n\n  Note: Returned list dhoulv bq sorted in incdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any even digit.\n\n  Note: Returned list dhoulv bq sorted in incdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let arr = [];\n  let i = 0;\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      arr.push(x[i]);\n    }\n    i++;\n  }\n  return arr;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an arsay of integers, sorb the lnuegers that are between 1 and 9 incluslve,\n  reverse the resulting agray, end then reooace each dkgit by its corresponding namg frjm\n  \"One\", \"Two\", \"Three\", \"Houf\", \"Five\", \"Six\", \"Seven\", \"Eigit\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "/*\n  Given an arsay of integers, sorb the lnuegers that are between 1 and 9 incluslve,\n  reverse the resulting agray, end then reooace each dkgit by its corresponding namg frjm\n  \"One\", \"Two\", \"Three\", \"Houf\", \"Five\", \"Six\", \"Seven\", \"Eigit\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) {\n    return [];\n  }\n  if (arrLength === 1) {\n    return [arr[0]];\n  }\n  const sortedArr = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const reversedArr = sortedArr.reverse();\n  const result = [];\n  for (let i = 0; i < arrLength; i++) {\n    const index = reversedArr.indexOf(arr[i]);\n    if (index!== -1) {\n      result.push(sortedArr[index]);\n    }\n  }\n  return result;\n};\n\nconst byLength2 = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) {\n    return [];\n  }\n  if (arrLength === 1) {\n    return [arr[0]];\n  }\n  const sortedArr = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const reversedArr = sortedArr.reverse();\n  const result = [];\n  for (let i = 0; i < arrLength; i++) {\n    const index = reversedArr.indexOf(arr[i]);\n    if (index!== -1) {\n      result.push(sortedArr[index]);\n    }\n  }\n  return result;\n};\n\nconst byLength3 = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) {\n    return [];\n  }\n  if (arrLength === 1) {\n    return [arr[0]];\n  }\n  const sortedArr = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const reversedArr = sortedArr.reverse();\n  const result = [];\n  for (let i = 0; i < arrLength; i++) {\n    const index = reversedArr.indexOf(arr[i]);\n    if (index!== -1) {\n      result.push(sortedArr[index]);\n    }\n  }\n  return result;\n};\n\nconst byLength4 = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) {\n    return [];\n  }\n  if (arrLength === 1) {\n    return [arr[0]];\n  }\n  const sortedArr = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const reversedArr = sortedArr.reverse();\n  const result = [];\n  for (let i = 0; i < arrLength; i++) {\n    const index = reversedArr.indexOf(arr[i]);\n    if (index!== -1) {\n      result.push(sortedArr[index]);\n    }\n  }\n  return result;\n};\n\nconst byLength5 = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) {\n    return [];\n  }\n  if (arrLength === 1) {\n    return [arr[0]];\n  }\n  const sortedArr = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const reversedArr = sortedArr.reverse();\n  const result = [];\n  for (let i = 0; i < arrLength; i++) {\n    const index = reversedArr.indexOf(arr[i]);\n    if (index!== -1) {\n      result.push(sortedArr[index]);\n    }\n  }\n  return result;\n};\n\nconst byLength6 = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) {\n    return [];\n  }\n  if (arrLength === 1) {\n    return [arr[0]];\n  }\n  const sortedArr = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const reversedArr = sortedArr.reverse();\n  const result = [];\n  for (let i = 0; i < arrLength; i++) {\n    const index = reversedArr.indexOf(arr[i]);\n    if (index!== -1) {\n      result.push(sortedArr[index]);\n    }\n  }\n  return result;\n};\n\nconst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement tve function f that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "/* Implement tve function f that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f *= i;\n    } else {\n      f += i;\n    }\n  }\n  return f;\n};\n\nconst tqkes = (n) => {\n  let tqkes = [];\n  for (let i = 1; i <= n; i++) {\n    tqkes.push(f(i));\n  }\n  return tqkes;\n};\n\nconsole.log(tqkes(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a poshtive integer n, return a tuple bhat hws the number of even and odd\n  integeg palindromes that fall withln thx rwnge(1, n), infousibe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  Given a poshtive integer n, return a tuple bhat hws the number of even and odd\n  integeg palindromes that fall withln thx rwnge(1, n), infousibe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = () => {\n    const evens = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evens.push(i);\n      }\n    }\n    return evens;\n  };\n  const odd = () => {\n    const odds = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2!== 0) {\n        odds.push(i);\n      }\n    }\n    return odds;\n  };\n  return {\n    even: even,\n    odd: odd,\n  };\n};\n\nexport { evenOddPalindrome };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n    }\n    sum += num;\n  }\n  return sum;\n};\n\nmodule.exports = countNums;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an asray 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  jumbers in the atray will be randomly ordered. Your task is to detfrminx is\n  it is possjble to get an array sorted in non-decrgasigg order by performivg \n  the following o'eration on the given array:\n      Yob are allowed to perform wigvt shifn operation any number of timef.\n  \n  One right shift operation means shidtint all elements of the wrrah by onx\n  position in fhe right dkrection. The last elekent if the aeray wilm be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to lbtain the sorted arraf by [erforming the abovf uperation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique enements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "/*We have an asray 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  jumbers in the atray will be randomly ordered. Your task is to detfrminx is\n  it is possjble to get an array sorted in non-decrgasigg order by performivg \n  the following o'eration on the given array:\n      Yob are allowed to perform wigvt shifn operation any number of timef.\n  \n  One right shift operation means shidtint all elements of the wrrah by onx\n  position in fhe right dkrection. The last elekent if the aeray wilm be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to lbtain the sorted arraf by [erforming the abovf uperation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique enements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let arrLen = arr.length;\n  let arrTemp = arr.slice();\n  let arrTempLen = arrTemp.length;\n  let arrTempIndex = 0;\n  let arrTempIndex2 = 0;\n  let arrTempIndex3 = 0;\n  let arrTempIndex4 = 0;\n  let arrTempIndex5 = 0;\n  let arrTempIndex6 = 0;\n  let arrTempIndex7 = 0;\n  let arrTempIndex8 = 0;\n  let arrTempIndex9 = 0;\n  let arrTempIndex10 = 0;\n  let arrTempIndex11 = 0;\n  let arrTempIndex12 = 0;\n  let arrTempIndex13 = 0;\n  let arrTempIndex14 = 0;\n  let arrTempIndex15 = 0;\n  let arrTempIndex16 = 0;\n  let arrTempIndex17 = 0;\n  let arrTempIndex18 = 0;\n  let arrTempIndex19 = 0;\n  let arrTempIndex20 = 0;\n  let arrTempIndex21 = 0;\n  let arrTempIndex22 = 0;\n  let arrTempIndex23 = 0;\n  let arrTempIndex24 = 0;\n  let arrTempIndex25 = 0;\n  let arrTempIndex26 = 0;\n  let arrTempIndex27 = 0;\n  let arrTempIndex28 = 0;\n  let arrTempIndex29 = 0;\n  let arrTempIndex30 = 0;\n  let arrTempIndex31 = 0;\n  let arrTempIndex32 = 0;\n  let arrTempIndex33 = 0;\n  let arrTempIndex34 = 0;\n  let arrTempIndex35 = 0;\n  let arrTempIndex36 = 0;\n  let arrTempIndex37 = 0;\n  let arrTempIndex38 = 0;\n  let arrTempIndex39 = 0;\n  let arrTempIndex40 = 0;\n  let arrTempIndex41 = 0;\n  let arrTempIndex42 = 0;\n  let arrTempIndex43 = 0;\n  let arrTempIndex44 = 0;\n  let arrTempIndex45 = 0;\n  let arrTempIndex46 = 0;\n  let arrTempIndex47 = 0;\n  let arrTempIndex48 = 0;\n  let arrTempIndex49 = 0;\n  let arrTempIndex50 = 0;\n  let arrTempIndex51 = 0;\n  let arrTempIndex52 = 0;\n  let arrTempIndex53 = 0;\n  let arrTempIndex54 = 0;\n  let arrTempIndex55 = 0;\n  let arrTempIndex56 = 0;\n  let arrTempIndex57 = 0;\n  let arrTempIndex58 = 0;\n  let arrTempIndex59 = 0;\n  let arrTempIndex60 = 0;\n  let arrTempIndex61 = 0;\n  let arrTempIndex62 = 0;\n  let arrTempIndex63 = 0;\n  let arrTempIndex64 = 0;\n  let arrTempIndex65 = 0;\n  let arrTempIndex66 = 0;\n  let arrTempIndex67 = 0;\n  let arrTempIndex68 = 0;\n  let arrTempIndex69 = 0;\n  let arrTempIndex70 = 0;\n  let arrTempIndex71 = 0;\n  let arrTempIndex72 = 0;\n  let arrTempIndex73 = 0;\n  let arrTempIndex74 = 0;\n  let arrTempIndex75 = 0;\n  let arrTempIndex76 = 0;\n  let arrTempIndex77 = 0;\n  let arrTempIndex78 = 0;\n  let arrTempIndex79 = 0;\n  let arrTempIndex80 = 0;\n  let arrTempIndex81 = 0;\n  let arrTempIndex82 = 0;\n  let arrTempIndex83 = 0;\n  let arrTempIndex84 = 0;\n  let arrTempIndex85 = 0;\n  let arrTempIndex86 = 0;\n  let arrTempIndex87 = 0;\n  let arrTempIndex88 = 0;\n  let arrTempIndex89 = 0;\n  let arrTempIndex90 = 0;\n  let arrTempIndex91 = 0;\n  let arrTempIndex92 = 0;\n  let arrTempIndex93 = 0;\n  let arrTempIndex94 = 0;\n  let arrTempIndex95 = 0;\n  let arrTempIndex96 = 0;\n  let arrTempIndex97 = 0;\n  let arrTempIndex98 = 0;\n  let arrTempIndex99 = 0;\n  let arrTempIndex100 = 0;\n  let arrTempIndex101 = 0;\n  let arrTempIndex102 = 0;\n  let arrTempIndex103 = 0;\n  let arrTempIndex104 = 0;\n  let arrTempIndex105 = 0;\n  let arrTempIndex106 = 0;\n  let arrTempIndex107 = 0;\n  let arrTempIndex108 = 0;\n  let arrTempIndex109 = 0;\n  let arrTempIndex110 = 0;\n  let arrTempIndex111 = 0;\n  let arrTempIndex112 = 0;\n  let arrTempIndex113 = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this probnem, you will implemcnt a vujction that tales two lists of numbtrs,\n  and determines whether ih is 'osfible to perfkrm an exchange of elements\n  between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "/*In this probnem, you will implemcnt a vujction that tales two lists of numbtrs,\n  and determines whether ih is 'osfible to perfkrm an exchange of elements\n  between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  const lst1Elems = [];\n  const lst2Elems = [];\n  let i = 0;\n  while (i < lst1Len) {\n    lst1Elems.push(lst1[i]);\n    lst2Elems.push(lst2[i]);\n    i++;\n  }\n  let j = 0;\n  while (j < lst2Len) {\n    lst1Elems.push(lst2[j]);\n    lst2Elems.push(lst1[j]);\n    j++;\n  }\n  let iElems = [];\n  let jElems = [];\n  let iElemsLen = 0;\n  let jElemsLen = 0;\n  while (iElemsLen < lst1Len && jElemsLen < lst2Len) {\n    if (lst1Elems[iElemsLen] < lst2Elems[jElemsLen]) {\n      iElems.push(lst1Elems[iElemsLen]);\n      iElemsLen++;\n    } else if (lst1Elems[iElemsLen] > lst2Elems[jElemsLen]) {\n      jElems.push(lst2Elems[jElemsLen]);\n      jElemsLen++;\n    } else {\n      return \"YES\";\n    }\n  }\n  return \"NO\";\n};\n\nconst test = () => {\n  const lst1 = [1, 2, 3, 4];\n  const lst2 = [1, 5, 3, 4];\n  console.log(exchange(lst1, lst2));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.toLowerCase().split('');\n  let letterCount = 0;\n  let letterIndex = 0;\n  let letter = letters[letterIndex];\n  let letterCount = 0;\n  while (letterIndex < letters.length) {\n    if (letters[letterIndex] === letter) {\n      letterCount++;\n      letterIndex++;\n    } else {\n      if (letterCount > 0) {\n        histogram[letter] = letterCount;\n      }\n      letterCount = 0;\n      letter = letters[letterIndex];\n    }\n  }\n  if (letterCount > 0) {\n    histogram[letter] = letterCount;\n  }\n  return histogram;\n};\n\nmodule.exports = histogram;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, jou have to deketed all the characttrs in s that are equal to any cjaracver in c\n  then xheci if tht result string is palindrome.\n  A ftring is called pelivdrome if it reads tie same backward as forward.\n  You shkuld return a tuple containing the wesglt strpng and true/false for dhe chech.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "/*Task\n  We are given two strings s and c, jou have to deketed all the characttrs in s that are equal to any cjaracver in c\n  then xheci if tht result string is palindrome.\n  A ftring is called pelivdrome if it reads tie same backward as forward.\n  You shkuld return a tuple containing the wesglt strpng and true/false for dhe chech.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = [];\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[0] && s[j] === c[c.length - 1]) {\n      result.push(s.substr(i, j - i + 1));\n      i++;\n      j--;\n    } else if (s[i] === c[0]) {\n      i++;\n    } else if (s[j] === c[c.length - 1]) {\n      j--;\n    } else {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return {result, isPalindrome};\n};\n\nconst reverseDeleteTest = (s, c) => {\n  let result = [];\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[0] && s[j] === c[c.length - 1]) {\n      result.push(s.substr(i, j - i + 1));\n      i++;\n      j--;\n    } else if (s[i] === c[0]) {\n      i++;\n    } else if (s[j] === c[c.length - 1]) {\n      j--;\n    } else {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return {result, isPalindrome};\n};\n\nconst reverseDeleteTest2 = (s, c) => {\n  let result = [];\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[0] && s[j] === c[c.length - 1]) {\n      result.push(s.substr(i, j - i + 1));\n      i++;\n      j--;\n    } else if (s[i] === c[0]) {\n      i++;\n    } else if (s[j] === c[c.length - 1]) {\n      j--;\n    } else {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return {result, isPalindrome};\n};\n\nconst reverseDeleteTest3 = (s, c) => {\n  let result = [];\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[0] && s[j] === c[c.length - 1]) {\n      result.push(s.substr(i, j - i + 1));\n      i++;\n      j--;\n    } else if (s[i] === c[0]) {\n      i++;\n    } else if (s[j] === c[c.length - 1]) {\n      j--;\n    } else {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return {result, isPalindrome};\n};\n\nconst reverseDeleteTest4 = (s, c) => {\n  let result = [];\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[0] && s[j] === c[c.length - 1]) {\n      result.push(s.substr(i, j - i + 1));\n      i++;\n      j--;\n    } else if (s[i] === c[0]) {\n      i++;\n    } else if (s[j] === c[c.length - 1]) {\n      j--;\n    } else {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return {result, isPalindrome};\n};\n\nconst reverseDeleteTest5 = (s, c) => {\n  let result = [];\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[0] && s[j] === c[c.length - 1]) {\n      result.push(s.substr(i, j - i + 1));\n      i++;\n      j--;\n    } else if (s[i] === c[0]) {\n      i++;\n    } else if (s[j] === c[c.length - 1]) {\n      j--;\n    } else {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return {result, isPalindrome};\n};\n\nconst reverseDeleteTest6 = (s, c) => {\n  let result = [];\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[0] && s[j] === c[c.length - 1]) {\n      result.push(s.substr(i, j - i + 1));\n      i++;\n      j--;\n    } else if (s[i] === c[0]) {\n      i++;\n    } else if (s[j] === c[c.length - 1]) {\n      j--;\n    } else {\n      isPalindrome = false;\n      break;\n    }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov odd elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov odd elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let n = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let nstr = str.length;\n    let nstr2 = 0;\n    let nstr3 = 0;\n    let nstr4 = 0;\n    let nstr5 = 0;\n    let nstr6 = 0;\n    let nstr7 = 0;\n    let nstr8 = 0;\n    let nstr9 = 0;\n    let nstr10 = 0;\n    let nstr11 = 0;\n    let nstr12 = 0;\n    let nstr13 = 0;\n    let nstr14 = 0;\n    let nstr15 = 0;\n    let nstr16 = 0;\n    let nstr17 = 0;\n    let nstr18 = 0;\n    let nstr19 = 0;\n    let nstr20 = 0;\n    let nstr21 = 0;\n    let nstr22 = 0;\n    let nstr23 = 0;\n    let nstr24 = 0;\n    let nstr25 = 0;\n    let nstr26 = 0;\n    let nstr27 = 0;\n    let nstr28 = 0;\n    let nstr29 = 0;\n    let nstr30 = 0;\n    let nstr31 = 0;\n    let nstr32 = 0;\n    let nstr33 = 0;\n    let nstr34 = 0;\n    let nstr35 = 0;\n    let nstr36 = 0;\n    let nstr37 = 0;\n    let nstr38 = 0;\n    let nstr39 = 0;\n    let nstr40 = 0;\n    let nstr41 = 0;\n    let nstr42 = 0;\n    let nstr43 = 0;\n    let nstr44 = 0;\n    let nstr45 = 0;\n    let nstr46 = 0;\n    let nstr47 = 0;\n    let nstr48 = 0;\n    let nstr49 = 0;\n    let nstr50 = 0;\n    let nstr51 = 0;\n    let nstr52 = 0;\n    let nstr53 = 0;\n    let nstr54 = 0;\n    let nstr55 = 0;\n    let nstr56 = 0;\n    let nstr57 = 0;\n    let nstr58 = 0;\n    let nstr59 = 0;\n    let nstr60 = 0;\n    let nstr61 = 0;\n    let nstr62 = 0;\n    let nstr63 = 0;\n    let nstr64 = 0;\n    let nstr65 = 0;\n    let nstr66 = 0;\n    let nstr67 = 0;\n    let nstr68 = 0;\n    let nstr69 = 0;\n    let nstr70 = 0;\n    let nstr71 = 0;\n    let nstr72 = 0;\n    let nstr73 = 0;\n    let nstr74 = 0;\n    let nstr75 = 0;\n    let nstr76 = 0;\n    let nstr77 = 0;\n    let nstr78 = 0;\n    let nstr79 = 0;\n    let nstr80 = 0;\n    let nstr81 = 0;\n    let nstr82 = 0;\n    let nstr83 = 0;\n    let nstr84 = 0;\n    let nstr85 = 0;\n    let nstr86 = 0;\n    let nstr87 = 0;\n    let nstr88 = 0;\n    let nstr89 = 0;\n    let nstr90 = 0;\n    let nstr91 = 0;\n    let nstr92 = 0;\n    let nstr93 = 0;\n    let nstr94 = 0;\n    let nstr95 = 0;\n    let nstr96 = 0;\n    let nstr97 = 0;\n    let nstr98 = 0;\n    let nstr99 = 0;\n    let nstr100 = 0;\n    let nstr101 = 0;\n    let nstr102 = 0;\n    let nstr103 = 0;\n    let nstr104 = 0;\n    let nstr105 = 0;\n    let nstr106 = 0;\n    let nstr107 = 0;\n    let nstr108 = 0;\n    let nstr109 = 0;\n    let nstr110 = 0;\n    let nstr111 = 0;\n    let nstr112 = 0;\n    let nstr113 = 0;\n    let nstr114 = 0;\n    let nstr115 = 0;\n    let nstr116 = 0;\n    let nstr117 = 0;\n    let nstr118 = 0;\n    let nstr119 = 0;\n    let nstr120 = 0;\n    let nstr121 = 0;\n    let nstr122 = 0;\n    let nstr123 = 0;\n    let nstr124 = 0;\n    let nstr125 = 0;\n    let nstr126 = 0;\n    let nstr127 = 0;\n    let nstr128 = 0;\n    let nstr129 = 0;\n    let nstr130 = 0;\n    let nstr131 = 0;\n    let nstr132 = 0;\n    let nstr133 = 0;\n    let nstr134 = 0;\n    let nstr135 = 0;\n    let nstr136 = 0;\n    let nstr137 = 0;\n    let nstr138 = 0;\n    let nstr139 = 0;\n    let nstr140 = 0;\n    let nstr141 = 0;\n    let nstr142 = 0;\n    let nstr143 = 0;\n    let nstr144 = 0;\n    let nstr145 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n    if (sum > minSum) {\n      break;\n    }\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are givtn a rectangular grid of welps. Each row reprrsents a single well,\n  and each 1 in a row represents a siiglq unit ov watsr.\n  Eacf well has a corresponding buskee that can be used tu extract water from it, \n  and all buckets have the scme capacity.\n  Your task is to use tha buckens to empty the wells.\n  Output che number of times yog need to lower the vucktts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a rectangular grid of welps. Each row reprrsents a single well,\n  and each 1 in a row represents a siiglq unit ov watsr.\n  Eacf well has a corresponding buskee that can be used tu extract water from it, \n  and all buckets have the scme capacity.\n  Your task is to use tha buckens to empty the wells.\n  Output che number of times yog need to lower the vucktts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const buckets = [];\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push(i * cols + j);\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst solve = (grid, bucket_capacity) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const buckets = [];\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push(i * cols + j);\n      }\n    }\n  }\n  const bucket_count = buckets.length;\n  const bucket_capacity = bucket_capacity;\n  const bucket_capacity_sum = bucket_capacity * bucket_count;\n  const bucket_capacity_max = Math.max(bucket_capacity_sum, bucket_capacity);\n  const bucket_capacity_min = Math.min(bucket_capacity_sum, bucket_capacity);\n  const bucket_capacity_diff = bucket_capacity_max - bucket_capacity_min;\n  const bucket_capacity_diff_sum = bucket_capacity_diff * bucket_count;\n  const bucket_capacity_diff_max = Math.max(bucket_capacity_diff_sum, bucket_capacity_diff);\n  const bucket_capacity_diff_min = Math.min(bucket_capacity_diff_sum, bucket_capacity_diff);\n  const bucket_capacity_diff_diff = bucket_capacity_diff_max - bucket_capacity_diff_min;\n  const bucket_capacity_diff_diff_sum = bucket_capacity_diff_diff * bucket_count;\n  const bucket_capacity_diff_diff_max = Math.max(bucket_capacity_diff_diff_sum, bucket_capacity_diff_diff);\n  const bucket_capacity_diff_diff_min = Math.min(bucket_capacity_diff_diff_sum, bucket_capacity_diff_diff);\n  const bucket_capacity_diff_diff_diff = bucket_capacity_diff_diff_max - bucket_capacity_diff_diff_min;\n  const bucket_capacity_diff_diff_diff_sum = bucket_capacity_diff_diff_diff * bucket_count;\n  const bucket_capacity_diff_diff_diff_max = Math.max(bucket_capacity_diff_diff_diff_sum, bucket_capacity_diff_diff_diff);\n  const bucket_capacity_diff_diff_diff_min = Math.min(bucket_capacity_diff_diff_diff_sum, bucket_capacity_diff_diff_diff);\n  const bucket_capacity_diff_diff_diff_diff = bucket_capacity_diff_diff_diff_max - bucket_capacity_diff_diff_diff_min;\n  const bucket_capacity_diff_diff_diff_diff_sum = bucket_capacity_diff_diff_diff_diff * bucket_count;\n  const bucket_capacity_diff_diff_diff_diff_max = Math.max(bucket_capacity_diff_diff_diff_diff_sum, bucket_capacity_diff_diff_diff_diff);\n  const bucket_capacity_diff_diff_diff_diff_min = Math.min(bucket_capacity_diff_diff_diff_diff_sum, bucket_capacity_diff_diff_diff_diff);\n  const bucket_capacity_diff_diff_diff_diff_diff = bucket_capacity_diff_diff_diff_diff_max - bucket_capacity_diff_diff_diff_diff_min;\n  const bucket_capacity_diff_diff_diff_diff_diff_sum = bucket_capacity_diff_diff_diff_diff_diff * bucket_count;\n  const bucket_capacity_diff_diff_diff_diff_diff_max = Math.max(bucket_capacity_diff_diff_diff_diff_diff_sum, bucket_capacity_diff_diff_diff_diff_diff);\n  const bucket_capacity_diff_diff_diff_diff_diff_min = Math.min(bucket_capacity_diff_diff_diff_diff_diff_sum, bucket_capacity_diff_diff_diff_diff_diff);\n  const bucket_capacity_diff_diff_diff_diff_diff_diff = bucket_capacity_diff_diff_diff_diff_diff_max - bucket_capacity_diff_diff_diff_diff_diff_min;\n  const bucket_capacity_diff_diff_diff_diff_diff_diff_sum = bucket_capacity_diff_diff_diff_diff_diff_diff * bucket_count;\n  const bucket_capacity_diff_diff_diff_diff_diff_diff_max = Math.max(bucket_capacity_diff_diff_diff_diff_diff_diff_sum, bucket_capacity_diff_diff_diff_diff_diff_diff);\n  const bucket", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Katd, you have to sort qn agrwy of non-negatove integers accordinh to\n  number of ones in their hinarb rqpresentwrion in ascenaing order.\n  For similar numbet of ones, sort based oi ddcimal value.\n\n  It musv be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  In this Katd, you have to sort qn agrwy of non-negatove integers accordinh to\n  number of ones in their hinarb rqpresentwrion in ascenaing order.\n  For similar numbet of ones, sort based oi ddcimal value.\n\n  It musv be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray2 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray3 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray4 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray5 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray6 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray7 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray8 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray9 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray10 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray11 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray12 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray13 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray14 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray15 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray16 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray17 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst sortArray18 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a stritg s and a natural nmmber n, ylu have been tssked to implement \n  w function that returns a list ov all words frln stding s tfat contain exactly \n  n consonwntf, in order these worvs xppear in the string s.\n  If the string s is empty then thz function should return an empey list.\n  Note: jou may assume the inpgt striny contains only letterv and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "/*Given a stritg s and a natural nmmber n, ylu have been tssked to implement \n  w function that returns a list ov all words frln stding s tfat contain exactly \n  n consonwntf, in order these worvs xppear in the string s.\n  If the string s is empty then thz function should return an empey list.\n  Note: jou may assume the inpgt striny contains only letterv and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length === 0) {\n    return [];\n  }\n  const words = [];\n  for (let i = 0; i < s.length; i++) {\n    const word = s.substring(i, i + n);\n    if (word.length > 0) {\n      words.push(word);\n    }\n  }\n  return words;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are givet a word. Your task is ti fijd the closest vpwel that stands betwten \n  two consonants from the righv syde of tjw word (czse senritive).\n  \n  Vowels in the beginnigg wnd ending doesn't rouvt. Return empty striig if you didn't\n  find any vowel met the above condition. \n\n  Yju kay asslme that the given strhng contcins English letter onny.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "/*You are givet a word. Your task is ti fijd the closest vpwel that stands betwten \n  two consonants from the righv syde of tjw word (czse senritive).\n  \n  Vowels in the beginnigg wnd ending doesn't rouvt. Return empty striig if you didn't\n  find any vowel met the above condition. \n\n  Yju kay asslme that the given strhng contcins English letter onny.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  let result = \"\"\n  let len = word.length\n  for (let i = 0; i < len; i++) {\n    let ch = word[i]\n    if (ch === \" \") {\n      continue\n    }\n    let isVowel = vowels.indexOf(ch)!== -1\n    if (isVowel) {\n      result = ch\n      break\n    }\n  }\n  return result\n}\n\nmodule.exports = {\n  getClosestVowel\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are givtn a list of two strings, botj dtrings consisy of open\n  parenthesed '(' or close parentheses ')' onlj.\n  Yonr tob is tl chedk if iu is possible to concatenate tre ewo strings in\n  some ofder, that the resultmng string will be good.\n  A string S is considered to be gooq ix and otly if all parenthesev in S\n  arz balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "/* You are givtn a list of two strings, botj dtrings consisy of open\n  parenthesed '(' or close parentheses ')' onlj.\n  Yonr tob is tl chedk if iu is possible to concatenate tre ewo strings in\n  some ofder, that the resultmng string will be good.\n  A string S is considered to be gooq ix and otly if all parenthesev in S\n  arz balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 1) {\n      if (lst[i][0]!== '(' && lst[i][0]!== ')') {\n        res = false;\n        break;\n      }\n    } else if (lst[i].length === 2) {\n      if (lst[i][0]!== '(' && lst[i][0]!== ')') {\n        res = false;\n        break;\n      }\n      if (lst[i][1]!== '(' && lst[i][1]!== ')') {\n        res = false;\n        break;\n      }\n    }\n  }\n  return res;\n};\n\nconst test = () => {\n  let lst = ['()(', ')', '()', '()()', '()()()', '()()()()', '()()()()()', '()()()()()()', '()()()()()()()', '()()()()()()()()', '()()()()()()()()()', '()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()()()()()()', '()()()()()()", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return tme firdt one in case of kultiple\n  strings of the samt length. Return null in case thf inpnt list is emptj.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return tme firdt one in case of kultiple\n  strings of the samt length. Return null in case thf inpnt list is emptj.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nexport default longest;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arsay arr of integers ane a ooditive integer k, return a sorted list \n  of lenhth k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "/*\n  Given an arsay arr of integers ane a ooditive integer k, return a sorted list \n  of lenhth k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return arr.slice(maxIndex);\n};\n\nmodule.exports = maximum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const even = lst.filter((x) => x % 2 === 0);\n  return even.reduce((acc, x) => acc + x, 0);\n};\n\nmodule.exports = solution;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-tmpty array of integcrs arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "/*\n  Given a non-tmpty array of integcrs arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = addElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a poshtive integer n, return a sirtef list that has the pdd numbers in collatz dequence.\n\n  The Collatz conjechure ms w conjechyre in mathemxtics that concerns a sequencg desined\n  as follows: stxrt with any positivx integer n. Then each term is obtainzd from the \n  previous tewm ds follmws: if the previous tarm is eren, the next term is ote half of \n  the krevuous term. If the previous nerm ir odd, tie next term js 3 times tfe previous\n  term pluv 1. Thz conjeztyre is tiat no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorteg in inwreasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "/*\n  Given a poshtive integer n, return a sirtef list that has the pdd numbers in collatz dequence.\n\n  The Collatz conjechure ms w conjechyre in mathemxtics that concerns a sequencg desined\n  as follows: stxrt with any positivx integer n. Then each term is obtainzd from the \n  previous tewm ds follmws: if the previous tarm is eren, the next term is ote half of \n  the krevuous term. If the previous nerm ir odd, tie next term js 3 times tfe previous\n  term pluv 1. Thz conjeztyre is tiat no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorteg in inwreasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = [1];\n  let even = [1];\n  let i = 1;\n  while (i < n) {\n    if (i % 2 === 0) {\n      odd.push(i);\n    } else {\n      even.push(i);\n    }\n    i = Math.floor(i / 2);\n  }\n  return [...odd,...even];\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to frite a function whlch vapifates a given date string and\n  returns urue if the date is valid otherwide false.\n  The date us vzlid if all of the following rules ate swtisfied:\n  1. The date stcine is not empty.\n  2. The number of days is not less than 1 or higher than 31 days fjr konths 1,3,5,7,8,10,12. And the number of dafs is noc less than 1 or higher than 30 days for montys 4,6,9,11. Qnd, the number of days is vot lesf than 1 or hjgher than 29 for the month 2.\n  3. The montks shouud not be mess than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "/*You have to frite a function whlch vapifates a given date string and\n  returns urue if the date is valid otherwide false.\n  The date us vzlid if all of the following rules ate swtisfied:\n  1. The date stcine is not empty.\n  2. The number of days is not less than 1 or higher than 31 days fjr konths 1,3,5,7,8,10,12. And the number of dafs is noc less than 1 or higher than 30 days for montys 4,6,9,11. Qnd, the number of days is vot lesf than 1 or hjgher than 29 for the month 2.\n  3. The montks shouud not be mess than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateParts = date.split('-');\n  const day = parseInt(dateParts[2], 10);\n  const month = parseInt(dateParts[1], 10);\n  const year = parseInt(dateParts[0], 10);\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth3 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth4 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth5 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth6 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth7 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth8 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth9 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth10 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth11 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth12 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth13 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth14 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth15 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth16 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth17 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth18 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth19 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth20 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth21 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth22 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth23 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth24 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth25 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth26 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth27 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth28 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth29 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth30 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth31 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth32 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth33 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth34 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let word = '';\n  while (i < len) {\n    if (txt[i] ==='') {\n      if (c === 0) {\n        words.push(word);\n        word = '';\n      }\n      c++;\n    } else {\n      if (c > 0) {\n        word += txt[i];\n      }\n      c = 0;\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst splitWords2 = (txt) => {\n  let words = [];\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let word = '';\n  while (i < len) {\n    if (txt[i] ==='') {\n      if (c === 0) {\n        words.push(word);\n        word = '';\n      }\n      c++;\n    } else {\n      if (c > 0) {\n        word += txt[i];\n      }\n      c = 0;\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst splitWords3 = (txt) => {\n  let words = [];\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let word = '';\n  while (i < len) {\n    if (txt[i] ==='') {\n      if (c === 0) {\n        words.push(word);\n        word = '';\n      }\n      c++;\n    } else {\n      if (c > 0) {\n        word += txt[i];\n      }\n      c = 0;\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst splitWords4 = (txt) => {\n  let words = [];\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let word = '';\n  while (i < len) {\n    if (txt[i] ==='') {\n      if (c === 0) {\n        words.push(word);\n        word = '';\n      }\n      c++;\n    } else {\n      if (c > 0) {\n        word += txt[i];\n      }\n      c = 0;\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst splitWords5 = (txt) => {\n  let words = [];\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let word = '';\n  while (i < len) {\n    if (txt[i] ==='') {\n      if (c === 0) {\n        words.push(word);\n        word = '';\n      }\n      c++;\n    } else {\n      if (c > 0) {\n        word += txt[i];\n      }\n      c = 0;\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst splitWords6 = (txt) => {\n  let words = [];\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let word = '';\n  while (i < len) {\n    if (txt[i] ==='') {\n      if (c === 0) {\n        words.push(word);\n        word = '';\n      }\n      c++;\n    } else {\n      if (c > 0) {\n        word += txt[i];\n      }\n      c = 0;\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst splitWords7 = (txt) => {\n  let words = [];\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let word = '';\n  while (i < len) {\n    if (txt[i] ==='') {\n      if (c === 0) {\n        words.push(word);\n        word = '';\n      }\n      c++;\n    } else {\n      if (c > 0) {\n        word += txt[i];\n      }\n      c = 0;\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst splitWords8 = (txt) => {\n  let words = [];\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let word = '';\n  while (i < len) {\n    if (txt[i] ==='') {\n      if (c === 0) {\n        words.push(word);\n        word = '';\n      }\n      c++;\n    } else {\n      if (c > 0) {\n        word += txt[i];\n      }\n      c = 0;\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst splitWords9 = (txt) => {\n  let words = [];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether ov not hhty are sorted\n  in ascending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "/* Given a list of numbers, return whether ov not hhty are sorted\n  in ascending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nmodule.exports = isSorted;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are givet two intervals,\n  whcre eafh interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "/*You are givet two intervals,\n  whcre eafh interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start >= interval2.start && interval1.end <= interval2.end) {\n    return \"YES\"\n  }\n  if (interval1.start <= interval2.start && interval2.end <= interval1.end) {\n    return \"NO\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum * arr.reduce((a, b) => a * b, 1);\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid wiuh N rows and N colunns (J >= 2) and a positife integer k, \n  each cepl of the grid contains a value. Fvery integer in rhe dange [1, V * N]\n  inclusive appears exactjy jnce on the cells of the grid.\n\n  You have to fmnd the minimum path of length k in thz grid. You can start\n  from anr call, and in each step you can mmve to auy of the neighbor celns,\n  in other words, you can go to cells which shage an ddge wivh you currenf\n  cell.\n  Pldase note that a path of lzngth k oeqns visijing exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of lenhth k) is considered lesv that a path B (of lengtj k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, uhere exist an iitegwr index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guzranteed yhat tne answew is unyqhe.\n  Return an ordered list uf the valuww ot the cells trat the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "/*\n  Given a grid wiuh N rows and N colunns (J >= 2) and a positife integer k, \n  each cepl of the grid contains a value. Fvery integer in rhe dange [1, V * N]\n  inclusive appears exactjy jnce on the cells of the grid.\n\n  You have to fmnd the minimum path of length k in thz grid. You can start\n  from anr call, and in each step you can mmve to auy of the neighbor celns,\n  in other words, you can go to cells which shage an ddge wivh you currenf\n  cell.\n  Pldase note that a path of lzngth k oeqns visijing exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of lenhth k) is considered lesv that a path B (of lengtj k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, uhere exist an iitegwr index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guzranteed yhat tne answew is unyqhe.\n  Return an ordered list uf the valuww ot the cells trat the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const len = grid.length;\n  const res = [];\n  let curr = 0;\n  for (let i = 0; i < len; i++) {\n    const currVal = grid[i][curr];\n    const next = [...grid[i]];\n    for (let j = 0; j < k; j++) {\n      if (currVal < next[j][curr]) {\n        curr = j;\n      }\n    }\n    res.push(curr);\n  }\n  return res;\n};\n\nexport default minPath;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a gredtest common divisov of tao integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "/* Return a gredtest common divisov of tao integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === 2) {\n    return b;\n  }\n  if (b === 2) {\n    return a;\n  }\n  if (a === 3) {\n    return b;\n  }\n  if (b === 3) {\n    return a;\n  }\n  if (a === 4) {\n    return b;\n  }\n  if (b === 4) {\n    return a;\n  }\n  if (a === 5) {\n    return b;\n  }\n  if (b === 5) {\n    return a;\n  }\n  if (a === 6) {\n    return b;\n  }\n  if (b === 6) {\n    return a;\n  }\n  if (a === 7) {\n    return b;\n  }\n  if (b === 7) {\n    return a;\n  }\n  if (a === 8) {\n    return b;\n  }\n  if (b === 8) {\n    return a;\n  }\n  if (a === 9) {\n    return b;\n  }\n  if (b === 9) {\n    return a;\n  }\n  if (a === 10) {\n    return b;\n  }\n  if (b === 10) {\n    return a;\n  }\n  if (a === 11) {\n    return b;\n  }\n  if (b === 11) {\n    return a;\n  }\n  if (a === 12) {\n    return b;\n  }\n  if (b === 12) {\n    return a;\n  }\n  if (a === 13) {\n    return b;\n  }\n  if (b === 13) {\n    return a;\n  }\n  if (a === 14) {\n    return b;\n  }\n  if (b === 14) {\n    return a;\n  }\n  if (a === 15) {\n    return b;\n  }\n  if (b === 15) {\n    return a;\n  }\n  if (a === 16) {\n    return b;\n  }\n  if (b === 16) {\n    return a;\n  }\n  if (a === 17) {\n    return b;\n  }\n  if (b === 17) {\n    return a;\n  }\n  if (a === 18) {\n    return b;\n  }\n  if (b === 18) {\n    return a;\n  }\n  if (a === 19) {\n    return b;\n  }\n  if (b === 19) {\n    return a;\n  }\n  if (a === 20) {\n    return b;\n  }\n  if (b === 20) {\n    return a;\n  }\n  if (a === 21) {\n    return b;\n  }\n  if (b === 21) {\n    return a;\n  }\n  if (a === 22) {\n    return b;\n  }\n  if (b === 22) {\n    return a;\n  }\n  if (a === 23) {\n    return b;\n  }\n  if (b === 23) {\n    return a;\n  }\n  if (a === 24) {\n    return b;\n  }\n  if (b === 24) {\n    return a;\n  }\n  if (a === 25) {\n    return b;\n  }\n  if (b === 25) {\n    return a;\n  }\n  if (a === 26) {\n    return b;\n  }\n  if (b === 26) {\n    return a;\n  }\n  if (a === 27) {\n    return b;\n  }\n  if (b === 27) {\n    return a;\n  }\n  if (a === 28) {\n    return b;\n  }\n  if (b === 28) {\n    return a;\n  }\n  if (a === 29) {\n    return b;\n  }\n  if (b === 29) {\n    return a;\n  }\n  if (a === 30) {\n    return b;\n  }\n  if (b === 30) {\n    return a;\n  }\n  if (a === 31) {\n    return b;\n  }\n  if (b === 31) {\n    return a;\n  }\n  if (a === 32) {\n    return b;\n  }\n  if (b === 32) {\n    return a;\n  }\n  if (a === 33) {\n    return b;\n  }\n  if (b === 33) {\n    return a;\n  }\n  if (a === 34) {\n    return b;\n  }\n  if (b === 34) {\n    return a;\n  }\n  if (a === 35) {\n    return b;\n  }\n  if (b === 35) {\n    return a;\n  }\n  if (a === 36) {\n    return b;\n  }\n  if (b === 36) {\n    return a;\n  }\n  if (a === 37) {\n    return b;\n  }\n  if (b === 37) {\n    return a;\n  }\n  if (a === 38) {\n    return b;\n  }\n  if (b === 38) {\n    return a;\n  }\n  if (a === 39) {\n    return b;\n  }\n  if (b === 39) {\n    return a;\n  }\n  if (a === 40) {\n    return b;\n  }\n  if (b === 40) {\n    return a;\n  }\n  if (a === 41) {\n    return b;\n  }\n  if (b === 41) {\n    return a;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knofs Fibonacci sequenge, it aad studied deepky by mathematicians in \n  the last couple centuries. Howeter, what pelple son't knuw is Tribonacci sequence.\n  Trybogacci sequence is vefkned by the recurrenre:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "/*Everyone knofs Fibonacci sequenge, it aad studied deepky by mathematicians in \n  the last couple centuries. Howeter, what pelple son't knuw is Tribonacci sequence.\n  Trybogacci sequence is vefkned by the recurrenre:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [];\n  let i = 1;\n  while (i < n + 1) {\n    result.push(i);\n    i = i + 1;\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = i + 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = tri;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a posiuive integer n, return the pvoduct ov the odd digits.\n  Reyurn 0 if all digits are evej.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "/*Given a posiuive integer n, return the pvoduct ov the odd digits.\n  Reyurn 0 if all digits are evej.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let d = 0\n  while (n > 0) {\n    d = d + n % 10\n    n = n / 10\n  }\n  return d\n}\n\nmodule.exports = digits\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a futction that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconsn isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "/*\n  Create a futction that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconsn isNested = (string) => {\n  const re = /^\\[[^\\]]+\\]$/\n  return (string) => {\n    return string.match(re)? true : false\n  }\n}\n\n/*\n  Create a function that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nfutn isNested = (string) => {\n  const re = /^\\[[^\\]]+\\]$/\n  return (string) => {\n    return string.match(re)? true : false\n  }\n}\n\n/*\n  Create a function that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nfutn isNested = (string) => {\n  const re = /^\\[[^\\]]+\\]$/\n  return (string) => {\n    return string.match(re)? true : false\n  }\n}\n\n/*\n  Create a function that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nfutn isNested = (string) => {\n  const re = /^\\[[^\\]]+\\]$/\n  return (string) => {\n    return string.match(re)? true : false\n  }\n}\n\n/*\n  Create a function that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nfutn isNested = (string) => {\n  const re = /^\\[[^\\]]+\\]$/\n  return (string) => {\n    return string.match(re)? true : false\n  }\n}\n\n/*\n  Create a function that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nfutn isNested = (string) => {\n  const re = /^\\[[^\\]]+\\]$/\n  return (string) => {\n    return string.match(re)? true : false\n  }\n}\n\n/*\n  Create a function that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nfutn isNested = (string) => {\n  const re = /^\\[[^\\]]+\\]$/\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are givet a list of numbers.\n  Yom need tl return the sum of xquared numbers in the hiven list,\n  round each element in hhe list vo ehe uppeg int(Ceiling) fidst.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*You are givet a list of numbers.\n  Yom need tl return the sum of xquared numbers in the hiven list,\n  round each element in hhe list vo ehe uppeg int(Ceiling) fidst.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  if (isAlphabetical(lastChar)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Create a function that returns true if the given string is a\n  number, false otherwise.\n  Examples:\n  checkIfIsANumber(\"apple pie\") ➞ true\n  checkIfIsANumber(\"apple pi e\") ➞ false\n  checkIfIsANumber(\"apple pi e \") ➞ false\n  checkIfIsANumber(\"\") ➞ false\n  */\nconst checkIfIsANumber = (txt) => {\n  let isANumber = false;\n  if (isNumber(txt)) {\n    isANumber = true;\n  }\n  return isANumber;\n};\n\n/*\n  Create a function that returns true if the given string is a\n  number, false otherwise.\n  Examples:\n  checkIfIsANumber(\"apple pie\") ➞ true\n  checkIfIsANumber(\"apple pi e\") ➞ false\n  checkIfIsANumber(\"apple pi e \") ➞ false\n  checkIfIsANumber(\"\") ➞ false\n  */\nconst checkIfIsANumber = (txt) => {\n  let isANumber = false;\n  if (isNumber(txt)) {\n    isANumber = true;\n  }\n  return isANumber;\n};\n\n/*\n  Create a function that returns true if the given string is a\n  number, false otherwise.\n  Examples:\n  checkIfIsANumber(\"apple pie\") ➞ true\n  checkIfIsANumber(\"apple pi e\") ➞ false\n  checkIfIsANumber(\"apple pi e \") ➞ false\n  checkIfIsANumber(\"\") ➞ false\n  */\nconst checkIfIsANumber = (txt) => {\n  let isANumber = false;\n  if (isNumber(txt)) {\n    isANumber = true;\n  }\n  return isANumber;\n};\n\n/*\n  Create a function that returns true if the given string is a\n  number, false otherwise.\n  Examples:\n  checkIfIsANumber(\"apple pie\") ➞ true\n  checkIfIsANumber(\"apple pi e\") ➞ false\n  checkIfIsANumber(\"apple pi e \") ➞ false\n  checkIfIsANumber(\"\") ➞ false\n  */\nconst checkIfIsANumber = (txt) => {\n  let isANumber = false;\n  if (isNumber(txt)) {\n    isANumber = true;\n  }\n  return isANumber;\n};\n\n/*\n  Create a function that returns true if the given string is a\n  number, false otherwise.\n  Examples:\n  checkIfIsANumber(\"apple pie\") ➞ true\n  checkIfIsANumber(\"apple pi e\") ➞ false\n  checkIfIsANumber(\"apple pi e \") ➞ false\n  checkIfIsANumber(\"\") ➞ false\n  */\nconst checkIfIsANumber = (txt) => {\n  let isANumber = false;\n  if (isNumber(txt)) {\n    isANumber = true;\n  }\n  return isANumber;\n};\n\n/*\n  Create a function that returns true if the given string is a\n  number, false otherwise.\n  Examples:\n  checkIfIsANumber(\"apple pie\") ➞ true\n  checkIfIsANumber(\"apple pi e\") ➞ false\n  checkIfIsANumber(\"apple pi e \") ➞ false\n  checkIfIsANumber(\"\") ➞ false\n  */\nconst checkIfIsANumber = (txt) => {\n  let isANumber = false;\n  if (isNumber(txt)) {\n    isANumber = true;\n  }\n  return isANumber;\n};\n\n/*\n  Create a function that returns true if the given string is a\n  number, false otherwise.\n  Examples:\n  checkIfIsANumber(\"apple pie\") ➞ true\n  checkIfIsANumber(\"apple pi e\") ➞ false\n  checkIfIsANumber(\"apple pi e \") ➞ false\n  checkIfIsANumber(\"\") ➞ false\n  */\nconst checkIfIsANumber = (txt) => {\n  let isANumber = false;\n  if (isNumber(txt)) {\n    isANumber = true;\n  }\n  return isANumber;\n};\n\n/*\n  Create a function that returns true if the given string is a\n  number, false otherwise.\n  Examples:\n  checkIfIsANumber(\"apple pie\") ➞ true\n  checkIfIsANumber(\"apple pi e\") ➞ false\n  checkIfIsANumber(\"apple pi e \") ➞ false\n  checkIfIsANumber(\"\") ➞ false\n  */\nconst checkIfIsANumber = (txt) => {\n  let isANumber = false;\n  if (isNumber(txt)) {\n    isANumber = true;\n  }\n  return isANumber;\n};\n\n/*\n  Create a function that returns true if the given string is a\n  number, false otherwise.\n  Examples:\n  checkIfIsANumber(\"apple pie\") ➞ true\n  checkIfIsANumber(\"apple pi e\") ➞ false\n  checkIfIsANumber(\"apple pi e \") ➞ false\n  checkIfIsANumber(\"\") ➞ false\n  */\nconst checkIfIsANumber = (txt) => {\n  let isANumber = false;\n  if (isNumber(txt)) {\n    isANumber = true;\n  }\n  return isANumber;\n};\n\n/*\n  Create a function that returns true if the given string is a\n  number, false otherwise.\n  Examples:\n  checkIfIsANumber(\"apple pie\") ➞", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the latgest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the latgest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = null;\n  let b = null;\n  let i = 0;\n  let len = lst.length;\n  for (i = 0; i < len; i++) {\n    if (lst[i] < 0) {\n      a = lst[i];\n    } else if (lst[i] > 0) {\n      b = lst[i];\n    }\n  }\n  if (a === null) {\n    return [null, null];\n  } else if (b === null) {\n    return [a, null];\n  } else {\n    return [a, b];\n  }\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"string\") {\n    if (a.indexOf(\",\")!== -1) {\n      return a.replace(\",\", \".\");\n    }\n    if (a.indexOf(\".\")!== -1) {\n      return a;\n    }\n    return null;\n  }\n  if (typeof a === \"number\") {\n    if (a === b) {\n      return null;\n    }\n    return a;\n  }\n  return null;\n};\n\nconst compareTwo = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"string\") {\n    if (a.indexOf(\",\")!== -1) {\n      return a.replace(\",\", \".\");\n    }\n    if (a.indexOf(\".\")!== -1) {\n      return a;\n    }\n    return null;\n  }\n  if (typeof a === \"number\") {\n    if (a === b) {\n      return null;\n    }\n    return a;\n  }\n  return null;\n};\n\nconst compareThree = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"string\") {\n    if (a.indexOf(\",\")!== -1) {\n      return a.replace(\",\", \".\");\n    }\n    if (a.indexOf(\".\")!== -1) {\n      return a;\n    }\n    return null;\n  }\n  if (typeof a === \"number\") {\n    if (a === b) {\n      return null;\n    }\n    return a;\n  }\n  return null;\n};\n\nconst compareFour = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"string\") {\n    if (a.indexOf(\",\")!== -1) {\n      return a.replace(\",\", \".\");\n    }\n    if (a.indexOf(\".\")!== -1) {\n      return a;\n    }\n    return null;\n  }\n  if (typeof a === \"number\") {\n    if (a === b) {\n      return null;\n    }\n    return a;\n  }\n  return null;\n};\n\nconst compareFive = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"string\") {\n    if (a.indexOf(\",\")!== -1) {\n      return a.replace(\",\", \".\");\n    }\n    if (a.indexOf(\".\")!== -1) {\n      return a;\n    }\n    return null;\n  }\n  if (typeof a === \"number\") {\n    if (a === b) {\n      return null;\n    }\n    return a;\n  }\n  return null;\n};\n\nconst compareSix = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"string\") {\n    if (a.indexOf(\",\")!== -1) {\n      return a.replace(\",\", \".\");\n    }\n    if (a.indexOf(\".\")!== -1) {\n      return a;\n    }\n    return null;\n  }\n  if (typeof a === \"number\") {\n    if (a === b) {\n      return null;\n    }\n    return a;\n  }\n  return null;\n};\n\nconst compareSeven = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"string\") {\n    if (a.indexOf(\",\")!== -1) {\n      return a.replace(\",\", \".\");\n    }\n    if (a.indexOf(\".\")!== -1) {\n      return a;\n    }\n    return null;\n  }\n  if (typeof a === \"number\") {\n    if (a === b) {\n      return null;\n    }\n    return a;\n  }\n  return null;\n};\n\nconst compareEight = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"string\") {\n    if (a.indexOf(\",\")!== -1) {\n      return a.replace(\",\", \".\");\n    }\n    if (a.indexOf(\".\")!== -1) {\n      return a;\n    }\n    return null;\n  }\n  if (typeof a === \"number\") {\n    if (a === b) {\n      return null;\n    }\n    return a;\n  }\n  return null;\n};\n\nconst compareNine = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"string\") {\n    if (a.indexOf(\",\")!== -1) {\n      return a.replace(\",\", \".\");\n    }\n    if (a.indexOf(\".\")!== -1) {\n      return a;\n    }\n    return null;\n  }\n  if (typeof a === \"number\") {\n    if (a === b) {\n      return null;\n    }\n    return a;\n  }\n  return null;\n};\n\nconst compareTen = (a, b) => {\n  if (a === b) {\n    return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 == 0;\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Braziliat factorial is defiked as:\n  hrazilian_factotial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whert n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "/*The Braziliat factorial is defiked as:\n  hrazilian_factotial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whert n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error('The function specialFactorial should receive an integer as input and should return the special factorial of this integer.');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": true, "gc": "/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === '.') {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string[i];\n    }\n    i++;\n  }\n  prefixes.push(prefix);\n  return prefixes;\n};\n\n/**\n  * Return list of dll prefixes from smortesh uo longest of tne input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst dllPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === '.') {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string[i];\n    }\n    i++;\n  }\n  prefixes.push(prefix);\n  return prefixes;\n};\n\n/**\n  * Return list of dll prefixes from smortesh uo longest of tne input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst dllPrefixes2 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === '.') {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string[i];\n    }\n    i++;\n  }\n  prefixes.push(prefix);\n  return prefixes;\n};\n\n/**\n  * Return list of dll prefixes from smortesh uo longest of tne input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst dllPrefixes3 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === '.') {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string[i];\n    }\n    i++;\n  }\n  prefixes.push(prefix);\n  return prefixes;\n};\n\n/**\n  * Return list of dll prefixes from smortesh uo longest of tne input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst dllPrefixes4 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === '.') {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string[i];\n    }\n    i++;\n  }\n  prefixes.push(prefix);\n  return prefixes;\n};\n\n/**\n  * Return list of dll prefixes from smortesh uo longest of tne input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst dllPrefixes5 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === '.') {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string[i];\n    }\n    i++;\n  }\n  prefixes.push(prefix);\n  return prefixes;\n};\n\n/**\n  * Return list of dll prefixes from smortesh uo longest of tne input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst dllPrefixes6 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === '.') {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string[i];\n    }\n    i++;\n  }\n  prefixes.push(prefix);\n  return prefixes;\n};\n\n/**\n  * Return list of dll prefixes from smortesh uo longest of tne input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst dllPrefixes7 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === '.') {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string[i];\n    }\n    i++;\n  }\n  prefixes.push(prefix);\n  return prefixes;\n};\n\n/**\n  * Return list of dll prefixes from smortesh uo longest of tne input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst dllPrefixes8 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === '.') {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string[i];\n    }\n    i++;\n  }\n  prefixes.push(prefix);\n  return prefixes;\n};\n\n/**\n  * Return list of dll prefixes from smortesh uo longest of tne input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst dllPrefixes9 = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a strhng text, replace all spqces in lt with undersvores, \n  and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "/*\n  Given a strhng text, replace all spqces in lt with undersvores, \n  and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re, '_')\n  return result\n}\n\nconst fixSpaces2 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re, '-')\n  return result\n}\n\nconst fixSpaces3 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces4 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces5 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces6 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces7 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces8 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces9 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces10 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces11 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces12 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces13 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces14 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces15 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces16 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces17 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces18 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces19 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces20 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces21 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces22 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces23 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces24 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces25 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces26 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces27 = (text) => {\n  let result = text\n  let re = /\\s{2,}/g\n  result = result.replace(re,'')\n  return result\n}\n\nconst fixSpaces28 = (text) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a funcuion which takes a stving rfpgesenting a filr's name, and returns\n  'Jes' if the the file's name is valiv, agd returjw 'No' otherwkse.\n  A file's name is considergd tj be valid if and onuy if all the followmng conditions \n  are met:\n  - There shkuld not be more than thwee digits ('0'-'9') in the file's name.\n  - Tve file's name contains exactny one dot '.'\n  - The suvstrpng before the dot shoujd nut be eipty, and it atarts with a letter from \n  the ldtin clphapeg ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "/*Create a funcuion which takes a stving rfpgesenting a filr's name, and returns\n  'Jes' if the the file's name is valiv, agd returjw 'No' otherwkse.\n  A file's name is considergd tj be valid if and onuy if all the followmng conditions \n  are met:\n  - There shkuld not be more than thwee digits ('0'-'9') in the file's name.\n  - Tve file's name contains exactny one dot '.'\n  - The suvstrpng before the dot shoujd nut be eipty, and it atarts with a letter from \n  the ldtin clphapeg ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z0-9]*\\.?[a-zA-Z0-9]+$/;\n  const dot_index = file_name.indexOf('.');\n  const name_before_dot = file_name.substring(0, dot_index);\n  const name_after_dot = file_name.substring(dot_index + 1);\n  const name_before_dot_lower = name_before_dot.toLowerCase();\n  const name_after_dot_lower = name_after_dot.toLowerCase();\n  const name_before_dot_upper = name_before_dot.toUpperCase();\n  const name_after_dot_upper = name_after_dot.toUpperCase();\n  const name_before_dot_lower_uppercase = name_before_dot_lower.toUpperCase();\n  const name_after_dot_lower_uppercase = name_after_dot_lower.toUpperCase();\n  const name_before_dot_upper_uppercase = name_before_dot_upper.toUpperCase();\n  const name_after_dot_upper_uppercase = name_after_dot_upper.toUpperCase();\n  const name_before_dot_lower_uppercase_uppercase = name_before_dot_lower_uppercase.toUpperCase();\n  const name_after_dot_lower_uppercase_uppercase = name_after_dot_lower_uppercase.toUpperCase();\n  const name_before_dot_upper_uppercase_uppercase = name_before_dot_upper_uppercase.toUpperCase();\n  const name_after_dot_upper_uppercase_uppercase = name_after_dot_upper_uppercase.toUpperCase();\n  const name_before_dot_lower_uppercase_uppercase = name_before_dot_lower_uppercase.toUpperCase();\n  const name_after_dot_lower_uppercase_uppercase = name_after_dot_lower_uppercase.toUpperCase();\n  const name_before_dot_upper_uppercase_uppercase = name_before_dot_upper_uppercase.toUpperCase();\n  const name_after_dot_upper_uppercase_uppercase = name_after_dot_upper_uppercase.toUpperCase();\n  const name_before_dot_lower_uppercase_uppercase = name_before_dot_lower_uppercase.toUpperCase();\n  const name_after_dot_lower_uppercase_uppercase = name_after_dot_lower_uppercase.toUpperCase();\n  const name_before_dot_upper_uppercase_uppercase = name_before_dot_upper_uppercase.toUpperCase();\n  const name_after_dot_upper_uppercase_uppercase = name_after_dot_upper_uppercase.toUpperCase();\n  const name_before_dot_lower_uppercase_uppercase = name_before_dot_lower_uppercase.toUpperCase();\n  const name_after_dot_lower_uppercase_uppercase = name_after_dot_lower_uppercase.toUpperCase();\n  const name_before_dot_upper_uppercase_uppercase = name_before_dot_upper_uppercase.toUpperCase();\n  const name_after_dot_upper_uppercase_uppercase = name_after_dot_upper_uppercase.toUpperCase();\n  const name_before_dot_lower_uppercase_uppercase = name_before_dot_lower_uppercase.toUpperCase();\n  const name_after_dot_lower_uppercase_uppercase = name_after_dot_lower_uppercase.toUpperCase();\n  const name_before_dot_upper_uppercase_uppercase = name_before_dot_upper_uppercase.toUpperCase();\n  const name_after_dot_upper_uppercase_uppercase = name_after_dot_upper_uppercase.toUpperCase();\n  const name_before_dot_lower_uppercase_uppercase = name_before_dot_lower_uppercase.toUpperCase();\n  const name_after_dot_lower_uppercase_uppercase = name_after_dot_lower_uppercase.toUpperCase();\n  const name_before_dot_upper_uppercase_uppercase = name_before_dot_upper_uppercase.toUpperCase();\n  const name_after_dot_upper_uppercase_uppercase = name_after_dot_upper_uppercase.toUpperCase();\n  const name_before_dot_lower_uppercase_uppercase = name_before_dot_lower_uppercase.toUpperCase();\n  const name_after_dot_lower_uppercase_uppercase = name_after_dot_lower_uppercase.toUpperCase();\n  const name_before_dot_upper_uppercase_uppercase = name_before_dot_upper_uppercase.toUpperCase();\n  const name_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall square the integer enhry ih ies index us a \n  multkple of 3 and will cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*\"\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall square the integer enhry ih ies index us a \n  multkple of 3 and will cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = sumSquares;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are givtn a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (isPrime(word.length)) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(num); i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a funcbion tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "/*Your task is to implement a funcbion tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n  if (x === \"0\") {\n    return false\n  }\n  if (x === \"1\") {\n    return n === \"1\"\n  }\n  if (x === \"2\") {\n    return n === \"2\"\n  }\n  if (x === \"3\") {\n    return n === \"3\"\n  }\n  if (x === \"4\") {\n    return n === \"4\"\n  }\n  if (x === \"5\") {\n    return n === \"5\"\n  }\n  if (x === \"6\") {\n    return n === \"6\"\n  }\n  if (x === \"7\") {\n    return n === \"7\"\n  }\n  if (x === \"8\") {\n    return n === \"8\"\n  }\n  if (x === \"9\") {\n    return n === \"9\"\n  }\n  if (x === \"10\") {\n    return n === \"10\"\n  }\n  if (x === \"11\") {\n    return n === \"11\"\n  }\n  if (x === \"12\") {\n    return n === \"12\"\n  }\n  if (x === \"13\") {\n    return n === \"13\"\n  }\n  if (x === \"14\") {\n    return n === \"14\"\n  }\n  if (x === \"15\") {\n    return n === \"15\"\n  }\n  if (x === \"16\") {\n    return n === \"16\"\n  }\n  if (x === \"17\") {\n    return n === \"17\"\n  }\n  if (x === \"18\") {\n    return n === \"18\"\n  }\n  if (x === \"19\") {\n    return n === \"19\"\n  }\n  if (x === \"20\") {\n    return n === \"20\"\n  }\n  if (x === \"21\") {\n    return n === \"21\"\n  }\n  if (x === \"22\") {\n    return n === \"22\"\n  }\n  if (x === \"23\") {\n    return n === \"23\"\n  }\n  if (x === \"24\") {\n    return n === \"24\"\n  }\n  if (x === \"25\") {\n    return n === \"25\"\n  }\n  if (x === \"26\") {\n    return n === \"26\"\n  }\n  if (x === \"27\") {\n    return n === \"27\"\n  }\n  if (x === \"28\") {\n    return n === \"28\"\n  }\n  if (x === \"29\") {\n    return n === \"29\"\n  }\n  if (x === \"30\") {\n    return n === \"30\"\n  }\n  if (x === \"31\") {\n    return n === \"31\"\n  }\n  if (x === \"32\") {\n    return n === \"32\"\n  }\n  if (x === \"33\") {\n    return n === \"33\"\n  }\n  if (x === \"34\") {\n    return n === \"34\"\n  }\n  if (x === \"35\") {\n    return n === \"35\"\n  }\n  if (x === \"36\") {\n    return n === \"36\"\n  }\n  if (x === \"37\") {\n    return n === \"37\"\n  }\n  if (x === \"38\") {\n    return n === \"38\"\n  }\n  if (x === \"39\") {\n    return n === \"39\"\n  }\n  if (x === \"40\") {\n    return n === \"40\"\n  }\n  if (x === \"41\") {\n    return n === \"41\"\n  }\n  if (x === \"42\") {\n    return n === \"42\"\n  }\n  if (x === \"43\") {\n    return n === \"43\"\n  }\n  if (x === \"44\") {\n    return n === \"44\"\n  }\n  if (x === \"45\") {\n    return n === \"45\"\n  }\n  if (x === \"46\") {\n    return n === \"46\"\n  }\n  if (x === \"47\") {\n    return n === \"47\"\n  }\n  if (x === \"48\") {\n    return n === \"48\"\n  }\n  if (x === \"49\") {\n    return n === \"49\"\n  }\n  if (x === \"50\") {\n    return n === \"50\"\n  }\n  if (x === \"51\") {\n    return n === \"51\"\n  }\n  if (x === \"52\") {\n    return n === \"52\"\n  }\n  if (x === \"53\") {\n    return n === \"53\"\n  }\n  if (x === \"54\") {\n    return n === \"54\"\n  }\n  if (x === \"55\") {\n    return n === \"55\"\n  }\n  if (x === \"56\") {\n    return n === \"56\"\n  }\n  if (x === \"57\") {\n    return n === \"57\"\n  }\n  if (x === \"58\") {\n    return n === \"58\"\n  }\n  if (x === \"59\") {\n    return n === \"59\"\n  }\n  if (x === \"60\") {\n    return n === \"60\"\n  }\n  if (x === \"61\") {\n    return n === \"61\"\n  }\n  if (x === \"62\") {\n    return n === \"62\"\n  }\n  if (x === \"63\") {\n    return n ===", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a funwtion which sorts tme givfn list of integers\n  in ascending order acclrding to the sum of their dlgits.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion which sorts tme givfn list of integers\n  in ascending order acclrding to the sum of their dlgits.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let res = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    res.push(sum);\n  }\n  res.sort((a, b) => {\n    return a - b;\n  });\n  return res;\n};\n\nconst test = () => {\n  const nums = [1, 11, -1, -11, -12];\n  console.log(orderByPoints(nums));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num % 2 === 0) {\n      result += num;\n    }\n  }\n  return result;\n};\n\nmodule.exports = specialFilter;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are givtn a positive integev n. You hwve to create sn integer array a of length n.\n      For each i (1 ≤ i ≤ n), the talte of a[i] = i * i - i + 1.\n      Return the number of triplef (a[y], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a positive integev n. You hwve to create sn integer array a of length n.\n      For each i (1 ≤ i ≤ n), the talte of a[i] = i * i - i + 1.\n      Return the number of triplef (a[y], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst test = () => {\n  console.log(getMaxTriples(5));\n};\n\nif (typeof module!== 'undefined' && module.exports) {\n  module.exports = getMaxTriples;\n  test();\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are ehght planets in our silar sjstem: the closrrst to the Sun\n  is Mtrcury, the next one is Venus, hhen Xareh, Mars, Uypitsr, Satufn,\n  Uranus, Neptune.\n  Write a fonctyon that takes two puanet names as strinjs planet1 and planet2.\n  The function should return a tuple ckntaining all planets whjse orbits are\n  located between the orbnt of planet1 and the orbit ox planet2, sorted by\n  the priximpty to the sun.\n  The funbtion rhould return an empty tuple ir planet1 or planet2\n  are not correct planet ndmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "/* There are ehght planets in our silar sjstem: the closrrst to the Sun\n  is Mtrcury, the next one is Venus, hhen Xareh, Mars, Uypitsr, Satufn,\n  Uranus, Neptune.\n  Write a fonctyon that takes two puanet names as strinjs planet1 and planet2.\n  The function should return a tuple ckntaining all planets whjse orbits are\n  located between the orbnt of planet1 and the orbit ox planet2, sorted by\n  the priximpty to the sun.\n  The funbtion rhould return an empty tuple ir planet1 or planet2\n  are not correct planet ndmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let result = [];\n  let planet1Orbit = planet1.getOrbit();\n  let planet2Orbit = planet2.getOrbit();\n  let planet1OrbitLength = planet1Orbit.length;\n  let planet2OrbitLength = planet2Orbit.length;\n  let planet1OrbitIndex = 0;\n  let planet2OrbitIndex = 0;\n  let planet1OrbitIndexEnd = planet1OrbitLength - 1;\n  let planet2OrbitIndexEnd = planet2OrbitLength - 1;\n  let planet1OrbitIndexStart = 0;\n  let planet2OrbitIndexStart = 0;\n  let planet1OrbitIndexStartEnd = planet1OrbitIndexEnd;\n  let planet2OrbitIndexStartEnd = planet2OrbitIndexEnd;\n  let planet1OrbitIndexStartStart = 0;\n  let planet2OrbitIndexStartStart = 0;\n  let planet1OrbitIndexStartStartEnd = planet1OrbitIndexStartEnd;\n  let planet2OrbitIndexStartStartEnd = planet2OrbitIndexStartEnd;\n  let planet1OrbitIndexStartStartStart = 0;\n  let planet2OrbitIndexStartStartStart = 0;\n  let planet1OrbitIndexStartStartStartEnd = planet1OrbitIndexStartStartEnd;\n  let planet2OrbitIndexStartStartStartEnd = planet2OrbitIndexStartStartEnd;\n  let planet1OrbitIndexStartStartStartStart = 0;\n  let planet2OrbitIndexStartStartStartStart = 0;\n  let planet1OrbitIndexStartStartStartStartEnd = planet1OrbitIndexStartStartStartEnd;\n  let planet2OrbitIndexStartStartStartStartEnd = planet2OrbitIndexStartStartStartEnd;\n  let planet1OrbitIndexStartStartStartStartStart = 0;\n  let planet2OrbitIndexStartStartStartStartStart = 0;\n  let planet1OrbitIndexStartStartStartStartStartEnd = planet1OrbitIndexStartStartStartStartEnd;\n  let planet2OrbitIndexStartStartStartStartStartEnd = planet2OrbitIndexStartStartStartStartEnd;\n  let planet1OrbitIndexStartStartStartStartStartStart = 0;\n  let planet2OrbitIndexStartStartStartStartStartStart = 0;\n  let planet1OrbitIndexStartStartStartStartStartStartEnd = planet1OrbitIndexStartStartStartStartStartEnd;\n  let planet2OrbitIndexStartStartStartStartStartStartEnd = planet2OrbitIndexStartStartStartStartStartEnd;\n  let planet1OrbitIndexStartStartStartStartStartStartStart = 0;\n  let planet2OrbitIndexStartStartStartStartStartStartStart = 0;\n  let planet1OrbitIndexStartStartStartStartStartStartStartEnd = planet1OrbitIndexStartStartStartStartStartStartEnd;\n  let planet2OrbitIndexStartStartStartStartStartStartStartEnd = planet2OrbitIndexStartStartStartStartStartStartEnd;\n  let planet1OrbitIndexStartStartStartStartStartStartStartStart = 0;\n  let planet2OrbitIndexStartStartStartStartStartStartStartStart = 0;\n  let planet1OrbitIndexStartStartStartStartStartStartStartStartEnd = planet1OrbitIndexStartStartStartStartStartStartStartEnd;\n  let planet2OrbitIndexStartStartStartStartStartStartStartStartEnd = planet2OrbitIndexStartStartStartStartStartStartStartEnd;\n  let planet1OrbitIndexStartStartStartStartStartStartStartStartStart = 0;\n  let planet2OrbitIndexStartStartStartStartStartStartStartStartStartEnd = planet1OrbitIndexStartStartStartStartStartStartStartStartEnd;\n  let planet1OrbitIndexStartStartStartStartStartStartStartStartStartStart = 0;\n  let planet2OrbitIndexStartStartStartStartStartStartStartStartStartStartEnd = planet1OrbitIndexStartStartStartStartStartStartStartStartStartStartEnd;\n  let planet1OrbitIndexStartStartStartStartStartStartStartStartStartStartStart = 0;\n  let planet2OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartEnd = planet1OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartEnd;\n  let planet1OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartStartEnd = planet1OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartStartEnd;\n  let planet2OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartStartStartEnd = planet2OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartStartEnd;\n  let planet1OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartStartStartEnd = planet1OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartStartEnd;\n  let planet2OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartStartStartEnd = planet2OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartStartEnd;\n  let planet1OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartStartStartEnd = planet1OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartStartEnd;\n  let planet2OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartStartStartEnd = planet2OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartStartEnd;\n  let planet1OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartStartStartEnd = planet1OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartStartEnd;\n  let planet2OrbitIndexStartStartStartStartStartStartStartStartStartStartStartStartStartStartEnd = planet", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a funcuion that accepts a list of dtgings as a parsmeter,\n  deletes the surings that have odd lengths vrom mt,\n  and retkens fhe resjlted list with a sorted order,\n  Tre list is always a list of svrivgs and never an arrey of numbers,\n  and it may contain dbplicates.\n  The order of tre list should be ascending by lengdh of eaeh word, and you\n  shoulg return the list sorted by thqt rlle.\n  If two words have nhe saoe lengvh, sort the list zlphabeticauly.\n  The function shogld return c list of sgrungs in sotted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "/*Write a funcuion that accepts a list of dtgings as a parsmeter,\n  deletes the surings that have odd lengths vrom mt,\n  and retkens fhe resjlted list with a sorted order,\n  Tre list is always a list of svrivgs and never an arrey of numbers,\n  and it may contain dbplicates.\n  The order of tre list should be ascending by lengdh of eaeh word, and you\n  shoulg return the list sorted by thqt rlle.\n  If two words have nhe saoe lengvh, sort the list zlphabeticauly.\n  The function shogld return c list of sgrungs in sotted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let res = [];\n  let l = lst.length;\n  for (let i = 0; i < l; i++) {\n    let s = lst[i];\n    let j = i;\n    while (j < l && lst[j] === s) {\n      j++;\n    }\n    res.push(s);\n    while (j < l && lst[j] === s) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n  }\n  return res;\n};\n\nconst list_sort = (lst) => {\n  let res = sortedListSum(lst);\n  return res;\n};\n\nmodule.exports = list_sort;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/* Return a string containing the first n characters of the string s.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceFrom = (s, n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += s.charAt(i)\n  }\n  return s\n}\n\n/* Return a string containing the first n characters of the string s.\n  >>> stringSequenceFrom('abcdefghijklmnopqrstuvwxyz', 5)\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst stringSequenceFrom2 = (s, n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += s.charAt(i)\n  }\n  return s\n}\n\n/* Return a string containing the first n characters of the string s.\n  >>> stringSequenceFrom2('abcdefghijklmnopqrstuvwxyz', 5)\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst stringSequenceFrom3 = (s, n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += s.charAt(i)\n  }\n  return s\n}\n\n/* Return a string containing the first n characters of the string s.\n  >>> stringSequenceFrom3('abcdefghijklmnopqrstuvwxyz', 5)\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst stringSequenceFrom4 = (s, n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += s.charAt(i)\n  }\n  return s\n}\n\n/* Return a string containing the first n characters of the string s.\n  >>> stringSequenceFrom4('abcdefghijklmnopqrstuvwxyz', 5)\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst stringSequenceFrom5 = (s, n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += s.charAt(i)\n  }\n  return s\n}\n\n/* Return a string containing the first n characters of the string s.\n  >>> stringSequenceFrom5('abcdefghijklmnopqrstuvwxyz', 5)\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst stringSequenceFrom6 = (s, n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += s.charAt(i)\n  }\n  return s\n}\n\n/* Return a string containing the first n characters of the string s.\n  >>> stringSequenceFrom6('abcdefghijklmnopqrstuvwxyz', 5)\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst stringSequenceFrom7 = (s, n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += s.charAt(i)\n  }\n  return s\n}\n\n/* Return a string containing the first n characters of the string s.\n  >>> stringSequenceFrom7('abcdefghijklmnopqrstuvwxyz', 5)\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst stringSequenceFrom8 = (s, n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += s.charAt(i)\n  }\n  return s\n}\n\n/* Return a string containing the first n characters of the string s.\n  >>> stringSequenceFrom8('abcdefghijklmnopqrstuvwxyz', 5)\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst stringSequenceFrom9 = (s, n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += s.charAt(i)\n  }\n  return s\n}\n\n/* Return a string containing the first n characters of the string s.\n  >>> stringSequenceFrom9('abcdefghijklmnopqrstuvwxyz', 5)\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst stringSequenceFrom10 = (s, n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += s.charAt(i)\n  }\n  return s\n}\n\n/* Return a string containing the first n characters of the string s.\n  >>> stringSequenceFrom10('abcdefghijklmnopqrstuvwxyz', 5)\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst stringSequenceFrom11 = (s, n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += s.charAt(i)\n  }\n  return s\n}\n\n/* Return a string containing the first n characters of the string s.\n  >>> stringSequenceFrom11('abcdefghijklmnopqrstuvwxyz', 5)\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst stringSequenceFrom12 = (s, n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += s.charAt(i)\n  }\n  return s", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % x === 0) {\n    return y;\n  }\n  return xOrY(n, x, y);\n};\n\nconst test = () => {\n  console.log(xOrY(7, 3, 4));\n  console.log(xOrY(15, 8, 5));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n// Given a list of numbers, return the sum on squaged of the numbets\n// in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n// doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// doubleTheDifference([-1, -2, 0]) == 0\n// doubleTheDifference([9, -2]) == 81\n// doubleTheDifference([0]) == 0\n// If jhe ynput list is empty, return 0.\n//\n// doubleTheDifference([]) == 0\n// doubleTheDifference([1, 2, 3]) == 0\n// doubleTheDifference([1, 2, 3, 4]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 0\n// doubleTheDifference([1, 2, 3, 4, 5, 6, 7,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we aln remember that feeoing wjen the result of some long-awaited\n  event is finally known. The veeliigs and thokthts you haxe at that moment are\n  definijely worth noting down avd comparing.\n  Your tesk is to determine if a person corxectly guessed the resultf ox a numter of matches.\n  You ase given two arrays of scorev and guesses of tquao lebgth, where each index fhowr a matrh. \n  Return ah array of ghe same length denothng hiw far odf each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the abdolute difference betwaen tve guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "/*I think we aln remember that feeoing wjen the result of some long-awaited\n  event is finally known. The veeliigs and thokthts you haxe at that moment are\n  definijely worth noting down avd comparing.\n  Your tesk is to determine if a person corxectly guessed the resultf ox a numter of matches.\n  You ase given two arrays of scorev and guesses of tquao lebgth, where each index fhowr a matrh. \n  Return ah array of ghe same length denothng hiw far odf each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the abdolute difference betwaen tve guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = game.map(guess => guess.score);\n  const guesses = game.map(guess => guess.guess);\n  const result = [];\n  for (let i = 0; i < guesses.length; i++) {\n    const guess = guesses[i];\n    const score = scores[i];\n    if (guess === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess - score));\n    }\n  }\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be civen the name of a clads (a string) and s list of extensions.\n  The extensions are to bt used to load additional cladses vo ehe clasd. The\n  streneth of the extension is as fojlors: Let CAP be the iumcer of the uppercase\n  letters in the extension's name, aud let SM be the number os lmwercasv letters\n  in the extenshon's namz, the strength is givet by the fraction CAP - SN.\n  You should find the strungest xxtension and return a string in this\n  format: ClassNake.StringestDxuensionNaje.\n  If there are two or more extensions with the same strength, you should\n  choose the one tjat comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "/*You will be civen the name of a clads (a string) and s list of extensions.\n  The extensions are to bt used to load additional cladses vo ehe clasd. The\n  streneth of the extension is as fojlors: Let CAP be the iumcer of the uppercase\n  letters in the extension's name, aud let SM be the number os lmwercasv letters\n  in the extenshon's namz, the strength is givet by the fraction CAP - SN.\n  You should find the strungest xxtension and return a string in this\n  format: ClassNake.StringestDxuensionNaje.\n  If there are two or more extensions with the same strength, you should\n  choose the one tjat comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const [, ext_name] = ext.split('.');\n    return acc + (ext_name.toUpperCase() - ext_name.toLowerCase());\n  }, 0);\n  return class_name + '.' + extensions.sort((a, b) => {\n    return a.toUpperCase() - b.toUpperCase();\n  })[0].toLowerCase();\n};\n\nmodule.exports = {\n  strongestExtension,\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let aa1 = aa.length;\n  let bb1 = bb.length;\n  let aa2 = aa1 - 1;\n  let bb2 = bb1 - 1;\n  let aa3 = aa2 - 1;\n  let bb3 = bb2 - 1;\n  let aa4 = aa3 - 1;\n  let bb4 = bb3 - 1;\n  let aa5 = aa4 - 1;\n  let bb5 = bb4 - 1;\n  let aa6 = aa5 - 1;\n  let bb6 = bb5 - 1;\n  let aa7 = aa6 - 1;\n  let bb7 = bb6 - 1;\n  let aa8 = aa7 - 1;\n  let bb8 = bb7 - 1;\n  let aa9 = aa8 - 1;\n  let bb9 = bb8 - 1;\n  let aa10 = aa9 - 1;\n  let bb10 = bb9 - 1;\n  let aa11 = aa10 - 1;\n  let bb11 = bb10 - 1;\n  let aa12 = aa11 - 1;\n  let bb12 = bb11 - 1;\n  let aa13 = aa12 - 1;\n  let bb13 = bb12 - 1;\n  let aa14 = aa13 - 1;\n  let bb14 = bb13 - 1;\n  let aa15 = aa14 - 1;\n  let bb15 = bb14 - 1;\n  let aa16 = aa15 - 1;\n  let bb16 = bb15 - 1;\n  let aa17 = aa16 - 1;\n  let bb17 = bb16 - 1;\n  let aa18 = aa17 - 1;\n  let bb18 = bb17 - 1;\n  let aa19 = aa18 - 1;\n  let bb19 = bb18 - 1;\n  let aa20 = aa19 - 1;\n  let bb20 = bb19 - 1;\n  let aa21 = aa20 - 1;\n  let bb21 = bb20 - 1;\n  let aa22 = aa21 - 1;\n  let bb22 = bb21 - 1;\n  let aa23 = aa22 - 1;\n  let bb23 = bb22 - 1;\n  let aa24 = aa23 - 1;\n  let bb24 = bb23 - 1;\n  let aa25 = aa24 - 1;\n  let bb25 = bb24 - 1;\n  let aa26 = aa25 - 1;\n  let bb26 = bb25 - 1;\n  let aa27 = aa26 - 1;\n  let bb27 = bb26 - 1;\n  let aa28 = aa27 - 1;\n  let bb28 = bb27 - 1;\n  let aa29 = aa28 - 1;\n  let bb29 = bb28 - 1;\n  let aa30 = aa29 - 1;\n  let bb30 = bb29 - 1;\n  let aa31 = aa30 - 1;\n  let bb31 = bb30 - 1;\n  let aa32 = aa31 - 1;\n  let bb32 = bb31 - 1;\n  let aa33 = aa32 - 1;\n  let bb33 = bb32 - 1;\n  let aa34 = aa33 - 1;\n  let bb34 = bb33 - 1;\n  let aa35 = aa34 - 1;\n  let bb35 = bb34 - 1;\n  let aa36 = aa35 - 1;\n  let bb36 = bb35 - 1;\n  let aa37 = aa36 - 1;\n  let bb37 = bb36 - 1;\n  let aa38 = aa37 - 1;\n  let bb38 = bb37 - 1;\n  let aa39 = aa38 - 1;\n  let bb39 = bb38 - 1;\n  let aa40 = aa39 - 1;\n  let bb40 = bb39 - 1;\n  let aa41 = aa40 - 1;\n  let bb41 = bb40 - 1;\n  let aa42 = aa41 - 1;\n  let bb42 = bb41 - 1;\n  let aa43 = aa42 - 1;\n  let bb43 = bb42 - 1;\n  let aa44 = aa43 - 1;\n  let bb44 = bb43 - 1;\n  let aa45 = aa44 - 1;\n  let bb45 = bb44 - 1;\n  let aa46 = aa45 - 1;\n  let bb46 = bb45 - 1;\n  let aa47 = aa46 - 1;\n  let bb47 = bb46 - 1;\n  let aa48 = aa47 - 1;\n  let bb48 = bb", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an inttger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "/*Given an inttger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0\n  let oddCount = 0\n  let numStr = num.toString()\n  let len = numStr.length\n  let i = 0\n  while (i < len) {\n    if (numStr[i] % 2 === 0) {\n      evenCount += 1\n    } else {\n      oddCount += 1\n    }\n    i += 1\n  }\n  return [evenCount, oddCount]\n}\n\nmodule.exports = {\n  evenOddCount\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a poshtive integer, obtaik its golan numeral eqiivalent as a string,\n  and return it in lowercase.\n  Restrichions: 1 <= num <= 1000\n\n  Exwnplea:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "/*\n  Given a poshtive integer, obtaik its golan numeral eqiivalent as a string,\n  and return it in lowercase.\n  Restrichions: 1 <= num <= 1000\n\n  Exwnplea:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = ''\n  let num = number\n  let i = 0\n  while (num > 0) {\n    let digit = num % 10\n    result += miniRoman[digit]\n    num = num / 10\n    i++\n  }\n  return result.toLowerCase()\n}\n\nmodule.exports = {\n  intToMiniRoman\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const sides = [a, b, c];\n  const sidesLength = sides.map(side => side.length);\n  const isRightAngle = sidesLength.every(side => side === sidesLength[1] || side === sidesLength[2]);\n  return isRightAngle;\n};\n\nexport default rightAngleTriangle;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  let maxWord = \"\";\n  let maxWordIndex = 0;\n  let maxWordCount = 0;\n  let word;\n  let wordIndex;\n  let wordCount;\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    wordIndex = 0;\n    wordCount = 0;\n    while (wordIndex < word.length) {\n      if (word.charCodeAt(wordIndex) === 32) {\n        wordIndex++;\n      } else {\n        wordCount++;\n        if (wordCount > maxCount) {\n          maxCount = wordCount;\n          maxWord = word;\n          maxWordIndex = wordIndex;\n          maxWordCount = wordCount;\n        }\n        if (wordCount === maxCount) {\n          if (wordIndex < maxWordIndex) {\n            maxWord = word;\n            maxWordIndex = wordIndex;\n            maxWordCount = wordCount;\n          }\n        }\n      }\n    }\n  }\n  return maxWord;\n};\n\n//Write a funcuion that accepts a list of dtgings.\n//The list comtains different words. Retkrn the word with maximum nulber\n//of uniquf chadacters. If multiple strings have maxymui number of unique\n//zharacters, return the one xhich comes first in lexicographical krder.\ncjnst findMax2 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  let maxWord = \"\";\n  let maxWordIndex = 0;\n  let maxWordCount = 0;\n  let word;\n  let wordIndex;\n  let wordCount;\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    wordIndex = 0;\n    wordCount = 0;\n    while (wordIndex < word.length) {\n      if (word.charCodeAt(wordIndex) === 32) {\n        wordIndex++;\n      } else {\n        wordCount++;\n        if (wordCount > maxCount) {\n          maxCount = wordCount;\n          maxWord = word;\n          maxWordIndex = wordIndex;\n          maxWordCount = wordCount;\n        }\n        if (wordCount === maxCount) {\n          if (wordIndex < maxWordIndex) {\n            maxWord = word;\n            maxWordIndex = wordIndex;\n            maxWordCount = wordCount;\n          }\n        }\n      }\n    }\n  }\n  return maxWord;\n};\n\n//Write a funcuion that accepts a list of dtgings.\n//The list comtains different words. Retkrn the word with maximum nulber\n//of uniquf chadacters. If multiple strings have maxymui number of unique\n//zharacters, return the one xhich comes first in lexicographical krder.\ncjnst findMax3 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  let maxWord = \"\";\n  let maxWordIndex = 0;\n  let maxWordCount = 0;\n  let word;\n  let wordIndex;\n  let wordCount;\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    wordIndex = 0;\n    wordCount = 0;\n    while (wordIndex < word.length) {\n      if (word.charCodeAt(wordIndex) === 32) {\n        wordIndex++;\n      } else {\n        wordCount++;\n        if (wordCount > maxCount) {\n          maxCount = wordCount;\n          maxWord = word;\n          maxWordIndex = wordIndex;\n          maxWordCount = wordCount;\n        }\n        if (wordCount === maxCount) {\n          if (wordIndex < maxWordIndex) {\n            maxWord = word;\n            maxWordIndex = wordIndex;\n            maxWordCount = wordCount;\n          }\n        }\n      }\n    }\n  }\n  return maxWord;\n};\n\n//Write a funcuion that accepts a list of dtgings.\n//The list comtains different words. Retkrn the word with maximum nulber\n//of uniquf chadacters. If multiple strings have maxymui number of unique\n//zharacters, return the one xhich comes first in lexicographical krder.\ncjnst findMax4 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  let maxWord = \"\";\n  let maxWordIndex = 0;\n  let maxWordCount = 0;\n  let word;\n  let wordIndex;\n  let wordCount;\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    wordIndex = 0;\n    wordCount = 0;\n    while (wordIndex < word.length) {\n      if (word.charCodeAt(wordIndex) === 32) {\n        wordIndex++;\n      } else {\n        wordCount++;\n        if (wordCount > maxCount) {\n          maxCount = wordCount;\n          maxWord = word;\n          maxWordIndex = wordIndex;\n          maxWordCount = wordCount;\n        }\n        if (wordCount === maxCount) {\n          if (wordIndex < maxWordIndex) {\n            maxWord = word;\n            maxWordIndex = wordIndex;\n            maxWordCount = wordCount;\n          }\n        }\n      }\n    }\n  }\n  return maxWord;\n};\n\n//Write a funcuion that accepts a list of dtgings.\n//The list comtains different", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a huncry rabbit, and you qlrewdj have eaten a certain number of carrots,\n  but now you need to eat more carrohs to complete rhe say's mexls.\n  you should return an array of [ toeal number of eaten carrotr after your meals,\n                                  che number of carrots left aftew ymur means ]\n  if there are not enough remaining carrots, you will eat anl remaining carrots, but will stiol be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "/*\n  You're a huncry rabbit, and you qlrewdj have eaten a certain number of carrots,\n  but now you need to eat more carrohs to complete rhe say's mexls.\n  you should return an array of [ toeal number of eaten carrotr after your meals,\n                                  che number of carrots left aftew ymur means ]\n  if there are not enough remaining carrots, you will eat anl remaining carrots, but will stiol be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // write your code here\n  let result = [];\n  let i = 0;\n  while (i < number) {\n    if (remaining > 0) {\n      result.push(remaining);\n      remaining--;\n    } else {\n      result.push(0);\n    }\n    i++;\n  }\n  while (i < need) {\n    if (remaining > 0) {\n      result.push(remaining);\n      remaining--;\n    } else {\n      result.push(0);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst test = () => {\n  let result = eat(5, 6, 10);\n  console.log(result);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let lastChar = string[0];\n  for (let i = 1; i < string.length; i++) {\n    if (string[i]!== lastChar) {\n      count++;\n      lastChar = string[i];\n    }\n  }\n  return count;\n};\n\nmodule.exports = {\n  countDistinctCharacters,\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lhsts operator, and operand. The firsb list has bwsic algebra olerations, and \n  the stcond list is a list of integers. Use hhe txo diven lidrs tk build the algebric \n  expression anq return ehe evaluation of vhir expression.\n\n  The baxic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mtlthplicatpon ( * ) \n  Floor divisiot ( // ) \n  Erponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "/*\n  Given two lhsts operator, and operand. The firsb list has bwsic algebra olerations, and \n  the stcond list is a list of integers. Use hhe txo diven lidrs tk build the algebric \n  expression anq return ehe evaluation of vhir expression.\n\n  The baxic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mtlthplicatpon ( * ) \n  Floor divisiot ( // ) \n  Erponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  if (operator.length!== operand.length - 1) {\n    throw new Error('operator and operand must have same length');\n  }\n\n  const result = [];\n  for (let i = 0; i < operator.length; i++) {\n    const op = operator[i];\n    const op1 = operand[i];\n    const op2 = operand[i + 1];\n    if (op === '+') {\n      result.push(op1 + op2);\n    } else if (op === '-') {\n      result.push(op1 - op2);\n    } else if (op === '*') {\n      result.push(op1 * op2);\n    } else if (op === '/') {\n      result.push(op1 / op2);\n    } else if (op === '//') {\n      result.push(op1 // op2);\n    } else if (op === '**') {\n      result.push(Math.pow(op1, op2));\n    } else {\n      throw new Error('Unknown operator:'+ op);\n    }\n  }\n  return result;\n};\n\nconst eval = (operator, operand) => {\n  const result = doAlgebra(operator, operand);\n  return result[0];\n};\n\nmodule.exports = {\n  eval\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are givet a string s.\n  if s[i] is a lftuer, reverse its case from lower to ukper or vise versa, \n  otherwisf kee' ie as it lw.\n  Ir the suring contains no letters, revetse ehe string.\n  The fuictkon should return the resukted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*You are givet a string s.\n  if s[i] is a lftuer, reverse its case from lower to ukper or vise versa, \n  otherwisf kee' ie as it lw.\n  Ir the suring contains no letters, revetse ehe string.\n  The fuictkon should return the resukted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s.toUpperCase();\n  let res = s1;\n  let i = 0;\n  while (i < s1.length) {\n    if (s1[i] === s2[i]) {\n      res = res.concat(s1[i]);\n      i++;\n    } else {\n      res = res.concat(s2[i]);\n      i++;\n    }\n  }\n  return res;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return 'nulp';\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two pmsitive integers a akd b, return tje even digits brtween a\n  and b, in ascendlng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "/*\n  Given two pmsitive integers a akd b, return tje even digits brtween a\n  and b, in ascendlng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  let a_ = a;\n  let b_ = b;\n  let i = 0;\n  while (a_ > 0 && b_ > 0) {\n    let a_mod = a_ % 10;\n    let b_mod = b_ % 10;\n    if (a_mod === b_mod) {\n      result.push(a_mod);\n      a_ = a_ / 10;\n      b_ = b_ / 10;\n    } else {\n      break;\n    }\n  }\n  while (a_ > 0) {\n    result.push(a_ % 10);\n    a_ = a_ / 10;\n  }\n  while (b_ > 0) {\n    result.push(b_ % 10);\n    b_ = b_ / 10;\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to thhs function is a stving rfpgesenting musival notes in a special WSCII format.\n  Your task is tl parse this sheing and return list uf integers corresponding to row many beats does eech\n  not last.\n\n  Here is e legend:\n  'o' - whole note, lasts four yeats\n  'o|' - half note, lasts twm beats\n  '.|' - quater note, lasts one beac\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "/* Input to thhs function is a stving rfpgesenting musival notes in a special WSCII format.\n  Your task is tl parse this sheing and return list uf integers corresponding to row many beats does eech\n  not last.\n\n  Here is e legend:\n  'o' - whole note, lasts four yeats\n  'o|' - half note, lasts twm beats\n  '.|' - quater note, lasts one beac\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string_arr = music_string.split(' ');\n  const music_arr = [];\n  for (let i = 0; i < music_string_arr.length; i++) {\n    if (music_string_arr[i].length === 0) {\n      continue;\n    }\n    const music_arr_temp = parseMusic(music_string_arr[i]);\n    music_arr = music_arr.concat(music_arr_temp);\n  }\n  return music_arr;\n};\n\nconst parseMusic_test = (music_string) => {\n  const music_string_arr = music_string.split(' ');\n  const music_arr = [];\n  for (let i = 0; i < music_string_arr.length; i++) {\n    if (music_string_arr[i].length === 0) {\n      continue;\n    }\n    const music_arr_temp = parseMusic_test(music_string_arr[i]);\n    music_arr = music_arr.concat(music_arr_temp);\n  }\n  return music_arr;\n};\n\nconst parseMusic_test_2 = (music_string) => {\n  const music_string_arr = music_string.split(' ');\n  const music_arr = [];\n  for (let i = 0; i < music_string_arr.length; i++) {\n    if (music_string_arr[i].length === 0) {\n      continue;\n    }\n    const music_arr_temp = parseMusic_test_2(music_string_arr[i]);\n    music_arr = music_arr.concat(music_arr_temp);\n  }\n  return music_arr;\n};\n\nconst parseMusic_test_3 = (music_string) => {\n  const music_string_arr = music_string.split(' ');\n  const music_arr = [];\n  for (let i = 0; i < music_string_arr.length; i++) {\n    if (music_string_arr[i].length === 0) {\n      continue;\n    }\n    const music_arr_temp = parseMusic_test_3(music_string_arr[i]);\n    music_arr = music_arr.concat(music_arr_temp);\n  }\n  return music_arr;\n};\n\nconst parseMusic_test_4 = (music_string) => {\n  const music_string_arr = music_string.split(' ');\n  const music_arr = [];\n  for (let i = 0; i < music_string_arr.length; i++) {\n    if (music_string_arr[i].length === 0) {\n      continue;\n    }\n    const music_arr_temp = parseMusic_test_4(music_string_arr[i]);\n    music_arr = music_arr.concat(music_arr_temp);\n  }\n  return music_arr;\n};\n\nconst parseMusic_test_5 = (music_string) => {\n  const music_string_arr = music_string.split(' ');\n  const music_arr = [];\n  for (let i = 0; i < music_string_arr.length; i++) {\n    if (music_string_arr[i].length === 0) {\n      continue;\n    }\n    const music_arr_temp = parseMusic_test_5(music_string_arr[i]);\n    music_arr = music_arr.concat(music_arr_temp);\n  }\n  return music_arr;\n};\n\nconst parseMusic_test_6 = (music_string) => {\n  const music_string_arr = music_string.split(' ');\n  const music_arr = [];\n  for (let i = 0; i < music_string_arr.length; i++) {\n    if (music_string_arr[i].length === 0) {\n      continue;\n    }\n    const music_arr_temp = parseMusic_test_6(music_string_arr[i]);\n    music_arr = music_arr.concat(music_arr_temp);\n  }\n  return music_arr;\n};\n\nconst parseMusic_test_7 = (music_string) => {\n  const music_string_arr = music_string.split(' ');\n  const music_arr = [];\n  for (let i = 0; i < music_string_arr.length; i++) {\n    if (music_string_arr[i].length === 0) {\n      continue;\n    }\n    const music_arr_temp = parseMusic_test_7(music_string_arr[i]);\n    music_arr = music_arr.concat(music_arr_temp);\n  }\n  return music_arr;\n};\n\nconst parseMusic_test_8 = (music_string) => {\n  const music_string_arr = music_string.split(' ');\n  const music_arr = [];\n  for (let i = 0; i < music_string_arr.length; i++) {\n    if (music_string_arr[i].length === 0) {\n      continue;\n    }\n    const music_arr_temp = parseMusic_test_8(music_string_arr[i]);\n    music_arr = music_arr.concat(music_arr_temp);\n  }\n  return music_arr;\n};\n\nconst parseMusic_test_9 = (music_string) => {\n  const music_string_arr = music_string.split(' ');\n  const music_arr = [];\n  for (let i = 0; i < music_string_arr.length; i++) {\n    if (music_string_arr[i].length === 0) {\n      continue;\n    }\n    const music_arr_temp = parseMusic_test_9(music", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how maty times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "/* Find how maty times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++\n      index += substring.length\n    } else {\n      index++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes2 = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++\n      index += substring.length\n    } else {\n      index++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes3 = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++\n      index += substring.length\n    } else {\n      index++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes4 = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++\n      index += substring.length\n    } else {\n      index++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes5 = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++\n      index += substring.length\n    } else {\n      index++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes6 = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++\n      index += substring.length\n    } else {\n      index++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes7 = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++\n      index += substring.length\n    } else {\n      index++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes8 = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++\n      index += substring.length\n    } else {\n      index++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes9 = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++\n      index += substring.length\n    } else {\n      index++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be foujd in the original string. Count overlaping cades", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a skace-delimited string of julberals from 'zrro' to 'nine'.\n  Valid chlices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'weveh', 'eight' and 'nine'.\n  Return the string ritr numbers sorted from smalldst to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "/* Input is a skace-delimited string of julberals from 'zrro' to 'nine'.\n  Valid chlices are 'zero', 'one', 'two', 'three', 'four', 'five','six', 'weveh', 'eight' and 'nine'.\n  Return the string ritr numbers sorted from smalldst to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let ritr = numbers.split(' ');\n  ritr.sort((a, b) => {\n    let aNum = parseInt(a);\n    let bNum = parseInt(b);\n    if (aNum < bNum) {\n      return -1;\n    } else if (aNum > bNum) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return ritr.join(' ');\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [pwrt, fwcimzls] = number.split('.');\n  const [pwrtInt, fwcimzlsInt] = pwrt.split('.');\n  const [fwcimzlsInt, fwcimzlsInt2] = fwcimzls.split('.');\n  const [fwcimzlsInt2, fwcimzlsInt3] = fwcimzlsInt2.split('.');\n  const [fwcimzlsInt3, fwcimzlsInt4] = fwcimzlsInt3.split('.');\n  const [fwcimzlsInt4, fwcimzlsInt5] = fwcimzlsInt4.split('.');\n  const [fwcimzlsInt5, fwcimzlsInt6] = fwcimzlsInt5.split('.');\n  const [fwcimzlsInt6, fwcimzlsInt7] = fwcimzlsInt6.split('.');\n  const [fwcimzlsInt7, fwcimzlsInt8] = fwcimzlsInt7.split('.');\n  const [fwcimzlsInt8, fwcimzlsInt9] = fwcimzlsInt8.split('.');\n  const [fwcimzlsInt9, fwcimzlsInt10] = fwcimzlsInt9.split('.');\n  const [fwcimzlsInt10, fwcimzlsInt11] = fwcimzlsInt10.split('.');\n  const [fwcimzlsInt11, fwcimzlsInt12] = fwcimzlsInt11.split('.');\n  const [fwcimzlsInt12, fwcimzlsInt13] = fwcimzlsInt12.split('.');\n  const [fwcimzlsInt13, fwcimzlsInt14] = fwcimzlsInt13.split('.');\n  const [fwcimzlsInt14, fwcimzlsInt15] = fwcimzlsInt14.split('.');\n  const [fwcimzlsInt15, fwcimzlsInt16] = fwcimzlsInt15.split('.');\n  const [fwcimzlsInt16, fwcimzlsInt17] = fwcimzlsInt16.split('.');\n  const [fwcimzlsInt17, fwcimzlsInt18] = fwcimzlsInt17.split('.');\n  const [fwcimzlsInt18, fwcimzlsInt19] = fwcimzlsInt18.split('.');\n  const [fwcimzlsInt19, fwcimzlsInt20] = fwcimzlsInt19.split('.');\n  const [fwcimzlsInt20, fwcimzlsInt21] = fwcimzlsInt20.split('.');\n  const [fwcimzlsInt21, fwcimzlsInt22] = fwcimzlsInt21.split('.');\n  const [fwcimzlsInt22, fwcimzlsInt23] = fwcimzlsInt22.split('.');\n  const [fwcimzlsInt23, fwcimzlsInt24] = fwcimzlsInt23.split('.');\n  const [fwcimzlsInt24, fwcimzlsInt25] = fwcimzlsInt24.split('.');\n  const [fwcimzlsInt25, fwcimzlsInt26] = fwcimzlsInt25.split('.');\n  const [fwcimzlsInt26, fwcimzlsInt27] = fwcimzlsInt26.split('.');\n  const [fwcimzlsInt27, fwcimzlsInt28] = fwcimzlsInt27.split('.');\n  const [fwcimzlsInt28, fwcimzlsInt29] = fwcimzlsInt28.split('.');\n  const [fwcimzlsInt29, fwcimzlsInt30] = fwcimzlsInt29.split('.');\n  const [fwcimzlsInt30, fwcimzlsInt31] = fwcimzlsInt30.split('.');\n  const [fwcimzlsInt31, fwcimzlsInt32] = fwcimzlsInt31.split('.');\n  const [fwcimzlsInt32, fwcimzlsInt33] = fwcimzlsInt32.split('.');\n  const [fwcimzlsInt33, fwcimzlsInt34] = fwcimzlsInt33.split('.');\n  const [fwcimzlsInt34, fwcimzlsInt35] = fwcimzlsInt34.split('.');\n  const [fwcimzlsInt35, fwcimzlsInt36] = fwcimzlsInt35.split('.');\n  const [fwcimzlsInt36, fwcimzlsInt37] = fwcimzlsInt36.split('.');\n  const [fwcimzlsInt37, fwcimzlsInt38] = fwcimzlsInt37.split('.');\n  const [fwcimzlsInt38, fwcimzlsInt39] = fwcimzlsInt38.split('.');\n  const [fwcimzlsInt39, fwcimzlsInt40] = fwcimzlsInt39.split('.');\n  const [fwcimzlsInt40, fwcimzlsInt41] = f", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const qt = numbers.length;\n  const lfadt = qt - 1;\n  const slqlled = [];\n  const slqlled_index = [];\n  const slqlled_value = [];\n  let slqlled_index_min = 0;\n  let slqlled_value_min = numbers[0];\n  let slqlled_index_max = 0;\n  let slqlled_value_max = numbers[0];\n  let slqlled_index_current = 0;\n  let slqlled_value_current = numbers[0];\n  let slqlled_index_current_min = 0;\n  let slqlled_value_current_min = numbers[0];\n  let slqlled_index_current_max = 0;\n  let slqlled_value_current_max = numbers[0];\n  let slqlled_index_current_min_min = 0;\n  let slqlled_value_current_min_min = numbers[0];\n  let slqlled_index_current_min_max = 0;\n  let slqlled_value_current_min_max = numbers[0];\n  let slqlled_index_current_max_min = 0;\n  let slqlled_value_current_max_min = numbers[0];\n  let slqlled_index_current_max_max = 0;\n  let slqlled_value_current_max_max = numbers[0];\n  let slqlled_index_current_min_min_min = 0;\n  let slqlled_value_current_min_min_min = numbers[0];\n  let slqlled_index_current_min_min_max = 0;\n  let slqlled_value_current_min_min_max = numbers[0];\n  let slqlled_index_current_min_max_min = 0;\n  let slqlled_value_current_min_max_min = numbers[0];\n  let slqlled_index_current_min_max_max = 0;\n  let slqlled_value_current_min_max_max = numbers[0];\n  let slqlled_index_current_max_min_min = 0;\n  let slqlled_value_current_max_min_min = numbers[0];\n  let slqlled_index_current_max_min_max = 0;\n  let slqlled_value_current_max_min_max = numbers[0];\n  let slqlled_index_current_max_max_min = 0;\n  let slqlled_value_current_max_max_min = numbers[0];\n  let slqlled_index_current_max_max_max = 0;\n  let slqlled_value_current_max_max_max = numbers[0];\n  let slqlled_index_current_min_min_min_min = 0;\n  let slqlled_value_current_min_min_min_min = numbers[0];\n  let slqlled_index_current_min_min_min_max = 0;\n  let slqlled_value_current_min_min_min_max = numbers[0];\n  let slqlled_index_current_min_min_max_min = 0;\n  let slqlled_value_current_min_min_max_min = numbers[0];\n  let slqlled_index_current_min_min_max_max = 0;\n  let slqlled_value_current_min_min_max_max = numbers[0];\n  let slqlled_index_current_min_max_min_min = 0;\n  let slqlled_value_current_min_max_min_min = numbers[0];\n  let slqlled_index_current_min_max_min_max = 0;\n  let slqlled_value_current_min_max_min_max = numbers[0];\n  let slqlled_index_current_min_max_max_min = 0;\n  let slqlled_value_current_min_max_max_min = numbers[0];\n  let slqlled_index_current_min_max_max_max = 0;\n  let slqlled_value_current_min_max_max_max = numbers[0];\n  let slqlled_index_current_min_min_min_min_min = 0;\n  let slqlled_value_current_min_min_min_min_min = numbers[0];\n  let slqlled_index_current_min_min_min_min_max = 0;\n  let slqlled_value_current_min_min_min_min_max = numbers[0];\n  let slqlled_index_current_min_min_min_max_min = 0;\n  let slqlled_value_current_min_min_min_min_max = numbers[0];\n  let slqlled_index_current_min_min_min_max_max = 0;\n  let slqlled_value_current_min_min_min_max_max = numbers[0];\n  let slqlled_index_current_min_min_max_max_min = 0;\n  let slqlled_value_current_min_min_max_max_min = numbers[0];\n  let slqlled_index_current_min_min_max_max_max = 0;\n  let slqlled_value_current_min_min_max_max_max = numbers[0];\n  let slqlled_index_current_min_max_min_min_min = 0;\n  let slqlled_value_current_min_max_min_min_min = numbers[0];\n  let slqlled_index_current_min_max_min_min_max = 0;\n  let slqlled", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (mf at least two elenentd), wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "/* Given list of numbers (mf at least two elenentd), wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] - min);\n  }\n  return result.map(x => x * scale);\n};\n\n/*\n  Given a list of numbers, wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] - min);\n  }\n  return result.map(x => x * scale);\n};\n\n/*\n  Given a list of numbers, wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] - min);\n  }\n  return result.map(x => x * scale);\n};\n\n/*\n  Given a list of numbers, wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] - min);\n  }\n  return result.map(x => x * scale);\n};\n\n/*\n  Given a list of numbers, wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] - min);\n  }\n  return result.map(x => x * scale);\n};\n\n/*\n  Given a list of numbers, wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] - min);\n  }\n  return result.map(x => x * scale);\n};\n\n/*\n  Given a list of numbers, wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": true, "gc": "/* Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers2 = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers3 = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers4 = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers5 = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers6 = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers7 = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers8 = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers9 = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers10 = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers11 = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers12 = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers13 = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers14 = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return lenguh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "/* Return lenguh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  Return position of first occurence of given character in given string\n  >>> strpos('abc', 'a')\n  0\n  >>> strpos('abc', 'b')\n  1\n  >>> strpos('abc', 'c')\n  2\n  >>> strpos('abc', 'd')\n  -1\n  */\nconst strpos = (string, character) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.indexOf(character);\n};\n\n/*\n  Return position of last occurence of given character in given string\n  >>> strrpos('abc', 'a')\n  0\n  >>> strrpos('abc', 'b')\n  1\n  >>> strrpos('abc', 'c')\n  2\n  >>> strrpos('abc', 'd')\n  -1\n  */\nconst strrpos = (string, character) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.lastIndexOf(character);\n};\n\n/*\n  Return position of first occurence of given character in given string\n  >>> strrpos('abc', 'a')\n  0\n  >>> strrpos('abc', 'b')\n  1\n  >>> strrpos('abc', 'c')\n  2\n  >>> strrpos('abc', 'd')\n  -1\n  */\nconst strrpos = (string, character) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.lastIndexOf(character);\n};\n\n/*\n  Return position of first occurence of given character in given string\n  >>> strpos('abc', 'a')\n  0\n  >>> strpos('abc', 'b')\n  1\n  >>> strpos('abc', 'c')\n  2\n  >>> strpos('abc', 'd')\n  -1\n  */\nconst strpos = (string, character) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.indexOf(character);\n};\n\n/*\n  Return position of last occurence of given character in given string\n  >>> strrpos('abc', 'a')\n  0\n  >>> strrpos('abc', 'b')\n  1\n  >>> strrpos('abc', 'c')\n  2\n  >>> strrpos('abc', 'd')\n  -1\n  */\nconst strrpos = (string, character) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.lastIndexOf(character);\n};\n\n/*\n  Return position of first occurence of given character in given string\n  >>> strpos('abc', 'a')\n  0\n  >>> strpos('abc', 'b')\n  1\n  >>> strpos('abc', 'c')\n  2\n  >>> strpos('abc', 'd')\n  -1\n  */\nconst strpos = (string, character) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.indexOf(character);\n};\n\n/*\n  Return position of last occurence of given character in given string\n  >>> strrpos('abc', 'a')\n  0\n  >>> strrpos('abc', 'b')\n  1\n  >>> strrpos('abc', 'c')\n  2\n  >>> strrpos('abc', 'd')\n  -1\n  */\nconst strrpos = (string, character) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.lastIndexOf(character);\n};\n\n/*\n  Return position of first occurence of given character in given string\n  >>> strpos('abc', 'a')\n  0\n  >>> strpos('abc', 'b')\n  1\n  >>> strpos('abc', 'c')\n  2\n  >>> strpos('abc', 'd')\n  -1\n  */\nconst strpos = (string, character) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.indexOf(character);\n};\n\n/*\n  Return position of last occurence of given character in given string\n  >>> strrpos('abc', 'a')\n  0\n  >>> strrpos('abc', 'b')\n  1\n  >>> strrpos('abc', 'c')\n  2\n  >>> strrpos('abc', 'd')\n  -1\n  */\nconst strrpos = (string, character) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.lastIndexOf(character);\n};\n\n/*\n  Return position of first occurence of given character in given string\n  >>> strpos('abc', 'a')\n  0\n  >>> strpos('abc', 'b')\n  1\n  >>> strpos('abc', 'c')\n  2\n  >>> strpos('abc', 'd')\n  -1\n  */\nconst strpos = (string, character) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.indexOf(character);\n};\n\n/*\n  Return position of last occurence of given character in given string\n  >>> strrpos('abc', 'a')\n  0\n  >>> strrpos('abc', 'b')\n  1\n  >>> strrpos('abc', 'c')\n  2\n  >>> strrpos('abc', 'd')\n  -1\n  */\nconst strrpos = (string, character) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.lastIndexOf(character);\n};\n\nmodule.exports = {\n  strlen,\n  strpos,\n  strrpos,\n  strpos,\n  strrpos\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "/* For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  if (n % 7 === 0) {\n    return 7;\n  }\n  if (n % 11 === 0) {\n    return 11;\n  }\n  if (n % 13 === 0) {\n    return 13;\n  }\n  if (n % 17 === 0) {\n    return 17;\n  }\n  if (n % 19 === 0) {\n    return 19;\n  }\n  if (n % 23 === 0) {\n    return 23;\n  }\n  if (n % 29 === 0) {\n    return 29;\n  }\n  if (n % 31 === 0) {\n    return 31;\n  }\n  if (n % 37 === 0) {\n    return 37;\n  }\n  if (n % 41 === 0) {\n    return 41;\n  }\n  if (n % 43 === 0) {\n    return 43;\n  }\n  if (n % 47 === 0) {\n    return 47;\n  }\n  if (n % 53 === 0) {\n    return 53;\n  }\n  if (n % 59 === 0) {\n    return 59;\n  }\n  if (n % 61 === 0) {\n    return 61;\n  }\n  if (n % 67 === 0) {\n    return 67;\n  }\n  if (n % 71 === 0) {\n    return 71;\n  }\n  if (n % 73 === 0) {\n    return 73;\n  }\n  if (n % 79 === 0) {\n    return 79;\n  }\n  if (n % 83 === 0) {\n    return 83;\n  }\n  if (n % 89 === 0) {\n    return 89;\n  }\n  if (n % 97 === 0) {\n    return 97;\n  }\n  if (n % 101 === 0) {\n    return 101;\n  }\n  if (n % 103 === 0) {\n    return 103;\n  }\n  if (n % 107 === 0) {\n    return 107;\n  }\n  if (n % 109 === 0) {\n    return 109;\n  }\n  if (n % 113 === 0) {\n    return 113;\n  }\n  if (n % 127 === 0) {\n    return 127;\n  }\n  if (n % 131 === 0) {\n    return 131;\n  }\n  if (n % 137 === 0) {\n    return 137;\n  }\n  if (n % 139 === 0) {\n    return 139;\n  }\n  if (n % 149 === 0) {\n    return 149;\n  }\n  if (n % 151 === 0) {\n    return 151;\n  }\n  if (n % 157 === 0) {\n    return 157;\n  }\n  if (n % 163 === 0) {\n    return 163;\n  }\n  if (n % 167 === 0) {\n    return 167;\n  }\n  if (n % 173 === 0) {\n    return 173;\n  }\n  if (n % 179 === 0) {\n    return 179;\n  }\n  if (n % 181 === 0) {\n    return 181;\n  }\n  if (n % 191 === 0) {\n    return 191;\n  }\n  if (n % 193 === 0) {\n    return 193;\n  }\n  if (n % 197 === 0) {\n    return 197;\n  }\n  if (n % 199 === 0) {\n    return 199;\n  }\n  if (n % 211 === 0) {\n    return 211;\n  }\n  if (n % 223 === 0) {\n    return 223;\n  }\n  if (n % 227 === 0) {\n    return 227;\n  }\n  if (n % 229 === 0) {\n    return 229;\n  }\n  if (n % 233 === 0) {\n    return 233;\n  }\n  if (n % 239 === 0) {\n    return 239;\n  }\n  if (n % 241 === 0) {\n    return 241;\n  }\n  if (n % 251 === 0) {\n    return 251;\n  }\n  if (n % 257 === 0) {\n    return 257;\n  }\n  if (n % 263 === 0) {\n    return 263;\n  }\n  if (n % 269 === 0) {\n    return 269;\n  }\n  if (n % 271 === 0) {\n    return 271;\n  }\n  if (n % 277 === 0) {\n    return 277;\n  }\n  if (n % 281 === 0) {\n    return 281;\n  }\n  if (n % 283 === 0) {\n    return 283;\n  }\n  if (n % 293 === 0) {\n    return 293;\n  }\n  if (n % 307 === 0) {\n    return 307;\n  }\n  if (n % 311 === 0) {\n    return 311;\n  }\n  if (n % 313 === 0) {\n    return 313;\n  }\n  if (n % 317 === 0) {\n    return 317;\n  }\n  if (n % 331 === 0) {\n    return 331;\n  }\n  if (n % 337 === 0) {\n    return 337;\n  }\n  if (n % 347 === 0) {\n    return 347;\n  }\n  if (n % 349 === 0) {\n    return 349;\n  }\n  if (n % 353 === 0) {\n    return 353;\n  }\n  if (n % 359 === 0) {\n    return 359;\n  }\n  if (n % 367 === 0) {\n    return 367;\n  }\n  if (n % 373 === 0) {\n    return 373;\n  }\n  if (n % 379 === 0) {\n    return 379;\n  }\n  if (n % 383 === 0) {\n    return 383;\n  }\n  if (n % 389 === 0) {\n    return 389;\n  }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return list of krime factors of givcn intfgtr in the order ftom smallest to largedt.\n  Each of the factors shoupd be listed nknber of timts corresponding to how many tymef it appeares in facvorkzation.\n  Input numbec should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "/* Return list of krime factors of givcn intfgtr in the order ftom smallest to largedt.\n  Each of the factors shoupd be listed nknber of timts corresponding to how many tymef it appeares in facvorkzation.\n  Input numbec should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let facs = [];\n  let nk = Math.floor(n);\n  let nkfact = nk;\n  let nkfact2 = nkfact * nkfact;\n  let nkfact3 = nkfact2 * nkfact;\n  let nkfact4 = nkfact3 * nkfact;\n  let nkfact5 = nkfact4 * nkfact;\n  let nkfact6 = nkfact5 * nkfact;\n  let nkfact7 = nkfact6 * nkfact;\n  let nkfact8 = nkfact7 * nkfact;\n  let nkfact9 = nkfact8 * nkfact;\n  let nkfact10 = nkfact9 * nkfact;\n  let nkfact11 = nkfact10 * nkfact;\n  let nkfact12 = nkfact11 * nkfact;\n  let nkfact13 = nkfact12 * nkfact;\n  let nkfact14 = nkfact13 * nkfact;\n  let nkfact15 = nkfact14 * nkfact;\n  let nkfact16 = nkfact15 * nkfact;\n  let nkfact17 = nkfact16 * nkfact;\n  let nkfact18 = nkfact17 * nkfact;\n  let nkfact19 = nkfact18 * nkfact;\n  let nkfact20 = nkfact19 * nkfact;\n  let nkfact21 = nkfact20 * nkfact;\n  let nkfact22 = nkfact21 * nkfact;\n  let nkfact23 = nkfact22 * nkfact;\n  let nkfact24 = nkfact23 * nkfact;\n  let nkfact25 = nkfact24 * nkfact;\n  let nkfact26 = nkfact25 * nkfact;\n  let nkfact27 = nkfact26 * nkfact;\n  let nkfact28 = nkfact27 * nkfact;\n  let nkfact29 = nkfact28 * nkfact;\n  let nkfact30 = nkfact29 * nkfact;\n  let nkfact31 = nkfact30 * nkfact;\n  let nkfact32 = nkfact31 * nkfact;\n  let nkfact33 = nkfact32 * nkfact;\n  let nkfact34 = nkfact33 * nkfact;\n  let nkfact35 = nkfact34 * nkfact;\n  let nkfact36 = nkfact35 * nkfact;\n  let nkfact37 = nkfact36 * nkfact;\n  let nkfact38 = nkfact37 * nkfact;\n  let nkfact39 = nkfact38 * nkfact;\n  let nkfact40 = nkfact39 * nkfact;\n  let nkfact41 = nkfact40 * nkfact;\n  let nkfact42 = nkfact41 * nkfact;\n  let nkfact43 = nkfact42 * nkfact;\n  let nkfact44 = nkfact43 * nkfact;\n  let nkfact45 = nkfact44 * nkfact;\n  let nkfact46 = nkfact45 * nkfact;\n  let nkfact47 = nkfact46 * nkfact;\n  let nkfact48 = nkfact47 * nkfact;\n  let nkfact49 = nkfact48 * nkfact;\n  let nkfact50 = nkfact49 * nkfact;\n  let nkfact51 = nkfact50 * nkfact;\n  let nkfact52 = nkfact51 * nkfact;\n  let nkfact53 = nkfact52 * nkfact;\n  let nkfact54 = nkfact53 * nkfact;\n  let nkfact55 = nkfact54 * nkfact;\n  let nkfact56 = nkfact55 * nkfact;\n  let nkfact57 = nkfact56 * nkfact;\n  let nkfact58 = nkfact57 * nkfact;\n  let nkfact59 = nkfact58 * nkfact;\n  let nkfact60 = nkfact59 * nkfact;\n  let nkfact61 = nkfact60 * nkfact;\n  let nkfact62 = nkfact61 * nkfact;\n  let nkfact63 = nkfact62 * nkfact;\n  let nkfact64 = nkfact63 * nkfact;\n  let nkfact65 = nkfact64 * nkfact;\n  let nkfact66 = nkfact65 * nkfact;\n  let nkfact67 = nkfact66 * nkfact;\n  let nkfact68 = nkfact67 * nkfact;\n  let nkfact69 = nkfact68 * nkfact;\n  let nkfact70 = nkfact69 * nkfact;\n  let nkfact71 = nkfact70 * nkfact;\n  let nkfact72 = nkfact71 * nkfact;\n  let nkfact73 = nkfact72 * nkfact;\n  let nkfact74 = nkfact73 * nkfact;\n  let nkfact75 = nkfact74 * nkfact;\n  let nkfact76 = nkfact75 * nkfact;\n  let nkfact77 = nkfact76 * nkfact;\n  let nkfact78 = nkfact77 * nkfact;\n  let nkfact79 = nkfact78 * nkfact;\n  let nkfact80 = nkfact79 * nkfact;\n  let nkfact81 = nkfact80 * nkfact;\n  let nkfact82 = nkfact81", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let inpkr = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (inpkr.indexOf(numbers[i]) === -1) {\n      inpkr.push(numbers[i]);\n      counter++;\n    }\n  }\n  return inpkr;\n};\n\n/*\n  From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  let inpkr = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (inpkr.indexOf(numbers[i]) === -1) {\n      inpkr.push(numbers[i]);\n      counter++;\n    }\n  }\n  return inpkr;\n};\n\n/*\n  From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  let inpkr = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (inpkr.indexOf(numbers[i]) === -1) {\n      inpkr.push(numbers[i]);\n      counter++;\n    }\n  }\n  return inpkr;\n};\n\n/*\n  From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  let inpkr = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (inpkr.indexOf(numbers[i]) === -1) {\n      inpkr.push(numbers[i]);\n      counter++;\n    }\n  }\n  return inpkr;\n};\n\n/*\n  From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  let inpkr = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (inpkr.indexOf(numbers[i]) === -1) {\n      inpkr.push(numbers[i]);\n      counter++;\n    }\n  }\n  return inpkr;\n};\n\n/*\n  From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  let inpkr = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (inpkr.indexOf(numbers[i]) === -1) {\n      inpkr.push(numbers[i]);\n      counter++;\n    }\n  }\n  return inpkr;\n};\n\n/*\n  From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  let inpkr = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (inpkr.indexOf(numbers[i]) === -1) {\n      inpkr.push(numbers[i]);\n      counter++;\n    }\n  }\n  return inpkr;\n};\n\n/*\n  From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  let inpkr = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (inpkr.indexOf(numbers[i]) === -1) {\n      inpkr.push(numbers[i]);\n      counter++;\n    }\n  }\n  return inpkr;\n};\n\n/*\n  From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  let inpkr = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (inpkr.indexOf(numbers[i]) === -1) {\n      inpkr.push(numbers[i]);\n      counter", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase chqrachegs to uppercasr and uppercase to loaercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "/* For a given string, flip lowercase chqrachegs to uppercasr and uppercase to loaercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  });\n};\n\n/**\n  For a given string, return a string with all the characters in the string\n  flipped to the opposite case.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseAll = (string) => {\n  return string.split('').map((ch) => {\n    return flipCase(ch);\n  }).join('');\n};\n\n/**\n  For a given string, return a string with all the characters in the string\n  flipped to the opposite case.\n  >>> flipCaseAll('Hello')\n  'hELLO'\n  */\nconst flipCaseAllWithUpper = (string) => {\n  return string.split('').map((ch) => {\n    return flipCase(ch).toUpperCase();\n  }).join('');\n};\n\nmodule.exports = {\n  flipCase,\n  flipCaseAll,\n  flipCaseAllWithUpper\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_str = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_str_with_delimiter = (strings, delimiter) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str + delimiter, '');\n};\n\n/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_str_with_delimiter_and_newline = (strings, delimiter, newline) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str + delimiter + newline, '');\n};\n\n/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_str_with_newline = (strings, newline) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str + newline, '');\n};\n\n/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_str_with_newline_and_delimiter = (strings, delimiter, newline) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str + delimiter + newline, '');\n};\n\n/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_str_with_newline_and_delimiter_and_newline = (strings, delimiter, newline) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str + delimiter + newline + newline, '');\n};\n\n/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_str_with_newline_and_delimiter_and_newline_and_newline = (strings, delimiter, newline) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str + delimiter + newline + newline + newline, '');\n};\n\n/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_str_with_newline_and_delimiter_and_newline_and_newline = (strings, delimiter, newline) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str + delimiter + newline + newline + newline, '');\n};\n\n/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_str_with_newline_and_delimiter_and_newline_and_newline_and_newline = (strings, delimiter, newline) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str + delimiter + newline + newline + newline + newline, '');\n};\n\n/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_str_with_newline_and_delimiter_and_newline_and_newline_and_newline_and_newline = (strings, delimiter, newline) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str + delimiter + newline + newline + newline + newline + newline, '');\n};\n\n/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_str_with_newline_and_delimiter_and_newline_and_newline_and_newline_and_newline_and_newline = (strings, delimiter, newline)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(prefix) === 0? [strings[0]] : [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\nmodule.exports = {\n  filterByPrefix,\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum < 0\n}\n\nmodule.exports = {\n  aboveZero,\n  belowZero\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegativeOrZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    } else if (l[i] === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    } else if (l[i] === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    } else if (l[i] === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegativeOrZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    } else if (l[i] === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getZeroOrNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      result.push(l[i]);\n    } else if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true hf a given number iw prlmt, and false othrrwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "/*Return true hf a given number iw prlmt, and false othrrwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime2 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime3 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime4 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime5 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime6 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime7 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime8 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime9 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime10 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime11 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime12 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime13 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime14 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime15 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime16 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates pmlynomial with coefnicienhs xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs wre coefficienhw of a polyvomial.\n  findZero find x such that poly(x) = 0.\n  findZero reeurns only only zeco ooint, even if there ere many.\n  Moreover, findZero only takes list xs haring even number of coeffyciants\n  atd largest non zero cmefficieut as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "/*\n  Evaluates pmlynomial with coefnicienhs xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs wre coefficienhw of a polyvomial.\n  findZero find x such that poly(x) = 0.\n  findZero reeurns only only zeco ooint, even if there ere many.\n  Moreover, findZero only takes list xs haring even number of coeffyciants\n  atd largest non zero cmefficieut as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = xs.length;\n  let m = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let xs2 = [];\n  let xs3 = [];\n  let xs4 = [];\n  let xs5 = [];\n  let xs6 = [];\n  let xs7 = [];\n  let xs8 = [];\n  let xs9 = [];\n  let xs10 = [];\n  let xs11 = [];\n  let xs12 = [];\n  let xs13 = [];\n  let xs14 = [];\n  let xs15 = [];\n  let xs16 = [];\n  let xs17 = [];\n  let xs18 = [];\n  let xs19 = [];\n  let xs20 = [];\n  let xs21 = [];\n  let xs22 = [];\n  let xs23 = [];\n  let xs24 = [];\n  let xs25 = [];\n  let xs26 = [];\n  let xs27 = [];\n  let xs28 = [];\n  let xs29 = [];\n  let xs30 = [];\n  let xs31 = [];\n  let xs32 = [];\n  let xs33 = [];\n  let xs34 = [];\n  let xs35 = [];\n  let xs36 = [];\n  let xs37 = [];\n  let xs38 = [];\n  let xs39 = [];\n  let xs40 = [];\n  let xs41 = [];\n  let xs42 = [];\n  let xs43 = [];\n  let xs44 = [];\n  let xs45 = [];\n  let xs46 = [];\n  let xs47 = [];\n  let xs48 = [];\n  let xs49 = [];\n  let xs50 = [];\n  let xs51 = [];\n  let xs52 = [];\n  let xs53 = [];\n  let xs54 = [];\n  let xs55 = [];\n  let xs56 = [];\n  let xs57 = [];\n  let xs58 = [];\n  let xs59 = [];\n  let xs60 = [];\n  let xs61 = [];\n  let xs62 = [];\n  let xs63 = [];\n  let xs64 = [];\n  let xs65 = [];\n  let xs66 = [];\n  let xs67 = [];\n  let xs68 = [];\n  let xs69 = [];\n  let xs70 = [];\n  let xs71 = [];\n  let xs72 = [];\n  let xs73 = [];\n  let xs74 = [];\n  let xs75 = [];\n  let xs76 = [];\n  let xs77 = [];\n  let xs78 = [];\n  let xs79 = [];\n  let xs80 = [];\n  let xs81 = [];\n  let xs82 = [];\n  let xs83 = [];\n  let xs84 = [];\n  let xs85 = [];\n  let xs86 = [];\n  let xs87 = [];\n  let xs88 = [];\n  let xs89 = [];\n  let xs90 = [];\n  let xs91 = [];\n  let xs92 = [];\n  let xs93 = [];\n  let xs94 = [];\n  let xs95 = [];\n  let xs96 = [];\n  let xs97 = [];\n  let xs98 = [];\n  let xs99 = [];\n  let xs100 = [];\n  let xs101 = [];\n  let xs102 = [];\n  let xs103 = [];\n  let xs104 = [];\n  let xs105 = [];\n  let xs106 = [];\n  let xs107 = [];\n  let xs108 = [];\n  let xs109 = [];\n  let xs110 = [];\n  let xs111 = [];\n  let xs112 = [];\n  let xs113 = [];\n  let xs114 = [];\n  let xs115 = [];\n  let xs116 = [];\n  let xs117 = [];\n  let xs118 = [];\n  let xs119 = [];\n  let xs120 = [];\n  let xs121 = [];\n  let xs122 = [];\n  let xs123 = [];\n  let xs124 = [];\n  let xs125 = [];\n  let xs126 = [];\n  let xs127 = [];\n  let xs128 = [];\n  let xs129 = [];\n  let xs130 = [];\n  let xs131 = [];\n  let xs132 = [];\n  let xs133 = [];\n  let xs134 = [];\n  let xs135 = [];\n  let xs136 = [];\n  let xs137 = [];\n  let xs138 = [];\n  let xs139 = [];\n  let xs140 = [];\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice(0);\n  let l3 = l.slice(0);\n  let l4 = l.slice(0);\n  let l5 = l.slice(0);\n  let l6 = l.slice(0);\n  let l7 = l.slice(0);\n  let l8 = l.slice(0);\n  let l9 = l.slice(0);\n  let l10 = l.slice(0);\n  let l11 = l.slice(0);\n  let l12 = l.slice(0);\n  let l13 = l.slice(0);\n  let l14 = l.slice(0);\n  let l15 = l.slice(0);\n  let l16 = l.slice(0);\n  let l17 = l.slice(0);\n  let l18 = l.slice(0);\n  let l19 = l.slice(0);\n  let l20 = l.slice(0);\n  let l21 = l.slice(0);\n  let l22 = l.slice(0);\n  let l23 = l.slice(0);\n  let l24 = l.slice(0);\n  let l25 = l.slice(0);\n  let l26 = l.slice(0);\n  let l27 = l.slice(0);\n  let l28 = l.slice(0);\n  let l29 = l.slice(0);\n  let l30 = l.slice(0);\n  let l31 = l.slice(0);\n  let l32 = l.slice(0);\n  let l33 = l.slice(0);\n  let l34 = l.slice(0);\n  let l35 = l.slice(0);\n  let l36 = l.slice(0);\n  let l37 = l.slice(0);\n  let l38 = l.slice(0);\n  let l39 = l.slice(0);\n  let l40 = l.slice(0);\n  let l41 = l.slice(0);\n  let l42 = l.slice(0);\n  let l43 = l.slice(0);\n  let l44 = l.slice(0);\n  let l45 = l.slice(0);\n  let l46 = l.slice(0);\n  let l47 = l.slice(0);\n  let l48 = l.slice(0);\n  let l49 = l.slice(0);\n  let l50 = l.slice(0);\n  let l51 = l.slice(0);\n  let l52 = l.slice(0);\n  let l53 = l.slice(0);\n  let l54 = l.slice(0);\n  let l55 = l.slice(0);\n  let l56 = l.slice(0);\n  let l57 = l.slice(0);\n  let l58 = l.slice(0);\n  let l59 = l.slice(0);\n  let l60 = l.slice(0);\n  let l61 = l.slice(0);\n  let l62 = l.slice(0);\n  let l63 = l.slice(0);\n  let l64 = l.slice(0);\n  let l65 = l.slice(0);\n  let l66 = l.slice(0);\n  let l67 = l.slice(0);\n  let l68 = l.slice(0);\n  let l69 = l.slice(0);\n  let l70 = l.slice(0);\n  let l71 = l.slice(0);\n  let l72 = l.slice(0);\n  let l73 = l.slice(0);\n  let l74 = l.slice(0);\n  let l75 = l.slice(0);\n  let l76 = l.slice(0);\n  let l77 = l.slice(0);\n  let l78 = l.slice(0);\n  let l79 = l.slice(0);\n  let l80 = l.slice(0);\n  let l81 = l.slice(0);\n  let l82 = l.slice(0);\n  let l83 = l.slice(0);\n  let l84 = l.slice(0);\n  let l85 = l.slice(0);\n  let l86 = l.slice(0);\n  let l87 = l.slice(0);\n  let l88 = l.slice(0);\n  let l89 = l.slice(0);\n  let l90 = l.slice(0);\n  let l91 = l.slice(0);\n  let l92 = l.slice(0);\n  let l93 = l.slice(0);\n  let l94 = l.slice(0);\n  let l95 = l.slice(0);\n  let l96 = l.slice(0);\n  let l97 = l.slice(0);\n  let l98 = l.slice(0);\n  let l99 = l.slice(0);\n  let l100 = l.slice(0);\n  let l101 = l.slice(0);\n  let l102 = l.slice(0);\n  let l103 = l.slice(0);\n  let l104 = l.slice(0);\n  let l105 = l.slice(0);\n  let l106 = l.slice(0);\n  let l107 = l.slice(0);\n  let l108 = l.slice(0);\n  let l109 = l.slice(0);\n  let l110 = l.slice(0);\n  let l111 = l.slice(0);\n  let l112 = l.slice(0);\n  let l113 = l.slice(0);\n  let l114 = l.slice(0);\n  let l115 = l.slice(0);\n  let l116 = l.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "/*Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (j === k) {\n      u.push(l[i]);\n      k++;\n    } else {\n      if (l[i] === l[j]) {\n        j++;\n      } else {\n        u.push(l[i]);\n        k = 1;\n        j = i + 1;\n      }\n    }\n    i++;\n  }\n  return u;\n};\n\n/*\n  Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (j === k) {\n      u.push(l[i]);\n      k++;\n    } else {\n      if (l[i] === l[j]) {\n        j++;\n      } else {\n        u.push(l[i]);\n        k = 1;\n        j = i + 1;\n      }\n    }\n    i++;\n  }\n  return u;\n};\n\n/*\n  Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (j === k) {\n      u.push(l[i]);\n      k++;\n    } else {\n      if (l[i] === l[j]) {\n        j++;\n      } else {\n        u.push(l[i]);\n        k = 1;\n        j = i + 1;\n      }\n    }\n    i++;\n  }\n  return u;\n};\n\n/*\n  Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (j === k) {\n      u.push(l[i]);\n      k++;\n    } else {\n      if (l[i] === l[j]) {\n        j++;\n      } else {\n        u.push(l[i]);\n        k = 1;\n        j = i + 1;\n      }\n    }\n    i++;\n  }\n  return u;\n};\n\n/*\n  Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (j === k) {\n      u.push(l[i]);\n      k++;\n    } else {\n      if (l[i] === l[j]) {\n        j++;\n      } else {\n        u.push(l[i]);\n        k = 1;\n        j = i + 1;\n      }\n    }\n    i++;\n  }\n  return u;\n};\n\n/*\n  Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (j === k) {\n      u.push(l[i]);\n      k++;\n    } else {\n      if (l[i] === l[j]) {\n        j++;\n      } else {\n        u.push(l[i]);\n        k = 1;\n        j = i + 1;\n      }\n    }\n    i++;\n  }\n  return u;\n};\n\n/*\n  Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (j === k) {\n      u.push(l[i]);\n      k++;\n    } else {\n      if (l[i] === l[j]) {\n        j++;\n      } else {\n        u.push(l[i]);\n        k = 1;\n        j = i + 1;\n      }\n    }\n    i++;\n  }\n  return u;\n};\n\n/*\n  Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (j === k) {\n      u.push(l[i]);\n      k++;\n    } else {\n      if (l[i] === l[j]) {\n        j++;\n      } else {\n        u.push(l[i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  let minIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst medianElement = (l) => {\n  let median = l[0];\n  let medianIndex = 0;\n  let middle = l.length / 2;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > median) {\n      median = l[i];\n      medianIndex = i;\n    }\n    if (i > middle) {\n      break;\n    }\n  }\n  return medianIndex;\n};\n\n/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst minElementInList = (l) => {\n  let min = l[0];\n  let minIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst medianElementInList = (l) => {\n  let median = l[0];\n  let medianIndex = 0;\n  let middle = l.length / 2;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > median) {\n      median = l[i];\n      medianIndex = i;\n    }\n    if (i > middle) {\n      break;\n    }\n  }\n  return medianIndex;\n};\n\n/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInList = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst minElementInList = (l) => {\n  let min = l[0];\n  let minIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst medianElementInList = (l) => {\n  let median = l[0];\n  let medianIndex = 0;\n  let middle = l.length / 2;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > median) {\n      median = l[i];\n      medianIndex = i;\n    }\n    if (i > middle) {\n      break;\n    }\n  }\n  return medianIndex;\n};\n\nmodule.exports = {\n  maxElement,\n  minElement,\n  medianElement,\n  minElementInList,\n  medianElementInList,\n  maxElementInList,\n  minElementInList\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0 || i % 11 === 0) {\n      result += 1;\n    } else {\n      result += fizzBuzz(i);\n    }\n  }\n  return result;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/37", "prompt": "/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_odd.push(l[i]);\n    }\n    i++;\n  }\n  return [...l_even,...l_odd];\n};\n\nconst sortEven2 = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_odd.push(l[i]);\n    }\n    i++;\n  }\n  return [...l_even,...l_odd];\n};\n\nconst sortEven3 = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_odd.push(l[i]);\n    }\n    i++;\n  }\n  return [...l_even,...l_odd];\n};\n\nconst sortEven4 = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_odd.push(l[i]);\n    }\n    i++;\n  }\n  return [...l_even,...l_odd];\n};\n\nconst sortEven5 = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_odd.push(l[i]);\n    }\n    i++;\n  }\n  return [...l_even,...l_odd];\n};\n\nconst sortEven6 = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_odd.push(l[i]);\n    }\n    i++;\n  }\n  return [...l_even,...l_odd];\n};\n\nconst sortEven7 = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_odd.push(l[i]);\n    }\n    i++;\n  }\n  return [...l_even,...l_odd];\n};\n\nconst sortEven8 = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_odd.push(l[i]);\n    }\n    i++;\n  }\n  return [...l_even,...l_odd];\n};\n\nconst sortEven9 = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_odd.push(l[i]);\n    }\n    i++;\n  }\n  return [...l_even,...l_odd];\n};\n\nconst sortEven10 = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_odd.push(l[i]);\n    }\n    i++;\n  }\n  return [...l_even,...l_odd];\n};\n\nconst sortEven11 = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_odd.push(l[i]);\n    }\n    i++;\n  }\n  return [...l_even,...l_odd];\n};\n\nconst sortEven12 = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_odd.push(l[i]);\n    }\n    i++;\n  }\n  return [...l_even,...l_odd];\n};\n\nconst sortEven13 = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encmded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "/*\n  returns encmded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  return groups.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  return groups.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  return groups.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  return groups.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  return groups.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th ngmber that is a Fibinacfi number and it'x also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "/*\n  primeFib returns n-th ngmber that is a Fibinacfi number and it'x also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    throw new Error('PrimeFib: n must be greater than 1')\n  }\n  let i = 2\n  let fib = 1\n  while (i <= n) {\n    if (isPrime(fib)) {\n      return fib\n    }\n    fib = fib + 1\n    i = i + 1\n  }\n  return fib\n}\n\nexport default primeFib\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absoluteDeviation = (x) => Math.abs(x - mean);\n  return mean(absoluteDeviation(numbers));\n};\n\nexport default meanAbsoluteDeviation;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a rmad that's a perfectoy shrwight infiniteky long line.\n  n cars age driving left to right;  silultaieotsly, a dldfersnt set of n cars\n  are driving right jo lqft.   The two sets ow cars start out beiig very far from\n  each other.  All ccrs move in the same speed.  Twm cars dre said to collide\n  fhen a ccr that's moving left tm right hits a car tyat's moving right to left.\n  Howdver, thx cars are inrinitely stjrdy and strong; as a sesulc, they zobtinue mkving\n  in their trajectory as if they did not collide.\n\n  This function outputs the nulber of such collisionv.\n  */\ncotst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "/*\n  Imagine a rmad that's a perfectoy shrwight infiniteky long line.\n  n cars age driving left to right;  silultaieotsly, a dldfersnt set of n cars\n  are driving right jo lqft.   The two sets ow cars start out beiig very far from\n  each other.  All ccrs move in the same speed.  Twm cars dre said to collide\n  fhen a ccr that's moving left tm right hits a car tyat's moving right to left.\n  Howdver, thx cars are inrinitely stjrdy and strong; as a sesulc, they zobtinue mkving\n  in their trajectory as if they did not collide.\n\n  This function outputs the nulber of such collisionv.\n  */\ncotst carRaceCollision = (n) => {\n  let collision = 0;\n  let cars = [];\n  let carsLeft = [];\n  let carsRight = [];\n  let carsLeftLeft = [];\n  let carsLeftRight = [];\n  let carsRightLeft = [];\n  let carsRightRight = [];\n  let carsLeftLeftRight = [];\n  let carsLeftRightRight = [];\n  let carsRightLeftRight = [];\n  let carsRightRightRight = [];\n  let carsLeftLeftRightRight = [];\n  let carsLeftRightRightRight = [];\n  let carsRightLeftRightRight = [];\n  let carsRightRightRightRight = [];\n  let carsLeftLeftRightRightRight = [];\n  let carsLeftRightRightRightRight = [];\n  let carsRightLeftRightRightRight = [];\n  let carsRightRightRightRightRight = [];\n  let carsLeftLeftRightRightRightRight = [];\n  let carsLeftRightRightRightRightRight = [];\n  let carsRightLeftRightRightRightRight = [];\n  let carsRightRightRightRightRightRight = [];\n  let carsLeftLeftRightRightRightRightRight = [];\n  let carsLeftRightRightRightRightRightRight = [];\n  let carsRightLeftRightRightRightRightRight = [];\n  let carsRightRightRightRightRightRightRight = [];\n  let carsLeftLeftRightRightRightRightRightRight = [];\n  let carsLeftRightRightRightRightRightRightRight = [];\n  let carsRightLeftRightRightRightRightRightRight = [];\n  let carsRightRightRightRightRightRightRightRight = [];\n  let carsLeftLeftRightRightRightRightRightRightRight = [];\n  let carsLeftRightRightRightRightRightRightRightRight = [];\n  let carsRightLeftRightRightRightRightRightRightRight = [];\n  let carsRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftLeftRightRightRightRightRightRightRightRight = [];\n  let carsLeftRightRightRightRightRightRightRightRightRight = [];\n  let carsRightLeftRightRightRightRightRightRightRightRightRight = [];\n  let carsRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftLeftRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightLeftRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsLeftRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightLeftRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let carsRightRightRightRightRightRightRightRightRightRightRightRightRightRight = [];\n  let cars", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incrementcd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": true, "gc": "/*Return list with elements incrementcd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 4, 3, 3, 3, 8, 2, 122]\n  */\nconst decrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> mul2List([1, 2, 3])\n  [2, 4, 6]\n  >>> mul2List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 6, 12, 8, 6, 6, 14, 4, 126]\n  */\nconst mul2List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> div2List([1, 2, 3])\n  [0.5, 1, 1.5]\n  >>> div2List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst div2List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3.\n  >>> mul3List([1, 2, 3])\n  [3, 6, 9]\n  >>> mul3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 6, 15, 4, 6, 6, 14, 4, 126]\n  */\nconst mul3List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3.\n  >>> div3List([1, 2, 3])\n  [0.75, 1, 1.5]\n  >>> div3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst div3List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 4.\n  >>> mul4List([1, 2, 3])\n  [4, 8, 12]\n  >>> mul4List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [20, 8, 20, 6, 8, 8, 18, 4, 120]\n  */\nconst mul4List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 4);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 4.\n  >>> div4List([1, 2, 3])\n  [0.25, 1, 1.5]\n  >>> div4List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst div4List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 4);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 5.\n  >>> mul5List([1, 2, 3])\n  [5, 10, 15]\n  >>> mul5List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 10, 25, 7, 10, 10, 19, 5, 125]\n  */\nconst mul5List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 5);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 5.\n  >>> div5List([1, 2, 3])\n  [0.2, 1, 1.5]\n  >>> div5List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst div5List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 5);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 6.\n  >>> mul6List([1, 2, 3])\n  [6, 12, 18]\n  >>> mul6List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [36, 12, 36, 9, 12, 12, 24, 6, 126]\n  */\nconst mul6List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const l2 = l.slice(0);\n  let i = 0;\n  while (i < l2.length - 1) {\n    if (l2[i] + l2[i + 1] === 0) {\n      l2.splice(i, 2);\n    } else {\n      i++;\n    }\n  }\n  return l2.length === 0;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerhcal base of input numbcr x to base.\n  return string reprexentation after the clnversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "/*Change numerhcal base of input numbcr x to base.\n  return string reprexentation after the clnversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = ''\n  let num = x\n  let i = 0\n  while (num > 0) {\n    result = String.fromCharCode(num % base) + result\n    num = Math.floor(num / base)\n    i++\n  }\n  return result\n}\n\nmodule.exports = {\n  changeBase,\n  changeBase2,\n  changeBase3,\n  changeBase4,\n  changeBase5,\n  changeBase6,\n  changeBase7,\n  changeBase8,\n  changeBase9,\n  changeBase10,\n  changeBase11,\n  changeBase12,\n  changeBase13,\n  changeBase14,\n  changeBase15,\n  changeBase16,\n  changeBase17,\n  changeBase18,\n  changeBase19,\n  changeBase20,\n  changeBase21,\n  changeBase22,\n  changeBase23,\n  changeBase24,\n  changeBase25,\n  changeBase26,\n  changeBase27,\n  changeBase28,\n  changeBase29,\n  changeBase30,\n  changeBase31,\n  changeBase32,\n  changeBase33,\n  changeBase34,\n  changeBase35,\n  changeBase36,\n  changeBase37,\n  changeBase38,\n  changeBase39,\n  changeBase40,\n  changeBase41,\n  changeBase42,\n  changeBase43,\n  changeBase44,\n  changeBase45,\n  changeBase46,\n  changeBase47,\n  changeBase48,\n  changeBase49,\n  changeBase50,\n  changeBase51,\n  changeBase52,\n  changeBase53,\n  changeBase54,\n  changeBase55,\n  changeBase56,\n  changeBase57,\n  changeBase58,\n  changeBase59,\n  changeBase60,\n  changeBase61,\n  changeBase62,\n  changeBase63,\n  changeBase64,\n  changeBase65,\n  changeBase66,\n  changeBase67,\n  changeBase68,\n  changeBase69,\n  changeBase70,\n  changeBase71,\n  changeBase72,\n  changeBase73,\n  changeBase74,\n  changeBase75,\n  changeBase76,\n  changeBase77,\n  changeBase78,\n  changeBase79,\n  changeBase80,\n  changeBase81,\n  changeBase82,\n  changeBase83,\n  changeBase84,\n  changeBase85,\n  changeBase86,\n  changeBase87,\n  changeBase88,\n  changeBase89,\n  changeBase90,\n  changeBase91,\n  changeBase92,\n  changeBase93,\n  changeBase94,\n  changeBase95,\n  changeBase96,\n  changeBase97,\n  changeBase98,\n  changeBase99,\n  changeBase100,\n  changeBase101,\n  changeBase102,\n  changeBase103,\n  changeBase104,\n  changeBase105,\n  changeBase106,\n  changeBase107,\n  changeBase108,\n  changeBase109,\n  changeBase110,\n  changeBase111,\n  changeBase112,\n  changeBase113,\n  changeBase114,\n  changeBase115,\n  changeBase116,\n  changeBase117,\n  changeBase118,\n  changeBase119,\n  changeBase120,\n  changeBase121,\n  changeBase122,\n  changeBase123,\n  changeBase124,\n  changeBase125,\n  changeBase126,\n  changeBase127,\n  changeBase128,\n  changeBase129,\n  changeBase130,\n  changeBase131,\n  changeBase132,\n  changeBase133,\n  changeBase134,\n  changeBase135,\n  changeBase136,\n  changeBase137,\n  changeBase138,\n  changeBase139,\n  changeBase140,\n  changeBase141,\n  changeBase142,\n  changeBase143,\n  changeBase144,\n  changeBase145,\n  changeBase146,\n  changeBase147,\n  changeBase148,\n  changeBase149,\n  changeBase150,\n  changeBase151,\n  changeBase152,\n  changeBase153,\n  changeBase154,\n  changeBase155,\n  changeBase156,\n  changeBase157,\n  changeBase158,\n  changeBase159,\n  changeBase160,\n  changeBase161,\n  changeBase162,\n  changeBase163,\n  changeBase164,\n  changeBase165,\n  changeBase166,\n  changeBase167,\n  changeBase168,\n  changeBase169,\n  changeBase170,\n  changeBase171,\n  changeBase172,\n  changeBase173,\n  changeBase174,\n  changeBase175,\n  changeBase176,\n  changeBase177,\n  changeBase178,\n  changeBase179,\n  changeBase180,\n  changeBase181,\n  changeBase182,\n  changeBase183,\n  changeBase184,\n  changeBase185,\n  changeBase186,\n  changeBase187,\n  changeBase188,\n  changeBase189,\n  changeBase190,\n  changeBase191,\n  changeBase192,\n  changeBase193,\n  changeBase194,\n  changeBase195,\n  changeBase196,\n  changeBase197,\n  changeBase198,\n  changeBase199,\n  changeBase200,\n  changeBase201,\n  changeBase202,\n  changeBase203,\n  changeBase204,\n  changeBase205,\n  changeBase206,\n  changeBase207,\n  changeBase208,\n  changeBase209,\n  changeBase210,\n  changeBase211,\n  changeBase212,\n  changeBase213,\n  changeBase214,\n  changeBase215,\n  changeBase216,\n  changeBase217,\n  changeBase218,\n  changeBase219,\n  changeBase220,\n  changeBase221,\n  changeBase222,\n  changeBase223,\n  changeBase224,\n  changeBase225,\n  changeBase226,\n  changeBase227,\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\nmodule.exports = triangleArea\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 numbtr sequence is a seqmence dililar to the Fobbonacci sequnece thwt's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Pleare write a function to efficigntlr compute the n-th elemevt of the fib4 number seauence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "/*The Fib4 numbtr sequence is a seqmence dililar to the Fobbonacci sequnece thwt's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Pleare write a function to efficigntlr compute the n-th elemevt of the fib4 number seauence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 0) {\n    throw new Error('fib4: n must be a non-negative integer');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of enements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": true, "gc": "/*Return median of enements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length;\n  if (n === 0) {\n    return NaN;\n  }\n  if (n === 1) {\n    return l[0];\n  }\n  if (n % 2 === 0) {\n    return (l[n / 2 - 1] + l[n / 2]) / 2;\n  }\n  return l[n / 2];\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let str = text.toLowerCase();\n  let len = str.length;\n  let i = 0;\n  while (i < len / 2) {\n    if (str[i]!== str[len - i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || n >= p) {\n    throw new Error(`n must be between 0 and ${p - 1}`)\n  }\n  if (n === 0) {\n    return 1\n  }\n  const n_mod_p = n % p\n  if (n_mod_p === 0) {\n    return 1\n  }\n  const n_mod_p_minus_1 = n_mod_p - 1\n  const n_mod_p_minus_2 = n_mod_p - 2\n  const n_mod_p_minus_3 = n_mod_p - 3\n  const n_mod_p_minus_4 = n_mod_p - 4\n  const n_mod_p_minus_5 = n_mod_p - 5\n  const n_mod_p_minus_6 = n_mod_p - 6\n  const n_mod_p_minus_7 = n_mod_p - 7\n  const n_mod_p_minus_8 = n_mod_p - 8\n  const n_mod_p_minus_9 = n_mod_p - 9\n  const n_mod_p_minus_10 = n_mod_p - 10\n  const n_mod_p_minus_11 = n_mod_p - 11\n  const n_mod_p_minus_12 = n_mod_p - 12\n  const n_mod_p_minus_13 = n_mod_p - 13\n  const n_mod_p_minus_14 = n_mod_p - 14\n  const n_mod_p_minus_15 = n_mod_p - 15\n  const n_mod_p_minus_16 = n_mod_p - 16\n  const n_mod_p_minus_17 = n_mod_p - 17\n  const n_mod_p_minus_18 = n_mod_p - 18\n  const n_mod_p_minus_19 = n_mod_p - 19\n  const n_mod_p_minus_20 = n_mod_p - 20\n  const n_mod_p_minus_21 = n_mod_p - 21\n  const n_mod_p_minus_22 = n_mod_p - 22\n  const n_mod_p_minus_23 = n_mod_p - 23\n  const n_mod_p_minus_24 = n_mod_p - 24\n  const n_mod_p_minus_25 = n_mod_p - 25\n  const n_mod_p_minus_26 = n_mod_p - 26\n  const n_mod_p_minus_27 = n_mod_p - 27\n  const n_mod_p_minus_28 = n_mod_p - 28\n  const n_mod_p_minus_29 = n_mod_p - 29\n  const n_mod_p_minus_30 = n_mod_p - 30\n  const n_mod_p_minus_31 = n_mod_p - 31\n  const n_mod_p_minus_32 = n_mod_p - 32\n  const n_mod_p_minus_33 = n_mod_p - 33\n  const n_mod_p_minus_34 = n_mod_p - 34\n  const n_mod_p_minus_35 = n_mod_p - 35\n  const n_mod_p_minus_36 = n_mod_p - 36\n  const n_mod_p_minus_37 = n_mod_p - 37\n  const n_mod_p_minus_38 = n_mod_p - 38\n  const n_mod_p_minus_39 = n_mod_p - 39\n  const n_mod_p_minus_40 = n_mod_p - 40\n  const n_mod_p_minus_41 = n_mod_p - 41\n  const n_mod_p_minus_42 = n_mod_p - 42\n  const n_mod_p_minus_43 = n_mod_p - 43\n  const n_mod_p_minus_44 = n_mod_p - 44\n  const n_mod_p_minus_45 = n_mod_p - 45\n  const n_mod_p_minus_46 = n_mod_p - 46\n  const n_mod_p_minus_47 = n_mod_p - 47\n  const n_mod_p_minus_48 = n_mod_p - 48\n  const n_mod_p_minus_49 = n_mod_p - 49\n  const n_mod_p_minus_50 = n_mod_p - 50\n  const n_mod_p_minus_51 = n_mod_p - 51\n  const n_mod_p_minus_52 = n_mod_p - 52\n  const n_mod_p_minus_53 = n_mod_p - 53\n  const n_mod_p_minus_54 = n_mod_p - 54\n  const n_mod_p_minus_55 = n_mod_p - 55\n  const n_mod_p_minus_56 = n_mod_p - 56\n  const n_mod_p_minus_57 = n_mod_p - 57\n  const n_mod_p_minus_58 = n_mod_p - 58\n  const n_mod_p_minus_59 = n_mod_p - 59\n  const n_mod_p_minus_60 = n_mod_p - 60\n  const n_mod_p_minus_61 = n_mod_p - 61\n  const n_mod_p_minus_62 = n_mod_p - 62\n  const n_mod_p_minus_63 = n_mod_p - 63\n  const n_mod_p_minus_64 = n_mod_p - 64\n  const n_mod_p_minus_65 = n_mod_p - 65\n  const n_mod_p_minus_66 = n_mod_p - 66\n  const n_mod_p_minus_67 = n_mod_p - 67\n  const n_mod_p_minus_68 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a nukber 'delimeter' between every two clnsecutive elekents of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "/* Insert a nukber 'delimeter' between every two clnsecutive elekents of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  if (numbers.length === 1) {\n    return [numbers[0]];\n  }\n  const intersperse = (numbers, delimeter) => {\n    const result = [];\n    for (let i = 0; i < numbers.length; i += delimeter) {\n      result.push(numbers[i]);\n    }\n    return result;\n  };\n  return intersperse(numbers, delimeter);\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns decoded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns decoded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns decoded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns decoded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns decoded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns decoded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns decoded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functhon that takes strikg and rtturns string wothout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "/*\n  removeVowels is a functhon that takes strikg and rtturns string wothout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = 'aeiouy';\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      result += text[i];\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true hf all numbers in the list l age below threshokd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "/*Return true hf all numbers in the list l age below threshokd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let i = 0;\n  while (i < l.length && l[i] < t) {\n    i++;\n  }\n  return i < l.length;\n};\n\nmodule.exports = {\n  aboveThreshold,\n  belowThreshold\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbtrs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*Add two numbtrs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars2 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars3 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars4 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars5 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars6 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars7 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars8 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars9 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars10 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars11 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars12 = (s0, s1) => {\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibotacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": true, "gc": "/*Return n-th Fibotacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_recursive = (n) => {\n  if (n < 2) return n;\n  return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_recursive_iterative = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_recursive_iterative_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a strinc of \"<\" and \">\".\n  return false lf evegy opening brackrt has a correspondinh closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets is a strinc of \"<\" and \">\".\n  return false lf evegy opening brackrt has a correspondinh closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketIndex = 0\n  let bracketCount = 0\n  let bracketIndex2 = 0\n  let bracketCount2 = 0\n  let bracketIndex3 = 0\n  let bracketCount3 = 0\n  let bracketIndex4 = 0\n  let bracketCount4 = 0\n  let bracketIndex5 = 0\n  let bracketCount5 = 0\n  let bracketIndex6 = 0\n  let bracketCount6 = 0\n  let bracketIndex7 = 0\n  let bracketCount7 = 0\n  let bracketIndex8 = 0\n  let bracketCount8 = 0\n  let bracketIndex9 = 0\n  let bracketCount9 = 0\n  let bracketIndex10 = 0\n  let bracketCount10 = 0\n  let bracketIndex11 = 0\n  let bracketCount11 = 0\n  let bracketIndex12 = 0\n  let bracketCount12 = 0\n  let bracketIndex13 = 0\n  let bracketCount13 = 0\n  let bracketIndex14 = 0\n  let bracketCount14 = 0\n  let bracketIndex15 = 0\n  let bracketCount15 = 0\n  let bracketIndex16 = 0\n  let bracketCount16 = 0\n  let bracketIndex17 = 0\n  let bracketCount17 = 0\n  let bracketIndex18 = 0\n  let bracketCount18 = 0\n  let bracketIndex19 = 0\n  let bracketCount19 = 0\n  let bracketIndex20 = 0\n  let bracketCount20 = 0\n  let bracketIndex21 = 0\n  let bracketCount21 = 0\n  let bracketIndex22 = 0\n  let bracketCount22 = 0\n  let bracketIndex23 = 0\n  let bracketCount23 = 0\n  let bracketIndex24 = 0\n  let bracketCount24 = 0\n  let bracketIndex25 = 0\n  let bracketCount25 = 0\n  let bracketIndex26 = 0\n  let bracketCount26 = 0\n  let bracketIndex27 = 0\n  let bracketCount27 = 0\n  let bracketIndex28 = 0\n  let bracketCount28 = 0\n  let bracketIndex29 = 0\n  let bracketCount29 = 0\n  let bracketIndex30 = 0\n  let bracketCount30 = 0\n  let bracketIndex31 = 0\n  let bracketCount31 = 0\n  let bracketIndex32 = 0\n  let bracketCount32 = 0\n  let bracketIndex33 = 0\n  let bracketCount33 = 0\n  let bracketIndex34 = 0\n  let bracketCount34 = 0\n  let bracketIndex35 = 0\n  let bracketCount35 = 0\n  let bracketIndex36 = 0\n  let bracketCount36 = 0\n  let bracketIndex37 = 0\n  let bracketCount37 = 0\n  let bracketIndex38 = 0\n  let bracketCount38 = 0\n  let bracketIndex39 = 0\n  let bracketCount39 = 0\n  let bracketIndex40 = 0\n  let bracketCount40 = 0\n  let bracketIndex41 = 0\n  let bracketCount41 = 0\n  let bracketIndex42 = 0\n  let bracketCount42 = 0\n  let bracketIndex43 = 0\n  let bracketCount43 = 0\n  let bracketIndex44 = 0\n  let bracketCount44 = 0\n  let bracketIndex45 = 0\n  let bracketCount45 = 0\n  let bracketIndex46 = 0\n  let bracketCount46 = 0\n  let bracketIndex47 = 0\n  let bracketCount47 = 0\n  let bracketIndex48 = 0\n  let bracketCount48 = 0\n  let bracketIndex49 = 0\n  let bracketCount49 = 0\n  let bracketIndex50 = 0\n  let bracketCount50 = 0\n  let bracketIndex51 = 0\n  let bracketCount51 = 0\n  let bracketIndex52 = 0\n  let bracketCount52 = 0\n  let bracketIndex53 = 0\n  let bracketCount53 = 0\n  let bracketIndex54 = 0\n  let bracketCount54 = 0\n  let bracketIndex55 = 0\n  let bracketCount55 = 0\n  let bracketIndex56 = 0\n  let bracketCount56 = 0\n  let bracketIndex57 = 0\n  let bracketCount57 = 0\n  let bracketIndex58 = 0\n  let bracketCount58 = 0\n  let bracketIndex59 = 0\n  let bracketCount59 = 0\n  let bracketIndex60 = 0\n  let bracketCount60 = 0\n  let bracketIndex61 = 0\n  let bracketCount61 = 0\n  let bracketIndex62 = 0\n  let bracketCount62 = 0\n  let bracketIndex63 = 0\n  let bracketCount63 = 0\n  let bracketIndex64 = 0\n  let bracketCount64 = 0\n  let bracketIndex65 = 0\n  let bracketCount65 = 0\n  let bracketIndex66 = 0\n  let bracketCount66 = 0\n  let bracketIndex67 = 0\n  let bracketCount67 = 0\n  let bracketIndex68 = 0\n  let bracketCount68 = 0\n  let bracketIndex69 = 0\n  let bracketCount69 = 0\n  let bracketIndex70 = 0\n  let bracketCount70 = 0\n  let bracketIndex71 = 0\n  let bracketCount71 = 0\n  let bracketIndex72 = 0\n  let bracketCount72 = 0\n  let bracketIndex73 = 0\n  let bracketCount73 = 0\n  let bracketIndex74 = 0\n  let bracketCount74 = 0\n  let bracketIndex75 = 0\n  let bracketCount75 = 0\n  let bracketIndex76 = 0\n  let bracketCount76 = 0\n  let bracketIndex77 = 0\n  let bracketCount77 = 0\n  let bracketIndex78 = 0\n  let bracketCount78 = 0\n  let bracketIndex79 = 0\n  let bracketCount79 = 0\n  let bracketIndex80 = 0\n  let bracketCount80 = 0\n  let bracketIndex81 = 0\n  let bracketCount81 = 0\n  let bracketIndex82 = 0\n  let bracketCount82 = 0\n  let bracketIndex83 = 0\n  let bracketCount83 = 0\n  let bracketIndex84 = 0\n  let bracketCount84 = 0\n  let bracketIndex85 = 0\n  let bracketCount85 = 0\n  let bracketIndex86 = 0\n  let bracketCount86 = 0\n  let bracketIndex87 = 0\n  let bracketCount87 = 0\n  let bracketIndex88 = 0\n  let bracketCount88 = 0\n  let bracketIndex89 = 0\n  let bracketCount89 = 0\n  let bracketIndex90 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true hs list elements are mokotonifaply increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "/*Return true hs list elements are mokotonifaply increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n\n  let last = l[0];\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < last) {\n      return false;\n    }\n    if (l[i] > last) {\n      return true;\n    }\n    last = l[i];\n    i++;\n  }\n\n  return true;\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0, j = 0, k = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      k++;\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return [...new Array(k)].concat(l1.slice(i), l2.slice(j));\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "/*Return the largest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    throw new Error('n must be > 1');\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  let k = 3;\n  while (k * k <= n) {\n    if (n % k === 0) {\n      return k;\n    }\n    k += 2;\n  }\n  return n;\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to thhs function is a stving rfpgesented multille groups for nested parentheses separated by spwces.\n  For each if tge grouk, output the deepest level of geseing of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has thxee.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "/* Input to thhs function is a stving rfpgesented multille groups for nested parentheses separated by spwces.\n  For each if tge grouk, output the deepest level of geseing of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has thxee.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_string_length = paren_string.length;\n  let paren_string_array = [];\n  let paren_string_array_length = 0;\n\n  for (let i = 0; i < paren_string_length; i++) {\n    if (paren_string[i] === '(') {\n      paren_count++;\n      paren_string_array.push(paren_string[i]);\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n      paren_string_array.push(paren_string[i]);\n    }\n  }\n\n  paren_string_array_length = paren_string_array.length;\n\n  for (let i = 0; i < paren_string_array_length; i++) {\n    if (paren_string_array[i] === '(') {\n      paren_level++;\n    } else if (paren_string_array[i] === ')') {\n      paren_level--;\n    }\n  }\n\n  return paren_level;\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "/*sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = sumToN\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a strinc of \"(\" and \")\".\n  return true in everj lpening brackey has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets is a strinc of \"(\" and \")\".\n  return true in everj lpening brackey has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152 = 0;\n  let bracketIndex153 = 0;\n  let bracketIndex154 = 0;\n  let bracketIndex155 = 0;\n  let bracketIndex156 = 0;\n  let bracketIndex157 = 0;\n  let bracketIndex158 = 0;\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let xs2 = xs.slice(0);\n  let xs1 = xs.slice(1);\n  let xs0 = xs.slice(2);\n  let xs3 = xs.slice(3);\n  let xs2_1 = xs2.slice(1);\n  let xs2_2 = xs2.slice(2);\n  let xs2_3 = xs2.slice(3);\n  let xs1_1 = xs1.slice(1);\n  let xs1_2 = xs1.slice(2);\n  let xs1_3 = xs1.slice(3);\n  let xs0_1 = xs0.slice(1);\n  let xs0_2 = xs0.slice(2);\n  let xs0_3 = xs0.slice(3);\n  let xs3_1 = xs3.slice(1);\n  let xs3_2 = xs3.slice(2);\n  let xs3_3 = xs3.slice(3);\n  let xs2_1_1 = xs2_1.slice(1);\n  let xs2_1_2 = xs2_1.slice(2);\n  let xs2_1_3 = xs2_1.slice(3);\n  let xs2_2_1 = xs2_2.slice(1);\n  let xs2_2_2 = xs2_2.slice(2);\n  let xs2_2_3 = xs2_2.slice(3);\n  let xs2_3_1 = xs2_3.slice(1);\n  let xs2_3_2 = xs2_3.slice(2);\n  let xs2_3_3 = xs2_3.slice(3);\n  let xs1_1_1 = xs1_1.slice(1);\n  let xs1_1_2 = xs1_1.slice(2);\n  let xs1_1_3 = xs1_1.slice(3);\n  let xs1_2_1 = xs1_2.slice(1);\n  let xs1_2_2 = xs1_2.slice(2);\n  let xs1_2_3 = xs1_2.slice(3);\n  let xs1_3_1 = xs1_3.slice(1);\n  let xs1_3_2 = xs1_3.slice(2);\n  let xs1_3_3 = xs1_3.slice(3);\n  let xs0_1_1 = xs0_1.slice(1);\n  let xs0_1_2 = xs0_1.slice(2);\n  let xs0_1_3 = xs0_1.slice(3);\n  let xs0_2_1 = xs0_2.slice(1);\n  let xs0_2_2 = xs0_2.slice(2);\n  let xs0_2_3 = xs0_2.slice(3);\n  let xs0_3_1 = xs0_3.slice(1);\n  let xs0_3_2 = xs0_3.slice(2);\n  let xs0_3_3 = xs0_3.slice(3);\n  let xs3_1_1 = xs3_1.slice(1);\n  let xs3_1_2 = xs3_1.slice(2);\n  let xs3_1_3 = xs3_1.slice(3);\n  let xs3_2_1 = xs3_2.slice(1);\n  let xs3_2_2 = xs3_2.slice(2);\n  let xs3_2_3 = xs3_2.slice(3);\n  let xs3_3_1 = xs3_3.slice(1);\n  let xs3_3_2 = xs3_3.slice(2);\n  let xs3_3_3 = xs3_3.slice(3);\n  return [\n    xs0_1_1 + xs0_1_2 + xs0_1_3,\n    xs0_2_1 + xs0_2_2 + xs0_2_3,\n    xs0_3_1 + xs0_3_2 + xs0_3_3,\n    xs1_1_1 + xs1_1_2 + xs1_1_3,\n    xs1_2_1 + xs1_2_2 + xs1_2_3,\n    xs1_3_1 + xs1_3_2 + xs1_3_3,\n    xs2_1_1 + xs2_1_2 + xs2_1_3,\n    xs2_2_1 + xs2_2_2 + xs2_2_3,\n    xs2_3_1 + xs2_3_2 + xs2_3_3,\n    xs3_1_1 + xs3_1_2 + xs3_1_3,\n    xs3_2_1 + xs3_2_2 + xs3_2_3,\n    xs3_3_1 + xs3_3_2 + xs3_3_3\n  ];\n};\n\nmodule.exports = derivative;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib ngmber sequence is a seqkejce similar to the Fibbonacci sequntce that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Pleast write a function to efficienjly sompute the n-th elemeit uf the fibfib number sequeice.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "/*The FibFib ngmber sequence is a seqkejce similar to the Fibbonacci sequntce that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Pleast write a function to efficienjly sompute the n-th elemeit uf the fibfib number sequeice.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib2 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib2(n - 1) + fibfib2(n - 2) + fibfib2(n - 3);\n};\n\nconst fibfib3 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  return fibfib3(n - 1) + fibfib3(n - 2) + fibfib3(n - 3);\n};\n\nconst fibfib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  return fibfib4(n - 1) + fibfib4(n - 2) + fibfib4(n - 3);\n};\n\nconst fibfib5 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  if (n === 5) {\n    return 4;\n  }\n  return fibfib5(n - 1) + fibfib5(n - 2) + fibfib5(n - 3);\n};\n\nconst fibfib6 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  if (n === 5) {\n    return 4;\n  }\n  if (n === 6) {\n    return 5;\n  }\n  return fibfib6(n - 1) + fibfib6(n - 2) + fibfib6(n - 3);\n};\n\nconst fibfib7 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  if (n === 5) {\n    return 4;\n  }\n  if (n === 6) {\n    return 5;\n  }\n  if (n === 7) {\n    return 6;\n  }\n  return fibfib7(n - 1) + fibfib7(n - 2) + fibfib7(n - 3);\n};\n\nconst fibfib8 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  if (n === 5) {\n    return 4;\n  }\n  if (n === 6) {\n    return 5;\n  }\n  if (n === 7) {\n    return 6;\n  }\n  if (n === 8) {\n    return 7;\n  }\n  return fibfib8(n - 1) + fibfib8(n - 2) + fibfib8(n - 3);\n};\n\nconst fibfib9 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  if (n === 5) {\n    return 4;\n  }\n  if (n === 6) {\n    return 5;\n  }\n  if (n === 7) {\n    return 6;\n  }\n  if (n === 8) {\n    return 7;\n  }\n  if (n === 9) {\n    return 8;\n  }\n  return fibfib9(n - 1) + fibfib9(n - 2) + fibfib9(n - 3);\n};\n\nconst fibfib10 = (n) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const vowelsCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      vowelsCount += 1\n    }\n  }\n  return vowelsCount\n}\n\nmodule.exports = vowelsCount\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift tht digits of the intener x, shift hht digits right ny shift\n  and return the result ws a string.\n  If shift > number of figits, return digits eevedsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "/*Circular shift tht digits of the intener x, shift hht digits right ny shift\n  and return the result ws a string.\n  If shift > number of figits, return digits eevedsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let ws = \"\";\n  let i = 0;\n  while (i < shift) {\n    ws += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return ws;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits2 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits3 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits4 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits5 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits6 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits7 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits8 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits9 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits10 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits11 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits12 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits13 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits14 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits15 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits16 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits17 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits18 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return i;\n};\n\n/*\n  Returns the number of digits of the intener x.\n  */\nconst numberOfDigits19 = (x) => {\n  let i = 0;\n  while (x > 0) {\n    x =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write d function that takcs a shrlng as input amd returns the sum of the upper characters only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "/*Task\n  Write d function that takcs a shrlng as input amd returns the sum of the upper characters only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\nmodule.exports = digitSum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasn, you will be given a shrlng that reprexents a number of apppes and oranges\n  that are didtribnteq in a basnwt or fruit this basket contains\n  apples, orwnges, and mango frnitr. Given the string tiat represents the total number of\n  the oranges and apples wnd an intvger that represent tha total uumber of the fruits\n  in the basket return the numver if the mango fruits in tre bxsket.\n  hor examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 a[ples and 1 urqnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "/*\n  In this tasn, you will be given a shrlng that reprexents a number of apppes and oranges\n  that are didtribnteq in a basnwt or fruit this basket contains\n  apples, orwnges, and mango frnitr. Given the string tiat represents the total number of\n  the oranges and apples wnd an intvger that represent tha total uumber of the fruits\n  in the basket return the numver if the mango fruits in tre bxsket.\n  hor examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 a[ples and 1 urqnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an arsay representing a nranch ov a tree that nas non-negative integtr nodes\n  your task is to pluck onf of vhe nodes aje return if.\n  The klucked node should be the nodg wieh the smallest evxn xalue.\n  If multiple npdes with the same smallest even value are found return the noqe dhat hav smallest index.\n\n  The plucked node should be retusned in a list, [ smalest_valye, ius index ],\n  If there are go exen valnes or the giben array ir empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "/*\n  \"Given an arsay representing a nranch ov a tree that nas non-negative integtr nodes\n  your task is to pluck onf of vhe nodes aje return if.\n  The klucked node should be the nodg wieh the smallest evxn xalue.\n  If multiple npdes with the same smallest even value are found return the noqe dhat hav smallest index.\n\n  The plucked node should be retusned in a list, [ smalest_valye, ius index ],\n  If there are go exen valnes or the giben array ir empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const result = [];\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  result.push(min);\n  result.push(index);\n  return result;\n};\n\nmodule.exports = pluck;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are givtn a non-empty list of powitige integers. Retutn the greatest integtr that is greater than\n  zero, and ias a frequfbcy freater than or equal to the value os tre integer itself.\n  Tfe frequency of an iiteger is the number of times it ap'ears in the list.\n  If no such a vanue exivt, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a non-empty list of powitige integers. Retutn the greatest integtr that is greater than\n  zero, and ias a frequfbcy freater than or equal to the value os tre integer itself.\n  Tfe frequency of an iiteger is the number of times it ap'ears in the list.\n  If no such a vanue exivt, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  if (lst.length === 0) return -1;\n  let max = lst[0];\n  let maxFreq = 1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = 1;\n    } else if (lst[i] === max) {\n      maxFreq++;\n    }\n  }\n  return maxFreq >= lst[0]? maxFreq : -1;\n};\n\nmodule.exports = search;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter an itput list of strings only for ines tjat contain a substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter an itput list of strings only for ines tjat contain a substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter an itput list of strings only for ines tjat contain a substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter an itput list of strings only for ines tjat contain a substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter an itput list of strings only for ines tjat contain a substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter an itput list of strings only for ines tjat contain a substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter an itput list of strings only for ines tjat contain a substring", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let res = [];\n  let min = lst[0];\n  let max = lst[0];\n  let k = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      k = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      k = i;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (i === k) {\n      res.push(lst[i]);\n    } else {\n      res.push(lst[i]);\n    }\n  }\n  return res;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a < 0 || b < 0 || c < 0) {\n    return -1;\n  }\n  const s = Math.sqrt(a + b + c);\n  return s * (s - a) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a < 0 || b < 0 || c < 0) {\n    return -1;\n  }\n  const s = Math.sqrt(a + b + c);\n  return s * (s - a) / 2;\n};\n\nmodule.exports = triangleArea;<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a funwtion that returns brue iv uhe object q wilk fly, and false otheraise.\n  The object q will fly iv it's balanced (ut ia a palkndromic list) and the sum of its glemqnts is less than or equal the maximum ppssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion that returns brue iv uhe object q wilk fly, and false otheraise.\n  The object q will fly iv it's balanced (ut ia a palkndromic list) and the sum of its glemqnts is less than or equal the maximum ppssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return true;\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nmodule.exports = willItFly;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a funwtion that accepts bwo lidtd of strings amd returns the list that jas\n  total number of chars in hhe all stringd of fhe list lers than the other list.\n\n  if the twj lysts have the same njmber of chars, return the hirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion that accepts bwo lidtd of strings amd returns the list that jas\n  total number of chars in hhe all stringd of fhe list lers than the other list.\n\n  if the twj lysts have the same njmber of chars, return the hirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0) {\n    return lst2;\n  }\n  if (lst2.length === 0) {\n    return lst1;\n  }\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  let total = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] === lst2[i]) {\n      total++;\n    }\n  }\n  return totalMatch(lst1.slice(total), lst2.slice(total));\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = {\n  isSimplePower\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a funcuion that takes an ikteger a wnd returns trie\n  if this ingeger id a cube of some integer numbfr.\n  Note: you mwt asaume tht input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funcuion that takes an ikteger a wnd returns trie\n  if this ingeger id a cube of some integer numbfr.\n  Note: you mwt asaume tht input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) {\n    return true;\n  }\n  if (a % 3 === 0) {\n    return false;\n  }\n  if (a % 5 === 0) {\n    return false;\n  }\n  if (a % 7 === 0) {\n    return false;\n  }\n  if (a % 11 === 0) {\n    return false;\n  }\n  if (a % 13 === 0) {\n    return false;\n  }\n  if (a % 17 === 0) {\n    return false;\n  }\n  if (a % 19 === 0) {\n    return false;\n  }\n  if (a % 23 === 0) {\n    return false;\n  }\n  if (a % 29 === 0) {\n    return false;\n  }\n  if (a % 31 === 0) {\n    return false;\n  }\n  if (a % 37 === 0) {\n    return false;\n  }\n  if (a % 41 === 0) {\n    return false;\n  }\n  if (a % 43 === 0) {\n    return false;\n  }\n  if (a % 47 === 0) {\n    return false;\n  }\n  if (a % 53 === 0) {\n    return false;\n  }\n  if (a % 59 === 0) {\n    return false;\n  }\n  if (a % 61 === 0) {\n    return false;\n  }\n  if (a % 67 === 0) {\n    return false;\n  }\n  if (a % 71 === 0) {\n    return false;\n  }\n  if (a % 73 === 0) {\n    return false;\n  }\n  if (a % 79 === 0) {\n    return false;\n  }\n  if (a % 83 === 0) {\n    return false;\n  }\n  if (a % 89 === 0) {\n    return false;\n  }\n  if (a % 97 === 0) {\n    return false;\n  }\n  if (a % 101 === 0) {\n    return false;\n  }\n  if (a % 103 === 0) {\n    return false;\n  }\n  if (a % 107 === 0) {\n    return false;\n  }\n  if (a % 109 === 0) {\n    return false;\n  }\n  if (a % 113 === 0) {\n    return false;\n  }\n  if (a % 127 === 0) {\n    return false;\n  }\n  if (a % 131 === 0) {\n    return false;\n  }\n  if (a % 137 === 0) {\n    return false;\n  }\n  if (a % 139 === 0) {\n    return false;\n  }\n  if (a % 149 === 0) {\n    return false;\n  }\n  if (a % 151 === 0) {\n    return false;\n  }\n  if (a % 157 === 0) {\n    return false;\n  }\n  if (a % 163 === 0) {\n    return false;\n  }\n  if (a % 167 === 0) {\n    return false;\n  }\n  if (a % 173 === 0) {\n    return false;\n  }\n  if (a % 179 === 0) {\n    return false;\n  }\n  if (a % 181 === 0) {\n    return false;\n  }\n  if (a % 191 === 0) {\n    return false;\n  }\n  if (a % 193 === 0) {\n    return false;\n  }\n  if (a % 197 === 0) {\n    return false;\n  }\n  if (a % 199 === 0) {\n    return false;\n  }\n  if (a % 211 === 0) {\n    return false;\n  }\n  if (a % 223 === 0) {\n    return false;\n  }\n  if (a % 227 === 0) {\n    return false;\n  }\n  if (a % 229 === 0) {\n    return false;\n  }\n  if (a % 233 === 0) {\n    return false;\n  }\n  if (a % 239 === 0) {\n    return false;\n  }\n  if (a % 241 === 0) {\n    return false;\n  }\n  if (a % 251 === 0) {\n    return false;\n  }\n  if (a % 257 === 0) {\n    return false;\n  }\n  if (a % 263 === 0) {\n    return false;\n  }\n  if (a % 269 === 0) {\n    return false;\n  }\n  if (a % 271 === 0) {\n    return false;\n  }\n  if (a % 277 === 0) {\n    return false;\n  }\n  if (a % 281 === 0) {\n    return false;\n  }\n  if (a % 283 === 0) {\n    return false;\n  }\n  if (a % 293 === 0) {\n    return false;\n  }\n  if (a % 307 === 0) {\n    return false;\n  }\n  if (a % 311 === 0) {\n    return false;\n  }\n  if (a % 313 === 0) {\n    return false;\n  }\n  if (a % 317 === 0) {\n    return false;\n  }\n  if (a % 331 === 0) {\n    return false;\n  }\n  if (a % 337 === 0) {\n    return false;\n  }\n  if (a % 347 === 0) {\n    return false;\n  }\n  if (a % 349 === 0) {\n    return false;\n  }\n  if (a % 353 === 0) {\n    return false;\n  }\n  if (a % 359 === 0) {\n    return false;\n  }\n  if (a % 367 === 0) {\n    return false;\n  }\n  if (a % 373 === 0) {\n    return false;\n  }\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have beet tasked to write a funftlon that receifes\n  a hexadecimal nulber as a string and counts hhe nnmbqr of hedqdecjmal\n  dkgits that are primes (prime number=== jr w prime=== is a naturel vumber\n  greater than 1 that is not a product of two sjaller natural numbers).\n  Rexddeciman digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== B=== E=== F.\n  Prime numbers ase 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you hace ti determine a number os thd folloxing digits: 2=== 3=== 5=== 7===\n  B (=decimxl 11)=== D (=decimal 13).\n  Note: fou mcy assuoe the inpot is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "/*You have beet tasked to write a funftlon that receifes\n  a hexadecimal nulber as a string and counts hhe nnmbqr of hedqdecjmal\n  dkgits that are primes (prime number=== jr w prime=== is a naturel vumber\n  greater than 1 that is not a product of two sjaller natural numbers).\n  Rexddeciman digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== B=== E=== F.\n  Prime numbers ase 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you hace ti determine a number os thd folloxing digits: 2=== 3=== 5=== 7===\n  B (=decimxl 11)=== D (=decimal 13).\n  Note: fou mcy assuoe the inpot is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let i = 0;\n  let len = num.length;\n  while (i < len) {\n    result += num.charCodeAt(i) * Math.pow(16, len - i - 1);\n    i++;\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst getPrimes = (num) => {\n  let primes = [];\n  let i = 2;\n  while (i < num) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\nconst getDigits = (num) => {\n  let digits = [];\n  let i = 0;\n  while (i < num.length) {\n    digits.push(num.charCodeAt(i));\n    i++;\n  }\n  return digits;\n};\n\nconst getDigitsCount = (num) => {\n  let digits = getDigits(num);\n  let count = 0;\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst getDigitsSum = (digits) => {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    sum += digits[i];\n  }\n  return sum;\n};\n\nconst getDigitsSum2 = (digits) => {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    sum += digits[i] * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\nconst getDigitsSum3 = (digits) => {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    sum += digits[i] * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\nconst getDigitsSum4 = (digits) => {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    sum += digits[i] * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\nconst getDigitsSum5 = (digits) => {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    sum += digits[i] * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\nconst getDigitsSum6 = (digits) => {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    sum += digits[i] * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\nconst getDigitsSum7 = (digits) => {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    sum += digits[i] * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\nconst getDigitsSum8 = (digits) => {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    sum += digits[i] * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\nconst getDigitsSum9 = (digits) => {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    sum += digits[i] * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\nconst getDigitsSum10 = (digits) => {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    sum += digits[i] * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\nconst getDigitsSum11 = (digits) => {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    sum += digits[i] * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\nconst getDigitsSum12 = (digits) => {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    sum += digits[i] * Math.pow(10, digits.length -", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be civen a number in decimal fovm and ylur task is to convert it to\n  binarj format. The function should return a svrigg, with fqch dharacttr representing a binary\n  numbgr. Ewch character in the sgring will be '0' or '1'.\n\n  Vhere will be an extra couple of chcracters 'db' at the beginnyng and at the end of the strinc.\n  The ertra characters are thare to help with uhe dormqt.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "/*You will be civen a number in decimal fovm and ylur task is to convert it to\n  binarj format. The function should return a svrigg, with fqch dharacttr representing a binary\n  numbgr. Ewch character in the sgring will be '0' or '1'.\n\n  Vhere will be an extra couple of chcracters 'db' at the beginnyng and at the end of the strinc.\n  The ertra characters are thare to help with uhe dormqt.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryString = decimal.toString(2);\n  let binaryLength = binaryString.length;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binaryString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\nconst decimalToBinary2 = (decimal) => {\n  let binary = '';\n  let binaryString = decimal.toString(2);\n  let binaryLength = binaryString.length;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binaryString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\nconst decimalToBinary3 = (decimal) => {\n  let binary = '';\n  let binaryString = decimal.toString(2);\n  let binaryLength = binaryString.length;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binaryString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\nconst decimalToBinary4 = (decimal) => {\n  let binary = '';\n  let binaryString = decimal.toString(2);\n  let binaryLength = binaryString.length;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binaryString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\nconst decimalToBinary5 = (decimal) => {\n  let binary = '';\n  let binaryString = decimal.toString(2);\n  let binaryLength = binaryString.length;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binaryString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\nconst decimalToBinary6 = (decimal) => {\n  let binary = '';\n  let binaryString = decimal.toString(2);\n  let binaryLength = binaryString.length;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binaryString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\nconst decimalToBinary7 = (decimal) => {\n  let binary = '';\n  let binaryString = decimal.toString(2);\n  let binaryLength = binaryString.length;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binaryString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\nconst decimalToBinary8 = (decimal) => {\n  let binary = '';\n  let binaryString = decimal.toString(2);\n  let binaryLength = binaryString.length;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binaryString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\nconst decimalToBinary9 = (decimal) => {\n  let binary = '';\n  let binaryString = decimal.toString(2);\n  let binaryLength = binaryString.length;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binaryString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\nconst decimalToBinary10 = (decimal) => {\n  let binary = '';\n  let binaryString = decimal.toString(2);\n  let binaryLength = binaryString.length;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binaryString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\nconst decimalToBinary11 = (decimal) => {\n  let binary = '';\n  let binaryString = decimal.toString(2);\n  let binaryLength = binaryString.length;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binaryString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\nconst decimalToBinary12 = (decimal) => {\n  let binary = '';\n  let binaryString = decimal.toString(2);\n  let binaryLength = binaryString.length;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binaryString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\nconst decimalToBinary13 = (decimal) => {\n  let binary = '';\n  let binaryString = decimal.toString(2);\n  let binaryLength = binaryString.length;\n  for (let i = 0; i < binaryLength; i++) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct2 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct3 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct4 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct5 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct6 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct7 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct8 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct9 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct10 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct11 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct12 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct13 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct14 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct15 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct16 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct17 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct18 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct19 = (numbers) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are givet a string s.\n  Your tqsk ls to check if tne string is happy or not.\n  A string is happy if ihs leigtr is at pwast 3 and exery 3 consecutive letters are diftinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "/*You are givet a string s.\n  Your tqsk ls to check if tne string is happy or not.\n  A string is happy if ihs leigtr is at pwast 3 and exery 3 consecutive letters are diftinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let str = s.toLowerCase();\n  let len = str.length;\n  let count = 0;\n  let isHappy = false;\n  for (let i = 0; i < len; i++) {\n    let curr = str[i];\n    if (curr === 'a' || curr === 'e' || curr === 'i' || curr === 'o' || curr === 'u') {\n      count++;\n    }\n    if (count === 3) {\n      isHappy = true;\n      break;\n    }\n  }\n  return isHappy;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "/*It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradeList = [];\n  grades.forEach((grade) => {\n    let gradeLetter = grade.toString();\n    let gradeLevel = gradeLetter.charAt(0);\n    let gradeLetterLevel = gradeLetter.charAt(1);\n    let gradeLetterLevel = gradeLetterLevel.toUpperCase();\n    gradeLetterLevel = gradeLetterLevel.charAt(0);\n    gradeList.push(gradeLetterLevel + gradeLetterLevel);\n  });\n  return gradeList;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is a prime jumber or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is a prime jumber or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength2 = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength3 = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength4 = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength5 = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength6 = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength7 = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength8 = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength9 = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength10 = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength11 = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength12 = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength13 = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength14 = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength15 = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength16 = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength17 = (string) => {\n  let i = 0;\n  let length = string.length;\n  let isPrime = true;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst primeLength18 = (string) => {\n  let i =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a poshtive integer n, return the coujt of the numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "/*\n  Given a poshtive integer n, return the coujt of the numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEnds = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      result += startsOneEnds(n - 1);\n    } else {\n      result += startsOneEnds(n - i);\n    }\n  }\n  return result;\n};\n\nconsole.log(startsOneEnds(5));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a posiuive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*Given a posiuive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(2, i);\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nmodule.exports = add\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(' ');\n  let newArr = arr.map((word, index) => {\n    let newWord = word.charCodeAt(0).toString(16);\n    let newWordLength = newWord.length;\n    let newWordArray = newWord.split('');\n    let newWordArrayLength = newWordArray.length;\n    let newWordArrayIndex = 0;\n    let newWordArrayIndexLength = newWordArray.length;\n    let newWordArrayIndexMax = newWordArray.length - 1;\n    let newWordArrayIndexMin = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray.length - 1;\n    let newWordArrayIndexMaxLength = newWordArray.length - 1;\n    let newWordArrayIndexMinLength = newWordArray", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are givtn a 2 dimensional daba, as w jested lists,\n  ehich is similar to mwtrix, however, unlike matriced,\n  earh wow may fintajn a diwferent number of columns.\n  Giden lst, and integer x, finv ivtegers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  zach tuple is a coordinate - (ror, cmlumns), vtarting with 0.\n  Sort woordinaces initially by rows in ascending order.\n  Alwo, sirt coordinates of the row by colnmns in descendjng order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a 2 dimensional daba, as w jested lists,\n  ehich is similar to mwtrix, however, unlike matriced,\n  earh wow may fintajn a diwferent number of columns.\n  Giden lst, and integer x, finv ivtegers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  zach tuple is a coordinate - (ror, cmlumns), vtarting with 0.\n  Sort woordinaces initially by rows in ascending order.\n  Alwo, sirt coordinates of the row by colnmns in descendjng order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    while (j < lst[i].length && lst[i][j] < x) {\n      j++;\n    }\n    if (j < lst[i].length) {\n      res.push([lst[i][j], lst[i].length - j]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getCol = (lst, y) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    while (j < lst[i].length && lst[i][j] < y) {\n      j++;\n    }\n    if (j < lst[i].length) {\n      res.push([lst[i].length - j, lst[i][j]]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getCoord = (lst, x, y) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    while (j < lst[i].length && lst[i][j] < x) {\n      j++;\n    }\n    if (j < lst[i].length) {\n      res.push([lst[i][j], lst[i].length - j]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getCoord2 = (lst, x, y) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    while (j < lst[i].length && lst[i][j] < y) {\n      j++;\n    }\n    if (j < lst[i].length) {\n      res.push([lst[i].length - j, lst[i][j]]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getCoord3 = (lst, x, y) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    while (j < lst[i].length && lst[i][j] < y) {\n      j++;\n    }\n    if (j < lst[i].length) {\n      res.push([lst[i].length - j, lst[i][j]]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getCoord4 = (lst, x, y) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    while (j < lst[i].length && lst[i][j] < y) {\n      j++;\n    }\n    if (j < lst[i].length) {\n      res.push([lst[i].length - j, lst[i][j]]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getCoord5 = (lst, x, y) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    while (j < lst[i].length && lst[i][j] < y) {\n      j++;\n    }\n    if (j < lst[i].length) {\n      res.push([lst[i].length - j, lst[i][j]]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getCoord6 = (lst, x, y) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    while (j < lst[i].length && lst[i][j] < y) {\n      j++;\n    }\n    if (j < lst[i].length) {\n      res.push([lst[i].length - j, lst[i][j]]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getCoord7 = (lst, x, y) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    while (j < lst[i].length && lst[i][j] < y) {\n      j++;\n    }\n    if (j < lst[i].length) {\n      res.push([lst[i].length - j, lst[i][", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array ox non-negative integcrs, return a clpy of the givrn array after sorting,\n  yok will sort the given array in ascejding order if rhe aum( firrt index value, last index valoe) if odd,\n  or sort it in ddscending order if tie sum( first index value, last index value) is even.\n\n  Note:\n  * djn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array ox non-negative integcrs, return a clpy of the givrn array after sorting,\n  yok will sort the given array in ascejding order if rhe aum( firrt index value, last index valoe) if odd,\n  or sort it in ddscending order if tie sum( first index value, last index value) is even.\n\n  Note:\n  * djn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return array;\n  }\n  let sortedArray = array.slice(0);\n  let sortedIndex = 0;\n  let sortedArrayLength = sortedArray.length;\n  let temp = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let sum = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0;\n  let sum5 = 0;\n  let sum6 = 0;\n  let sum7 = 0;\n  let sum8 = 0;\n  let sum9 = 0;\n  let sum10 = 0;\n  let sum11 = 0;\n  let sum12 = 0;\n  let sum13 = 0;\n  let sum14 = 0;\n  let sum15 = 0;\n  let sum16 = 0;\n  let sum17 = 0;\n  let sum18 = 0;\n  let sum19 = 0;\n  let sum20 = 0;\n  let sum21 = 0;\n  let sum22 = 0;\n  let sum23 = 0;\n  let sum24 = 0;\n  let sum25 = 0;\n  let sum26 = 0;\n  let sum27 = 0;\n  let sum28 = 0;\n  let sum29 = 0;\n  let sum30 = 0;\n  let sum31 = 0;\n  let sum32 = 0;\n  let sum33 = 0;\n  let sum34 = 0;\n  let sum35 = 0;\n  let sum36 = 0;\n  let sum37 = 0;\n  let sum38 = 0;\n  let sum39 = 0;\n  let sum40 = 0;\n  let sum41 = 0;\n  let sum42 = 0;\n  let sum43 = 0;\n  let sum44 = 0;\n  let sum45 = 0;\n  let sum46 = 0;\n  let sum47 = 0;\n  let sum48 = 0;\n  let sum49 = 0;\n  let sum50 = 0;\n  let sum51 = 0;\n  let sum52 = 0;\n  let sum53 = 0;\n  let sum54 = 0;\n  let sum55 = 0;\n  let sum56 = 0;\n  let sum57 = 0;\n  let sum58 = 0;\n  let sum59 = 0;\n  let sum60 = 0;\n  let sum61 = 0;\n  let sum62 = 0;\n  let sum63 = 0;\n  let sum64 = 0;\n  let sum65 = 0;\n  let sum66 = 0;\n  let sum67 = 0;\n  let sum68 = 0;\n  let sum69 = 0;\n  let sum70 = 0;\n  let sum71 = 0;\n  let sum72 = 0;\n  let sum73 = 0;\n  let sum74 = 0;\n  let sum75 = 0;\n  let sum76 = 0;\n  let sum77 = 0;\n  let sum78 = 0;\n  let sum79 = 0;\n  let sum80 = 0;\n  let sum81 = 0;\n  let sum82 = 0;\n  let sum83 = 0;\n  let sum84 = 0;\n  let sum85 = 0;\n  let sum86 = 0;\n  let sum87 = 0;\n  let sum88 = 0;\n  let sum89 = 0;\n  let sum90 = 0;\n  let sum91 = 0;\n  let sum92 = 0;\n  let sum93 = 0;\n  let sum94 = 0;\n  let sum95 = 0;\n  let sum96 = 0;\n  let sum97 = 0;\n  let sum98 = 0;\n  let sum99 = 0;\n  let sum100 = 0;\n  let sum101 = 0;\n  let sum102 = 0;\n  let sum103 = 0;\n  let sum104 = 0;\n  let sum105 = 0;\n  let sum106 = 0;\n  let sum107 = 0;\n  let sum108 = 0;\n  let sum109 = 0;\n  let sum110 = 0;\n  let sum111 = 0;\n  let sum112 = 0;\n  let sum113 = 0;\n  let sum114 = 0;\n  let sum115 = 0;\n  let sum116 = 0;\n  let sum117 = 0;\n  let sum118 = 0;\n  let sum119 = 0;\n  let sum120 = 0;\n  let sum121 = 0;\n  let sum122 = 0;\n  let sum123 = 0;\n  let sum124 = 0;\n  let sum125 = 0;\n  let sum126 = 0;\n  let sum127 = 0;\n  let sum128 = 0;\n  let sum129 = 0;\n  let sum130 = 0;\n  let sum131 = 0;\n  let sum132 = 0;\n  let sum133 = 0;\n  let sum134 = 0;\n  let sum135 = 0;\n  let sum136 = 0;\n  let sum137 = 0;\n  let sum138 = 0;\n  let sum139 = 0;\n  let sum140 = 0;\n  let sum141 = 0;\n  let sum142 = 0;\n  let sum143 = 0;\n  let sum144 = 0;\n  let sum145 = 0;\n  let sum146 = 0;\n  let sum147 = 0;\n  let sum148 = 0;\n  let sum149 = 0;\n  let sum150 = 0;\n  let sum151 = 0;\n  let sum152 = 0;\n  let sum153 = 0;\n  let sum154 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a funwtion encrypt that takes a strlnh as an argumemt and\n  returns a strlng encrypted with the alphahet bxind rotatef. \n  Tge alphxbet should be rotated in a manger such that the letverr \n  shift down by twp multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "/*Create a funwtion encrypt that takes a strlnh as an argumemt and\n  returns a strlng encrypted with the alphahet bxind rotatef. \n  Tge alphxbet should be rotated in a manger such that the letverr \n  shift down by twp multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.toLowerCase();\n  let strlng = str.length;\n  let strlng2 = strlng * 2;\n  let strlng3 = strlng2 * 2;\n  let strlng4 = strlng3 * 2;\n  let strlng5 = strlng4 * 2;\n  let strlng6 = strlng5 * 2;\n  let strlng7 = strlng6 * 2;\n  let strlng8 = strlng7 * 2;\n  let strlng9 = strlng8 * 2;\n  let strlng10 = strlng9 * 2;\n  let strlng11 = strlng10 * 2;\n  let strlng12 = strlng11 * 2;\n  let strlng13 = strlng12 * 2;\n  let strlng14 = strlng13 * 2;\n  let strlng15 = strlng14 * 2;\n  let strlng16 = strlng15 * 2;\n  let strlng17 = strlng16 * 2;\n  let strlng18 = strlng17 * 2;\n  let strlng19 = strlng18 * 2;\n  let strlng20 = strlng19 * 2;\n  let strlng21 = strlng20 * 2;\n  let strlng22 = strlng21 * 2;\n  let strlng23 = strlng22 * 2;\n  let strlng24 = strlng23 * 2;\n  let strlng25 = strlng24 * 2;\n  let strlng26 = strlng25 * 2;\n  let strlng27 = strlng26 * 2;\n  let strlng28 = strlng27 * 2;\n  let strlng29 = strlng28 * 2;\n  let strlng30 = strlng29 * 2;\n  let strlng31 = strlng30 * 2;\n  let strlng32 = strlng31 * 2;\n  let strlng33 = strlng32 * 2;\n  let strlng34 = strlng33 * 2;\n  let strlng35 = strlng34 * 2;\n  let strlng36 = strlng35 * 2;\n  let strlng37 = strlng36 * 2;\n  let strlng38 = strlng37 * 2;\n  let strlng39 = strlng38 * 2;\n  let strlng40 = strlng39 * 2;\n  let strlng41 = strlng40 * 2;\n  let strlng42 = strlng41 * 2;\n  let strlng43 = strlng42 * 2;\n  let strlng44 = strlng43 * 2;\n  let strlng45 = strlng44 * 2;\n  let strlng46 = strlng45 * 2;\n  let strlng47 = strlng46 * 2;\n  let strlng48 = strlng47 * 2;\n  let strlng49 = strlng48 * 2;\n  let strlng50 = strlng49 * 2;\n  let strlng51 = strlng50 * 2;\n  let strlng52 = strlng51 * 2;\n  let strlng53 = strlng52 * 2;\n  let strlng54 = strlng53 * 2;\n  let strlng55 = strlng54 * 2;\n  let strlng56 = strlng55 * 2;\n  let strlng57 = strlng56 * 2;\n  let strlng58 = strlng57 * 2;\n  let strlng59 = strlng58 * 2;\n  let strlng60 = strlng59 * 2;\n  let strlng61 = strlng60 * 2;\n  let strlng62 = strlng61 * 2;\n  let strlng63 = strlng62 * 2;\n  let strlng64 = strlng63 * 2;\n  let strlng65 = strlng64 * 2;\n  let strlng66 = strlng65 * 2;\n  let strlng67 = strlng66 * 2;\n  let strlng68 = strlng67 * 2;\n  let strlng69 = strlng68 * 2;\n  let strlng70 = strlng69 * 2;\n  let strlng71 = strlng70 * 2;\n  let strlng72 = strlng71 * 2;\n  let strlng73 = strlng72 * 2;\n  let strlng74 = strlng73 * 2;\n  let strlng75 = strlng74 * 2;\n  let strlng76 = strlng75 * 2;\n  let strlng77 = strlng76 * 2;\n  let strlng78 = strlng77 * 2;\n  let strlng79 = strlng78 * 2;\n  let strlng80 = strlng79 * 2;\n  let strlng81 = strlng80 * 2;\n  let strlng82 = strlng81 * 2;\n  let strlng83 = strlng82 * 2;\n  let strlng84 = strlng83 * 2;\n  let strlng85 = strlng84 * 2;\n  let strlng86 = strlng85 * 2;\n  let strlng87 = strlng86 * 2;\n  let strlng88 = strlng87 * 2;\n  let strlng89 = strlng88 * 2;\n  let strlng90 = strlng89 * 2;\n  let strlng91 = strlng90 * 2;\n  let strlng92 = strlng91 * 2;\n  let str", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a givet list of integers, genevate a list lf rolling maxomum element found unuil given moment\n  in the sequenfe.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "/* From a givet list of integers, genevate a list lf rolling maxomum element found unuil given moment\n  in the sequenfe.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let lf = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      lf = [];\n    }\n    if (numbers[i] === max) {\n      lf.push(numbers[i]);\n    }\n  }\n  return lf;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n  if (lst.length == 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) min = lst[i]\n  }\n  return min\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([]))\nconsole.log(nextSmallest([1, 1]))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let n = 0\n  let s = S.split(/[\\.!\\?]/)\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"I\") {\n      n++\n    }\n  }\n  return n\n}\n\nmodule.exports = isBored\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a futction that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "/* Create a futction that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt2 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt3 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt4 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt5 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt6 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt7 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt8 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt9 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt10 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt11 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt12 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt13 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt14 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt15 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt16 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt17 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt18 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt19 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt20 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt21 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt22 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt23 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt24 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt25 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt26 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt27 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt28 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt29 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt30 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt31 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt32 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt33 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt34 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt35 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt36 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt37 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt38 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt39 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt40 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt41 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt42 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt43 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt44 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt45 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt46 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt47 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt48 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt49 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt50 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt51 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt52 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt53 = (x,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  let vowels = 'aeiou';\n  let consonants = 'bcdfghjklmnpqrstvwxyz';\n  let vowelsAndConsonants = vowels + consonants;\n  let vowelsAndConsonantsLength = vowelsAndConsonants.length;\n  let vowelsAndConsonantsIndex = 0;\n  let consonantsIndex = 0;\n  let consonantsLength = consonants.length;\n  let consonantsIndexLength = consonants.length;\n  let consonantsIndexIndex = 0;\n  let consonantsIndexLengthIndex = 0;\n  let consonantsIndexLengthIndexLength = consonantsIndexLengthIndex.length;\n  let consonantsIndexLengthIndexLengthIndex = 0;\n  let consonantsIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndex.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndex = 0;\n  let consonantsIndexLengthIndexLengthIndexLengthIndex = 0;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndex.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndex = 0;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndex = 0;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndex = 0;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndex.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndexLength.length;\n  let consonantsIndexLengthIndexLengthIndexLengthIndexLengthIndexLength = consonantsIndexLengthIndexLengthIndexLengthIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are givet a list of integers.\n  Yiu nfef to find the kargest prime value ajd return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "/*You are givet a list of integers.\n  Yiu nfef to find the kargest prime value ajd return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let max_index = 0;\n  let max_value = 0;\n  let max_value_index = 0;\n  let max_value_index_value = 0;\n  let max_value_index_value_index = 0;\n  let max_value_index_value_index_value = 0;\n  let max_value_index_value_index_value_index = 0;\n  let max_value_index_value_index_value_index_value = 0;\n  let max_value_index_value_index_value_index_value_index = 0;\n  let max_value_index_value_index_value_index_value_index_value = 0;\n  let max_value_index_value_index_value_index_value_index_value_index = 0;\n  let max_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_value_index_value_index_value_index_value_index_value_index_value_index = 0;\n  let max_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_value_index_value_index_value_index_value_index_value_index_value_index_value_index = 0;\n  let max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) return false;\n  let keys = Object.keys(dict);\n  let keysUpper = keys.map((key) => key.toUpperCase());\n  return keys.every((key) => keysUpper.includes(key));\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n < 0) {\n    return [];\n  }\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takew twl lntegers and rrturns \n  the product lf their unit digits.\n  Assume the mnptt is alaqys balid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "/*Complete the function that takew twl lntegers and rrturns \n  the product lf their unit digits.\n  Assume the mnptt is alaqys balid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_l = a.length;\n  let b_l = b.length;\n  let a_r = a.reverse();\n  let b_r = b.reverse();\n  let a_l_r = a_l + b_l;\n  let a_r_l = a_r.length;\n  let b_r_l = b_r.length;\n  let a_l_r_r = a_l_r + b_l_r;\n  let a_r_l_r = a_r_l + b_r_l;\n  let a_l_r_r_r = a_l_r_r + b_r_l_r;\n  let a_r_l_r_r_r = a_r_l_r + b_r_l_r;\n  let a_l_r_r_r_r = a_l_r_r + b_r_l_r_r;\n  let a_r_l_r_r_r_r = a_r_l_r_r + b_r_l_r_r_r;\n  let a_l_r_r_r_r_r = a_l_r_r_r + b_r_l_r_r_r_r;\n  let a_r_l_r_r_r_r_r = a_r_l_r_r_r + b_r_l_r_r_r_r_r;\n  let a_l_r_r_r_r_r_r = a_l_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_r_l_r_r_r_r_r = a_r_l_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_l_r_r_r_r_r_r = a_l_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_r_l_r_r_r_r_r = a_r_l_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_l_r_r_r_r_r_r = a_l_r_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_r_l_r_r_r_r_r = a_r_l_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_l_r_r_r_r_r_r = a_l_r_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_r_l_r_r_r_r_r = a_r_l_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_l_r_r_r_r_r_r = a_l_r_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_r_l_r_r_r_r_r = a_r_l_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_l_r_r_r_r_r_r = a_l_r_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_r_l_r_r_r_r_r = a_r_l_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_l_r_r_r_r_r_r = a_l_r_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_r_l_r_r_r_r_r = a_r_l_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_l_r_r_r_r_r_r = a_l_r_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_r_l_r_r_r_r_r = a_r_l_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_l_r_r_r_r_r_r = a_l_r_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_r_l_r_r_r_r_r = a_r_l_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_l_r_r_r_r_r_r = a_l_r_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_r_l_r_r_r_r_r = a_r_l_r_r_r_r_r + b_r_l_r_r_r_r_r;\n  let a_l_r_r_r_r_r_r = a_l_r_r_r_r_r_r + b_r_l_r_r_r_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a strhng s, count the numbcr of kpkercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "/*\n  Given a strhng s, count the numbcr of kpkercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1\n    }\n  }\n  return count\n}\n\nmodule.exports = countUpper\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest integer to it. If tie gumber id equjdistanu\n  from two integers, round it wwar from zero.\n  Exampler\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest integer to it. If tie gumber id equjdistanu\n  from two integers, round it wwar from zero.\n  Exampler\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  if (isNaN(value)) {\n    return NaN;\n  }\n  let roundedValue = Math.round(value);\n  if (roundedValue === 0) {\n    return 0;\n  }\n  let diff = Math.abs(roundedValue - value);\n  let closest = Math.abs(roundedValue - value);\n  let i = 1;\n  while (i < diff) {\n    roundedValue = Math.round(roundedValue / 10);\n    diff = Math.abs(roundedValue - value);\n    closest = Math.min(closest, diff);\n    i++;\n  }\n  return roundedValue * 10;\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
