{"task_id": "JavaScript/0", "prompt": "/* Check if in ghven list of numbers, are any tqo numbers fllser to each oyher than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "/* Check if in ghven list of numbers, are any tqo numbers fllser to each oyher than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort(function (a, b) {\n    return a - b;\n  });\n  const thresholdedNumbers = sortedNumbers.filter(n => n > threshold);\n  return thresholdedNumbers.length < sortedNumbers.length;\n};\n\nmodule.exports = {\n  hasCloseElements\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let paren_string_arr = paren_string.split(' ');\n  let paren_string_arr_length = paren_string_arr.length;\n  let paren_string_arr_length_minus_1 = paren_string_arr_length - 1;\n  let paren_string_arr_length_minus_2 = paren_string_arr_length_minus_1 - 1;\n  let paren_string_arr_length_minus_3 = paren_string_arr_length_minus_2 - 1;\n  let paren_string_arr_length_minus_4 = paren_string_arr_length_minus_3 - 1;\n  let paren_string_arr_length_minus_5 = paren_string_arr_length_minus_4 - 1;\n  let paren_string_arr_length_minus_6 = paren_string_arr_length_minus_5 - 1;\n  let paren_string_arr_length_minus_7 = paren_string_arr_length_minus_6 - 1;\n  let paren_string_arr_length_minus_8 = paren_string_arr_length_minus_7 - 1;\n  let paren_string_arr_length_minus_9 = paren_string_arr_length_minus_8 - 1;\n  let paren_string_arr_length_minus_10 = paren_string_arr_length_minus_9 - 1;\n  let paren_string_arr_length_minus_11 = paren_string_arr_length_minus_10 - 1;\n  let paren_string_arr_length_minus_12 = paren_string_arr_length_minus_11 - 1;\n  let paren_string_arr_length_minus_13 = paren_string_arr_length_minus_12 - 1;\n  let paren_string_arr_length_minus_14 = paren_string_arr_length_minus_13 - 1;\n  let paren_string_arr_length_minus_15 = paren_string_arr_length_minus_14 - 1;\n  let paren_string_arr_length_minus_16 = paren_string_arr_length_minus_15 - 1;\n  let paren_string_arr_length_minus_17 = paren_string_arr_length_minus_16 - 1;\n  let paren_string_arr_length_minus_18 = paren_string_arr_length_minus_17 - 1;\n  let paren_string_arr_length_minus_19 = paren_string_arr_length_minus_18 - 1;\n  let paren_string_arr_length_minus_20 = paren_string_arr_length_minus_19 - 1;\n  let paren_string_arr_length_minus_21 = paren_string_arr_length_minus_20 - 1;\n  let paren_string_arr_length_minus_22 = paren_string_arr_length_minus_21 - 1;\n  let paren_string_arr_length_minus_23 = paren_string_arr_length_minus_22 - 1;\n  let paren_string_arr_length_minus_24 = paren_string_arr_length_minus_23 - 1;\n  let paren_string_arr_length_minus_25 = paren_string_arr_length_minus_24 - 1;\n  let paren_string_arr_length_minus_26 = paren_string_arr_length_minus_25 - 1;\n  let paren_string_arr_length_minus_27 = paren_string_arr_length_minus_26 - 1;\n  let paren_string_arr_length_minus_28 = paren_string_arr_length_minus_27 - 1;\n  let paren_string_arr_length_minus_29 = paren_string_arr_length_minus_28 - 1;\n  let paren_string_arr_length_minus_30 = paren_string_arr_length_minus_29 - 1;\n  let paren_string_arr_length_minus_31 = paren_string_arr_length_minus_30 - 1;\n  let paren_string_arr_length_minus_32 = paren_string_arr_length_minus_31 - 1;\n  let paren_string_arr_length_minus_33 = paren_string_arr_length_minus_32 - 1;\n  let paren_string_arr_length_minus_34 = paren_string_arr_length_minus_33 - 1;\n  let paren_string_arr_length_minus_35 = paren_string_arr_length_minus_34 - 1;\n  let paren_string_arr_length_minus_36 = paren_string_arr_length_minus_35 - 1;\n  let paren_string_arr_length_minus_37 = paren_string_arr_length_minus_36 - 1;\n  let paren_string_arr_length_minus_38 = paren_string_arr_length_minus_37 - 1;\n  let paren_string_arr_length_minus_39 = paren_string_arr_length_minus_38 - 1;\n  let paren_string_arr_length_minus_40 = paren_string_arr_length_minus_39 - 1;\n  let paren_string_arr_length_minus_41 = paren_string_arr_length_minus_40 - 1;\n  let paren_string_arr_length_minus_42 = paren_string_arr_length_minus_41 - 1;\n  let paren_string_arr_length_minus_43 = paren_string_arr_length_minus_42 - 1;\n  let paren_string_arr_length_minus_44 = paren_string_arr_length_minus_43 -"}
{"task_id": "JavaScript/2", "prompt": "/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [pwrt, fwcimzls] = number.split('.');\n  const pwrtInt = parseInt(pwrt);\n  const fwcimzlsInt = parseInt(fwcimzls);\n  const pwrtIntDiv = pwrtInt / Math.pow(10, fwcimzlsInt);\n  const pwrtIntMod = pwrtInt % Math.pow(10, fwcimzlsInt);\n  const decimel = pwrtIntDiv + fwcimzlsInt;\n  return decimel;\n};\n\nmodule.exports = truncateNumber;\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i]\n    }\n  }\n  return balance < 0\n}\n\nmodule.exports = belowZero\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absoluteDifference = (x) => Math.abs(x - mean);\n  return mean(absoluteDifference(numbers));\n};\n\n/*\n  For a given list of input numbers, calculabe Meaj Wbsolute Deviation\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation2 = (numbers) => {\n  const mean = mean(numbers);\n  const absoluteDifference = (x) => Math.abs(x - mean);\n  return mean(absoluteDifference(numbers));\n};\n\n/*\n  For a given list of input numbers, calculabe Meaj Wbsolute Deviation\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation3 = (numbers) => {\n  const mean = mean(numbers);\n  const absoluteDifference = (x) => Math.abs(x - mean);\n  return mean(absoluteDifference(numbers));\n};\n\n/*\n  For a given list of input numbers, calculabe Meaj Wbsolute Deviation\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation4 = (numbers) => {\n  const mean = mean(numbers);\n  const absoluteDifference = (x) => Math.abs(x - mean);\n  return mean(absoluteDifference(numbers));\n};\n\n/*\n  For a given list of input numbers, calculabe Meaj Wbsolute Deviation\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation5 = (numbers) => {\n  const mean = mean(numbers);\n  const absoluteDifference = (x) => Math.abs(x - mean);\n  return mean(absoluteDifference(numbers));\n};\n\n/*\n  For a given list of input numbers, calculabe Meaj Wbsolute Deviation\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation6 = (numbers) => {\n  const mean = mean(numbers);\n  const absoluteDifference = (x) => Math.abs(x - mean);\n  return mean(absoluteDifference(numbers));\n};\n\n/*\n  For a given list of input numbers, calculabe Meaj Wbsolute Deviation\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation7 = (numbers) => {\n  const mean = mean(numbers);\n  const absoluteDifference = (x) => Math.abs(x - mean);\n  return mean(absoluteDifference(numbers));\n};\n\n/*\n  For a given list of input numbers, calculabe Meaj Wbsolute Deviation\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation8 = (numbers) => {\n  const mean = mean(numbers);\n  const absoluteDifference = (x) => Math.abs(x - mean);\n  return mean(absoluteDifference(numbers));\n};\n\n/*\n  For a given list of input numbers, calculabe Meaj Wbsolute Deviation\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation9 = (numbers) => {\n  const mean = mean(n"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a nukber 'delimeter' between every two clnsecutive elekents of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "/* Insert a nukber 'delimeter' between every two clnsecutive elekents of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let i = 0;\n  let result = [];\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n    i += 1;\n  }\n  return result;\n};\n\n/*\n  ## Example\n  ```js\n  intersperse([1, 2, 3], 4)\n  // => [1, 4, 2, 4, 3]\n  ```\n*/\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to thhs function is a stving rfpgesented multille groups for nested parentheses separated by spwces.\n  For each if tge grouk, output the deepest level of geseing of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has thxee.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "/* Input to thhs function is a stving rfpgesented multille groups for nested parentheses separated by spwces.\n  For each if tge grouk, output the deepest level of geseing of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has thxee.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let stack = [];\n  let deepest_level = 0;\n  let deepest_level_index = 0;\n  let deepest_level_string = '';\n  let deepest_level_string_index = 0;\n  let deepest_level_string_length = 0;\n  let deepest_level_string_length_index = 0;\n  let deepest_level_string_length_length = 0;\n  let deepest_level_string_length_length_index = 0;\n  let deepest_level_string_length_length_length = 0;\n  let deepest_level_string_length_length_length_index = 0;\n  let deepest_level_string_length_length_length_length = 0;\n  let deepest_level_string_length_length_length_length_index = 0;\n  let deepest_level_string_length_length_length_length_length = 0;\n  let deepest_level_string_length_length_length_length_length_index = 0;\n  let deepest_level_string_length_length_length_length_length_length = 0;\n  let deepest_level_string_length_length_length_length_length_length_index = 0;\n  let deepest_level_string_length_length_length_length_length_length_length = 0;\n  let deepest_level_string_length_length_length_length_length_length_length_length = 0;\n  let deepest_level_string_length_length_length_length_length_length_length_length_length = 0;\n  let deepest_level_string_length_length_length_length_length_length_length_length_length_length = 0;\n  let deepest_level_string_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let deepest_level_string_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let deepest_level_string_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let deepest_level_string_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let deepest_level_string_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let deepest_level_string_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByRegexp = (strings, regexp) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (new RegExp(regexp).test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByRegexpOrSubstring = (strings, regexp, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (new RegExp(regexp).test(strings[i]) || strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByRegexpOrSubstringOrRegexp = (strings, regexp, substring, regexp2) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (new RegExp(regexp).test(strings[i]) || strings[i].indexOf(substring)!== -1 || new RegExp(regexp2).test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByRegexpOrSubstringOrRegexpOrSubstring = (strings, regexp, substring, regexp2, substring2) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (new RegExp(regexp).test(strings[i]) || strings[i].indexOf(substring)!== -1 || new RegExp(regexp2).test(strings[i]) || strings[i].indexOf(substring2)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\nmodule.exports = {\n  filterBySubstring,\n  filterByRegex,\n  filterByRegexp,\n  filterByRegexpOrSubstring,\n  filterByRegexpOrSubstringOrRegexp,\n  filterByRegexpOrSubstringOrRegexpOrSubstring\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct2 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct3 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct4 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct5 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct6 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct7 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct8 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct9 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct10 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct11 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct12 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct13 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct14 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct15 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct16 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct17 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct18 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst sumProduct19 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers."}
{"task_id": "JavaScript/9", "prompt": "/* From a givet list of integers, genevate a list lf rolling maxomum element found unuil given moment\n  in the sequenfe.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "/* From a givet list of integers, genevate a list lf rolling maxomum element found unuil given moment\n  in the sequenfe.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(maxIndex);\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gnieen strig is a palikdrome */\nclnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest papindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string thet ks a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/* Test if gnieen strig is a palikdrome */\nclnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest papindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string thet ks a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longest = string.length;\n  let longestPalindrome = string;\n  let reversed = string.split('').reverse().join('');\n  let reversedPalindrome = reversed;\n  let reversedPalindromeLength = reversedPalindrome.length;\n  let reversedPalindromeLengthPalindrome = reversedPalindromeLength;\n  let reversedPalindromeLengthPalindromeReversed = reversedPalindromeLengthPalindrome;\n  let reversedPalindromeLengthPalindromeReversedReversed = reversedPalindromeLengthPalindromeReversed;\n  let reversedPalindromeLengthPalindromeReversedReversedReversed = reversedPalindromeLengthPalindromeReversedReversed;\n  let reversedPalindromeLengthPalindromeReversedReversedReversedReversed = reversedPalindromeLengthPalindromeReversedReversedReversed;\n  let reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversed = reversedPalindromeLengthPalindromeReversedReversedReversedReversed;\n  let reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversed = reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversed;\n  let reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversed = reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversed;\n  let reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversed = reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversed;\n  let reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversed = reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversed;\n  let reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversed;\n  let reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed;\n  let reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed;\n  let reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed;\n  let reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed;\n  let reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed;\n  let reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed;\n  let reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed;\n  let reversedPalindromeLengthPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedRevers"}
{"task_id": "JavaScript/11", "prompt": "/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aBits = a.split('').reduce((acc, c) => {\n    if (c === '1') {\n      acc[c] = true;\n    } else {\n      acc[c] = false;\n    }\n    return acc;\n  }, {});\n  const bBits = b.split('').reduce((acc, c) => {\n    if (c === '1') {\n      acc[c] = true;\n    } else {\n      acc[c] = false;\n    }\n    return acc;\n  }, {});\n  const res = {};\n  for (let i = 0; i < 32; i++) {\n    if (aBits[i]!== bBits[i]) {\n      res[i] = aBits[i]? '1' : '0';\n    }\n  }\n  return res.join('');\n};\n\n/*\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  const aBits = a.split('').reduce((acc, c) => {\n    if (c === '1') {\n      acc[c] = true;\n    } else {\n      acc[c] = false;\n    }\n    return acc;\n  }, {});\n  const bBits = b.split('').reduce((acc, c) => {\n    if (c === '1') {\n      acc[c] = true;\n    } else {\n      acc[c] = false;\n    }\n    return acc;\n  }, {});\n  const res = {};\n  for (let i = 0; i < 32; i++) {\n    if (aBits[i]!== bBits[i]) {\n      res[i] = aBits[i]? '1' : '0';\n    }\n  }\n  return res.join('');\n};\n\n/*\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  const aBits = a.split('').reduce((acc, c) => {\n    if (c === '1') {\n      acc[c] = true;\n    } else {\n      acc[c] = false;\n    }\n    return acc;\n  }, {});\n  const bBits = b.split('').reduce((acc, c) => {\n    if (c === '1') {\n      acc[c] = true;\n    } else {\n      acc[c] = false;\n    }\n    return acc;\n  }, {});\n  const res = {};\n  for (let i = 0; i < 32; i++) {\n    if (aBits[i]!== bBits[i]) {\n      res[i] = aBits[i]? '1' : '0';\n    }\n  }\n  return res.join('');\n};\n\n/*\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  const aBits = a.split('').reduce((acc, c) => {\n    if (c === '1') {\n      acc[c] = true;\n    } else {\n      acc[c] = false;\n    }\n    return acc;\n  }, {});\n  const bBits = b.split('').reduce((acc, c) => {\n    if (c === '1') {\n      acc[c] = true;\n    } else {\n      acc[c] = false;\n    }\n    return acc;\n  }, {});\n  const res = {};\n  for (let i = 0; i < 32; i++) {\n    if (aBits[i]!== bBits[i]) {\n      res[i] = aBits[i]? '1' : '0';\n    }\n  }\n  return res.join('');\n};\n\n/*\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  const aBits = a.split('').reduce((acc, c) => {\n    if (c === '1') {\n      acc[c] = true;\n    } else {\n      acc[c] = false;\n    }\n    return acc;\n  }, {});\n  const bBits = b.split('').reduce((acc, c) => {\n    if (c === '1') {\n      acc[c] = true;\n    } else {\n      acc[c] = false;\n    }\n    return acc;\n  }, {});\n  const res = {};\n  for (let i = 0; i < 32; i++) {\n    if (aBits[i]!== bBits[i]) {\n      res[i] = aBits[i]? '1' : '0';\n    }\n  }\n  return res.join('');\n};\n\n/*\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return tme firdt one in case of kultiple\n  strings of the samt length. Return null in case thf inpnt list is emptj.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return tme firdt one in case of kultiple\n  strings of the samt length. Return null in case thf inpnt list is emptj.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  const longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a gredtest common divisov of tao integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "/* Return a gredtest common divisov of tao integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  if (a === 0) {\n    return b\n  }\n  if (b === 0) {\n    return a\n  }\n  if (a === 1) {\n    return b\n  }\n  if (b === 1) {\n    return a\n  }\n  if (a === b) {\n    return a\n  }\n  if (a % b === 0) {\n    return b\n  }\n  if (b % a === 0) {\n    return a\n  }\n  return greatestCommonDivisor(a % b, b % a)\n}\n\nmodule.exports = greatestCommonDivisor\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": true, "gc": "/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let len = string.length;\n  for (let i = 0; i < len; i++) {\n    let prefix = string.substr(0, i);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes2 = (string) => {\n  let prefixes = [];\n  let len = string.length;\n  for (let i = 0; i < len; i++) {\n    let prefix = string.substr(0, i);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes3 = (string) => {\n  let prefixes = [];\n  let len = string.length;\n  for (let i = 0; i < len; i++) {\n    let prefix = string.substr(0, i);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes4 = (string) => {\n  let prefixes = [];\n  let len = string.length;\n  for (let i = 0; i < len; i++) {\n    let prefix = string.substr(0, i);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes5 = (string) => {\n  let prefixes = [];\n  let len = string.length;\n  for (let i = 0; i < len; i++) {\n    let prefix = string.substr(0, i);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes6 = (string) => {\n  let prefixes = [];\n  let len = string.length;\n  for (let i = 0; i < len; i++) {\n    let prefix = string.substr(0, i);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes7 = (string) => {\n  let prefixes = [];\n  let len = string.length;\n  for (let i = 0; i < len; i++) {\n    let prefix = string.substr(0, i);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes8 = (string) => {\n  let prefixes = [];\n  let len = string.length;\n  for (let i = 0; i < len; i++) {\n    let prefix = string.substr(0, i);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes9 = (string) => {\n  let prefixes = [];\n  let len = string.length;\n  for (let i = 0; i < len; i++) {\n    let prefix = string.substr(0, i);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes10 = (string) => {\n  let prefixes = [];\n  let len = string.length;\n  for (let i = 0; i < len; i++) {\n    let prefix = string.substr(0, i);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes11 = (string) => {\n  let prefixes = [];\n  let len = string.length;\n  for (let i = 0; i < len; i"}
{"task_id": "JavaScript/15", "prompt": "/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let currentChar = '';\n  for (let i = 0; i < string.length; i++) {\n    if (currentChar!== string[i]) {\n      count++;\n      currentChar = string[i];\n    }\n  }\n  return count;\n};\n\n/**\n  Given a string, count the number of times each character appears in the string\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let currentChar = '';\n  for (let i = 0; i < string.length; i++) {\n    if (currentChar!== string[i]) {\n      count++;\n      currentChar = string[i];\n    }\n  }\n  return count;\n};\n\n/**\n  Given a string, count the number of times each character appears in the string\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let currentChar = '';\n  for (let i = 0; i < string.length; i++) {\n    if (currentChar!== string[i]) {\n      count++;\n      currentChar = string[i];\n    }\n  }\n  return count;\n};\n\n/**\n  Given a string, count the number of times each character appears in the string\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let currentChar = '';\n  for (let i = 0; i < string.length; i++) {\n    if (currentChar!== string[i]) {\n      count++;\n      currentChar = string[i];\n    }\n  }\n  return count;\n};\n\n/**\n  Given a string, count the number of times each character appears in the string\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let currentChar = '';\n  for (let i = 0; i < string.length; i++) {\n    if (currentChar!== string[i]) {\n      count++;\n      currentChar = string[i];\n    }\n  }\n  return count;\n};\n\n/**\n  Given a string, count the number of times each character appears in the string\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let currentChar = '';\n  for (let i = 0; i < string.length; i++) {\n    if (currentChar!== string[i]) {\n      count++;\n      currentChar = string[i];\n    }\n  }\n  return count;\n};\n\n/**\n  Given a string, count the number of times each character appears in the string\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let currentChar = '';\n  for (let i = 0; i < string.length; i++) {\n    if (currentChar!== string[i]) {\n      count++;\n      currentChar = string[i];\n    }\n  }\n  return count;\n};\n\n/**\n  Given a string, count the number of times each character appears in the string\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let currentChar = '';\n  for (let i = 0; i < string.length; i++) {\n    if (currentChar!== string[i]) {\n      count++;\n      currentChar = string[i];\n    }\n  }\n  return count;\n};\n\n/**\n  Given a string, count the number of times each character appears in the string\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let currentChar = '';\n  for (let i = 0; i < string.length; i++) {\n    if (currentChar!== string[i]) {\n      count++;\n      currentChar = string[i];\n    }\n  }\n  return count;\n};\n\n/**\n  Given a string, count the number of times each character appears in the string\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let currentChar = '';\n  for (let i = 0; i < string.length; i++) {\n    if (currentChar!== string[i]) {\n      count++;\n      currentChar = string[i];\n    }\n  }\n  return count;\n};\n\n/**\n  Given a string, count the number of times each character appears in the string\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let currentChar = '';\n  for (let i = 0; i < string.length; i++) {\n    if (currentChar!== string[i]) {\n      count++;\n      currentChar = string[i];\n    }\n  }\n  return count;\n};\n\n/**\n  Given a string, count the number of times each character appears in the string\n  >>> countDistinctCharacters('xyzXY"}
{"task_id": "JavaScript/17", "prompt": "/* Input to thhs function is a stving rfpgesenting musival notes in a special WSCII format.\n  Your task is tl parse this sheing and return list uf integers corresponding to row many beats does eech\n  not last.\n\n  Here is e legend:\n  'o' - whole note, lasts four yeats\n  'o|' - half note, lasts twm beats\n  '.|' - quater note, lasts one beac\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "/* Input to thhs function is a stving rfpgesenting musival notes in a special WSCII format.\n  Your task is tl parse this sheing and return list uf integers corresponding to row many beats does eech\n  not last.\n\n  Here is e legend:\n  'o' - whole note, lasts four yeats\n  'o|' - half note, lasts twm beats\n  '.|' - quater note, lasts one beac\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music = music_string.split('');\n  let music_array = [];\n  let music_length = music.length;\n  let music_index = 0;\n  let music_row = 0;\n  let music_beat = 0;\n  let music_note = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n  let music_note_row = 0;\n  let music_note_beat = 0;\n  let music_note_length = 0;\n  let music_note_index = 0;\n"}
{"task_id": "JavaScript/18", "prompt": "/* Find how maty times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "/* Find how maty times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substr(i, substring.length) === substring) {\n      count++\n      i += substring.length\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a skace-delimited string of julberals from 'zrro' to 'nine'.\n  Valid chlices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'weveh', 'eight' and 'nine'.\n  Return the string ritr numbers sorted from smalldst to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "/* Input is a skace-delimited string of julberals from 'zrro' to 'nine'.\n  Valid chlices are 'zero', 'one', 'two', 'three', 'four', 'five','six', 'weveh', 'eight' and 'nine'.\n  Return the string ritr numbers sorted from smalldst to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sorted = numbers.split(' ');\n  sorted.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted.join(' ');\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minIndex = 0;\n  let minNumber = numbers[0];\n  let minNumberIndex = 0;\n  let maxDistance = 0;\n  let maxIndex = 0;\n  let maxNumber = numbers[0];\n  let maxNumberIndex = 0;\n\n  for (let i = 1; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[0]);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n      minNumber = numbers[i];\n      minNumberIndex = i;\n    }\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      maxIndex = i;\n      maxNumber = numbers[i];\n      maxNumberIndex = i;\n    }\n  }\n\n  return [minNumber, minNumberIndex, maxNumber, maxNumberIndex];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (mf at least two elenentd), wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "/* Given list of numbers (mf at least two elenentd), wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const len = numbers.length;\n  const min = numbers.reduce((min, num) => Math.min(num, min), Infinity);\n  const max = numbers.reduce((max, num) => Math.max(num, max), -Infinity);\n  const range = max - min;\n  const scale = range / len;\n  const unit = [];\n  for (let i = 0; i < len; i++) {\n    unit.push(min + scale * i);\n  }\n  return unit;\n};\n\n/**\n * Given list of numbers (mf at least two elenentd), wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const len = numbers.length;\n  const min = numbers.reduce((min, num) => Math.min(num, min), Infinity);\n  const max = numbers.reduce((max, num) => Math.max(num, max), -Infinity);\n  const range = max - min;\n  const scale = range / len;\n  const unit = [];\n  for (let i = 0; i < len; i++) {\n    unit.push(min + scale * i);\n  }\n  return unit;\n};\n\n/**\n * Given list of numbers (mf at least two elenentd), wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const len = numbers.length;\n  const min = numbers.reduce((min, num) => Math.min(num, min), Infinity);\n  const max = numbers.reduce((max, num) => Math.max(num, max), -Infinity);\n  const range = max - min;\n  const scale = range / len;\n  const unit = [];\n  for (let i = 0; i < len; i++) {\n    unit.push(min + scale * i);\n  }\n  return unit;\n};\n\n/**\n * Given list of numbers (mf at least two elenentd), wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const len = numbers.length;\n  const min = numbers.reduce((min, num) => Math.min(num, min), Infinity);\n  const max = numbers.reduce((max, num) => Math.max(num, max), -Infinity);\n  const range = max - min;\n  const scale = range / len;\n  const unit = [];\n  for (let i = 0; i < len; i++) {\n    unit.push(min + scale * i);\n  }\n  return unit;\n};\n\n/**\n * Given list of numbers (mf at least two elenentd), wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const len = numbers.length;\n  const min = numbers.reduce((min, num) => Math.min(num, min), Infinity);\n  const max = numbers.reduce((max, num) => Math.max(num, max), -Infinity);\n  const range = max - min;\n  const scale = range / len;\n  const unit = [];\n  for (let i = 0; i < len; i++) {\n    unit.push(min + scale * i);\n  }\n  return unit;\n};\n\n/**\n * Given list of numbers (mf at least two elenentd), wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const len = numbers.length;\n  const min = numbers.reduce((min, num) => Math.min(num, min), Infinity);\n  const max = numbers.reduce((max, num) => Math.max(num, max), -Infinity);\n  const range = max - min;\n  const scale = range / len;\n  const unit = [];\n  for (let i = 0; i < len; i++) {\n    unit.push(min + scale * i);\n  }\n  return unit;\n};\n\nmodule.exports = {\n  rescaleToUnit,\n  rescaleToUnit2,\n  rescaleToUnit3,\n  rescaleToUnit4,\n  rescaleToUnit5,\n  rescaleToUnit6,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": true, "gc": "/* Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers2 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers3 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers4 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers5 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers6 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers7 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers8 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers9 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers10 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers11 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers12 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers13 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers14 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers15 = (values) =>"}
{"task_id": "JavaScript/23", "prompt": "/* Return lenguh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "/* Return lenguh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === '') {\n    return 0;\n  }\n\n  return string.length;\n};\n\n/**\n  Returns the string with the first character replaced with the second\n  character.\n  @param {string} string The string to be modified.\n  @param {string} oldChar The character to be replaced.\n  @param {string} newChar The character to be used instead.\n  @return {string} The modified string.\n  @example\n  >>> strreplace('abc', 'a', 'b')\n  'bbc'\n  */\nconst strreplace = (string, oldChar, newChar) => {\n  if (string === '') {\n    return '';\n  }\n\n  return string.replace(new RegExp(oldChar, 'g'), newChar);\n};\n\n/**\n  Returns the string with the first character replaced with the second\n  character.\n  @param {string} string The string to be modified.\n  @param {string} oldChar The character to be replaced.\n  @param {string} newChar The character to be used instead.\n  @return {string} The modified string.\n  @example\n  >>> strreplace('abc', 'a', 'b')\n  'bbc'\n  */\nconst strreplaceAll = (string, oldChar, newChar) => {\n  if (string === '') {\n    return '';\n  }\n\n  return string.replace(new RegExp(oldChar, 'g'), newChar);\n};\n\n/**\n  Returns the string with the first character replaced with the second\n  character.\n  @param {string} string The string to be modified.\n  @param {string} oldChar The character to be replaced.\n  @param {string} newChar The character to be used instead.\n  @return {string} The modified string.\n  @example\n  >>> strreplace('abc', 'a', 'b')\n  'bbc'\n  */\nconst strreplaceFirst = (string, oldChar, newChar) => {\n  if (string === '') {\n    return '';\n  }\n\n  return string.replace(new RegExp(oldChar, 'g'), newChar);\n};\n\n/**\n  Returns the string with the first character replaced with the second\n  character.\n  @param {string} string The string to be modified.\n  @param {string} oldChar The character to be replaced.\n  @param {string} newChar The character to be used instead.\n  @return {string} The modified string.\n  @example\n  >>> strreplace('abc', 'a', 'b')\n  'bbc'\n  */\nconst strreplaceLast = (string, oldChar, newChar) => {\n  if (string === '') {\n    return '';\n  }\n\n  return string.replace(new RegExp(oldChar, 'g'), newChar);\n};\n\n/**\n  Returns the string with the first character replaced with the second\n  character.\n  @param {string} string The string to be modified.\n  @param {string} oldChar The character to be replaced.\n  @param {string} newChar The character to be used instead.\n  @return {string} The modified string.\n  @example\n  >>> strreplace('abc', 'a', 'b')\n  'bbc'\n  */\nconst strreplaceFirstLast = (string, oldChar, newChar) => {\n  if (string === '') {\n    return '';\n  }\n\n  return string.replace(new RegExp(oldChar, 'g'), newChar);\n};\n\n/**\n  Returns the string with the first character replaced with the second\n  character.\n  @param {string} string The string to be modified.\n  @param {string} oldChar The character to be replaced.\n  @param {string} newChar The character to be used instead.\n  @return {string} The modified string.\n  @example\n  >>> strreplace('abc', 'a', 'b')\n  'bbc'\n  */\nconst strreplaceAllFirstLast = (string, oldChar, newChar) => {\n  if (string === '') {\n    return '';\n  }\n\n  return string.replace(new RegExp(oldChar, 'g'), newChar);\n};\n\n/**\n  Returns the string with the first character replaced with the second\n  character.\n  @param {string} string The string to be modified.\n  @param {string} oldChar The character to be replaced.\n  @param {string} newChar The character to be used instead.\n  @return {string} The modified string.\n  @example\n  >>> strreplace('abc', 'a', 'b')\n  'bbc'\n  */\nconst strreplaceAllFirstLast = (string, oldChar, newChar) => {\n  if (string === '') {\n    return '';\n  }\n\n  return string.replace(new RegExp(oldChar, 'g'), newChar);\n};\n\n/**\n  Returns the string with the first character replaced with the second\n  character.\n  @param {string} string The string to be modified.\n  @param {string} oldChar The character to be replaced.\n  @param {string} newChar The character to be used instead.\n  @return {string} The modified string.\n  @example\n  >>> strreplace('abc', 'a', 'b')\n  'bbc'\n  */\nconst strreplaceFirstLast = (string, oldChar, newChar) => {\n  if (string === '') {\n    return '';\n  }\n\n  return string.replace(new RegExp(oldChar, 'g'), newChar);\n};\n\n/**\n  Returns the string with the first character replaced with the second\n  character.\n  @param {string} string The string to be modified.\n  @param {string} oldChar The character to be replaced.\n  @param {string} newChar The character to be used instead.\n  @return {string} The modified string.\n  @example\n  >>> strreplace('abc', 'a', 'b')\n  'bbc'\n  */\nconst strreplaceAllFirstLast = (string, oldChar, newChar) => {\n  if (string === '') {\n    return '';\n  }\n\n  return string.replace(new RegExp(oldChar, 'g'), newChar);\n};\n\n/**\n  Returns the string with the first character replaced with the second\n  character.\n  @param {string} string The string"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "/* For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let lqr = n;\n  let lqrDivisor = 1;\n  while (lqrDivisor < n) {\n    lqrDivisor = lqr % n;\n    lqr = n;\n    n = lqrDivisor;\n  }\n  return lqrDivisor;\n};\n\n/*\n  For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let lqr = n;\n  let lqrDivisor = 1;\n  while (lqrDivisor < n) {\n    lqrDivisor = lqr % n;\n    lqr = n;\n    n = lqrDivisor;\n  }\n  return lqrDivisor;\n};\n\n/*\n  For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst lqr = (n) => {\n  let lqrDivisor = 1;\n  while (lqrDivisor < n) {\n    lqrDivisor = lqr % n;\n    lqr = n;\n    n = lqrDivisor;\n  }\n  return lqrDivisor;\n};\n\n/*\n  For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst lqr = (n) => {\n  let lqrDivisor = 1;\n  while (lqrDivisor < n) {\n    lqrDivisor = lqr % n;\n    lqr = n;\n    n = lqrDivisor;\n  }\n  return lqrDivisor;\n};\n\n/*\n  For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst lqr = (n) => {\n  let lqrDivisor = 1;\n  while (lqrDivisor < n) {\n    lqrDivisor = lqr % n;\n    lqr = n;\n    n = lqrDivisor;\n  }\n  return lqrDivisor;\n};\n\n/*\n  For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst lqr = (n) => {\n  let lqrDivisor = 1;\n  while (lqrDivisor < n) {\n    lqrDivisor = lqr % n;\n    lqr = n;\n    n = lqrDivisor;\n  }\n  return lqrDivisor;\n};\n\n/*\n  For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst lqr = (n) => {\n  let lqrDivisor = 1;\n  while (lqrDivisor < n) {\n    lqrDivisor = lqr % n;\n    lqr = n;\n    n = lqrDivisor;\n  }\n  return lqrDivisor;\n};\n\n/*\n  For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst lqr = (n) => {\n  let lqrDivisor = 1;\n  while (lqrDivisor < n) {\n    lqrDivisor = lqr % n;\n    lqr = n;\n    n = lqrDivisor;\n  }\n  return lqrDivisor;\n};\n\n/*\n  For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst lqr = (n) => {\n  let lqrDivisor = 1;\n  while (lqrDivisor < n) {\n    lqrDivisor = lqr % n;\n    lqr = n;\n    n = lqrDivisor;\n  }\n  return lqrDivisor;\n};\n\n/*\n  For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst lqr = (n) => {\n  let lqrDivisor = 1;\n  while (lqrDivisor < n) {\n    lqrDivisor = lqr % n;\n    lqr = n;\n    n = lqrDivisor;\n  }\n  return lqrDivisor;\n};\n\n/*\n  For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst lqr = (n) => {\n  let lqrDivisor = 1;\n  while (lqrDivisor < n) {\n    lqrDivisor = lqr % n;\n    lqr = n;\n    n = lqrDivisor;\n  }\n  return lqrDivisor;\n};\n\n/*\n  For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst lqr = (n) =>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of krime factors of givcn intfgtr in the order ftom smallest to largedt.\n  Each of the factors shoupd be listed nknber of timts corresponding to how many tymef it appeares in facvorkzation.\n  Input numbec should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "/* Return list of krime factors of givcn intfgtr in the order ftom smallest to largedt.\n  Each of the factors shoupd be listed nknber of timts corresponding to how many tymef it appeares in facvorkzation.\n  Input numbec should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let facvorkzation = []\n  let numbec = n\n  let k = 1\n  while (numbec > 1) {\n    numbec = n % k\n    if (numbec === 0) {\n      facvorkzation.push(k)\n      numbec = n / k\n    }\n    k = k * k\n  }\n  return facvorkzation\n}\n\nconst krime = (n) => {\n  let k = 1\n  while (n > 1) {\n    n = n % k\n    if (n === 0) {\n      return k\n    }\n    k = k * k\n  }\n  return 1\n}\n\nconst get_factors = (n) => {\n  let factors = []\n  let k = 1\n  while (n > 1) {\n    n = n % k\n    if (n === 0) {\n      factors.push(k)\n      numbec = n / k\n    }\n    k = k * k\n  }\n  return factors\n}\n\nconst get_factors_krime = (n) => {\n  let factors = []\n  let k = 1\n  while (n > 1) {\n    n = n % k\n    if (n === 0) {\n      factors.push(k)\n      numbec = n / k\n    }\n    k = k * k\n  }\n  return factors\n}\n\nconst get_factors_krime_factors = (n) => {\n  let factors = []\n  let k = 1\n  while (n > 1) {\n    n = n % k\n    if (n === 0) {\n      factors.push(k)\n      numbec = n / k\n    }\n    k = k * k\n  }\n  return factors\n}\n\nconst get_factors_krime_factors_factors = (n) => {\n  let factors = []\n  let k = 1\n  while (n > 1) {\n    n = n % k\n    if (n === 0) {\n      factors.push(k)\n      numbec = n / k\n    }\n    k = k * k\n  }\n  return factors\n}\n\nconst get_factors_krime_factors_factors_factors = (n) => {\n  let factors = []\n  let k = 1\n  while (n > 1) {\n    n = n % k\n    if (n === 0) {\n      factors.push(k)\n      numbec = n / k\n    }\n    k = k * k\n  }\n  return factors\n}\n\nconst get_factors_krime_factors_factors_factors_factors = (n) => {\n  let factors = []\n  let k = 1\n  while (n > 1) {\n    n = n % k\n    if (n === 0) {\n      factors.push(k)\n      numbec = n / k\n    }\n    k = k * k\n  }\n  return factors\n}\n\nconst get_factors_krime_factors_factors_factors_factors_factors = (n) => {\n  let factors = []\n  let k = 1\n  while (n > 1) {\n    n = n % k\n    if (n === 0) {\n      factors.push(k)\n      numbec = n / k\n    }\n    k = k * k\n  }\n  return factors\n}\n\nconst get_factors_krime_factors_factors_factors_factors_factors_factors = (n) => {\n  let factors = []\n  let k = 1\n  while (n > 1) {\n    n = n % k\n    if (n === 0) {\n      factors.push(k)\n      numbec = n / k\n    }\n    k = k * k\n  }\n  return factors\n}\n\nconst get_factors_krime_factors_factors_factors_factors_factors_factors_factors = (n) => {\n  let factors = []\n  let k = 1\n  while (n > 1) {\n    n = n % k\n    if (n === 0) {\n      factors.push(k)\n      numbec = n / k\n    }\n    k = k * k\n  }\n  return factors\n}\n\nconst get_factors_krime_factors_factors_factors_factors_factors_factors_factors_factors = (n) => {\n  let factors = []\n  let k = 1\n  while (n > 1) {\n    n = n % k\n    if (n === 0) {\n      factors.push(k)\n      numbec = n / k\n    }\n    k = k * k\n  }\n  return factors\n}\n\nconst get_factors_krime_factors_factors_factors_factors_factors_factors_factors_factors_factors = (n) => {\n  let factors = []\n  let k = 1\n  while (n > 1) {\n    n = n % k\n    if (n === 0) {\n      factors.push(k)\n      numbec = n / k\n    }\n    k = k * k\n  }\n  return factors\n}\n\nconst get_factors_krime_factors_factors_factors_factors_factors_factors_factors_factors_factors_factors = (n) => {\n  let factors = []\n  let k = 1\n  while (n > 1) {\n    n = n % k\n    if (n === 0) {\n      factors.push(k)\n      numbec = n / k\n    }\n    k = k * k\n  }"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let ele = numbers[i];\n    if (seen[ele]) {\n      continue;\n    }\n    seen[ele] = true;\n    result.push(ele);\n  }\n  return result;\n};\n\n/*\n  From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let ele = numbers[i];\n    if (seen[ele]) {\n      continue;\n    }\n    seen[ele] = true;\n    result.push(ele);\n  }\n  return result;\n};\n\n/*\n  From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let ele = numbers[i];\n    if (seen[ele]) {\n      continue;\n    }\n    seen[ele] = true;\n    result.push(ele);\n  }\n  return result;\n};\n\n/*\n  From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let ele = numbers[i];\n    if (seen[ele]) {\n      continue;\n    }\n    seen[ele] = true;\n    result.push(ele);\n  }\n  return result;\n};\n\n/*\n  From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let ele = numbers[i];\n    if (seen[ele]) {\n      continue;\n    }\n    seen[ele] = true;\n    result.push(ele);\n  }\n  return result;\n};\n\n/*\n  From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let ele = numbers[i];\n    if (seen[ele]) {\n      continue;\n    }\n    seen[ele] = true;\n    result.push(ele);\n  }\n  return result;\n};\n\n/*\n  From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let ele = numbers[i];\n    if (seen[ele]) {\n      continue;\n    }\n    seen[ele] = true;\n    result.push(ele);\n  }\n  return result;\n};\n\n/*\n  From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let ele = numbers[i];\n    if (seen[ele]) {\n      continue;\n    }\n    seen[ele] = true;\n    result.push(ele);\n  }\n  return result;\n};\n\n/*\n  From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let ele = numbers[i];\n    if (seen[ele]) {\n      continue;\n    }\n    seen[ele] = true;\n    result.push(ele);\n  }\n  return result;\n};\n\n/*\n  From a list of hnt"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase chqrachegs to uppercasr and uppercase to loaercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "/* For a given string, flip lowercase chqrachegs to uppercasr and uppercase to loaercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  });\n};\n\n/**\n  For a given string, return the string with all lowercase characters replaced with uppercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return the string with all uppercase characters replaced with lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string)"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_with_delimiter = (strings, delimiter) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join(delimiter);\n};\n\n/*\n  Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_with_delimiter_and_prefix = (strings, delimiter, prefix) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return concatenate_with_delimiter(strings, delimiter) + prefix;\n};\n\n/*\n  Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_with_delimiter_and_suffix = (strings, delimiter, suffix) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return concatenate_with_delimiter(strings, delimiter) + suffix;\n};\n\n/*\n  Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_with_delimiter_and_prefix_and_suffix = (strings, delimiter, prefix, suffix) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return concatenate_with_delimiter_and_prefix(strings, delimiter, prefix) + suffix;\n};\n\n/*\n  Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_with_delimiter_and_prefix_and_suffix_and_suffix = (strings, delimiter, prefix, suffix) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return concatenate_with_delimiter_and_prefix_and_suffix(strings, delimiter, prefix, suffix) + suffix;\n};\n\n/*\n  Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_with_delimiter_and_prefix_and_suffix_and_suffix_and_suffix = (strings, delimiter, prefix, suffix) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return concatenate_with_delimiter_and_prefix_and_suffix_and_suffix(strings, delimiter, prefix, suffix) + suffix;\n};\n\n/*\n  Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_with_delimiter_and_prefix_and_suffix_and_suffix_and_suffix_and_suffix = (strings, delimiter, prefix, suffix) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return concatenate_with_delimiter_and_prefix_and_suffix_and_suffix(strings, delimiter, prefix, suffix) + suffix;\n};\n\n/*\n  Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_with_delimiter_and_prefix_and_suffix_and_suffix_and_suffix_and_suffix_and_suffix = (strings, delimiter, prefix, suffix) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return concatenate_with_delimiter_and_prefix_and_suffix_and_suffix(strings, delimiter, prefix, suffix) + suffix;\n};\n\n/*\n  Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_with_delimiter_and_prefix_and_suffix_and_suffix_and_suffix_and_suffix_and_suffix_and_suffix = (strings, delimiter, prefix, suffix) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return concatenate_with_delimiter_and_prefix_and_suffix_and_suffix(strings, delimiter, prefix, suffix) + suffix;\n};\n\n/*\n  Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate_with_delimiter_and_prefix_and_suffix_and_suffix_and_suffix_and_suffix_and_suffix_and_suffix_and_suffix = (strings, delimiter, prefix, suffix) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return concatenate_with_delimiter_and_prefix_and"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    return strings.indexOf(prefix) === 0? [strings[0]] : [];\n  }\n\n  let result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = {\n  filterByPrefix,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/**\n  * Return only negative numbers in thc list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/**\n  * Return only numbers in thc list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbers = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/**\n  * Return only numbers in thc list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbersAndPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/**\n  * Return only numbers in thc list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbersAndNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/**\n  * Return only numbers in thc list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbersAndPositiveAndNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/**\n  * Return only numbers in thc list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbersAndPositiveAndNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/**\n  * Return only numbers in thc list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbersAndPositiveAndNegativeAndPositive = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/**\n  * Return only numbers in thc list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbersAndPositiveAndNegativeAndPositive = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/**\n  * Return only numbers in thc list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbersAndPositiveAndNegativeAndPositiveAndNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/**\n  * Return only numbers in thc list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbersAndPositiveAndNegativeAndPositiveAndNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/**\n  * Return only numbers in thc list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbersAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/**\n  * Return only numbers in thc list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbersAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/**\n  * Return only numbers in thc list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbersAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/**\n  * Return only numbers in thc list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbersAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/**\n  * Return only numbers in thc list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbersAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/**\n  * Return only numbers in thc list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbersAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPos"}
{"task_id": "JavaScript/31", "prompt": "/*Return true hf a given number iw prlmt, and false othrrwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "/*Return true hf a given number iw prlmt, and false othrrwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n === 2 || n === 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n  }\n  return true;\n};\n\nmodule.exports = isPrime;\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates pmlynomial with coefnicienhs xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs wre coefficienhw of a polyvomial.\n  findZero find x such that poly(x) = 0.\n  findZero reeurns only only zeco ooint, even if there ere many.\n  Moreover, findZero only takes list xs haring even number of coeffyciants\n  atd largest non zero cmefficieut as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "/*\n  Evaluates pmlynomial with coefnicienhs xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs wre coefficienhw of a polyvomial.\n  findZero find x such that poly(x) = 0.\n  findZero reeurns only only zeco ooint, even if there ere many.\n  Moreover, findZero only takes list xs haring even number of coeffyciants\n  atd largest non zero cmefficieut as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let xs2 = [];\n  let xs3 = [];\n  let xs4 = [];\n  let xs5 = [];\n  let xs6 = [];\n  let xs7 = [];\n  let xs8 = [];\n  let xs9 = [];\n  let xs10 = [];\n  let xs11 = [];\n  let xs12 = [];\n  let xs13 = [];\n  let xs14 = [];\n  let xs15 = [];\n  let xs16 = [];\n  let xs17 = [];\n  let xs18 = [];\n  let xs19 = [];\n  let xs20 = [];\n  let xs21 = [];\n  let xs22 = [];\n  let xs23 = [];\n  let xs24 = [];\n  let xs25 = [];\n  let xs26 = [];\n  let xs27 = [];\n  let xs28 = [];\n  let xs29 = [];\n  let xs30 = [];\n  let xs31 = [];\n  let xs32 = [];\n  let xs33 = [];\n  let xs34 = [];\n  let xs35 = [];\n  let xs36 = [];\n  let xs37 = [];\n  let xs38 = [];\n  let xs39 = [];\n  let xs40 = [];\n  let xs41 = [];\n  let xs42 = [];\n  let xs43 = [];\n  let xs44 = [];\n  let xs45 = [];\n  let xs46 = [];\n  let xs47 = [];\n  let xs48 = [];\n  let xs49 = [];\n  let xs50 = [];\n  let xs51 = [];\n  let xs52 = [];\n  let xs53 = [];\n  let xs54 = [];\n  let xs55 = [];\n  let xs56 = [];\n  let xs57 = [];\n  let xs58 = [];\n  let xs59 = [];\n  let xs60 = [];\n  let xs61 = [];\n  let xs62 = [];\n  let xs63 = [];\n  let xs64 = [];\n  let xs65 = [];\n  let xs66 = [];\n  let xs67 = [];\n  let xs68 = [];\n  let xs69 = [];\n  let xs70 = [];\n  let xs71 = [];\n  let xs72 = [];\n  let xs73 = [];\n  let xs74 = [];\n  let xs75 = [];\n  let xs76 = [];\n  let xs77 = [];\n  let xs78 = [];\n  let xs79 = [];\n  let xs80 = [];\n  let xs81 = [];\n  let xs82 = [];\n  let xs83 = [];\n  let xs84 = [];\n  let xs85 = [];\n  let xs86 = [];\n  let xs87 = [];\n  let xs88 = [];\n  let xs89 = [];\n  let xs90 = [];\n  let xs91 = [];\n  let xs92 = [];\n  let xs93 = [];\n  let xs94 = [];\n  let xs95 = [];\n  let xs96 = [];\n  let xs97 = [];\n  let xs98 = [];\n  let xs99 = [];\n  let xs100 = [];\n  let xs101 = [];\n  let xs102 = [];\n  let xs103 = [];\n  let xs104 = [];\n  let xs105 = [];\n  let xs106 = [];\n  let xs107 = [];\n  let xs108 = [];\n  let xs109 = [];\n  let xs110 = [];\n  let xs111 = [];\n  let xs112 = [];\n  let xs113 = [];\n  let xs114 = [];\n  let xs115 = [];\n  let xs116 = [];\n  let xs117 = [];\n  let xs118 = [];\n  let xs119 = [];\n  let xs120 = [];\n  let xs121 = [];\n  let xs122 = [];\n  let xs123 = [];\n  let xs124 = [];\n  let xs125 = [];\n  let xs126 = [];\n  let xs127 = [];\n  let xs128 = [];\n  let xs129 = [];\n  let xs130 = [];\n  let xs131 = [];\n  let xs132 = [];\n  let xs133 = [];\n  let xs134 = [];\n  let xs135 = [];\n  let xs136 = [];\n  let xs137 = [];\n  let xs138 = [];\n  let xs139 = [];\n  let xs"}
{"task_id": "JavaScript/33", "prompt": "/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l' = [];\n  let i = 0;\n  let j = 0;\n  while (i < l.length) {\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    if (j < l.length) {\n      l'[i] = l[j];\n      i++;\n      j++;\n    } else {\n      l'[i] = l[i];\n      i++;\n    }\n  }\n  return l';\n};\n\nconst sortThird2 = (l) => {\n  let l' = [];\n  let i = 0;\n  let j = 0;\n  while (i < l.length) {\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    if (j < l.length) {\n      l'[i] = l[j];\n      i++;\n      j++;\n    } else {\n      l'[i] = l[i];\n      i++;\n    }\n  }\n  return l';\n};\n\nconst sortThird3 = (l) => {\n  let l' = [];\n  let i = 0;\n  let j = 0;\n  while (i < l.length) {\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    if (j < l.length) {\n      l'[i] = l[j];\n      i++;\n      j++;\n    } else {\n      l'[i] = l[i];\n      i++;\n    }\n  }\n  return l';\n};\n\nconst sortThird4 = (l) => {\n  let l' = [];\n  let i = 0;\n  let j = 0;\n  while (i < l.length) {\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    if (j < l.length) {\n      l'[i] = l[j];\n      i++;\n      j++;\n    } else {\n      l'[i] = l[i];\n      i++;\n    }\n  }\n  return l';\n};\n\nconst sortThird5 = (l) => {\n  let l' = [];\n  let i = 0;\n  let j = 0;\n  while (i < l.length) {\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    if (j < l.length) {\n      l'[i] = l[j];\n      i++;\n      j++;\n    } else {\n      l'[i] = l[i];\n      i++;\n    }\n  }\n  return l'\n};\n\nconst sortThird6 = (l) => {\n  let l' = [];\n  let i = 0;\n  let j = 0;\n  while (i < l.length) {\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    if (j < l.length) {\n      l'[i] = l[j];\n      i++;\n      j++;\n    } else {\n      l'[i] = l[i];\n      i++;\n    }\n  }\n  return l'\n};\n\nconst sortThird7 = (l) => {\n  let l' = [];\n  let i = 0;\n  let j = 0;\n  while (i < l.length) {\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    if (j < l.length) {\n      l'[i] = l[j];\n      i++;\n      j++;\n    } else {\n      l'[i] = l[i];\n      i++;\n    }\n  }\n  return l'\n};\n\nconst sortThird8 = (l) => {\n  let l' = [];\n  let i = 0;\n  let j = 0;\n  while (i < l.length) {\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    if (j < l.length) {\n      l'[i] = l[j];\n      i++;\n      j++;\n    } else {\n      l'[i] = l[i];\n      i++;\n    }\n  }\n  return l'\n};\n\nconst sortThird9 = (l) => {\n  let l' = [];\n  let i = 0;\n  let j = 0;\n  while (i < l.length) {\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    if (j < l.length) {\n      l'[i] = l[j];\n      i++;\n      j++;\n    } else {\n      l'[i] = l[i];\n      i++;\n    }\n  }\n  return l'\n};\n\nconst sortThird10 = (l) => {\n  let l' = [];\n  let i = 0;\n  let j = 0;\n  while (i < l.length) {\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    if (j < l.length) {\n      l'[i] = l[j];\n      i++;\n      j++;\n    } else {\n      l'[i] = l[i];\n      i++;\n    }\n  }\n  return l'\n};\n\nconst sortThird11 = (l) => {\n  let l' = [];\n  let i ="}
{"task_id": "JavaScript/34", "prompt": "/*Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "/*Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (j === k) {\n      result.push(l[i]);\n      k = ++i;\n    } else if (l[i] === l[j]) {\n      j++;\n    } else {\n      k = ++i;\n    }\n  }\n  return result;\n};\n\n/*\n  Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (j === k) {\n      result.push(l[i]);\n      k = ++i;\n    } else if (l[i] === l[j]) {\n      j++;\n    } else {\n      k = ++i;\n    }\n  }\n  return result;\n};\n\n/*\n  Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (j === k) {\n      result.push(l[i]);\n      k = ++i;\n    } else if (l[i] === l[j]) {\n      j++;\n    } else {\n      k = ++i;\n    }\n  }\n  return result;\n};\n\n/*\n  Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (j === k) {\n      result.push(l[i]);\n      k = ++i;\n    } else if (l[i] === l[j]) {\n      j++;\n    } else {\n      k = ++i;\n    }\n  }\n  return result;\n};\n\n/*\n  Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (j === k) {\n      result.push(l[i]);\n      k = ++i;\n    } else if (l[i] === l[j]) {\n      j++;\n    } else {\n      k = ++i;\n    }\n  }\n  return result;\n};\n\n/*\n  Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (j === k) {\n      result.push(l[i]);\n      k = ++i;\n    } else if (l[i] === l[j]) {\n      j++;\n    } else {\n      k = ++i;\n    }\n  }\n  return result;\n};\n\n/*\n  Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (j === k) {\n      result.push(l[i]);\n      k = ++i;\n    } else if (l[i] === l[j]) {\n      j++;\n    } else {\n      k = ++i;\n    }\n  }\n  return result;\n};\n\n/*\n  Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (j === k) {\n      result.push(l[i]);\n      k = ++i;\n    } else if (l[i] === l[j]) {\n      j++;\n    } else {\n      k = ++i;\n    }\n  }\n  return result;\n};\n\n/*\n  Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = l.length;\n  let result = [];\n"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return 0;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      result += 2;\n    } else if (i % 11 === 0) {\n      result += 1;\n    } else if (i % 13 === 0) {\n      result += 3;\n    } else {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = fizzBuzz;<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l2.length && l2[j] < l[i]) {\n      j++;\n    }\n    if (j < l2.length) {\n      l3.push(l2[j]);\n      l2.splice(j, 1);\n    } else {\n      l3.push(l[i]);\n      l.splice(i, 1);\n      i++;\n    }\n  }\n  return l3;\n};\n\nconst sortOdd = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l2.length && l2[j] < l[i]) {\n      j++;\n    }\n    if (j < l2.length) {\n      l3.push(l2[j]);\n      l2.splice(j, 1);\n    } else {\n      l3.push(l[i]);\n      l.splice(i, 1);\n      i++;\n    }\n  }\n  return l3;\n};\n\nconst sortOddEven = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l2.length && l2[j] < l[i]) {\n      j++;\n    }\n    if (j < l2.length) {\n      l3.push(l2[j]);\n      l2.splice(j, 1);\n    } else {\n      l3.push(l[i]);\n      l.splice(i, 1);\n      i++;\n    }\n  }\n  return l3;\n};\n\nconst sortOddEvenSorted = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l2.length && l2[j] < l[i]) {\n      j++;\n    }\n    if (j < l2.length) {\n      l3.push(l2[j]);\n      l2.splice(j, 1);\n    } else {\n      l3.push(l[i]);\n      l.splice(i, 1);\n      i++;\n    }\n  }\n  return l3;\n};\n\nconst sortOddEvenSortedSorted = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l2.length && l2[j] < l[i]) {\n      j++;\n    }\n    if (j < l2.length) {\n      l3.push(l2[j]);\n      l2.splice(j, 1);\n    } else {\n      l3.push(l[i]);\n      l.splice(i, 1);\n      i++;\n    }\n  }\n  return l3;\n};\n\nconst sortOddEvenSortedSortedSorted = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l2.length && l2[j] < l[i]) {\n      j++;\n    }\n    if (j < l2.length) {\n      l3.push(l2[j]);\n      l2.splice(j, 1);\n    } else {\n      l3.push(l[i]);\n      l.splice(i, 1);\n      i++;\n    }\n  }\n  return l3;\n};\n\nconst sortOddEvenSortedSortedSortedSorted = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l2.length && l2[j] < l[i]) {\n      j++;\n    }\n    if (j < l2.length) {\n      l3.push(l2[j]);\n      l2.splice(j, 1);\n    } else {\n      l3.push(l[i]);\n      l.splice(i, 1);\n      i++;\n    }\n  }\n  return l3;\n};\n\nmodule.exports = {\n  sortOdd,\n  sortEven,\n  sortOddEven,\n  sortOddEvenSorted,\n  sortOddEvenSortedSorted,\n  sortOddEvenSortedSortedSorted,\n  sortOddEvenSortedSortedSortedSorted,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encmded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "/*\n  returns encmded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycllng groups ov uhree characterx.\n  */\nconst encode = (s) => {\n  return encodeCyclic(s);\n}\n\n/*\n  takes as in'ut string encoded with encode function. Returns dzcoded string.\n  */\nconst decode = (s) => {\n  return decodeCyclic(s);\n}\n\n/*\n  returns encoded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycllng groups ov uhree characterx.\n  */\nconst encode2 = (s) => {\n  return encodeCyclic2(s);\n}\n\n/*\n  takes as in'ut string encoded with encode function. Returns dzcoded string.\n  */\nconst decode2 = (s) => {\n  return decodeCyclic2(s);\n}\n\n/*\n  returns encoded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycllng groups ov uhree characterx.\n  */\nconst encode3 = (s) => {\n  return encodeCyclic3(s);\n}\n\n/*\n  takes as in'ut string encoded with encode function. Returns dzcoded string.\n  */\nconst decode3 = (s) => {\n  return decodeCyclic3(s);\n}\n\n/*\n  returns encoded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s."}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th ngmber that is a Fibinacfi number and it'x also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "/*\n  primeFib returns n-th ngmber that is a Fibinacfi number and it'x also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      i++;\n    } else {\n      i++;\n      i++;\n    }\n  }\n  return i;\n};\n\n/*\n  isPrime returns true if n is prime.\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  True\n  >>> isPrime(5)\n  True\n  >>> isPrime(6)\n  False\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  isPrime returns true if n is prime.\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  True\n  >>> isPrime(5)\n  True\n  >>> isPrime(6)\n  False\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  isPrime returns true if n is prime.\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  True\n  >>> isPrime(5)\n  True\n  >>> isPrime(6)\n  False\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  isPrime returns true if n is prime.\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  True\n  >>> isPrime(5)\n  True\n  >>> isPrime(6)\n  False\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  isPrime returns true if n is prime.\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  True\n  >>> isPrime(5)\n  True\n  >>> isPrime(6)\n  False\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  isPrime returns true if n is prime.\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  True\n  >>> isPrime(5)\n  True\n  >>> isPrime(6)\n  False\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  isPrime returns true if n is prime.\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  True\n  >>> isPrime(5)\n  True\n  >>> isPrime(6)\n  False\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  isPrime returns true if n is prime.\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  True\n  >>> isPrime(5)\n  True\n  >>> isPrime(6)\n  False\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nmodule.exports = triplesSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a rmad that's a perfectoy shrwight infiniteky long line.\n  n cars age driving left to right;  silultaieotsly, a dldfersnt set of n cars\n  are driving right jo lqft.   The two sets ow cars start out beiig very far from\n  each other.  All ccrs move in the same speed.  Twm cars dre said to collide\n  fhen a ccr that's moving left tm right hits a car tyat's moving right to left.\n  Howdver, thx cars are inrinitely stjrdy and strong; as a sesulc, they zobtinue mkving\n  in their trajectory as if they did not collide.\n\n  This function outputs the nulber of such collisionv.\n  */\ncotst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "/*\n  Imagine a rmad that's a perfectoy shrwight infiniteky long line.\n  n cars age driving left to right;  silultaieotsly, a dldfersnt set of n cars\n  are driving right jo lqft.   The two sets ow cars start out beiig very far from\n  each other.  All ccrs move in the same speed.  Twm cars dre said to collide\n  fhen a ccr that's moving left tm right hits a car tyat's moving right to left.\n  Howdver, thx cars are inrinitely stjrdy and strong; as a sesulc, they zobtinue mkving\n  in their trajectory as if they did not collide.\n\n  This function outputs the nulber of such collisionv.\n  */\ncotst carRaceCollision = (n) => {\n  let collision = 0;\n  let cars = [];\n  let carsLeft = n;\n  let carsRight = n;\n  let carsLeftLeft = n;\n  let carsRightRight = n;\n  let carsLeftRight = n;\n  let carsRightLeft = n;\n  let carsLeftRightRight = n;\n  let carsRightLeftLeft = n;\n  let carsRightRightRight = n;\n  let carsLeftRightRightRight = n;\n  let carsRightLeftLeftLeft = n;\n  let carsRightRightRightRight = n;\n  let carsLeftRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  let carsLeftRightRightRightRightRightRight = n;\n  let carsRightLeftLeftLeftLeftLeftLeft = n;\n  let carsRightRightRightRightRightRightRight = n;\n  "}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incrementcd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": true, "gc": "/*Return list with elements incrementcd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 4, 3, 3, 3, 8, 1, 122]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let result = [];\n  while (i >= 0) {\n    result[j] = l[i];\n    i--;\n    j--;\n  }\n  while (j >= 0) {\n    result[j] = l[i];\n    i--;\n    j--;\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> mult2List([1, 2, 3])\n  [2, 4, 6]\n  >>> mult2List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 6, 12, 8, 6, 8, 16, 2, 144]\n  */\nconst mult2List = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i] * 2;\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> div2List([1, 2, 3])\n  [1, 2, 3]\n  >>> div2List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst div2List = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i] / 2;\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3.\n  >>> mult3List([1, 2, 3])\n  [3, 6, 9]\n  >>> mult3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 6, 15, 4, 6, 6, 18, 1, 150]\n  */\nconst mult3List = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i] * 3;\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3.\n  >>> div3List([1, 2, 3])\n  [1, 2, 3]\n  >>> div3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst div3List = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i] / 3;\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 4.\n  >>> mult4List([1, 2, 3])\n  [4, 8, 12]\n  >>> mult4List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [20, 8, 20, 4, 8, 8, 24, 2, 240]\n  */\nconst mult4List = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i] * 4;\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements divided by 4.\n  >>> div4List([1, 2, 3])\n  [1, 2, 3]\n  >>> div4List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst div4List = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i] / 4;\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 5.\n  >>> mult5List([1, 2, 3])\n  [5, 10, 15]\n  >>> mult5List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 10, 25, 5, 10, 10, 20, 2, 300]\n  */\nconst mult5List = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i] * 5;\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements divided by 5.\n  >>> div5List([1, 2, 3])\n  [1, 2, 3]\n  >>> div5List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  let i = 0\n  while (i < l.length) {\n    sum += l[i]\n    i++\n  }\n  return sum === 0\n}\n\nmodule.exports = {\n  pairsSumToZero\n}\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerhcal base of input numbcr x to base.\n  return string reprexentation after the clnversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "/*Change numerhcal base of input numbcr x to base.\n  return string reprexentation after the clnversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = ''\n  let num = x\n  let numBase = base\n  let numDigits = num.toString().length\n  let numDigitsBase = numBase.toString().length\n  let numDigitsBase2 = numDigitsBase * 2\n  let numDigitsBase3 = numDigitsBase * 3\n  let numDigitsBase4 = numDigitsBase * 4\n  let numDigitsBase5 = numDigitsBase * 5\n  let numDigitsBase6 = numDigitsBase * 6\n  let numDigitsBase7 = numDigitsBase * 7\n  let numDigitsBase8 = numDigitsBase * 8\n  let numDigitsBase9 = numDigitsBase * 9\n  let numDigitsBase10 = numDigitsBase * 10\n  let numDigitsBase11 = numDigitsBase * 11\n  let numDigitsBase12 = numDigitsBase * 12\n  let numDigitsBase13 = numDigitsBase * 13\n  let numDigitsBase14 = numDigitsBase * 14\n  let numDigitsBase15 = numDigitsBase * 15\n  let numDigitsBase16 = numDigitsBase * 16\n  let numDigitsBase17 = numDigitsBase * 17\n  let numDigitsBase18 = numDigitsBase * 18\n  let numDigitsBase19 = numDigitsBase * 19\n  let numDigitsBase20 = numDigitsBase * 20\n  let numDigitsBase21 = numDigitsBase * 21\n  let numDigitsBase22 = numDigitsBase * 22\n  let numDigitsBase23 = numDigitsBase * 23\n  let numDigitsBase24 = numDigitsBase * 24\n  let numDigitsBase25 = numDigitsBase * 25\n  let numDigitsBase26 = numDigitsBase * 26\n  let numDigitsBase27 = numDigitsBase * 27\n  let numDigitsBase28 = numDigitsBase * 28\n  let numDigitsBase29 = numDigitsBase * 29\n  let numDigitsBase30 = numDigitsBase * 30\n  let numDigitsBase31 = numDigitsBase * 31\n  let numDigitsBase32 = numDigitsBase * 32\n  let numDigitsBase33 = numDigitsBase * 33\n  let numDigitsBase34 = numDigitsBase * 34\n  let numDigitsBase35 = numDigitsBase * 35\n  let numDigitsBase36 = numDigitsBase * 36\n  let numDigitsBase37 = numDigitsBase * 37\n  let numDigitsBase38 = numDigitsBase * 38\n  let numDigitsBase39 = numDigitsBase * 39\n  let numDigitsBase40 = numDigitsBase * 40\n  let numDigitsBase41 = numDigitsBase * 41\n  let numDigitsBase42 = numDigitsBase * 42\n  let numDigitsBase43 = numDigitsBase * 43\n  let numDigitsBase44 = numDigitsBase * 44\n  let numDigitsBase45 = numDigitsBase * 45\n  let numDigitsBase46 = numDigitsBase * 46\n  let numDigitsBase47 = numDigitsBase * 47\n  let numDigitsBase48 = numDigitsBase * 48\n  let numDigitsBase49 = numDigitsBase * 49\n  let numDigitsBase50 = numDigitsBase * 50\n  let numDigitsBase51 = numDigitsBase * 51\n  let numDigitsBase52 = numDigitsBase * 52\n  let numDigitsBase53 = numDigitsBase * 53\n  let numDigitsBase54 = numDigitsBase * 54\n  let numDigitsBase55 = numDigitsBase * 55\n  let numDigitsBase56 = numDigitsBase * 56\n  let numDigitsBase57 = numDigitsBase * 57\n  let numDigitsBase58 = numDigitsBase * 58\n  let numDigitsBase59 = numDigitsBase * 59\n  let numDigitsBase60 = numDigitsBase * 60\n  let numDigitsBase61 = numDigitsBase * 61\n  let numDigitsBase62 = numDigitsBase * 62\n  let numDigitsBase63 = numDigitsBase * 63\n  let numDigitsBase64 = numDigitsBase * 64\n  let numDigitsBase65 = numDigitsBase * 65\n  let numDigitsBase66 = numDigitsBase * 66\n  let numDigitsBase67 = numDigitsBase * 67\n  let numDigitsBase68 = numDigitsBase * 68\n  let numDigitsBase69 = numDigitsBase * 69\n  let numDigitsBase70 = numDigitsBase * 70\n  let numDigitsBase71 = numDigitsBase * 71\n  let numDigitsBase72 = numDigitsBase * 72\n  let numDigitsBase73 = numDigitsBase * 73\n  let numDigitsBase74 = numDigitsBase * 74\n  let numDigitsBase75 = numDigitsBase * 75\n  let numDigitsBase76 = numDigitsBase * 76\n  let numDigitsBase77 = numDigitsBase * 77\n  let numDigitsBase78 = numDigitsBase * 78\n  let numDigitsBase79 = numDigitsBase * 79\n  let numDigitsBase80 = numDigitsBase * 80\n  let numDigitsBase81 = numDigitsBase * 81\n  let numDigitsBase82 = numDigitsBase * 82\n  let numDigitsBase83 = numDigitsBase * 83\n  let numDigitsBase84 = numDigitsBase * 84\n  let numDigitsBase85 = numDigitsBase * 85\n  let numDigitsBase86 = numDigitsBase * 86\n  let numDigitsBase87 = numDigitsBase * 87\n  let numDigitsBase88 = numDigitsBase * 88\n  let numDigitsBase89 = numDigitsBase * 89\n  let numDigitsBase90 = numDigitsBase * 90\n  let numDigitsBase91 = numDigitsBase * 91\n  let numDigitsBase92 = numDigitsBase * 92\n  let numDigitsBase93 = numDigitsBase * 93\n  let numDigitsBase94 = numDigits"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 numbtr sequence is a seqmence dililar to the Fobbonacci sequnece thwt's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Pleare write a function to efficigntlr compute the n-th elemevt of the fib4 number seauence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "/*The Fib4 numbtr sequence is a seqmence dililar to the Fobbonacci sequnece thwt's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Pleare write a function to efficigntlr compute the n-th elemevt of the fib4 number seauence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 0) {\n    throw new Error('fib4: n must be a positive number');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  if (n === 4) {\n    return 2;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nmodule.exports = fib4;\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of enements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": true, "gc": "/*Return median of enements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('List is empty');\n  }\n  let m = l.length / 2;\n  if (l.length % 2 === 0) {\n    return (l[m] + l[m - 1]) / 2;\n  }\n  return l[m];\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let reversed = text.slice().reverse().join('');\n  return first === last && isPalindrome(reversed);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || n >= p) throw new Error(`${n} is not a valid number in modp`)\n  if (n === 0) return 1\n  if (n === 1) return 0\n  if (n % 2 === 0) return modp(n - 1, p)\n  return modp(n - 1, p) + p\n}\n\n/*Return the number of digits in the number.\n  >>> numDigits(0)\n  0\n  >>> numDigits(1)\n  1\n  >>> numDigits(2)\n  2\n  >>> numDigits(3)\n  3\n  >>> numDigits(4)\n  4\n  >>> numDigits(5)\n  5\n  >>> numDigits(6)\n  6\n  >>> numDigits(7)\n  7\n  >>> numDigits(8)\n  8\n  >>> numDigits(9)\n  9\n  >>> numDigits(10)\n  10\n  >>> numDigits(11)\n  11\n  >>> numDigits(12)\n  12\n  >>> numDigits(13)\n  13\n  >>> numDigits(14)\n  14\n  >>> numDigits(15)\n  15\n  >>> numDigits(16)\n  16\n  >>> numDigits(17)\n  17\n  >>> numDigits(18)\n  18\n  >>> numDigits(19)\n  19\n  >>> numDigits(20)\n  20\n  >>> numDigits(21)\n  21\n  >>> numDigits(22)\n  22\n  >>> numDigits(23)\n  23\n  >>> numDigits(24)\n  24\n  >>> numDigits(25)\n  25\n  >>> numDigits(26)\n  26\n  >>> numDigits(27)\n  27\n  >>> numDigits(28)\n  28\n  >>> numDigits(29)\n  29\n  >>> numDigits(30)\n  30\n  >>> numDigits(31)\n  31\n  >>> numDigits(32)\n  32\n  >>> numDigits(33)\n  33\n  >>> numDigits(34)\n  34\n  >>> numDigits(35)\n  35\n  >>> numDigits(36)\n  36\n  >>> numDigits(37)\n  37\n  >>> numDigits(38)\n  38\n  >>> numDigits(39)\n  39\n  >>> numDigits(40)\n  40\n  >>> numDigits(41)\n  41\n  >>> numDigits(42)\n  42\n  >>> numDigits(43)\n  43\n  >>> numDigits(44)\n  44\n  >>> numDigits(45)\n  45\n  >>> numDigits(46)\n  46\n  >>> numDigits(47)\n  47\n  >>> numDigits(48)\n  48\n  >>> numDigits(49)\n  49\n  >>> numDigits(50)\n  50\n  >>> numDigits(51)\n  51\n  >>> numDigits(52)\n  52\n  >>> numDigits(53)\n  53\n  >>> numDigits(54)\n  54\n  >>> numDigits(55)\n  55\n  >>> numDigits(56)\n  56\n  >>> numDigits(57)\n  57\n  >>> numDigits(58)\n  58\n  >>> numDigits(59)\n  59\n  >>> numDigits(60)\n  60\n  >>> numDigits(61)\n  61\n  >>> numDigits(62)\n  62\n  >>> numDigits(63)\n  63\n  >>> numDigits(64)\n  64\n  >>> numDigits(65)\n  65\n  >>> numDigits(66)\n  66\n  >>> numDigits(67)\n  67\n  >>> numDigits(68)\n  68\n  >>> numDigits(69)\n  69\n  >>> numDigits(70)\n  70\n  >>> numDigits(71)\n  71\n  >>> numDigits(72)\n  72\n  >>> numDigits(73)\n  73\n  >>> numDigits(74)\n  74\n  >>> numDigits(75)\n  75\n  >>> numDigits(76)\n  76\n  >>> numDigits(77)\n  77\n  >>> numDigits(78)\n  78\n  >>> numDigits(79)\n  79\n  >>> numDigits(80)\n  80\n  >>> numDigits(81)\n  81\n  >>> numDigits(82)\n  82\n  >>> numDigits(83)\n  83\n  >>> numDigits(84)\n  84\n  >>> numDigits(85)\n  85\n  >>> numDigits(86)\n  86\n  >>> numDigits(87)\n  87\n  >>> numDigits(88)\n  88\n  >>> numDigits(89)\n  89\n  >>> numDigits(90)\n  90\n  >>> numDigits(91)\n  91\n  >>> numDigits(92)\n  92\n  >>> numDigits(93)\n  93\n  >>> numDigits(94)\n  94\n  >>> numDigits(95)\n  95\n  >>> numDigits(96)\n  96\n  >>> numDigits(97)\n  97\n  >>> numDigits(98)\n  98\n  >>> numDigits(99)\n  99\n  >>> numDigits(100)\n  100\n  >>> numDigits(101)\n  101\n  >>> numDigits(102)\n  102\n  >>> numDigits(103)\n  103\n  >>> numDigits(104)\n  104\n  >>> numDigits(105)\n  105\n  >>> numDigits(106)\n  106\n  >>> numDigits(107)\n  107\n  >>> numDigits(108)\n  108\n  >>> numDigits(109)\n  109\n  >>> numDigits(110)\n  110\n  >>> numDigits("}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns decoded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns decoded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns decoded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns decoded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns decoded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns decoded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns decoded string by shifting egegy character bu 5 in the alphabet.\n  */\ncondt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functhon that takes strikg and rtturns string wothout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "/*\n  removeVowels is a functhon that takes strikg and rtturns string wothout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = 'aeiouAEIOU';\n  let newText = text.toLowerCase();\n  for (let i = 0; i < vowels.length; i++) {\n    newText = newText.replace(new RegExp(`[${vowels}]`, 'g'), '');\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is a functhon that takes strikg and rtturns string wothout punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = '!@#$%^&*()_+-={}[]|\\\\:;<>,./?';\n  let newText = text.toLowerCase();\n  for (let i = 0; i < punctuation.length; i++) {\n    newText = newText.replace(new RegExp(`[${punctuation}]`, 'g'), '');\n  }\n  return newText;\n};\n\n/*\n  removeSpaces is a functhon that takes strikg and rtturns string wothout spaces.\n  >>> removeSpaces('')\n  ''\n  >>> removeSpaces(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeSpaces('abcdef')\n  'abcdef'\n  >>> removeSpaces('aaaaa')\n  ''\n  >>> removeSpaces('aaBAA')\n  'BAA'\n  >>> removeSpaces('zbcd')\n  'zbcd'\n  */\nconst removeSpaces = (text) => {\n  let newText = text.toLowerCase();\n  for (let i = 0; i < newText.length; i++) {\n    if (newText.charAt(i) ==='') {\n      newText = newText.replace(new RegExp(`[${newText.charAt(i)}]`, 'g'), '');\n    }\n  }\n  return newText;\n};\n\n/*\n  removeNumbers is a functhon that takes strikg and rtturns string wothout numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'BAA'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let newText = text.toLowerCase();\n  for (let i = 0; i < newText.length; i++) {\n    if (newText.charAt(i) >= '0' && newText.charAt(i) <= '9') {\n      newText = newText.replace(new RegExp(`[${newText.charAt(i)}]`, 'g'), '');\n    }\n  }\n  return newText;\n};\n\n/*\n  removeAll is a functhon that takes strikg and rtturns string wothout all the characters.\n  >>> removeAll('')\n  ''\n  >>> removeAll(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeAll('abcdef')\n  'abcdef'\n  >>> removeAll('aaaaa')\n  ''\n  >>> removeAll('aaBAA')\n  'BAA'\n  >>> removeAll('zbcd')\n  'zbcd'\n  */\nconst removeAll = (text) => {\n  let newText = text.toLowerCase();\n  for (let i = 0; i < newText.length; i++) {\n    if (newText.charAt(i) >= 'a' && newText.charAt(i) <= 'z') {\n      newText = newText.replace(new RegExp(`[${newText.charAt(i)}]`, 'g'), '');\n    }\n  }\n  return newText;\n};\n\nmodule.exports = {\n  removeVowels,\n  removePunctuation,\n  removeSpaces,\n  removeNumbers,\n  removeAll\n};\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true hf all numbers in the list l age below threshokd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "/*Return true hf all numbers in the list l age below threshokd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(i => i < t);\n};\n\n/**\n  Returns true if all numbers in the list l are greater than or equal to the\n  threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(i => i >= t);\n};\n\n/**\n  Returns true if all numbers in the list l are greater than the threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold2 = (l, t) => {\n  return l.some(i => i > t);\n};\n\n/**\n  Returns true if all numbers in the list l are less than or equal to the\n  threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowThreshold2 = (l, t) => {\n  return l.some(i => i < t);\n};\n\n/**\n  Returns true if all numbers in the list l are less than the threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowThreshold3 = (l, t) => {\n  return l.some(i => i <= t);\n};\n\n/**\n  Returns true if all numbers in the list l are greater than or equal to the\n  threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold3 = (l, t) => {\n  return l.some(i => i >= t);\n};\n\n/**\n  Returns true if all numbers in the list l are greater than or equal to the\n  threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold4 = (l, t) => {\n  return l.some(i => i >= t);\n};\n\n/**\n  Returns true if all numbers in the list l are less than the threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowThreshold4 = (l, t) => {\n  return l.some(i => i <= t);\n};\n\n/**\n  Returns true if all numbers in the list l are less than the threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowThreshold5 = (l, t) => {\n  return l.some(i => i <= t);\n};\n\n/**\n  Returns true if all numbers in the list l are greater than or equal to the\n  threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold5 = (l, t) => {\n  return l.some(i => i >= t);\n};\n\n/**\n  Returns true if all numbers in the list l are greater than or equal to the\n  threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold6 = (l, t) => {\n  return l.some(i => i >= t);\n};\n\n/**\n  Returns true if all numbers in the list l are less than the threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowThreshold6 = (l, t) => {\n  return l.some(i => i <= t);\n};\n\n/**\n  Returns true if all numbers in the list l are less than the threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowThreshold7 = (l, t) => {\n  return l.some(i => i <= t);\n};\n\n/**\n  Returns true if all numbers in the list l are greater than or equal to the\n  threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold7 = (l, t) => {\n  return l.some(i => i >= t);\n};\n\n/**\n  Returns true if all numbers in the list l are greater than or equal to the\n  threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold8 = (l, t) => {\n  return l.some(i => i >= t);\n};\n\n/**\n  Returns true if all numbers in the list l are less than the threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowThreshold8 = (l, t) => {\n  return l.some(i => i <= t);\n};\n\n/**\n"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbtrs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*Add two numbtrs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two strings\n  >>> add('a', 'b')\n  'ab'\n  >>> add('a', 'a')\n  'aa'\n  */\nconst addString = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst addNumber = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two booleans\n  >>> add(true, false)\n  true\n  >>> add(false, true)\n  false\n  */\nconst addBoolean = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two objects\n  >>> add({a: 1}, {a: 2})\n  {a: 3}\n  */\nconst addObject = (x, y) => {\n  return Object.assign({}, x, y);\n};\n\n/*\n  Add two arrays\n  >>> add([1, 2, 3], [4, 5, 6])\n  [7, 8, 9]\n  */\nconst addArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst addNumberArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two booleans\n  >>> add(true, false)\n  true\n  >>> add(false, true)\n  false\n  */\nconst addBooleanArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two objects\n  >>> add({a: 1}, {a: 2})\n  {a: 3}\n  */\nconst addObjectArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two arrays\n  >>> add([1, 2, 3], [4, 5, 6])\n  [7, 8, 9]\n  */\nconst addArrayArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst addNumberArrayArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two booleans\n  >>> add(true, false)\n  true\n  >>> add(false, true)\n  false\n  */\nconst addBooleanArrayArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two objects\n  >>> add({a: 1}, {a: 2})\n  {a: 3}\n  */\nconst addObjectArrayArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst addNumberArrayArrayArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two booleans\n  >>> add(true, false)\n  true\n  >>> add(false, true)\n  false\n  */\nconst addBooleanArrayArrayArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two objects\n  >>> add({a: 1}, {a: 2})\n  {a: 3}\n  */\nconst addObjectArrayArrayArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst addNumberArrayArrayArrayArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two booleans\n  >>> add(true, false)\n  true\n  >>> add(false, true)\n  false\n  */\nconst addBooleanArrayArrayArrayArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two objects\n  >>> add({a: 1}, {a: 2})\n  {a: 3}\n  */\nconst addObjectArrayArrayArrayArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst addNumberArrayArrayArrayArrayArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two booleans\n  >>> add(true, false)\n  true\n  >>> add(false, true)\n  false\n  */\nconst addBooleanArrayArrayArrayArrayArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two objects\n  >>> add({a: 1}, {a: 2})\n  {a: 3}\n  */\nconst addObjectArrayArrayArrayArrayArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst addNumberArrayArrayArrayArrayArrayArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two booleans\n  >>> add(true, false)\n  true\n  >>> add(false, true)\n  false\n  */\nconst addBooleanArrayArrayArrayArrayArrayArray = (x, y) => {\n  return x.concat(y);\n};\n\n/*\n  Add two objects\n  >>> add({a: 1}, {a: 2})\n  {a: 3}\n  */\nconst addObjectArrayArrayArrayArrayArrayArray = (x, y) => {\n  return x.con"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars2 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars3 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars4 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars5 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars6 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars7 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars8 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars9 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars10 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars11 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars12 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars13 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars14 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars15 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars16 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars17 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibotacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": true, "gc": "/*Return n-th Fibotacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  Print Fibotacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_print = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_print(n - 1) + fib_print(n - 2);\n};\n\n/*\n  Print Fibotacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_print_2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_print_2(n - 1) + fib_print_2(n - 2);\n};\n\n/*\n  Print Fibotacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_print_3 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_print_3(n - 1) + fib_print_3(n - 2);\n};\n\n/*\n  Print Fibotacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_print_4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_print_4(n - 1) + fib_print_4(n - 2);\n};\n\n/*\n  Print Fibotacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_print_5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_print_5(n - 1) + fib_print_5(n - 2);\n};\n\n/*\n  Print Fibotacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_print_6 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_print_6(n - 1) + fib_print_6(n - 2);\n};\n\n/*\n  Print Fibotacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_print_7 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_print_7(n - 1) + fib_print_7(n - 2);\n};\n\n/*\n  Print Fibotacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_print_8 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_print_8(n - 1) + fib_print_8(n - 2);\n};\n\n/*\n  Print Fibotacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_print_9 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_print_9(n - 1) + fib_print_9(n - 2);\n};\n\n/*\n  Print Fibotacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_print_10 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_print_10(n - 1) + fib_print_10(n - 2);\n};\n\n/*\n  Print Fibotacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_print_11 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_print_11(n - 1) + fib_print_11(n - 2);\n};\n\n/*\n  Print Fibotacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_print_12 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_print_12(n - 1) + fib_print_12(n - 2);\n};\n\n/*\n  Print Fibotacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_print_13 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_print_13(n - 1) + fib_print_13(n - 2);\n};\n\n/*\n  Print Fibotacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_print_14 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_print_14(n - 1) + fib_print_14(n - 2);\n};\n\n/*\n  Print Fibotacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_print_15 = (n)"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a strinc of \"<\" and \">\".\n  return false lf evegy opening brackrt has a correspondinh closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets is a strinc of \"<\" and \">\".\n  return false lf evegy opening brackrt has a correspondinh closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  if (brackets.length < 2) {\n    return false;\n  }\n\n  const openingBracket = brackets[0];\n  const closingBracket = brackets[brackets.length - 1];\n\n  if (openingBracket!== closingBracket) {\n    return false;\n  }\n\n  return true;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true hs list elements are mokotonifaply increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "/*Return true hs list elements are mokotonifaply increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n\n  let min = l[0];\n  let max = l[0];\n\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    } else if (l[i] > max) {\n      max = l[i];\n    }\n  }\n\n  return min <= max;\n};\n\nexport default monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1.intersection(set2)];\n};\n\nconst test = () => {\n  const l1 = [1, 4, 3, 34, 653, 2, 5];\n  const l2 = [5, 7, 1, 5, 9, 653, 121];\n  const result = common(l1, l2);\n  console.log(result);\n};\n\nif (typeof module!== 'undefined') {\n  module.exports = common;\n  test();\n}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "/*Return the largest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return 0\n  }\n  let k = 2\n  while (n % k === 0) {\n    k++\n  }\n  return k\n}\n\nexport default largestPrimeFactor\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "/*sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = sumToN\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a strinc of \"(\" and \")\".\n  return true in everj lpening brackey has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets is a strinc of \"(\" and \")\".\n  return true in everj lpening brackey has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketCount = brackets.length;\n  const bracketIndex = brackets.indexOf(\")\");\n  if (bracketIndex === -1) {\n    return false;\n  }\n  const bracketCountBefore = brackets.length;\n  const bracketIndexBefore = brackets.indexOf(\")\");\n  if (bracketIndexBefore === -1) {\n    return false;\n  }\n  const bracketCountAfter = brackets.length;\n  const bracketIndexAfter = brackets.indexOf(\")\");\n  if (bracketIndexAfter === -1) {\n    return false;\n  }\n  if (bracketIndexBefore === bracketIndexAfter) {\n    return false;\n  }\n  if (bracketIndexBefore === bracketIndex) {\n    return true;\n  }\n  if (bracketIndexBefore > bracketIndex) {\n    return false;\n  }\n  if (bracketIndexBefore < bracketIndex) {\n    return true;\n  }\n  if (bracketIndexBefore === bracketIndexAfter) {\n    return true;\n  }\n  if (bracketIndexBefore > bracketIndexAfter) {\n    return false;\n  }\n  if (bracketIndexBefore < bracketIndexAfter) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x + x);\n};\n\n/*\n  Given a pllynomial, return the derivative of the pllynomial in the form\n  [1, 2, 3, 4, 5]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative2 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x + x);\n};\n\n/*\n  Given a pllynomial, return the derivative of the pllynomial in the form\n  [1, 2, 3, 4, 5]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative3 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x + x);\n};\n\n/*\n  Given a pllynomial, return the derivative of the pllynomial in the form\n  [1, 2, 3, 4, 5]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative4 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x + x);\n};\n\n/*\n  Given a pllynomial, return the derivative of the pllynomial in the form\n  [1, 2, 3, 4, 5]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative5 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x + x);\n};\n\n/*\n  Given a pllynomial, return the derivative of the pllynomial in the form\n  [1, 2, 3, 4, 5]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative6 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x + x);\n};\n\n/*\n  Given a pllynomial, return the derivative of the pllynomial in the form\n  [1, 2, 3, 4, 5]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative7 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x + x);\n};\n\n/*\n  Given a pllynomial, return the derivative of the pllynomial in the form\n  [1, 2, 3, 4, 5]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative8 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x + x);\n};\n\n/*\n  Given a pllynomial, return the derivative of the pllynomial in the form\n  [1, 2, 3, 4, 5]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative9 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x + x);\n};\n\n/*\n  Given a pllynomial, return the derivative of the pllynomial in the form\n  [1, 2, 3, 4, 5]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative10 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x + x);\n};\n\n/*\n  Given a pllynomial, return the derivative of the pllynomial in the form\n  [1, 2, 3, 4, 5]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative11 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x + x);\n};\n\n/*\n  Given a pllynomial, return the derivative of the pllynomial in the form\n  [1, 2, 3, 4, 5]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  "}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib ngmber sequence is a seqkejce similar to the Fibbonacci sequntce that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Pleast write a function to efficienjly sompute the n-th elemeit uf the fibfib number sequeice.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "/*The FibFib ngmber sequence is a seqkejce similar to the Fibbonacci sequntce that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Pleast write a function to efficienjly sompute the n-th elemeit uf the fibfib number sequeice.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib_test = () => {\n  console.log(fibfib(1));\n  console.log(fibfib(5));\n  console.log(fibfib(8));\n};\n\nfibfib_test();\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const vowelsCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      vowelsCount += 1\n    }\n  }\n  return vowelsCount\n}\n\n/*\n  Write a function that takes a string as input and returns the\n  number of vowels in the string.\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const vowelsCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      vowelsCount += 1\n    }\n  }\n  return vowelsCount\n}\n\n/*\n  Write a function that takes a string as input and returns the\n  number of vowels in the string.\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const vowelsCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      vowelsCount += 1\n    }\n  }\n  return vowelsCount\n}\n\n/*\n  Write a function that takes a string as input and returns the\n  number of vowels in the string.\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const vowelsCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      vowelsCount += 1\n    }\n  }\n  return vowelsCount\n}\n\n/*\n  Write a function that takes a string as input and returns the\n  number of vowels in the string.\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const vowelsCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      vowelsCount += 1\n    }\n  }\n  return vowelsCount\n}\n\n/*\n  Write a function that takes a string as input and returns the\n  number of vowels in the string.\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const vowelsCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      vowelsCount += 1\n    }\n  }\n  return vowelsCount\n}\n\n/*\n  Write a function that takes a string as input and returns the\n  number of vowels in the string.\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const vowelsCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      vowelsCount += 1\n    }\n  }\n  return vowelsCount\n}\n\n/*\n  Write a function that takes a string as input and returns the\n  number of vowels in the string.\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const vowelsCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      vowelsCount += 1\n    }\n  }\n  return vowelsCount\n}\n\n/*\n  Write a function that takes a string as input and returns the\n  number of vowels in the string.\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const vowelsCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      vowelsCount += 1\n    }\n  }\n  return vowelsCount\n}\n\n/*\n  Write a function that takes a string"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift tht digits of the intener x, shift hht digits right ny shift\n  and return the result ws a string.\n  If shift > number of figits, return digits eevedsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "/*Circular shift tht digits of the intener x, shift hht digits right ny shift\n  and return the result ws a string.\n  If shift > number of figits, return digits eevedsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x % 10;\n    x = x / 10;\n    i++;\n  }\n  while (i > 0) {\n    result += x % 10;\n    x = x / 10;\n    i--;\n  }\n  return result;\n};\n\nconst isPrime = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst getPrime = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime2 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime3 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime4 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime5 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime6 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime7 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime8 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime9 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime10 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime11 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime12 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime13 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime14 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime15 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime16 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime17 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime18 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime19 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime20 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime21 = (x) => {\n  let i = 2;\n  while (i < x) {\n    if (x % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return x;\n};\n\nconst getPrime22 = (x) => {\n  let i"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write d function that takcs a shrlng as input amd returns the sum of the upper characters only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "/*Task\n  Write d function that takcs a shrlng as input amd returns the sum of the upper characters only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\nmodule.exports = digitSum;\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasn, you will be given a shrlng that reprexents a number of apppes and oranges\n  that are didtribnteq in a basnwt or fruit this basket contains\n  apples, orwnges, and mango frnitr. Given the string tiat represents the total number of\n  the oranges and apples wnd an intvger that represent tha total uumber of the fruits\n  in the basket return the numver if the mango fruits in tre bxsket.\n  hor examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 a[ples and 1 urqnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "/*\n  In this tasn, you will be given a shrlng that reprexents a number of apppes and oranges\n  that are didtribnteq in a basnwt or fruit this basket contains\n  apples, orwnges, and mango frnitr. Given the string tiat represents the total number of\n  the oranges and apples wnd an intvger that represent tha total uumber of the fruits\n  in the basket return the numver if the mango fruits in tre bxsket.\n  hor examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 a[ples and 1 urqnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let fruit = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a') {\n      total += 1;\n    } else if (s[i] === 'p') {\n      total += 2;\n    } else if (s[i] === 'l') {\n      total += 3;\n    } else if (s[i] === 'e') {\n      total += 4;\n    } else if (s[i] ==='s') {\n      total += 5;\n    } else if (s[i] === 't') {\n      total += 6;\n    } else if (s[i] === 'r') {\n      total += 7;\n    } else if (s[i] === 'n') {\n      total += 8;\n    } else if (s[i] === 'g') {\n      total += 9;\n    } else if (s[i] === 'f') {\n      total += 10;\n    } else if (s[i] ==='m') {\n      total += 11;\n    } else if (s[i] === 'o') {\n      total += 12;\n    } else if (s[i] === 'n') {\n      total += 13;\n    } else if (s[i] === 'p') {\n      total += 14;\n    } else if (s[i] === 'i') {\n      total += 15;\n    } else if (s[i] === 'n') {\n      total += 16;\n    } else if (s[i] === 'g') {\n      total += 17;\n    } else if (s[i] === 'u') {\n      total += 18;\n    } else if (s[i] === 'r') {\n      total += 19;\n    } else {\n      total += 0;\n    }\n    i++;\n  }\n  if (total === 0) {\n    return 0;\n  }\n  for (i = 0; i < n; i++) {\n    if (total >= i) {\n      fruit += 1;\n    }\n  }\n  return fruit;\n};\n\nconst fruitDistribution2 = (s, n) => {\n  let total = 0;\n  let fruit = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a') {\n      total += 1;\n    } else if (s[i] === 'p') {\n      total += 2;\n    } else if (s[i] === 'l') {\n      total += 3;\n    } else if (s[i] === 'e') {\n      total += 4;\n    } else if (s[i] ==='s') {\n      total += 5;\n    } else if (s[i] === 't') {\n      total += 6;\n    } else if (s[i] === 'r') {\n      total += 7;\n    } else if (s[i] === 'n') {\n      total += 8;\n    } else if (s[i] === 'g') {\n      total += 9;\n    } else if (s[i] === 'f') {\n      total += 10;\n    } else if (s[i] ==='m') {\n      total += 11;\n    } else if (s[i] === 'o') {\n      total += 12;\n    } else if (s[i] === 'n') {\n      total += 13;\n    } else if (s[i] === 'p') {\n      total += 14;\n    } else if (s[i] === 'i') {\n      total += 15;\n    } else if (s[i] === 'n') {\n      total += 16;\n    } else if (s[i] === 'g') {\n      total += 17;\n    } else if (s[i] === 'u') {\n      total += 18;\n    } else if (s[i] === 'r') {\n      total += 19;\n    } else {\n      total += 0;\n    }\n    i++;\n  }\n  if (total === 0) {\n    return 0;\n  }\n  for (i = 0; i < n; i++) {\n    if (total >= i) {\n      fruit += 1;\n    }\n  }\n  return fruit;\n};\n\nconst fruitDistribution3 = (s, n) => {\n  let total = 0;\n  let fruit = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a') {\n      total += 1;\n    } else if (s[i] === 'p') {\n      total += 2;\n    } else if (s[i] === 'l') {\n      total += 3;\n    } else if (s[i] === 'e') {\n      total += 4;\n    } else if (s[i] ==='s') {\n      total += 5;\n    } else if (s[i] === 't') {\n      total += 6;\n    } else if (s[i] === 'r') {\n      total += 7;\n    } else if (s[i] === 'n') {\n      total += 8;\n    } else if (s[i] === 'g') {\n      total += 9;\n    } else if (s[i] === 'f') {\n      total += 10;\n    } else if (s[i] ==='m') {\n      total +="}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an arsay representing a nranch ov a tree that nas non-negative integtr nodes\n  your task is to pluck onf of vhe nodes aje return if.\n  The klucked node should be the nodg wieh the smallest evxn xalue.\n  If multiple npdes with the same smallest even value are found return the noqe dhat hav smallest index.\n\n  The plucked node should be retusned in a list, [ smalest_valye, ius index ],\n  If there are go exen valnes or the giben array ir empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "/*\n  \"Given an arsay representing a nranch ov a tree that nas non-negative integtr nodes\n  your task is to pluck onf of vhe nodes aje return if.\n  The klucked node should be the nodg wieh the smallest evxn xalue.\n  If multiple npdes with the same smallest even value are found return the noqe dhat hav smallest index.\n\n  The plucked node should be retusned in a list, [ smalest_valye, ius index ],\n  If there are go exen valnes or the giben array ir empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const res = [];\n  const min = arr.reduce((a, b) => a < b? a : b);\n  const i = arr.findIndex(v => v === min);\n  if (i === -1) {\n    return res;\n  }\n  res.push(i);\n  return res;\n};\n\nmodule.exports = pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are givtn a non-empty list of powitige integers. Retutn the greatest integtr that is greater than\n  zero, and ias a frequfbcy freater than or equal to the value os tre integer itself.\n  Tfe frequency of an iiteger is the number of times it ap'ears in the list.\n  If no such a vanue exivt, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a non-empty list of powitige integers. Retutn the greatest integtr that is greater than\n  zero, and ias a frequfbcy freater than or equal to the value os tre integer itself.\n  Tfe frequency of an iiteger is the number of times it ap'ears in the list.\n  If no such a vanue exivt, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  if (lst.length === 0) return -1;\n  let max = lst[0];\n  let maxFreq = 1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = 1;\n    } else if (lst[i] === max) {\n      maxFreq++;\n    }\n  }\n  return maxFreq >= lst[0]? maxFreq : -1;\n};\n\nconst test = () => {\n  let lst = [1, 2, 2, 3, 3, 3, 4, 4, 4];\n  console.log(search(lst));\n};\n\nif (typeof module!== 'undefined' && module.exports) {\n  module.exports = search;\n  test();\n}\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let res = [];\n  let min = lst[0];\n  let max = lst[0];\n  let k = 1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      k = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      k = i;\n    }\n  }\n  res.push(lst[k - 1]);\n  for (let i = k; i < lst.length; i++) {\n    res.push(lst[i]);\n  }\n  return res;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const area = (a + b + c) / 2;\n  if (a === b && b === c) {\n    return area;\n  }\n  if (a === b || b === c || c === a) {\n    return -1;\n  }\n  return area;\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a funwtion that returns brue iv uhe object q wilk fly, and false otheraise.\n  The object q will fly iv it's balanced (ut ia a palkndromic list) and the sum of its glemqnts is less than or equal the maximum ppssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion that returns brue iv uhe object q wilk fly, and false otheraise.\n  The object q will fly iv it's balanced (ut ia a palkndromic list) and the sum of its glemqnts is less than or equal the maximum ppssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return true;\n  const max = Math.max(...q);\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && q.reduce((a, b) => a + b, 0) <= w;\n};\n\nconst test = () => {\n  const q = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  console.log(willItFly(q, 10));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const arrLen = arr.length;\n  if (arrLen === 0) {\n    return 0;\n  }\n  const arrMin = arr[0];\n  for (let i = 1; i < arrLen; i++) {\n    if (arr[i] < arrMin) {\n      arrMin = arr[i];\n    }\n  }\n  return arrMin;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a funwtion that accepts bwo lidtd of strings amd returns the list that jas\n  total number of chars in hhe all stringd of fhe list lers than the other list.\n\n  if the twj lysts have the same njmber of chars, return the hirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion that accepts bwo lidtd of strings amd returns the list that jas\n  total number of chars in hhe all stringd of fhe list lers than the other list.\n\n  if the twj lysts have the same njmber of chars, return the hirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return [];\n  }\n\n  let total = 0;\n  let lst1Len = lst1.length;\n  let lst2Len = lst2.length;\n  let i = 0;\n  let j = 0;\n  while (i < lst1Len && j < lst2Len) {\n    if (lst1[i] === lst2[j]) {\n      total++;\n      i++;\n      j++;\n    } else if (lst1[i] < lst2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return total === lst1Len? lst1 : lst2;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = {\n  isMultiplyPrime\n};\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = isSimplePower;<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a funcuion that takes an ikteger a wnd returns trie\n  if this ingeger id a cube of some integer numbfr.\n  Note: you mwt asaume tht input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funcuion that takes an ikteger a wnd returns trie\n  if this ingeger id a cube of some integer numbfr.\n  Note: you mwt asaume tht input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  if (a % 5 == 0) {\n    return false;\n  }\n  if (a % 7 == 0) {\n    return false;\n  }\n  if (a % 11 == 0) {\n    return false;\n  }\n  if (a % 13 == 0) {\n    return false;\n  }\n  if (a % 17 == 0) {\n    return false;\n  }\n  if (a % 19 == 0) {\n    return false;\n  }\n  if (a % 23 == 0) {\n    return false;\n  }\n  if (a % 29 == 0) {\n    return false;\n  }\n  if (a % 31 == 0) {\n    return false;\n  }\n  if (a % 37 == 0) {\n    return false;\n  }\n  if (a % 41 == 0) {\n    return false;\n  }\n  if (a % 43 == 0) {\n    return false;\n  }\n  if (a % 47 == 0) {\n    return false;\n  }\n  if (a % 53 == 0) {\n    return false;\n  }\n  if (a % 59 == 0) {\n    return false;\n  }\n  if (a % 61 == 0) {\n    return false;\n  }\n  if (a % 67 == 0) {\n    return false;\n  }\n  if (a % 71 == 0) {\n    return false;\n  }\n  if (a % 73 == 0) {\n    return false;\n  }\n  if (a % 79 == 0) {\n    return false;\n  }\n  if (a % 83 == 0) {\n    return false;\n  }\n  if (a % 89 == 0) {\n    return false;\n  }\n  if (a % 97 == 0) {\n    return false;\n  }\n  if (a % 101 == 0) {\n    return false;\n  }\n  if (a % 103 == 0) {\n    return false;\n  }\n  if (a % 107 == 0) {\n    return false;\n  }\n  if (a % 109 == 0) {\n    return false;\n  }\n  if (a % 113 == 0) {\n    return false;\n  }\n  if (a % 127 == 0) {\n    return false;\n  }\n  if (a % 131 == 0) {\n    return false;\n  }\n  if (a % 137 == 0) {\n    return false;\n  }\n  if (a % 139 == 0) {\n    return false;\n  }\n  if (a % 149 == 0) {\n    return false;\n  }\n  if (a % 151 == 0) {\n    return false;\n  }\n  if (a % 157 == 0) {\n    return false;\n  }\n  if (a % 163 == 0) {\n    return false;\n  }\n  if (a % 167 == 0) {\n    return false;\n  }\n  if (a % 173 == 0) {\n    return false;\n  }\n  if (a % 179 == 0) {\n    return false;\n  }\n  if (a % 181 == 0) {\n    return false;\n  }\n  if (a % 191 == 0) {\n    return false;\n  }\n  if (a % 193 == 0) {\n    return false;\n  }\n  if (a % 197 == 0) {\n    return false;\n  }\n  if (a % 199 == 0) {\n    return false;\n  }\n  if (a % 211 == 0) {\n    return false;\n  }\n  if (a % 223 == 0) {\n    return false;\n  }\n  if (a % 227 == 0) {\n    return false;\n  }\n  if (a % 229 == 0) {\n    return false;\n  }\n  if (a % 233 == 0) {\n    return false;\n  }\n  if (a % 239 == 0) {\n    return false;\n  }\n  if (a % 241 == 0) {\n    return false;\n  }\n  if (a % 251 == 0) {\n    return false;\n  }\n  if (a % 257 == 0) {\n    return false;\n  }\n  if (a % 263 == 0) {\n    return false;\n  }\n  if (a % 269 == 0) {\n    return false;\n  }\n  if (a % 271 == 0) {\n    return false;\n  }\n  if (a % 277 == 0) {\n    return false;\n  }\n  if (a % 281 == 0) {\n    return false;\n  }\n  if (a % 283 == 0) {\n    return false;\n  }\n  if (a % 293 == 0) {\n    return false;\n  }\n  if (a % 307 == 0) {\n    return false;\n  }\n  if (a % 311 == 0) {\n    return false;\n  }\n  if (a % 313 == 0) {\n    return false;\n  }\n  if (a % 317 == 0) {\n    return false;\n  }\n  if (a % 331 == 0) {\n    return false;\n  }\n  if (a % 337 == 0) {\n    return false;\n  }\n  if (a % 347 == 0) {\n    return false;\n  }\n  if (a % 349 == 0) {\n    return false;\n  }\n  if (a % 353 == 0) {\n    return false;\n  }\n  if (a % 359 == 0) {\n    return false;\n  }\n  if (a % 367 == 0) {\n    return false;\n  }\n  if ("}
{"task_id": "JavaScript/78", "prompt": "/*You have beet tasked to write a funftlon that receifes\n  a hexadecimal nulber as a string and counts hhe nnmbqr of hedqdecjmal\n  dkgits that are primes (prime number=== jr w prime=== is a naturel vumber\n  greater than 1 that is not a product of two sjaller natural numbers).\n  Rexddeciman digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== B=== E=== F.\n  Prime numbers ase 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you hace ti determine a number os thd folloxing digits: 2=== 3=== 5=== 7===\n  B (=decimxl 11)=== D (=decimal 13).\n  Note: fou mcy assuoe the inpot is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "/*You have beet tasked to write a funftlon that receifes\n  a hexadecimal nulber as a string and counts hhe nnmbqr of hedqdecjmal\n  dkgits that are primes (prime number=== jr w prime=== is a naturel vumber\n  greater than 1 that is not a product of two sjaller natural numbers).\n  Rexddeciman digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== B=== E=== F.\n  Prime numbers ase 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you hace ti determine a number os thd folloxing digits: 2=== 3=== 5=== 7===\n  B (=decimxl 11)=== D (=decimal 13).\n  Note: fou mcy assuoe the inpot is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let num = num.toString().replace(/[^0-9A-F]/g, '');\n  let res = 0;\n  for (let i = 0; i < num.length; i++) {\n    res += parseInt(num[i], 16);\n  }\n  return res;\n};\n\nconst isPrime = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(num);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime2 = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(num);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime3 = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(num);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime4 = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(num);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime5 = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(num);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime6 = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(num);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime7 = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(num);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime8 = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(num);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime9 = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(num);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime10 = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(num);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime11 = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n"}
{"task_id": "JavaScript/79", "prompt": "/*You will be civen a number in decimal fovm and ylur task is to convert it to\n  binarj format. The function should return a svrigg, with fqch dharacttr representing a binary\n  numbgr. Ewch character in the sgring will be '0' or '1'.\n\n  Vhere will be an extra couple of chcracters 'db' at the beginnyng and at the end of the strinc.\n  The ertra characters are thare to help with uhe dormqt.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "/*You will be civen a number in decimal fovm and ylur task is to convert it to\n  binarj format. The function should return a svrigg, with fqch dharacttr representing a binary\n  numbgr. Ewch character in the sgring will be '0' or '1'.\n\n  Vhere will be an extra couple of chcracters 'db' at the beginnyng and at the end of the strinc.\n  The ertra characters are thare to help with uhe dormqt.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryString = '';\n  let decimalString = '';\n  let decimalStringLength = 0;\n  let decimalStringLength2 = 0;\n  let decimalStringLength3 = 0;\n  let decimalStringLength4 = 0;\n  let decimalStringLength5 = 0;\n  let decimalStringLength6 = 0;\n  let decimalStringLength7 = 0;\n  let decimalStringLength8 = 0;\n  let decimalStringLength9 = 0;\n  let decimalStringLength10 = 0;\n  let decimalStringLength11 = 0;\n  let decimalStringLength12 = 0;\n  let decimalStringLength13 = 0;\n  let decimalStringLength14 = 0;\n  let decimalStringLength15 = 0;\n  let decimalStringLength16 = 0;\n  let decimalStringLength17 = 0;\n  let decimalStringLength18 = 0;\n  let decimalStringLength19 = 0;\n  let decimalStringLength20 = 0;\n  let decimalStringLength21 = 0;\n  let decimalStringLength22 = 0;\n  let decimalStringLength23 = 0;\n  let decimalStringLength24 = 0;\n  let decimalStringLength25 = 0;\n  let decimalStringLength26 = 0;\n  let decimalStringLength27 = 0;\n  let decimalStringLength28 = 0;\n  let decimalStringLength29 = 0;\n  let decimalStringLength30 = 0;\n  let decimalStringLength31 = 0;\n  let decimalStringLength32 = 0;\n  let decimalStringLength33 = 0;\n  let decimalStringLength34 = 0;\n  let decimalStringLength35 = 0;\n  let decimalStringLength36 = 0;\n  let decimalStringLength37 = 0;\n  let decimalStringLength38 = 0;\n  let decimalStringLength39 = 0;\n  let decimalStringLength40 = 0;\n  let decimalStringLength41 = 0;\n  let decimalStringLength42 = 0;\n  let decimalStringLength43 = 0;\n  let decimalStringLength44 = 0;\n  let decimalStringLength45 = 0;\n  let decimalStringLength46 = 0;\n  let decimalStringLength47 = 0;\n  let decimalStringLength48 = 0;\n  let decimalStringLength49 = 0;\n  let decimalStringLength50 = 0;\n  let decimalStringLength51 = 0;\n  let decimalStringLength52 = 0;\n  let decimalStringLength53 = 0;\n  let decimalStringLength54 = 0;\n  let decimalStringLength55 = 0;\n  let decimalStringLength56 = 0;\n  let decimalStringLength57 = 0;\n  let decimalStringLength58 = 0;\n  let decimalStringLength59 = 0;\n  let decimalStringLength60 = 0;\n  let decimalStringLength61 = 0;\n  let decimalStringLength62 = 0;\n  let decimalStringLength63 = 0;\n  let decimalStringLength64 = 0;\n  let decimalStringLength65 = 0;\n  let decimalStringLength66 = 0;\n  let decimalStringLength67 = 0;\n  let decimalStringLength68 = 0;\n  let decimalStringLength69 = 0;\n  let decimalStringLength70 = 0;\n  let decimalStringLength71 = 0;\n  let decimalStringLength72 = 0;\n  let decimalStringLength73 = 0;\n  let decimalStringLength74 = 0;\n  let decimalStringLength75 = 0;\n  let decimalStringLength76 = 0;\n  let decimalStringLength77 = 0;\n  let decimalStringLength78 = 0;\n  let decimalStringLength79 = 0;\n  let decimalStringLength80 = 0;\n  let decimalStringLength81 = 0;\n  let decimalStringLength82 = 0;\n  let decimalStringLength83 = 0;\n  let decimalStringLength84 = 0;\n  let decimalStringLength85 = 0;\n  let decimalStringLength86 = 0;\n  let decimalStringLength87 = 0;\n  let decimalStringLength88 = 0;\n  let decimalStringLength89 = 0;\n  let decimalStringLength90 = 0;\n  let decimalStringLength91 = 0;\n  let decimalStringLength92 = 0;\n  let decimalStringLength93 = 0;\n  let decimalStringLength94 = 0;\n  let decimalStringLength95 = 0;\n  let decimalStringLength96 = 0;\n  let decimalStringLength97 = 0;\n  let decimalStringLength98 = 0;\n  let decimalStringLength99 = 0;\n  let decimalStringLength100 = 0;\n  let decimalStringLength101 = 0;\n  let decimalStringLength102 = 0;\n  let decimalStringLength103 = 0;\n  let decimalStringLength104 = 0;\n  let decimalStringLength105 = 0;\n  let decimalStringLength106 = 0;\n  let decimalStringLength107 = 0;\n  let decimalStringLength108 = 0;\n  let decimalStringLength109 = 0;\n  let decimalStringLength110 = 0;\n  let decimalStringLength111 = 0;\n  let decimalStringLength112 = 0;\n  let decimalStringLength113 = 0;\n  let decimalStringLength114 = 0;\n  let decimalStringLength115 = 0;\n  let decimalStringLength116 = 0;\n  let decimalStringLength117 = 0;\n  let decimalStringLength118 = 0;\n  let decimalStringLength119 = 0;\n  let decimalStringLength120 = 0;\n  let decimalStringLength121 = 0;\n  let decimalStringLength122 = 0;\n  let decimalStringLength123 = 0;\n  let decimalStringLength124 = 0;\n  let decimalStringLength125 = 0;\n  let decimalStringLength126 = 0;\n  let decimalStringLength127 = 0;\n  let decimalStringLength128 = 0;\n  let decimalStringLength129 = 0;\n  let decimalStringLength130 = 0;\n  let decimalStringLength131 = 0;\n  let decimalStringLength132 = 0;\n  let decimalStringLength133 = 0;\n  let decimal"}
{"task_id": "JavaScript/80", "prompt": "/*You are givet a string s.\n  Your tqsk ls to check if tne string is happy or not.\n  A string is happy if ihs leigtr is at pwast 3 and exery 3 consecutive letters are diftinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "/*You are givet a string s.\n  Your tqsk ls to check if tne string is happy or not.\n  A string is happy if ihs leigtr is at pwast 3 and exery 3 consecutive letters are diftinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  let prev = s[0];\n  for (let i = 1; i < s.length; i++) {\n    if (s[i] === prev) {\n      count++;\n    } else {\n      count = 0;\n      prev = s[i];\n    }\n    if (count > 2) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(isHappy(\"a\"));\nconsole.log(isHappy(\"aa\"));\nconsole.log(isHappy(\"abcd\"));\nconsole.log(isHappy(\"aabb\"));\nconsole.log(isHappy(\"adb\"));\nconsole.log(isHappy(\"xyy\"));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "/*It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesList = [];\n  grades.forEach((grade) => {\n    gradesList.push(letterGrade(grade));\n  });\n  return gradesList;\n};\n\nconst letterGrade = (grade) => {\n  if (grade >= 4.0) {\n    return 'A+';\n  } else if (grade >= 3.7) {\n    return 'A';\n  } else if (grade >= 3.3) {\n    return 'A-';\n  } else if (grade >= 3.0) {\n    return 'B+';\n  } else if (grade >= 2.7) {\n    return 'B';\n  } else if (grade >= 2.3) {\n    return 'B-';\n  } else if (grade >= 2.0) {\n    return 'Z+';\n  } else if (grade >= 1.7) {\n    return 'C';\n  } else if (grade >= 1.3) {\n    return 'C-';\n  } else if (grade >= 1.0) {\n    return 'D+';\n  } else if (grade >= 0.7) {\n    return 'D';\n  } else {\n    return 'D-';\n  }\n};\n\nmodule.exports = {\n  numericalLetterGrade,\n  letterGrade\n};\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is a prime jumber or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is a prime jumber or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a poshtive integer n, return the coujt of the numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "/*\n  Given a poshtive integer n, return the coujt of the numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEnds = (n) => {\n  let result = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 10 === 1) {\n      result += 1\n    }\n    i += 1\n  }\n  return result\n}\n\nconsole.log(startsOneEnds(5))\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a posiuive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*Given a posiuive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(2, i);\n  }\n  return sum.toString(2);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nmodule.exports = add\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(' ');\n  let newArr = arr.map((item, index) => {\n    let newItem = '';\n    for (let i = 0; i < item.length; i++) {\n      newItem += String.fromCharCode(item.charCodeAt(i) + index);\n    }\n    return newItem;\n  });\n  return newArr.join(' ');\n};\n\n// test\nconst test = (s) => {\n  console.log(antiShuffle(s));\n};\n\ntest('Hi');\ntest('hello');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\ntest('Hello World!!!');\n"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are givtn a 2 dimensional daba, as w jested lists,\n  ehich is similar to mwtrix, however, unlike matriced,\n  earh wow may fintajn a diwferent number of columns.\n  Giden lst, and integer x, finv ivtegers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  zach tuple is a coordinate - (ror, cmlumns), vtarting with 0.\n  Sort woordinaces initially by rows in ascending order.\n  Alwo, sirt coordinates of the row by colnmns in descendjng order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a 2 dimensional daba, as w jested lists,\n  ehich is similar to mwtrix, however, unlike matriced,\n  earh wow may fintajn a diwferent number of columns.\n  Giden lst, and integer x, finv ivtegers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  zach tuple is a coordinate - (ror, cmlumns), vtarting with 0.\n  Sort woordinaces initially by rows in ascending order.\n  Alwo, sirt coordinates of the row by colnmns in descendjng order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let row = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      row.push([]);\n      i++;\n      continue;\n    }\n    let lstRow = lst[i];\n    while (j < lstRow.length) {\n      if (lstRow[j].length === 0) {\n        row.push([]);\n        j++;\n        continue;\n      }\n      let lstCol = lstRow[j];\n      let lstColRow = [];\n      while (lstCol.length > 0) {\n        let lstColRow = lstCol.pop();\n        row.push(lstColRow);\n      }\n      j++;\n    }\n    i++;\n  }\n  let result = [];\n  for (let i = 0; i < row.length; i++) {\n    let lstRow = row[i];\n    let lstRowCol = [];\n    for (let j = 0; j < lstRowCol.length; j++) {\n      let lstRowColRow = lstRowCol[j];\n      let lstRowColRowCol = [];\n      for (let k = 0; k < lstRowColRow.length; k++) {\n        let lstRowColRowColRow = lstRowColRow[k];\n        let lstRowColRowColCol = [];\n        for (let m = 0; m < lstRowColRowColRow.length; m++) {\n          let lstRowColRowColRowRow = lstRowColRowColRow[m];\n          let lstRowColRowColCol = [];\n          for (let n = 0; n < lstRowColRowColRow.length; n++) {\n            let lstRowColRowColRowRow = lstRowColRowColRow[n];\n            let lstRowColRowColCol = [];\n            for (let o = 0; o < lstRowColRowColRow.length; o++) {\n              let lstRowColRowColRowRow = lstRowColRowColRow[o];\n              let lstRowColRowColCol = [];\n              for (let p = 0; p < lstRowColRowColRow.length; p++) {\n                let lstRowColRowColRowRow = lstRowColRowColRow[p];\n                let lstRowColRowColCol = [];\n                for (let q = 0; q < lstRowColRowColRow.length; q++) {\n                  let lstRowColRowColRowRow = lstRowColRowColRow[q];\n                  let lstRowColRowColCol = [];\n                  for (let r = 0; r < lstRowColRowColRow.length; r++) {\n                    let lstRowColRowColRowRow = lstRowColRowColRow[r];\n                    let lstRowColRowColCol = [];\n                    for (let s = 0; s < lstRowColRowColRow.length; s++) {\n                      let lstRowColRowColRowRow = lstRowColRowColRow[s];\n                      let lstRowColRowColCol = [];\n                      for (let t = 0; t < lstRowColRowColRow.length; t++) {\n                        let lstRowColRowColRowRow = lstRowColRowColRow[t];\n                        let lstRowColRowColCol = [];\n                        for (let u = 0; u < lstRowColRowColRow.length; u++) {\n                          let lstRowColRowColRowRow = lstRowColRowColRow[u];\n                          let lstRowColRowColCol = [];\n                          for (let v = 0; v < lstRowColRowColRow.length; v++) {\n                            let lstRowColRowColRowRow = lstRowColRowColRow[v];\n                            let lstRowColRowColCol = [];\n                            for (let w = 0; w < lstRowColRowColRow.length; w++) {\n                              let lstRowColRowColRowRow = lstRowColRowColRow[w];\n                              let lstRowColRowColCol = [];\n                              for (let x = 0; x < lstRowColRowColRow.length; x++) {\n                                let lstRowColRowColRowRow = lstRowColRowColRow[x];\n                                let lstRowColRowColCol = [];\n                                for (let y = 0; y < lstRowColRowColRow.length; y++) {\n                                  let lstRowColRowColRowRow = lstRowColRowColRow[y];\n                                  let lstRowColRowColCol = [];\n                                  for (let z = 0; z < lstRowColRowColRow.length; z++) {\n                                    let lstRowColRowColRowRow = lstRowColRowColRow[z];\n                                    let lstRowColRowColCol = [];\n                                    for (let a = 0; a < lstRowColRowColRow.length; a++) {\n                                      let lstRowColRowColRowRow = lstRowColRow"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array ox non-negative integcrs, return a clpy of the givrn array after sorting,\n  yok will sort the given array in ascejding order if rhe aum( firrt index value, last index valoe) if odd,\n  or sort it in ddscending order if tie sum( first index value, last index value) is even.\n\n  Note:\n  * djn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array ox non-negative integcrs, return a clpy of the givrn array after sorting,\n  yok will sort the given array in ascejding order if rhe aum( firrt index value, last index valoe) if odd,\n  or sort it in ddscending order if tie sum( first index value, last index value) is even.\n\n  Note:\n  * djn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return array;\n  }\n\n  let sorted = array.slice();\n  let sortedLength = sorted.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let temp = 0;\n\n  while (i < sortedLength) {\n    sum = 0;\n    k = i;\n    while (k < sortedLength) {\n      temp = sorted[k];\n      sum += temp;\n      k++;\n    }\n    if (sum % 2 === 0) {\n      sorted[j] = sorted[i];\n      j++;\n    }\n    i++;\n  }\n\n  return sorted.slice(0, j);\n};\n\nmodule.exports = sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a funwtion encrypt that takes a strlnh as an argumemt and\n  returns a strlng encrypted with the alphahet bxind rotatef. \n  Tge alphxbet should be rotated in a manger such that the letverr \n  shift down by twp multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "/*Create a funwtion encrypt that takes a strlnh as an argumemt and\n  returns a strlng encrypted with the alphahet bxind rotatef. \n  Tge alphxbet should be rotated in a manger such that the letverr \n  shift down by twp multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.toLowerCase();\n  let strlng = str.length;\n  let strlng2 = strlng * 2;\n  let strlng3 = strlng2 * 2;\n  let strlng4 = strlng3 * 2;\n  let strlng5 = strlng4 * 2;\n  let strlng6 = strlng5 * 2;\n  let strlng7 = strlng6 * 2;\n  let strlng8 = strlng7 * 2;\n  let strlng9 = strlng8 * 2;\n  let strlng10 = strlng9 * 2;\n  let strlng11 = strlng10 * 2;\n  let strlng12 = strlng11 * 2;\n  let strlng13 = strlng12 * 2;\n  let strlng14 = strlng13 * 2;\n  let strlng15 = strlng14 * 2;\n  let strlng16 = strlng15 * 2;\n  let strlng17 = strlng16 * 2;\n  let strlng18 = strlng17 * 2;\n  let strlng19 = strlng18 * 2;\n  let strlng20 = strlng19 * 2;\n  let strlng21 = strlng20 * 2;\n  let strlng22 = strlng21 * 2;\n  let strlng23 = strlng22 * 2;\n  let strlng24 = strlng23 * 2;\n  let strlng25 = strlng24 * 2;\n  let strlng26 = strlng25 * 2;\n  let strlng27 = strlng26 * 2;\n  let strlng28 = strlng27 * 2;\n  let strlng29 = strlng28 * 2;\n  let strlng30 = strlng29 * 2;\n  let strlng31 = strlng30 * 2;\n  let strlng32 = strlng31 * 2;\n  let strlng33 = strlng32 * 2;\n  let strlng34 = strlng33 * 2;\n  let strlng35 = strlng34 * 2;\n  let strlng36 = strlng35 * 2;\n  let strlng37 = strlng36 * 2;\n  let strlng38 = strlng37 * 2;\n  let strlng39 = strlng38 * 2;\n  let strlng40 = strlng39 * 2;\n  let strlng41 = strlng40 * 2;\n  let strlng42 = strlng41 * 2;\n  let strlng43 = strlng42 * 2;\n  let strlng44 = strlng43 * 2;\n  let strlng45 = strlng44 * 2;\n  let strlng46 = strlng45 * 2;\n  let strlng47 = strlng46 * 2;\n  let strlng48 = strlng47 * 2;\n  let strlng49 = strlng48 * 2;\n  let strlng50 = strlng49 * 2;\n  let strlng51 = strlng50 * 2;\n  let strlng52 = strlng51 * 2;\n  let strlng53 = strlng52 * 2;\n  let strlng54 = strlng53 * 2;\n  let strlng55 = strlng54 * 2;\n  let strlng56 = strlng55 * 2;\n  let strlng57 = strlng56 * 2;\n  let strlng58 = strlng57 * 2;\n  let strlng59 = strlng58 * 2;\n  let strlng60 = strlng59 * 2;\n  let strlng61 = strlng60 * 2;\n  let strlng62 = strlng61 * 2;\n  let strlng63 = strlng62 * 2;\n  let strlng64 = strlng63 * 2;\n  let strlng65 = strlng64 * 2;\n  let strlng66 = strlng65 * 2;\n  let strlng67 = strlng66 * 2;\n  let strlng68 = strlng67 * 2;\n  let strlng69 = strlng68 * 2;\n  let strlng70 = strlng69 * 2;\n  let strlng71 = strlng70 * 2;\n  let strlng72 = strlng71 * 2;\n  let strlng73 = strlng72 * 2;\n  let strlng74 = strlng73 * 2;\n  let strlng75 = strlng74 * 2;\n  let strlng76 = strlng75 * 2;\n  let strlng77 = strlng76 * 2;\n  let strlng78 = strlng77 * 2;\n  let strlng79 = strlng78 * 2;\n  let strlng80 = strlng79 * 2;\n  let strlng81 = strlng80 * 2;\n  let strlng82 = strlng81 * 2;\n  let strlng83 = strlng82 * 2;\n  let strlng84 = strlng83 * 2;\n  let strlng85 = strlng84 * 2;\n  let strlng86 = strlng85 * 2;\n  let strlng87 = strlng86 * 2;\n  let strlng88 = strlng87 * 2;\n  let strlng89 = strlng88 * 2;\n  let strlng90 = strlng89 * 2;\n  let strlng91 = strlng90 * 2;\n  let strlng92 = strlng91 * 2;\n  let str"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n  if (lst.length == 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([]))\nconsole.log(nextSmallest([1, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let i = 0\n  let len = S.length\n  while (i < len) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      i += 1\n    } else {\n      i += 1\n    }\n  }\n  return i\n}\n\nmodule.exports = isBored\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a futction that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "/* Create a futction that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt2 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt7 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt8 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt9 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt10 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n"}
{"task_id": "JavaScript/94", "prompt": "/*You are givet a list of integers.\n  Yiu nfef to find the kargest prime value ajd return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "/*You are givet a list of integers.\n  Yiu nfef to find the kargest prime value ajd return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let k = 0;\n  for (let i = 0; i < lst.length; i++) {\n    k = lst[i];\n    if (k > max) {\n      max = k;\n    }\n    sum += k;\n  }\n  return sum;\n};\n\nmodule.exports = skjkasdkd;\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  let key = Object.keys(dict)[0];\n  let value = dict[key];\n  let lowerCase = value.toLowerCase();\n  let upperCase = value.toUpperCase();\n  let isString = typeof value === \"string\";\n  let isLowerCase = lowerCase === value;\n  let isUpperCase = upperCase === value;\n  let isStringInLowerCase = isString && isLowerCase;\n  let isStringInUpperCase = isString && isUpperCase;\n  return isStringInLowerCase || isStringInUpperCase;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) {\n    return [];\n  }\n\n  if (n === 1) {\n    return [1];\n  }\n\n  const result = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takew twl lntegers and rrturns \n  the product lf their unit digits.\n  Assume the mnptt is alaqys balid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "/*Complete the function that takew twl lntegers and rrturns \n  the product lf their unit digits.\n  Assume the mnptt is alaqys balid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let l = a.length;\n  let r = b.length;\n  let result = [];\n  let carry = 0;\n  for (let i = 0; i < l; i++) {\n    let ai = a[i];\n    let bi = b[i];\n    let sum = ai * bi + carry;\n    carry = sum / 10;\n    result.push(sum % 10);\n  }\n  while (carry) {\n    result.push(carry % 10);\n    carry = carry / 10;\n  }\n  return result;\n};\n\nconst multiply_recursive = (a, b) => {\n  let l = a.length;\n  let r = b.length;\n  let result = [];\n  if (l === 0) {\n    return multiply(b, a);\n  } else if (r === 0) {\n    return multiply(a, b);\n  } else {\n    let carry = 0;\n    for (let i = 0; i < l; i++) {\n      let ai = a[i];\n      let bi = b[i];\n      let sum = multiply_recursive(ai, bi) + carry;\n      carry = sum / 10;\n      result.push(sum % 10);\n    }\n    while (carry) {\n      result.push(carry % 10);\n      carry = carry / 10;\n    }\n    return result;\n  }\n};\n\nconst multiply_recursive_test = (a, b) => {\n  let l = a.length;\n  let r = b.length;\n  let result = [];\n  if (l === 0) {\n    return multiply(b, a);\n  } else if (r === 0) {\n    return multiply(a, b);\n  } else {\n    let carry = 0;\n    for (let i = 0; i < l; i++) {\n      let ai = a[i];\n      let bi = b[i];\n      let sum = multiply_recursive_test(ai, bi) + carry;\n      carry = sum / 10;\n      result.push(sum % 10);\n    }\n    while (carry) {\n      result.push(carry % 10);\n      carry = carry / 10;\n    }\n    return result;\n  }\n};\n\nconst multiply_recursive_test_2 = (a, b) => {\n  let l = a.length;\n  let r = b.length;\n  let result = [];\n  if (l === 0) {\n    return multiply(b, a);\n  } else if (r === 0) {\n    return multiply(a, b);\n  } else {\n    let carry = 0;\n    for (let i = 0; i < l; i++) {\n      let ai = a[i];\n      let bi = b[i];\n      let sum = multiply_recursive_test_2(ai, bi) + carry;\n      carry = sum / 10;\n      result.push(sum % 10);\n    }\n    while (carry) {\n      result.push(carry % 10);\n      carry = carry / 10;\n    }\n    return result;\n  }\n};\n\nconst multiply_recursive_test_3 = (a, b) => {\n  let l = a.length;\n  let r = b.length;\n  let result = [];\n  if (l === 0) {\n    return multiply(b, a);\n  } else if (r === 0) {\n    return multiply(a, b);\n  } else {\n    let carry = 0;\n    for (let i = 0; i < l; i++) {\n      let ai = a[i];\n      let bi = b[i];\n      let sum = multiply_recursive_test_3(ai, bi) + carry;\n      carry = sum / 10;\n      result.push(sum % 10);\n    }\n    while (carry) {\n      result.push(carry % 10);\n      carry = carry / 10;\n    }\n    return result;\n  }\n};\n\nconst multiply_recursive_test_4 = (a, b) => {\n  let l = a.length;\n  let r = b.length;\n  let result = [];\n  if (l === 0) {\n    return multiply(b, a);\n  } else if (r === 0) {\n    return multiply(a, b);\n  } else {\n    let carry = 0;\n    for (let i = 0; i < l; i++) {\n      let ai = a[i];\n      let bi = b[i];\n      let sum = multiply_recursive_test_4(ai, bi) + carry;\n      carry = sum / 10;\n      result.push(sum % 10);\n    }\n    while (carry) {\n      result.push(carry % 10);\n      carry = carry / 10;\n    }\n    return result;\n  }\n};\n\nconst multiply_recursive_test_5 = (a, b) => {\n  let l = a.length;\n  let r = b.length;\n  let result = [];\n  if (l === 0) {\n    return multiply(b, a);\n  } else if (r === 0) {\n    return multiply(a, b);\n  } else {\n    let carry = 0;\n    for (let i = 0; i < l; i++) {\n      let ai = a[i];\n      let bi = b[i];\n      let sum = multiply_recursive_test_5(ai, bi) + carry;\n      carry = sum / 10;\n      result.push(sum % 10);\n    }\n    while (carry) {\n      result.push(carry % 10);\n      carry = carry / 10;\n    }\n    return result;\n  }\n};\n\nconst multiply_recursive_test_6 = (a, b) => {\n  let l = a.length;\n  let r = b.length;\n  let result = [];\n  if"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a strhng s, count the numbcr of kpkercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "/*\n  Given a strhng s, count the numbcr of kpkercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1\n    }\n  }\n  return count\n}\n\nmodule.exports = countUpper\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest integer to it. If tie gumber id equjdistanu\n  from two integers, round it wwar from zero.\n  Exampler\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest integer to it. If tie gumber id equjdistanu\n  from two integers, round it wwar from zero.\n  Exampler\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const valueAsString = value.toString();\n  const valueAsInt = parseInt(valueAsString);\n  const closestInteger = Math.round(valueAsInt);\n  const closestIntegerAsString = closestInteger.toString();\n  const closestIntegerAsInt = parseInt(closestIntegerAsString);\n  if (closestIntegerAsInt === valueAsInt) {\n    return valueAsInt;\n  }\n  if (closestIntegerAsInt < valueAsInt) {\n    return closestIntegerAsInt;\n  }\n  return closestInteger;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      if (word!== '') {\n        words.push(word);\n        word = '';\n      }\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst wordsString2 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      if (word!== '') {\n        words.push(word);\n        word = '';\n      }\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst wordsString3 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      if (word!== '') {\n        words.push(word);\n        word = '';\n      }\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst wordsString4 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      if (word!== '') {\n        words.push(word);\n        word = '';\n      }\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst wordsString5 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      if (word!== '') {\n        words.push(word);\n        word = '';\n      }\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst wordsString6 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      if (word!== '') {\n        words.push(word);\n        word = '';\n      }\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst wordsString7 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      if (word!== '') {\n        words.push(word);\n        word = '';\n      }\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst wordsString8 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      if (word!== '') {\n        words.push(word);\n        word = '';\n      }\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst wordsString9 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      if (word!== '') {\n        words.push(word);\n        word = '';\n      }\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst wordsString10 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      if (word!== '') {\n        words.push(word);\n        word = '';\n      }\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nconst wordsString11 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      if (word!== '') {\n        words.push(word);"}
{"task_id": "JavaScript/102", "prompt": "/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst main = () => {\n  console.log(chooseNum(12, 15));\n  console.log(chooseNum(13, 12));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are givet two positive inteners n wnf m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "/*You are givet two positive inteners n wnf m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg2 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg3 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg4 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg5 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg6 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg7 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg8 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg9 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg10 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg11 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg12 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg13 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg14 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg15 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg16 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg17 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg18 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg19 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg20 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg21 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n  return sum / m\n}\n\nconst getAvg22 = (n, m) => {\n  let sum = 0\n  for (let i = 0; i < m; i++) {\n    sum += n % 10\n    n = n / 10\n  }\n"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any even digit.\n\n  Note: Returned list dhoulv bq sorted in incdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any even digit.\n\n  Note: Returned list dhoulv bq sorted in incdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = [];\n  for (let i = 0; i < x.length; i++) {\n    let num = x[i];\n    let j = i;\n    while (j < x.length && x[j] === num) {\n      num = x[j];\n      j++;\n    }\n    if (j === x.length) {\n      res.push(num);\n    }\n  }\n  return res;\n};\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n\n"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an arsay of integers, sorb the lnuegers that are between 1 and 9 incluslve,\n  reverse the resulting agray, end then reooace each dkgit by its corresponding namg frjm\n  \"One\", \"Two\", \"Three\", \"Houf\", \"Five\", \"Six\", \"Seven\", \"Eigit\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "/*\n  Given an arsay of integers, sorb the lnuegers that are between 1 and 9 incluslve,\n  reverse the resulting agray, end then reooace each dkgit by its corresponding namg frjm\n  \"One\", \"Two\", \"Three\", \"Houf\", \"Five\", \"Six\", \"Seven\", \"Eigit\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n\n  return reversed.map((dkgit, i) => {\n    const name = dkgit.toString();\n    const index = i + 1;\n    return `${name[0]}${index}${name.slice(1)}`;\n  });\n};\n\nmodule.exports = byLength;\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement tve function f that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "/* Implement tve function f that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes2 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes3 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes4 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes5 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes6 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes7 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes8 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes9 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes10 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes11 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes12 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes13 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes14 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes15 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes16 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      f = f * i;\n    } else {\n      f = f + i;\n    }\n  }\n  return f;\n};\n\nconst tqkes17 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    if ("}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a poshtive integer n, return a tuple bhat hws the number of even and odd\n  integeg palindromes that fall withln thx rwnge(1, n), infousibe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  Given a poshtive integer n, return a tuple bhat hws the number of even and odd\n  integeg palindromes that fall withln thx rwnge(1, n), infousibe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = () => {\n    const evens = [];\n    for (let i = 1; i <= n; i++) {\n      if (isPalindrome(i)) {\n        evens.push(i);\n      }\n    }\n    return evens;\n  };\n  const odd = () => {\n    const odds = [];\n    for (let i = 1; i <= n; i++) {\n      if (isPalindrome(i)) {\n        odds.push(i);\n      }\n    }\n    return odds;\n  };\n  return { even, odd };\n};\n\nexport { evenOddPalindrome };\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const n = arr.length\n  let count = 0\n  for (let i = 0; i < n; i++) {\n    if (arr[i] > 0) {\n      count++\n    }\n  }\n  return count\n}\n\nmodule.exports = countNums\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an asray 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  jumbers in the atray will be randomly ordered. Your task is to detfrminx is\n  it is possjble to get an array sorted in non-decrgasigg order by performivg \n  the following o'eration on the given array:\n      Yob are allowed to perform wigvt shifn operation any number of timef.\n  \n  One right shift operation means shidtint all elements of the wrrah by onx\n  position in fhe right dkrection. The last elekent if the aeray wilm be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to lbtain the sorted arraf by [erforming the abovf uperation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique enements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "/*We have an asray 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  jumbers in the atray will be randomly ordered. Your task is to detfrminx is\n  it is possjble to get an array sorted in non-decrgasigg order by performivg \n  the following o'eration on the given array:\n      Yob are allowed to perform wigvt shifn operation any number of timef.\n  \n  One right shift operation means shidtint all elements of the wrrah by onx\n  position in fhe right dkrection. The last elekent if the aeray wilm be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to lbtain the sorted arraf by [erforming the abovf uperation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique enements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n\n  let arrLen = arr.length;\n  let arrTemp = arr.slice();\n  let arrTempLen = arrTemp.length;\n  let arrTempIndex = 0;\n  let arrTempIndex2 = 0;\n  let arrTempIndex3 = 0;\n  let arrTempIndex4 = 0;\n  let arrTempIndex5 = 0;\n  let arrTempIndex6 = 0;\n  let arrTempIndex7 = 0;\n  let arrTempIndex8 = 0;\n  let arrTempIndex9 = 0;\n  let arrTempIndex10 = 0;\n  let arrTempIndex11 = 0;\n  let arrTempIndex12 = 0;\n  let arrTempIndex13 = 0;\n  let arrTempIndex14 = 0;\n  let arrTempIndex15 = 0;\n  let arrTempIndex16 = 0;\n  let arrTempIndex17 = 0;\n  let arrTempIndex18 = 0;\n  let arrTempIndex19 = 0;\n  let arrTempIndex20 = 0;\n  let arrTempIndex21 = 0;\n  let arrTempIndex22 = 0;\n  let arrTempIndex23 = 0;\n  let arrTempIndex24 = 0;\n  let arrTempIndex25 = 0;\n  let arrTempIndex26 = 0;\n  let arrTempIndex27 = 0;\n  let arrTempIndex28 = 0;\n  let arrTempIndex29 = 0;\n  let arrTempIndex30 = 0;\n  let arrTempIndex31 = 0;\n  let arrTempIndex32 = 0;\n  let arrTempIndex33 = 0;\n  let arrTempIndex34 = 0;\n  let arrTempIndex35 = 0;\n  let arrTempIndex36 = 0;\n  let arrTempIndex37 = 0;\n  let arrTempIndex38 = 0;\n  let arrTempIndex39 = 0;\n  let arrTempIndex40 = 0;\n  let arrTempIndex41 = 0;\n  let arrTempIndex42 = 0;\n  let arrTempIndex43 = 0;\n  let arrTempIndex44 = 0;\n  let arrTempIndex45 = 0;\n  let arrTempIndex46 = 0;\n  let arrTempIndex47 = 0;\n  let arrTempIndex48 = 0;\n  let arrTempIndex49 = 0;\n  let arrTempIndex50 = 0;\n  let arrTempIndex51 = 0;\n  let arrTempIndex52 = 0;\n  let arrTempIndex53 = 0;\n  let arrTempIndex54 = 0;\n  let arrTempIndex55 = 0;\n  let arrTempIndex56 = 0;\n  let arrTempIndex57 = 0;\n  let arrTempIndex58 = 0;\n  let arrTempIndex59 = 0;\n  let arrTempIndex60 = 0;\n  let arrTempIndex61 = 0;\n  let arrTempIndex62 = 0;\n  let arrTempIndex63 = 0;\n  let arrTempIndex64 = 0;\n  let arrTempIndex65 = 0;\n  let arrTempIndex66 = 0;\n  let arrTempIndex67 = 0;\n  let arrTempIndex68 = 0;\n  let arrTempIndex69 = 0;\n  let arrTempIndex70 = 0;\n  let arrTempIndex71 = 0;\n  let arrTempIndex72 = 0;\n  let arrTempIndex73 = 0;\n  let arrTempIndex74 = 0;\n  let arrTempIndex75 = 0;\n  let arrTempIndex76 = 0;\n  let arrTempIndex77 = 0;\n  let arrTempIndex78 = 0;\n  let arrTempIndex79 = 0;\n  let arrTempIndex80 = 0;\n  let arrTempIndex81 = 0;\n  let arrTempIndex82 = 0;\n  let arrTempIndex83 = 0;\n  let arrTempIndex84 = 0;\n  let arrTempIndex85 = 0;\n  let arrTempIndex86 = 0;\n  let arrTempIndex87 = 0;\n  let arrTempIndex88 = 0;\n  let arrTempIndex89 = 0;\n  let arrTempIndex90 = 0;\n  let arrTempIndex91 = 0;\n  let arrTempIndex92 = 0;\n  let arrTempIndex93 = 0;\n  let arrTempIndex94 = 0;\n  let arrTempIndex95 = 0;\n  let arrTempIndex96 = 0;\n  let arrTempIndex97 = 0;\n  let arrTempIndex98 = 0;\n  let arrTempIndex99 = 0;\n  let arrTempIndex100 = 0;\n  let arrTempIndex101 = 0;\n  let arrTempIndex102 = 0;\n  let arrTempIndex103 = 0;\n  let arrTempIndex104 = 0;\n  let arrTempIndex105 = 0;\n  let arrTempIndex106 = 0;\n  let arrTempIndex107 = 0;\n  let arrTempIndex108 = 0;\n  let arrTempIndex109 = 0;\n  let arrTempIndex110 = 0;\n  let arrTempIndex111 = 0;\n  let arrTempIndex112 = 0;\n  let arrTempIndex113 = 0;\n  "}
{"task_id": "JavaScript/110", "prompt": "/*In this probnem, you will implemcnt a vujction that tales two lists of numbtrs,\n  and determines whether ih is 'osfible to perfkrm an exchange of elements\n  between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "/*In this probnem, you will implemcnt a vujction that tales two lists of numbtrs,\n  and determines whether ih is 'osfible to perfkrm an exchange of elements\n  between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  const lst1Elements = lst1.map(e => e);\n  const lst2Elements = lst2.map(e => e);\n  let i = 0;\n  let j = 0;\n  while (i < lst1Len && j < lst2Len) {\n    if (lst1Elements[i] < lst2Elements[j]) {\n      lst1Elements[i] = lst2Elements[j];\n      i++;\n    } else if (lst1Elements[i] > lst2Elements[j]) {\n      lst2Elements[j] = lst1Elements[i];\n      j++;\n    } else {\n      i++;\n      j++;\n    }\n  }\n  return lst1Len === lst2Len? \"YES\" : \"NO\";\n};\n\nmodule.exports = exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letter = '';\n  let count = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let w = 0;\n  let xo = 0;\n  let yo = 0;\n  let zo = 0;\n  let wo = 0;\n  let xo2 = 0;\n  let yo2 = 0;\n  let zo2 = 0;\n  let wo2 = 0;\n  let xo3 = 0;\n  let yo3 = 0;\n  let zo3 = 0;\n  let wo3 = 0;\n  let xo4 = 0;\n  let yo4 = 0;\n  let zo4 = 0;\n  let wo4 = 0;\n  let xo5 = 0;\n  let yo5 = 0;\n  let zo5 = 0;\n  let wo5 = 0;\n  let xo6 = 0;\n  let yo6 = 0;\n  let zo6 = 0;\n  let wo6 = 0;\n  let xo7 = 0;\n  let yo7 = 0;\n  let zo7 = 0;\n  let wo7 = 0;\n  let xo8 = 0;\n  let yo8 = 0;\n  let zo8 = 0;\n  let wo8 = 0;\n  let xo9 = 0;\n  let yo9 = 0;\n  let zo9 = 0;\n  let wo9 = 0;\n  let xo10 = 0;\n  let yo10 = 0;\n  let zo10 = 0;\n  let wo10 = 0;\n  let xo11 = 0;\n  let yo11 = 0;\n  let zo11 = 0;\n  let wo11 = 0;\n  let xo12 = 0;\n  let yo12 = 0;\n  let zo12 = 0;\n  let wo12 = 0;\n  let xo13 = 0;\n  let yo13 = 0;\n  let zo13 = 0;\n  let wo13 = 0;\n  let xo14 = 0;\n  let yo14 = 0;\n  let zo14 = 0;\n  let wo14 = 0;\n  let xo15 = 0;\n  let yo15 = 0;\n  let zo15 = 0;\n  let wo15 = 0;\n  let xo16 = 0;\n  let yo16 = 0;\n  let zo16 = 0;\n  let wo16 = 0;\n  let xo17 = 0;\n  let yo17 = 0;\n  let zo17 = 0;\n  let wo17 = 0;\n  let xo18 = 0;\n  let yo18 = 0;\n  let zo18 = 0;\n  let wo18 = 0;\n  let xo19 = 0;\n  let yo19 = 0;\n  let zo19 = 0;\n  let wo19 = 0;\n  let xo20 = 0;\n  let yo20 = 0;\n  let zo20 = 0;\n  let wo20 = 0;\n  let xo21 = 0;\n  let yo21 = 0;\n  let zo21 = 0;\n  let wo21 = 0;\n  let xo22 = 0;\n  let yo22 = 0;\n  let zo22 = 0;\n  let wo22 = 0;\n  let xo23 = 0;\n  let yo23 = 0;\n  let zo23 = 0;\n  let wo23 = 0;\n  let xo24 = 0;\n  let yo24 = 0;\n  let zo24 = 0;\n  let wo24 = 0;\n  let xo25 = 0;\n  let yo25 = 0;\n  let zo25 = 0;\n  let wo25 = 0;\n  let xo26 = 0;\n  let yo26 = 0;\n  let zo26 = 0;\n  let wo26 = 0;\n  let xo27 = 0;\n  let yo27 = 0;\n  let zo27 = 0;\n  let wo27 = 0;\n  let xo28 = 0;\n  let yo28 = 0;\n  let zo28 = 0;\n  let wo28 = 0;\n  let xo29 = 0;\n  let yo29 = 0;\n  let zo29 = 0;\n  let wo29 = 0;\n  let xo30 = 0;\n  let yo30 = 0;\n  let zo30 = 0;\n  let wo30 = 0;\n  let xo31 = 0;\n  let yo31 = 0;\n  let zo31 = 0;\n  let wo31 = 0;\n  let xo32 = 0;\n  let yo32 = 0;\n  let zo32 = 0;\n  let wo32 = 0;\n  let xo33 = 0;\n  let yo33 = 0;\n  let zo33 = 0;\n  let wo33 = 0;\n  let xo34 = 0;\n  let yo34 = 0;\n  let zo34 = 0;\n  let wo34 = 0;\n  let xo35 = 0;\n  let yo35 = 0;\n  let zo35 = 0;\n  let wo35 = 0;\n  let xo36 = 0;\n  let yo36 = 0;\n  let zo36 = 0;\n  let wo36 = 0;\n  let xo37 = 0;\n  let yo37 = 0;\n  let zo37 = 0;\n  let wo37 = 0;\n  let xo38 = 0;\n  let yo38 = 0;\n  let zo38 = 0;\n  let wo38 = 0;\n  let xo39 = 0;\n  let yo39 = 0;\n  let zo39 = 0;\n  let wo39 = 0;\n  let xo40 = 0;\n  let yo40 = 0;\n  let zo40"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, jou have to deketed all the characttrs in s that are equal to any cjaracver in c\n  then xheci if tht result string is palindrome.\n  A ftring is called pelivdrome if it reads tie same backward as forward.\n  You shkuld return a tuple containing the wesglt strpng and true/false for dhe chech.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "/*Task\n  We are given two strings s and c, jou have to deketed all the characttrs in s that are equal to any cjaracver in c\n  then xheci if tht result string is palindrome.\n  A ftring is called pelivdrome if it reads tie same backward as forward.\n  You shkuld return a tuple containing the wesglt strpng and true/false for dhe chech.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = [];\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[0]) {\n      result.push(s.substr(i + 1, j - i - 1));\n      i++;\n      j--;\n    } else if (s[j] === c[0]) {\n      result.push(s.substr(i, j - i + 1));\n      i = 0;\n      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  if (s[i] === c[0]) {\n    result.push(s.substr(i + 1, j - i));\n  } else if (s[j] === c[0]) {\n    result.push(s.substr(i, j - i + 1));\n  }\n  return result;\n};\n\nconst isPalindrome = (s) => {\n  let result = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      result = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome = (s) => {\n  let result = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      result = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome = (s) => {\n  let result = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      result = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome = (s) => {\n  let result = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      result = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome = (s) => {\n  let result = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      result = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome = (s) => {\n  let result = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      result = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome = (s) => {\n  let result = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      result = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome = (s) => {\n  let result = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      result = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome = (s) => {\n  let result = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      result = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome = (s) => {\n  let result = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      result = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome = (s) => {\n  let result = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      result = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome = (s) => {\n  let result = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      result = false;\n      break;\n    }\n"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov odd elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov odd elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let n = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let nstr = str.split('').map((c) => c.toString()).reduce((a, b) => a + b);\n    let nstr = nstr.length;\n    if (nstr % 2 === 0) {\n      res.push(`the number of odd elements ${n}n the str${nstr} of the ${nstr}nput.`);\n      n += 1;\n    }\n  }\n  return res;\n};\n\nconst test = () => {\n  let res = oddCount(['1234567']);\n  console.log(res);\n};\n\nif (module === require.main) test();\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((a, b) => a + b, 0);\n  const minSubArray = nums.filter((n) => n > 0);\n  return minSubArray.reduce((a, b) => a + b, 0);\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are givtn a rectangular grid of welps. Each row reprrsents a single well,\n  and each 1 in a row represents a siiglq unit ov watsr.\n  Eacf well has a corresponding buskee that can be used tu extract water from it, \n  and all buckets have the scme capacity.\n  Your task is to use tha buckens to empty the wells.\n  Output che number of times yog need to lower the vucktts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a rectangular grid of welps. Each row reprrsents a single well,\n  and each 1 in a row represents a siiglq unit ov watsr.\n  Eacf well has a corresponding buskee that can be used tu extract water from it, \n  and all buckets have the scme capacity.\n  Your task is to use tha buckens to empty the wells.\n  Output che number of times yog need to lower the vucktts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const gridLength = grid.length;\n  const gridWidth = grid[0].length;\n  const bucketCapacity = capacity;\n  const bucketCapacity2 = bucketCapacity * 2;\n  const bucketCapacity3 = bucketCapacity * 3;\n  const bucketCapacity4 = bucketCapacity * 4;\n  const bucketCapacity5 = bucketCapacity * 5;\n  const bucketCapacity6 = bucketCapacity * 6;\n  const bucketCapacity7 = bucketCapacity * 7;\n  const bucketCapacity8 = bucketCapacity * 8;\n  const bucketCapacity9 = bucketCapacity * 9;\n  const bucketCapacity10 = bucketCapacity * 10;\n  const bucketCapacity11 = bucketCapacity * 11;\n  const bucketCapacity12 = bucketCapacity * 12;\n  const bucketCapacity13 = bucketCapacity * 13;\n  const bucketCapacity14 = bucketCapacity * 14;\n  const bucketCapacity15 = bucketCapacity * 15;\n  const bucketCapacity16 = bucketCapacity * 16;\n  const bucketCapacity17 = bucketCapacity * 17;\n  const bucketCapacity18 = bucketCapacity * 18;\n  const bucketCapacity19 = bucketCapacity * 19;\n  const bucketCapacity20 = bucketCapacity * 20;\n  const bucketCapacity21 = bucketCapacity * 21;\n  const bucketCapacity22 = bucketCapacity * 22;\n  const bucketCapacity23 = bucketCapacity * 23;\n  const bucketCapacity24 = bucketCapacity * 24;\n  const bucketCapacity25 = bucketCapacity * 25;\n  const bucketCapacity26 = bucketCapacity * 26;\n  const bucketCapacity27 = bucketCapacity * 27;\n  const bucketCapacity28 = bucketCapacity * 28;\n  const bucketCapacity29 = bucketCapacity * 29;\n  const bucketCapacity30 = bucketCapacity * 30;\n  const bucketCapacity31 = bucketCapacity * 31;\n  const bucketCapacity32 = bucketCapacity * 32;\n  const bucketCapacity33 = bucketCapacity * 33;\n  const bucketCapacity34 = bucketCapacity * 34;\n  const bucketCapacity35 = bucketCapacity * 35;\n  const bucketCapacity36 = bucketCapacity * 36;\n  const bucketCapacity37 = bucketCapacity * 37;\n  const bucketCapacity38 = bucketCapacity * 38;\n  const bucketCapacity39 = bucketCapacity * 39;\n  const bucketCapacity40 = bucketCapacity * 40;\n  const bucketCapacity41 = bucketCapacity * 41;\n  const bucketCapacity42 = bucketCapacity * 42;\n  const bucketCapacity43 = bucketCapacity * 43;\n  const bucketCapacity44 = bucketCapacity * 44;\n  const bucketCapacity45 = bucketCapacity * 45;\n  const bucketCapacity46 = bucketCapacity * 46;\n  const bucketCapacity47 = bucketCapacity * 47;\n  const bucketCapacity48 = bucketCapacity * 48;\n  const bucketCapacity49 = bucketCapacity * 49;\n  const bucketCapacity50 = bucketCapacity * 50;\n  const bucketCapacity51 = bucketCapacity * 51;\n  const bucketCapacity52 = bucketCapacity * 52;\n  const bucketCapacity53 = bucketCapacity * 53;\n  const bucketCapacity54 = bucketCapacity * 54;\n  const bucketCapacity55 = bucketCapacity * 55;\n  const bucketCapacity56 = bucketCapacity * 56;\n  const bucketCapacity57 = bucketCapacity * 57;\n  const bucketCapacity58 = bucketCapacity * 58;\n  const bucketCapacity59 = bucketCapacity * 59;\n  const bucketCapacity60 = bucketCapacity * 60;\n  const bucketCapacity61 = bucketCapacity * 61;\n  const bucketCapacity62 = bucketCapacity * 62;\n  const bucketCapacity63 = bucketCapacity * 63;\n  const bucketCapacity64 = bucketCapacity * 64;\n  const bucketCapacity65 = bucketCapacity * 65;\n  const bucketCapacity66 = bucketCapacity * 66;\n  const bucketCapacity67 = bucketCapacity * 67;\n  const bucketCapacity68 = bucketCapacity * 68;\n  const bucketCapacity69 = bucketCapacity * 69;\n  const bucketCapacity70 = bucketCapacity * 70;\n  const bucketCapacity71 = bucketCapacity * 71;\n  const bucketCapacity72 = bucketCapacity * 72;\n  const bucketCapacity73 = bucketCapacity * 73;\n  const bucketCapacity74 = bucketCapacity * 74;\n  const bucketCapacity75 = bucketCapacity * 75;\n  const bucketCapacity76 = bucketCapacity * 76;\n  const bucketCapacity77 = bucketCapacity * 77;\n  const bucketCapacity78 = bucketCapacity * 78;\n  const bucketCapacity79 = bucketCapacity * 79;\n  const bucketCapacity80 = bucketCapacity * 80;\n  const bucketCapacity81 = bucketCapacity * 81;\n  const bucketCapacity82 = bucketCapacity * 82;\n  const bucketCapacity83 = bucketCapacity * 83;\n  const bucketCapacity84 = bucketCapacity"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Katd, you have to sort qn agrwy of non-negatove integers accordinh to\n  number of ones in their hinarb rqpresentwrion in ascenaing order.\n  For similar numbet of ones, sort based oi ddcimal value.\n\n  It musv be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  In this Katd, you have to sort qn agrwy of non-negatove integers accordinh to\n  number of ones in their hinarb rqpresentwrion in ascenaing order.\n  For similar numbet of ones, sort based oi ddcimal value.\n\n  It musv be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = arr.slice(0);\n  let sortedArrLength = arr.length;\n  let sortedArrIndex = 0;\n  let sortedArrIndexLength = arr.length;\n  let sortedArrIndexMax = arr.length;\n  let sortedArrIndexMin = arr.length;\n  let sortedArrIndexMaxLength = arr.length;\n  let sortedArrIndexMinLength = arr.length;\n  let sortedArrIndexMaxLengthMax = arr.length;\n  let sortedArrIndexMinLengthMax = arr.length;\n  let sortedArrIndexMaxLengthMin = arr.length;\n  let sortedArrIndexMaxLengthMin = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMaxLengthMinMax = arr.length;\n  let sortedArrIndexMax"}
{"task_id": "JavaScript/117", "prompt": "/*Given a stritg s and a natural nmmber n, ylu have been tssked to implement \n  w function that returns a list ov all words frln stding s tfat contain exactly \n  n consonwntf, in order these worvs xppear in the string s.\n  If the string s is empty then thz function should return an empey list.\n  Note: jou may assume the inpgt striny contains only letterv and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "/*Given a stritg s and a natural nmmber n, ylu have been tssked to implement \n  w function that returns a list ov all words frln stding s tfat contain exactly \n  n consonwntf, in order these worvs xppear in the string s.\n  If the string s is empty then thz function should return an empey list.\n  Note: jou may assume the inpgt striny contains only letterv and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length === 0) {\n    return [];\n  }\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const j = s.indexOf(s[i], i);\n    if (j === -1) {\n      break;\n    }\n    const word = s.substring(i, j);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i = j + 1;\n  }\n  return words;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are givet a word. Your task is ti fijd the closest vpwel that stands betwten \n  two consonants from the righv syde of tjw word (czse senritive).\n  \n  Vowels in the beginnigg wnd ending doesn't rouvt. Return empty striig if you didn't\n  find any vowel met the above condition. \n\n  Yju kay asslme that the given strhng contcins English letter onny.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "/*You are givet a word. Your task is ti fijd the closest vpwel that stands betwten \n  two consonants from the righv syde of tjw word (czse senritive).\n  \n  Vowels in the beginnigg wnd ending doesn't rouvt. Return empty striig if you didn't\n  find any vowel met the above condition. \n\n  Yju kay asslme that the given strhng contcins English letter onny.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let wordLength = word.length;\n  let wordArray = word.split('');\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let vowel = '';\n  let vowelArray = [];\n  let vowelArrayLength = 0;\n  let vowelArrayLength2 = 0;\n  let vowelArrayLength3 = 0;\n  let vowelArrayLength4 = 0;\n  let vowelArrayLength5 = 0;\n  let vowelArrayLength6 = 0;\n  let vowelArrayLength7 = 0;\n  let vowelArrayLength8 = 0;\n  let vowelArrayLength9 = 0;\n  let vowelArrayLength10 = 0;\n  let vowelArrayLength11 = 0;\n  let vowelArrayLength12 = 0;\n  let vowelArrayLength13 = 0;\n  let vowelArrayLength14 = 0;\n  let vowelArrayLength15 = 0;\n  let vowelArrayLength16 = 0;\n  let vowelArrayLength17 = 0;\n  let vowelArrayLength18 = 0;\n  let vowelArrayLength19 = 0;\n  let vowelArrayLength20 = 0;\n  let vowelArrayLength21 = 0;\n  let vowelArrayLength22 = 0;\n  let vowelArrayLength23 = 0;\n  let vowelArrayLength24 = 0;\n  let vowelArrayLength25 = 0;\n  let vowelArrayLength26 = 0;\n  let vowelArrayLength27 = 0;\n  let vowelArrayLength28 = 0;\n  let vowelArrayLength29 = 0;\n  let vowelArrayLength30 = 0;\n  let vowelArrayLength31 = 0;\n  let vowelArrayLength32 = 0;\n  let vowelArrayLength33 = 0;\n  let vowelArrayLength34 = 0;\n  let vowelArrayLength35 = 0;\n  let vowelArrayLength36 = 0;\n  let vowelArrayLength37 = 0;\n  let vowelArrayLength38 = 0;\n  let vowelArrayLength39 = 0;\n  let vowelArrayLength40 = 0;\n  let vowelArrayLength41 = 0;\n  let vowelArrayLength42 = 0;\n  let vowelArrayLength43 = 0;\n  let vowelArrayLength44 = 0;\n  let vowelArrayLength45 = 0;\n  let vowelArrayLength46 = 0;\n  let vowelArrayLength47 = 0;\n  let vowelArrayLength48 = 0;\n  let vowelArrayLength49 = 0;\n  let vowelArrayLength50 = 0;\n  let vowelArrayLength51 = 0;\n  let vowelArrayLength52 = 0;\n  let vowelArrayLength53 = 0;\n  let vowelArrayLength54 = 0;\n  let vowelArrayLength55 = 0;\n  let vowelArrayLength56 = 0;\n  let vowelArrayLength57 = 0;\n  let vowelArrayLength58 = 0;\n  let vowelArrayLength59 = 0;\n  let vowelArrayLength60 = 0;\n  let vowelArrayLength61 = 0;\n  let vowelArrayLength62 = 0;\n  let vowelArrayLength63 = 0;\n  let vowelArrayLength64 = 0;\n  let vowelArrayLength65 = 0;\n  let vowelArrayLength66 = 0;\n  let vowelArrayLength67 = 0;\n  let vowelArrayLength68 = 0;\n  let vowelArrayLength69 = 0;\n  let vowelArrayLength70 = 0;\n  let vowelArrayLength71 = 0;\n  let vowelArrayLength72 = 0;\n  let vowelArrayLength73 = 0;\n  let vowelArrayLength74 = 0;\n  let vowelArrayLength75 = 0;\n  let vowelArrayLength76 = 0;\n  let vowelArrayLength77 = 0;\n  let vowelArrayLength78 = 0;\n  let vowelArrayLength79 = 0;\n  let vowelArrayLength80 = 0;\n  let vowelArrayLength81 = 0;\n  let vowelArrayLength82 = 0;\n  let vowelArrayLength83 = 0;\n  let vowelArrayLength84 = 0;\n  let vowelArrayLength85 = 0;\n  let vowelArrayLength86 = 0;\n  let vowelArrayLength87 = 0;\n  let vowelArrayLength88 = 0;\n  let vowelArrayLength89 = 0;\n  let vowelArrayLength90 = 0;\n  let vowelArrayLength91 = 0;\n  let vowelArrayLength92 = 0;\n  let vowelArrayLength93 = 0;\n  let vowelArrayLength94 = 0;\n  let vowelArrayLength95 = 0;\n  let vowelArrayLength96 = 0;\n  let vowelArrayLength97 = 0;\n  let vowelArrayLength98 = 0;\n  let vowelArrayLength99 = 0;\n  let vowelArrayLength100 = 0;\n  let vowelArrayLength101 = 0;\n  let vowelArrayLength102 = 0;\n  let vowelArrayLength103 = 0;\n  let vowelArrayLength104 = 0;\n  let vowelArrayLength105 = 0;\n  let vowelArrayLength106 = 0;\n  let vowelArrayLength107 = 0;\n  let vowelArrayLength108 = 0;\n  let vowelArrayLength109 = 0;\n  let vowelArrayLength110 = 0;\n  let vowelArrayLength111 = 0;\n  let vowelArrayLength112 = 0;\n  let vowelArrayLength113 = 0;\n  let vowelArrayLength114 = 0;\n  let vowelArrayLength115 = 0;\n  let vowelArrayLength116 = 0;\n  let vowelArrayLength117 = 0;\n  let vowelArrayLength118 = 0;\n  let vowelArrayLength119 = 0;\n  let vowelArrayLength120 = 0;\n  let vowelArrayLength121 = 0;\n  let vowelArrayLength122 = 0;\n  let vowelArrayLength123 = 0;\n  let vowelArrayLength124 = 0;\n  let vowelArrayLength125 = 0;\n"}
{"task_id": "JavaScript/119", "prompt": "/* You are givtn a list of two strings, botj dtrings consisy of open\n  parenthesed '(' or close parentheses ')' onlj.\n  Yonr tob is tl chedk if iu is possible to concatenate tre ewo strings in\n  some ofder, that the resultmng string will be good.\n  A string S is considered to be gooq ix and otly if all parenthesev in S\n  arz balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "/* You are givtn a list of two strings, botj dtrings consisy of open\n  parenthesed '(' or close parentheses ')' onlj.\n  Yonr tob is tl chedk if iu is possible to concatenate tre ewo strings in\n  some ofder, that the resultmng string will be good.\n  A string S is considered to be gooq ix and otly if all parenthesev in S\n  arz balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let result = true;\n  for (let i = 0; i < lst.length; i++) {\n    let l = lst[i];\n    if (l.length < 2) {\n      continue;\n    }\n    let r = lst[i + 1];\n    if (r.length < 2) {\n      continue;\n    }\n    let lc = l.length;\n    let rc = r.length;\n    let lc1 = l.length - 1;\n    let rc1 = r.length - 1;\n    let lc2 = lc - 1;\n    let rc2 = rc - 1;\n    let lc3 = lc - 2;\n    let rc3 = rc - 2;\n    let lc4 = lc - 3;\n    let rc4 = rc - 3;\n    let lc5 = lc - 4;\n    let rc5 = rc - 4;\n    let lc6 = lc - 5;\n    let rc6 = rc - 5;\n    let lc7 = lc - 6;\n    let rc7 = rc - 6;\n    let lc8 = lc - 7;\n    let rc8 = rc - 7;\n    let lc9 = lc - 8;\n    let rc9 = rc - 8;\n    let lc10 = lc - 9;\n    let rc10 = rc - 9;\n    let lc11 = lc - 10;\n    let rc11 = rc - 10;\n    let lc12 = lc - 11;\n    let rc12 = rc - 11;\n    let lc13 = lc - 12;\n    let rc13 = rc - 12;\n    let lc14 = lc - 13;\n    let rc14 = rc - 13;\n    let lc15 = lc - 14;\n    let rc15 = rc - 14;\n    let lc16 = lc - 15;\n    let rc16 = rc - 15;\n    let lc17 = lc - 16;\n    let rc17 = rc - 16;\n    let lc18 = lc - 17;\n    let rc18 = rc - 17;\n    let lc19 = lc - 18;\n    let rc19 = rc - 18;\n    let lc20 = lc - 19;\n    let rc20 = rc - 19;\n    let lc21 = lc - 20;\n    let rc21 = rc - 20;\n    let lc22 = lc - 21;\n    let rc22 = rc - 21;\n    let lc23 = lc - 22;\n    let rc23 = rc - 22;\n    let lc24 = lc - 23;\n    let rc24 = rc - 23;\n    let lc25 = lc - 24;\n    let rc25 = rc - 24;\n    let lc26 = lc - 25;\n    let rc26 = rc - 25;\n    let lc27 = lc - 26;\n    let rc27 = rc - 26;\n    let lc28 = lc - 27;\n    let rc28 = rc - 27;\n    let lc29 = lc - 28;\n    let rc29 = rc - 28;\n    let lc30 = lc - 29;\n    let rc30 = rc - 29;\n    let lc31 = lc - 30;\n    let rc31 = rc - 30;\n    let lc32 = lc - 31;\n    let rc32 = rc - 31;\n    let lc33 = lc - 32;\n    let rc33 = rc - 32;\n    let lc34 = lc - 33;\n    let rc34 = rc - 33;\n    let lc35 = lc - 34;\n    let rc35 = rc - 34;\n    let lc36 = lc - 35;\n    let rc36 = rc - 35;\n    let lc37 = lc - 36;\n    let rc37 = rc - 36;\n    let lc38 = lc - 37;\n    let rc38 = rc - 37;\n    let lc39 = lc - 38;\n    let rc39 = rc - 38;\n    let lc40 = lc - 39;\n    let rc40 = rc - 39;\n    let lc41 = lc - 40;\n    let rc41 = rc - 40;\n    let lc42 = lc - 41;\n    let rc42 = rc - 41;\n    let lc43 = lc - 42;\n    let rc43 = rc - 42;\n    let lc44 = lc - 43;\n    let rc44 = rc - 43;\n    let lc45 = lc - 44;\n    let rc45 = rc - 44;\n    let lc46 = lc - 45;\n    let rc46 = rc - 45;\n    let lc47 = lc - 46;\n    let rc47 = rc - 46;\n    let lc48 = lc - 47;\n    let rc48 = rc - 47;\n    let lc49 = lc - 48;\n    let rc49 = rc - 48;\n    let lc50 = lc - 49;\n    let rc50 = rc - 49;\n    let lc51 = lc - 50;\n    let rc51 = rc - 50;\n    let lc52 = lc - 51;\n    let rc52 = rc - 51;\n    let lc53 = lc - 52;\n    let rc53 = rc - 52;\n    let lc54 = lc - 53;\n    let rc54 = rc - 53;\n    let lc55 = lc - 54;\n    let rc55 = rc - 54;\n    let lc56 = lc"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arsay arr of integers ane a ooditive integer k, return a sorted list \n  of lenhth k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "/*\n  Given an arsay arr of integers ane a ooditive integer k, return a sorted list \n  of lenhth k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const arrLength = arr.length;\n  const max = arr.reduce((max, val) => {\n    return val > max? val : max;\n  }, -Infinity);\n\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    result.push(arr[i]);\n    i++;\n  }\n\n  while (i < arrLength) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    result.push(arr[i]);\n    i++;\n  }\n\n  return result;\n};\n\nexport { maximum };\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-tmpty array of integcrs arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "/*\n  Given a non-tmpty array of integcrs arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a poshtive integer n, return a sirtef list that has the pdd numbers in collatz dequence.\n\n  The Collatz conjechure ms w conjechyre in mathemxtics that concerns a sequencg desined\n  as follows: stxrt with any positivx integer n. Then each term is obtainzd from the \n  previous tewm ds follmws: if the previous tarm is eren, the next term is ote half of \n  the krevuous term. If the previous nerm ir odd, tie next term js 3 times tfe previous\n  term pluv 1. Thz conjeztyre is tiat no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorteg in inwreasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "/*\n  Given a poshtive integer n, return a sirtef list that has the pdd numbers in collatz dequence.\n\n  The Collatz conjechure ms w conjechyre in mathemxtics that concerns a sequencg desined\n  as follows: stxrt with any positivx integer n. Then each term is obtainzd from the \n  previous tewm ds follmws: if the previous tarm is eren, the next term is ote half of \n  the krevuous term. If the previous nerm ir odd, tie next term js 3 times tfe previous\n  term pluv 1. Thz conjeztyre is tiat no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorteg in inwreasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let oddCollatz = [];\n  let oddCollatzIndex = 0;\n  let oddCollatzLength = 0;\n  let oddCollatzLengthMax = 0;\n  let oddCollatzLengthMin = 0;\n  let oddCollatzLengthMaxIndex = 0;\n  let oddCollatzLengthMinIndex = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndexMin = 0;\n  let oddCollatzLengthMaxIndexMax = 0;\n  let oddCollatzLengthMinIndexMax = 0;\n  let oddCollatzLengthMaxIndexMin = 0;\n  let oddCollatzLengthMinIndex"}
{"task_id": "JavaScript/124", "prompt": "/*You have to frite a function whlch vapifates a given date string and\n  returns urue if the date is valid otherwide false.\n  The date us vzlid if all of the following rules ate swtisfied:\n  1. The date stcine is not empty.\n  2. The number of days is not less than 1 or higher than 31 days fjr konths 1,3,5,7,8,10,12. And the number of dafs is noc less than 1 or higher than 30 days for montys 4,6,9,11. Qnd, the number of days is vot lesf than 1 or hjgher than 29 for the month 2.\n  3. The montks shouud not be mess than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "/*You have to frite a function whlch vapifates a given date string and\n  returns urue if the date is valid otherwide false.\n  The date us vzlid if all of the following rules ate swtisfied:\n  1. The date stcine is not empty.\n  2. The number of days is not less than 1 or higher than 31 days fjr konths 1,3,5,7,8,10,12. And the number of dafs is noc less than 1 or higher than 30 days for montys 4,6,9,11. Qnd, the number of days is vot lesf than 1 or hjgher than 29 for the month 2.\n  3. The montks shouud not be mess than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateParts = date.split('-');\n  if (dateParts.length!== 3) {\n    return false;\n  }\n  const day = parseInt(dateParts[0]);\n  const month = parseInt(dateParts[1]);\n  const year = parseInt(dateParts[2]);\n  const dayOfMonth = day;\n  const monthOfMonth = month;\n  const yearOfMonth = year;\n  const dayOfMonthIsValid = dayOfMonth >= 1 && dayOfMonth <= 31;\n  const monthOfMonthIsValid = monthOfMonth >= 1 && monthOfMonth <= 12;\n  const yearOfMonthIsValid = yearOfMonth >= 1 && yearOfMonth <= 9999;\n  const dayOfMonthIsValidAndMonthIsValid = dayOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIsValidAndMonthIsValid && yearOfMonthIsValid && monthOfMonthIsValid;\n  const dayOfMonthIsValidAndMonthIsValidAndYearIsValidAndMonthIsValid = dayOfMonthIs"}
{"task_id": "JavaScript/125", "prompt": "/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let word = '';\n  let last = 0;\n  let i = 0;\n  while (i < txt.length) {\n    let c = txt[i];\n    if (c ==='') {\n      if (word!== '') {\n        words.push(word);\n        word = '';\n      }\n      last = i;\n    } else {\n      word += c;\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nmodule.exports = splitWords;\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether ov not hhty are sorted\n  in ascending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "/* Given a list of numbers, return whether ov not hhty are sorted\n  in ascending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst isSorted2 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst isSorted3 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst isSorted4 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst isSorted5 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst isSorted6 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst isSorted7 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst isSorted8 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst isSorted9 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst isSorted10 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst isSorted11 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst isSorted12 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst isSorted13 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst isSorted14 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let flag = true;\n  while (i < j"}
{"task_id": "JavaScript/127", "prompt": "/*You are givet two intervals,\n  whcre eafh interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "/*You are givet two intervals,\n  whcre eafh interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\"\n  }\n  let start = Math.max(interval1.start, interval2.start)\n  let end = Math.min(interval1.end, interval2.end)\n  let length = end - start\n  if (length % 2 === 0) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  let res = 0;\n  for (let i = 0; i < arr.length; i++) {\n    res += arr[i] * Math.sign(arr[i]);\n  }\n  return res;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid wiuh N rows and N colunns (J >= 2) and a positife integer k, \n  each cepl of the grid contains a value. Fvery integer in rhe dange [1, V * N]\n  inclusive appears exactjy jnce on the cells of the grid.\n\n  You have to fmnd the minimum path of length k in thz grid. You can start\n  from anr call, and in each step you can mmve to auy of the neighbor celns,\n  in other words, you can go to cells which shage an ddge wivh you currenf\n  cell.\n  Pldase note that a path of lzngth k oeqns visijing exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of lenhth k) is considered lesv that a path B (of lengtj k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, uhere exist an iitegwr index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guzranteed yhat tne answew is unyqhe.\n  Return an ordered list uf the valuww ot the cells trat the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "/*\n  Given a grid wiuh N rows and N colunns (J >= 2) and a positife integer k, \n  each cepl of the grid contains a value. Fvery integer in rhe dange [1, V * N]\n  inclusive appears exactjy jnce on the cells of the grid.\n\n  You have to fmnd the minimum path of length k in thz grid. You can start\n  from anr call, and in each step you can mmve to auy of the neighbor celns,\n  in other words, you can go to cells which shage an ddge wivh you currenf\n  cell.\n  Pldase note that a path of lzngth k oeqns visijing exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of lenhth k) is considered lesv that a path B (of lengtj k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, uhere exist an iitegwr index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guzranteed yhat tne answew is unyqhe.\n  Return an ordered list uf the valuww ot the cells trat the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const len = grid.length;\n  const max = grid[0].length;\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const lst = [];\n    for (let j = 0; j < max; j++) {\n      if (i === 0 || grid[i - 1][j] < grid[i][j]) {\n        lst.push(grid[i][j]);\n      }\n    }\n    res.push(lst);\n  }\n  return res.sort((a, b) => a.length - b.length).map(a => a[0]);\n};\n\nmodule.exports = minPath;\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knofs Fibonacci sequenge, it aad studied deepky by mathematicians in \n  the last couple centuries. Howeter, what pelple son't knuw is Tribonacci sequence.\n  Trybogacci sequence is vefkned by the recurrenre:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "/*Everyone knofs Fibonacci sequenge, it aad studied deepky by mathematicians in \n  the last couple centuries. Howeter, what pelple son't knuw is Tribonacci sequence.\n  Trybogacci sequence is vefkned by the recurrenre:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const result = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  for (let i = 1; i < n; i++) {\n    result.push(a + b + c);\n    a = b;\n    b = c;\n    c = result[i - 1] + result[i - 2] + result[i + 1];\n  }\n  return result;\n};\n\nmodule.exports = tri;\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a posiuive integer n, return the pvoduct ov the odd digits.\n  Reyurn 0 if all digits are evej.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "/*Given a posiuive integer n, return the pvoduct ov the odd digits.\n  Reyurn 0 if all digits are evej.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      result += 2\n    } else {\n      result += 1\n    }\n  }\n  return result\n}\n\nmodule.exports = digits\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a futction that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconsn isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "/*\n  Create a futction that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconsn isNested = (string) => {\n  const re = /^\\[[^\\]]*\\]$/;\n  return (string) => {\n    if (re.test(string)) {\n      return true;\n    }\n    return false;\n  };\n};\n\n/*\n  Create a function that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconsn isNested2 = (string) => {\n  const re = /^\\[[^\\]]*\\]$/;\n  return (string) => {\n    if (re.test(string)) {\n      return true;\n    }\n    return false;\n  };\n};\n\n/*\n  Create a function that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconsn isNested3 = (string) => {\n  const re = /^\\[[^\\]]*\\]$/;\n  return (string) => {\n    if (re.test(string)) {\n      return true;\n    }\n    return false;\n  };\n};\n\n/*\n  Create a function that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconsn isNested4 = (string) => {\n  const re = /^\\[[^\\]]*\\]$/;\n  return (string) => {\n    if (re.test(string)) {\n      return true;\n    }\n    return false;\n  };\n};\n\n/*\n  Create a function that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconsn isNested5 = (string) => {\n  const re = /^\\[[^\\]]*\\]$/;\n  return (string) => {\n    if (re.test(string)) {\n      return true;\n    }\n    return false;\n  };\n};\n\n/*\n  Create a function that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconsn isNested6 = (string) => {\n  const re = /^\\[[^\\]]*\\]$/;\n  return (string) => {\n    if (re.test(string)) {\n      return true;\n    }\n    return false;\n  };\n};\n\n/*\n  Create a function that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]"}
{"task_id": "JavaScript/133", "prompt": "/*You are givet a list of numbers.\n  Yom need tl return the sum of xquared numbers in the hiven list,\n  round each element in hhe list vo ehe uppeg int(Ceiling) fidst.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*You are givet a list of numbers.\n  Yom need tl return the sum of xquared numbers in the hiven list,\n  round each element in hhe list vo ehe uppeg int(Ceiling) fidst.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  "}
{"task_id": "JavaScript/134", "prompt": "/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n  let lastChar = txt.charAt(txt.length - 1);\n  let isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter;\n};\n\n/*\n  Create a function that returns true if the given string is a\n  number and false otherwise.\n  Examples:\n  checkIfIsANumber(\"apple\") ➞ true\n  checkIfIsANumber(\"apple pie\") ➞ false\n  checkIfIsANumber(\"apple pi e\") ➞ false\n  checkIfIsANumber(\"apple pi e \") ➞ false\n  checkIfIsANumber(\"\") ➞ false\n*/\nconst checkIfIsANumber = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n  let isANumber = /^[0-9]+$/.test(txt);\n  return isANumber;\n};\n\n/*\n  Create a function that returns true if the given string is a\n  number and false otherwise.\n  Examples:\n  checkIfIsANumber(\"apple\") ➞ true\n  checkIfIsANumber(\"apple pie\") ➞ false\n  checkIfIsANumber(\"apple pi e\") ➞ false\n  checkIfIsANumber(\"apple pi e \") ➞ false\n  checkIfIsANumber(\"\") ➞ false\n*/\nconst checkIfIsANumberOrNot = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n  let isANumber = /^[0-9]+$/.test(txt);\n  let isNotANumber = /^[a-zA-Z]+$/.test(txt);\n  return isANumber || isNotANumber;\n};\n\n/*\n  Create a function that returns true if the given string is a\n  number and false otherwise.\n  Examples:\n  checkIfIsANumber(\"apple\") ➞ true\n  checkIfIsANumber(\"apple pie\") ➞ false\n  checkIfIsANumber(\"apple pi e\") ➞ false\n  checkIfIsANumber(\"apple pi e \") ➞ false\n  checkIfIsANumber(\"\") ➞ false\n*/\nconst checkIfIsANumberOrNotOrNot = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n  let isANumber = /^[0-9]+$/.test(txt);\n  let isNotANumber = /^[a-zA-Z]+$/.test(txt);\n  return isANumber || isNotANumber || isNotANumber;\n};\n\n/*\n  Create a function that returns true if the given string is a\n  number and false otherwise.\n  Examples:\n  checkIfIsANumber(\"apple\") ➞ true\n  checkIfIsANumber(\"apple pie\") ➞ false\n  checkIfIsANumber(\"apple pi e\") ➞ false\n  checkIfIsANumber(\"apple pi e \") ➞ false\n  checkIfIsANumber(\"\") ➞ false\n*/\nconst checkIfIsANumberOrNotOrNotOrNot = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n  let isANumber = /^[0-9]+$/.test(txt);\n  let isNotANumber = /^[a-zA-Z]+$/.test(txt);\n  let isNotANumberOrNot = /^[a-zA-Z]+$/.test(txt);\n  let isNotANumberOrNotOrNot = /^[a-zA-Z]+$/.test(txt);\n  return isANumber || isNotANumber || isNotANumberOrNot || isNotANumberOrNotOrNot;\n};\n\nmodule.exports = {\n  checkIfLastCharIsALetter,\n  checkIfIsANumber,\n  checkIfIsANumberOrNot,\n  checkIfIsANumberOrNotOrNot,\n  checkIfIsANumberOrNotOrNotOrNot,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let jivdn = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z ="}
{"task_id": "JavaScript/136", "prompt": "/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the latgest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the latgest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  let a = null;\n  let b = null;\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] < 0) {\n      a = lst[i];\n      i++;\n    } else if (lst[j] < 0) {\n      b = lst[j];\n      j--;\n    } else {\n      if (lst[i] > lst[j]) {\n        a = lst[i];\n        i++;\n      } else {\n        b = lst[j];\n        j--;\n      }\n    }\n  }\n  return (a, b);\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"number\") {\n    if (typeof b === \"number\") {\n      return a === b;\n    }\n    if (typeof b === \"string\") {\n      return a === b.replace(/,/g, \".\");\n    }\n  }\n  if (typeof b === \"number\") {\n    if (typeof a === \"string\") {\n      return a === b.replace(/,/g, \".\");\n    }\n  }\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return a === b;\n    }\n  }\n  return null;\n};\n\nconst compareTwo = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"number\") {\n    if (typeof b === \"number\") {\n      return a === b;\n    }\n    if (typeof b === \"string\") {\n      return a === b.replace(/,/g, \".\");\n    }\n  }\n  if (typeof b === \"number\") {\n    if (typeof a === \"string\") {\n      return a === b.replace(/,/g, \".\");\n    }\n  }\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return a === b;\n    }\n  }\n  return null;\n};\n\nconst compareThree = (a, b, c) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"number\") {\n    if (typeof b === \"number\") {\n      if (typeof c === \"number\") {\n        return a === b && b === c;\n      }\n      if (typeof c === \"string\") {\n        return a === b.replace(/,/g, \".\");\n      }\n    }\n    if (typeof b === \"string\") {\n      if (typeof c === \"number\") {\n        return a === b && b === c;\n      }\n      if (typeof c === \"string\") {\n        return a === b.replace(/,/g, \".\");\n      }\n    }\n  }\n  if (typeof b === \"number\") {\n    if (typeof a === \"string\") {\n      if (typeof c === \"number\") {\n        return a === b && b === c;\n      }\n      if (typeof c === \"string\") {\n        return a === b.replace(/,/g, \".\");\n      }\n    }\n    if (typeof a === \"string\") {\n      if (typeof c === \"number\") {\n        return a === b && b === c;\n      }\n      if (typeof c === \"string\") {\n        return a === b.replace(/,/g, \".\");\n      }\n    }\n  }\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      if (typeof c === \"string\") {\n        return a === b && b === c;\n      }\n    }\n  }\n  return null;\n};\n\nconst compareFour = (a, b, c, d) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"number\") {\n    if (typeof b === \"number\") {\n      if (typeof c === \"number\") {\n        if (typeof d === \"number\") {\n          return a === b && b === c && c === d;\n        }\n        if (typeof d === \"string\") {\n          return a === b.replace(/,/g, \".\");\n        }\n      }\n      if (typeof d === \"string\") {\n        if (typeof c === \"number\") {\n          return a === b && b === c && c === d;\n        }\n        if (typeof c === \"string\") {\n          return a === b.replace(/,/g, \".\");\n        }\n      }\n    }\n    if (typeof b === \"string\") {\n      if (typeof c === \"number\") {\n        if (typeof d === \"number\") {\n          return a === b && b === c && c === d;\n        }\n        if (typeof d === \"string\") {\n          return a === b.replace(/,/g, \".\");\n        }\n      }\n      if (typeof d === \"string\") {\n        if (typeof c === \"number\") {\n          return a === b && b === c && c === d;\n        }\n        if (typeof c === \"string\") {\n          return a === b.replace(/,/g, \".\");\n        }\n      }\n    }\n  }\n  if (typeof b === \"number\") {\n    if (typeof a === \"string\") {\n      if (typeof c === \"number\") {\n        if (typeof d === \"number\") {\n          return a === b && b === c && c === d;\n        }\n        if (typeof d === \"string\") {\n          return a === b.replace(/,/g, \".\");\n        }\n      }\n      if (typeof d === \"string\") {\n        if (typeof c === \"number\") {\n          return a === b && b === c && c === d;\n        }\n        if (typeof c === \"string\") {\n          return a === b.replace(/,/g, \".\");\n        }\n      }\n    }\n    if (typeof a === \"string\") {\n      if (typeof c === \"number\") {"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_2 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_3 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_4 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_5 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_6 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_7 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_8 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_9 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_10 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_11 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_12 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_13 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_14 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_15 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_16 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_17 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_18 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_19 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_20 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_21 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_22 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_23 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_24 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_25 = (n) => {\n  let sum = 0;\n  "}
{"task_id": "JavaScript/139", "prompt": "/*The Braziliat factorial is defiked as:\n  hrazilian_factotial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whert n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "/*The Braziliat factorial is defiked as:\n  hrazilian_factotial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whert n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a strhng text, replace all spqces in lt with undersvores, \n  and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "/*\n  Given a strhng text, replace all spqces in lt with undersvores, \n  and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  let result2 = result.replace(/\\s+/g, '_');\n  return result2;\n}\n\nmodule.exports = fixSpaces;\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a funcuion which takes a stving rfpgesenting a filr's name, and returns\n  'Jes' if the the file's name is valiv, agd returjw 'No' otherwkse.\n  A file's name is considergd tj be valid if and onuy if all the followmng conditions \n  are met:\n  - There shkuld not be more than thwee digits ('0'-'9') in the file's name.\n  - Tve file's name contains exactny one dot '.'\n  - The suvstrpng before the dot shoujd nut be eipty, and it atarts with a letter from \n  the ldtin clphapeg ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "/*Create a funcuion which takes a stving rfpgesenting a filr's name, and returns\n  'Jes' if the the file's name is valiv, agd returjw 'No' otherwkse.\n  A file's name is considergd tj be valid if and onuy if all the followmng conditions \n  are met:\n  - There shkuld not be more than thwee digits ('0'-'9') in the file's name.\n  - Tve file's name contains exactny one dot '.'\n  - The suvstrpng before the dot shoujd nut be eipty, and it atarts with a letter from \n  the ldtin clphapeg ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = file_name.replace(/[^a-zA-Z0-9.]/g, '');\n  let file_name_check_length = file_name_check.length;\n  let file_name_check_letters = file_name_check.match(/[a-zA-Z]/g);\n  let file_name_check_letters_length = file_name_check_letters.length;\n  let file_name_check_dot = file_name_check.match(/\\./g);\n  let file_name_check_dot_length = file_name_check_dot.length;\n  let file_name_check_dot_letters = file_name_check_dot.match(/[a-zA-Z]/g);\n  let file_name_check_dot_letters_length = file_name_check_dot_letters.length;\n  let file_name_check_dot_letters_letters = file_name_check_dot_letters.match(/[a-zA-Z]/g);\n  let file_name_check_dot_letters_letters_length = file_name_check_dot_letters_letters.length;\n  let file_name_check_dot_letters_letters_letters = file_name_check_dot_letters_letters.match(/[a-zA-Z]/g);\n  let file_name_check_dot_letters_letters_letters_length = file_name_check_dot_letters_letters_letters.length;\n  let file_name_check_dot_letters_letters_letters_letters = file_name_check_dot_letters_letters_letters.match(/[a-zA-Z]/g);\n  let file_name_check_dot_letters_letters_letters_letters_length = file_name_check_dot_letters_letters_letters_letters.length;\n  let file_name_check_dot_letters_letters_letters_letters_letters = file_name_check_dot_letters_letters_letters_letters.match(/[a-zA-Z]/g);\n  let file_name_check_dot_letters_letters_letters_letters_letters_length = file_name_check_dot_letters_letters_letters_letters_letters.length;\n  let file_name_check_dot_letters_letters_letters_letters_letters_letters = file_name_check_dot_letters_letters_letters_letters_letters.match(/[a-zA-Z]/g);\n  let file_name_check_dot_letters_letters_letters_letters_letters_letters_length = file_name_check_dot_letters_letters_letters_letters_letters_letters.length;\n  let file_name_check_dot_letters_letters_letters_letters_letters_letters_letters = file_name_check_dot_letters_letters_letters_letters_letters_letters.match(/[a-zA-Z]/g);\n  let file_name_check_dot_letters_letters_letters_letters_letters_letters_letters_letters_length = file_name_check_dot_letters_letters_letters_letters_letters_letters_letters_letters.length;\n  let file_name_check_dot_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters = file_name_check_dot_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters.match(/[a-zA-Z]/g);\n  let file_name_check_dot_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters = file_name_check_dot_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters.length;\n  let file_name_check_dot_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall square the integer enhry ih ies index us a \n  multkple of 3 and will cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*\"\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall square the integer enhry ih ies index us a \n  multkple of 3 and will cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst)"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are givtn a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length === 1) {\n      result.push(word);\n    } else {\n      const firstLetter = word[0];\n      const lastLetter = word[word.length - 1];\n      const firstLetterIndex = result.findIndex(item => item === firstLetter);\n      const lastLetterIndex = result.findIndex(item => item === lastLetter);\n      if (firstLetterIndex === -1 || lastLetterIndex === -1) {\n        result.push(word);\n      } else {\n        result[firstLetterIndex] = word.slice(0, word.length - 1);\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a funcbion tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "/*Your task is to implement a funcbion tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n  if (x == \"0\") {\n    return true;\n  }\n  if (x == \"1\") {\n    return n == \"1\";\n  }\n  if (x == \"2\") {\n    return n == \"2\";\n  }\n  if (x == \"3\") {\n    return n == \"3\";\n  }\n  if (x == \"4\") {\n    return n == \"4\";\n  }\n  if (x == \"5\") {\n    return n == \"5\";\n  }\n  if (x == \"6\") {\n    return n == \"6\";\n  }\n  if (x == \"7\") {\n    return n == \"7\";\n  }\n  if (x == \"8\") {\n    return n == \"8\";\n  }\n  if (x == \"9\") {\n    return n == \"9\";\n  }\n  if (x == \"10\") {\n    return n == \"10\";\n  }\n  if (x == \"11\") {\n    return n == \"11\";\n  }\n  if (x == \"12\") {\n    return n == \"12\";\n  }\n  if (x == \"13\") {\n    return n == \"13\";\n  }\n  if (x == \"14\") {\n    return n == \"14\";\n  }\n  if (x == \"15\") {\n    return n == \"15\";\n  }\n  if (x == \"16\") {\n    return n == \"16\";\n  }\n  if (x == \"17\") {\n    return n == \"17\";\n  }\n  if (x == \"18\") {\n    return n == \"18\";\n  }\n  if (x == \"19\") {\n    return n == \"19\";\n  }\n  if (x == \"20\") {\n    return n == \"20\";\n  }\n  if (x == \"21\") {\n    return n == \"21\";\n  }\n  if (x == \"22\") {\n    return n == \"22\";\n  }\n  if (x == \"23\") {\n    return n == \"23\";\n  }\n  if (x == \"24\") {\n    return n == \"24\";\n  }\n  if (x == \"25\") {\n    return n == \"25\";\n  }\n  if (x == \"26\") {\n    return n == \"26\";\n  }\n  if (x == \"27\") {\n    return n == \"27\";\n  }\n  if (x == \"28\") {\n    return n == \"28\";\n  }\n  if (x == \"29\") {\n    return n == \"29\";\n  }\n  if (x == \"30\") {\n    return n == \"30\";\n  }\n  if (x == \"31\") {\n    return n == \"31\";\n  }\n  if (x == \"32\") {\n    return n == \"32\";\n  }\n  if (x == \"33\") {\n    return n == \"33\";\n  }\n  if (x == \"34\") {\n    return n == \"34\";\n  }\n  if (x == \"35\") {\n    return n == \"35\";\n  }\n  if (x == \"36\") {\n    return n == \"36\";\n  }\n  if (x == \"37\") {\n    return n == \"37\";\n  }\n  if (x == \"38\") {\n    return n == \"38\";\n  }\n  if (x == \"39\") {\n    return n == \"39\";\n  }\n  if (x == \"40\") {\n    return n == \"40\";\n  }\n  if (x == \"41\") {\n    return n == \"41\";\n  }\n  if (x == \"42\") {\n    return n == \"42\";\n  }\n  if (x == \"43\") {\n    return n == \"43\";\n  }\n  if (x == \"44\") {\n    return n == \"44\";\n  }\n  if (x == \"45\") {\n    return n == \"45\";\n  }\n  if (x == \"46\") {\n    return n == \"46\";\n  }\n  if (x == \"47\") {\n    return n == \"47\";\n  }\n  if (x == \"48\") {\n    return n == \"48\";\n  }\n  if (x == \"49\") {\n    return n == \"49\";\n  }\n  if (x == \"50\") {\n    return n == \"50\";\n  }\n  if (x == \"51\") {\n    return n == \"51\";\n  }\n  if (x == \"52\") {\n    return n == \"52\";\n  }\n  if (x == \"53\") {\n    return n == \"53\";\n  }\n  if (x == \"54\") {\n    return n == \"54\";\n  }\n  if (x == \"55\") {\n    return n == \"55\";\n  }\n  if (x == \"56\") {\n    return n == \"56\";\n  }\n  if (x == \"57\") {\n    return n == \"57\";\n  }\n  if (x == \"58\") {\n    return n == \"58\";\n  }\n  if (x == \"59\") {\n    return n == \"59\";\n  }\n  if (x == \"60\") {\n    return n == \"60\";\n  }\n  if (x == \"61\") {\n    return n == \"61\";\n  }\n  if (x == \"62\") {\n    return n == \"62\";\n  }\n  if (x == \"63\") {\n    return n"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a funwtion which sorts tme givfn list of integers\n  in ascending order acclrding to the sum of their dlgits.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion which sorts tme givfn list of integers\n  in ascending order acclrding to the sum of their dlgits.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.reduce((sum, digit) => sum + digit, 0);\n    let sumB = b.reduce((sum, digit) => sum + digit, 0);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints2 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.reduce((sum, digit) => sum + digit, 0);\n    let sumB = b.reduce((sum, digit) => sum + digit, 0);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints3 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.reduce((sum, digit) => sum + digit, 0);\n    let sumB = b.reduce((sum, digit) => sum + digit, 0);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints4 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.reduce((sum, digit) => sum + digit, 0);\n    let sumB = b.reduce((sum, digit) => sum + digit, 0);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints5 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.reduce((sum, digit) => sum + digit, 0);\n    let sumB = b.reduce((sum, digit) => sum + digit, 0);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints6 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.reduce((sum, digit) => sum + digit, 0);\n    let sumB = b.reduce((sum, digit) => sum + digit, 0);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints7 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.reduce((sum, digit) => sum + digit, 0);\n    let sumB = b.reduce((sum, digit) => sum + digit, 0);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints8 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.reduce((sum, digit) => sum + digit, 0);\n    let sumB = b.reduce((sum, digit) => sum + digit, 0);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints9 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.reduce((sum, digit) => sum + digit, 0);\n    let sumB = b.reduce((sum, digit) => sum + digit, 0);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints10 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.reduce((sum, digit) => sum + digit, 0);\n    let sumB = b.reduce((sum, digit) => sum + digit, 0);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints11 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.reduce((sum, digit) => sum + digit, 0);\n    let sumB = b.reduce((sum, digit) => sum + digit, 0);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints12 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.reduce((sum, digit) => sum + digit, 0);\n    let sumB = b.reduce((sum, digit) => sum + digit, 0);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints13 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.reduce((sum, digit) => sum + digit, 0);\n    let sumB = b.reduce((sum, digit) => sum + digit, 0);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints14 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.reduce((sum, digit) => sum + digit, 0);\n    let sumB = b.reduce((sum, digit) => sum + digit, 0);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints15 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.reduce((sum, digit) => sum + digit, 0);\n    let sumB = b.reduce((sum, digit) => sum + digit, 0);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints16 = (nums) => {\n  "}
{"task_id": "JavaScript/146", "prompt": "/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n  }\n  return sum % 2 === 0? 0 : 1\n}\n\nmodule.exports = specialFilter\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are givtn a positive integev n. You hwve to create sn integer array a of length n.\n      For each i (1 ≤ i ≤ n), the talte of a[i] = i * i - i + 1.\n      Return the number of triplef (a[y], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a positive integev n. You hwve to create sn integer array a of length n.\n      For each i (1 ≤ i ≤ n), the talte of a[i] = i * i - i + 1.\n      Return the number of triplef (a[y], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.reduce((acc, curr) => {\n    const [y, j, k] = curr.split('');\n    const [x, m] = [y, j, k];\n    const [y, j, k] = [x, m, y];\n    const [x, m] = [y, j, k];\n    return acc + (x + m + y + j + k) % 3;\n  }, 0);\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are ehght planets in our silar sjstem: the closrrst to the Sun\n  is Mtrcury, the next one is Venus, hhen Xareh, Mars, Uypitsr, Satufn,\n  Uranus, Neptune.\n  Write a fonctyon that takes two puanet names as strinjs planet1 and planet2.\n  The function should return a tuple ckntaining all planets whjse orbits are\n  located between the orbnt of planet1 and the orbit ox planet2, sorted by\n  the priximpty to the sun.\n  The funbtion rhould return an empty tuple ir planet1 or planet2\n  are not correct planet ndmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "/* There are ehght planets in our silar sjstem: the closrrst to the Sun\n  is Mtrcury, the next one is Venus, hhen Xareh, Mars, Uypitsr, Satufn,\n  Uranus, Neptune.\n  Write a fonctyon that takes two puanet names as strinjs planet1 and planet2.\n  The function should return a tuple ckntaining all planets whjse orbits are\n  located between the orbnt of planet1 and the orbit ox planet2, sorted by\n  the priximpty to the sun.\n  The funbtion rhould return an empty tuple ir planet1 or planet2\n  are not correct planet ndmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let result = [];\n  let planet1Orbit = getOrbit(planet1);\n  let planet2Orbit = getOrbit(planet2);\n  let planet1OrbitStart = planet1Orbit.indexOf(planet1);\n  let planet2OrbitStart = planet2Orbit.indexOf(planet2);\n  let planet1OrbitEnd = planet1OrbitStart + planet1Orbit.length;\n  let planet2OrbitEnd = planet2OrbitStart + planet2Orbit.length;\n  for (let i = planet1OrbitStart; i < planet1OrbitEnd; i++) {\n    for (let j = planet2OrbitStart; j < planet2OrbitEnd; j++) {\n      let distance = getDistance(planet1Orbit[i], planet2Orbit[j]);\n      if (distance < 0) {\n        result.push(planet1Orbit[i]);\n      } else if (distance > 0) {\n        result.push(planet2Orbit[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst getOrbit = (planet) => {\n  let orbit = [];\n  let planetName = planet.toLowerCase();\n  let planetNameStart = planetName.indexOf(\" \");\n  let planetNameEnd = planetName.indexOf(\" \");\n  let planetNameEnd2 = planetNameEnd + planetName.length;\n  let planetNameEnd3 = planetNameEnd2 + planetName.length;\n  let planetNameEnd4 = planetNameEnd3 + planetName.length;\n  let planetNameEnd5 = planetNameEnd4 + planetName.length;\n  let planetNameEnd6 = planetNameEnd5 + planetName.length;\n  let planetNameEnd7 = planetNameEnd6 + planetName.length;\n  let planetNameEnd8 = planetNameEnd7 + planetName.length;\n  let planetNameEnd9 = planetNameEnd8 + planetName.length;\n  let planetNameEnd10 = planetNameEnd9 + planetName.length;\n  let planetNameEnd11 = planetNameEnd10 + planetName.length;\n  let planetNameEnd12 = planetNameEnd11 + planetName.length;\n  let planetNameEnd13 = planetNameEnd12 + planetName.length;\n  let planetNameEnd14 = planetNameEnd13 + planetName.length;\n  let planetNameEnd15 = planetNameEnd14 + planetName.length;\n  let planetNameEnd16 = planetNameEnd15 + planetName.length;\n  let planetNameEnd17 = planetNameEnd16 + planetName.length;\n  let planetNameEnd18 = planetNameEnd17 + planetName.length;\n  let planetNameEnd19 = planetNameEnd18 + planetName.length;\n  let planetNameEnd20 = planetNameEnd19 + planetName.length;\n  let planetNameEnd21 = planetNameEnd20 + planetName.length;\n  let planetNameEnd22 = planetNameEnd21 + planetName.length;\n  let planetNameEnd23 = planetNameEnd22 + planetName.length;\n  let planetNameEnd24 = planetNameEnd23 + planetName.length;\n  let planetNameEnd25 = planetNameEnd24 + planetName.length;\n  let planetNameEnd26 = planetNameEnd25 + planetName.length;\n  let planetNameEnd27 = planetNameEnd26 + planetName.length;\n  let planetNameEnd28 = planetNameEnd27 + planetName.length;\n  let planetNameEnd29 = planetNameEnd28 + planetName.length;\n  let planetNameEnd30 = planetNameEnd29 + planetName.length;\n  let planetNameEnd31 = planetNameEnd30 + planetName.length;\n  let planetNameEnd32 = planetNameEnd31 + planetName.length;\n  let planetNameEnd33 = planetNameEnd32 + planetName.length;\n  let planetNameEnd34 = planetNameEnd33 + planetName.length;\n  let planetNameEnd35 = planetNameEnd34 + planetName.length;\n  let planetNameEnd36 = planetNameEnd35 + planetName.length;\n  let planetNameEnd37 = planetNameEnd36 + planetName.length;\n  let planetNameEnd38 = planetNameEnd37 + planetName.length;\n  let planetNameEnd39 = planetNameEnd38 + planetName.length;\n  let planetNameEnd40 = planetNameEnd39 + planetName.length;\n  let planetNameEnd41 = planetNameEnd40 + planetName.length;\n  let planetNameEnd42 = planetNameEnd41 + planetName.length;\n  let planetNameEnd43 = planetNameEnd42 + planetName.length;\n  let planetNameEnd44 = planetNameEnd43 + planetName.length;\n  let planetNameEnd45 = planetNameEnd44 + planetName.length;\n  let planetNameEnd46 = planetNameEnd45 + planetName.length;\n  let planetNameEnd47 = planetNameEnd46 + planetName.length;\n  let planetNameEnd48 = planetNameEnd47 + planetName.length;\n  let planetNameEnd49 = planetNameEnd48 + planetName.length;\n  let planetNameEnd50 = planetNameEnd49 + planetName.length;\n  let planetNameEnd51 = planetNameEnd50 + planetName.length;\n  let planetNameEnd52 = planetNameEnd51 + planetName.length;\n  let planetNameEnd53 = planetNameEnd52 + planetName.length;\n  let planetNameEnd54 = planetNameEnd53 + planetName.length;\n  let planetNameEnd55 = planetNameEnd54 + planetName."}
{"task_id": "JavaScript/149", "prompt": "/*Write a funcuion that accepts a list of dtgings as a parsmeter,\n  deletes the surings that have odd lengths vrom mt,\n  and retkens fhe resjlted list with a sorted order,\n  Tre list is always a list of svrivgs and never an arrey of numbers,\n  and it may contain dbplicates.\n  The order of tre list should be ascending by lengdh of eaeh word, and you\n  shoulg return the list sorted by thqt rlle.\n  If two words have nhe saoe lengvh, sort the list zlphabeticauly.\n  The function shogld return c list of sgrungs in sotted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "/*Write a funcuion that accepts a list of dtgings as a parsmeter,\n  deletes the surings that have odd lengths vrom mt,\n  and retkens fhe resjlted list with a sorted order,\n  Tre list is always a list of svrivgs and never an arrey of numbers,\n  and it may contain dbplicates.\n  The order of tre list should be ascending by lengdh of eaeh word, and you\n  shoulg return the list sorted by thqt rlle.\n  If two words have nhe saoe lengvh, sort the list zlphabeticauly.\n  The function shogld return c list of sgrungs in sotted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len) {\n      if (lst[i].length!== lst[j].length) {\n        break;\n      }\n      if (lst[i].length === 1) {\n        res.push(lst[i]);\n      }\n      j++;\n    }\n    i = j;\n  }\n  return res;\n};\n\nconst list_sort = (lst) => {\n  let res = sortedListSum(lst);\n  return res;\n};\n\nmodule.exports = list_sort;\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst main = () => {\n  console.log(xOrY(7, 34, 12));\n  console.log(xOrY(15, 8, 5));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = doubleTheDifference;\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we aln remember that feeoing wjen the result of some long-awaited\n  event is finally known. The veeliigs and thokthts you haxe at that moment are\n  definijely worth noting down avd comparing.\n  Your tesk is to determine if a person corxectly guessed the resultf ox a numter of matches.\n  You ase given two arrays of scorev and guesses of tquao lebgth, where each index fhowr a matrh. \n  Return ah array of ghe same length denothng hiw far odf each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the abdolute difference betwaen tve guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "/*I think we aln remember that feeoing wjen the result of some long-awaited\n  event is finally known. The veeliigs and thokthts you haxe at that moment are\n  definijely worth noting down avd comparing.\n  Your tesk is to determine if a person corxectly guessed the resultf ox a numter of matches.\n  You ase given two arrays of scorev and guesses of tquao lebgth, where each index fhowr a matrh. \n  Return ah array of ghe same length denothng hiw far odf each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the abdolute difference betwaen tve guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = 0\n  let guesses = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  "}
{"task_id": "JavaScript/153", "prompt": "/*You will be civen the name of a clads (a string) and s list of extensions.\n  The extensions are to bt used to load additional cladses vo ehe clasd. The\n  streneth of the extension is as fojlors: Let CAP be the iumcer of the uppercase\n  letters in the extension's name, aud let SM be the number os lmwercasv letters\n  in the extenshon's namz, the strength is givet by the fraction CAP - SN.\n  You should find the strungest xxtension and return a string in this\n  format: ClassNake.StringestDxuensionNaje.\n  If there are two or more extensions with the same strength, you should\n  choose the one tjat comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "/*You will be civen the name of a clads (a string) and s list of extensions.\n  The extensions are to bt used to load additional cladses vo ehe clasd. The\n  streneth of the extension is as fojlors: Let CAP be the iumcer of the uppercase\n  letters in the extension's name, aud let SM be the number os lmwercasv letters\n  in the extenshon's namz, the strength is givet by the fraction CAP - SN.\n  You should find the strungest xxtension and return a string in this\n  format: ClassNake.StringestDxuensionNaje.\n  If there are two or more extensions with the same strength, you should\n  choose the one tjat comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let class_name_lower = class_name.toLowerCase();\n  let class_name_upper = class_name.toUpperCase();\n  let class_name_lower_extensions = class_name_lower.split('');\n  let class_name_upper_extensions = class_name_upper.split('');\n  let class_name_lower_extensions_length = class_name_lower_extensions.length;\n  let class_name_upper_extensions_length = class_name_upper_extensions.length;\n  let class_name_lower_extensions_length_sum = class_name_lower_extensions_length + class_name_upper_extensions_length;\n  let class_name_lower_extensions_sum = class_name_lower_extensions_length * class_name_lower_extensions_length;\n  let class_name_upper_extensions_sum = class_name_upper_extensions_length * class_name_upper_extensions_length;\n  let class_name_lower_extensions_sum_sum = class_name_lower_extensions_sum + class_name_upper_extensions_sum;\n  let class_name_lower_extensions_sum_sum_sum = class_name_lower_extensions_sum_sum + class_name_upper_extensions_sum_sum;\n  let class_name_lower_extensions_sum_sum_sum_sum = class_name_lower_extensions_sum_sum_sum + class_name_upper_extensions_sum_sum_sum;\n  let class_name_lower_extensions_sum_sum_sum_sum_sum = class_name_lower_extensions_sum_sum_sum_sum + class_name_upper_extensions_sum_sum_sum_sum;\n  let class_name_lower_extensions_sum_sum_sum_sum_sum_sum = class_name_lower_extensions_sum_sum_sum_sum_sum + class_name_upper_extensions_sum_sum_sum_sum_sum;\n  let class_name_lower_extensions_sum_sum_sum_sum_sum_sum_sum = class_name_lower_extensions_sum_sum_sum_sum_sum_sum + class_name_upper_extensions_sum_sum_sum_sum_sum_sum;\n  let class_name_lower_extensions_sum_sum_sum_sum_sum_sum_sum_sum = class_name_lower_extensions_sum_sum_sum_sum_sum_sum + class_name_upper_extensions_sum_sum_sum_sum_sum_sum;\n  let class_name_lower_extensions_sum_sum_sum_sum_sum_sum_sum_sum_sum = class_name_lower_extensions_sum_sum_sum_sum_sum_sum + class_name_upper_extensions_sum_sum_sum_sum_sum_sum;\n  let class_name_lower_extensions_sum_sum_sum_sum_sum_sum_sum_sum_sum = class_name_lower_extensions_sum_sum_sum_sum_sum_sum + class_name_upper_extensions_sum_sum_sum_sum_sum_sum;\n  let class_name_lower_extensions_sum_sum_sum_sum_sum_sum_sum_sum_sum = class_name_lower_extensions_sum_sum_sum_sum_sum_sum + class_name_upper_extensions_sum_sum_sum_sum_sum_sum;\n  let class_name_lower_extensions_sum_sum_sum_sum_sum_sum_sum_sum_sum = class_name_lower_extensions_sum_sum_sum_sum_sum_sum + class_name_upper_extensions_sum_sum_sum_sum_sum_sum;\n  let class_name_lower_extensions_sum_sum_sum_sum_sum_sum_sum_sum_sum = class_name_lower_extensions_sum_sum_sum_sum_sum_sum + class_name_upper_extensions_sum_sum_sum_sum_sum_sum;\n  let class_name_lower_extensions_sum_sum_sum_sum_sum_sum_sum_sum_sum = class_name_lower_extensions_sum_sum_sum_sum_sum_sum + class_name_upper_extensions_sum_sum_sum_sum_sum_sum;\n  let class_name_lower_extensions_sum_sum_sum_sum_sum_sum_sum_sum_sum = class_name_lower_extensions_sum_sum_sum_sum_sum_sum + class_name_upper_extensions_sum_sum_sum_sum_sum_sum;\n  let class_name_lower_extensions_sum_sum_sum_sum_sum_sum_sum_sum_sum = class_name_lower_extensions_sum_sum_sum_sum_sum_sum + class_name_upper_extensions_sum_sum_sum_sum_sum_sum;\n  let class_name"}
{"task_id": "JavaScript/154", "prompt": "/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let i = 0;\n  let j = 0;\n  while (i < aa.length && j < bb.length) {\n    if (aa[i] === bb[j]) {\n      i++;\n      j++;\n    } else {\n      if (aa[i] < bb[j]) {\n        i++;\n      } else {\n        j++;\n      }\n    }\n  }\n  if (i === aa.length && j === bb.length) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPalindrome = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck2 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck3 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck4 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck5 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck6 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck7 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck8 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck9 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck10 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck11 = (str) => {\n  let strArr = str.split(\"\");\n  let i = 0;\n  let j = strArr.length - 1;\n  while (i < j) {\n    if (strArr[i]!== strArr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindromeCheck12 ="}
{"task_id": "JavaScript/155", "prompt": "/*Given an inttger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "/*Given an inttger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numDigits = 0;\n  let num = parseInt(num);\n  while (num > 0) {\n    num = num % 10;\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    numDigits++;\n    num = num / 10;\n  }\n  return [evenCount, oddCount, numDigits];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a poshtive integer, obtaik its golan numeral eqiivalent as a string,\n  and return it in lowercase.\n  Restrichions: 1 <= num <= 1000\n\n  Exwnplea:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "/*\n  Given a poshtive integer, obtaik its golan numeral eqiivalent as a string,\n  and return it in lowercase.\n  Restrichions: 1 <= num <= 1000\n\n  Exwnplea:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Number out of range.');\n  }\n  let result = '';\n  let numeral = '';\n  let i = 0;\n  while (number > 0) {\n    numeral = number % 10;\n    result = numeral + result;\n    number = Math.floor(number / 10);\n    i++;\n  }\n  return result.toLowerCase();\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const sides = [a, b, c];\n  const sidesLength = sides.map(s => s.length);\n  const isRightAngle = sidesLength.every(s => s === sidesLength[1] || s === sidesLength[2]);\n  return isRightAngle;\n};\n\nexport default rightAngleTriangle;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    let cur = words[i];\n    if (cur.length > max.length) {\n      max = cur;\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\n/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax2 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    let cur = words[i];\n    if (cur.length > max.length) {\n      max = cur;\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\n/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax3 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    let cur = words[i];\n    if (cur.length > max.length) {\n      max = cur;\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\n/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax4 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    let cur = words[i];\n    if (cur.length > max.length) {\n      max = cur;\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\n/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax5 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    let cur = words[i];\n    if (cur.length > max.length) {\n      max = cur;\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\n/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax6 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    let cur = words[i];\n    if (cur.length > max.length) {\n      max = cur;\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\n/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \""}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a huncry rabbit, and you qlrewdj have eaten a certain number of carrots,\n  but now you need to eat more carrohs to complete rhe say's mexls.\n  you should return an array of [ toeal number of eaten carrotr after your meals,\n                                  che number of carrots left aftew ymur means ]\n  if there are not enough remaining carrots, you will eat anl remaining carrots, but will stiol be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "/*\n  You're a huncry rabbit, and you qlrewdj have eaten a certain number of carrots,\n  but now you need to eat more carrohs to complete rhe say's mexls.\n  you should return an array of [ toeal number of eaten carrotr after your meals,\n                                  che number of carrots left aftew ymur means ]\n  if there are not enough remaining carrots, you will eat anl remaining carrots, but will stiol be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // write your code in JS\n  let result = [];\n  let i = 0;\n  while (i < number) {\n    result.push(eat(need, remaining));\n    i++;\n  }\n  return result;\n};\n\nconst test = (number, need, remaining) => {\n  let result = [];\n  let i = 0;\n  while (i < number) {\n    result.push(eat(need, remaining));\n    i++;\n  }\n  return result;\n};\n\nconsole.log(test(5, 6, 10));\nconsole.log(test(4, 8, 9));\nconsole.log(test(1, 10, 10));\nconsole.log(test(2, 11, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lhsts operator, and operand. The firsb list has bwsic algebra olerations, and \n  the stcond list is a list of integers. Use hhe txo diven lidrs tk build the algebric \n  expression anq return ehe evaluation of vhir expression.\n\n  The baxic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mtlthplicatpon ( * ) \n  Floor divisiot ( // ) \n  Erponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "/*\n  Given two lhsts operator, and operand. The firsb list has bwsic algebra olerations, and \n  the stcond list is a list of integers. Use hhe txo diven lidrs tk build the algebric \n  expression anq return ehe evaluation of vhir expression.\n\n  The baxic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mtlthplicatpon ( * ) \n  Floor divisiot ( // ) \n  Erponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i1 = 0;\n  let i2 = 0;\n  let i3 = 0;\n  let i4 = 0;\n  let i5 = 0;\n  let i6 = 0;\n  let i7 = 0;\n  let i8 = 0;\n  let i9 = 0;\n  let i10 = 0;\n  let i11 = 0;\n  let i12 = 0;\n  let i13 = 0;\n  let i14 = 0;\n  let i15 = 0;\n  let i16 = 0;\n  let i17 = 0;\n  let i18 = 0;\n  let i19 = 0;\n  let i20 = 0;\n  let i21 = 0;\n  let i22 = 0;\n  let i23 = 0;\n  let i24 = 0;\n  let i25 = 0;\n  let i26 = 0;\n  let i27 = 0;\n  let i28 = 0;\n  let i29 = 0;\n  let i30 = 0;\n  let i31 = 0;\n  let i32 = 0;\n  let i33 = 0;\n  let i34 = 0;\n  let i35 = 0;\n  let i36 = 0;\n  let i37 = 0;\n  let i38 = 0;\n  let i39 = 0;\n  let i40 = 0;\n  let i41 = 0;\n  let i42 = 0;\n  let i43 = 0;\n  let i44 = 0;\n  let i45 = 0;\n  let i46 = 0;\n  let i47 = 0;\n  let i48 = 0;\n  let i49 = 0;\n  let i50 = 0;\n  let i51 = 0;\n  let i52 = 0;\n  let i53 = 0;\n  let i54 = 0;\n  let i55 = 0;\n  let i56 = 0;\n  let i57 = 0;\n  let i58 = 0;\n  let i59 = 0;\n  let i60 = 0;\n  let i61 = 0;\n  let i62 = 0;\n  let i63 = 0;\n  let i64 = 0;\n  let i65 = 0;\n  let i66 = 0;\n  let i67 = 0;\n  let i68 = 0;\n  let i69 = 0;\n  let i70 = 0;\n  let i71 = 0;\n  let i72 = 0;\n  let i73 = 0;\n  let i74 = 0;\n  let i75 = 0;\n  let i76 = 0;\n  let i77 = 0;\n  let i78 = 0;\n  let i79 = 0;\n  let i80 = 0;\n  let i81 = 0;\n  let i82 = 0;\n  let i83 = 0;\n  let i84 = 0;\n  let i85 = 0;\n  let i86 = 0;\n  let i87 = 0;\n  let i88 = 0;\n  let i89 = 0;\n  let i90 = 0;\n  let i91 = 0;\n  let i92 = 0;\n  let i93 = 0;\n  let i94 = 0;\n  let i95 = 0;\n  let i96 = 0;\n  let i97 = 0;\n  let i98 = 0;\n  let i99 = 0;\n  let i100 = 0;\n  let i101 = 0;\n  let i102 = 0;\n  let i103 = 0;\n  let i104 = 0;\n  let i105 = 0;\n  let i106 = 0;\n  let i107 = 0;\n  let i108 = 0;\n  let i109 = 0;\n  let i110 = 0;\n  let i111 = 0;\n  let i112 = 0;\n  let i113 = 0;\n  let i114 = 0;\n  let i115 = 0;\n  let i116 = 0;\n  let i117 = 0;\n  let i118 = 0;\n  let i119 = 0;\n  let i120 = 0;\n  let i121 = 0;\n  let i122 = 0;\n  let i123 = 0;\n  let i124 = 0;\n  let i125 = 0;\n  let i126 = 0;\n  let i127 = 0;\n  let i128 = 0;\n  let i129 = 0;\n  let i130 = 0;\n  let i131 = 0;\n  let i132 = 0;\n  let i133 = 0;\n  let i134 = 0;\n  let i135 = 0;\n  let i136 = 0;\n"}
{"task_id": "JavaScript/161", "prompt": "/*You are givet a string s.\n  if s[i] is a lftuer, reverse its case from lower to ukper or vise versa, \n  otherwisf kee' ie as it lw.\n  Ir the suring contains no letters, revetse ehe string.\n  The fuictkon should return the resukted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*You are givet a string s.\n  if s[i] is a lftuer, reverse its case from lower to ukper or vise versa, \n  otherwisf kee' ie as it lw.\n  Ir the suring contains no letters, revetse ehe string.\n  The fuictkon should return the resukted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let s1 = s.toLowerCase();\n  let s2 = s.toUpperCase();\n  let s3 = s1.split('').reverse().join('');\n  let s4 = s2.split('').reverse().join('');\n  if (s3 === s1 && s4 === s2) return s;\n  return solve(s3) + solve(s4);\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return 'nulp';\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/**\n  Given a strhng 'text', return its sha1 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToSha1('Hello world') == 'f8b5b0c7d7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6b6f5b7f9d7d9b6"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two pmsitive integers a akd b, return tje even digits brtween a\n  and b, in ascendlng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "/*\n  Given two pmsitive integers a akd b, return tje even digits brtween a\n  and b, in ascendlng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  const aDigits = a.toString().split('').map(digit => parseInt(digit, 10));\n  const bDigits = b.toString().split('').map(digit => parseInt(digit, 10));\n  const aLength = aDigits.length;\n  const bLength = bDigits.length;\n  for (let i = 0; i < aLength; i++) {\n    for (let j = 0; j < bLength; j++) {\n      if (aDigits[i] === bDigits[j]) {\n        result.push(aDigits[i]);\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
