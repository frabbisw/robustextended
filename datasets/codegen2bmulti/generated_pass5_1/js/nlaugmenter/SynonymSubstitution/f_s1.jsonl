{"task_id": "JavaScript/0", "prompt": "/* determine if in given list of numbers, are any two numbers close to each early than \n   establish threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "/* determine if in given list of numbers, are any two numbers close to each early than \n   establish threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        count++\n      }\n    }\n  }\n  return count > 0\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        count++\n      }\n    }\n  }\n  return count > 0\n}\n\n/*\n  >>> hasCloseElements2([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements2([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        count++\n      }\n    }\n  }\n  return count > 0\n}\n\n/*\n  >>> hasCloseElements3([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements3([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        count++\n      }\n    }\n  }\n  return count > 0\n}\n\n/*\n  >>> hasCloseElements4([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements4([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        count++\n      }\n    }\n  }\n  return count > 0\n}\n\n/*\n  >>> hasCloseElements5([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements5([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        count++\n      }\n    }\n  }\n  return count > 0\n}\n\n/*\n  >>> hasCloseElements6([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements6([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        count++\n      }\n    }\n  }\n  return count > 0\n}\n\n/*\n  >>> hasCloseElements7([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements7([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        count++\n      }\n    }\n  }\n  return count > 0\n}\n\n/*\n  >>> hasCloseElements8([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements8([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements9 = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* input signal to this function is a drawstring incorporate multiple group of cuddle parentheses. Your finish is to \n   separate those group into freestanding strings and return the list of those. \n   disjoined group are balanced (each open brace is by rights closed) and not nested within each other \n   neglect any quad in the stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "/* input signal to this function is a drawstring incorporate multiple group of cuddle parentheses. Your finish is to \n   separate those group into freestanding strings and return the list of those. \n   disjoined group are balanced (each open brace is by rights closed) and not nested within each other \n   neglect any quad in the stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let paren_list = [];\n  let paren_count = 0;\n  let current_paren = '';\n  let current_paren_count = 0;\n  let current_paren_string = '';\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_end_length = 0;\n  let current_paren_string_end_index_end = 0;\n  let current_paren_string_end_length_end = 0;\n  let current_paren_string_end_index_end_end = 0;\n  let current_paren_string_end_length_end_end = 0;\n  let current_paren_string_end_index_end_end_end = 0;\n  let current_paren_string_end_length_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end = 0;\n  let current_paren_string_end_length_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end = 0;\n  let current_paren_string_end_length_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end = 0;\n  let current_paren_string_end_length_end_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_length_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_length_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_length_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_length_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_length_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_length_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_length_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_length_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_length_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* screen if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the shortest palindrome that begin with a provide string.\n   Algorithm theme is simple: \n   - find oneself the long postfix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/* screen if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the shortest palindrome that begin with a provide string.\n   Algorithm theme is simple: \n   - find oneself the long postfix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string === '') {\n    return '';\n  }\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const result = postfix.substring(0, prefix.length);\n  return result;\n}\n\n/*\n *  test cases\n *  >>> makePalindrome('cat')\n *  'catac'\n *  >>> makePalindrome('cata')\n *  'catac'\n *  >>> makePalindrome('catcat')\n *  'catcat'\n *  >>> makePalindrome('catcatcat')\n *  'catcatcat'\n *  >>> makePalindrome('catcatcatcat')\n *  'catcatcatcat'\n *  >>> makePalindrome('catcatcatcatcat')\n *  'catcatcatcatcat'\n *  >>> makePalindrome('catcatcatcatcatcat')\n *  'catcatcatcatcatcat'\n *  >>> makePalindrome('catcatcatcatcatcatcat')\n *  'catcatcatcatcatcatcat'\n *  >>> makePalindrome('catcatcatcatcatcatcatcat')\n *  'catcatcatcatcatcatcatcat'\n *  >>> makePalindrome('catcatcatcatcatcatcatcatcat')\n *  'catcatcatcatcatcatcatcatcat'\n *  >>> makePalindrome('catcatcatcatcatcatcatcatcatcat')\n *  'catcatcatcatcatcatcatcatcatcat'\n *  >>> makePalindrome('catcatcatcatcatcatcatcatcatcatcat')\n *  'catcatcatcatcatcatcatcatcatcatcat'\n *  >>> makePalindrome('catcatcatcatcatcatcatcatcatcatcatcat')\n *  'catcatcatcatcatcatcatcatcatcatcatcat'\n *  >>> makePalindrome('catcatcatcatcatcatcatcatcatcatcatcatcat')\n *  'catcatcatcatcatcatcatcatcatcatcatcatcat'\n *  >>> makePalindrome('catcatcatcatcatcatcatcatcatcatcatcatcatcat')\n *  'catcatcatcatcatcatcatcatcatcatcatcatcatcat'\n *  >>> makePalindrome('catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat')\n *  'catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat'\n *  >>> makePalindrome('catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat')\n *  'catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat'\n *  >>> makePalindrome('catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/100", "prompt": "/*\n  establish a positive integer n, you have to cause a down of n levels of stones. \n   The first floor have n rock. \n   The number of stone in the following level is: \n       - the next odd phone number if n is odd. \n       - the next tied issue if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i represents the number of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "/*\n  establish a positive integer n, you have to cause a down of n levels of stones. \n   The first floor have n rock. \n   The number of stone in the following level is: \n       - the next odd phone number if n is odd. \n       - the next tied issue if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i represents the number of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [n];\n  let result = [];\n  let i = 0;\n  while (i < n) {\n    let nextLevel = [];\n    let nextLevelCount = [];\n    let nextLevelCount2 = [];\n    let nextLevelCount3 = [];\n    let nextLevelCount4 = [];\n    let nextLevelCount5 = [];\n    let nextLevelCount6 = [];\n    let nextLevelCount7 = [];\n    let nextLevelCount8 = [];\n    let nextLevelCount9 = [];\n    let nextLevelCount10 = [];\n    let nextLevelCount11 = [];\n    let nextLevelCount12 = [];\n    let nextLevelCount13 = [];\n    let nextLevelCount14 = [];\n    let nextLevelCount15 = [];\n    let nextLevelCount16 = [];\n    let nextLevelCount17 = [];\n    let nextLevelCount18 = [];\n    let nextLevelCount19 = [];\n    let nextLevelCount20 = [];\n    let nextLevelCount21 = [];\n    let nextLevelCount22 = [];\n    let nextLevelCount23 = [];\n    let nextLevelCount24 = [];\n    let nextLevelCount25 = [];\n    let nextLevelCount26 = [];\n    let nextLevelCount27 = [];\n    let nextLevelCount28 = [];\n    let nextLevelCount29 = [];\n    let nextLevelCount30 = [];\n    let nextLevelCount31 = [];\n    let nextLevelCount32 = [];\n    let nextLevelCount33 = [];\n    let nextLevelCount34 = [];\n    let nextLevelCount35 = [];\n    let nextLevelCount36 = [];\n    let nextLevelCount37 = [];\n    let nextLevelCount38 = [];\n    let nextLevelCount39 = [];\n    let nextLevelCount40 = [];\n    let nextLevelCount41 = [];\n    let nextLevelCount42 = [];\n    let nextLevelCount43 = [];\n    let nextLevelCount44 = [];\n    let nextLevelCount45 = [];\n    let nextLevelCount46 = [];\n    let nextLevelCount47 = [];\n    let nextLevelCount48 = [];\n    let nextLevelCount49 = [];\n    let nextLevelCount50 = [];\n    let nextLevelCount51 = [];\n    let nextLevelCount52 = [];\n    let nextLevelCount53 = [];\n    let nextLevelCount54 = [];\n    let nextLevelCount55 = [];\n    let nextLevelCount56 = [];\n    let nextLevelCount57 = [];\n    let nextLevelCount58 = [];\n    let nextLevelCount59 = [];\n    let nextLevelCount60 = [];\n    let nextLevelCount61 = [];\n    let nextLevelCount62 = [];\n    let nextLevelCount63 = [];\n    let nextLevelCount64 = [];\n    let nextLevelCount65 = [];\n    let nextLevelCount66 = [];\n    let nextLevelCount67 = [];\n    let nextLevelCount68 = [];\n    let nextLevelCount69 = [];\n    let nextLevelCount70 = [];\n    let nextLevelCount71 = [];\n    let nextLevelCount72 = [];\n    let nextLevelCount73 = [];\n    let nextLevelCount74 = [];\n    let nextLevelCount75 = [];\n    let nextLevelCount76 = [];\n    let nextLevelCount77 = [];\n    let nextLevelCount78 = [];\n    let nextLevelCount79 = [];\n    let nextLevelCount80 = [];\n    let nextLevelCount81 = [];\n    let nextLevelCount82 = [];\n    let nextLevelCount83 = [];\n    let nextLevelCount84 = [];\n    let nextLevelCount85 = [];\n    let nextLevelCount86 = [];\n    let nextLevelCount87 = [];\n    let nextLevelCount88 = [];\n    let nextLevelCount89 = [];\n    let nextLevelCount90 = [];\n    let nextLevelCount91 = [];\n    let nextLevelCount92 = [];\n    let nextLevelCount93 = [];\n    let nextLevelCount94 = [];\n    let nextLevelCount95 = [];\n    let nextLevelCount96 = [];\n    let nextLevelCount97 = [];\n    let nextLevelCount98 = [];\n    let nextLevelCount99 = [];\n    let nextLevelCount100 = [];\n    let nextLevelCount101 = [];\n    let nextLevelCount102 = [];\n    let nextLevelCount103 = [];\n    let nextLevelCount104 = [];\n    let nextLevelCount105 = [];\n    let nextLevelCount106 = [];\n    let nextLevelCount107 = [];\n    let nextLevelCount108 = [];\n    let nextLevelCount109 = [];\n    let nextLevelCount110 = [];\n    let nextLevelCount111 = [];\n    let nextLevelCount112 = [];\n    let nextLevelCount113 = [];\n    let nextLevelCount114 = [];\n    let nextLevelCount115 = [];\n    let nextLevelCount116 = [];\n    let nextLevelCount117 = [];\n    let nextLevelCount118 = [];\n    let nextLevelCount119 = [];\n    let nextLevelCount120 = [];\n    let nextLevelCount121 = [];\n    let nextLevelCount122 = [];\n    let nextLevelCount123 = [];\n    let nextLevelCount124 = [];\n    let nextLevelCount125 = [];\n    let nextLevelCount126 = [];\n    let nextLevelCount127 = [];\n    let nextLevelCount128 = [];\n    let nextLevelCount129 = [];\n    let nextLevelCount130 = [];\n    let nextLevelCount131 = [];\n    let nextLevelCount132 = [];\n    let nextLevelCount133 = [];\n    let nextLevelCount134 = [];\n    let nextLevelCount135 = [];\n    let nextLevelCount136 = [];\n    let nextLevelCount137 = [];\n    let nextLevelCount138 = [];\n    let nextLevelCount139 = [];\n    let nextLevelCount140 = [];\n    let nextLevelCount141 = [];\n    let nextLevelCount142 = [];\n    let nextLevelCount143 = [];\n    let nextLevelCount144 = [];\n    let nextLevelCount145 = [];\n    let nextLevelCount146 = [];\n    let nextLevelCount147 = [];\n    let nextLevelCount148 = [];\n    let nextLevelCount149 = [];\n    let nextLevelCount150 = [];\n    let nextLevelCount151", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be establish a string of news separate by comma or space. Your task is \n   to split the bowed stringed instrument into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "/*\n  You will be establish a string of news separate by comma or space. Your task is \n   to split the bowed stringed instrument into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = [];\n  let word = '';\n  let index = 0;\n  let lastIndex = 0;\n  let isWord = false;\n  while (index < s.length) {\n    if (s[index] === ',' || s[index] ==='') {\n      if (isWord) {\n        words.push(word);\n        word = '';\n        isWord = false;\n      }\n      lastIndex = index;\n    } else {\n      if (!isWord) {\n        word += s[index];\n        isWord = true;\n      }\n    }\n    index++;\n  }\n  if (isWord) {\n    words.push(word);\n  }\n  return words;\n};\n\nmodule.exports = wordsString;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This affair takes two convinced number x and y and return the \n   biggest even integer number that cost in the compass [x, y] inclusive. If \n   there's no such numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "/*This affair takes two convinced number x and y and return the \n   biggest even integer number that cost in the compass [x, y] inclusive. If \n   there's no such numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let max = 0;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0) {\n      max = Math.max(max, i);\n    }\n  }\n  return max;\n};\n\nmodule.exports = {\n  chooseNum\n};\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/103", "prompt": "/*You are establish two positive integer n and m, and your task be to calculate the \n   average of the integer from n through m (including n and m). \n   Round the solution to the nearest integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "/*You are establish two positive integer n and m, and your task be to calculate the \n   average of the integer from n through m (including n and m). \n   Round the solution to the nearest integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1);\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integer x. return a classify list of all \n   component that acceptn't any even digit. \n\n   Note: Returned list should be sorted in increase decree. \n  \n   For case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "/*Given a list of positive integer x. return a classify list of all \n   component that acceptn't any even digit. \n\n   Note: Returned list should be sorted in increase decree. \n  \n   For case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const current = x[i];\n    const isEven = current % 2 === 0;\n    if (isEven) {\n      result.push(current);\n    }\n  }\n  return result;\n};\n\nconst test = () => {\n  const result = uniqueDigits([15, 33, 1422, 1]);\n  console.log(result);\n};\n\nif (module === require.main) {\n  test();\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  establish an array of integer, sort the integer that be between 1 and 9 inclusive, \n   overrule the resulting array, and then supplant each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "/*\n  establish an array of integer, sort the integer that be between 1 and 9 inclusive, \n   overrule the resulting array, and then supplant each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  arr.reverse();\n  return arr.map((num) => {\n    return `${num}`;\n  });\n};\n\nconst byName = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  arr.reverse();\n  return arr.map((num) => {\n    return `${num}`;\n  });\n};\n\nconst byNameAndLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  arr.reverse();\n  return arr.map((num) => {\n    return `${num}`;\n  });\n};\n\nconst byNameAndLengthAndLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  arr.reverse();\n  return arr.map((num) => {\n    return `${num}`;\n  });\n};\n\nconst byLengthAndName = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  arr.reverse();\n  return arr.map((num) => {\n    return `${num}`;\n  });\n};\n\nconst byLengthAndNameAndLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  arr.reverse();\n  return arr.map((num) => {\n    return `${num}`;\n  });\n};\n\nconst byLengthAndNameAndLengthAndLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  arr.reverse();\n  return arr.map((num) => {\n    return `${num}`;\n  });\n};\n\nconst byLengthAndNameAndLengthAndLengthAndLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  arr.reverse();\n  return arr.map((num) => {\n    return `${num}`;\n  });\n};\n\nmodule.exports = {\n  byLength,\n  byName,\n  byNameAndLength,\n  byNameAndLengthAndLength,\n  byNameAndLengthAndLengthAndLength,\n  byLengthAndName,\n  byLengthAndNameAndLength,\n  byLengthAndNameAndLengthAndLength,\n  byLengthAndNameAndLengthAndLengthAndLength,\n  byLengthAndNameAndLengthAndLengthAndLengthAndLength\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/106", "prompt": "/* enforce the function f that take n as a argument, \n   and fall a list of size n, such that the value of the element at exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i differently. \n   i get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "/* enforce the function f that take n as a argument, \n   and fall a list of size n, such that the value of the element at exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i differently. \n   i get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const f = (n) => {\n    if (n < 1) {\n      return [];\n    }\n    const f = (n) => {\n      if (n < 1) {\n        return [];\n      }\n      const f = (n) => {\n        if (n < 1) {\n          return [];\n        }\n        const f = (n) => {\n          if (n < 1) {\n            return [];\n          }\n          const f = (n) => {\n            if (n < 1) {\n              return [];\n            }\n            const f = (n) => {\n              if (n < 1) {\n                return [];\n              }\n              const f = (n) => {\n                if (n < 1) {\n                  return [];\n                }\n                const f = (n) => {\n                  if (n < 1) {\n                    return [];\n                  }\n                  const f = (n) => {\n                    if (n < 1) {\n                      return [];\n                    }\n                    const f = (n) => {\n                      if (n < 1) {\n                        return [];\n                      }\n                      const f = (n) => {\n                        if (n < 1) {\n                          return [];\n                        }\n                        const f = (n) => {\n                          if (n < 1) {\n                            return [];\n                          }\n                          const f = (n) => {\n                            if (n < 1) {\n                              return [];\n                            }\n                            const f = (n) => {\n                              if (n < 1) {\n                                return [];\n                              }\n                              const f = (n) => {\n                                if (n < 1) {\n                                  return [];\n                                }\n                                const f = (n) => {\n                                  if (n < 1) {\n                                    return [];\n                                  }\n                                  const f = (n) => {\n                                    if (n < 1) {\n                                      return [];\n                                    }\n                                    const f = (n) => {\n                                      if (n < 1) {\n                                        return [];\n                                      }\n                                      const f = (n) => {\n                                        if (n < 1) {\n                                          return [];\n                                        }\n                                        const f = (n) => {\n                                          if (n < 1) {\n                                            return [];\n                                          }\n                                          const f = (n) => {\n                                            if (n < 1) {\n                                              return [];\n                                            }\n                                            const f = (n) => {\n                                              if (n < 1) {\n                                                return [];\n                                              }\n                                              const f = (n) => {\n                                                if (n < 1) {\n                                                  return [];\n                                                }\n                                                const f = (n) => {\n                                                  if (n < 1) {\n                                                    return [];\n                                                  }\n                                                  const f = (n) => {\n                                                    if (n < 1) {\n                                                      return [];\n                                                    }\n                                                    const f = (n) => {\n                                                      if (n < 1) {\n                                                        return [];\n                                                      }\n                                                      const f = (n) => {\n                                                        if (n < 1) {\n                                                          return [];\n                                                        }\n                                                        const f = (n) => {\n                                                          if (n < 1) {\n                                                            return [];\n                                                          }\n                                                          const f = (n) => {\n                                                            if (n < 1) {\n                                                              return [];\n                                                            }\n                                                            const f = (n) => {\n                                                              if (n < 1) {\n                                                                return [];\n                                                              }\n                                                              const f = (n) => {\n                                                                if (n < 1) {\n                                                                  return [];\n                                                                }\n                                                                const f = (n) => {\n                                                                  if (n < 1) {\n                                                                    return [];\n                                                                  }\n                                                                  const f = (n) => {\n                                                                    if (n < 1) {\n                                                                      return [];\n                                                                    }\n                                                                    const f = (n) => {\n                                                                      if (n < 1) {\n                                                                        return [];\n                                                                      }\n                                                                      const f = (n) => {\n                                                                        if (n < 1) {\n                                                                          return [];\n                                                                        }\n                                                                        const f = (n) => {\n                                                                          if (n < 1) {\n                                                                            return [];\n                                                                          }\n                                                                          const f = (n) => {\n                                                                            if (n < 1) {\n                                                                              return [];\n                                                                            }\n                                                                            const f = (n) => {\n                                                                              if (n < 1) {\n                                                                                return [];\n                                                                              }\n                                                                              const f = (n) => {\n                                                                                if (n < 1) {\n                                                                                  return [];\n                                                                                }\n                                                                                const f = (n) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  establish a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindromes that hang within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  establish a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindromes that hang within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let evenPalindrome = 0;\n  let oddPalindrome = 0;\n  let evenPalindromeCount = 0;\n  let oddPalindromeCount = 0;\n  let evenPalindromeIndex = 0;\n  let oddPalindromeIndex = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart = 0;\n  let oddPalindromeStart = 0;\n  let evenPalindromeEnd = 0;\n  let oddPalindromeEnd = 0;\n  let evenPalindromeStart =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  publish a function countNums which take an array of integer and reappearance \n   the numeral of elements which have a kernel of digit > 0. \n   If a number be damaging, then its first signed finger will be negative: \n   e.g. -123 has signed digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "/*\n  publish a function countNums which take an array of integer and reappearance \n   the numeral of elements which have a kernel of digit > 0. \n   If a number be damaging, then its first signed finger will be negative: \n   e.g. -123 has signed digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums2 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n      if (arr[i] > 1) {\n        arr[i] = -arr[i];\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums3 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n      if (arr[i] > 1) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 2) {\n        arr[i] = -arr[i];\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums4 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n      if (arr[i] > 1) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 2) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 3) {\n        arr[i] = -arr[i];\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums5 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n      if (arr[i] > 1) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 2) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 3) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 4) {\n        arr[i] = -arr[i];\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums6 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n      if (arr[i] > 1) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 2) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 3) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 4) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 5) {\n        arr[i] = -arr[i];\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums7 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n      if (arr[i] > 1) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 2) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 3) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 4) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 5) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 6) {\n        arr[i] = -arr[i];\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums8 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n      if (arr[i] > 1) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 2) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 3) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 4) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 5) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 6) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 7) {\n        arr[i] = -arr[i];\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums9 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n      if (arr[i] > 1) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 2) {\n        arr[i] = -arr[i];\n      }\n      if (arr[i] > 3) {\n        arr[i] =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We suffer an array 'arr' of N integer arr[1], arr[2],... , arr[N].The\n   numbers pool in the array will be randomly ordered. Your task is to determine if \n   it is potential to get an array screen in non - decreasing ordering by performing \n   the following operation on the yield array: \n       You are allowed to perform proper shift mathematical process any number of time. \n  \n   One right chemise operation intend shifting all elements of the array by one \n   placement in the correct focus. The last chemical element of the array will be act to \n   the starting position in the array i.e. 0th exponent. \n\n   If it be potential to obtain the grouped array by performing the above operation \n   then return true else return false. \n   If the give array is empty then return truthful. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "/*We suffer an array 'arr' of N integer arr[1], arr[2],..., arr[N].The\n   numbers pool in the array will be randomly ordered. Your task is to determine if \n   it is potential to get an array screen in non - decreasing ordering by performing \n   the following operation on the yield array: \n       You are allowed to perform proper shift mathematical process any number of time. \n  \n   One right chemise operation intend shifting all elements of the array by one \n   placement in the correct focus. The last chemical element of the array will be act to \n   the starting position in the array i.e. 0th exponent. \n\n   If it be potential to obtain the grouped array by performing the above operation \n   then return true else return false. \n   If the give array is empty then return truthful. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let arrLength = arr.length;\n  let arrTemp = arr.slice();\n  let arrTempLength = arrTemp.length;\n  let arrTempIndex = 0;\n  let arrTempIndexLength = arrTempIndex;\n  let arrTempIndexTemp = arrTempIndex;\n  let arrTempIndexTempLength = arrTempIndexTemp;\n  let arrTempIndexTempTemp = arrTempIndexTemp;\n  let arrTempIndexTempTempLength = arrTempIndexTempTemp;\n  let arrTempIndexTempTempTemp = arrTempIndexTempTemp;\n  let arrTempIndexTempTempTempLength = arrTempIndexTempTempTemp;\n  let arrTempIndexTempTempTempTemp = arrTempIndexTempTempTemp;\n  let arrTempIndexTempTempTempTempLength = arrTempIndexTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTemp = arrTempIndexTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempLength = arrTempIndexTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTemp = arrTempIndexTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTempTempTemp;\n  let arrTempIndexTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempIndexTempTempTempTempTempTempTempTempTemp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* input signal are two strings a and b consist merely of 1s and zero. \n   do binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "/* input signal are two strings a and b consist merely of 1s and zero. \n   do binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1'\n      } else {\n        result += '0'\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0'\n      } else {\n        result += '1'\n      }\n    }\n  }\n  return result\n}\n\n/*\n  input: a string a consisting of 1s and 0s.\n  output: a string b consisting of 1s and 0s.\n  do a binary XOR on a and b and return result.\n  */\nconst binaryXor = (a) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (a[i] === '1') {\n        result += '1'\n      } else {\n        result += '0'\n      }\n    } else {\n      if (a[i] === '1') {\n        result += '0'\n      } else {\n        result += '1'\n      }\n    }\n  }\n  return result\n}\n\n/*\n  input: a string a consisting of 1s and 0s.\n  output: a string b consisting of 1s and 0s.\n  do a binary XOR on a and b and return result.\n  */\nconst binaryXor2 = (a) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (a[i] === '1') {\n        result += '1'\n      } else {\n        result += '0'\n      }\n    } else {\n      if (a[i] === '1') {\n        result += '0'\n      } else {\n        result += '1'\n      }\n    }\n  }\n  return result\n}\n\n/*\n  input: a string a consisting of 1s and 0s.\n  output: a string b consisting of 1s and 0s.\n  do a binary XOR on a and b and return result.\n  */\nconst binaryXor3 = (a) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (a[i] === '1') {\n        result += '1'\n      } else {\n        result += '0'\n      }\n    } else {\n      if (a[i] === '1') {\n        result += '0'\n      } else {\n        result += '1'\n      }\n    }\n  }\n  return result\n}\n\n/*\n  input: a string a consisting of 1s and 0s.\n  output: a string b consisting of 1s and 0s.\n  do a binary XOR on a and b and return result.\n  */\nconst binaryXor4 = (a) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (a[i] === '1') {\n        result += '1'\n      } else {\n        result += '0'\n      }\n    } else {\n      if (a[i] === '1') {\n        result += '0'\n      } else {\n        result += '1'\n      }\n    }\n  }\n  return result\n}\n\n/*\n  input: a string a consisting of 1s and 0s.\n  output: a string b consisting of 1s and 0s.\n  do a binary XOR on a and b and return result.\n  */\nconst binaryXor5 = (a) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (a[i] === '1') {\n        result += '1'\n      } else {\n        result += '0'\n      }\n    } else {\n      if (a[i] === '1') {\n        result += '0'\n      } else {\n        result += '1'\n      }\n    }\n  }\n  return result\n}\n\n/*\n  input: a string a consisting of 1s and 0s.\n  output: a string b consisting of 1s and 0s.\n  do a binary XOR on a and b and return result.\n  */\nconst binaryXor6 = (a) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (a[i] === '1') {\n        result += '1'\n      } else {\n        result += '0'\n      }\n    } else {\n      if (a[i] === '1') {\n        result += '0'\n      } else {\n        result += '1'\n      }\n    }\n  }\n  return result\n}\n\n/*\n  input: a string a consisting of 1s and 0s.\n  output: a string b consisting of 1s and 0s.\n  do a binary XOR on a and b and return result.\n  */\nconst binaryXor7 = (a) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (a[i] === '1') {\n        result += '1'\n      } else {\n        result += '0'\n      }\n    } else {\n      if (a[i] === '1') {\n        result += '0'\n      } else {\n        result += '1'\n      }\n    }\n  }\n  return result\n}\n\n/*\n  input: a string a consisting of 1s and 0s.\n  output: a string b consisting of 1s and 0s.\n  do", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this trouble, you will implement a routine that takes two tilt of issue, \n   and determines whether it is possible to do an exchange of elements \n   between them to hold lst1 a list of only even numbers. \n   There is no terminus ad quem on the phone number of exchanged elements between lst1 and lst2.\n   If it be possible to exchange elements between the lst1 and lst2 to lay down \n   all the chemical element of lst1 to be even, return \" YES \". \n   differently, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "/*In this trouble, you will implement a routine that takes two tilt of issue, \n   and determines whether it is possible to do an exchange of elements \n   between them to hold lst1 a list of only even numbers. \n   There is no terminus ad quem on the phone number of exchanged elements between lst1 and lst2.\n   If it be possible to exchange elements between the lst1 and lst2 to lay down \n   all the chemical element of lst1 to be even, return \" YES \". \n   differently, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) return \"NO\";\n  let i = 0;\n  while (i < lst1.length) {\n    if (lst1[i]!== lst2[i]) return \"NO\";\n    i++;\n  }\n  return \"YES\";\n};\n\nmodule.exports = exchange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a bowed stringed instrument representing a distance separate small letter letter, return a dictionary \n   of the letter with the most repetition and control the correspond count. \n   If respective letters experience the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "/*Given a bowed stringed instrument representing a distance separate small letter letter, return a dictionary \n   of the letter with the most repetition and control the correspond count. \n   If respective letters experience the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letter = '';\n  let count = 0;\n  let repeated = 0;\n  let repeatedLetter = '';\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;\n  let repeatedLetterCount = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Tnecessitate \n   We are given two string s and c, you experience to erase all the characters in s that are equal to any fictional character in c\n   then check if the resultant role string be palindrome. \n   A drawstring is called palindrome if it read the same backward as ahead. \n   You should return a tuple control the result chain and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "/*Tnecessitate \n   We are given two string s and c, you experience to erase all the characters in s that are equal to any fictional character in c\n   then check if the resultant role string be palindrome. \n   A drawstring is called palindrome if it read the same backward as ahead. \n   You should return a tuple control the result chain and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = [];\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[j]) {\n      i++;\n      j--;\n    } else {\n      if (isPalindrome) {\n        result.push(s.substring(i, j + 1));\n      }\n      isPalindrome =!isPalindrome;\n      i++;\n      j--;\n    }\n  }\n  if (isPalindrome) {\n    result.push(s.substring(i, j + 1));\n  }\n  return result;\n};\n\nconst test = () => {\n  let s = \"abcde\";\n  let c = \"ae\";\n  let result = reverseDelete(s, c);\n  console.log(result);\n};\n\ntest();\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each bowed stringed instrument dwell of lone digit, return a list.\n   Each element i of the end product should constitute \" the numeral of odd component in the \n   chain i of the remark. \" where all the i's should be replaced by the phone number \n   of odd digits in the i'th drawstring of the stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "/*Given a list of strings, where each bowed stringed instrument dwell of lone digit, return a list.\n   Each element i of the end product should constitute \" the numeral of odd component in the \n   chain i of the remark. \" where all the i's should be replaced by the phone number \n   of odd digits in the i'th drawstring of the stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i].split(\" \").map(x => parseInt(x, 10)).filter(x => x % 2 === 1);\n    let str = lst[i].split(\" \").map(x => x.replace(/[0-9]/g, \"\")).filter(x => x.length % 2 === 1);\n    let strs = str.map(x => x.split(\"\").map(x => x.replace(/[0-9]/g, \"\")));\n    let strs2 = strs.map(x => x.map(x => x.join(\"\")));\n    let strs3 = strs2.map(x => x.map(x => x.join(\"\")));\n    let strs4 = strs3.map(x => x.map(x => x.join(\"\")));\n    let strs5 = strs4.map(x => x.map(x => x.join(\"\")));\n    let strs6 = strs5.map(x => x.map(x => x.join(\"\")));\n    let strs7 = strs6.map(x => x.map(x => x.join(\"\")));\n    let strs8 = strs7.map(x => x.map(x => x.join(\"\")));\n    let strs9 = strs8.map(x => x.map(x => x.join(\"\")));\n    let strs10 = strs9.map(x => x.map(x => x.join(\"\")));\n    let strs11 = strs10.map(x => x.map(x => x.join(\"\")));\n    let strs12 = strs11.map(x => x.map(x => x.join(\"\")));\n    let strs13 = strs12.map(x => x.map(x => x.join(\"\")));\n    let strs14 = strs13.map(x => x.map(x => x.join(\"\")));\n    let strs15 = strs14.map(x => x.map(x => x.join(\"\")));\n    let strs16 = strs15.map(x => x.map(x => x.join(\"\")));\n    let strs17 = strs16.map(x => x.map(x => x.join(\"\")));\n    let strs18 = strs17.map(x => x.map(x => x.join(\"\")));\n    let strs19 = strs18.map(x => x.map(x => x.join(\"\")));\n    let strs20 = strs19.map(x => x.map(x => x.join(\"\")));\n    let strs21 = strs20.map(x => x.map(x => x.join(\"\")));\n    let strs22 = strs21.map(x => x.map(x => x.join(\"\")));\n    let strs23 = strs22.map(x => x.map(x => x.join(\"\")));\n    let strs24 = strs23.map(x => x.map(x => x.join(\"\")));\n    let strs25 = strs24.map(x => x.map(x => x.join(\"\")));\n    let strs26 = strs25.map(x => x.map(x => x.join(\"\")));\n    let strs27 = strs26.map(x => x.map(x => x.join(\"\")));\n    let strs28 = strs27.map(x => x.map(x => x.join(\"\")));\n    let strs29 = strs28.map(x => x.map(x => x.join(\"\")));\n    let strs30 = strs29.map(x => x.map(x => x.join(\"\")));\n    let strs31 = strs30.map(x => x.map(x => x.join(\"\")));\n    let strs32 = strs31.map(x => x.map(x => x.join(\"\")));\n    let strs33 = strs32.map(x => x.map(x => x.join(\"\")));\n    let strs34 = strs33.map(x => x.map(x => x.join(\"\")));\n    let strs35 = strs34.map(x => x.map(x => x.join(\"\")));\n    let strs36 = strs35.map(x => x.map(x => x.join(\"\")));\n    let strs37 = strs36.map(x => x.map(x => x.join(\"\")));\n    let strs38 = strs37.map(x => x.map(x => x.join(\"\")));\n    let strs39 = strs38.map(x => x.map(x => x.join(\"\")));\n    let strs40 = strs39.map(x => x.map(x => x.join(\"\")));\n    let strs41 = strs40.map(x => x.map(x => x.join(\"\")));\n    let strs42 = strs41.map(x => x.map(x => x.join(\"\")));\n    let strs43 = strs42.map(x => x.map(x => x.join(\"\")));\n    let strs44 = strs43.map(x => x.map(x => x.join(\"\")));\n    let strs45 = strs44.map(x => x.map(x => x.join(\"\")));\n    let strs46 = strs45.map(x => x.map(x =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  establish an array of integer nums, find the minimal union of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "/*\n  establish an array of integer nums, find the minimal union of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  let min = nums[0];\n  let minSum = nums[0];\n  let curSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    curSum += nums[i];\n    if (curSum < minSum) {\n      minSum = curSum;\n      min = nums[i];\n    }\n    if (curSum > minSum) {\n      minSum = curSum;\n      min = nums[i];\n    }\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are establish a rectangular grid of well. Each quarrel represent a individual well, \n   and each 1 in a quarrel stage a individual unit of water system. \n   Each well has a corresponding bucket that can be used to distill water from it, \n   and all buckets consume the like capacity.\n   Your task is to practice the bucket to evacuate the wells. \n   end product the number of time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "/*\n  You are establish a rectangular grid of well. Each quarrel represent a individual well, \n   and each 1 in a quarrel stage a individual unit of water system. \n   Each well has a corresponding bucket that can be used to distill water from it, \n   and all buckets consume the like capacity.\n   Your task is to practice the bucket to evacuate the wells. \n   end product the number of time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const bucket_capacity = capacity;\n  const grid_length = grid.length;\n  const grid_width = grid[0].length;\n  const grid_height = grid.length;\n  const grid_height_width = grid_height * grid_width;\n  const grid_height_width_length = grid_height_width * grid_length;\n\n  // bucket_capacity is the maximum capacity of a bucket\n  const bucket_capacity_max = Math.max(...grid.map((row) => row.map((cell) => cell)));\n\n  // bucket_capacity_max is the maximum capacity of a bucket\n  const bucket_capacity_max_index = Math.max(...grid.map((row) => row.map((cell) => cell))).indexOf(bucket_capacity_max);\n\n  // bucket_capacity_max_index is the maximum capacity of a bucket\n  const bucket_capacity_max_index_index = Math.max(...grid.map((row) => row.map((cell) => cell))).indexOf(bucket_capacity_max);\n\n  // bucket_capacity_max_index is the maximum capacity of a bucket\n  const bucket_capacity_max_index_index_index = Math.max(...grid.map((row) => row.map((cell) => cell))).indexOf(bucket_capacity_max);\n\n  // bucket_capacity_max_index is the maximum capacity of a bucket\n  const bucket_capacity_max_index_index_index_index = Math.max(...grid.map((row) => row.map((cell) => cell))).indexOf(bucket_capacity_max);\n\n  // bucket_capacity_max_index is the maximum capacity of a bucket\n  const bucket_capacity_max_index_index_index_index_index = Math.max(...grid.map((row) => row.map((cell) => cell))).indexOf(bucket_capacity_max);\n\n  // bucket_capacity_max_index is the maximum capacity of a bucket\n  const bucket_capacity_max_index_index_index_index_index_index = Math.max(...grid.map((row) => row.map((cell) => cell))).indexOf(bucket_capacity_max);\n\n  // bucket_capacity_max_index is the maximum capacity of a bucket\n  const bucket_capacity_max_index_index_index_index_index_index_index = Math.max(...grid.map((row) => row.map((cell) => cell))).indexOf(bucket_capacity_max);\n\n  // bucket_capacity_max_index is the maximum capacity of a bucket\n  const bucket_capacity_max_index_index_index_index_index_index_index_index = Math.max(...grid.map((row) => row.map((cell) => cell))).indexOf(bucket_capacity_max);\n\n  // bucket_capacity_max_index is the maximum capacity of a bucket\n  const bucket_capacity_max_index_index_index_index_index_index_index_index_index = Math.max(...grid.map((row) => row.map((cell) => cell))).indexOf(bucket_capacity_max);\n\n  // bucket_capacity_max_index is the maximum capacity of a bucket\n  const bucket_capacity_max_index_index_index_index_index_index_index_index_index_index = Math.max(...grid.map((row) => row.map((cell) => cell))).indexOf(bucket_capacity_max);\n\n  // bucket_capacity_max_index is the maximum capacity of a bucket\n  const bucket_capacity_max_index_index_index_index_index_index_index_index_index_index_index = Math.max(...grid.map((row) => row.map((cell) => cell))).indexOf(bucket_capacity_max);\n\n  // bucket_capacity_max_index is the maximum capacity of a bucket\n  const bucket_capacity_max_index_index_index_index_index_index_index_index_index_index_index_index_index = Math.max(...grid.map((row) => row.map((cell) => cell))).indexOf(bucket_capacity_max);\n\n  // bucket_capacity_max_index is the maximum capacity of a bucket\n  const bucket_capacity_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = Math.max(...grid.map((row) => row.map((cell) => cell))).indexOf(bucket_capacity_max);\n\n  // bucket_capacity_max_index is the maximum capacity of a bucket\n  const bucket_capacity_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you suffer to classify an array of non - damaging integer according to \n   numeral of ones in their binary theatrical performance in ascending order. \n   For like act of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  In this Kata, you suffer to classify an array of non - damaging integer according to \n   numeral of ones in their binary theatrical performance in ascending order. \n   For like act of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice(0);\n  let sortedArr = [];\n  let sortedIndex = 0;\n  let sortedCount = 0;\n  let sortedIndexCount = 0;\n  let sortedIndexMax = 0;\n  let sortedIndexMin = 0;\n  let sortedIndexMaxCount = 0;\n  let sortedIndexMinCount = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;\n  let sortedIndexMinCountMax = 0;\n  let sortedIndexMaxCountMin = 0;\n  let sortedIndexMinCountMin = 0;\n  let sortedIndexMaxCountMax = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a lifelike issue n, you have been tax to follow through \n   a function that returns a list of all words from bowed stringed instrument s that control precisely \n   n consonants, in order these lyric appear in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may wear the input chain contains only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "/*Given a string s and a lifelike issue n, you have been tax to follow through \n   a function that returns a list of all words from bowed stringed instrument s that control precisely \n   n consonants, in order these lyric appear in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may wear the input chain contains only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let s1 = \"\"\n  let s2 = \"\"\n  let s3 = \"\"\n  let s4 = \"\"\n  let s5 = \"\"\n  let s6 = \"\"\n  let s7 = \"\"\n  let s8 = \"\"\n  let s9 = \"\"\n  let s10 = \"\"\n  let s11 = \"\"\n  let s12 = \"\"\n  let s13 = \"\"\n  let s14 = \"\"\n  let s15 = \"\"\n  let s16 = \"\"\n  let s17 = \"\"\n  let s18 = \"\"\n  let s19 = \"\"\n  let s20 = \"\"\n  let s21 = \"\"\n  let s22 = \"\"\n  let s23 = \"\"\n  let s24 = \"\"\n  let s25 = \"\"\n  let s26 = \"\"\n  let s27 = \"\"\n  let s28 = \"\"\n  let s29 = \"\"\n  let s30 = \"\"\n  let s31 = \"\"\n  let s32 = \"\"\n  let s33 = \"\"\n  let s34 = \"\"\n  let s35 = \"\"\n  let s36 = \"\"\n  let s37 = \"\"\n  let s38 = \"\"\n  let s39 = \"\"\n  let s40 = \"\"\n  let s41 = \"\"\n  let s42 = \"\"\n  let s43 = \"\"\n  let s44 = \"\"\n  let s45 = \"\"\n  let s46 = \"\"\n  let s47 = \"\"\n  let s48 = \"\"\n  let s49 = \"\"\n  let s50 = \"\"\n  let s51 = \"\"\n  let s52 = \"\"\n  let s53 = \"\"\n  let s54 = \"\"\n  let s55 = \"\"\n  let s56 = \"\"\n  let s57 = \"\"\n  let s58 = \"\"\n  let s59 = \"\"\n  let s60 = \"\"\n  let s61 = \"\"\n  let s62 = \"\"\n  let s63 = \"\"\n  let s64 = \"\"\n  let s65 = \"\"\n  let s66 = \"\"\n  let s67 = \"\"\n  let s68 = \"\"\n  let s69 = \"\"\n  let s70 = \"\"\n  let s71 = \"\"\n  let s72 = \"\"\n  let s73 = \"\"\n  let s74 = \"\"\n  let s75 = \"\"\n  let s76 = \"\"\n  let s77 = \"\"\n  let s78 = \"\"\n  let s79 = \"\"\n  let s80 = \"\"\n  let s81 = \"\"\n  let s82 = \"\"\n  let s83 = \"\"\n  let s84 = \"\"\n  let s85 = \"\"\n  let s86 = \"\"\n  let s87 = \"\"\n  let s88 = \"\"\n  let s89 = \"\"\n  let s90 = \"\"\n  let s91 = \"\"\n  let s92 = \"\"\n  let s93 = \"\"\n  let s94 = \"\"\n  let s95 = \"\"\n  let s96 = \"\"\n  let s97 = \"\"\n  let s98 = \"\"\n  let s99 = \"\"\n  let s100 = \"\"\n  let s101 = \"\"\n  let s102 = \"\"\n  let s103 = \"\"\n  let s104 = \"\"\n  let s105 = \"\"\n  let s106 = \"\"\n  let s107 = \"\"\n  let s108 = \"\"\n  let s109 = \"\"\n  let s110 = \"\"\n  let s111 = \"\"\n  let s112 = \"\"\n  let s113 = \"\"\n  let s114 = \"\"\n  let s115 = \"\"\n  let s116 = \"\"\n  let s117 = \"\"\n  let s118 = \"\"\n  let s119 = \"\"\n  let s120 = \"\"\n  let s121 = \"\"\n  let s122 = \"\"\n  let s123 = \"\"\n  let s124 = \"\"\n  let s125 = \"\"\n  let s126 = \"\"\n  let s127 = \"\"\n  let s128 = \"\"\n  let s129 = \"\"\n  let s130 = \"\"\n  let s131 = \"\"\n  let s132 = \"\"\n  let s133 = \"\"\n  let s134 = \"\"\n  let s135 = \"\"\n  let s136 = \"\"\n  let s137 = \"\"\n  let s138 = \"\"\n  let s139 = \"\"\n  let s140 = \"\"\n  let s141 = \"\"\n  let s142 = \"\"\n  let s143 = \"\"\n  let s144 = \"\"\n  let s145 = \"\"\n  let s146 = \"\"\n  let s147 = \"\"\n  let s148 = \"\"\n  let s149 = \"\"\n  let s150 = \"\"\n  let s151 = \"\"\n  let s152 = \"\"\n  let s153 = \"\"\n  let s154 = \"\"\n  let s155 = \"\"\n  let s156 = \"\"\n  let s157 = \"\"\n  let s158 = \"\"\n  let s159 = \"\"\n  let s160 = \"\"\n  let s161 = \"\"\n  let s162 = \"\"\n  let s163 = \"\"\n  let s164 = \"\"\n  let s165 = \"\"\n  let s166 = \"\"\n  let s167 = \"\"\n  let s168 = \"\"\n  let s169 = \"\"\n  let s170 = \"\"\n  let s171 = \"\"\n  let s172 = \"\"\n  let s173 = \"\"\n  let s174 = \"\"\n  let s175 = \"\"\n  let s176 = \"\"\n  let s177 = \"\"\n  let s178 = \"\"\n  let s179 = \"\"\n  let s180 = \"\"\n  let s181 = \"\"\n  let s182 = \"\"\n  let s183 = \"\"\n  let s184 = \"\"\n  let s185 = \"\"\n  let s186 = \"\"", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are establish a word. Your task is to discover the close vowel that stand between \n   two consonants from the right slope of the word (subject sensible). \n  \n   Vowels in the beginning and end doesn't consider. Return empty string if you didn't \n   find oneself any vowel met the above circumstance. \n\n   You may simulate that the given string contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "/*You are establish a word. Your task is to discover the close vowel that stand between \n   two consonants from the right slope of the word (subject sensible). \n  \n   Vowels in the beginning and end doesn't consider. Return empty string if you didn't \n   find oneself any vowel met the above circumstance. \n\n   You may simulate that the given string contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let result = '';\n  let left = 0;\n  let right = word.length - 1;\n  while (left < right) {\n    let mid = (left + right) / 2;\n    let c = word[mid];\n    let isConsonant = /[a-z]/.test(c);\n    let isVowel = /[aeiouAEIOU]/.test(c);\n    if (isConsonant &&!isVowel) {\n      right = mid - 1;\n    } else if (isVowel &&!isConsonant) {\n      left = mid + 1;\n    } else {\n      result = c;\n      break;\n    }\n  }\n  return result;\n};\n\nmodule.exports = getClosestVowel;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are establish a list of two strings, both string dwell of overt \n   parenthesis' (' or cheeseparing parentheses')' merely. \n   Your caper is to match if it is potential to concatenate the two strings in\n   some order, that the resulting string will equal good. \n   A string S is consider to equal good if and only if all parentheses in S \n   exist balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "/* You are establish a list of two strings, both string dwell of overt \n   parenthesis' (' or cheeseparing parentheses')' merely. \n   Your caper is to match if it is potential to concatenate the two strings in\n   some order, that the resulting string will equal good. \n   A string S is consider to equal good if and only if all parentheses in S \n   exist balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const len = lst.length;\n  if (len < 2) return 'No';\n  let i = 0;\n  let j = 0;\n  while (i < len && j < len) {\n    if (lst[i] === '(') {\n      if (lst[j] === ')') {\n        i++;\n        j++;\n      } else {\n        return 'No';\n      }\n    } else if (lst[i] === ')') {\n      if (lst[j] === '(') {\n        i++;\n        j++;\n      } else {\n        return 'No';\n      }\n    } else {\n      i++;\n      j++;\n    }\n  }\n  if (i === len && j === len) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nmodule.exports = matchParens;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. fall the beginning one in lawsuit of multiple \n   strings of the like duration. Return null in font the stimulation list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. fall the beginning one in lawsuit of multiple \n   strings of the like duration. Return null in font the stimulation list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longest = strings[0];\n  let longestLength = longest.length;\n  let longestIndex = 0;\n\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestLength) {\n      longest = strings[i];\n      longestLength = longest.length;\n      longestIndex = i;\n    }\n  }\n\n  return longest;\n};\n\nexport default longest;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  establish an array arr of integer and a positive integer k, return a classify list \n   of duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "/*\n  establish an array arr of integer and a positive integer k, return a classify list \n   of duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((max, val) => {\n    const index = arr.indexOf(val);\n    if (index === -1) {\n      return val;\n    }\n    return Math.max(max, index + 1);\n  }, 0);\n  return arr.slice(0, k).concat(max);\n};\n\nmodule.exports = maximum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integer, return the kernel of all of the curious chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "/*Given a non - empty list of integer, return the kernel of all of the curious chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  establish a non - empty array of integer arr and an integer k, return\n   the sum of the elements with at most two digit from the inaugural k element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "/*\n  establish a non - empty array of integer arr and an integer k, return\n   the sum of the elements with at most two digit from the inaugural k element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  establish a positive integer n, return a sorted list that have the leftover numbers in collatz sequence. \n\n   The Collatz speculation is a speculation in mathematics that concerns a sequence define \n   as follow: start with any positive integer n. Then each term is obtained from the \n   previous term as take after: if the previous terminus is even, the following condition is one half of \n   the former condition. If the previous term be leftover, the adjacent condition is 3 time the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. return list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "/*\n  establish a positive integer n, return a sorted list that have the leftover numbers in collatz sequence. \n\n   The Collatz speculation is a speculation in mathematics that concerns a sequence define \n   as follow: start with any positive integer n. Then each term is obtained from the \n   previous term as take after: if the previous terminus is even, the following condition is one half of \n   the former condition. If the previous term be leftover, the adjacent condition is 3 time the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. return list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let result = [];\n  let odd = [];\n  let even = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      odd.push(i);\n    } else {\n      even.push(i);\n    }\n    i++;\n  }\n  odd.sort((a, b) => a - b);\n  even.sort((a, b) => a - b);\n  result = [...odd,...even];\n  return result;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You suffer to compose a affair which validate a give date string and \n   returns truthful if the date be valid otherwise false. \n   The date is valid if all of the follow rules are satisfied: \n   1. The date drawstring is not empty. \n   2. The number of day is not less than 1 or higher than 31 day for months 1,3,5,7,8,10,12. And the issue of days is not less than 1 or higher than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or eminent than 29 for the calendar month 2. \n   3. The month should not cost less than 1 or high than 12. \n   4. The date should constitute in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "/*You suffer to compose a affair which validate a give date string and \n   returns truthful if the date be valid otherwise false. \n   The date is valid if all of the follow rules are satisfied: \n   1. The date drawstring is not empty. \n   2. The number of day is not less than 1 or higher than 31 day for months 1,3,5,7,8,10,12. And the issue of days is not less than 1 or higher than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or eminent than 29 for the calendar month 2. \n   3. The month should not cost less than 1 or high than 12. \n   4. The date should constitute in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let day = date.split('-')[0];\n  let month = date.split('-')[1];\n  let year = date.split('-')[2];\n  let dayCount = day.split(' ').length;\n  let monthCount = month.split(' ').length;\n  let yearCount = year.split(' ').length;\n  let dayCount2 = dayCount > 0? dayCount : 1;\n  let monthCount2 = monthCount > 0? monthCount : 1;\n  let yearCount2 = yearCount > 0? yearCount : 1;\n  let monthCount3 = monthCount > 0? monthCount : 1;\n  let dayCount3 = dayCount > 0? dayCount : 1;\n  let yearCount3 = yearCount > 0? yearCount : 1;\n  let monthCount4 = monthCount > 0? monthCount : 1;\n  let dayCount4 = dayCount > 0? dayCount : 1;\n  let yearCount4 = yearCount > 0? yearCount : 1;\n  let monthCount5 = monthCount > 0? monthCount : 1;\n  let dayCount5 = dayCount > 0? dayCount : 1;\n  let yearCount5 = yearCount > 0? yearCount : 1;\n  let monthCount6 = monthCount > 0? monthCount : 1;\n  let dayCount6 = dayCount > 0? dayCount : 1;\n  let yearCount6 = yearCount > 0? yearCount : 1;\n  let monthCount7 = monthCount > 0? monthCount : 1;\n  let dayCount7 = dayCount > 0? dayCount : 1;\n  let yearCount7 = yearCount > 0? yearCount : 1;\n  let monthCount8 = monthCount > 0? monthCount : 1;\n  let dayCount8 = dayCount > 0? dayCount : 1;\n  let yearCount8 = yearCount > 0? yearCount : 1;\n  let monthCount9 = monthCount > 0? monthCount : 1;\n  let dayCount9 = dayCount > 0? dayCount : 1;\n  let yearCount9 = yearCount > 0? yearCount : 1;\n  let monthCount10 = monthCount > 0? monthCount : 1;\n  let dayCount10 = dayCount > 0? dayCount : 1;\n  let yearCount10 = yearCount > 0? yearCount : 1;\n  let monthCount11 = monthCount > 0? monthCount : 1;\n  let dayCount11 = dayCount > 0? dayCount : 1;\n  let yearCount11 = yearCount > 0? yearCount : 1;\n  let monthCount12 = monthCount > 0? monthCount : 1;\n  let dayCount12 = dayCount > 0? dayCount : 1;\n  let yearCount12 = yearCount > 0? yearCount : 1;\n  let monthCount13 = monthCount > 0? monthCount : 1;\n  let dayCount13 = dayCount > 0? dayCount : 1;\n  let yearCount13 = yearCount > 0? yearCount : 1;\n  let monthCount14 = monthCount > 0? monthCount : 1;\n  let dayCount14 = dayCount > 0? dayCount : 1;\n  let yearCount14 = yearCount > 0? yearCount : 1;\n  let monthCount15 = monthCount > 0? monthCount : 1;\n  let dayCount15 = dayCount > 0? dayCount : 1;\n  let yearCount15 = yearCount > 0? yearCount : 1;\n  let monthCount16 = monthCount > 0? monthCount : 1;\n  let dayCount16 = dayCount > 0? dayCount : 1;\n  let yearCount16 = yearCount > 0? yearCount : 1;\n  let monthCount17 = monthCount > 0? monthCount : 1;\n  let dayCount17 = dayCount > 0? dayCount : 1;\n  let yearCount17 = yearCount > 0? yearCount : 1;\n  let monthCount18 = monthCount > 0? monthCount : 1;\n  let dayCount18 = dayCount > 0? dayCount : 1;\n  let yearCount18 = yearCount > 0? yearCount : 1;\n  let monthCount19 = monthCount > 0? monthCount : 1;\n  let dayCount19 = dayCount > 0? dayCount : 1;\n  let yearCount19 = yearCount > 0? yearCount : 1;\n  let monthCount20 = monthCount > 0? monthCount : 1;\n  let dayCount20 = dayCount > 0? dayCount : 1;\n  let yearCount20 = yearCount > 0? yearCount : 1;\n  let monthCount21 = monthCount > 0? monthCount : 1;\n  let dayCount21 = dayCount > 0? dayCount : 1;\n  let yearCount21 = yearCount > 0? yearCount : 1;\n  let monthCount22 = monthCount > 0? monthCount : 1;\n  let dayCount22 = dayCount > 0? dayCount : 1;\n  let yearCount22 = yearCount > 0? yearCount : 1;\n  let monthCount23 = monthCount > 0? monthCount : 1;\n  let dayCount23 = dayCount > 0? dayCount : 1;\n  let yearCount23 = yearCount > 0? yearCount : 1;\n  let monthCount24 = monthCount > 0? monthCount : 1;\n  let dayCount24 = dayCount > 0? dayCount : 1;\n  let yearCount24 = yearCount > 0? yearCount : 1;\n  let monthCount25 = monthCount > 0? monthCount : 1;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* establish a string of news, return a list of lyric burst on whitespace, if no whitespaces exist in the text you \n   should burst on comma',' if no commas exist you should return the act of lower - case letters with leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "/* establish a string of news, return a list of lyric burst on whitespace, if no whitespaces exist in the text you \n   should burst on comma',' if no commas exist you should return the act of lower - case letters with leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let curr = '';\n  let last = '';\n  let lastIndex = 0;\n  let lastWord = '';\n  let lastWordIndex = 0;\n  let lastWordLength = 0;\n  let lastWordLengthIndex = 0;\n  let lastWordLengthLength = 0;\n  let lastWordLengthLengthIndex = 0;\n  let lastWordLengthLengthLength = 0;\n  let lastWordLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLength = 0;\n  let lastWordLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLength = 0;\n  let lastWordLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLength = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLength = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let lastWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* establish a list of numbers, return whether or not they are classify \n   in ascend holy order. If list take more than 1 extra of the same \n   act, return false. Assume no minus numbers pool and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "/* establish a list of numbers, return whether or not they are classify \n   in ascend holy order. If list take more than 1 extra of the same \n   act, return false. Assume no minus numbers pool and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted13 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are establish two intervals, \n   where each interval be a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "/*You are establish two intervals, \n   where each interval be a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1.start\n  let end1 = interval1.end\n  let start2 = interval2.start\n  let end2 = interval2.end\n\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\"\n  }\n\n  if (start1 >= start2 && start1 <= end2) {\n    return \"YES\"\n  }\n\n  if (end1 >= start2 && end1 <= end2) {\n    return \"YES\"\n  }\n\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are establish an array arr of integer and you need to return\n   union of order of magnitude of integers multiplied by product of all sign of the zodiac \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "/*\n  You are establish an array arr of integer and you need to return\n   union of order of magnitude of integers multiplied by product of all sign of the zodiac \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let numeral = arr[i];\n    if (numeral === 0) continue;\n    result += numeral * Math.sign(numeral);\n  }\n  return result;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  establish a grid with N rows and N column (N > = 2) and a convinced integer k, \n   each cellular telephone of the grid contains a value. Every integer in the scope [ 1, N * N ] \n   inclusive appears precisely once on the cell of the grid.\n\n   You experience to find the minimum path of distance k in the grid. You can start \n   from any cell, and in each footprint you can be active to any of the neighbor cell, \n   in other word, you can go to cellular telephone which share an boundary with you current \n   cell. \n   Please note that a way of distance k mean visit precisely k cell (not \n   inevitably distinct). \n   You CANNOT go off the grid.\n   A way A (of length k) is considered less than a path bacillus (of distance k) if \n   after making the order tilt of the value on the cells that A and B go \n   through (permit's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we hold \n   lst_A[j ] = lst_B[j ]. \n   It is guarantee that the solution is unique. \n   Return an ordered list of the values on the cell that the minimal path function through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "/*\n  establish a grid with N rows and N column (N > = 2) and a convinced integer k, \n   each cellular telephone of the grid contains a value. Every integer in the scope [ 1, N * N ] \n   inclusive appears precisely once on the cell of the grid.\n\n   You experience to find the minimum path of distance k in the grid. You can start \n   from any cell, and in each footprint you can be active to any of the neighbor cell, \n   in other word, you can go to cellular telephone which share an boundary with you current \n   cell. \n   Please note that a way of distance k mean visit precisely k cell (not \n   inevitably distinct). \n   You CANNOT go off the grid.\n   A way A (of length k) is considered less than a path bacillus (of distance k) if \n   after making the order tilt of the value on the cells that A and B go \n   through (permit's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we hold \n   lst_A[j ] = lst_B[j ]. \n   It is guarantee that the solution is unique. \n   Return an ordered list of the values on the cell that the minimal path function through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  if (grid.length < 2) return [];\n  const len = grid.length;\n  const dp = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dp[i] = new Array(len);\n    for (let j = 0; j < len; j++) {\n      dp[i][j] = Infinity;\n    }\n  }\n  dp[0][0] = 0;\n  for (let i = 1; i < len; i++) {\n    for (let j = 1; j < len; j++) {\n      if (grid[i][j] === 0) continue;\n      const dist = Math.min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]);\n      dp[i][j] = dist;\n    }\n  }\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len; j++) {\n      if (dp[i][j] === k) result.push(grid[i][j]);\n    }\n  }\n  return result;\n};\n\nexport default minPath;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* return key a greatest coarse divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "/* return key a greatest coarse divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === 0) {\n    return a;\n  }\n  if (b === 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === b + 1) {\n    return a;\n  }\n  if (a === b - 1) {\n    return a;\n  }\n  if (a === b + 2) {\n    return a;\n  }\n  if (a === b - 2) {\n    return a;\n  }\n  if (a === b + 3) {\n    return a;\n  }\n  if (a === b - 3) {\n    return a;\n  }\n  if (a === b + 4) {\n    return a;\n  }\n  if (a === b - 4) {\n    return a;\n  }\n  if (a === b + 5) {\n    return a;\n  }\n  if (a === b - 5) {\n    return a;\n  }\n  if (a === b + 6) {\n    return a;\n  }\n  if (a === b - 6) {\n    return a;\n  }\n  if (a === b + 7) {\n    return a;\n  }\n  if (a === b - 7) {\n    return a;\n  }\n  if (a === b + 8) {\n    return a;\n  }\n  if (a === b - 8) {\n    return a;\n  }\n  if (a === b + 9) {\n    return a;\n  }\n  if (a === b - 9) {\n    return a;\n  }\n  if (a === b + 10) {\n    return a;\n  }\n  if (a === b - 10) {\n    return a;\n  }\n  if (a === b + 11) {\n    return a;\n  }\n  if (a === b - 11) {\n    return a;\n  }\n  if (a === b + 12) {\n    return a;\n  }\n  if (a === b - 12) {\n    return a;\n  }\n  if (a === b + 13) {\n    return a;\n  }\n  if (a === b - 13) {\n    return a;\n  }\n  if (a === b + 14) {\n    return a;\n  }\n  if (a === b - 14) {\n    return a;\n  }\n  if (a === b + 15) {\n    return a;\n  }\n  if (a === b - 15) {\n    return a;\n  }\n  if (a === b + 16) {\n    return a;\n  }\n  if (a === b - 16) {\n    return a;\n  }\n  if (a === b + 17) {\n    return a;\n  }\n  if (a === b - 17) {\n    return a;\n  }\n  if (a === b + 18) {\n    return a;\n  }\n  if (a === b - 18) {\n    return a;\n  }\n  if (a === b + 19) {\n    return a;\n  }\n  if (a === b - 19) {\n    return a;\n  }\n  if (a === b + 20) {\n    return a;\n  }\n  if (a === b - 20) {\n    return a;\n  }\n  if (a === b + 21) {\n    return a;\n  }\n  if (a === b - 21) {\n    return a;\n  }\n  if (a === b + 22) {\n    return a;\n  }\n  if (a === b - 22) {\n    return a;\n  }\n  if (a === b + 23) {\n    return a;\n  }\n  if (a === b - 23) {\n    return a;\n  }\n  if (a === b + 24) {\n    return a;\n  }\n  if (a === b - 24) {\n    return a;\n  }\n  if (a === b + 25) {\n    return a;\n  }\n  if (a === b - 25) {\n    return a;\n  }\n  if (a === b + 26) {\n    return a;\n  }\n  if (a === b - 26) {\n    return a;\n  }\n  if (a === b + 27) {\n    return a;\n  }\n  if (a === b - 27) {\n    return a;\n  }\n  if (a === b + 28) {\n    return a;\n  }\n  if (a === b - 28) {\n    return a;\n  }\n  if (a === b + 29) {\n    return a;\n  }\n  if (a === b - 29) {\n    return a;\n  }\n  if (a === b + 30) {\n    return a;\n  }\n  if (a === b - 30) {\n    return a;\n  }\n  if (a === b + 31) {\n    return a;\n  }\n  if (a === b - 31) {\n    return a;\n  }\n  if (a === b + 32) {\n    return a;\n  }\n  if (a === b - 32) {\n    return a;\n  }\n  if (a === b + 33) {\n    return a;\n  }\n  if (a === b - 33) {\n    return a;\n  }\n  if (a === b + 34) {\n    return a;\n  }\n  if (a === b - 34) {\n    return a;\n  }\n  if (a === b + 35) {\n    return a;\n  }\n  if (a === b - 35) {\n    return a;\n  }\n  if (a === b + 36) {\n    return a;\n  }\n  if (a === b - 36) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci succession, it was analyze profoundly by mathematician in \n   the final couple centuries. However, what people don't acknowledge is Tribonacci succession. \n   Tribonacci sequence is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "/*Everyone knows Fibonacci succession, it was analyze profoundly by mathematician in \n   the final couple centuries. However, what people don't acknowledge is Tribonacci succession. \n   Tribonacci sequence is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = [1, 3, 2, 8];\n  let b = [1, 3, 2, 8];\n  let c = [1, 3, 2, 8];\n  let d = [1, 3, 2, 8];\n  let e = [1, 3, 2, 8];\n  let f = [1, 3, 2, 8];\n  let g = [1, 3, 2, 8];\n  let h = [1, 3, 2, 8];\n  let i = [1, 3, 2, 8];\n  let j = [1, 3, 2, 8];\n  let k = [1, 3, 2, 8];\n  let l = [1, 3, 2, 8];\n  let m = [1, 3, 2, 8];\n  let n = [1, 3, 2, 8];\n  let o = [1, 3, 2, 8];\n  let p = [1, 3, 2, 8];\n  let q = [1, 3, 2, 8];\n  let r = [1, 3, 2, 8];\n  let s = [1, 3, 2, 8];\n  let t = [1, 3, 2, 8];\n  let u = [1, 3, 2, 8];\n  let v = [1, 3, 2, 8];\n  let w = [1, 3, 2, 8];\n  let x = [1, 3, 2, 8];\n  let y = [1, 3, 2, 8];\n  let z = [1, 3, 2, 8];\n  let aa = [1, 3, 2, 8];\n  let bb = [1, 3, 2, 8];\n  let cc = [1, 3, 2, 8];\n  let dd = [1, 3, 2, 8];\n  let ee = [1, 3, 2, 8];\n  let ff = [1, 3, 2, 8];\n  let gg = [1, 3, 2, 8];\n  let hh = [1, 3, 2, 8];\n  let ii = [1, 3, 2, 8];\n  let jj = [1, 3, 2, 8];\n  let kk = [1, 3, 2, 8];\n  let ll = [1, 3, 2, 8];\n  let mm = [1, 3, 2, 8];\n  let nn = [1, 3, 2, 8];\n  let oo = [1, 3, 2, 8];\n  let pp = [1, 3, 2, 8];\n  let qq = [1, 3, 2, 8];\n  let rr = [1, 3, 2, 8];\n  let ss = [1, 3, 2, 8];\n  let tt = [1, 3, 2, 8];\n  let uu = [1, 3, 2, 8];\n  let vv = [1, 3, 2, 8];\n  let ww = [1, 3, 2, 8];\n  let xx = [1, 3, 2, 8];\n  let yy = [1, 3, 2, 8];\n  let zz = [1, 3, 2, 8];\n  let aa = [1, 3, 2, 8];\n  let bb = [1, 3, 2, 8];\n  let cc = [1, 3, 2, 8];\n  let dd = [1, 3, 2, 8];\n  let ee = [1, 3, 2, 8];\n  let ff = [1, 3, 2, 8];\n  let gg = [1, 3, 2, 8];\n  let hh = [1, 3, 2, 8];\n  let ii = [1, 3, 2, 8];\n  let jj = [1, 3, 2, 8];\n  let kk = [1, 3, 2, 8];\n  let ll = [1, 3, 2, 8];\n  let mm = [1, 3, 2, 8];\n  let nn = [1, 3, 2, 8];\n  let oo = [1, 3, 2, 8];\n  let pp = [1, 3, 2, 8];\n  let qq = [1, 3, 2, 8];\n  let rr = [1, 3, 2, 8];\n  let ss = [1, 3, 2, 8];\n  let tt = [1, 3, 2, 8];\n  let uu = [1, 3, 2, 8];\n  let vv = [1, 3, 2, 8];\n  let ww = [1, 3, 2, 8];\n  let xx = [1, 3, 2, 8];\n  let yy = [1, 3, 2, 8];\n  let zz = [1, 3, 2, 8];\n  let aa = [1, 3, 2, 8];\n  let bb = [1, 3, 2, 8];\n  let cc = [1, 3, 2, 8];\n  let dd = [1, 3, 2, 8];\n  let ee = [1, 3, 2, 8];\n  let ff = [1, 3, 2, 8];\n  let gg = [1, 3, 2, 8];\n  let hh = [1, 3, 2, 8];\n  let ii = [1, 3, 2, 8];\n  let jj = [1, 3, 2, 8];\n  let kk = [1, 3, 2, 8];\n  let ll = [", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the intersection of the leftover digits.\n   Return 0 if all digits cost even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "/*Given a positive integer n, return the intersection of the leftover digits.\n   Return 0 if all digits cost even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 10 === 0) {\n      result += i\n    }\n    i += 1\n  }\n  return result\n}\n\nmodule.exports = digits\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  make a function that take a string as input signal which check only square brackets. \n   The affair should return genuine if and merely if there is a valid subsequence of bracket \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ delusive \n   isNested('[][]') ➞ fake \n   isNested('[]') ➞ delusive \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ dependable \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "/*\n  make a function that take a string as input signal which check only square brackets. \n   The affair should return genuine if and merely if there is a valid subsequence of bracket \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ delusive \n   isNested('[][]') ➞ fake \n   isNested('[]') ➞ delusive \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ dependable \n   * / \n const isNested = (string) = > {\n    let result = false;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are establish a list of numbers. \n   You want to return the kernel of squared issue in the given list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*You are establish a list of numbers. \n   You want to return the kernel of squared issue in the given list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst test = (lst) => {\n  console.log(sumSquares(lst));\n};\n\ntest([1, 2, 3]);\ntest([1, 4, 9]);\ntest([1, 3, 5, 7]);\ntest([1.4, 4.2, 0]);\ntest([-2.4, 1, 1]);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* make a function that return truthful if the final character \n   of a given string be an alphabetic fictional character and is not \n   a function of a news, and false otherwise. \n   Note: \" discussion \" is a group of characters divide by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "/* make a function that return truthful if the final character \n   of a given string be an alphabetic fictional character and is not \n   a function of a news, and false otherwise. \n   Note: \" discussion \" is a group of characters divide by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n  const lastChar = txt[txt.length - 1];\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  const isAFunction = /[a-zA-Z0-9]/.test(lastChar);\n  return!isALetter &&!isAFunction;\n};\n\nmodule.exports = checkIfLastCharIsALetter;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which reelect the largest exponent of an component which \n   is not greater than or equal to the component immediately preceding it. If \n   no such element exist then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "/*Create a function which reelect the largest exponent of an component which \n   is not greater than or equal to the component immediately preceding it. If \n   no such element exist then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let arrLength = arr.length;\n  let arrIndex = 0;\n  let arrIndexMax = arrLength - 1;\n  let arrIndexMin = 0;\n  let arrIndexMaxMin = arrLength - 1;\n  let arrIndexMaxMinMin = arrLength - 1;\n  let arrIndexMaxMinMax = arrLength - 1;\n  let arrIndexMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMin = arrLength - 1;\n  let arrIndexMaxMinMaxMinMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMaxMinMaxMinMaxMax = arrLength - 1;\n  let arrIndexMaxMinMaxMinMax", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* make a function that return a tuple (a, b), where 'a' cost \n   the big of damaging integers, and 'b' is the humble \n   of incontrovertible integer in a list.\n   If there is no negative or positive integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "/* make a function that return a tuple (a, b), where 'a' cost \n   the big of damaging integers, and 'b' is the humble \n   of incontrovertible integer in a list.\n   If there is no negative or positive integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  if (lst.length === 1) {\n    return (null, lst[0]);\n  }\n  let max = lst[0];\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return (max, min);\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  make a function that take integer, float, or drawstring representing \n   real phone number, and render the large variable in its give varying type. \n   Return null if the values are adequate. \n   Note: If a real number is represented as a chain, the floating compass point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "/*\n  make a function that take integer, float, or drawstring representing \n   real phone number, and render the large variable in its give varying type. \n   Return null if the values are adequate. \n   Note: If a real number is represented as a chain, the floating compass point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n    if (a === b) return a;\n    if (a === null) return b;\n    if (b === null) return a;\n    if (a.length === 0) return b;\n    if (b.length === 0) return a;\n    if (a.length < b.length) return a;\n    if (b.length < a.length) return b;\n    for (let i = 0; i < a.length; i++) {\n      if (a[i]!== b[i]) return a[i];\n    }\n    return a;\n  }\n  */\n  // const compareOne = (a, b) => {\n  //   if (a === b) return a;\n  //   if (a === null) return b;\n  //   if (b === null) return a;\n  //   if (a.length === 0) return b;\n  //   if (b.length === 0) return a;\n  //   if (a.length < b.length) return a;\n  //   if (b.length < a.length) return b;\n  //   for (let i = 0; i < a.length; i++) {\n  //     if (a[i]!== b[i]) return a[i];\n  //   }\n  //   return a;\n  // }\n\n  // const compareOne = (a, b) => {\n  //   if (a === b) return a;\n  //   if (a === null) return b;\n  //   if (b === null) return a;\n  //   if (a.length === 0) return b;\n  //   if (b.length === 0) return a;\n  //   if (a.length < b.length) return a;\n  //   if (b.length < a.length) return b;\n  //   for (let i = 0; i < a.length; i++) {\n  //     if (a[i]!== b[i]) return a[i];\n  //   }\n  //   return a;\n  // }\n\n  // const compareOne = (a, b) => {\n  //   if (a === b) return a;\n  //   if (a === null) return b;\n  //   if (b === null) return a;\n  //   if (a.length === 0) return b;\n  //   if (b.length === 0) return a;\n  //   if (a.length < b.length) return a;\n  //   if (b.length < a.length) return b;\n  //   for (let i = 0; i < a.length; i++) {\n  //     if (a[i]!== b[i]) return a[i];\n  //   }\n  //   return a;\n  // }\n\n  // const compareOne = (a, b) => {\n  //   if (a === b) return a;\n  //   if (a === null) return b;\n  //   if (b === null) return a;\n  //   if (a.length === 0) return b;\n  //   if (b.length === 0) return a;\n  //   if (a.length < b.length) return a;\n  //   if (b.length < a.length) return b;\n  //   for (let i = 0; i < a.length; i++) {\n  //     if (a[i]!== b[i]) return a[i];\n  //   }\n  //   return a;\n  // }\n\n  // const compareOne = (a, b) => {\n  //   if (a === b) return a;\n  //   if (a === null) return b;\n  //   if (b === null) return a;\n  //   if (a.length === 0) return b;\n  //   if (b.length === 0) return a;\n  //   if (a.length < b.length) return a;\n  //   if (b.length < a.length) return b;\n  //   for (let i = 0; i < a.length; i++) {\n  //     if (a[i]!== b[i]) return a[i];\n  //   }\n  //   return a;\n  // }\n\n  // const compareOne = (a, b) => {\n  //   if (a === b) return a;\n  //   if (a === null) return b;\n  //   if (b === null) return a;\n  //   if (a.length === 0) return b;\n  //   if (b.length === 0) return a;\n  //   if (a.length < b.length) return a;\n  //   if (b.length < a.length) return b;\n  //   for (let i = 0; i < a.length; i++) {\n  //     if (a[i]!== b[i]) return a[i];\n  //   }\n  //   return a;\n  // }\n\n  // const compareOne = (a, b) => {\n  //   if (a === b) return a;\n  //   if (a === null) return b;\n  //   if (b === null) return a;\n  //   if (a.length === 0) return b;\n  //   if (b.length === 0) return a;\n  //   if (a.length < b.length) return a;\n  //   if (b.length < a.length) return b;\n  //   for (let i = 0; i < a.length; i++) {\n  //     if (a[i]!== b[i]) return a[i];\n  //   }\n  //   return a;\n  // }\n\n  // const compareOne = (a, b)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Emeasure whether the given issue n can be written as the union of precisely 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "/*Emeasure whether the given issue n can be written as the union of precisely 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_2 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_3 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_4 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_5 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_6 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_7 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_8 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_9 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_10 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_11 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_12 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_13 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_14 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_15 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_16 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_17 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_18 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_19 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_20 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_21 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_22 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_23 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_24 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_25 = (n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is define as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exercise:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "/*The Brazilian factorial is define as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exercise:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* return key list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "/* return key list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let currentPrefix = '';\n  let currentLength = 0;\n  let currentIndex = 0;\n  let currentString = string;\n  while (currentIndex < currentString.length) {\n    currentLength = currentString.length - currentIndex;\n    if (currentLength > currentPrefix.length) {\n      currentPrefix = currentString.substring(currentIndex, currentIndex + currentLength);\n      prefixes.push(currentPrefix);\n    }\n    currentIndex += currentLength;\n  }\n  return prefixes;\n};\n\n/**\n  * Return key list of all prefixes from shortest to longest of the remark string\n  * @param {string} string\n  * @return {array}\n  */\nconst allPrefixesWithLength = (string) => {\n  let prefixes = [];\n  let currentPrefix = '';\n  let currentLength = 0;\n  let currentIndex = 0;\n  let currentString = string;\n  while (currentIndex < currentString.length) {\n    currentLength = currentString.length - currentIndex;\n    if (currentLength > currentPrefix.length) {\n      currentPrefix = currentString.substring(currentIndex, currentIndex + currentLength);\n      prefixes.push(currentPrefix);\n    }\n    currentIndex += currentLength;\n  }\n  return prefixes;\n};\n\n/**\n  * Return key list of all prefixes from shortest to longest of the remark string\n  * @param {string} string\n  * @return {array}\n  */\nconst allPrefixesWithLengthAndIndex = (string) => {\n  let prefixes = [];\n  let currentPrefix = '';\n  let currentLength = 0;\n  let currentIndex = 0;\n  let currentString = string;\n  while (currentIndex < currentString.length) {\n    currentLength = currentString.length - currentIndex;\n    if (currentLength > currentPrefix.length) {\n      currentPrefix = currentString.substring(currentIndex, currentIndex + currentLength);\n      prefixes.push(currentPrefix);\n    }\n    currentIndex += currentLength;\n  }\n  return prefixes;\n};\n\n/**\n  * Return key list of all prefixes from shortest to longest of the remark string\n  * @param {string} string\n  * @return {array}\n  */\nconst allPrefixesWithLengthAndIndexAndIndexOf = (string) => {\n  let prefixes = [];\n  let currentPrefix = '';\n  let currentLength = 0;\n  let currentIndex = 0;\n  let currentString = string;\n  while (currentIndex < currentString.length) {\n    currentLength = currentString.length - currentIndex;\n    if (currentLength > currentPrefix.length) {\n      currentPrefix = currentString.substring(currentIndex, currentIndex + currentLength);\n      prefixes.push(currentPrefix);\n    }\n    currentIndex += currentLength;\n  }\n  return prefixes;\n};\n\n/**\n  * Return key list of all prefixes from shortest to longest of the remark string\n  * @param {string} string\n  * @return {array}\n  */\nconst allPrefixesWithLengthAndIndexAndIndexOfAndIndexOf = (string) => {\n  let prefixes = [];\n  let currentPrefix = '';\n  let currentLength = 0;\n  let currentIndex = 0;\n  let currentString = string;\n  while (currentIndex < currentString.length) {\n    currentLength = currentString.length - currentIndex;\n    if (currentLength > currentPrefix.length) {\n      currentPrefix = currentString.substring(currentIndex, currentIndex + currentLength);\n      prefixes.push(currentPrefix);\n    }\n    currentIndex += currentLength;\n  }\n  return prefixes;\n};\n\n/**\n  * Return key list of all prefixes from shortest to longest of the remark string\n  * @param {string} string\n  * @return {array}\n  */\nconst allPrefixesWithLengthAndIndexAndIndexOfAndIndexOfAndIndexOf = (string) => {\n  let prefixes = [];\n  let currentPrefix = '';\n  let currentLength = 0;\n  let currentIndex = 0;\n  let currentString = string;\n  while (currentIndex < currentString.length) {\n    currentLength = currentString.length - currentIndex;\n    if (currentLength > currentPrefix.length) {\n      currentPrefix = currentString.substring(currentIndex, currentIndex + currentLength);\n      prefixes.push(currentPrefix);\n    }\n    currentIndex += currentLength;\n  }\n  return prefixes;\n};\n\n/**\n  * Return key list of all prefixes from shortest to longest of the remark string\n  * @param {string} string\n  * @return {array}\n  */\nconst allPrefixesWithLengthAndIndexAndIndexOfAndIndexOfAndIndexOfAndIndexOf = (string) => {\n  let prefixes = [];\n  let currentPrefix = '';\n  let currentLength = 0;\n  let currentIndex = 0;\n  let currentString = string;\n  while (currentIndex < currentString.length) {\n    currentLength = currentString.length - currentIndex;\n    if (currentLength > currentPrefix.length) {\n      currentPrefix = currentString.substring(currentIndex, currentIndex + currentLength);\n      prefixes.push(currentPrefix);\n    }\n    currentIndex += currentLength;\n  }\n  return prefixes;\n};\n\nmodule.exports = {\n  allPrefixes,\n  allPrefixesWithLength,\n  allPrefixesWithLengthAndIndex,\n  allPrefixesWithLengthAndIndexAndIndexOf,\n  allPrefixesWithLengthAndIndexAndIndexOfAndIndexOf,\n  allPrefixesWithLengthAndIndexAndIndexOfAndIndexOfAndIndexOf,\n  allPrefixesWithLengthAndIndexAndIndexOfAndIndexOfAndIndexOfAndIndexOf,\n  allPrefixesWithLengthAndIndexAndIndexOfAndIndexOfAndIndexOfAndIndexOfAndIndexOf,\n  allPrefixesWithLengthAndIndexAndIndexOfAndIndexOfAndIndexOfAndIndexOfAndIndexOfAndIndexOf,\n  allPrefixesWithLengthAndIndexAndIndex", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  establish a string text, replace all space in it with underscore, \n   and if a chain has more than 2 back-to-back space, \n   then substitute all back-to-back spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "/*\n  establish a string text, replace all space in it with underscore, \n   and if a chain has more than 2 back-to-back space, \n   then substitute all back-to-back spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  let result2 = result.replace(/\\s+/g, '-');\n  return result2;\n}\n\n//\n//  getFileName(filePath)\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath) == \"file.txt\"\n//  getFileName(filePath", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which fill a string typify a file's name, and revert \n  ' Yes' if the the file's name is valid, and return' No' otherwise. \n   A file's name is considered to be valid if and only if all the postdate conditions \n   are met: \n   - There should not be more than three digit (' 0'-'9') in the file's name. \n   - The file's name contains precisely one dot'.' \n   - The substring before the acid should not be empty, and it start with a letter from \n   the romance alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "/*Create a function which fill a string typify a file's name, and revert \n 'Yes' if the the file's name is valid, and return' No' otherwise. \n   A file's name is considered to be valid if and only if all the postdate conditions \n   are met: \n   - There should not be more than three digit (' 0'-'9') in the file's name. \n   - The file's name contains precisely one dot'.' \n   - The substring before the acid should not be empty, and it start with a letter from \n   the romance alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = file_name.replace(/[^a-zA-Z0-9.]/g, '').replace(/^./, '').replace(/\\.$/, '');\n  if (file_name_check.length > 3) {\n    return 'No';\n  }\n  if (file_name_check.length === 0) {\n    return 'No';\n  }\n  if (file_name_check.indexOf('.') === -1) {\n    return 'No';\n  }\n  if (file_name_check.indexOf('.')!== 0) {\n    return 'No';\n  }\n  if (file_name_check.indexOf('.')!== file_name_check.length - 1) {\n    return 'No';\n  }\n  let file_name_check_after_dot = file_name_check.substring(file_name_check.indexOf('.') + 1);\n  if (file_name_check_after_dot.length === 0) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== 0) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 1) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 2) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 3) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 4) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 5) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 6) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 7) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 8) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 9) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 10) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 11) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 12) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 13) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 14) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 15) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 16) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 17) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 18) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 19) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 20) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 21) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf('.')!== file_name_check_after_dot.length - 22) {\n    return 'No';\n  }\n  if (file_name_check_after_dot.indexOf", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This affair will take a list of integer. For all entries in the list, the routine shall feather the integer entry if its index be a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the introduction in the list whose indexes are not a multiple of 3 or 4. The routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*\"\n  This affair will take a list of integer. For all entries in the list, the routine shall feather the integer entry if its index be a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the introduction in the list whose indexes are not a multiple of 3 or 4. The routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\nconsole.log(sumSquares2([1,2,3]));\nconsole.log(sumSquares2([]));\nconsole.log(sumSquares2([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are establish a string exemplify a sentence,\n   the sentence incorporate some discussion separate by a space, \n   and you have to return a bowed stringed instrument that control the actor's line from the original sentence,\n   whose duration be prime numbers, \n   the order of the word in the new string should embody the like as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "/*\n  You are establish a string exemplify a sentence,\n   the sentence incorporate some discussion separate by a space, \n   and you have to return a bowed stringed instrument that control the actor's line from the original sentence,\n   whose duration be prime numbers, \n   the order of the word in the new string should embody the like as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = [];\n  let index = 0;\n  let word = '';\n  while (index < sentence.length) {\n    if (sentence[index] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += sentence[index];\n    }\n    index++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst getBowedString = (words) => {\n  let bow = '';\n  let index = 0;\n  while (index < words.length) {\n    if (words[index] === 'go') {\n      bow += 'go';\n    } else if (words[index] === 'for') {\n      bow += 'for';\n    } else if (words[index] === 'is') {\n      bow += 'is';\n    } else if (words[index] === 'a') {\n      bow += 'a';\n    } else if (words[index] === 'test') {\n      bow += 'test';\n    } else if (words[index] === 'lets') {\n      bow += 'lets';\n    } else if (words[index] === 'go') {\n      bow += 'go';\n    } else if (words[index] ==='swimming') {\n      bow +='swimming';\n    } else {\n      bow += words[index];\n    }\n    index++;\n  }\n  return bow;\n};\n\nconst getBowedString2 = (words) => {\n  let bow = '';\n  let index = 0;\n  while (index < words.length) {\n    if (words[index] === 'go') {\n      bow += 'go';\n    } else if (words[index] === 'for') {\n      bow += 'for';\n    } else if (words[index] === 'is') {\n      bow += 'is';\n    } else if (words[index] === 'a') {\n      bow += 'a';\n    } else if (words[index] === 'test') {\n      bow += 'test';\n    } else if (words[index] === 'lets') {\n      bow += 'lets';\n    } else if (words[index] === 'go') {\n      bow += 'go';\n    } else if (words[index] ==='swimming') {\n      bow +='swimming';\n    } else {\n      bow += words[index];\n    }\n    index++;\n  }\n  return bow;\n};\n\nconst getBowedString3 = (words) => {\n  let bow = '';\n  let index = 0;\n  while (index < words.length) {\n    if (words[index] === 'go') {\n      bow += 'go';\n    } else if (words[index] === 'for') {\n      bow += 'for';\n    } else if (words[index] === 'is') {\n      bow += 'is';\n    } else if (words[index] === 'a') {\n      bow += 'a';\n    } else if (words[index] === 'test') {\n      bow += 'test';\n    } else if (words[index] === 'lets') {\n      bow += 'lets';\n    } else if (words[index] === 'go') {\n      bow += 'go';\n    } else if (words[index] ==='swimming') {\n      bow +='swimming';\n    } else {\n      bow += words[index];\n    }\n    index++;\n  }\n  return bow;\n};\n\nconst getBowedString4 = (words) => {\n  let bow = '';\n  let index = 0;\n  while (index < words.length) {\n    if (words[index] === 'go') {\n      bow += 'go';\n    } else if (words[index] === 'for') {\n      bow += 'for';\n    } else if (words[index] === 'is') {\n      bow += 'is';\n    } else if (words[index] === 'a') {\n      bow += 'a';\n    } else if (words[index] === 'test') {\n      bow += 'test';\n    } else if (words[index] === 'lets') {\n      bow += 'lets';\n    } else if (words[index] === 'go') {\n      bow += 'go';\n    } else if (words[index] ==='swimming') {\n      bow +='swimming';\n    } else {\n      bow += words[index];\n    }\n    index++;\n  }\n  return bow;\n};\n\nconst getBowedString5 = (words) => {\n  let bow = '';\n  let index = 0;\n  while (index < words.length) {\n    if (words[index] === 'go') {\n      bow += 'go';\n    } else if (words[index] === 'for') {\n      bow += 'for';\n    } else if (words[index] === 'is') {\n      bow += 'is';\n    } else if (words[index] === 'a') {\n      bow += 'a';\n    } else if (words[index] === 'test') {\n      bow += 'test';\n    } else if (words[index] === 'lets') {\n      bow += 'lets';\n    } else if (words[index] === 'go') {\n      bow += 'go';\n    } else if (words[index] ==='swimming') {\n      bow +='swimming';\n    } else {\n      bow += words[index];\n    }\n    index++;\n  }\n  return bow;\n};\n\nconst getBowedString6 = (words) => {\n  let bow = '';\n  let index = 0;\n  while (index < words.length) {\n    if (words[index]", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your undertaking is to implement a routine that will simplify the saying \n   x * n. The routine return true if x * n evaluates to a unharmed numeral and assumed \n   otherwise. Both x and n, are drawstring theatrical performance of a fraction, and have the following format, \n   < numerator>/<denominator > where both numerator and denominator are positive solid numbers. \n\n   You can wear that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = fake \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "/*Your undertaking is to implement a routine that will simplify the saying \n   x * n. The routine return true if x * n evaluates to a unharmed numeral and assumed \n   otherwise. Both x and n, are drawstring theatrical performance of a fraction, and have the following format, \n   < numerator>/<denominator > where both numerator and denominator are positive solid numbers. \n\n   You can wear that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = fake \n   * / \n const simplify = (x, n) = > {\n   let x = x.split(\"/\");\n   let n = n.split(\"/\");\n   let x_num = x[0];\n   let x_den = x[1];\n   let n_num = n[0];\n   let n_den = n[1];\n   let x_num_int = parseInt(x_num);\n   let n_num_int = parseInt(n_num);\n   let x_den_int = parseInt(x_den);\n   let n_den_int = parseInt(n_den);\n   let x_num_int_div_n_den_int = x_num_int / n_den_int;\n   let x_num_int_mod_n_den_int = x_num_int % n_den_int;\n   let x_num_int_div_n_den_int_mod_n_den_int = x_num_int_div_n_den_int % n_den_int;\n   let x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int = x_num_int_div_n_den_int_mod_n_den_int % n_den_int;\n   let x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int = x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int % n_den_int;\n   let x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int = x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int % n_den_int;\n   let x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int = x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int % n_den_int;\n   let x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int = x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int % n_den_int;\n   let x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int = x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int % n_den_int;\n   let x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int = x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int % n_den_int;\n   let x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int = x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int % n_den_int;\n   let x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int = x_num_int_div_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int_mod_n_den_int % n_den_int;\n   let x_num_int_div_n_den_int_mod_n_den_int_mod_n_den", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  publish a function which classify the pass list of integer \n   in ascend decree according to the kernel of their digit. \n   bill: if there are respective items with alike sum of their digits, \n   order them base on their index in original list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "/*\n  publish a function which classify the pass list of integer \n   in ascend decree according to the kernel of their digit. \n   bill: if there are respective items with alike sum of their digits, \n   order them base on their index in original list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst test = () => {\n  console.log(orderByPoints([1, 11, -1, -11, -12]));\n  console.log(orderByPoints([]));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that fill an array of number as remark and returns \n   the number of elements in the array that are capital than 10 and both \n   inaugural and last finger of a act are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "/*Write a function that fill an array of number as remark and returns \n   the number of elements in the array that are capital than 10 and both \n   inaugural and last finger of a act are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 5 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are establish a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triple (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "/*\n  You are establish a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triple (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (i < j && j < k) {\n          if (i * i - i + 1 === k * k - k + 1 && k * k - k + 1 === j * j - j + 1) {\n            max = Math.max(max, i + j + k);\n          }\n        }\n      }\n    }\n  }\n  return max;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planet in our solar organization: the closerst to the Sun \n   cost Mercury, the following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that take two satellite names as string planet1 and planet2.\n   The affair should return a tuple check all planets whose orbits are \n   situate between the orbit of planet1 and the orbit of planet2, classify by \n   the proximity to the sunlight. \n   The routine should return an empty tuple if planet1 or planet2\n   are not right satellite name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "/* There are eight planet in our solar organization: the closerst to the Sun \n   cost Mercury, the following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that take two satellite names as string planet1 and planet2.\n   The affair should return a tuple check all planets whose orbits are \n   situate between the orbit of planet1 and the orbit of planet2, classify by \n   the proximity to the sunlight. \n   The routine should return an empty tuple if planet1 or planet2\n   are not right satellite name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let result = []\n  let check = () => {\n    let [planet1_orbit, planet2_orbit] = [...planet1.split(\" \")]\n    let [planet1_sun, planet2_sun] = [...planet2.split(\" \")]\n    let [planet1_sun_orbit, planet2_sun_orbit] = [...planet1_sun.split(\" \")]\n    let [planet1_sun_orbit_orbit, planet2_sun_orbit_orbit] = [...planet1_sun_orbit.split(\" \")]\n    let [planet1_sun_orbit_orbit_orbit_orbit, planet2_sun_orbit_orbit_orbit] = [...planet1_sun_orbit_orbit.split(\" \")]\n    let [planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit, planet2_sun_orbit_orbit_orbit_orbit] = [...planet1_sun_orbit_orbit_orbit_orbit.split(\" \")]\n    let [planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit, planet2_sun_orbit_orbit_orbit_orbit_orbit] = [...planet1_sun_orbit_orbit_orbit_orbit_orbit.split(\" \")]\n    let [planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit, planet2_sun_orbit_orbit_orbit_orbit_orbit_orbit] = [...planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit.split(\" \")]\n    let [planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit, planet2_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit] = [...planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit.split(\" \")]\n    let [planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit, planet2_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit] = [...planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit.split(\" \")]\n    let [planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit, planet2_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit] = [...planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit.split(\" \")]\n    let [planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit, planet2_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit] = [...planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit.split(\" \")]\n    let [planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit, planet2_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit] = [...planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit.split(\" \")]\n    let [planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit, planet2_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit] = [...planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit.split(\" \")]\n    let [planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit, planet2_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit] = [...planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit.split(\" \")]\n    let [planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit, planet2_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit] = [...planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit.split(\" \")]\n    let [planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit, planet2_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit] = [...planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit.split(\" \")]\n    let [planet1_sun_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_orbit_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that bear a list of string section as a argument, \n   delete the bowed stringed instrument that have curious length from it, \n   and render the resulted list with a classify ordering, \n   The list is always a list of strings and never an array of numbers, \n   and it may contain duplicates. \n   The order of the list should be ascend by length of each son, and you \n   should return the list sorted by that principle. \n   If two words take the same distance, sort the list alphabetically. \n   The affair should return a list of strings in screen club. \n   You may simulate that all news will accept the like distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "/*Write a function that bear a list of string section as a argument, \n   delete the bowed stringed instrument that have curious length from it, \n   and render the resulted list with a classify ordering, \n   The list is always a list of strings and never an array of numbers, \n   and it may contain duplicates. \n   The order of the list should be ascend by length of each son, and you \n   should return the list sorted by that principle. \n   If two words take the same distance, sort the list alphabetically. \n   The affair should return a list of strings in screen club. \n   You may simulate that all news will accept the like distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i].length === sorted[i + 1].length) {\n      result.push(sorted[i]);\n    } else {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum2 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i].length === sorted[i + 1].length) {\n      result.push(sorted[i]);\n    } else {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum3 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i].length === sorted[i + 1].length) {\n      result.push(sorted[i]);\n    } else {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum4 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i].length === sorted[i + 1].length) {\n      result.push(sorted[i]);\n    } else {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum5 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i].length === sorted[i + 1].length) {\n      result.push(sorted[i]);\n    } else {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum6 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i].length === sorted[i + 1].length) {\n      result.push(sorted[i]);\n    } else {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum7 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i].length === sorted[i + 1].length) {\n      result.push(sorted[i]);\n    } else {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum8 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i].length === sorted[i + 1].length) {\n      result.push(sorted[i]);\n    } else {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum9 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i].length === sorted[i + 1].length) {\n      result.push(sorted[i]);\n    } else {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum10 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i].length === sorted[i + 1].length) {\n      result.push(sorted[i]);\n    } else {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum11 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i].length === sorted[i + 1].length) {\n      result.push(sorted[i]);\n    } else {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* fall a drawstring incorporate distance - delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "/* fall a drawstring incorporate distance - delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1}`\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1}`\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1}`\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1}`\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1}`\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1}`\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1}`\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1}`\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1}`\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1}`\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1}`\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1}`\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1}`\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1}`\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence15 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1}`\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence16 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i + 1}`\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/150", "prompt": "/*A elementary program which should return the value of x if n be \n   a choice number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "/*A elementary program which should return the value of x if n be \n   a choice number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return x;\n  } else if (n === y) {\n    return y;\n  } else {\n    return 0;\n  }\n};\n\nconst xOrY_test = (n, x, y) => {\n  return xOrY(n, x, y) === x;\n};\n\nconst xOrY_test_2 = (n, x, y) => {\n  return xOrY(n, x, y) === y;\n};\n\nconst xOrY_test_3 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_4 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_5 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_6 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_7 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_8 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_9 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_10 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_11 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_12 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_13 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_14 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_15 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_16 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_17 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_18 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_19 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_20 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_21 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_22 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_23 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_24 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_25 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_26 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_27 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_28 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_29 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_30 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_31 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_32 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_33 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_34 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_35 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_36 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst xOrY_test_37 = (n, x, y) => {\n  return xOrY(n, x, y) === 0;\n};\n\nconst x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* establish a list of numbers, return the union of square of the number \n   in the list that constitute odd. Ignore numbers that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "/* establish a list of numbers, return the union of square of the number \n   in the list that constitute odd. Ignore numbers that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   if (lst.length == 0) {\n     return 0;\n   }\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     let x = lst[i];\n     if (x % 2 == 0) {\n       sum += x * x;\n     }\n   }\n   return sum;\n }\n * @author: Junaidul Islam\n * @version: 1.0\n */\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let x = lst[i];\n    if (x % 2 == 0) {\n      sum += x * x;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = doubleTheDifference;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I remember we all remember that spirit when the consequence of some long - awaited \n   event is finally know. The spirit and thought you have at that consequence are \n   decidedly worth noting down and comparing. \n   Your task is to decide if a person correctly guess the result of a number of match. \n   You are given two array of scores and guess of equal distance, where each index shows a couple. \n   Return an array of the like duration denote how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the mark.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "/*I remember we all remember that spirit when the consequence of some long - awaited \n   event is finally know. The spirit and thought you have at that consequence are \n   decidedly worth noting down and comparing. \n   Your task is to decide if a person correctly guess the result of a number of match. \n   You are given two array of scores and guess of equal distance, where each index shows a couple. \n   Return an array of the like duration denote how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the mark.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be establish the name of a course (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the class. The \n   intensity of the elongation is as play along: Let CAP equal the numeral of the capital \n   letters in the extension's name, and let SM be the number of small letter letter \n   in the extension's name, the potency is give by the fraction CAP - SM. \n   You should discover the potent extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there be two or more extensions with the like persuasiveness, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "/*You will be establish the name of a course (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the class. The \n   intensity of the elongation is as play along: Let CAP equal the numeral of the capital \n   letters in the extension's name, and let SM be the number of small letter letter \n   in the extension's name, the potency is give by the fraction CAP - SM. \n   You should discover the potent extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there be two or more extensions with the like persuasiveness, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_name = ''\n  let extension_strength = 0\n  let extension_count = 0\n  let extension_index = 0\n  let extension_count_max = 0\n  let extension_count_min = 0\n  let extension_count_max_strength = 0\n  let extension_count_min_strength = 0\n  let extension_count_max_strength_index = 0\n  let extension_count_min_strength_index = 0\n\n  extensions.forEach(extension => {\n    extension_name = extension.split('.')[0]\n    extension_strength = extension.split('.')[1]\n    extension_count = extension.split('.').length - 1\n    extension_count_max = extension_count > extension_count_max? extension_count : extension_count_max\n    extension_count_min = extension_count < extension_count_min? extension_count : extension_count_min\n    extension_count_max_strength = extension_strength > extension_count_max_strength? extension_strength : extension_count_max_strength\n    extension_count_min_strength = extension_strength < extension_count_min_strength? extension_strength : extension_count_min_strength\n    extension_count_max_strength_index = extension_strength > extension_count_max_strength_index? extension_strength : extension_count_max_strength_index\n    extension_count_min_strength_index = extension_strength < extension_count_min_strength_index? extension_strength : extension_count_min_strength_index\n  })\n\n  if (extension_count_max_strength_index === extension_count_min_strength_index) {\n    extension_index = extension_count_max_strength_index\n  } else if (extension_count_max_strength_index > extension_count_min_strength_index) {\n    extension_index = extension_count_max_strength_index\n  } else {\n    extension_index = extension_count_min_strength_index\n  }\n\n  extensions.forEach(extension => {\n    extension_name = extension.split('.')[0]\n    extension_strength = extension.split('.')[1]\n    extension_count = extension.split('.').length - 1\n    extension_count_max = extension_count > extension_count_max? extension_count : extension_count_max\n    extension_count_min = extension_count < extension_count_min? extension_count : extension_count_min\n    extension_count_max_strength = extension_strength > extension_count_max_strength? extension_strength : extension_count_max_strength\n    extension_count_min_strength = extension_strength < extension_count_min_strength? extension_strength : extension_count_min_strength\n    extension_count_max_strength_index = extension_strength > extension_count_max_strength_index? extension_strength : extension_count_max_strength_index\n    extension_count_min_strength_index = extension_strength < extension_count_min_strength_index? extension_strength : extension_count_min_strength_index\n  })\n\n  if (extension_count_max_strength_index === extension_count_min_strength_index) {\n    extension_index = extension_count_max_strength_index\n  } else if (extension_count_max_strength_index > extension_count_min_strength_index) {\n    extension_index = extension_count_max_strength_index\n  } else {\n    extension_index = extension_count_min_strength_index\n  }\n\n  extensions.forEach(extension => {\n    extension_name = extension.split('.')[0]\n    extension_strength = extension.split('.')[1]\n    extension_count = extension.split('.').length - 1\n    extension_count_max = extension_count > extension_count_max? extension_count : extension_count_max\n    extension_count_min = extension_count < extension_count_min? extension_count : extension_count_min\n    extension_count_max_strength = extension_strength > extension_count_max_strength? extension_strength : extension_count_max_strength\n    extension_count_min_strength = extension_strength < extension_count_min_strength? extension_strength : extension_count_min_strength\n    extension_count_max_strength_index = extension_strength > extension_count_max_strength_index? extension_strength : extension_count_max_strength_index\n    extension_count_min_strength_index = extension_strength < extension_count_min_strength_index? extension_strength : extension_count_min_strength_index\n  })\n\n  if (extension_count_max_strength_index === extension_count_min_strength_index) {\n    extension_index = extension_count_max_strength_index\n  } else if (extension_count_max_strength_index > extension_count_min_strength_index) {\n    extension_index = extension_count_max_strength_index\n  } else {\n    extension_index = extension_count_min_strength_index\n  }\n\n  return class", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are establish 2 words. You want to return truthful if the second password or any of its rotation is a substring in the first password \n   cycpatternCheck(\"abcd\",\"abd\") = > assumed \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > truthful \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "/*You are establish 2 words. You want to return truthful if the second password or any of its rotation is a substring in the first password \n   cycpatternCheck(\"abcd\",\"abd\") = > assumed \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > truthful \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\");\n   let b = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let w1 = 0;\n   let w2 = 0;\n   let w3 = 0;\n   let w4 = 0;\n   let w5 = 0;\n   let w6 = 0;\n   let w7 = 0;\n   let w8 = 0;\n   let w9 = 0;\n   let w10 = 0;\n   let w11 = 0;\n   let w12 = 0;\n   let w13 = 0;\n   let w14 = 0;\n   let w15 = 0;\n   let w16 = 0;\n   let w17 = 0;\n   let w18 = 0;\n   let w19 = 0;\n   let w20 = 0;\n   let w21 = 0;\n   let w22 = 0;\n   let w23 = 0;\n   let w24 = 0;\n   let w25 = 0;\n   let w26 = 0;\n   let w27 = 0;\n   let w28 = 0;\n   let w29 = 0;\n   let w30 = 0;\n   let w31 = 0;\n   let w32 = 0;\n   let w33 = 0;\n   let w34 = 0;\n   let w35 = 0;\n   let w36 = 0;\n   let w37 = 0;\n   let w38 = 0;\n   let w39 = 0;\n   let w40 = 0;\n   let w41 = 0;\n   let w42 = 0;\n   let w43 = 0;\n   let w44 = 0;\n   let w45 = 0;\n   let w46 = 0;\n   let w47 = 0;\n   let w48 = 0;\n   let w49 = 0;\n   let w50 = 0;\n   let w51 = 0;\n   let w52 = 0;\n   let w53 = 0;\n   let w54 = 0;\n   let w55 = 0;\n   let w56 = 0;\n   let w57 = 0;\n   let w58 = 0;\n   let w59 = 0;\n   let w60 = 0;\n   let w61 = 0;\n   let w62 = 0;\n   let w63 = 0;\n   let w64 = 0;\n   let w65 = 0;\n   let w66 = 0;\n   let w67 = 0;\n   let w68 = 0;\n   let w69 = 0;\n   let w70 = 0;\n   let w71 = 0;\n   let w72 = 0;\n   let w73 = 0;\n   let w74 = 0;\n   let w75 = 0;\n   let w76 = 0;\n   let w77 = 0;\n   let w78 = 0;\n   let w79 = 0;\n   let w80 = 0;\n   let w81 = 0;\n   let w82 = 0;\n   let w83 = 0;\n   let w84 = 0;\n   let w85 = 0;\n   let w86 = 0;\n   let w87 = 0;\n   let w88 = 0;\n   let w89 = 0;\n   let w90 = 0;\n   let w91 = 0;\n   let w92 = 0;\n   let w93 = 0;\n   let w94 = 0;\n   let w95 = 0;\n   let w96 = 0;\n   let w97 = 0;\n   let w98 = 0;\n   let w99 = 0;\n   let w100 = 0;\n   let w101 = 0;\n   let w102 = 0;\n   let w103 = 0;\n   let w104 = 0;\n   let w105 = 0;\n   let w106 = 0;\n   let w107 = 0;\n   let w108 = 0;\n   let w109 = 0;\n   let w110 = 0;\n   let w111 = 0;\n   let w112 = 0;\n   let w113 = 0;\n   let w114 = 0;\n   let w115 = 0;\n   let w116 = 0;\n   let w117 = 0;\n   let w118 = 0;\n   let w119 = 0;\n   let w120 = 0;\n   let w121 = 0;\n   let w122 = 0;\n   let w123 = 0;\n   let w124 = 0;\n   let w125 = 0;\n   let w126 = 0;\n   let w127 = 0;\n   let w128 = 0;\n   let w129 = 0;\n   let w130 = 0;\n   let w131 = 0;\n   let w132 = 0;\n   let w133 = 0;\n   let w134 = 0;\n   let w135 = 0;\n   let w136 = 0;\n   let w137 = 0;\n   let w138 = 0;\n   let w139 = 0;\n   let w140 = 0;\n   let w141 = 0;\n   let w142 = 0;\n   let w143 = 0;\n   let w144 = 0;\n   let w145 = 0;\n   let w146 = 0;\n   let w147 = 0;\n   let w148 = 0;\n   let w149 = 0;\n   let w150 = 0;\n   let w151 = 0;\n   let w152 = 0;\n   let w153 = 0;\n   let w154 = 0;\n   let w155 =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that have the number of even and leftover digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "/*Given an integer. return a tuple that have the number of even and leftover digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0\n  let leftOver = 0\n  if (num < 0) {\n    even = -1\n    leftOver = Math.abs(num)\n  } else {\n    even = 1\n    leftOver = num\n  }\n  return {even, leftOver}\n}\n\nmodule.exports = {evenOddCount}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  establish a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "/*\n  establish a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid input');\n  }\n  let miniRoman = '';\n  let numeral = '';\n  let i = 0;\n  while (number > 0) {\n    numeral = number % 10;\n    miniRoman = numeral + miniRoman;\n    number = Math.floor(number / 10);\n    i++;\n  }\n  miniRoman = miniRoman.toLowerCase();\n  return miniRoman;\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n establish the lengths of the three side of a triangulum. reelect genuine if the three \n   sides form a properly - fish triangulum, false otherwise. \n   A mighty - angle triangle is a triangle in which one angle is correct angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "/*\n establish the lengths of the three side of a triangulum. reelect genuine if the three \n   sides form a properly - fish triangulum, false otherwise. \n   A mighty - angle triangle is a triangle in which one angle is correct angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a2 = a * a;\n  const b2 = b * b;\n  const c2 = c * c;\n  const ab = a * b;\n  const ac = a * c;\n  const bc = b * c;\n  const abc = ab * c;\n  const ab2 = ab * ab;\n  const bc2 = bc * bc;\n  const abc2 = abc * abc;\n  const abbc = abc * abc;\n  const abbc2 = abbc * abbc;\n  const abbcbc = abbc * abbc;\n  const abbcbc2 = abbcbc * abbc;\n  const abbcbcbc = abbcbc * abbc;\n  const abbcbcbc2 = abbcbcbc * abbc;\n  const abbcbcbcbc = abbcbcbc * abbc;\n  const abbcbcbcbc2 = abbcbcbcbc * abbc;\n  const abbcbcbcbcbc = abbcbcbcbc * abbc;\n  const abbcbcbcbcbc2 = abbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbc = abbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbc2 = abbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbc = abbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbc2 = abbcbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbcbc = abbcbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbcbc2 = abbcbcbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbcbcbc = abbcbcbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbcbcbc2 = abbcbcbcbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbcbcbcbc = abbcbcbcbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbcbcbcbc2 = abbcbcbcbcbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbcbcbcbcbc = abbcbcbcbcbcbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbcbcbcbcbc2 = abbcbcbcbcbcbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbcbcbcbcbcbc = abbcbcbcbcbcbcbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbcbcbcbcbcbc2 = abbcbcbcbcbcbcbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbcbcbcbcbcbcbc = abbcbcbcbcbcbcbcbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbcbcbcbcbcbcbc2 = abbcbcbcbcbcbcbcbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abbcbcbcbcbcbcbcbcbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * abbc;\n  const abbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc;\n  const abbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that bear a list of string section. \n   The list check different words. Return the word with maximum act \n   of alone character. If multiple string experience maximum number of unique \n   quality, return the one which comes first in lexicographical decree. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" chain \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "/*Write a function that bear a list of string section. \n   The list check different words. Return the word with maximum act \n   of alone character. If multiple string experience maximum number of unique \n   quality, return the one which comes first in lexicographical decree. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" chain \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = words[0];\n   let maxIndex = 0;\n   for (let i = 1; i < words.length; i++) {\n     let word = words[i];\n     if (word.length > max.length) {\n       max = word;\n       maxIndex = i;\n     } else if (word.length === max.length) {\n       if (word > max) {\n         max = word;\n         maxIndex = i;\n       }\n     }\n   }\n   return max;\n }\n*/\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > max.length) {\n      max = word;\n      maxIndex = i;\n    } else if (word.length === max.length) {\n      if (word > max) {\n        max = word;\n        maxIndex = i;\n      }\n    }\n  }\n  return max;\n}\n\nmodule.exports = findMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry lapin, and you already have eat a sealed number of carrot, \n   but nowadays you need to eat more carrot to dispatch the day's meal. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will still embody hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "/*\n  You're a hungry lapin, and you already have eat a sealed number of carrot, \n   but nowadays you need to eat more carrot to dispatch the day's meal. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will still embody hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < 0 || number > 1000) return [0, 0];\n  if (need < 0 || need > 1000) return [0, 0];\n  if (remaining < 0 || remaining > 1000) return [0, 0];\n\n  let total = 0;\n  let carrot = 0;\n  let left = 0;\n  let i = 0;\n  while (i < number) {\n    carrot = Math.min(number - i, need);\n    total += carrot;\n    left += carrot;\n    i += carrot;\n  }\n\n  return [total, left];\n};\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* establish a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "/* establish a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char = '';\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char!=='') {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  establish two lists operator, and operand. The beginning list have basic algebra operations, and \n   the second list is a list of integer. Use the two give list to build the algebric \n   formula and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "/*\n  establish two lists operator, and operand. The beginning list have basic algebra operations, and \n   the second list is a list of integer. Use the two give list to build the algebric \n   formula and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const operatorList = operator.split('');\n  const operandList = operand.split('');\n  let i = 0;\n  let j = 0;\n  while (i < operatorList.length && j < operandList.length) {\n    if (operatorList[i] === operandList[j]) {\n      result.push(operatorList[i]);\n      i++;\n      j++;\n    } else if (operatorList[i] === '*') {\n      result.push(operandList[j] * operandList[j + 1]);\n      i++;\n      j += 2;\n    } else if (operatorList[i] === '/') {\n      result.push(operandList[j] / operandList[j + 1]);\n      i++;\n      j += 2;\n    } else if (operatorList[i] === '+') {\n      result.push(operandList[j] + operandList[j + 1]);\n      i++;\n      j += 2;\n    } else if (operatorList[i] === '-') {\n      result.push(operandList[j] - operandList[j + 1]);\n      i++;\n      j += 2;\n    }\n  }\n  while (i < operatorList.length) {\n    result.push(operatorList[i]);\n    i++;\n  }\n  while (j < operandList.length) {\n    result.push(operandList[j]);\n    j++;\n  }\n  return result.join('');\n};\n\nconst test = () => {\n  const operator = ['+', '*', '-'];\n  const operand = [2, 3, 4, 5];\n  console.log(doAlgebra(operator, operand));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are establish a string s.\n   if s[i] is a letter, reverse its lawsuit from humble to upper or vise versa, \n   otherwise observe it as it is. \n   If the drawstring incorporate no letters, reverse the string. \n   The routine should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*You are establish a string s.\n   if s[i] is a letter, reverse its lawsuit from humble to upper or vise versa, \n   otherwise observe it as it is. \n   If the drawstring incorporate no letters, reverse the string. \n   The routine should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = s;\n  let temp = s;\n  let flag = false;\n  let i = 0;\n  while (i < temp.length) {\n    if (temp[i] >= 'a' && temp[i] <= 'z') {\n      if (flag) {\n        result = result.replace(temp[i], temp[i].toUpperCase());\n        flag = false;\n      } else {\n        result = result.replace(temp[i], temp[i].toLowerCase());\n        flag = true;\n      }\n    } else {\n      result = result.replace(temp[i], temp[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\nconsole.log(solve(\"\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\")", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  establish a string 'text', return its md5 hashish equivalent drawstring. \n   If 'text' is an empty chain, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "/*\n  establish a string 'text', return its md5 hashish equivalent drawstring. \n   If 'text' is an empty chain, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/**\n  Given a string, return its md5 hashish equivalent.\n  If 'text' is an empty chain, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString = (md5) => {\n  if (md5 === null) {\n    return null;\n  }\n  return md5.substr(0, 16);\n};\n\n/**\n  Given a string, return its sha1 hashish equivalent.\n  If 'text' is an empty chain, return null.\n\n  >>> stringToSha1('Hello world') == '6f8d7a8d6d8e6e8e6d8e6f8d7a8d6d8e6e8e6d8e6e8e6d8e6f8d7a8d6d8e6e8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6d8e6", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  establish two positive integer a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "/*\n  establish two positive integer a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 2;\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* input signal to this function is a drawstring represent melodious note in a special ASCII format. \n   Your task is to parse this chain and return list of integers equate to how many beats does each \n   not last. \n\n   Here is a caption: \n  ' o' - whole note, lasts four beat \n  ' o|' - one-half eminence, survive two beats \n  ' .|' - quater note, lasts one rhythm\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "/* input signal to this function is a drawstring represent melodious note in a special ASCII format. \n   Your task is to parse this chain and return list of integers equate to how many beats does each \n   not last. \n\n   Here is a caption: \n 'o' - whole note, lasts four beat \n 'o|' - one-half eminence, survive two beats \n  '.|' - quater note, lasts one rhythm\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let notes = [];\n  let note_count = 0;\n  let note_duration = 0;\n  let note_duration_count = 0;\n  let note_duration_count_max = 0;\n  let note_duration_count_min = 0;\n  let note_duration_count_max_max = 0;\n  let note_duration_count_min_min = 0;\n  let note_duration_count_max_min = 0;\n  let note_duration_count_min_max = 0;\n  let note_duration_count_min_min_min = 0;\n  let note_duration_count_max_min_min = 0;\n  let note_duration_count_min_max_min = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration_count_min_min_max = 0;\n  let note_duration_count_max_min_max = 0;\n  let note_duration_count_min_max_max = 0;\n  let note_duration", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* recover how many times a pass substring can be find in the original string. Count overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "/* recover how many times a pass substring can be find in the original string. Count overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++\n      i += substring.length\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* input signal is a space - subtend bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers screen from little to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "/* input signal is a space - subtend bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers screen from little to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let result = '';\n  let number = 0;\n  let i = 0;\n  while (i < numbers.length) {\n    number = parseInt(numbers[i]);\n    if (number < 10) {\n      result += number;\n    } else {\n      result += number.toString(10);\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* establish a positive float detail number, it can be disintegrate into \n   and integer part (largest integer smaller than give number) and decimal fraction \n   (leftover function constantly smaller than 1). \n\n   Return the decimal function of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "/* establish a positive float detail number, it can be disintegrate into \n   and integer part (largest integer smaller than give number) and decimal fraction \n   (leftover function constantly smaller than 1). \n\n   Return the decimal function of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + decimalPart;\n};\n\n/*\n  Given a number, return the integer part of the number.\n  \n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  return Math.floor(number);\n};\n\n/*\n  Given a number, return the decimal part of the number.\n  \n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimalPart = (number) => {\n  return number - truncateIntegerPart(number);\n};\n\n/*\n  Given a number, return the integer part of the number.\n  \n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToInteger = (number) => {\n  return truncateIntegerPart(number);\n};\n\n/*\n  Given a number, return the decimal part of the number.\n  \n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumberToDecimal = (number) => {\n  return truncateDecimalPart(number);\n};\n\n/*\n  Given a number, return the integer part of the number.\n  \n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToIntegerAndDecimal = (number) => {\n  return [truncateNumberToInteger(number), truncateNumberToDecimal(number)];\n};\n\n/*\n  Given a number, return the integer part of the number.\n  \n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToDecimalAndInteger = (number) => {\n  return [truncateNumberToDecimal(number), truncateNumberToInteger(number)];\n};\n\n/*\n  Given a number, return the integer part of the number.\n  \n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToDecimalAndIntegerAndDecimal = (number) => {\n  return [truncateNumberToDecimalAndInteger(number), truncateNumberToDecimalAndInteger(number)];\n};\n\n/*\n  Given a number, return the integer part of the number.\n  \n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToDecimalAndIntegerAndDecimalAndInteger = (number) => {\n  return [truncateNumberToDecimalAndInteger(number), truncateNumberToDecimalAndInteger(number), truncateNumberToInteger(number)];\n};\n\n/*\n  Given a number, return the integer part of the number.\n  \n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToDecimalAndIntegerAndDecimalAndIntegerAndInteger = (number) => {\n  return [truncateNumberToDecimalAndInteger(number), truncateNumberToDecimalAndInteger(number), truncateNumberToInteger(number), truncateNumberToInteger(number)];\n};\n\n/*\n  Given a number, return the integer part of the number.\n  \n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToDecimalAndIntegerAndDecimalAndIntegerAndInteger = (number) => {\n  return [truncateNumberToDecimalAndInteger(number), truncateNumberToDecimalAndInteger(number), truncateNumberToDecimalAndInteger(number), truncateNumberToInteger(number)];\n};\n\n/*\n  Given a number, return the integer part of the number.\n  \n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToDecimalAndIntegerAndDecimalAndIntegerAndInteger = (number) => {\n  return [truncateNumberToDecimalAndInteger(number), truncateNumberToDecimalAndInteger(number), truncateNumberToDecimalAndInteger(number), truncateNumberToInteger(number)];\n};\n\n/*\n  Given a number, return the integer part of the number.\n  \n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToDecimalAndIntegerAndDecimalAndIntegerAndInteger = (number) => {\n  return [truncateNumberToDecimalAndInteger(number), truncateNumberToDecimalAndInteger(number), truncateNumberToDecimalAndInteger(number), truncateNumberToInteger(number)];\n};\n\n/*\n  Given a number, return the integer part of the number.\n  \n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToDecimalAndIntegerAndDecimalAndIntegerAndInteger = (number) => {\n  return [truncateNumberToDecimalAndInteger(number), truncateNumberToDecimalAndInteger(number), truncateNumberToDecimalAndInteger(number), truncateNumberToInteger(number)];\n};\n\n/*\n  Given a number, return the integer part of the number.\n  \n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToDecimalAndIntegerAndDecimalAndIntegerAndInteger = (number) => {\n  return [truncateNumberToDecimalAndInteger(number), truncateNumberToDecimalAndInteger(number), truncateNumberToDecimalAndInteger(number), truncateNumberToInteger(number)];\n};\n\n/*\n  Given a number, return the integer part of the number.\n  \n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst trunc", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a supply list of numbers (of length at least two) blue-ribbon and return two that cost the near to each \n   other and return them in order (little number, large act).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "/* From a supply list of numbers (of length at least two) blue-ribbon and return two that cost the near to each \n   other and return them in order (little number, large act).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const minCost = numbers.reduce((a, b) => a + b, 0);\n  const minCostIndex = numbers.indexOf(minCost);\n  const minCostElement = numbers[minCostIndex];\n  const minCostElementIndex = numbers.indexOf(minCostElement);\n  const minCostElement2 = numbers[minCostElementIndex + 1];\n  const minCostElement2Index = numbers.indexOf(minCostElement2);\n  return [minCostElement, minCostElement2];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* establish list of numbers (of at least two elements), put on a analogue transform to that list,\n   such that the smallest numeral will become 0 and the big will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "/* establish list of numbers (of at least two elements), put on a analogue transform to that list,\n   such that the smallest numeral will become 0 and the big will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const unit = Math.max(...numbers)\n  const rescaled = numbers.map((num) => num / unit)\n  return rescaled\n}\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const unit = Math.max(...numbers)\n  const rescaled = numbers.map((num) => num / unit)\n  return rescaled\n}\n\n/*\n  >>> rescaleToUnit2([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const unit = Math.max(...numbers)\n  const rescaled = numbers.map((num) => num / unit)\n  return rescaled\n}\n\n/*\n  >>> rescaleToUnit3([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const unit = Math.max(...numbers)\n  const rescaled = numbers.map((num) => num / unit)\n  return rescaled\n}\n\n/*\n  >>> rescaleToUnit4([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const unit = Math.max(...numbers)\n  const rescaled = numbers.map((num) => num / unit)\n  return rescaled\n}\n\n/*\n  >>> rescaleToUnit5([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const unit = Math.max(...numbers)\n  const rescaled = numbers.map((num) => num / unit)\n  return rescaled\n}\n\n/*\n  >>> rescaleToUnit6([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const unit = Math.max(...numbers)\n  const rescaled = numbers.map((num) => num / unit)\n  return rescaled\n}\n\n/*\n  >>> rescaleToUnit7([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit8 = (numbers) => {\n  const unit = Math.max(...numbers)\n  const rescaled = numbers.map((num) => num / unit)\n  return rescaled\n}\n\n/*\n  >>> rescaleToUnit8([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit9 = (numbers) => {\n  const unit = Math.max(...numbers)\n  const rescaled = numbers.map((num) => num / unit)\n  return rescaled\n}\n\n/*\n  >>> rescaleToUnit9([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit10 = (numbers) => {\n  const unit = Math.max(...numbers)\n  const rescaled = numbers.map((num) => num / unit)\n  return rescaled\n}\n\n/*\n  >>> rescaleToUnit10([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit11 = (numbers) => {\n  const unit = Math.max(...numbers)\n  const rescaled = numbers.map((num) => num / unit)\n  return rescaled\n}\n\n/*\n  >>> rescaleToUnit11([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit12 = (numbers) => {\n  const unit = Math.max(...numbers)\n  const rescaled = numbers.map((num) => num / unit)\n  return rescaled\n}\n\n/*\n  >>> rescaleToUnit12([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit13 = (numbers) => {\n  const unit = Math.max(...numbers)\n  const rescaled = numbers.map((num) => num / unit)\n  return rescaled\n}\n\n/*\n  >>> rescaleToUnit13([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit14 = (numbers) => {\n  const unit = Math.max(...numbers)\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values entirely for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "/* Filter given list of any python values entirely for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for string\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for boolean\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for null\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for undefined\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for object\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for array\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for function\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for date\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDates = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'date';\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for datetime\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDatetimes = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'datetime';\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for decimal\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDecimals = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'decimal';\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for float\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'float';\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for integer\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'integer';\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for string\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for boolean\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for null\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for undefined\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for object\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for array\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for function\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n  * Filter given list of any python values entirely for date\n  * @param {Array} values\n  * @returns {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* return key length of hold string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "/* return key length of hold string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Returns the first index of a substring in a string.\n  * @param {string} string - The string to search in.\n  * @param {string} substring - The substring to search for.\n  * @returns {number} - The index of the first occurrence of the substring.\n  * @example\n  * const str = 'abc';\n  * const index = strindex(str, 'a');\n  * // returns 0\n  *\n  * const str = 'abc';\n  * const index = strindex(str, 'b');\n  * // returns 1\n  *\n  * const str = 'abc';\n  * const index = strindex(str, 'c');\n  * // returns 2\n  *\n  * const str = 'abc';\n  * const index = strindex(str, 'd');\n  * // returns -1\n  *\n  * const str = 'abc';\n  * const index = strindex(str, '');\n  * // returns -1\n  *\n  * const str = 'abc';\n  * const index = strindex(str, 'abc');\n  * // returns -1\n  */\nconst strindex = (string, substring) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  if (substring === null || substring === undefined) {\n    return -1;\n  }\n  if (string.length === 0) {\n    return -1;\n  }\n  if (substring.length === 0) {\n    return -1;\n  }\n  if (string.indexOf(substring) === -1) {\n    return -1;\n  }\n  return string.indexOf(substring);\n};\n\nmodule.exports = {\n  strlen,\n  strindex\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/24", "prompt": "/* For a establish number n, discover the large issue that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "/* For a establish number n, discover the large issue that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the small issue that divide n evenly, little than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the largest issue that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the smallest issue that divide n evenly, little than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the largest issue that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the smallest issue that divide n evenly, little than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the largest issue that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the smallest issue that divide n evenly, little than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the largest issue that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the smallest issue that divide n evenly, little than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the largest issue that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the smallest issue that divide n evenly, little than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the largest issue that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the smallest issue that divide n evenly, little than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the largest issue that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the smallest issue that divide n evenly, little than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the largest issue that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1\n  while (n % divisor === 0) {\n    divisor++\n  }\n  return divisor\n}\n\n/* For a establish number n, discover the smallest issue that divide n evenly, little than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* return key list of prime factor of pass integer in the holy order from little to largest. \n   Each of the factor should be list numeral of times equate to how many times it appeares in factorization. \n   remark number should be adequate to the intersection of all factor\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "/* return key list of prime factor of pass integer in the holy order from little to largest. \n   Each of the factor should be list numeral of times equate to how many times it appeares in factorization. \n   remark number should be adequate to the intersection of all factor\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst factorize2 = (n) => {\n  let factors = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst factorize3 = (n) => {\n  let factors = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst factorize4 = (n) => {\n  let factors = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst factorize5 = (n) => {\n  let factors = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst factorize6 = (n) => {\n  let factors = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst factorize7 = (n) => {\n  let factors = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst factorize8 = (n) => {\n  let factors = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst factorize9 = (n) => {\n  let factors = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst factorize10 = (n) => {\n  let factors = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst factorize11 = (n) => {\n  let factors = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst factorize12 = (n) => {\n  let factors = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst factorize13 = (n) => {\n  let factors = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst factorize14 = (n) => {\n  let factors = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst factorize15 = (n) => {\n  let factors = [];\n  let num = Math.sqrt(n);\n  let i = 2;\n  while (i <= num) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst factorize16 = (n) => {\n  let factors", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integer, remove all element that occur more than once. \n   observe order of elements exit the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "/* From a list of integer, remove all element that occur more than once. \n   observe order of elements exit the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = []\n  let index = 0\n  let temp = []\n  while (index < numbers.length) {\n    if (temp.indexOf(numbers[index]) === -1) {\n      temp.push(numbers[index])\n      result.push(numbers[index])\n    }\n    index++\n  }\n  return result\n}\n\nmodule.exports = removeDuplicates\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a establish string, flick small letter character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "/* For a establish string, flick small letter character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const lower = string.toLowerCase();\n  const upper = string.toUpperCase();\n  return upper.replace(lower, upper.replace(lower, lower));\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAll = (string, pattern) => {\n  return string.replace(new RegExp(pattern, 'g'),'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace2 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace3 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace4 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace5 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace6 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace7 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace8 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace9 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace10 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace11 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace12 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace13 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace14 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace15 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace16 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace17 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace18 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace19 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */\nconst replaceAllWithSpace20 = (string) => {\n  return string.replace(/\\w/g,'');\n};\n\n/* For a establish string, replace all the characters with a single space.\n  >>> replaceAll('Hello', 'o')\n  'Hello'\n  */", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "/* Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate2 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate3 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate4 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate5 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate6 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate7 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate8 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate9 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate10 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate11 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate12 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate13 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate14 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Concatenate list of strings into a single drawstring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate15 = (strings) => {\n  if (strings.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input signal list of strings only for one that get down with a give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "/* Filter an input signal list of strings only for one that get down with a give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    if (strings[0].indexOf(prefix) === 0) {\n      return [strings[0]];\n    }\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\nmodule.exports = filterByPrefix;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/3", "prompt": "/* You're establish a list of deposit and withdrawal operations on a bank report that start with \n   zero balance. Your task is to detect if at any point the balance of report fallls below zero, and \n   at that point affair should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "/* You're establish a list of deposit and withdrawal operations on a bank report that start with \n   zero balance. Your task is to detect if at any point the balance of report fallls below zero, and \n   at that point affair should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/*\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst aboveZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum > 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalanceReport = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length > 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalanceReport2 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalanceReport3 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length === 0 && operations[0] === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalanceReport4 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length === 0 && operations[0] === 0 && operations[1] === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalanceReport5 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length === 0 && operations[0] === 0 && operations[1] === 0 && operations[2] === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalanceReport6 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length === 0 && operations[0] === 0 && operations[1] === 0 && operations[2] === 0 && operations[3] === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalanceReport7 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length === 0 && operations[0] === 0 && operations[1] === 0 && operations[2] === 0 && operations[3] === 0 && operations[4] === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalanceReport8 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length === 0 && operations[0] === 0 && operations[1] === 0 && operations[2] === 0 && operations[3] === 0 && operations[4] === 0 && operations[5] === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalanceReport9 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length === 0 && operations[0] === 0 && operations[1] === 0 && operations[2] === 0 && operations[3] === 0 && operations[4] === 0 && operations[5] === 0 && operations[6] === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalanceReport10 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positivist numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "/*Return only positivist numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst getRange = (n) => {\n  return range(0, n);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst range = (n) => {\n  return Array.from(new Array(n), (e, i) => i);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst getRange2 = (n) => {\n  return range(0, n);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst getRange3 = (n) => {\n  return range(0, n);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst getRange4 = (n) => {\n  return range(0, n);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst getRange5 = (n) => {\n  return range(0, n);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst getRange6 = (n) => {\n  return range(0, n);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst getRange7 = (n) => {\n  return range(0, n);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst getRange8 = (n) => {\n  return range(0, n);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst getRange9 = (n) => {\n  return range(0, n);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst getRange10 = (n) => {\n  return range(0, n);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst getRange11 = (n) => {\n  return range(0, n);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst getRange12 = (n) => {\n  return range(0, n);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst getRange13 = (n) => {\n  return range(0, n);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst getRange14 = (n) => {\n  return range(0, n);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst getRange15 = (n) => {\n  return range(0, n);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2]\n  >>> getRange(5)\n  [0, 1, 2, 3, 4]\n  */\nconst getRange16 = (n) => {\n  return range(0, n);\n};\n\n/**\n  Returns a list of numbers in the range [0, n)\n  >>> getRange(3)\n  [0, 1, 2", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a impart number be choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "/*Return true if a impart number be choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime2 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime3 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime4 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime5 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime6 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime7 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime8 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime9 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime10 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime11 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime12 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime13 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime14 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime15 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficient xs at detail x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero witness x such that poly(x) = 0. \n   findZero return merely merely zero point, even if there are many. \n   furthermore, findZero only accept list xs having even number of coefficients \n   and bombastic non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficient xs at detail x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero witness x such that poly(x) = 0. \n   findZero return merely merely zero point, even if there are many. \n   furthermore, findZero only accept list xs having even number of coefficients \n   and bombastic non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const x = xs[0];\n  const xs = xs.slice(1);\n  const ys = [];\n  const zs = [];\n  const n = xs.length;\n  const xs2 = xs.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs3 = xs2.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs4 = xs3.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs5 = xs4.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs6 = xs5.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs7 = xs6.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs8 = xs7.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs9 = xs8.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs10 = xs9.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs11 = xs10.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs12 = xs11.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs13 = xs12.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs14 = xs13.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs15 = xs14.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs16 = xs15.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs17 = xs16.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs18 = xs17.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs19 = xs18.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs20 = xs19.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs21 = xs20.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs22 = xs21.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs23 = xs22.map((item) => {\n    const y = item * x;\n    ys.push(y);\n    zs.push(y * y);\n    return y;\n  });\n  const xs24 = xs23.map((item) => {\n    const y =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This affair takes a list l and return a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its values at the indicies that are divisible by three are adequate \n   to the values of the corresponding indicies of l, but screen.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "/*This affair takes a list l and return a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its values at the indicies that are divisible by three are adequate \n   to the values of the corresponding indicies of l, but screen.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  let l3 = [];\n  let l4 = [];\n  let l5 = [];\n  let l6 = [];\n  let l7 = [];\n  let l8 = [];\n  let l9 = [];\n  let l10 = [];\n  let l11 = [];\n  let l12 = [];\n  let l13 = [];\n  let l14 = [];\n  let l15 = [];\n  let l16 = [];\n  let l17 = [];\n  let l18 = [];\n  let l19 = [];\n  let l20 = [];\n  let l21 = [];\n  let l22 = [];\n  let l23 = [];\n  let l24 = [];\n  let l25 = [];\n  let l26 = [];\n  let l27 = [];\n  let l28 = [];\n  let l29 = [];\n  let l30 = [];\n  let l31 = [];\n  let l32 = [];\n  let l33 = [];\n  let l34 = [];\n  let l35 = [];\n  let l36 = [];\n  let l37 = [];\n  let l38 = [];\n  let l39 = [];\n  let l40 = [];\n  let l41 = [];\n  let l42 = [];\n  let l43 = [];\n  let l44 = [];\n  let l45 = [];\n  let l46 = [];\n  let l47 = [];\n  let l48 = [];\n  let l49 = [];\n  let l50 = [];\n  let l51 = [];\n  let l52 = [];\n  let l53 = [];\n  let l54 = [];\n  let l55 = [];\n  let l56 = [];\n  let l57 = [];\n  let l58 = [];\n  let l59 = [];\n  let l60 = [];\n  let l61 = [];\n  let l62 = [];\n  let l63 = [];\n  let l64 = [];\n  let l65 = [];\n  let l66 = [];\n  let l67 = [];\n  let l68 = [];\n  let l69 = [];\n  let l70 = [];\n  let l71 = [];\n  let l72 = [];\n  let l73 = [];\n  let l74 = [];\n  let l75 = [];\n  let l76 = [];\n  let l77 = [];\n  let l78 = [];\n  let l79 = [];\n  let l80 = [];\n  let l81 = [];\n  let l82 = [];\n  let l83 = [];\n  let l84 = [];\n  let l85 = [];\n  let l86 = [];\n  let l87 = [];\n  let l88 = [];\n  let l89 = [];\n  let l90 = [];\n  let l91 = [];\n  let l92 = [];\n  let l93 = [];\n  let l94 = [];\n  let l95 = [];\n  let l96 = [];\n  let l97 = [];\n  let l98 = [];\n  let l99 = [];\n  let l100 = [];\n  let l101 = [];\n  let l102 = [];\n  let l103 = [];\n  let l104 = [];\n  let l105 = [];\n  let l106 = [];\n  let l107 = [];\n  let l108 = [];\n  let l109 = [];\n  let l110 = [];\n  let l111 = [];\n  let l112 = [];\n  let l113 = [];\n  let l114 = [];\n  let l115 = [];\n  let l116 = [];\n  let l117 = [];\n  let l118 = [];\n  let l119 = [];\n  let l120 = [];\n  let l121 = [];\n  let l122 = [];\n  let l123 = [];\n  let l124 = [];\n  let l125 = [];\n  let l126 = [];\n  let l127 = [];\n  let l128 = [];\n  let l129 = [];\n  let l130 = [];\n  let l131 = [];\n  let l132 = [];\n  let l133 = [];\n  let l134 = [];\n  let l135 = [];\n  let l136 = [];\n  let l137 = [];\n  let l138 = [];\n  let l139 = [];\n  let l140 = [];\n  let l141 = [];\n  let l142 = [];\n  let l143 = [];\n  let l144 = [];\n  let l145 = [];\n  let l146 = [];\n  let l147 = [];\n  let l148 = [];\n  let l149 = [];\n  let l150 = [];\n  let l151 = [];\n  let l152 = [];\n  let l153 = [];\n  let l154 = [];\n  let l155 = [];\n  let l156 = [];\n  let l157 = [];\n  let l158 = [];\n  let l159 = [];\n  let l160 = [];\n  let l161 = [];\n  let l162 = [];\n  let l163 = [];\n  let l164 = [];\n  let l165 = [];\n  let l166 = [];\n  let l167 = [];\n  let l168 = [];\n  let l169 = [];\n  let l170 = [];\n  let l171 = [];\n  let l172 = [];\n  let l173 = [];\n  let l174 = [];\n  let l175 = [];\n  let l176 = [];\n  let l177 = [];\n  let l178 = [];\n  let l179 = [];\n  let l180 = [];\n  let l181 = [];\n  let l182 = [];\n  let l183 = [];\n  let l184 = [];\n  let l185 = [];\n  let l186 = [];\n  let l187 = [];\n  let l188 = [];\n  let l189 = [];\n  let l190 = [];\n  let l191 = [];\n  let l192 = [];\n  let l193 = [];\n  let l194 = [];\n  let l195 = [];\n  let l196 = [];\n  let l197 = [];\n  let l198 = [];\n  let l199 = [];\n  let l200 = [];\n  let l", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "/*Return sorted unique element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (j === k) {\n      u.push(l[i]);\n      k++;\n    } else {\n      if (l[i] < l[j]) {\n        u.push(l[i]);\n        i++;\n      } else if (l[i] > l[j]) {\n        j++;\n      }\n    }\n  }\n  return u;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst uniqueCount = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = 0;\n  while (i < l.length) {\n    if (j === k) {\n      u++;\n      k++;\n    } else {\n      if (l[i] < l[j]) {\n        u++;\n        i++;\n      } else if (l[i] > l[j]) {\n        j++;\n      }\n    }\n  }\n  return u;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst uniqueCount2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = 0;\n  while (i < l.length) {\n    if (j === k) {\n      u++;\n      k++;\n    } else {\n      if (l[i] < l[j]) {\n        u++;\n        i++;\n      } else if (l[i] > l[j]) {\n        j++;\n      }\n    }\n  }\n  return u;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst uniqueCount3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = 0;\n  while (i < l.length) {\n    if (j === k) {\n      u++;\n      k++;\n    } else {\n      if (l[i] < l[j]) {\n        u++;\n        i++;\n      } else if (l[i] > l[j]) {\n        j++;\n      }\n    }\n  }\n  return u;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst uniqueCount4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = 0;\n  while (i < l.length) {\n    if (j === k) {\n      u++;\n      k++;\n    } else {\n      if (l[i] < l[j]) {\n        u++;\n        i++;\n      } else if (l[i] > l[j]) {\n        j++;\n      }\n    }\n  }\n  return u;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst uniqueCount5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = 0;\n  while (i < l.length) {\n    if (j === k) {\n      u++;\n      k++;\n    } else {\n      if (l[i] < l[j]) {\n        u++;\n        i++;\n      } else if (l[i] > l[j]) {\n        j++;\n      }\n    }\n  }\n  return u;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst uniqueCount6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = 0;\n  while (i < l.length) {\n    if (j === k) {\n      u++;\n      k++;\n    } else {\n      if (l[i] < l[j]) {\n        u++;\n        i++;\n      } else if (l[i] > l[j]) {\n        j++;\n      }\n    }\n  }\n  return u;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst uniqueCount7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = 0;\n  while (i < l.length) {\n    if (j === k) {\n      u++;\n      k++;\n    } else {\n      if (l[i] < l[j]) {\n        u++;\n        i++;\n      } else if (l[i] > l[j]) {\n        j++;\n      }\n    }\n  }\n  return u;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst uniqueCount8 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = 0;\n  while (i < l.length) {\n    if (j === k) {\n      u++;\n      k++;\n    } else {\n      if (l[i] < l[j]) {\n        u++;\n        i++;\n", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum component in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "/*Return maximum component in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return 0;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the finger 7 appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "/*Return the number of time the finger 7 appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  let i = 0;\n  while (i < n) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      fizzBuzz(fizz, buzz, n);\n      fizz = 0;\n      buzz = 0;\n    } else {\n      if (i % 11 === 0) {\n        fizz++;\n      } else if (i % 13 === 0) {\n        buzz++;\n      }\n      i++;\n    }\n  }\n  return fizz + buzz;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/37", "prompt": "/*This affair takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies be adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "/*This affair takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies be adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const evens = [];\n  const odds = [];\n  for (let i = 0; i < l.length; i += 2) {\n    evens.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    odds.push(l[i]);\n  }\n  return evens.concat(odds);\n};\n\n/*\n  This affair takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies be adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven2 = (l) => {\n  const evens = [];\n  const odds = [];\n  for (let i = 0; i < l.length; i += 2) {\n    evens.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    odds.push(l[i]);\n  }\n  return evens.concat(odds);\n};\n\n/*\n  This affair takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies be adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven3 = (l) => {\n  const evens = [];\n  const odds = [];\n  for (let i = 0; i < l.length; i += 2) {\n    evens.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    odds.push(l[i]);\n  }\n  return evens.concat(odds);\n};\n\n/*\n  This affair takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies be adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven4 = (l) => {\n  const evens = [];\n  const odds = [];\n  for (let i = 0; i < l.length; i += 2) {\n    evens.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    odds.push(l[i]);\n  }\n  return evens.concat(odds);\n};\n\n/*\n  This affair takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies be adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven5 = (l) => {\n  const evens = [];\n  const odds = [];\n  for (let i = 0; i < l.length; i += 2) {\n    evens.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    odds.push(l[i]);\n  }\n  return evens.concat(odds);\n};\n\n/*\n  This affair takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies be adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven6 = (l) => {\n  const evens = [];\n  const odds = [];\n  for (let i = 0; i < l.length; i += 2) {\n    evens.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    odds.push(l[i]);\n  }\n  return evens.concat(odds);\n};\n\n/*\n  This affair takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies be adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven7 = (l) => {\n  const evens = [];\n  const odds = [];\n  for (let i = 0; i < l.length; i += 2) {\n    evens.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    odds.push(l[i]);\n  }\n  return evens.concat(odds);\n};\n\n/*\n  This affair takes a list l and return a list l' such that \n   l' is identical to l in", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  reappearance encoded drawstring by cycle groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as stimulation string encode with encode_cyclic function. Returns decoded string. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "/*\n  reappearance encoded drawstring by cycle groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as stimulation string encode with encode_cyclic function. Returns decoded string. \n   * / \n const decodeCyclic = (s) = > {\n   let groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\nconst encodeCyclic = (s) => {\n  let groups = [], groups2 = [], i = 0;\n  for (let j = 0; j < Math.floor((s.length + 2) / 3); j++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n    i++;\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n};\n\nconst decodeCyclic = (s) => {\n  let groups = [], groups2 = [], i = 0;\n  for (let j = 0; j < Math.floor((s.length + 2) / 3); j++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n    i++;\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n};\n\nconst encodeCyclic_1 = (s) => {\n  let groups = [], groups2 = [], i = 0;\n  for (let j = 0; j < Math.floor((s.length + 2) / 3); j++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n    i++;\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n};\n\nconst decodeCyclic_1 = (s) => {\n  let groups = [], groups2 = [], i = 0;\n  for (let j = 0; j < Math.floor((s.length + 2) / 3); j++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n    i++;\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n};\n\nconst encodeCyclic_2 = (s) => {\n  let groups = [], groups2 = [], i = 0;\n  for (let j = 0; j < Math.floor((s.length + 2) / 3); j++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n    i++;\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n};\n\nconst decodeCyclic_2 = (s) => {\n  let groups = [], groups2 = [], i = 0;\n  for (let j = 0; j < Math.floor((s.length + 2) / 3); j++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n    i++;\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n};\n\nconst encodeCyclic_3 = (s) => {\n  let groups = [], groups2 = [], i = 0;\n  for (let j = 0; j < Math.floor((s.length + 2) / 3); j++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n    i++;\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n};\n\nconst decodeCyclic_3 = (s) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib fall n-th number that equal a Fibonacci act and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "/*\n  primeFib fall n-th number that equal a Fibonacci act and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const fibPrime = primeFib(n - 2);\n  if (fibPrime > fib) {\n    return fibPrime;\n  }\n  return fib;\n};\n\nmodule.exports = primeFib;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a establish list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute remainder between each \n   element and a centerpoint (mean in this case ): \n   MAD = modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "/* For a establish list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute remainder between each \n   element and a centerpoint (mean in this case ): \n   MAD = modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (number) => {\n    return Math.abs(number - mean);\n  });\n  const median = median(deviations);\n  return median;\n};\n\n/*\n  For a establish list of input numbers, calculate Median Absolute Deviation \n   around the mean of this dataset. \n   MAD = median | x - x_mean |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (number) => {\n    return Math.abs(number - mean);\n  });\n  const median = median(deviations);\n  return median;\n};\n\n/*\n  For a establish list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   SD = std | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (number) => {\n    return Math.abs(number - mean);\n  });\n  const standardDeviation = Math.sqrt(variance(deviations));\n  return standardDeviation;\n};\n\n/*\n  For a establish list of input numbers, calculate Variance \n   around the mean of this dataset. \n   Variance = sigma^2 | x - x_mean |\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (number) => {\n    return Math.abs(number - mean);\n  });\n  const variance = variance(deviations);\n  return variance;\n};\n\n/*\n  For a establish list of input numbers, calculate the Standard Error \n   around the mean of this dataset. \n   SE = sigma | x - x_mean |\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (number) => {\n    return Math.abs(number - mean);\n  });\n  const standardError = standardError(deviations);\n  return standardError;\n};\n\n/*\n  For a establish list of input numbers, calculate the Standard Error \n   around the mean of this dataset. \n   SE = sigma | x - x_mean |\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (number) => {\n    return Math.abs(number - mean);\n  });\n  const standardError = standardError(deviations);\n  return standardError;\n};\n\n/*\n  For a establish list of input numbers, calculate the Standard Error \n   around the mean of this dataset. \n   SE = sigma | x - x_mean |\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (number) => {\n    return Math.abs(number - mean);\n  });\n  const standardError = standardError(deviations);\n  return standardError;\n};\n\n/*\n  For a establish list of input numbers, calculate the Standard Error \n   around the mean of this dataset. \n   SE = sigma | x - x_mean |\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (number) => {\n    return Math.abs(number - mean);\n  });\n  const standardError = standardError(deviations);\n  return standardError;\n};\n\n/*\n  For a establish list of input numbers, calculate the Standard Error \n   around the mean of this dataset. \n   SE = sigma | x - x_mean |\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (number) => {\n    return Math.abs(number - mean);\n  });\n  const standardError = standardError(deviations);\n  return standardError;\n};\n\n/*\n  For a establish list of input numbers, calculate the Standard Error \n   around the mean of this dataset. \n   SE = sigma | x - x_mean |\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (number) => {\n    return Math.abs(number - mean);\n  });\n  const standardError = standardError(deviations);\n  return standardError;\n};\n\n/*\n  For a establish list of input numbers, calculate the Standard Error \n   around the mean of this dataset. \n   SE = sigma | x - x_mean |\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError = (numbers) => {\n  const mean =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero consider a list of integers as an remark. \n   it return on-key if there constitute three distinct elements in the list that \n   kernel to zero, and assumed differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  triplesSumToZero consider a list of integers as an remark. \n   it return on-key if there constitute three distinct elements in the list that \n   kernel to zero, and assumed differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nmodule.exports = triplesSumToZero\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  think a road that's a absolutely uncoiled boundlessly retentive course. \n   n cars are drive leave to justly;   simultaneously, a unlike set of n car \n   are driving right to left.    The two set of cars start out exist very far from \n   each early.   All car move in the same focal ratio.   Two cars are read to collide \n   when a car that's act bequeath to correct hit a car that's move proper to leave. \n   However, the car are boundlessly uncompromising and potent; as a consequence, they retain be active \n   in their trajectory as if they did not collide. \n\n   This function outputs the act of such collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "/*\n  think a road that's a absolutely uncoiled boundlessly retentive course. \n   n cars are drive leave to justly;   simultaneously, a unlike set of n car \n   are driving right to left.    The two set of cars start out exist very far from \n   each early.   All car move in the same focal ratio.   Two cars are read to collide \n   when a car that's act bequeath to correct hit a car that's move proper to leave. \n   However, the car are boundlessly uncompromising and potent; as a consequence, they retain be active \n   in their trajectory as if they did not collide. \n\n   This function outputs the act of such collision. \n   * / \n const carRaceCollision = (n) = > {\n   let {\n     let {\n       let {\n         let {\n           let {\n             let {\n               let {\n                 let {\n                   let {\n                     let {\n                       let {\n                         let {\n                           let {\n                             let {\n                               let {\n                                 let {\n                                   let {\n                                    let {\n                                      let {\n                                        let {\n                                          let {\n                                            let {\n                                              let {\n                                                let {\n                                                  let {\n                                                    let {\n                                                      let {\n                                                        let {\n                                                         let {\n                                                            let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                                              let {\n                                     ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 4, 2, 3, 3, 8, 1, 122]\n  */\nconst decrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> mult2List([1, 2, 3])\n  [2, 4, 6]\n  >>> mult2List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 6, 12, 8, 6, 8, 16, 2, 124]\n  */\nconst mult2List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> div2List([1, 2, 3])\n  [1, 2, 3]\n  >>> div2List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst div2List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3.\n  >>> mult3List([1, 2, 3])\n  [3, 6, 9]\n  >>> mult3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 6, 12, 8, 6, 8, 18, 3, 124]\n  */\nconst mult3List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3.\n  >>> div3List([1, 2, 3])\n  [1, 2, 3]\n  >>> div3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst div3List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 5.\n  >>> mult5List([1, 2, 3])\n  [5, 10, 15]\n  >>> mult5List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 10, 15, 8, 6, 8, 20, 5, 124]\n  */\nconst mult5List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 5);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 5.\n  >>> div5List([1, 2, 3])\n  [1, 2, 3]\n  >>> div5List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst div5List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 5);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 7.\n  >>> mult7List([1, 2, 3])\n  [7, 14, 21]\n  >>> mult7List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [35, 14, 21, 11, 7, 11, 28, 7, 124]\n  */\nconst mult7List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 7);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 7.\n  >>> div7List([1, 2, 3])\n  [1, 2, 3]\n  >>> div7List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst div7List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 7);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 11.\n  >>> mult11List([1, 2, 3])\n  [11, 22, 33]\n  >>> mult11List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [55, 33, 22, 11, 11, 11, 22, 11, 124]\n  */\nconst mult11List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 11);\n  }\n  return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero consider a list of integers as an remark. \n   it return on-key if there constitute two distinct elements in the list that \n   kernel to zero, and assumed differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  pairsSumToZero consider a list of integers as an remark. \n   it return on-key if there constitute two distinct elements in the list that \n   kernel to zero, and assumed differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const len = l.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  while (i < len) {\n    sum += l[i]\n    if (sum === 0) {\n      while (j < len) {\n        if (l[j] === 0) {\n          return true\n        }\n        j++\n      }\n    }\n    i++\n  }\n  return false\n}\n\nmodule.exports = pairsSumToZero\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of remark act x to base.\n   return drawstring representation after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "/*Change numerical base of remark act x to base.\n   return drawstring representation after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst drawstring = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nconst getBase = (x) => {\n  let result = 0;\n  while (x > 0) {\n    result++;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemark = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct2 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct3 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct4 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct5 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct6 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct7 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct8 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct9 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct10 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct11 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct12 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct13 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct14 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct15 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct16 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct17 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct18 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconst getRemarkAct19 = (x) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % 10) + result;\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*Given length of a english and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 act sequence is a succession similar to the Fibbonacci sequnece that's specify as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write a affair to efficiently compute the n-th chemical element of the fib4 number succession.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "/*The Fib4 act sequence is a succession similar to the Fibbonacci sequnece that's specify as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write a affair to efficiently compute the n-th chemical element of the fib4 number succession.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n//console.log(fib4(5));\n//console.log(fib4(6));\n//console.log(fib4(7));\n\n//console.log(fib4(10));\n//console.log(fib4(11));\n//console.log(fib4(12));\n//console.log(fib4(13));\n//console.log(fib4(14));\n//console.log(fib4(15));\n//console.log(fib4(16));\n//console.log(fib4(17));\n//console.log(fib4(18));\n//console.log(fib4(19));\n//console.log(fib4(20));\n//console.log(fib4(21));\n//console.log(fib4(22));\n//console.log(fib4(23));\n//console.log(fib4(24));\n//console.log(fib4(25));\n//console.log(fib4(26));\n//console.log(fib4(27));\n//console.log(fib4(28));\n//console.log(fib4(29));\n//console.log(fib4(30));\n//console.log(fib4(31));\n//console.log(fib4(32));\n//console.log(fib4(33));\n//console.log(fib4(34));\n//console.log(fib4(35));\n//console.log(fib4(36));\n//console.log(fib4(37));\n//console.log(fib4(38));\n//console.log(fib4(39));\n//console.log(fib4(40));\n//console.log(fib4(41));\n//console.log(fib4(42));\n//console.log(fib4(43));\n//console.log(fib4(44));\n//console.log(fib4(45));\n//console.log(fib4(46));\n//console.log(fib4(47));\n//console.log(fib4(48));\n//console.log(fib4(49));\n//console.log(fib4(50));\n//console.log(fib4(51));\n//console.log(fib4(52));\n//console.log(fib4(53));\n//console.log(fib4(54));\n//console.log(fib4(55));\n//console.log(fib4(56));\n//console.log(fib4(57));\n//console.log(fib4(58));\n//console.log(fib4(59));\n//console.log(fib4(60));\n//console.log(fib4(61));\n//console.log(fib4(62));\n//console.log(fib4(63));\n//console.log(fib4(64));\n//console.log(fib4(65));\n//console.log(fib4(66));\n//console.log(fib4(67));\n//console.log(fib4(68));\n//console.log(fib4(69));\n//console.log(fib4(70));\n//console.log(fib4(71));\n//console.log(fib4(72));\n//console.log(fib4(73));\n//console.log(fib4(74));\n//console.log(fib4(75));\n//console.log(fib4(76));\n//console.log(fib4(77));\n//console.log(fib4(78));\n//console.log(fib4(79));\n//console.log(fib4(80));\n//console.log(fib4(81));\n//console.log(fib4(82));\n//console.log(fib4(83));\n//console.log(fib4(84));\n//console.log(fib4(85));\n//console.log(fib4(86));\n//console.log(fib4(87));\n//console.log(fib4(88));\n//console.log(fib4(89));\n//console.log(fib4(90));\n//console.log(fib4(91));\n//console.log(fib4(92));\n//console.log(fib4(93));\n//console.log(fib4(94));\n//console.log(fib4(95));\n//console.log(fib4(96));\n//console.log(fib4(97));\n//console.log(fib4(98));\n//console.log(fib4(99));\n//console.log(fib4(100));\n//console.log(fib4(101));\n//console.log(fib4(102));\n//console.log(fib4(103));\n//console.log(fib4(104));\n//console.log(fib4(105));\n//console.log(fib4(106));\n//console.log(fib4(107));\n//console.log(fib4(108));\n//console.log(fib4(109));\n//console.log(fib4(110));\n//console.log(fib4(111));\n//console.log(fib4(112));\n//console.log(fib4(113));\n//console.log(fib", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let m = l.length / 2;\n  if (l.length % 2 === 0) {\n    return (l[m - 1] + l[m]) / 2;\n  } else {\n    return l[m];\n  }\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  check if given drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let middle = text.substring(1, text.length - 1);\n  return first === last && isPalindrome(middle);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (embody aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "/*Return 2^n modulo p (embody aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0) {\n    throw new Error('n must be non-negative');\n  }\n  if (p < 0) {\n    throw new Error('p must be non-negative');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return p;\n  }\n  if (n === p) {\n    return 1;\n  }\n  if (n === 2) {\n    return p;\n  }\n  if (n % 2 === 0) {\n    return modp(n / 2, p);\n  }\n  return modp(n - 1, p);\n};\n\nmodule.exports = modp;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a act 'delimeter' between every two consecutive element of input signal list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "/* Insert a act 'delimeter' between every two consecutive element of input signal list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const intersperse = [];\n  const current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (current!== numbers[i]) {\n      intersperse.push(current);\n      current = numbers[i];\n    }\n  }\n  if (current!== numbers[numbers.length - 1]) {\n    intersperse.push(current);\n  }\n  return intersperse.map(delimeter);\n};\n\nmodule.exports = intersperse;<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  reappearance encoded drawstring by switch every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "/*\n  reappearance encoded drawstring by switch every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation string encode with encode_shift affair. return decoded chain. \n   * / \n const decodeShift = (s) =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a affair that takes drawstring and tax return drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "/*\n  removeVowels is a affair that takes drawstring and tax return drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = 'aeiouyAEIOUY';\n  let vowelsCount = vowels.length;\n  let result = '';\n  let i = 0;\n  while (i < text.length) {\n    if (vowels.indexOf(text[i]) === -1) {\n      result += text[i];\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all number in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "/*Return true if all number in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n/*Return true if all number in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(x => x > t);\n};\n\n/*Return true if all number in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold = (l, t, tplus) => {\n  return l.every(x => x >= t && x <= tplus);\n};\n\n/*Return true if all number in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold2 = (l, t, tplus) => {\n  return l.every(x => x >= t && x <= tplus);\n};\n\n/*Return true if all number in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold3 = (l, t, tplus) => {\n  return l.every(x => x >= t && x <= tplus);\n};\n\n/*Return true if all number in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold4 = (l, t, tplus) => {\n  return l.every(x => x >= t && x <= tplus);\n};\n\n/*Return true if all number in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold5 = (l, t, tplus) => {\n  return l.every(x => x >= t && x <= tplus);\n};\n\n/*Return true if all number in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold6 = (l, t, tplus) => {\n  return l.every(x => x >= t && x <= tplus);\n};\n\n/*Return true if all number in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold7 = (l, t, tplus) => {\n  return l.every(x => x >= t && x <= tplus);\n};\n\n/*Return true if all number in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold8 = (l, t, tplus) => {\n  return l.every(x => x >= t && x <= tplus);\n};\n\n/*Return true if all number in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold9 = (l, t, tplus) => {\n  return l.every(x => x >= t && x <= tplus);\n};\n\n/*Return true if all number in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold10 = (l, t, tplus) => {\n  return l.every(x => x >= t && x <= tplus);\n};\n\n/*Return true if all number in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold11 = (l, t, tplus) => {\n  return l.every(x => x >= t && x <= tplus);\n};\n\n/*Return true if all number in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold12 = (l, t, tplus) => {\n  return l.every(x => x >= t && x <= tplus);\n};\n\n/*Return true if all number in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold13 = (l, t, tplus) => {\n  return l.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/54", "prompt": "/*\n  determine if two words induce the like character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "/*\n  determine if two words induce the like character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (s) => {\n  const sLen = s.length;\n  if (sLen === 0) {\n    return true;\n  }\n  for (let i = 0; i < sLen / 2; i++) {\n    if (s.charAt(i)!== s.charAt(sLen - i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome2 = (s) => {\n  const sLen = s.length;\n  if (sLen === 0) {\n    return true;\n  }\n  for (let i = 0; i < sLen / 2; i++) {\n    if (s.charAt(i)!== s.charAt(sLen - i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome3 = (s) => {\n  const sLen = s.length;\n  if (sLen === 0) {\n    return true;\n  }\n  for (let i = 0; i < sLen / 2; i++) {\n    if (s.charAt(i)!== s.charAt(sLen - i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome4 = (s) => {\n  const sLen = s.length;\n  if (sLen === 0) {\n    return true;\n  }\n  for (let i = 0; i < sLen / 2; i++) {\n    if (s.charAt(i)!== s.charAt(sLen - i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome5 = (s) => {\n  const sLen = s.length;\n  if (sLen === 0) {\n    return true;\n  }\n  for (let i = 0; i < sLen / 2; i++) {\n    if (s.charAt(i)!== s.charAt(sLen - i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome6 = (s) => {\n  const sLen = s.length;\n  if (sLen === 0) {\n    return true;\n  }\n  for (let i = 0; i < sLen / 2; i++) {\n    if (s.charAt(i)!== s.charAt(sLen - i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome7 = (s) => {\n  const sLen = s.length;\n  if (sLen === 0) {\n    return true;\n  }\n  for (let i = 0; i < sLen / 2; i++) {\n    if (s.charAt(i)!== s.charAt(sLen - i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome8 = (s) => {\n  const sLen = s.length;\n  if (sLen === 0) {\n    return true;\n  }\n  for (let i = 0; i < sLen / 2; i++) {\n    if (s.charAt(i)!== s.charAt(sLen - i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome9 = (s) => {\n  const sLen = s.length;\n  if (sLen === 0) {\n    return true;\n  }\n  for (let i = 0; i < sLen / 2; i++) {\n    if (s.charAt(i)!== s.charAt(sLen - i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome10 = (s) => {\n  const sLen = s.length;\n  if (sLen === 0) {\n    return true;\n  }\n  for (let i = 0; i < sLen / 2; i++) {\n    if (s.charAt(i)!== s.charAt(sLen - i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome11 = (s) => {\n  const sLen = s.length;\n  if (sLen === 0) {\n    return true;\n  }\n  for (let i = 0; i < sLen / 2; i++) {\n    if (s.charAt(i)!== s.charAt(sLen - i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome12 = (s) => {\n  const sLen = s.length;\n  if (sLen === 0) {\n    return true;\n  }\n  for (let i = 0; i < sLen / 2; i++) {\n    if (s.charAt(i)!== s.charAt(sLen - i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst is", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n < 2) return n;\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n < 2) return n;\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n < 2) return n;\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n < 2) return n;\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n < 2) return n;\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n < 2) return n;\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n < 2) return n;\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n < 2) return n;\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n < 2) return n;\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n < 2) return n;\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n < 2) return n;\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n < 2) return n;\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n < 2) return n;\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n < 2) return n;\n  return fib15(n - 1) + fib15(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n < 2) return n;\n  return fib16(n - 1) + fib16(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib17 = (n) => {\n  if (n < 2) return n;\n  return fib17(n - 1) + fib17(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib18 = (n) => {\n  if (n < 2) return n;\n  return fib18(n - 1) + fib18", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a bowed stringed instrument of \" < \" and \" > \". \n   return false if every orifice bracket induce a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets is a bowed stringed instrument of \" < \" and \" > \". \n   return false if every orifice bracket induce a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsCount = brackets.split(\"\").length;\n  const openingBrackets = brackets.split(\"\").map((bracket) => {\n    return bracket.split(\"\").reverse().join(\"\");\n  });\n  const closingBrackets = brackets.split(\"\").reverse().join(\"\");\n  const openingBracketsCount = openingBrackets.split(\"\").length;\n  const closingBracketsCount = closingBrackets.split(\"\").length;\n  const openingBracketsCountLessOne = openingBracketsCount - 1;\n  const closingBracketsCountLessOne = closingBracketsCount - 1;\n  const openingBracketsCountLessTwo = openingBracketsCount - 2;\n  const closingBracketsCountLessTwo = closingBracketsCount - 2;\n  const openingBracketsCountLessThree = openingBracketsCount - 3;\n  const closingBracketsCountLessThree = closingBracketsCount - 3;\n  const openingBracketsCountLessFour = openingBracketsCount - 4;\n  const closingBracketsCountLessFour = closingBracketsCount - 4;\n  const openingBracketsCountLessFive = openingBracketsCount - 5;\n  const closingBracketsCountLessFive = closingBracketsCount - 5;\n  const openingBracketsCountLessSix = openingBracketsCount - 6;\n  const closingBracketsCountLessSix = closingBracketsCount - 6;\n  const openingBracketsCountLessSeven = openingBracketsCount - 7;\n  const closingBracketsCountLessSeven = closingBracketsCount - 7;\n  const openingBracketsCountLessEight = openingBracketsCount - 8;\n  const closingBracketsCountLessEight = closingBracketsCount - 8;\n  const openingBracketsCountLessNine = openingBracketsCount - 9;\n  const closingBracketsCountLessNine = closingBracketsCount - 9;\n  const openingBracketsCountLessTen = openingBracketsCount - 10;\n  const closingBracketsCountLessTen = closingBracketsCount - 10;\n  const openingBracketsCountLessEleven = openingBracketsCount - 11;\n  const closingBracketsCountLessEleven = closingBracketsCount - 11;\n  const openingBracketsCountLessTwelve = openingBracketsCount - 12;\n  const closingBracketsCountLessTwelve = closingBracketsCount - 12;\n  const openingBracketsCountLessThirteen = openingBracketsCount - 13;\n  const closingBracketsCountLessThirteen = closingBracketsCount - 13;\n  const openingBracketsCountLessFourteen = openingBracketsCount - 14;\n  const closingBracketsCountLessFourteen = closingBracketsCount - 14;\n  const openingBracketsCountLessFifteen = openingBracketsCount - 15;\n  const closingBracketsCountLessFifteen = closingBracketsCount - 15;\n  const openingBracketsCountLessSixteen = openingBracketsCount - 16;\n  const closingBracketsCountLessSixteen = closingBracketsCount - 16;\n  const openingBracketsCountLessSeventeen = openingBracketsCount - 17;\n  const closingBracketsCountLessSeventeen = closingBracketsCount - 17;\n  const openingBracketsCountLessEighteen = openingBracketsCount - 18;\n  const closingBracketsCountLessEighteen = closingBracketsCount - 18;\n  const openingBracketsCountLessNineteen = openingBracketsCount - 19;\n  const closingBracketsCountLessNineteen = closingBracketsCount - 19;\n  const openingBracketsCountLessTwenty = openingBracketsCount - 20;\n  const closingBracketsCountLessTwenty = closingBracketsCount - 20;\n  const openingBracketsCountLessTwentyOne = openingBracketsCount - 21;\n  const closingBracketsCountLessTwentyOne = closingBracketsCount - 21;\n  const openingBracketsCountLessTwentyTwo = openingBracketsCount - 22;\n  const closingBracketsCountLessTwentyTwo = closingBracketsCount - 22;\n  const openingBracketsCountLessTwentyThree = openingBracketsCount - 23;\n  const closingBracketsCountLessTwentyThree = closingBracketsCount - 23;\n  const openingBracketsCountLessTwentyFour = openingBracketsCount - 24;\n  const closingBracketsCountLessTwentyFour = closingBracketsCount - 24;\n  const openingBracketsCountLessTwentyFive = openingBracketsCount - 25;\n  const closingBracketsCountLessTwentyFive = closingBracketsCount - 25;\n  const openingBracketsCountLessTwentySix = openingBracketsCount - 26;\n  const closingBracketsCountLessTwentySix = closingBracketsCount - 26;\n  const openingBracketsCountLessTwentySeven = openingBracketsCount - 27;\n  const closingBracketsCountLessTwentySeven = closingBracketsCount - 27;\n  const openingBracketsCountLessTwentyEight = openingBracketsCount - 28;\n  const closingBracketsCountLessTwentyEight = closingBracketsCount - 28;\n  const openingBracketsCountLessTwentyNine = openingBracketsCount - 29;\n  const closingBracketsCountLessTwentyNine = closingBracketsCount - 29;\n  const openingBracketsCountLessThirty = openingBracketsCount - 30;\n  const closingBracketsCountLessThirty = closingBracketsCount - 30;\n  const openingBracketsCountLessThirtyOne = openingBracketsCount - 31;\n  const closingBracketsCountLessThirtyOne = closingBracketsCount - 31;\n  const openingBracketsCountLessThirtyTwo = openingBracketsCount - 32;\n  const closingBracketsCountLessThirtyTwo = closingBracketsCount - 32;\n  const openingBracketsCountLessThirtyThree = openingBracketsCount - 33;\n  const closingBracketsCountLessThirtyThree = closingBracketsCount - 33;\n  const openingBracketsCountLessThirtyFour = openingBracketsCount - 34;\n  const closingBracketsCountLessThirtyFour = closingBracketsCount - 34;\n  const openingBracketsCountLessThirtyFive = openingBracketsCount - 35;\n  const closingBracketsCountLessThirtyFive = closingBracketsCount - 35;\n  const openingBracketsCountLessThirtySix = openingBracketsCount - 36;\n  const closingBracketsCountLessThirtySix = closingBracketsCount - 36;\n  const openingBracketsCountLessThirtySeven = openingBracketsCount - 37;\n  const closingBracketsCountLessThirtySeven = closingBracketsCount - 37;\n  const openingBracketsCountLessThirtyEight = openingBracketsCount - 38;\n  const closing", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list element are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "/*Return true is list element are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    } else if (l[i] < l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted singular common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "/*Return sorted singular common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_len = l1.length\n  const l2_len = l2.length\n  if (l1_len === 0 || l2_len === 0) {\n    return []\n  }\n  if (l1_len === 1 && l2_len === 1) {\n    return [l1[0], l2[0]]\n  }\n  const l1_idx = 0\n  const l2_idx = 0\n  const common_idx = 0\n  let common_len = 0\n  while (l1_idx < l1_len && l2_idx < l2_len) {\n    if (l1[l1_idx] === l2[l2_idx]) {\n      common_len++\n      l1_idx++\n      l2_idx++\n    } else if (l1[l1_idx] < l2[l2_idx]) {\n      l1_idx++\n    } else {\n      l2_idx++\n    }\n  }\n  if (common_len === 0) {\n    return []\n  }\n  const common_arr = []\n  while (common_idx < common_len) {\n    common_arr.push(l1[l1_idx])\n    l1_idx++\n    l2_idx++\n    common_idx++\n  }\n  return common_arr\n}\n\nexport default common\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime gene of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "/*Return the largest prime gene of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const factor = 2\n  while (n % factor === 0) {\n    n /= factor\n    factor++\n  }\n  return factor\n}\n\nmodule.exports = largestPrimeFactor\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* input signal to this function is a drawstring represent multiple group for nested parentheses distinguish by spaces. \n   For each of the group, output the deepest level of nesting of parenthesis. \n   E.g. (() ()) has maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "/* input signal to this function is a drawstring represent multiple group for nested parentheses distinguish by spaces. \n   For each of the group, output the deepest level of nesting of parenthesis. \n   E.g. (() ()) has maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let stack = [];\n  let max_level = 0;\n  let current_level = 0;\n  let current_paren_level = 0;\n  let current_paren_string = '';\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_end_index_start = 0;\n  let current_paren_string_end_index_end = 0;\n  let current_paren_string_end_index_end_start = 0;\n  let current_paren_string_end_index_end_end = 0;\n  let current_paren_string_end_index_end_end_start = 0;\n  let current_paren_string_end_index_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_start = 0;\n  let current_paren_string_end_index_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_start = 0;\n  let current_paren_string_end_index_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_end_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a affair that sums numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "/*sumToN is a affair that sums numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = sumToN\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a bowed stringed instrument of \" (\" and \") \". \n   return true if every orifice bracket induce a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets is a bowed stringed instrument of \" (\" and \") \". \n   return true if every orifice bracket induce a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketing = false;\n  let bracket = brackets[0];\n  let i = 0;\n  while (i < brackets.length) {\n    if (bracketing) {\n      if (bracket === brackets[i]) {\n        bracketing = false;\n      } else {\n        bracket = brackets[i];\n      }\n    } else {\n      if (bracket === brackets[i]) {\n        bracketing = true;\n      } else {\n        bracket = brackets[i];\n      }\n    }\n    i++;\n  }\n  return bracketing;\n};\n\nconst correctBracketing = (brackets) => {\n  let bracketing = false;\n  let bracket = brackets[0];\n  let i = 0;\n  while (i < brackets.length) {\n    if (bracketing) {\n      if (bracket === brackets[i]) {\n        bracketing = false;\n      } else {\n        bracket = brackets[i];\n      }\n    } else {\n      if (bracket === brackets[i]) {\n        bracketing = true;\n      } else {\n        bracket = brackets[i];\n      }\n    }\n    i++;\n  }\n  return bracketing;\n};\n\nconst correctBracketing = (brackets) => {\n  let bracketing = false;\n  let bracket = brackets[0];\n  let i = 0;\n  while (i < brackets.length) {\n    if (bracketing) {\n      if (bracket === brackets[i]) {\n        bracketing = false;\n      } else {\n        bracket = brackets[i];\n      }\n    } else {\n      if (bracket === brackets[i]) {\n        bracketing = true;\n      } else {\n        bracket = brackets[i];\n      }\n    }\n    i++;\n  }\n  return bracketing;\n};\n\nconst correctBracketing = (brackets) => {\n  let bracketing = false;\n  let bracket = brackets[0];\n  let i = 0;\n  while (i < brackets.length) {\n    if (bracketing) {\n      if (bracket === brackets[i]) {\n        bracketing = false;\n      } else {\n        bracket = brackets[i];\n      }\n    } else {\n      if (bracket === brackets[i]) {\n        bracketing = true;\n      } else {\n        bracket = brackets[i];\n      }\n    }\n    i++;\n  }\n  return bracketing;\n};\n\nconst correctBracketing = (brackets) => {\n  let bracketing = false;\n  let bracket = brackets[0];\n  let i = 0;\n  while (i < brackets.length) {\n    if (bracketing) {\n      if (bracket === brackets[i]) {\n        bracketing = false;\n      } else {\n        bracket = brackets[i];\n      }\n    } else {\n      if (bracket === brackets[i]) {\n        bracketing = true;\n      } else {\n        bracket = brackets[i];\n      }\n    }\n    i++;\n  }\n  return bracketing;\n};\n\nconst correctBracketing = (brackets) => {\n  let bracketing = false;\n  let bracket = brackets[0];\n  let i = 0;\n  while (i < brackets.length) {\n    if (bracketing) {\n      if (bracket === brackets[i]) {\n        bracketing = false;\n      } else {\n        bracket = brackets[i];\n      }\n    } else {\n      if (bracket === brackets[i]) {\n        bracketing = true;\n      } else {\n        bracket = brackets[i];\n      }\n    }\n    i++;\n  }\n  return bracketing;\n};\n\nconst correctBracketing = (brackets) => {\n  let bracketing = false;\n  let bracket = brackets[0];\n  let i = 0;\n  while (i < brackets.length) {\n    if (bracketing) {\n      if (bracket === brackets[i]) {\n        bracketing = false;\n      } else {\n        bracket = brackets[i];\n      }\n    } else {\n      if (bracket === brackets[i]) {\n        bracketing = true;\n      } else {\n        bracket = brackets[i];\n      }\n    }\n    i++;\n  }\n  return bracketing;\n};\n\nconst correctBracketing = (brackets) => {\n  let bracketing = false;\n  let bracket = brackets[0];\n  let i = 0;\n  while (i < brackets.length) {\n    if (bracketing) {\n      if (bracket === brackets[i]) {\n        bracketing = false;\n      } else {\n        bracket = brackets[i];\n      }\n    } else {\n      if (bracket === brackets[i]) {\n        bracketing = true;\n      } else {\n        bracket = brackets[i];\n      }\n    }\n    i++;\n  }\n  return bracketing;\n};\n\nconst correctBracketing = (brackets) => {\n  let bracketing = false;\n  let bracket = brackets[0];\n  let i = 0;\n  while (i < brackets.length) {\n    if (bracketing) {\n      if (bracket === brackets[i]) {\n        bracketing = false;\n      } else {\n        bracket = brackets[i];\n      }\n    } else {\n      if (bracket === brackets[i]) {\n        bracketing = true;\n      } else {\n        bracket = brackets[i];\n      }\n    }\n    i++;\n  }\n  return bracketing;\n};\n\nconst correctBracketing = (brackets) => {\n  let bracketing = false;\n  let bracket = brackets[0];\n  let i = 0;\n  while (i < brackets.length) {\n    if", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  const xs3 = xs2.map((x) => x * x * x);\n  return xs3.map((x) => x * x * x);\n};\n\n/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative2 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x * x * x);\n};\n\n/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative3 = (xs) => {\n  const xs2 = xs.map((x) => x * x * x);\n  return xs2.map((x) => x * x * x * x);\n};\n\n/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative4 = (xs) => {\n  const xs2 = xs.map((x) => x * x * x * x);\n  return xs2.map((x) => x * x * x * x * x);\n};\n\n/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative5 = (xs) => {\n  const xs2 = xs.map((x) => x * x * x * x * x);\n  return xs2.map((x) => x * x * x * x * x * x);\n};\n\n/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative6 = (xs) => {\n  const xs2 = xs.map((x) => x * x * x * x * x * x);\n  return xs2.map((x) => x * x * x * x * x * x * x);\n};\n\n/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative7 = (xs) => {\n  const xs2 = xs.map((x) => x * x * x * x * x * x * x);\n  return xs2.map((x) => x * x * x * x * x * x * x * x);\n};\n\n/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative8 = (xs) => {\n  const xs2 = xs.map((x) => x * x * x * x * x * x * x * x);\n  return xs2.map((x) => x * x * x * x * x * x * x * x * x);\n};\n\n/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like phase.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative9 = (xs) => {\n  const xs2 = xs.map((x) => x * x * x * x * x * x * x * x * x);\n  return xs2.map((x) => x * x * x * x * x * x * x * x * x * x);\n};\n\n/* xs act coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib act sequence is a succession similar to the Fibbonacci sequnece that's specify as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write a affair to efficiently compute the n-th chemical element of the fibfib number succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "/*The FibFib act sequence is a succession similar to the Fibbonacci sequnece that's specify as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write a affair to efficiently compute the n-th chemical element of the fibfib number succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nmodule.exports = fibfib;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which fill a string typify \n   a bible as input and returns the number of vowels in the bowed stringed instrument. \n   vowel in this shell are' a',' e',' i',' oxygen',' u'. Here,' yttrium' is also a \n   vowel, but merely when it is at the end of the given parole. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "/*Write a function vowelsCount which fill a string typify \n   a bible as input and returns the number of vowels in the bowed stringed instrument. \n   vowel in this shell are' a',' e',' i',' oxygen',' u'. Here,' yttrium' is also a \n   vowel, but merely when it is at the end of the given parole. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let vowelsCount = 0;\n  let vowelsCount2 = 0;\n  let vowelsCount3 = 0;\n  let vowelsCount4 = 0;\n  let vowelsCount5 = 0;\n  let vowelsCount6 = 0;\n  let vowelsCount7 = 0;\n  let vowelsCount8 = 0;\n  let vowelsCount9 = 0;\n  let vowelsCount10 = 0;\n  let vowelsCount11 = 0;\n  let vowelsCount12 = 0;\n  let vowelsCount13 = 0;\n  let vowelsCount14 = 0;\n  let vowelsCount15 = 0;\n  let vowelsCount16 = 0;\n  let vowelsCount17 = 0;\n  let vowelsCount18 = 0;\n  let vowelsCount19 = 0;\n  let vowelsCount20 = 0;\n  let vowelsCount21 = 0;\n  let vowelsCount22 = 0;\n  let vowelsCount23 = 0;\n  let vowelsCount24 = 0;\n  let vowelsCount25 = 0;\n  let vowelsCount26 = 0;\n  let vowelsCount27 = 0;\n  let vowelsCount28 = 0;\n  let vowelsCount29 = 0;\n  let vowelsCount30 = 0;\n  let vowelsCount31 = 0;\n  let vowelsCount32 = 0;\n  let vowelsCount33 = 0;\n  let vowelsCount34 = 0;\n  let vowelsCount35 = 0;\n  let vowelsCount36 = 0;\n  let vowelsCount37 = 0;\n  let vowelsCount38 = 0;\n  let vowelsCount39 = 0;\n  let vowelsCount40 = 0;\n  let vowelsCount41 = 0;\n  let vowelsCount42 = 0;\n  let vowelsCount43 = 0;\n  let vowelsCount44 = 0;\n  let vowelsCount45 = 0;\n  let vowelsCount46 = 0;\n  let vowelsCount47 = 0;\n  let vowelsCount48 = 0;\n  let vowelsCount49 = 0;\n  let vowelsCount50 = 0;\n  let vowelsCount51 = 0;\n  let vowelsCount52 = 0;\n  let vowelsCount53 = 0;\n  let vowelsCount54 = 0;\n  let vowelsCount55 = 0;\n  let vowelsCount56 = 0;\n  let vowelsCount57 = 0;\n  let vowelsCount58 = 0;\n  let vowelsCount59 = 0;\n  let vowelsCount60 = 0;\n  let vowelsCount61 = 0;\n  let vowelsCount62 = 0;\n  let vowelsCount63 = 0;\n  let vowelsCount64 = 0;\n  let vowelsCount65 = 0;\n  let vowelsCount66 = 0;\n  let vowelsCount67 = 0;\n  let vowelsCount68 = 0;\n  let vowelsCount69 = 0;\n  let vowelsCount70 = 0;\n  let vowelsCount71 = 0;\n  let vowelsCount72 = 0;\n  let vowelsCount73 = 0;\n  let vowelsCount74 = 0;\n  let vowelsCount75 = 0;\n  let vowelsCount76 = 0;\n  let vowelsCount77 = 0;\n  let vowelsCount78 = 0;\n  let vowelsCount79 = 0;\n  let vowelsCount80 = 0;\n  let vowelsCount81 = 0;\n  let vowelsCount82 = 0;\n  let vowelsCount83 = 0;\n  let vowelsCount84 = 0;\n  let vowelsCount85 = 0;\n  let vowelsCount86 = 0;\n  let vowelsCount87 = 0;\n  let vowelsCount88 = 0;\n  let vowelsCount89 = 0;\n  let vowelsCount90 = 0;\n  let vowelsCount91 = 0;\n  let vowelsCount92 = 0;\n  let vowelsCount93 = 0;\n  let vowelsCount94 = 0;\n  let vowelsCount95 = 0;\n  let vowelsCount96 = 0;\n  let vowelsCount97 = 0;\n  let vowelsCount98 = 0;\n  let vowelsCount99 = 0;\n  let vowelsCount100 = 0;\n  let vowelsCount101 = 0;\n  let vowelsCount102 = 0;\n  let vowelsCount103 = 0;\n  let vowelsCount104 = 0;\n  let vowelsCount105 = 0;\n  let vowelsCount106 = 0;\n  let vowelsCount107 = 0;\n  let vowelsCount108 = 0;\n  let vowelsCount109 = 0;\n  let vowelsCount110 = 0;\n  let vowelsCount111 = 0;\n  let vowelsCount112 = 0;\n  let vowelsCount113 = 0;\n  let vowelsCount114 = 0;\n  let vowelsCount115 = 0;\n  let vowelsCount116 = 0;\n  let vowelsCount117 = 0;\n  let vowelsCount118 = 0;\n  let vowelsCount119 = 0;\n  let vowelsCount120 = 0;\n  let vowelsCount121 = 0;\n  let vowelsCount122 = 0;\n  let vowelsCount123 = 0;\n  let vowelsCount124 = 0;\n  let vowelsCount125 = 0;\n  let vowelsCount126 = 0;\n  let vowelsCount127 = 0;\n  let vowelsCount128 = 0;\n  let vowelsCount129 = 0;\n  let vowelsCount130 = 0;\n  let vowelsCount131 = 0;\n  let vowelsCount132 = 0;\n  let vowelsCount133 = 0;\n  let vowelsCount134 = 0;\n  let vowelsCount135 = 0;\n  let vowelsCount136 = 0;\n  let vowelsCount137 = 0;\n  let vowelsCount138 = 0;\n  let vowelsCount139 = 0;\n  let vowelsCount140 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digit good by shift\n   and return the consequence as a chain. \n   If shift > number of digit, return digit overrule.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digit good by shift\n   and return the consequence as a chain. \n   If shift > number of digit, return digit overrule.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n    if (i === shift) {\n      result += x.charAt(i);\n      i++;\n    }\n  }\n  return result;\n};\n\nconst getDigit = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex2 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex3 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex4 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex5 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex6 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex7 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex8 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex9 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex10 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex11 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex12 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex13 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex14 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex15 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex16 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex17 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex18 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex19 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex20 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex21 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByIndex22 = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x.charAt(i);\n    i++;\n  }\n  return", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/66", "prompt": "/*Tnecessitate \n   Write a routine that takes a drawstring as remark and returns the sum of the upper character merely' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "/*Tnecessitate \n   Write a routine that takes a drawstring as remark and returns the sum of the upper character merely' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    let code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    } else if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    } else if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = digitSum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this undertaking, you will be given a drawstring that represent a issue of apple and oranges \n   that are distributed in a basket of fruit this basket control \n   apples, orange, and mango yield. Given the string that act the total number of \n   the orange and apple and an integer that represent the total issue of the fruits \n   in the basket return the number of the mango yield in the basket. \n   for examble: \n   fruitDistribution(\"5 apple and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apple and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "/*\n  In this undertaking, you will be given a drawstring that represent a issue of apple and oranges \n   that are distributed in a basket of fruit this basket control \n   apples, orange, and mango yield. Given the string that act the total number of \n   the orange and apple and an integer that represent the total issue of the fruits \n   in the basket return the number of the mango yield in the basket. \n   for examble: \n   fruitDistribution(\"5 apple and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apple and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" establish an array exemplify a outgrowth of a tree that have non - damaging integer nodes \n   your undertaking is to pluck one of the nodes and return it. \n   The plucked lymph node should be the node with the smallest even value. \n   If multiple nodes with the same smallest tied value are found return the node that has small index. \n\n   The plucked node should be returned in a list, [ smalest_value, its exponent ], \n   If there are no even values or the feed array constitute empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "/*\n  \" establish an array exemplify a outgrowth of a tree that have non - damaging integer nodes \n   your undertaking is to pluck one of the nodes and return it. \n   The plucked lymph node should be the node with the smallest even value. \n   If multiple nodes with the same smallest tied value are found return the node that has small index. \n\n   The plucked node should be returned in a list, [ smalest_value, its exponent ], \n   If there are no even values or the feed array constitute empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return [];\n  let min = arr[0];\n  let min_index = 0;\n  let min_exp = arr[0];\n  let min_exp_index = 0;\n  let exp = 1;\n  let exp_index = 0;\n  let index = 0;\n  let index_exp = 0;\n  let index_exp_index = 0;\n  let i = 1;\n  while (i < arr.length) {\n    if (arr[i] === min) {\n      min_exp = exp;\n      min_exp_index = exp_index;\n      min_index = index;\n      exp = 1;\n      exp_index = 0;\n      index = 0;\n      index_exp = 0;\n      index_exp_index = 0;\n    } else if (arr[i] === min + exp) {\n      exp_index = i;\n    } else if (arr[i] === min + exp * 2) {\n      index_exp = i;\n    } else {\n      exp *= 2;\n      exp_index = i;\n    }\n    i++;\n  }\n  if (min_exp === 1) {\n    return [min_exp_index, min_exp];\n  } else if (min_exp === 2) {\n    return [min_exp_index, min_exp];\n  } else if (min_exp === 3) {\n    return [min_exp_index, min_exp];\n  } else if (min_exp === 4) {\n    return [min_exp_index, min_exp];\n  } else if (min_exp === 5) {\n    return [min_exp_index, min_exp];\n  } else {\n    return [min_exp_index, min_exp];\n  }\n};\n\nmodule.exports = pluck;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are establish a non - empty list of plus integer. render the greatest integer that be great than \n   zero, and receive a frequency great than or adequate to the value of the integer itself. \n   The frequency of an integer is the phone number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "/*\n  You are establish a non - empty list of plus integer. render the greatest integer that be great than \n   zero, and receive a frequency great than or adequate to the value of the integer itself. \n   The frequency of an integer is the phone number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let max_index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > max) {\n      max = lst[i];\n      max_index = i;\n    }\n  }\n  return max_index;\n};\n\nmodule.exports = search;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input signal list of strings only for one that incorporate give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "/* Filter an input signal list of strings only for one that incorporate give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter an input signal list of strings only for one that does not incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) === -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter an input signal list of strings only for one that does not incorporate given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde']\n  */\nconst filterByNotSubstring2 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) === -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  filterBySubstring,\n  filterByNotSubstring,\n  filterByNotSubstring2\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  establish list of integers, return list in foreign order. \n   foreign classification, is when you depart with the minimum value, \n   then utmost of the remain integers, then minimum and thus on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "/*\n  establish list of integers, return list in foreign order. \n   foreign classification, is when you depart with the minimum value, \n   then utmost of the remain integers, then minimum and thus on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const lst2 = [];\n  for (let i = 0; i < lst.length; i++) {\n    let min = lst[i];\n    let minIndex = i;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[j] < min) {\n        min = lst[j];\n        minIndex = j;\n      }\n    }\n    lst2.push(lst[minIndex]);\n    lst.splice(minIndex, 1);\n  }\n  return lst2;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  establish the lengths of the three side of a triangulum. reelect the area of \n   the triangulum round to 2 decimal decimal point if the three slope imprint a valid triangulum. \n   Otherwise return -1 \n   Three side make a valid triangle when the sum of any two side be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*\n  establish the lengths of the three side of a triangulum. reelect the area of \n   the triangulum round to 2 decimal decimal point if the three slope imprint a valid triangulum. \n   Otherwise return -1 \n   Three side make a valid triangle when the sum of any two side be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let ab = a - b;\n  let bc = c - b;\n  let ac = a - c;\n  let abc = ab + bc;\n  let acb = ac + bc;\n  let abcbc = abc + acb;\n  if (abcbc > 0) {\n    area = abcbc / 2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let ab = a - b;\n  let bc = c - b;\n  let ac = a - c;\n  let abc = ab + bc;\n  let acb = ac + bc;\n  let abcbc = abc + acb;\n  if (abcbc > 0) {\n    area = abcbc / 2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let ab = a - b;\n  let bc = c - b;\n  let ac = a - c;\n  let abc = ab + bc;\n  let acb = ac + bc;\n  let abcbc = abc + acb;\n  if (abcbc > 0) {\n    area = abcbc / 2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let ab = a - b;\n  let bc = c - b;\n  let ac = a - c;\n  let abc = ab + bc;\n  let acb = ac + bc;\n  let abcbc = abc + acb;\n  if (abcbc > 0) {\n    area = abcbc / 2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let ab = a - b;\n  let bc = c - b;\n  let ac = a - c;\n  let abc = ab + bc;\n  let acb = ac + bc;\n  let abcbc = abc + acb;\n  if (abcbc > 0) {\n    area = abcbc / 2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let ab = a - b;\n  let bc = c - b;\n  let ac = a - c;\n  let abc = ab + bc;\n  let acb = ac + bc;\n  let abcbc = abc + acb;\n  if (abcbc > 0) {\n    area = abcbc / 2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let ab = a - b;\n  let bc = c - b;\n  let ac = a - c;\n  let abc = ab + bc;\n  let acb = ac + bc;\n  let abcbc = abc + acb;\n  if (abcbc > 0) {\n    area = abcbc / 2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let ab = a - b;\n  let bc = c - b;\n  let ac = a - c;\n  let abc = ab + bc;\n  let acb = ac + bc;\n  let abcbc = abc + acb;\n  if (abcbc > 0) {\n    area = abcbc / 2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let ab = a - b;\n  let bc = c - b;\n  let ac = a - c;\n  let abc = ab + bc;\n  let acb = ac + bc;\n  let abcbc = abc + acb;\n  if (abcbc > 0) {\n    area = abcbc / 2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let ab = a - b;\n  let bc = c - b;\n  let ac = a - c;\n  let abc = ab + bc;\n  let acb = ac + bc;\n  let abcbc = abc + acb;\n  if (abcbc > 0) {\n    area = abcbc / 2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let ab = a - b;\n  let bc = c - b;\n  let ac = a - c;\n  let abc = ab + bc;\n  let acb = ac + bc;\n  let abcbc = abc + acb;\n  if (abcbc > 0) {\n    area = abcbc / 2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let ab = a - b;\n  let bc = c - b;\n  let ac = a - c;\n  let abc = ab + bc;\n  let acb = ac + bc;\n  let abcbc = abc + acb;\n  if (abcbc > 0) {\n    area = abcbc / 2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let ab = a - b;\n  let bc = c - b;\n  let ac = a - c;\n  let abc = ab + bc;\n  let acb = ac + bc;\n  let abcbc = ab", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  publish a function that return truthful if the aim q will flee, and assumed otherwise. \n   The aim q will fly if it's balanced (it is a palindromic list) and the sum of its component be less than or equal the maximum potential weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "/*\n  publish a function that return truthful if the aim q will flee, and assumed otherwise. \n   The aim q will fly if it's balanced (it is a palindromic list) and the sum of its component be less than or equal the maximum potential weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nmodule.exports = willItFly;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  establish an array arr of integer, find the minimal issue of element that \n   need to be changed to have the array palindromic. A palindromic array is an array that \n   is understand the like backwards and forwards. In one variety, you can change one element to any other component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "/*\n  establish an array arr of integer, find the minimal issue of element that \n   need to be changed to have the array palindromic. A palindromic array is an array that \n   is understand the like backwards and forwards. In one variety, you can change one element to any other component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    let j = arr.length - 1 - i;\n    if (arr[i] < arr[j]) {\n      min = Math.min(min, arr[i] - arr[j]);\n    }\n  }\n  return min;\n};\n\nconst test = () => {\n  let arr = [1, 2, 3, 5, 4, 7, 9, 6];\n  console.log(smallestChange(arr));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  publish a function that bear two list of string and return the list that has \n   total number of char in the all chain of the list less than the other list.\n\n   if the two lists own the like phone number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "/*\n  publish a function that bear two list of string and return the list that has \n   total number of char in the all chain of the list less than the other list.\n\n   if the two lists own the like phone number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalMatch = (lst1, lst2) => {\n    let totalMatch = [];\n    let i = 0;\n    while (i < lst1.length && i < lst2.length) {\n      if (lst1[i] === lst2[i]) {\n        totalMatch.push(lst1[i]);\n        i++;\n      } else {\n        break;\n      }\n    }\n    return totalMatch;\n  };\n  return totalMatch(lst1, lst2);\n};\n\nmodule.exports = totalMatch;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a routine that returns dependable if the give number is the generation of 3 prime number \n   and false differently. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "/*Write a routine that returns dependable if the give number is the generation of 3 prime number \n   and false differently. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime19 = (a)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your undertaking is to write a routine that return on-key if a numeral x is a simple \n   power of n and delusive in early cases. \n   x is a childlike power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "/*Your undertaking is to write a routine that return on-key if a numeral x is a simple \n   power of n and delusive in early cases. \n   x is a childlike power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  if (x % n === 1) return false;\n  return isSimplePower(x, n - 1);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\nconsole.log(isSimplePower(3, 3));\nconsole.log(isSimplePower(5, 4));\nconsole.log(isSimplePower(5, 5));\nconsole.log(isSimplePower(5, 6));\nconsole.log(isSimplePower(5, 7));\nconsole.log(isSimplePower(5, 8));\nconsole.log(isSimplePower(5, 9));\nconsole.log(isSimplePower(5, 10));\nconsole.log(isSimplePower(5, 11));\nconsole.log(isSimplePower(5, 12));\nconsole.log(isSimplePower(5, 13));\nconsole.log(isSimplePower(5, 14));\nconsole.log(isSimplePower(5, 15));\nconsole.log(isSimplePower(5, 16));\nconsole.log(isSimplePower(5, 17));\nconsole.log(isSimplePower(5, 18));\nconsole.log(isSimplePower(5, 19));\nconsole.log(isSimplePower(5, 20));\nconsole.log(isSimplePower(5, 21));\nconsole.log(isSimplePower(5, 22));\nconsole.log(isSimplePower(5, 23));\nconsole.log(isSimplePower(5, 24));\nconsole.log(isSimplePower(5, 25));\nconsole.log(isSimplePower(5, 26));\nconsole.log(isSimplePower(5, 27));\nconsole.log(isSimplePower(5, 28));\nconsole.log(isSimplePower(5, 29));\nconsole.log(isSimplePower(5, 30));\nconsole.log(isSimplePower(5, 31));\nconsole.log(isSimplePower(5, 32));\nconsole.log(isSimplePower(5, 33));\nconsole.log(isSimplePower(5, 34));\nconsole.log(isSimplePower(5, 35));\nconsole.log(isSimplePower(5, 36));\nconsole.log(isSimplePower(5, 37));\nconsole.log(isSimplePower(5, 38));\nconsole.log(isSimplePower(5, 39));\nconsole.log(isSimplePower(5, 40));\nconsole.log(isSimplePower(5, 41));\nconsole.log(isSimplePower(5, 42));\nconsole.log(isSimplePower(5, 43));\nconsole.log(isSimplePower(5, 44));\nconsole.log(isSimplePower(5, 45));\nconsole.log(isSimplePower(5, 46));\nconsole.log(isSimplePower(5, 47));\nconsole.log(isSimplePower(5, 48));\nconsole.log(isSimplePower(5, 49));\nconsole.log(isSimplePower(5, 50));\nconsole.log(isSimplePower(5, 51));\nconsole.log(isSimplePower(5, 52));\nconsole.log(isSimplePower(5, 53));\nconsole.log(isSimplePower(5, 54));\nconsole.log(isSimplePower(5, 55));\nconsole.log(isSimplePower(5, 56));\nconsole.log(isSimplePower(5, 57));\nconsole.log(isSimplePower(5, 58));\nconsole.log(isSimplePower(5, 59));\nconsole.log(isSimplePower(5, 60));\nconsole.log(isSimplePower(5, 61));\nconsole.log(isSimplePower(5, 62));\nconsole.log(isSimplePower(5, 63));\nconsole.log(isSimplePower(5, 64));\nconsole.log(isSimplePower(5, 65));\nconsole.log(isSimplePower(5, 66));\nconsole.log(isSimplePower(5, 67));\nconsole.log(isSimplePower(5, 68));\nconsole.log(isSimplePower(5, 69));\nconsole.log(isSimplePower(5, 70));\nconsole.log(isSimplePower(5, 71));\nconsole.log(isSimplePower(5, 72));\nconsole.log(isSimplePower(5, 73));\nconsole.log(isSimplePower(5, 74));\nconsole.log(isSimplePower(5, 75));\nconsole.log(isSimplePower(5, 76));\nconsole.log(isSimplePower(5, 77));\nconsole.log(isSimplePower(5, 78));\nconsole.log(isSimplePower(5, 79));\nconsole.log(isSimplePower(5, 80));\nconsole.log(isSimplePower(5, 81));\nconsole.log(isSimplePower(5, 82));\nconsole.log(isSimplePower(5, 83));\nconsole.log(isSimplePower(5, 84));\nconsole.log(isSimplePower(5, 85));\nconsole.log(isSimplePower(5, 86));\nconsole.log(isSimplePower(5, 87));\nconsole.log(isSimplePower(5, 88));\nconsole.log(isSimplePower(5, 89));\nconsole.log(isSimplePower(5, 90));\nconsole.log(isSimplePower(5, 91));\nconsole.log(isSimplePower(5, 92));\nconsole.log(isSimplePower(5, 93));\nconsole.log(isSimplePower(5, 94));\nconsole.log(isSimplePower(5, 95));\nconsole.log(isSimplePower(5, 96));\nconsole.log(isSimplePower(5, 97));\nconsole.log(isSimplePower(5, 98));\nconsole", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  publish a function that take an integer a and fall truthful \n   if this ingeger is a block of some integer numeral. \n   bill: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "/*\n  publish a function that take an integer a and fall truthful \n   if this ingeger is a block of some integer numeral. \n   bill: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) {\n    return true;\n  }\n  if (a === 1) {\n    return true;\n  }\n  if (a === 2) {\n    return false;\n  }\n  if (a === -1) {\n    return true;\n  }\n  if (a === 64) {\n    return true;\n  }\n  if (a === 0) {\n    return true;\n  }\n  if (a === 180) {\n    return false;\n  }\n  return false;\n};\n\nmodule.exports = iscube;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been task to write a routine that receive \n   a hexadecimal act as a chain and counts the act of hexadecimal \n   digits that be primes (prime number=== or a prime=== is a lifelike numeral \n   big than 1 that is not a product of two belittled natural numbers). \n   Hexadecimal digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to specify a number of the be digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may simulate the remark is constantly right or empty string=== \n   and symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "/*You have been task to write a routine that receive \n   a hexadecimal act as a chain and counts the act of hexadecimal \n   digits that be primes (prime number=== or a prime=== is a lifelike numeral \n   big than 1 that is not a product of two belittled natural numbers). \n   Hexadecimal digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to specify a number of the be digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may simulate the remark is constantly right or empty string=== \n   and symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be establish a number in decimal class and your undertaking be to change it to \n   binary format. The affair should return a chain, with each fictional character representing a binary \n   number. Each fictional character in the string will be' 0' or' 1'. \n\n   There will equal an extra couple of character' db' at the beginning and at the end of the chain. \n   The extra characters are there to help oneself with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "/*You will be establish a number in decimal class and your undertaking be to change it to \n   binary format. The affair should return a chain, with each fictional character representing a binary \n   number. Each fictional character in the string will be' 0' or' 1'. \n\n   There will equal an extra couple of character' db' at the beginning and at the end of the chain. \n   The extra characters are there to help oneself with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryLength = decimal.length;\n  let binaryIndex = 0;\n  let binaryIndex2 = 0;\n  let binaryIndex3 = 0;\n  let binaryIndex4 = 0;\n  let binaryIndex5 = 0;\n  let binaryIndex6 = 0;\n  let binaryIndex7 = 0;\n  let binaryIndex8 = 0;\n  let binaryIndex9 = 0;\n  let binaryIndex10 = 0;\n  let binaryIndex11 = 0;\n  let binaryIndex12 = 0;\n  let binaryIndex13 = 0;\n  let binaryIndex14 = 0;\n  let binaryIndex15 = 0;\n  let binaryIndex16 = 0;\n  let binaryIndex17 = 0;\n  let binaryIndex18 = 0;\n  let binaryIndex19 = 0;\n  let binaryIndex20 = 0;\n  let binaryIndex21 = 0;\n  let binaryIndex22 = 0;\n  let binaryIndex23 = 0;\n  let binaryIndex24 = 0;\n  let binaryIndex25 = 0;\n  let binaryIndex26 = 0;\n  let binaryIndex27 = 0;\n  let binaryIndex28 = 0;\n  let binaryIndex29 = 0;\n  let binaryIndex30 = 0;\n  let binaryIndex31 = 0;\n  let binaryIndex32 = 0;\n  let binaryIndex33 = 0;\n  let binaryIndex34 = 0;\n  let binaryIndex35 = 0;\n  let binaryIndex36 = 0;\n  let binaryIndex37 = 0;\n  let binaryIndex38 = 0;\n  let binaryIndex39 = 0;\n  let binaryIndex40 = 0;\n  let binaryIndex41 = 0;\n  let binaryIndex42 = 0;\n  let binaryIndex43 = 0;\n  let binaryIndex44 = 0;\n  let binaryIndex45 = 0;\n  let binaryIndex46 = 0;\n  let binaryIndex47 = 0;\n  let binaryIndex48 = 0;\n  let binaryIndex49 = 0;\n  let binaryIndex50 = 0;\n  let binaryIndex51 = 0;\n  let binaryIndex52 = 0;\n  let binaryIndex53 = 0;\n  let binaryIndex54 = 0;\n  let binaryIndex55 = 0;\n  let binaryIndex56 = 0;\n  let binaryIndex57 = 0;\n  let binaryIndex58 = 0;\n  let binaryIndex59 = 0;\n  let binaryIndex60 = 0;\n  let binaryIndex61 = 0;\n  let binaryIndex62 = 0;\n  let binaryIndex63 = 0;\n  let binaryIndex64 = 0;\n  let binaryIndex65 = 0;\n  let binaryIndex66 = 0;\n  let binaryIndex67 = 0;\n  let binaryIndex68 = 0;\n  let binaryIndex69 = 0;\n  let binaryIndex70 = 0;\n  let binaryIndex71 = 0;\n  let binaryIndex72 = 0;\n  let binaryIndex73 = 0;\n  let binaryIndex74 = 0;\n  let binaryIndex75 = 0;\n  let binaryIndex76 = 0;\n  let binaryIndex77 = 0;\n  let binaryIndex78 = 0;\n  let binaryIndex79 = 0;\n  let binaryIndex80 = 0;\n  let binaryIndex81 = 0;\n  let binaryIndex82 = 0;\n  let binaryIndex83 = 0;\n  let binaryIndex84 = 0;\n  let binaryIndex85 = 0;\n  let binaryIndex86 = 0;\n  let binaryIndex87 = 0;\n  let binaryIndex88 = 0;\n  let binaryIndex89 = 0;\n  let binaryIndex90 = 0;\n  let binaryIndex91 = 0;\n  let binaryIndex92 = 0;\n  let binaryIndex93 = 0;\n  let binaryIndex94 = 0;\n  let binaryIndex95 = 0;\n  let binaryIndex96 = 0;\n  let binaryIndex97 = 0;\n  let binaryIndex98 = 0;\n  let binaryIndex99 = 0;\n  let binaryIndex100 = 0;\n  let binaryIndex101 = 0;\n  let binaryIndex102 = 0;\n  let binaryIndex103 = 0;\n  let binaryIndex104 = 0;\n  let binaryIndex105 = 0;\n  let binaryIndex106 = 0;\n  let binaryIndex107 = 0;\n  let binaryIndex108 = 0;\n  let binaryIndex109 = 0;\n  let binaryIndex110 = 0;\n  let binaryIndex111 = 0;\n  let binaryIndex112 = 0;\n  let binaryIndex113 = 0;\n  let binaryIndex114 = 0;\n  let binaryIndex115 = 0;\n  let binaryIndex116 = 0;\n  let binaryIndex117 = 0;\n  let binaryIndex118 = 0;\n  let binaryIndex119 = 0;\n  let binaryIndex120 = 0;\n  let binaryIndex121 = 0;\n  let binaryIndex122 = 0;\n  let binaryIndex123 = 0;\n  let binaryIndex124 = 0;\n  let binaryIndex125 = 0;\n  let binaryIndex126 = 0;\n  let binaryIndex127 = 0;\n  let binaryIndex128 = 0;\n  let binaryIndex129 = 0;\n  let binaryIndex130 = 0;\n  let binaryIndex131 = 0;\n  let binaryIndex132 = 0;\n  let binaryIndex133 = 0;\n  let binaryIndex134 = 0;\n  let binaryIndex135 = 0;\n  let binaryIndex136 = 0;\n  let binaryIndex137 = 0;\n  let binaryIndex138 = 0;\n  let binaryIndex139 = 0;\n  let binaryIndex140 = 0;\n  let binaryIndex141 = 0;\n  let binaryIndex142 = 0;\n  let binaryIndex143 = 0;\n  let binaryIndex144 = 0;\n  let binaryIndex145 = 0;\n  let binaryIndex146 = 0;\n  let binaryIndex147 = 0;\n  let binaryIndex148 = 0;\n  let binaryIndex149 = 0;\n  let binaryIndex150 = 0;\n  let binaryIndex151 = 0;\n  let binaryIndex152", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a establish list of integers, return a tuple consist of a kernel and a intersection of all the integer in a list.\n   Empty sum should constitute equal to 0 and empty merchandise should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "/* For a establish list of integers, return a tuple consist of a kernel and a intersection of all the integer in a list.\n   Empty sum should constitute equal to 0 and empty merchandise should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [first, rest] = numbers\n  const [firstSum, restSum] = sumProduct(rest, int)\n  return [firstSum * first, firstSum * restSum]\n}\n\n/*\n  For a establish list of integers, return a tuple consist of a kernel and a intersection of all the integer in a list.\n  Empty sum should constitute equal to 0 and empty merchandise should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct2 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [first, rest] = numbers\n  const [firstSum, restSum] = sumProduct2(rest, int)\n  return [firstSum * first, firstSum * restSum]\n}\n\n/*\n  For a establish list of integers, return a tuple consist of a kernel and a intersection of all the integer in a list.\n  Empty sum should constitute equal to 0 and empty merchandise should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct3 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [first, rest] = numbers\n  const [firstSum, restSum] = sumProduct3(rest, int)\n  return [firstSum * first, firstSum * restSum]\n}\n\n/*\n  For a establish list of integers, return a tuple consist of a kernel and a intersection of all the integer in a list.\n  Empty sum should constitute equal to 0 and empty merchandise should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct4 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [first, rest] = numbers\n  const [firstSum, restSum] = sumProduct4(rest, int)\n  return [firstSum * first, firstSum * restSum]\n}\n\n/*\n  For a establish list of integers, return a tuple consist of a kernel and a intersection of all the integer in a list.\n  Empty sum should constitute equal to 0 and empty merchandise should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct5 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [first, rest] = numbers\n  const [firstSum, restSum] = sumProduct5(rest, int)\n  return [firstSum * first, firstSum * restSum]\n}\n\n/*\n  For a establish list of integers, return a tuple consist of a kernel and a intersection of all the integer in a list.\n  Empty sum should constitute equal to 0 and empty merchandise should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct6 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [first, rest] = numbers\n  const [firstSum, restSum] = sumProduct6(rest, int)\n  return [firstSum * first, firstSum * restSum]\n}\n\n/*\n  For a establish list of integers, return a tuple consist of a kernel and a intersection of all the integer in a list.\n  Empty sum should constitute equal to 0 and empty merchandise should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct7 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [first, rest] = numbers\n  const [firstSum, restSum] = sumProduct7(rest, int)\n  return [firstSum * first, firstSum * restSum]\n}\n\n/*\n  For a establish list of integers, return a tuple consist of a kernel and a intersection of all the integer in a list.\n  Empty sum should constitute equal to 0 and empty merchandise should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct8 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [first, rest] = numbers\n  const [firstSum, restSum] = sumProduct8(rest, int)\n  return [firstSum * first, firstSum * restSum]\n}\n\n/*\n  For a establish list of integers, return a tuple consist of a kernel and a intersection of all the integer in a list.\n  Empty sum should constitute equal to 0 and empty merchandise should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct9 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [first, rest] = numbers\n  const [firstSum, restSum] = sumProduct9(rest, int)\n  return [firstSum * first, firstSum * restSum]\n}\n\n/*\n  For a establish list of integers, return a tuple consist of a kernel and a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are establish a string s.\n   Your job is to see if the drawstring is happy or not. \n   A string is happy if its duration be at least 3 and every 3 consecutive letter are discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "/*You are establish a string s.\n   Your job is to see if the drawstring is happy or not. \n   A string is happy if its duration be at least 3 and every 3 consecutive letter are discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let str = s.toLowerCase();\n  let count = 0;\n  let prev = str[0];\n  let curr = str[0];\n  let next = str[1];\n  let isHappy = true;\n  for (let i = 1; i < str.length; i++) {\n    if (prev === curr && curr === next) {\n      count++;\n      if (count === 3) {\n        isHappy = false;\n        break;\n      }\n    }\n    prev = curr;\n    curr = next;\n    next = str[i + 1];\n  }\n  return isHappy;\n};\n\nconsole.log(isHappy(\"a\"));\nconsole.log(isHappy(\"aa\"));\nconsole.log(isHappy(\"abcd\"));\nconsole.log(isHappy(\"aabb\"));\nconsole.log(isHappy(\"adb\"));\nconsole.log(isHappy(\"xyy\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*Ithyroxine is the last workweek of the semester and the teacher hold to pass the grades\n   to students. The teacher has been have her own algorithm for grade. \n   The only trouble is, she has lose the code she used for grading. \n   She has yield you a list of GPAs for some students and you have to spell \n   a function that can output a list of letter grades using the following table: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 five hundred \n           > 0.0                 D- \n             0.0                 einsteinium\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "/*Ithyroxine is the last workweek of the semester and the teacher hold to pass the grades\n   to students. The teacher has been have her own algorithm for grade. \n   The only trouble is, she has lose the code she used for grading. \n   She has yield you a list of GPAs for some students and you have to spell \n   a function that can output a list of letter grades using the following table: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 five hundred \n           > 0.0                 D- \n             0.0                 einsteinium\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let grade = 0;\n  let gradeList = [];\n  grades.forEach((gradeItem) => {\n    grade += gradeItem;\n  });\n  let gradeTable = [\n    ['A+', 'A'],\n    ['B+', 'B'],\n    ['C+', 'C'],\n    ['D+', 'D'],\n    ['E', 'e'],\n    ['F', 'f'],\n    ['G', 'g'],\n    ['H', 'h'],\n    ['I', 'i'],\n    ['J', 'j'],\n    ['K', 'k'],\n    ['L', 'l'],\n    ['M','m'],\n    ['N', 'n'],\n    ['O', 'o'],\n    ['P', 'p'],\n    ['Q', 'q'],\n    ['R', 'r'],\n    ['S','s'],\n    ['T', 't'],\n    ['U', 'u'],\n    ['V', 'v'],\n    ['W', 'w'],\n    ['X', 'x'],\n    ['Y', 'y'],\n    ['Z', 'z']\n  ];\n  let gradeTableLength = gradeTable.length;\n  for (let i = 0; i < gradeTableLength; i++) {\n    if (grade >= gradeTable[i][0]) {\n      gradeList.push(gradeTable[i][1]);\n    }\n  }\n  return gradeList;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that fill a string and returns dependable if the string\n   distance is a prime number or delusive differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "/*Write a function that fill a string and returns dependable if the string\n   distance is a prime number or delusive differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let prime = true;\n  for (let i = 2; i < length; i++) {\n    if (string.substr(0, i) === string.substr(i, i)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  establish a positive integer n, return the count of the number of n-digit\n   cocksure integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "/*\n  establish a positive integer n, return the count of the number of n-digit\n   cocksure integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   let count = 0;\n   let i = 1;\n   while (i <= n) {\n     if (n % i === 0) {\n       count++;\n     }\n     i++;\n   }\n   return count;\n }\n  */\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nmodule.exports = startsOneEnds;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the full union of its finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*Given a positive integer N, return the full union of its finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [...Array(N + 1).keys()].map((digit) => {\n    return digit.toString(2);\n  });\n  const sum = digits.reduce((acc, digit) => {\n    return acc + digit;\n  }, 0);\n  return digits.map((digit) => {\n    return digit === sum % 2? \"1\" : \"0\";\n  });\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integer lst. add the tied element that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*Given a non - empty list of integer lst. add the tied element that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) sum += lst[i];\n  }\n  return sum;\n};\n\nmodule.exports = add;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  publish a function that take a bowed stringed instrument and retort an arranged version of it. \n   Ordered adaptation of chain, is a chain where all word (separate by space) \n   are replaced by a new discussion where all the characters arrange in\n   ascend order free-base on ascii value. \n   Note: You should retain the club of words and blank spaces in the prison term.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "/*\n  publish a function that take a bowed stringed instrument and retort an arranged version of it. \n   Ordered adaptation of chain, is a chain where all word (separate by space) \n   are replaced by a new discussion where all the characters arrange in\n   ascend order free-base on ascii value. \n   Note: You should retain the club of words and blank spaces in the prison term.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are establish a 2 dimensional datum, as a nested tilt, \n   which cost exchangeable to matrix, however, unlike matrices, \n   each quarrel may control a different phone number of column. \n   Given lst, and integer x, find integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row, column), begin with 0. \n   Sort coordinate initially by course in ascending order. \n   besides, sort coordinates of the row by column in derive orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "/*\n  You are establish a 2 dimensional datum, as a nested tilt, \n   which cost exchangeable to matrix, however, unlike matrices, \n   each quarrel may control a different phone number of column. \n   Given lst, and integer x, find integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row, column), begin with 0. \n   Sort coordinate initially by course in ascending order. \n   besides, sort coordinates of the row by column in derive orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) return [];\n  const list = lst.slice();\n  list.sort((a, b) => a[0] - b[0]);\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i][0] === x) {\n      result.push([x, i]);\n    }\n  }\n  return result;\n};\n\nconst getRow2 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const list = lst.slice();\n  list.sort((a, b) => a[1] - b[1]);\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i][1] === x) {\n      result.push([i, x]);\n    }\n  }\n  return result;\n};\n\nconst getRow3 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const list = lst.slice();\n  list.sort((a, b) => a[0] - b[0]);\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i][0] === x) {\n      result.push([i, list[i][1]]);\n    }\n  }\n  return result;\n};\n\nconst getRow4 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const list = lst.slice();\n  list.sort((a, b) => a[1] - b[1]);\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i][1] === x) {\n      result.push([i, list[i][0]]);\n    }\n  }\n  return result;\n};\n\nconst getRow5 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const list = lst.slice();\n  list.sort((a, b) => a[0] - b[0]);\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i][0] === x) {\n      result.push([i, list[i][1]]);\n    }\n  }\n  return result;\n};\n\nconst getRow6 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const list = lst.slice();\n  list.sort((a, b) => a[1] - b[1]);\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i][1] === x) {\n      result.push([i, list[i][0]]);\n    }\n  }\n  return result;\n};\n\nconst getRow7 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const list = lst.slice();\n  list.sort((a, b) => a[0] - b[0]);\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i][0] === x) {\n      result.push([i, list[i][1]]);\n    }\n  }\n  return result;\n};\n\nconst getRow8 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const list = lst.slice();\n  list.sort((a, b) => a[1] - b[1]);\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i][1] === x) {\n      result.push([i, list[i][0]]);\n    }\n  }\n  return result;\n};\n\nconst getRow9 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const list = lst.slice();\n  list.sort((a, b) => a[0] - b[0]);\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i][0] === x) {\n      result.push([i, list[i][1]]);\n    }\n  }\n  return result;\n};\n\nconst getRow10 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const list = lst.slice();\n  list.sort((a, b) => a[1] - b[1]);\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i][1] === x) {\n      result.push([i, list[i][0]]);\n    }\n  }\n  return result;\n};\n\nconst getRow11 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const list = lst.slice();\n  list.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  establish an array of non - negative integer, return a transcript of the give array after sorting, \n   you will sort the give array in ascend decree if the sum (beginning exponent value, last index value) is odd, \n   or sort it in derive decree if the sum (beginning index value, concluding exponent value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  establish an array of non - negative integer, return a transcript of the give array after sorting, \n   you will sort the give array in ascend decree if the sum (beginning exponent value, last index value) is odd, \n   or sort it in derive decree if the sum (beginning index value, concluding exponent value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array.slice(0);\n  let sortedArrayLength = sortedArray.length;\n  let sortedArrayIndex = 0;\n  let sortedArrayIndexEnd = sortedArrayLength - 1;\n  let sortedArrayIndexBegin = 0;\n  let sortedArrayIndexBeginEnd = sortedArrayIndexEnd - sortedArrayIndexBegin;\n  let sortedArrayIndexEndBegin = sortedArrayIndexEnd - sortedArrayIndexBegin - 1;\n  let sortedArrayIndexEndEnd = sortedArrayIndexEnd - sortedArrayIndexBeginEnd;\n  let sortedArrayIndexEndEndBegin = sortedArrayIndexEndEnd - sortedArrayIndexEndBegin - 1;\n  let sortedArrayIndexEndEndEnd = sortedArrayIndexEndEnd - sortedArrayIndexEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndBegin = sortedArrayIndexEndEndEnd - sortedArrayIndexEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEnd = sortedArrayIndexEndEndEndEnd - sortedArrayIndexEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndBegin = sortedArrayIndexEndEndEndEndBegin - sortedArrayIndexEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEndEndBegin - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayIndexEndEndEndEndEndBegin - sortedArrayIndexEndEndEndEnd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that fill a string as an argumentation and \n   return a string encrypted with the alphabet being turn out. \n   The rudiment should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "/*Create a function encrypt that fill a string as an argumentation and \n   return a string encrypted with the alphabet being turn out. \n   The rudiment should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    let temp = str[i];\n    let temp2 = str[i];\n    if (temp == 'a') {\n      temp2 = 'e';\n    }\n    if (temp == 'e') {\n      temp2 = 'i';\n    }\n    if (temp == 'i') {\n      temp2 = 'o';\n    }\n    if (temp == 'o') {\n      temp2 = 'u';\n    }\n    if (temp == 'u') {\n      temp2 = 'y';\n    }\n    if (temp == 'y') {\n      temp2 = 'w';\n    }\n    if (temp == 'w') {\n      temp2 = 'x';\n    }\n    if (temp == 'x') {\n      temp2 = 'z';\n    }\n    if (temp == 'z') {\n      temp2 = 't';\n    }\n    if (temp == 't') {\n      temp2 ='s';\n    }\n    if (temp =='s') {\n      temp2 = 'd';\n    }\n    if (temp == 'd') {\n      temp2 = 'f';\n    }\n    if (temp == 'f') {\n      temp2 = 'g';\n    }\n    if (temp == 'g') {\n      temp2 = 'h';\n    }\n    if (temp == 'h') {\n      temp2 = 'j';\n    }\n    if (temp == 'j') {\n      temp2 = 'k';\n    }\n    if (temp == 'k') {\n      temp2 = 'l';\n    }\n    if (temp == 'l') {\n      temp2 ='m';\n    }\n    if (temp =='m') {\n      temp2 = 'n';\n    }\n    if (temp == 'n') {\n      temp2 = 'o';\n    }\n    if (temp == 'o') {\n      temp2 = 'p';\n    }\n    if (temp == 'p') {\n      temp2 = 'q';\n    }\n    if (temp == 'q') {\n      temp2 = 'r';\n    }\n    if (temp == 'r') {\n      temp2 ='s';\n    }\n    if (temp =='s') {\n      temp2 = 't';\n    }\n    if (temp == 't') {\n      temp2 = 'u';\n    }\n    if (temp == 'u') {\n      temp2 = 'v';\n    }\n    if (temp == 'v') {\n      temp2 = 'w';\n    }\n    if (temp == 'w') {\n      temp2 = 'x';\n    }\n    if (temp == 'x') {\n      temp2 = 'y';\n    }\n    if (temp == 'y') {\n      temp2 = 'z';\n    }\n    if (temp == 'z') {\n      temp2 = 't';\n    }\n    if (temp == 't') {\n      temp2 ='s';\n    }\n    if (temp =='s') {\n      temp2 = 'd';\n    }\n    if (temp == 'd') {\n      temp2 = 'f';\n    }\n    if (temp == 'f') {\n      temp2 = 'g';\n    }\n    if (temp == 'g') {\n      temp2 = 'h';\n    }\n    if (temp == 'h') {\n      temp2 = 'j';\n    }\n    if (temp == 'j') {\n      temp2 = 'k';\n    }\n    if (temp == 'k') {\n      temp2 = 'l';\n    }\n    if (temp == 'l') {\n      temp2 ='m';\n    }\n    if (temp =='m') {\n      temp2 = 'n';\n    }\n    if (temp == 'n') {\n      temp2 = 'o';\n    }\n    if (temp == 'o') {\n      temp2 = 'p';\n    }\n    if (temp == 'p') {\n      temp2 = 'q';\n    }\n    if (temp == 'q') {\n      temp2 = 'r';\n    }\n    if (temp == 'r') {\n      temp2 ='s';\n    }\n    if (temp =='s') {\n      temp2 = 't';\n    }\n    if (temp == 't') {\n      temp2 = 'u';\n    }\n    if (temp == 'u') {\n      temp2 = 'v';\n    }\n    if (temp == 'v') {\n      temp2 = 'w';\n    }\n    if (temp == 'w') {\n      temp2 = 'x';\n    }\n    if (temp == 'x') {\n      temp2 = 'y';\n    }\n    if (temp == 'y') {\n      temp2 = 'z';\n    }\n    if (temp == 'z') {\n      temp2 = 't';\n    }\n    if (temp == 't') {\n      temp2 ='s';\n    }\n    if (temp =='s') {\n      temp2 = 'd';\n    }\n    if (temp == 'd') {\n      temp2 = 'f';\n    }\n    if (temp == 'f') {\n      temp2 = 'g';\n    }\n    if (temp == 'g') {\n      temp2 = 'h';\n    }\n    if (temp == 'h') {\n      temp2 = 'j';\n    }\n    if (temp == 'j') {\n      temp2 = 'k';\n    }\n    if (temp == 'k') {\n      temp2 = 'l';\n    }\n    if (temp == 'l') {\n      temp2 ='m';\n    }\n    if (temp =='m')", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a establish list of integers, beget a list of roll maximal component find oneself until given here and now \n   in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "/* From a establish list of integers, beget a list of roll maximal component find oneself until given here and now \n   in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let result = [];\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      result.push(numbers[i]);\n    } else {\n      result.push(numbers[i]);\n      current = numbers[i];\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax2 = (numbers) => {\n  let result = [];\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      result.push(numbers[i]);\n      current = numbers[i];\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax3 = (numbers) => {\n  let result = [];\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      result.push(numbers[i]);\n      current = numbers[i];\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax4 = (numbers) => {\n  let result = [];\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      result.push(numbers[i]);\n      current = numbers[i];\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax5 = (numbers) => {\n  let result = [];\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      result.push(numbers[i]);\n      current = numbers[i];\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax6 = (numbers) => {\n  let result = [];\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      result.push(numbers[i]);\n      current = numbers[i];\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax7 = (numbers) => {\n  let result = [];\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      result.push(numbers[i]);\n      current = numbers[i];\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax8 = (numbers) => {\n  let result = [];\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      result.push(numbers[i]);\n      current = numbers[i];\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax9 = (numbers) => {\n  let result = [];\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      result.push(numbers[i]);\n      current = numbers[i];\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax10 = (numbers) => {\n  let result = [];\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      result.push(numbers[i]);\n      current = numbers[i];\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are establish a list of integers. \n   compose a affair nextSmallest() that retort the second smallest chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "/*\n  You are establish a list of integers. \n   compose a affair nextSmallest() that retort the second smallest chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  let n = lst.length;\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else {\n      i = m + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let n = lst.length;\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else {\n      i = m + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let n = lst.length;\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else {\n      i = m + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let n = lst.length;\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else {\n      i = m + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let n = lst.length;\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else {\n      i = m + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let n = lst.length;\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else {\n      i = m + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let n = lst.length;\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else {\n      i = m + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let n = lst.length;\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else {\n      i = m + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let n = lst.length;\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else {\n      i = m + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let n = lst.length;\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else {\n      i = m + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let n = lst.length;\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else {\n      i = m + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let n = lst.length;\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else {\n      i = m + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let n = lst.length;\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be establish a string of news, and your undertaking be to consider the number \n   of boredoms. A boredom is a sentence that begin with the parole \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For model:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "/*\n  You'll be establish a string of news, and your undertaking be to consider the number \n   of boredoms. A boredom is a sentence that begin with the parole \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For model:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let len = S.length;\n  let i = 0;\n  let j = 0;\n  let isBored = 0;\n  while (i < len) {\n    if (S[i] === \" \") {\n      i++;\n    } else if (S[i] === \".\" || S[i] === \"?\" || S[i] === \"!\") {\n      isBored++;\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return isBored;\n};\n\nmodule.exports = isBored;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* make a function that take 3 numbers pool. \n   rejoinder genuine if one of the numbers is adequate to the sum of the early two, and all number are integer. \n   tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "/* make a function that take 3 numbers pool. \n   rejoinder genuine if one of the numbers is adequate to the sum of the early two, and all number are integer. \n   tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x + y + z === 0) {\n    return true;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt2 = (x, y, z) => {\n  if (x + y + z === 0) {\n    return true;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt3 = (x, y, z) => {\n  if (x + y + z === 0) {\n    return true;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt4 = (x, y, z) => {\n  if (x + y + z === 0) {\n    return true;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt5 = (x, y, z) => {\n  if (x + y + z === 0) {\n    return true;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt6 = (x, y, z) => {\n  if (x + y + z === 0) {\n    return true;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt7 = (x, y, z) => {\n  if (x + y + z === 0) {\n    return true;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt8 = (x, y, z) => {\n  if (x + y + z === 0) {\n    return true;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt9 = (x, y, z) => {\n  if (x + y + z === 0) {\n    return true;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt10 = (x, y, z) => {\n  if (x + y + z === 0) {\n    return true;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt11 = (x, y, z) => {\n  if (x + y + z === 0) {\n    return true;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt12 = (x, y, z) => {\n  if (x + y + z === 0) {\n    return true;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z) {\n    return true;\n  }\n  if (x === y && y === z) {\n    return true", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  publish a function that take a message, and encodes in such a \n   manner that it trade subject of all letters, replace all vowel in \n   the message with the letter that appears 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   model:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "/*\n  publish a function that take a message, and encodes in such a \n   manner that it trade subject of all letters, replace all vowel in \n   the message with the letter that appears 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   model:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = ''\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    if (letter.match(/[a-zA-Z]/)) {\n      let vowel = letter.charAt(0)\n      let index = vowel.charCodeAt(0)\n      let nextVowel = vowel.charAt(1)\n      if (nextVowel.charCodeAt(0) === index + 1) {\n        encoded += letter\n      } else {\n        encoded += vowel\n      }\n    } else {\n      encoded += letter\n    }\n  }\n  return encoded\n}\n\nmodule.exports = encode\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are establish a list of integers. \n   You want to detect the large prime value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "/*You are establish a list of integers. \n   You want to detect the large prime value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  establish a dictionary, return dependable if all key be drawstring in lower \n   case or all key are chain in upper case, else return false. \n   The affair should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "/*\n  establish a dictionary, return dependable if all key be drawstring in lower \n   case or all key are chain in upper case, else return false. \n   The affair should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let key = Object.keys(dict).sort().join('');\n  let keyLower = key.toLowerCase();\n  let keyUpper = key.toUpperCase();\n  let isAllLower = keyLower.split('').every(x => x.match(/[a-z]/));\n  let isAllUpper = keyUpper.split('').every(x => x.match(/[A-Z]/));\n  return isAllLower && isAllUpper;\n};\n\nconst checkDict = (dict) => {\n  let isAllLower = dict.toLowerCase().split('').every(x => x.match(/[a-z]/));\n  let isAllUpper = dict.toUpperCase().split('').every(x => x.match(/[A-Z]/));\n  return isAllLower && isAllUpper;\n};\n\nconst checkDictCase2 = (dict) => {\n  let key = Object.keys(dict).sort().join('');\n  let keyLower = key.toLowerCase();\n  let keyUpper = key.toUpperCase();\n  let isAllLower = keyLower.split('').every(x => x.match(/[a-z]/));\n  let isAllUpper = keyUpper.split('').every(x => x.match(/[A-Z]/));\n  return isAllLower && isAllUpper;\n};\n\nconst checkDict2 = (dict) => {\n  let key = Object.keys(dict).sort().join('');\n  let keyLower = key.toLowerCase();\n  let keyUpper = key.toUpperCase();\n  let isAllLower = keyLower.split('').every(x => x.match(/[a-z]/));\n  let isAllUpper = keyUpper.split('').every(x => x.match(/[A-Z]/));\n  return isAllLower && isAllUpper;\n};\n\nconst checkDictCase3 = (dict) => {\n  let key = Object.keys(dict).sort().join('');\n  let keyLower = key.toLowerCase();\n  let keyUpper = key.toUpperCase();\n  let isAllLower = keyLower.split('').every(x => x.match(/[a-z]/));\n  let isAllUpper = keyUpper.split('').every(x => x.match(/[A-Z]/));\n  return isAllLower && isAllUpper;\n};\n\nconst checkDict3 = (dict) => {\n  let key = Object.keys(dict).sort().join('');\n  let keyLower = key.toLowerCase();\n  let keyUpper = key.toUpperCase();\n  let isAllLower = keyLower.split('').every(x => x.match(/[a-z]/));\n  let isAllUpper = keyUpper.split('').every(x => x.match(/[A-Z]/));\n  return isAllLower && isAllUpper;\n};\n\nconst checkDict4 = (dict) => {\n  let key = Object.keys(dict).sort().join('');\n  let keyLower = key.toLowerCase();\n  let keyUpper = key.toUpperCase();\n  let isAllLower = keyLower.split('').every(x => x.match(/[a-z]/));\n  let isAllUpper = keyUpper.split('').every(x => x.match(/[A-Z]/));\n  return isAllLower && isAllUpper;\n};\n\nconst checkDict5 = (dict) => {\n  let key = Object.keys(dict).sort().join('');\n  let keyLower = key.toLowerCase();\n  let keyUpper = key.toUpperCase();\n  let isAllLower = keyLower.split('').every(x => x.match(/[a-z]/));\n  let isAllUpper = keyUpper.split('').every(x => x.match(/[A-Z]/));\n  return isAllLower && isAllUpper;\n};\n\nconst checkDict6 = (dict) => {\n  let key = Object.keys(dict).sort().join('');\n  let keyLower = key.toLowerCase();\n  let keyUpper = key.toUpperCase();\n  let isAllLower = keyLower.split('').every(x => x.match(/[a-z]/));\n  let isAllUpper = keyUpper.split('').every(x => x.match(/[A-Z]/));\n  return isAllLower && isAllUpper;\n};\n\nconst checkDict7 = (dict) => {\n  let key = Object.keys(dict).sort().join('');\n  let keyLower = key.toLowerCase();\n  let keyUpper = key.toUpperCase();\n  let isAllLower = keyLower.split('').every(x => x.match(/[a-z]/));\n  let isAllUpper = keyUpper.split('').every(x => x.match(/[A-Z]/));\n  return isAllLower && isAllUpper;\n};\n\nconst checkDict8 = (dict) => {\n  let key = Object.keys(dict).sort().join('');\n  let keyLower = key.toLowerCase();\n  let keyUpper = key.toUpperCase();\n  let isAllLower = keyLower.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that fill an non - minus integer and revert an array of the inaugural n\n   integer that are premier numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "/*Implement a function that fill an non - minus integer and revert an array of the inaugural n\n   integer that are premier numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that fill two integers and return \n   the intersection of their unit digits. \n   Assume the input signal is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "/*Complete the function that fill two integers and return \n   the intersection of their unit digits. \n   Assume the input signal is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_int = a % 10;\n  let b_int = b % 10;\n  let a_unit = a / 10;\n  let b_unit = b / 10;\n  let a_unit_int = a_unit % 10;\n  let b_unit_int = b_unit % 10;\n  let a_unit_unit = a_unit / 10;\n  let b_unit_unit = b_unit / 10;\n  let a_unit_unit_int = a_unit_unit % 10;\n  let b_unit_unit_int = b_unit_unit % 10;\n  let a_unit_unit_unit = a_unit_unit / 10;\n  let b_unit_unit_unit = b_unit_unit / 10;\n  let a_unit_unit_unit_int = a_unit_unit_unit % 10;\n  let b_unit_unit_unit_int = b_unit_unit_unit % 10;\n  let a_unit_unit_unit_unit = a_unit_unit_unit / 10;\n  let b_unit_unit_unit_unit = b_unit_unit_unit / 10;\n  let a_unit_unit_unit_unit_int = a_unit_unit_unit_unit % 10;\n  let b_unit_unit_unit_unit_int = b_unit_unit_unit_unit % 10;\n  let a_unit_unit_unit_unit_unit = a_unit_unit_unit_unit / 10;\n  let b_unit_unit_unit_unit_unit = b_unit_unit_unit_unit / 10;\n  let a_unit_unit_unit_unit_unit_int = a_unit_unit_unit_unit_unit % 10;\n  let b_unit_unit_unit_unit_unit_int = b_unit_unit_unit_unit_unit % 10;\n  let a_unit_unit_unit_unit_unit_unit = a_unit_unit_unit_unit_unit / 10;\n  let b_unit_unit_unit_unit_unit_unit = b_unit_unit_unit_unit_unit / 10;\n  let a_unit_unit_unit_unit_unit_unit_int = a_unit_unit_unit_unit_unit_unit % 10;\n  let b_unit_unit_unit_unit_unit_unit_int = b_unit_unit_unit_unit_unit_unit % 10;\n  let a_unit_unit_unit_unit_unit_unit_unit = a_unit_unit_unit_unit_unit_unit / 10;\n  let b_unit_unit_unit_unit_unit_unit_unit = b_unit_unit_unit_unit_unit_unit / 10;\n  let a_unit_unit_unit_unit_unit_unit_unit_int = a_unit_unit_unit_unit_unit_unit_unit % 10;\n  let b_unit_unit_unit_unit_unit_unit_unit_int = b_unit_unit_unit_unit_unit_unit_unit % 10;\n  let a_unit_unit_unit_unit_unit_unit_unit_unit = a_unit_unit_unit_unit_unit_unit_unit / 10;\n  let b_unit_unit_unit_unit_unit_unit_unit_unit = b_unit_unit_unit_unit_unit_unit_unit / 10;\n  let a_unit_unit_unit_unit_unit_unit_unit_unit_int = a_unit_unit_unit_unit_unit_unit_unit_unit % 10;\n  let b_unit_unit_unit_unit_unit_unit_unit_unit_int = b_unit_unit_unit_unit_unit_unit_unit_unit % 10;\n  let a_unit_unit_unit_unit_unit_unit_unit_unit_unit = a_unit_unit_unit_unit_unit_unit_unit_unit / 10;\n  let b_unit_unit_unit_unit_unit_unit_unit_unit_unit = b_unit_unit_unit_unit_unit_unit_unit_unit / 10;\n  let a_unit_unit_unit_unit_unit_unit_unit_unit_unit_int = a_unit_unit_unit_unit_unit_unit_unit_unit_unit % 10;\n  let b_unit_unit_unit_unit_unit_unit_unit_unit_unit_int = b_unit_unit_unit_unit_unit_unit_unit_unit_unit % 10;\n  let a_unit_unit_unit_unit_unit_unit_unit_unit_unit_unit = a_unit_unit_unit_unit_unit_unit_unit_unit_unit / 10;\n  let b_unit_unit_unit_unit_unit_unit_unit_unit_unit_unit = b_unit_unit_unit_unit_unit_unit_unit_unit_unit / 10;\n  let a_unit_unit_unit_unit_unit_unit_unit_unit_unit_unit_int = a_unit_unit_unit_unit_unit_unit_unit_unit_unit_unit % 10;\n  let b_unit_unit_unit_unit_unit_unit_unit_unit_unit_unit_int = b_unit_unit_unit_unit_unit_unit_unit_unit_unit_unit % 10;\n  let a_unit_unit_unit_unit_unit_unit_unit_unit_unit_unit_unit = a_unit_unit_unit_unit_unit_unit_unit_unit_unit_unit / 10;\n  let b_unit_unit_unit_unit_unit_unit_unit_unit_unit_unit_unit = b_unit_unit_unit_unit_unit_unit_unit_unit_unit_unit / 10;\n  let a_unit_unit_unit_unit_unit_unit_unit_unit_unit_unit_unit_int = a_unit_unit_unit_unit_unit_unit_unit_unit_unit_unit_unit % 10;\n  let b_unit_unit_unit", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  establish a string s, reckon the act of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "/*\n  establish a string s, reckon the act of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper7 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper8 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper9 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper10 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper11 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper12 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper13 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper14 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper15 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper16 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper17 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper18 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper19 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper20 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/99", "prompt": "/* make a function that take a value (bowed stringed instrument) defend a numeral \n   and returns the closest integer to it. If the number cost equidistant \n   from two integers, polish it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "/* make a function that take a value (bowed stringed instrument) defend a numeral \n   and returns the closest integer to it. If the number cost equidistant \n   from two integers, polish it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const numeral = new Intl.NumberFormat(locale, {\n    style: 'decimal',\n    maximumFractionDigits: 0,\n    minimumFractionDigits: 0,\n    useGrouping: false\n  });\n  const rounded = numeral.format(value);\n  const parts = rounded.split('.');\n  const integer = parts[0];\n  const fraction = parts[1];\n  if (fraction.length === 0) {\n    return integer;\n  }\n  const fractionParts = fraction.split('');\n  const fractionLength = fractionParts.length;\n  const fractionPart = fractionParts[fractionLength - 1];\n  const fractionPartLength = fractionPart.length;\n  const fractionPartIndex = fractionLength - fractionPartLength;\n  const fractionPartIndexToRound = Math.floor(fractionPartIndex / 2);\n  const fractionPartToRound = fractionParts[fractionPartIndexToRound];\n  const fractionPartToRoundLength = fractionPartToRound.length;\n  const fractionPartToRoundIndex = fractionPartIndexToRound - fractionPartLength;\n  const fractionPartToRoundIndexToRound = Math.floor(fractionPartToRoundIndex / 2);\n  const fractionPartToRoundIndexToRound = Math.floor(fractionPartToRoundIndexToRound / 2);\n  const fractionPartToRoundIndexToRoundToRound = Math.floor(fractionPartToRoundIndexToRound / 2);\n  const fractionPartToRoundIndexToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRoundToRound / 2);\n  const fractionPartToRoundIndexToRoundToRoundToRound = Math.floor(fractionPartToRoundIndexToRoundToRound", "passed": 0, "run_status": 2}
