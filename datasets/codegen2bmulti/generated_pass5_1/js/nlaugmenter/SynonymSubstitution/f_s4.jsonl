{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let result = false;\n  let minDistance = Infinity;\n  let minDistanceIndex = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - threshold);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n    }\n  }\n  if (minDistance < threshold) {\n    result = true;\n  }\n  return result;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  let result = false;\n  let minDistance = Infinity;\n  let minDistanceIndex = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - threshold);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n    }\n  }\n  if (minDistance < threshold) {\n    result = true;\n  }\n  return result;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  let result = false;\n  let minDistance = Infinity;\n  let minDistanceIndex = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - threshold);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n    }\n  }\n  if (minDistance < threshold) {\n    result = true;\n  }\n  return result;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  let result = false;\n  let minDistance = Infinity;\n  let minDistanceIndex = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - threshold);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n    }\n  }\n  if (minDistance < threshold) {\n    result = true;\n  }\n  return result;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  let result = false;\n  let minDistance = Infinity;\n  let minDistanceIndex = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - threshold);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n    }\n  }\n  if (minDistance < threshold) {\n    result = true;\n  }\n  return result;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  let result = false;\n  let minDistance = Infinity;\n  let minDistanceIndex = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - threshold);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n    }\n  }\n  if (minDistance < threshold) {\n    result = true;\n  }\n  return result;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  let result = false;\n  let minDistance = Infinity;\n  let minDistanceIndex = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple group of nest parentheses. Your goal is to \n   freestanding those group into separate string and return the list of those. \n   Separate groups are balanced (each open brace is by rights shut) and not nested within each early \n   dismiss any spaces in the stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* Input to this function is a string containing multiple group of nest parentheses. Your goal is to \n   freestanding those group into separate string and return the list of those. \n   Separate groups are balanced (each open brace is by rights shut) and not nested within each early \n   dismiss any spaces in the stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let paren_groups = [];\n  let current_paren_group = [];\n  let current_paren_group_length = 0;\n  let current_paren_group_open = false;\n  let current_paren_group_close = false;\n  let current_paren_group_open_count = 0;\n  let current_paren_group_close_count = 0;\n  let current_paren_group_open_count_max = 0;\n  let current_paren_group_close_count_max = 0;\n  let current_paren_group_open_count_min = 0;\n  let current_paren_group_close_count_min = 0;\n  let current_paren_group_open_count_max_min = 0;\n  let current_paren_group_close_count_max_min = 0;\n  let current_paren_group_open_count_max_min_max = 0;\n  let current_paren_group_close_count_max_min_max = 0;\n  let current_paren_group_open_count_max_min_max_min = 0;\n  let current_paren_group_close_count_max_min_max_min = 0;\n  let current_paren_group_open_count_max_min_max_min_max = 0;\n  let current_paren_group_close_count_max_min_max_min_max = 0;\n  let current_paren_group_open_count_max_min_max_min_max_max = 0;\n  let current_paren_group_close_count_max_min_max_min_max_max = 0;\n  let current_paren_group_open_count_max_min_max_min_max_max_max = 0;\n  let current_paren_group_close_count_max_min_max_min_max_max_max = 0;\n  let current_paren_group_open_count_max_min_max_min_max_max_max_max = 0;\n  let current_paren_group_close_count_max_min_max_min_max_max_max_max = 0;\n  let current_paren_group_open_count_max_min_max_min_max_max_max_max_max = 0;\n  let current_paren_group_close_count_max_min_max_min_max_max_max_max_max = 0;\n  let current_paren_group_open_count_max_min_max_min_max_max_max_max_max_max = 0;\n  let current_paren_group_close_count_max_min_max_min_max_max_max_max_max_max = 0;\n  let current_paren_group_open_count_max_min_max_min_max_max_max_max_max_max_max = 0;\n  let current_paren_group_close_count_max_min_max_min_max_max_max_max_max_max_max = 0;\n  let current_paren_group_open_count_max_min_max_min_max_max_max_max_max_max_max_max = 0;\n  let current_paren_group_close_count_max_min_max_min_max_max_max_max_max_max_max_max_max = 0;\n  let current_paren_group_open_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_paren_group_close_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_paren_group_open_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_paren_group_close_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_paren_group_open_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_paren_group_close_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_paren_group_open_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_paren_group_close_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_paren_group_open_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_paren_group_close_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_paren_group_open_count_max_min_max_min_max_max_max_max_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string === '') {\n    return string;\n  }\n  const palindrome = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const postfix = string.split('').reverse().join('');\n  const prefixLength = prefix.length;\n  const postfixLength = postfix.length;\n  let i = 0;\n  while (i < prefixLength) {\n    if (isPalindrome(prefix.substring(0, i + 1))) {\n      return palindrome + prefix.substring(i);\n    }\n    i++;\n  }\n  return palindrome + postfix.substring(0, postfixLength - 1);\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string === '') {\n    return string;\n  }\n  const palindrome = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const postfix = string.split('').reverse().join('');\n  const prefixLength = prefix.length;\n  const postfixLength = postfix.length;\n  let i = 0;\n  while (i < prefixLength) {\n    if (isPalindrome(prefix.substring(0, i + 1))) {\n      return palindrome + prefix.substring(i);\n    }\n    i++;\n  }\n  return palindrome + postfix.substring(postfixLength - 1);\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string === '') {\n    return string;\n  }\n  const palindrome = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const postfix = string.split('').reverse().join('');\n  const prefixLength = prefix.length;\n  const postfixLength = postfix.length;\n  let i = 0;\n  while (i < prefixLength) {\n    if (isPalindrome(prefix.substring(0, i + 1))) {\n      return palindrome + prefix.substring(i);\n    }\n    i++;\n  }\n  return palindrome + postfix.substring(postfixLength - 1);\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string === '') {\n    return string;\n  }\n  const palindrome = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const postfix = string.split('').reverse().join('');\n  const prefixLength = prefix.length;\n  const postfixLength = postfix.length;\n  let i = 0;\n  while (i < prefixLength) {\n    if (isPalindrome(prefix.substring(0, i + 1))) {\n      return palindrome + prefix.substring(i);\n    }\n    i++;\n  }\n  return palindrome + postfix.substring(postfixLength - 1);\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  if (n <= 0) return [];\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    const numeral = n;\n    const numeral2 = n - i;\n    const numeral3 = n - i - 1;\n    const numeral4 = n - i - 2;\n    const numeral5 = n - i - 3;\n    const numeral6 = n - i - 4;\n    const numeral7 = n - i - 5;\n    const numeral8 = n - i - 6;\n    const numeral9 = n - i - 7;\n    const numeral10 = n - i - 8;\n    const numeral11 = n - i - 9;\n    const numeral12 = n - i - 10;\n    const numeral13 = n - i - 11;\n    const numeral14 = n - i - 12;\n    const numeral15 = n - i - 13;\n    const numeral16 = n - i - 14;\n    const numeral17 = n - i - 15;\n    const numeral18 = n - i - 16;\n    const numeral19 = n - i - 17;\n    const numeral20 = n - i - 18;\n    const numeral21 = n - i - 19;\n    const numeral22 = n - i - 20;\n    const numeral23 = n - i - 21;\n    const numeral24 = n - i - 22;\n    const numeral25 = n - i - 23;\n    const numeral26 = n - i - 24;\n    const numeral27 = n - i - 25;\n    const numeral28 = n - i - 26;\n    const numeral29 = n - i - 27;\n    const numeral30 = n - i - 28;\n    const numeral31 = n - i - 29;\n    const numeral32 = n - i - 30;\n    const numeral33 = n - i - 31;\n    const numeral34 = n - i - 32;\n    const numeral35 = n - i - 33;\n    const numeral36 = n - i - 34;\n    const numeral37 = n - i - 35;\n    const numeral38 = n - i - 36;\n    const numeral39 = n - i - 37;\n    const numeral40 = n - i - 38;\n    const numeral41 = n - i - 39;\n    const numeral42 = n - i - 40;\n    const numeral43 = n - i - 41;\n    const numeral44 = n - i - 42;\n    const numeral45 = n - i - 43;\n    const numeral46 = n - i - 44;\n    const numeral47 = n - i - 45;\n    const numeral48 = n - i - 46;\n    const numeral49 = n - i - 47;\n    const numeral50 = n - i - 48;\n    const numeral51 = n - i - 49;\n    const numeral52 = n - i - 50;\n    const numeral53 = n - i - 51;\n    const numeral54 = n - i - 52;\n    const numeral55 = n - i - 53;\n    const numeral56 = n - i - 54;\n    const numeral57 = n - i - 55;\n    const numeral58 = n - i - 56;\n    const numeral59 = n - i - 57;\n    const numeral60 = n - i - 58;\n    const numeral61 = n - i - 59;\n    const numeral62 = n - i - 60;\n    const numeral63 = n - i - 61;\n    const numeral64 = n - i - 62;\n    const numeral65 = n - i - 63;\n    const numeral66 = n - i - 64;\n    const numeral67 = n - i - 65;\n    const numeral68 = n - i - 66;\n    const numeral69 = n - i - 67;\n    const numeral70 = n - i - 68;\n    const numeral71 = n - i - 69;\n    const numeral72 = n - i - 70;\n    const numeral73 = n - i - 71;\n    const numeral74 = n - i - 72;\n    const numeral75 = n - i - 73;\n    const numeral76 = n - i - 74;\n    const numeral77 = n - i - 75;\n    const numeral78 = n - i - 76;\n    const numeral79 = n - i - 77;\n    const numeral80 = n - i - 78;\n    const numeral81 = n - i - 79;\n    const numeral82 = n - i - 80;\n    const numeral83 = n - i - 81;\n    const numeral84 = n - i - 82;\n    const numeral85 = n - i - 83;\n    const numeral86 = n - i - 84;\n    const numeral87 = n - i - 85;\n    const numeral88 = n - i - 86;\n    const numeral89 = n - i - 87;\n    const numeral90 = n - i - 88;\n    const numeral91 = n - i - 89;\n    const numeral92 = n - i - 90;\n    const numeral93 = n - i - 91;\n    const numeral94 = n - i - 92;\n    const numeral95 = n - i - 93;\n    const numeral96 = n - i - 94;\n    const numeral97 = n - i - 95;\n    const numeral98 = n - i - 96;\n    const numeral99 = n - i - 97;\n    const numeral100 = n - i - 98;\n    const numeral101 = n - i - 99;\n    const numeral102 = n - i - 100;\n    const numeral103 = n - i - 101;\n    const numeral104 = n - i - 102;\n    const numeral105 = n - i - 103;\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = [];\n  let wordsArr = s.split(/[,\\s]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n}\n\nmodule.exports = wordsString;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the \n   big even integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*This function takes two positive numbers x and y and returns the \n   big even integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let x_ = x,\n    y_ = y,\n    x_min = Math.min(x, y),\n    x_max = Math.max(x, y),\n    x_mid = x_min + (x_max - x_min) / 2,\n    y_min = Math.min(x, y),\n    y_max = Math.max(x, y),\n    y_mid = y_min + (y_max - y_min) / 2;\n  if (x_mid === x_min || y_mid === y_min) {\n    return -1;\n  }\n  if (x_mid === x_max || y_mid === y_max) {\n    return x_max + y_max;\n  }\n  return x_mid + y_mid;\n};\n\nmodule.exports = {\n  chooseNum\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let avg = 0;\n  for (let i = n; i <= m; i++) {\n    avg += i;\n  }\n  avg /= (m - n + 1);\n  avg = Math.round(avg);\n  if (avg > m) {\n    return -1;\n  }\n  return avg;\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const currentDigit = x[i];\n    let j = i + 1;\n    while (j < x.length && x[j] === currentDigit) {\n      j++;\n    }\n    if (j === x.length) {\n      result.push(currentDigit);\n    }\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that be between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that be between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  let reversed = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i] + reversed[i]);\n  }\n  return result;\n};\n\nmodule.exports = byLength;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the factorial of i if i is even \n   or the union of issue from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the generation of the numbers pool from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* Implement the function f that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the factorial of i if i is even \n   or the union of issue from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the generation of the numbers pool from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f(i + 1));\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd \n   integer palindrome that decrease within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd \n   integer palindrome that decrease within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    let j = 1\n    while (j <= n) {\n      if (i % j === 0) {\n        if (i % (j + 1) === 0) {\n          even++\n        } else {\n          odd++\n        }\n      }\n      j++\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nmodule.exports = evenOddPalindrome\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered. Your job is to determine if \n   it is possible to make an array sorted in non - decreasing ordering by perform \n   the following operation on the give array: \n       You are allow to perform correct shift operation any phone number of clock time. \n  \n   One correct shift key process think of shift all element of the array by one \n   side in the right direction. The final element of the array will be travel to \n   the starting military position in the array i.e. 0th exponent. \n\n   If it is potential to obtain the sorted array by performing the above mathematical process \n   then return true else return false. \n   If the sacrifice array is empty then return true. \n\n   Note: The sacrifice list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered. Your job is to determine if \n   it is possible to make an array sorted in non - decreasing ordering by perform \n   the following operation on the give array: \n       You are allow to perform correct shift operation any phone number of clock time. \n  \n   One correct shift key process think of shift all element of the array by one \n   side in the right direction. The final element of the array will be travel to \n   the starting military position in the array i.e. 0th exponent. \n\n   If it is potential to obtain the sorted array by performing the above mathematical process \n   then return true else return false. \n   If the sacrifice array is empty then return true. \n\n   Note: The sacrifice list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let result = true;\n  let index = 0;\n  let temp = arr[0];\n  arr.forEach((item, index) => {\n    if (item < temp) {\n      result = false;\n    }\n    temp = item;\n  });\n  return result;\n};\n\nmodule.exports = moveOneBall;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else if (a[i] === '0') {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input is a string a consisting of only 1s and 0s.\n  Output is a string b consisting of only 1s and 0s.\n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor2 = (a) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += '1';\n    } else if (a[i] === '0') {\n      result += '0';\n    }\n  }\n  return result;\n};\n\n/*\n  Input is a string a consisting of only 1s and 0s.\n  Output is a string b consisting of only 1s and 0s.\n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor3 = (a) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += '1';\n    } else if (a[i] === '0') {\n      result += '0';\n    }\n  }\n  return result;\n};\n\n/*\n  Input is a string a consisting of only 1s and 0s.\n  Output is a string b consisting of only 1s and 0s.\n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor4 = (a) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += '1';\n    } else if (a[i] === '0') {\n      result += '0';\n    }\n  }\n  return result;\n};\n\n/*\n  Input is a string a consisting of only 1s and 0s.\n  Output is a string b consisting of only 1s and 0s.\n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor5 = (a) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += '1';\n    } else if (a[i] === '0') {\n      result += '0';\n    }\n  }\n  return result;\n};\n\n/*\n  Input is a string a consisting of only 1s and 0s.\n  Output is a string b consisting of only 1s and 0s.\n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor6 = (a) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += '1';\n    } else if (a[i] === '0') {\n      result += '0';\n    }\n  }\n  return result;\n};\n\n/*\n  Input is a string a consisting of only 1s and 0s.\n  Output is a string b consisting of only 1s and 0s.\n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor7 = (a) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += '1';\n    } else if (a[i] === '0') {\n      result += '0';\n    }\n  }\n  return result;\n};\n\n/*\n  Input is a string a consisting of only 1s and 0s.\n  Output is a string b consisting of only 1s and 0s.\n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor8 = (a) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += '1';\n    } else if (a[i] === '0') {\n      result += '0';\n    }\n  }\n  return result;\n};\n\n/*\n  Input is a string a consisting of only 1s and 0s.\n  Output is a string b consisting of only 1s and 0s.\n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor9 = (a) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += '1';\n    } else if (a[i] === '0') {\n      result += '0';\n    }\n  }\n  return result;\n};\n\n/*\n  Input is a string a consisting of only 1s and 0s.\n  Output is a string b consisting of only 1s and 0s.\n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor10 = (a) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += '1';\n    } else if (a[i] === '0') {\n      result += '0';\n    }\n  }\n  return result;\n};\n\n/*\n  Input is a string", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of number, \n   and determine whether it is potential to do an exchange of elements \n   between them to name lst1 a list of merely even numbers. \n   There is no terminus ad quem on the numeral of exchanged elements between lst1 and lst2.\n   If it be possible to exchange elements between the lst1 and lst2 to cause \n   all the element of lst1 to constitute even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*In this problem, you will implement a function that takes two lists of number, \n   and determine whether it is potential to do an exchange of elements \n   between them to name lst1 a list of merely even numbers. \n   There is no terminus ad quem on the numeral of exchanged elements between lst1 and lst2.\n   If it be possible to exchange elements between the lst1 and lst2 to cause \n   all the element of lst1 to constitute even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even++;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even--;\n    }\n  }\n  if (even === 0) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let histogramCount = 0;\n  let histogramCounts = [];\n  let histogramCountsLength = 0;\n  let histogramCountsLengths = [];\n  let histogramCountsLengthsLength = 0;\n  let histogramCountsLengthsLengths = [];\n  let histogramCountsLengthsLengthsLength = 0;\n  let histogramCountsLengthsLengthsLengths = [];\n  let histogramCountsLengthsLengthsLengthsLength = 0;\n  let histogramCountsLengthsLengthsLengthsLengths = [];\n  let histogramCountsLengthsLengthsLengthsLengthsLength = 0;\n  let histogramCountsLengthsLengthsLengthsLengthsLengths = [];\n  let histogramCountsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let histogramCountsLengthsLengthsLengthsLengthsLengthsLengths = [];\n  let histogramCountsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let histogramCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let histogramCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let histogramCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let histogramCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let histogramCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let histogramCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let histogramCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let histogramCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let histogramCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengths", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings s and c, you have to deleted all the character in s that be adequate to any fictional character in c\n   then check if the consequence drawstring is palindrome. \n   A chain is called palindrome if it reads the same backward as ahead. \n   You should return a tuple check the resultant role string and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*Task \n   We are given two strings s and c, you have to deleted all the character in s that be adequate to any fictional character in c\n   then check if the consequence drawstring is palindrome. \n   A chain is called palindrome if it reads the same backward as ahead. \n   You should return a tuple check the resultant role string and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = [];\n  let check = false;\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < c.length) {\n    if (s[i] === c[j]) {\n      i++;\n      j++;\n    } else {\n      if (j < c.length) {\n        j++;\n      } else {\n        i++;\n      }\n    }\n  }\n  while (i < s.length) {\n    result.push(s[i++]);\n  }\n  while (j < c.length) {\n    result.push(c[j++]);\n  }\n  return result;\n};\n\nconst checkPalindrome = (s) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < s.length) {\n    if (s[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      if (j < s.length) {\n        j++;\n      } else {\n        i++;\n      }\n    }\n  }\n  return (i === s.length && j === s.length);\n};\n\nconst checkPalindrome2 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < s.length) {\n    if (s[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      if (j < s.length) {\n        j++;\n      } else {\n        i++;\n      }\n    }\n  }\n  return (i === s.length && j === s.length);\n};\n\nconst checkPalindrome3 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < s.length) {\n    if (s[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      if (j < s.length) {\n        j++;\n      } else {\n        i++;\n      }\n    }\n  }\n  return (i === s.length && j === s.length);\n};\n\nconst checkPalindrome4 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < s.length) {\n    if (s[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      if (j < s.length) {\n        j++;\n      } else {\n        i++;\n      }\n    }\n  }\n  return (i === s.length && j === s.length);\n};\n\nconst checkPalindrome5 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < s.length) {\n    if (s[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      if (j < s.length) {\n        j++;\n      } else {\n        i++;\n      }\n    }\n  }\n  return (i === s.length && j === s.length);\n};\n\nconst checkPalindrome6 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < s.length) {\n    if (s[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      if (j < s.length) {\n        j++;\n      } else {\n        i++;\n      }\n    }\n  }\n  return (i === s.length && j === s.length);\n};\n\nconst checkPalindrome7 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < s.length) {\n    if (s[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      if (j < s.length) {\n        j++;\n      } else {\n        i++;\n      }\n    }\n  }\n  return (i === s.length && j === s.length);\n};\n\nconst checkPalindrome8 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < s.length) {\n    if (s[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      if (j < s.length) {\n        j++;\n      } else {\n        i++;\n      }\n    }\n  }\n  return (i === s.length && j === s.length);\n};\n\nconst checkPalindrome9 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < s.length) {\n    if (s[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      if (j < s.length) {\n        j++;\n      } else {\n        i++;\n      }\n    }\n  }\n  return (i === s.length && j === s.length);\n};\n\nconst checkPalindrome10 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = []\n  let n = 0\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i]\n    let n = 0\n    let j = 0\n    while (j < str.length) {\n      let c = str[j]\n      if (c === '1') {\n        n++\n      }\n      j++\n    }\n    res.push(`the number of odd elements ${n} the str${n}ng ${n} of the ${n}nput.`)\n  }\n  return res\n}\n\nmodule.exports = oddCount\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find the minimum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  if (!nums ||!nums.length) {\n    return 0;\n  }\n  const minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      continue;\n    }\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a unmarried well, \n   and each 1 in a quarrel represents a individual unit of water. \n   Each well has a comparable bucket that can be use to extract urine from it, \n   and all buckets have the like capacity.\n   Your undertaking is to practice the buckets to empty the wells. \n   Output the number of meter you necessitate to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a unmarried well, \n   and each 1 in a quarrel represents a individual unit of water. \n   Each well has a comparable bucket that can be use to extract urine from it, \n   and all buckets have the like capacity.\n   Your undertaking is to practice the buckets to empty the wells. \n   Output the number of meter you necessitate to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = grid.map((row, i) => {\n    return row.map((col, j) => {\n      return col === 0? 0 : 1;\n    });\n  });\n  const bucket_capacity = buckets.reduce((acc, curr) => {\n    return acc + curr.reduce((acc, curr) => {\n      return acc + curr;\n    }, 0);\n  }, 0);\n  return bucket_capacity - capacity;\n};\n\nmodule.exports = maxFill;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in ascend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in ascend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray2 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray3 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray4 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray5 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray6 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray7 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray8 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray9 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray10 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray11 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray12 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray13 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray14 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray15 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray16 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray17 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray18 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to follow through \n   a routine that come back a list of all words from chain s that contain exactly \n   n consonant, in order these news appear in the chain s.\n   If the string s is empty then the affair should return an empty list.\n   Note: you may assume the input string contains entirely letter and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*Given a string s and a natural number n, you have been tasked to follow through \n   a routine that come back a list of all words from chain s that contain exactly \n   n consonant, in order these news appear in the chain s.\n   If the string s is empty then the affair should return an empty list.\n   Note: you may assume the input string contains entirely letter and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length === 0) return [];\n  let words = [];\n  let word = [];\n  let i = 0;\n  while (i < s.length) {\n    let c = s[i];\n    if (c.match(/[a-zA-Z]/)) {\n      word.push(c);\n      i++;\n    } else {\n      if (word.length === n) {\n        words.push(word.join(\"\"));\n        word = [];\n      }\n      i++;\n    }\n  }\n  if (word.length === n) {\n    words.push(word.join(\"\"));\n  }\n  return words;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stand between \n   two consonant from the correct side of the word (shell sensitive). \n  \n   Vowels in the beginning and ending doesn't consider. refund empty chain if you didn't \n   find any vowel meet the above circumstance. \n\n   You may assume that the given string contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*You are given a word. Your task is to find the closest vowel that stand between \n   two consonant from the correct side of the word (shell sensitive). \n  \n   Vowels in the beginning and ending doesn't consider. refund empty chain if you didn't \n   find any vowel meet the above circumstance. \n\n   You may assume that the given string contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const len = word.length\n  let min = 0\n  let minIndex = 0\n  let max = 0\n  let maxIndex = 0\n  let minVowel = \"\"\n  let maxVowel = \"\"\n  let minVowelIndex = 0\n  let maxVowelIndex = 0\n  let minVowelIndex2 = 0\n  let maxVowelIndex2 = 0\n  let minVowelIndex3 = 0\n  let maxVowelIndex3 = 0\n  let minVowelIndex4 = 0\n  let maxVowelIndex4 = 0\n  let minVowelIndex5 = 0\n  let maxVowelIndex5 = 0\n  let minVowelIndex6 = 0\n  let maxVowelIndex6 = 0\n  let minVowelIndex7 = 0\n  let maxVowelIndex7 = 0\n  let minVowelIndex8 = 0\n  let maxVowelIndex8 = 0\n  let minVowelIndex9 = 0\n  let maxVowelIndex9 = 0\n  let minVowelIndex10 = 0\n  let maxVowelIndex10 = 0\n  let minVowelIndex11 = 0\n  let maxVowelIndex11 = 0\n  let minVowelIndex12 = 0\n  let maxVowelIndex12 = 0\n  let minVowelIndex13 = 0\n  let maxVowelIndex13 = 0\n  let minVowelIndex14 = 0\n  let maxVowelIndex14 = 0\n  let minVowelIndex15 = 0\n  let maxVowelIndex15 = 0\n  let minVowelIndex16 = 0\n  let maxVowelIndex16 = 0\n  let minVowelIndex17 = 0\n  let maxVowelIndex17 = 0\n  let minVowelIndex18 = 0\n  let maxVowelIndex18 = 0\n  let minVowelIndex19 = 0\n  let maxVowelIndex19 = 0\n  let minVowelIndex20 = 0\n  let maxVowelIndex20 = 0\n  let minVowelIndex21 = 0\n  let maxVowelIndex21 = 0\n  let minVowelIndex22 = 0\n  let maxVowelIndex22 = 0\n  let minVowelIndex23 = 0\n  let maxVowelIndex23 = 0\n  let minVowelIndex24 = 0\n  let maxVowelIndex24 = 0\n  let minVowelIndex25 = 0\n  let maxVowelIndex25 = 0\n  let minVowelIndex26 = 0\n  let maxVowelIndex26 = 0\n  let minVowelIndex27 = 0\n  let maxVowelIndex27 = 0\n  let minVowelIndex28 = 0\n  let maxVowelIndex28 = 0\n  let minVowelIndex29 = 0\n  let maxVowelIndex29 = 0\n  let minVowelIndex30 = 0\n  let maxVowelIndex30 = 0\n  let minVowelIndex31 = 0\n  let maxVowelIndex31 = 0\n  let minVowelIndex32 = 0\n  let maxVowelIndex32 = 0\n  let minVowelIndex33 = 0\n  let maxVowelIndex33 = 0\n  let minVowelIndex34 = 0\n  let maxVowelIndex34 = 0\n  let minVowelIndex35 = 0\n  let maxVowelIndex35 = 0\n  let minVowelIndex36 = 0\n  let maxVowelIndex36 = 0\n  let minVowelIndex37 = 0\n  let maxVowelIndex37 = 0\n  let minVowelIndex38 = 0\n  let maxVowelIndex38 = 0\n  let minVowelIndex39 = 0\n  let maxVowelIndex39 = 0\n  let minVowelIndex40 = 0\n  let maxVowelIndex40 = 0\n  let minVowelIndex41 = 0\n  let maxVowelIndex41 = 0\n  let minVowelIndex42 = 0\n  let maxVowelIndex42 = 0\n  let minVowelIndex43 = 0\n  let maxVowelIndex43 = 0\n  let minVowelIndex44 = 0\n  let maxVowelIndex44 = 0\n  let minVowelIndex45 = 0\n  let maxVowelIndex45 = 0\n  let minVowelIndex46 = 0\n  let maxVowelIndex46 = 0\n  let minVowelIndex47 = 0\n  let maxVowelIndex47 = 0\n  let minVowelIndex48 = 0\n  let maxVowelIndex48 = 0\n  let minVowelIndex49 = 0\n  let maxVowelIndex49 = 0\n  let minVowelIndex50 = 0\n  let maxVowelIndex50 = 0\n  let minVowelIndex51 = 0\n  let maxVowelIndex51 = 0\n  let minVowelIndex52 = 0\n  let maxVowelIndex52 = 0\n  let minVowelIndex53 = 0\n  let maxVowelIndex53 = 0\n  let minVowelIndex54 = 0\n  let maxVowelIndex54 = 0\n  let minVowelIndex55 = 0\n  let maxVowelIndex55 = 0\n  let minVowelIndex56 = 0\n  let maxVowelIndex56 = 0\n  let minVowelIndex57 = 0\n  let maxVowelIndex57 = 0\n  let minVowelIndex58 = 0\n  let maxVowelIndex58 = 0\n  let minVowelIndex59 = 0\n  let max", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open \n   digression' (' or airless parenthesis')' merely. \n   Your job is to check if it equal possible to concatenate the two string in\n   some order, that the result string will be estimable. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* You are given a list of two strings, both strings consist of open \n   digression' (' or airless parenthesis')' merely. \n   Your job is to check if it equal possible to concatenate the two string in\n   some order, that the result string will be estimable. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = false;\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let str = lst[i];\n    let j = i + 1;\n    while (j < len && str[j] === str[j - 1]) {\n      j++;\n    }\n    if (j - i === 2) {\n      res = true;\n      i = j;\n    } else {\n      i = j;\n    }\n  }\n  return res;\n};\n\nmodule.exports = matchParens;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return '';\n  }\n  let maxLength = 0;\n  let longestString = '';\n  for (let i = 0; i < strings.length; i++) {\n    let currentString = strings[i];\n    if (currentString.length > maxLength) {\n      maxLength = currentString.length;\n      longestString = currentString;\n    }\n  }\n  return longestString;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  const max = arr.reduce((a, b) => a > b? a : b, -Infinity);\n  for (let i = 0; i < k; i++) {\n    const min = arr.reduce((a, b) => a < b? a : b, Infinity);\n    if (min === max) {\n      result.push(min);\n    } else {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\nmodule.exports = maximum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the union of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the union of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\nmodule.exports = solution;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = arr[0];\n  for (let i = 1; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nexport default addElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the leftover number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a succession defined \n   as follows: begin with any positive integer n. Then each term is obtained from the \n   former condition as follow: if the previous terminus is even, the adjacent condition is one one-half of \n   the former condition. If the previous condition be odd, the adjacent term is 3 time the previous \n   term plus 1. The guess is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that has the leftover number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a succession defined \n   as follows: begin with any positive integer n. Then each term is obtained from the \n   former condition as follow: if the previous terminus is even, the adjacent condition is one one-half of \n   the former condition. If the previous condition be odd, the adjacent term is 3 time the previous \n   term plus 1. The guess is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1];\n  while (n > 1) {\n    let term = n % 2;\n    if (term === 0) {\n      collatz.push(n);\n    } else {\n      collatz.push(term);\n      n = n / 2;\n    }\n  }\n  return collatz;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date drawstring and \n   rejoinder true if the date is valid otherwise delusive. \n   The date is valid if all of the following dominion equal satisfied: \n   1. The date chain is not empty. \n   2. The number of day is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for months 4,6,9,11. And, the number of sidereal day is not less than 1 or gamey than 29 for the calendar month 2. \n   3. The month should not exist less than 1 or higher than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*You have to write a function which validates a given date drawstring and \n   rejoinder true if the date is valid otherwise delusive. \n   The date is valid if all of the following dominion equal satisfied: \n   1. The date chain is not empty. \n   2. The number of day is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for months 4,6,9,11. And, the number of sidereal day is not less than 1 or gamey than 29 for the calendar month 2. \n   3. The month should not exist less than 1 or higher than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateChain = [];\n  let month = 0;\n  let day = 0;\n  let year = 0;\n  let siderealDay = 0;\n  let dayOfMonth = 0;\n  let monthOfYear = 0;\n  let yearOfMonth = 0;\n  let dayOfWeek = 0;\n  let dayOfWeekOfMonth = 0;\n  let dayOfWeekOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n  let dayOfWeekOfMonthOfYear = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(/[\\s,]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let lower = word.toLowerCase();\n    let ord = lower.charCodeAt(0);\n    if (ord >= 65 && ord <= 90) {\n      result.push(word);\n    } else {\n      result.push(word.charAt(0));\n    }\n  }\n  return result;\n};\n\nmodule.exports = splitWords;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev === lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev === lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev === lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev === lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev === lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev === lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev === lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev === lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev === lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev === lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev === lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev === lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted13 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev === lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval is a couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval is a couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.end < interval2.start) return \"NO\"\n  if (interval1.start > interval2.end) return \"NO\"\n  if (interval1.start === interval2.start && interval1.end === interval2.end) return \"YES\"\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  let prodSigns = 0;\n  for (let i = 0; i < arr.length; i++) {\n    prodSigns += arr[i];\n  }\n  return prodSigns;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cellular telephone of the grid contains a value. Every integer in the compass [ 1, N * N ] \n   inclusive appears precisely once on the cells of the grid.\n\n   You accept to discover the minimum way of duration k in the grid. You can start \n   from any cellular telephone, and in each dance step you can act to any of the neighbor cell, \n   in other words, you can survive to cellular telephone which share an edge with you current \n   cell. \n   Please notice that a path of length k entail chew the fat exactly k cellular telephone (not \n   necessarily distinct). \n   You CANNOT sound off the grid.\n   A path A (of duration k) is consider less than a path b-complex vitamin (of distance k) if \n   after induce the ordered lists of the value on the cell that A and B go \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the value on the cells that the minimal way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cellular telephone of the grid contains a value. Every integer in the compass [ 1, N * N ] \n   inclusive appears precisely once on the cells of the grid.\n\n   You accept to discover the minimum way of duration k in the grid. You can start \n   from any cellular telephone, and in each dance step you can act to any of the neighbor cell, \n   in other words, you can survive to cellular telephone which share an edge with you current \n   cell. \n   Please notice that a path of length k entail chew the fat exactly k cellular telephone (not \n   necessarily distinct). \n   You CANNOT sound off the grid.\n   A path A (of duration k) is consider less than a path b-complex vitamin (of distance k) if \n   after induce the ordered lists of the value on the cell that A and B go \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the value on the cells that the minimal way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const dirs = [\n    [0, 1],\n    [0, -1],\n    [1, 0],\n    [-1, 0],\n  ];\n  const dirs_len = dirs.length;\n  const dirs_map = new Map();\n  for (let i = 0; i < dirs_len; i++) {\n    dirs_map.set(dirs[i], i);\n  }\n  const result = [];\n  const visited = new Set();\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (visited.has(grid[i][j])) {\n        continue;\n      }\n      const path = [];\n      let curr = grid[i][j];\n      path.push(curr);\n      visited.add(curr);\n      while (curr!== 0) {\n        const dir = dirs_map.get(curr);\n        const next = dirs[dir][0];\n        const next_i = dirs[dir][1];\n        if (next_i === -1) {\n          curr = 0;\n        } else {\n          curr = grid[next_i][next];\n        }\n        path.push(curr);\n        visited.add(curr);\n      }\n      result.push(...path);\n    }\n  }\n  return result;\n};\n\nexport default minPath;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === b) return a;\n  if (a < b) return greatestCommonDivisor(b, a);\n  if (a % b === 0) return b;\n  return greatestCommonDivisor(a, b % a);\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematician in \n   the last couple century. However, what citizenry don't know is Tribonacci sequence. \n   Tribonacci succession is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is leftover.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematician in \n   the last couple century. However, what citizenry don't know is Tribonacci sequence. \n   Tribonacci succession is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is leftover.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1;\n  let b = 2;\n  let c = 3;\n  let d = 1;\n  let t = [];\n  while (n > 0) {\n    t.push(a);\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n    n--;\n  }\n  return t;\n};\n\nconst test = (n) => {\n  let t = tri(n);\n  console.log(t.length);\n  console.log(t);\n};\n\ntest(1);\ntest(2);\ntest(3);\ntest(4);\ntest(5);\ntest(6);\ntest(7);\ntest(8);\ntest(9);\ntest(10);\ntest(11);\ntest(12);\ntest(13);\ntest(14);\ntest(15);\ntest(16);\ntest(17);\ntest(18);\ntest(19);\ntest(20);\ntest(21);\ntest(22);\ntest(23);\ntest(24);\ntest(25);\ntest(26);\ntest(27);\ntest(28);\ntest(29);\ntest(30);\ntest(31);\ntest(32);\ntest(33);\ntest(34);\ntest(35);\ntest(36);\ntest(37);\ntest(38);\ntest(39);\ntest(40);\ntest(41);\ntest(42);\ntest(43);\ntest(44);\ntest(45);\ntest(46);\ntest(47);\ntest(48);\ntest(49);\ntest(50);\ntest(51);\ntest(52);\ntest(53);\ntest(54);\ntest(55);\ntest(56);\ntest(57);\ntest(58);\ntest(59);\ntest(60);\ntest(61);\ntest(62);\ntest(63);\ntest(64);\ntest(65);\ntest(66);\ntest(67);\ntest(68);\ntest(69);\ntest(70);\ntest(71);\ntest(72);\ntest(73);\ntest(74);\ntest(75);\ntest(76);\ntest(77);\ntest(78);\ntest(79);\ntest(80);\ntest(81);\ntest(82);\ntest(83);\ntest(84);\ntest(85);\ntest(86);\ntest(87);\ntest(88);\ntest(89);\ntest(90);\ntest(91);\ntest(92);\ntest(93);\ntest(94);\ntest(95);\ntest(96);\ntest(97);\ntest(98);\ntest(99);\ntest(100);\ntest(101);\ntest(102);\ntest(103);\ntest(104);\ntest(105);\ntest(106);\ntest(107);\ntest(108);\ntest(109);\ntest(110);\ntest(111);\ntest(112);\ntest(113);\ntest(114);\ntest(115);\ntest(116);\ntest(117);\ntest(118);\ntest(119);\ntest(120);\ntest(121);\ntest(122);\ntest(123);\ntest(124);\ntest(125);\ntest(126);\ntest(127);\ntest(128);\ntest(129);\ntest(130);\ntest(131);\ntest(132);\ntest(133);\ntest(134);\ntest(135);\ntest(136);\ntest(137);\ntest(138);\ntest(139);\ntest(140);\ntest(141);\ntest(142);\ntest(143);\ntest(144);\ntest(145);\ntest(146);\ntest(147);\ntest(148);\ntest(149);\ntest(150);\ntest(151);\ntest(152);\ntest(153);\ntest(154);\ntest(155);\ntest(156);\ntest(157);\ntest(158);\ntest(159);\ntest(160);\ntest(161);\ntest(162);\ntest(163);\ntest(164);\ntest(165);\ntest(166);\ntest(167);\ntest(168);\ntest(169);\ntest(170);\ntest(171);\ntest(172);\ntest(173);\ntest(174);\ntest(175);\ntest(176);\ntest(177);\ntest(178);\ntest(179);\ntest(180);\ntest(181);\ntest(182);\ntest(183);\ntest(184);\ntest(185);\ntest(186);\ntest(187);\ntest(188);\ntest(189);\ntest(190);\ntest(191);\ntest(192);\ntest(193);\ntest(194);\ntest(195);\ntest(196);\ntest(197);\ntest(198);\ntest(199);\ntest(200);\ntest(201);\ntest(202);\ntest(203);\ntest(204);\ntest(205);\ntest(206);\ntest(207);\ntest(208);\ntest(209);\ntest(210);\ntest(211);\ntest(212);\ntest(213);\ntest(214);\ntest(215);\ntest(216);\ntest(217);\ntest(218);\ntest(219);\ntest(220);\ntest(221);\ntest(222);\ntest(223);\ntest(224);\ntest(225);\ntest(226);\ntest(227);\ntest(228);\ntest(229);\ntest(230);\ntest(231);\ntest(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digits = [0]\n  while (n > 0) {\n    digits[n % 10] += 1\n    n = Math.floor(n / 10)\n  }\n  return digits\n}\n\nmodule.exports = digits\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains entirely hearty bracket. \n   The function should return genuine if and only if there is a valid subsequence of bracket \n   where at least one bracket in the sequel is nested. \n   isNested('[[]]') ➞ genuine \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ on-key \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input which contains entirely hearty bracket. \n   The function should return genuine if and only if there is a valid subsequence of bracket \n   where at least one bracket in the sequel is nested. \n   isNested('[[]]') ➞ genuine \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ on-key \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  let brackets = [],\n  bracketCount = 0,\n  isValid = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      brackets.push(string[i]);\n      bracketCount++;\n    } else if (string[i] === ']') {\n      if (brackets.length > 0 && brackets[brackets.length - 1] === string[i]) {\n        brackets.pop();\n        bracketCount--;\n      } else {\n        isValid = false;\n        break;\n      }\n    }\n  }\n  return brackets.length === bracketCount && isValid;\n}\n\n// Reflection\n/*\n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1, 2, 3]));\nconsole.log(sumSquares([1, 4, 9]));\nconsole.log(sumSquares([1, 3, 5, 7]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([-2.4, 1, 1]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetic = /[a-zA-Z]/.test(lastChar);\n  const isNotBible = /[^a-zA-Z]/.test(lastChar);\n  return!(isAlphabetic || isNotBible);\n};\n\n/**\n * Checks if a string is a number.\n * @param {string} str\n * @returns {boolean}\n */\nconst isNumber = (str) => {\n  return /^[0-9]+$/.test(str);\n};\n\n/**\n * Checks if a string is a number.\n * @param {string} str\n * @returns {boolean}\n */\nconst isNumberOrZero = (str) => {\n  return /^[0-9]+$|^0+$/.test(str);\n};\n\n/**\n * Checks if a string is a number.\n * @param {string} str\n * @returns {boolean}\n */\nconst isNumberOrZeroOrEmpty = (str) => {\n  return /^[0-9]+$|^0+$|^$/.test(str);\n};\n\n/**\n * Checks if a string is a number.\n * @param {string} str\n * @returns {boolean}\n */\nconst isNumberOrZeroOrEmptyOrNull = (str) => {\n  return /^[0-9]+$|^0+$|^$|null/.test(str);\n};\n\n/**\n * Checks if a string is a number.\n * @param {string} str\n * @returns {boolean}\n */\nconst isNumberOrZeroOrEmptyOrNullOrUndefined = (str) => {\n  return /^[0-9]+$|^0+$|^$|null|undefined/.test(str);\n};\n\n/**\n * Checks if a string is a number.\n * @param {string} str\n * @returns {boolean}\n */\nconst isNumberOrZeroOrEmptyOrNullOrUndefinedOrNaN = (str) => {\n  return /^[0-9]+$|^0+$|^$|null|undefined|NaN/.test(str);\n};\n\n/**\n * Checks if a string is a number.\n * @param {string} str\n * @returns {boolean}\n */\nconst isNumberOrZeroOrEmptyOrNullOrUndefinedOrNaNOrInfinity = (str) => {\n  return /^[0-9]+$|^0+$|^$|null|undefined|NaN|Infinity/.test(str);\n};\n\n/**\n * Checks if a string is a number.\n * @param {string} str\n * @returns {boolean}\n */\nconst isNumberOrZeroOrEmptyOrNullOrUndefinedOrNaNOrInfinityOrInfinity = (str) => {\n  return /^[0-9]+$|^0+$|^$|null|undefined|NaN|Infinity|Infinity/.test(str);\n};\n\n/**\n * Checks if a string is a number.\n * @param {string} str\n * @returns {boolean}\n */\nconst isNumberOrZeroOrEmptyOrNullOrUndefinedOrNaNOrInfinityOrInfinityOrNaN = (str) => {\n  return /^[0-9]+$|^0+$|^$|null|undefined|NaN|Infinity|Infinity|NaN/.test(str);\n};\n\n/**\n * Checks if a string is a number.\n * @param {string} str\n * @returns {boolean}\n */\nconst isNumberOrZeroOrEmptyOrNullOrUndefinedOrNaNOrInfinityOrInfinityOrNaNOrInfinity = (str) => {\n  return /^[0-9]+$|^0+$|^$|null|undefined|NaN|Infinity|Infinity|NaN|Infinity/.test(str);\n};\n\n/**\n * Checks if a string is a number.\n * @param {string} str\n * @returns {boolean}\n */\nconst isNumberOrZeroOrEmptyOrNullOrUndefinedOrNaNOrInfinityOrInfinityOrNaNOrInfinityOrNaNOrInfinity = (str) => {\n  return /^[0-9]+$|^0+$|^$|null|undefined|NaN|Infinity|Infinity|NaN|Infinity|NaN|Infinity/.test(str);\n};\n\n/**\n * Checks if a string is a number.\n * @param {string} str\n * @returns {boolean}\n */\nconst isNumberOrZeroOrEmptyOrNullOrUndefinedOrNaNOrInfinityOrInfinityOrNaNOrInfinityOrNaNOrInfinityOrNaNOrInfinityOrNaNOrInfinity = (str) => {\n  return /^[0-9]+$|^0+$|^$|null|undefined|NaN|Infinity|Infinity|NaN|Infinity|NaN|Infinity|NaN|Infinity|NaN|Infinity/.test(str);\n};\n\n/**\n * Checks if a string is a number.\n * @param {string} str\n * @returns {boolean}\n */\nconst isNumberOrZeroOrEmptyOrNullOrUndefinedOrNaNOrInfinityOrInfinityOrNaNOrInfinityOrNaNOrInfinityOrNaNOrInfinityOrNaNOrInfinityOrNaNOrInfinityOrNaNOrInfinity = (str) => {\n  return /^[0-9]+$|^0+$|^$|null|undefined|NaN|Infinity|Infinity|NaN|Infinity|NaN|Infinity|NaN|Infinity|NaN|Infinity|NaN|Infinity|NaN|Infinity|NaN|Infinity/.test(str);\n};\n\n/**\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately preceding it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately preceding it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let max = -1;\n  while (i < j) {\n    if (arr[i] <= arr[j]) {\n      max = arr[i];\n      i++;\n    } else {\n      max = arr[j];\n      j--;\n    }\n  }\n  return max;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is \n   the large of minus integers, and 'b' is the smallest \n   of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where 'a' is \n   the large of minus integers, and 'b' is the smallest \n   of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  let a = null;\n  let b = null;\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] < 0) {\n      a = lst[i];\n      i++;\n    } else if (lst[j] > 0) {\n      b = lst[j];\n      j--;\n    } else {\n      return (null, null);\n    }\n  }\n  return (a, b);\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or string defend \n   actual numbers, and render the larger variable in its grant variable type. \n   Return nothing if the values are adequate. \n   bill: If a real phone number is present as a chain, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ nothing \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that takes integers, floats, or string defend \n   actual numbers, and render the larger variable in its grant variable type. \n   Return nothing if the values are adequate. \n   bill: If a real phone number is present as a chain, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ nothing \n   * / \n const compareOne = (a, b) = > {\n  if (a === b) {\n   return a\n  } else {\n   return nothing\n  }\n }\n */\n\nconst compareOne = (a, b) => {\n  if (a === b) {\n    return a\n  } else {\n    return nothing\n  }\n}\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else {\n//     return nothing\n//   }\n// }\n\n// const compareOne = (a, b) => {\n//   if (a === b) {\n//     return a\n//   } else", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of precisely 4 plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the sum of precisely 4 plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exercise:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exercise:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial2 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial3 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial4 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial5 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial6 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial7 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial8 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial9 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial10 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial11 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial12 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial13 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial14 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial15 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial16 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial17 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial18 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial19 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial20 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial21 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial22 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial23 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial24 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial25 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial26 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial27 = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial28 = (n) => {\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSuffixes = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstrings = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsWithPrefixes = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsWithSuffixes = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsWithPrefixesAndSuffixes = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsWithPrefixesAndSuffixes = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsWithPrefixesAndSuffixesAndSuffixes = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsWithPrefixesAndSuffixesAndSuffixes = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsWithPrefixesAndSuffixesAndSuffixesAndSuffixes = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsWithPrefixesAndSuffixesAndSuffixesAndSuffixesAndSuffixes = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsWithPrefixesAndSuffixesAndSuffixesAndSuffixesAndSuffixesAndSuffixes = (string) => {\n  const result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return result;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsWithPrefixesAndSuffixesAndSuffixesAndS", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscore, \n   and if a string have more than 2 back-to-back spaces, \n   then substitute all consecutive spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it with underscore, \n   and if a string have more than 2 back-to-back spaces, \n   then substitute all consecutive spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nmodule.exports = fixSpaces;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and retort \n  ' Yes' if the the file's name be valid, and returns' No' differently. \n   A file's name is think to be valid if and merely if all the following condition \n   are touch: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the dot should not constitute empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*Create a function which takes a string representing a file's name, and retort \n 'Yes' if the the file's name be valid, and returns' No' differently. \n   A file's name is think to be valid if and merely if all the following condition \n   are touch: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the dot should not constitute empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = file_name.toLowerCase();\n  let file_name_check_length = file_name_check.length;\n  let file_name_check_letters = file_name_check.match(/[a-z]/g);\n  let file_name_check_dot = file_name_check.match(/\\./g);\n  let file_name_check_dot_length = file_name_check_dot.length;\n  let file_name_check_letters_length = file_name_check_letters.length;\n  let file_name_check_letters_dot = file_name_check_letters.match(/\\./g);\n  let file_name_check_letters_dot_length = file_name_check_letters_dot.length;\n  let file_name_check_letters_dot_dot = file_name_check_letters_dot.match(/\\.\\./g);\n  let file_name_check_letters_dot_dot_length = file_name_check_letters_dot_dot.length;\n  let file_name_check_letters_dot_dot_dot = file_name_check_letters_dot_dot.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_length = file_name_check_letters_dot_dot_dot.length;\n  let file_name_check_letters_dot_dot_dot_dot = file_name_check_letters_dot_dot_dot.match(/\\.\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_length = file_name_check_letters_dot_dot_dot_dot.length;\n  let file_name_check_letters_dot_dot_dot_dot_dot = file_name_check_letters_dot_dot_dot_dot.match(/\\.\\.\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_length = file_name_check_letters_dot_dot_dot_dot_dot.length;\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot = file_name_check_letters_dot_dot_dot_dot_dot.match(/\\.\\.\\.\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_length = file_name_check_letters_dot_dot_dot_dot_dot_dot.length;\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot = file_name_check_letters_dot_dot_dot_dot_dot_dot.match(/\\.\\.\\.\\.\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_letters_dot_dot_dot_dot_dot_dot.length;\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot = file_name_check_letters_dot_dot_dot_dot_dot_dot.match(/\\.\\.\\.\\.\\.\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_letters_dot_dot_dot_dot_dot_dot.length;\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot = file_name_check_letters_dot_dot_dot_dot_dot_dot.match(/\\.\\.\\.\\.\\.\\.\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_letters_dot_dot_dot_dot_dot_dot.length;\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot = file_name_check_letters_dot_dot_dot_dot_dot_dot.match(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_letters_dot_dot_dot_dot_dot_dot.length;\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot = file_name_check_letters_dot_dot_dot_dot_dot_dot.match(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_letters_dot_dot_dot_dot_dot_dot.length;\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot = file_name_check_letters_dot_dot_dot_dot_dot_dot.match(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n   the sentence contains some words separate by a distance, \n   and you get to return a chain that contains the words from the original sentence,\n   whose lengths constitute premier numbers, \n   the decree of the lyric in the new drawstring should cost the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n   the sentence contains some words separate by a distance, \n   and you get to return a chain that contains the words from the original sentence,\n   whose lengths constitute premier numbers, \n   the decree of the lyric in the new drawstring should cost the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split('');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (isPrime(word.length)) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression \n   x * n. The function retort on-key if x * n measure to a whole numeral and false \n   otherwise. Both x and n, are drawstring representation of a fraction, and induce the following format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fractions, and do not give birth zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*Your task is to implement a function that will simplify the expression \n   x * n. The function retort on-key if x * n measure to a whole numeral and false \n   otherwise. Both x and n, are drawstring representation of a fraction, and induce the following format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fractions, and do not give birth zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n   if (x * n measure to a whole numeral) {\n      return x * n measure to a whole numeral\n   } else {\n      return false\n   }\n }\n\n*/\n\nconst simplify = (x, n) => {\n  if (x * n measure to a whole numeral) {\n    return x * n measure to a whole numeral\n  } else {\n    return false\n  }\n}\n\nmodule.exports = simplify\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers \n   in ascend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function which sorts the given list of integers \n   in ascend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let result = [];\n  let numsLength = nums.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are great than 10 and both \n   beginning and last digits of a numeral are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are great than 10 and both \n   beginning and last digits of a numeral are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.reduce((acc, curr) => {\n    if (acc === undefined) {\n      return curr;\n    }\n    if (acc < curr) {\n      return curr;\n    }\n    return acc;\n  }, undefined);\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a affair that takes two planet name as strings planet1 and planet2.\n   The function should return a tuple check all planets whose scope are \n   located between the orbit of planet1 and the scope of planet2, classify by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a affair that takes two planet name as strings planet1 and planet2.\n   The function should return a tuple check all planets whose scope are \n   located between the orbit of planet1 and the scope of planet2, classify by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"];\n  const scope = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"];\n  const distance = [\n    [\n      [\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter, \n   erase the string that have odd length from it, \n   and return the leave list with a sorted order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may contain duplicate. \n   The holy order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two word experience the like duration, sort the list alphabetically. \n   The affair should return a list of chain in sorted club. \n   You may wear that all words will have the same distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a parameter, \n   erase the string that have odd length from it, \n   and return the leave list with a sorted order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may contain duplicate. \n   The holy order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two word experience the like duration, sort the list alphabetically. \n   The affair should return a list of chain in sorted club. \n   You may wear that all words will have the same distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let result = [];\n  let temp = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      temp = lst.slice(i, j);\n      result = result.concat(temp);\n      i = j;\n    }\n  }\n  return result;\n};\n\nconst sortedListSum2 = (lst) => {\n  let result = [];\n  let temp = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      temp = lst.slice(i, j);\n      result = result.concat(temp);\n      i = j;\n    }\n  }\n  return result;\n};\n\nconst sortedListSum3 = (lst) => {\n  let result = [];\n  let temp = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      temp = lst.slice(i, j);\n      result = result.concat(temp);\n      i = j;\n    }\n  }\n  return result;\n};\n\nconst sortedListSum4 = (lst) => {\n  let result = [];\n  let temp = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      temp = lst.slice(i, j);\n      result = result.concat(temp);\n      i = j;\n    }\n  }\n  return result;\n};\n\nconst sortedListSum5 = (lst) => {\n  let result = [];\n  let temp = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      temp = lst.slice(i, j);\n      result = result.concat(temp);\n      i = j;\n    }\n  }\n  return result;\n};\n\nconst sortedListSum6 = (lst) => {\n  let result = [];\n  let temp = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      temp = lst.slice(i, j);\n      result = result.concat(temp);\n      i = j;\n    }\n  }\n  return result;\n};\n\nconst sortedListSum7 = (lst) => {\n  let result = [];\n  let temp = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      temp = lst.slice(i, j);\n      result = result.concat(temp);\n      i = j;\n    }\n  }\n  return result;\n};\n\nconst sortedListSum8 = (lst) => {\n  let result = [];\n  let temp = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      temp = lst.slice(i, j);\n      result = result.concat(temp);\n      i = j;\n    }\n  }\n  return result;\n};\n\nconst sortedListSum9 = (lst) => {\n  let result = [];\n  let temp = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      temp = lst.slice(i, j);\n      result = result.concat(temp);\n      i = j;\n    }\n  }\n  return result;\n};\n\nconst sortedListSum10 = (lst) => {\n  let result = [];\n  let temp = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str +='' + i\n  }\n  return str\n}\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str +='' + i\n  }\n  return str\n}\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str +='' + i\n  }\n  return str\n}\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str +='' + i\n  }\n  return str\n}\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str +='' + i\n  }\n  return str\n}\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str +='' + i\n  }\n  return str\n}\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str +='' + i\n  }\n  return str\n}\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str +='' + i\n  }\n  return str\n}\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str +='' + i\n  }\n  return str\n}\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str +='' + i\n  }\n  return str\n}\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str +='' + i\n  }\n  return str\n}\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str +='' + i\n  }\n  return str\n}\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str +='' + i\n  }\n  return str\n}\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str +='' + i\n  }\n  return str\n}\n\n/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst test = (n, x, y) => {\n  console.log(xOrY(n, x, y));\n};\n\ntest(7, 34, 12);\ntest(15, 8, 5);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n    if (lst.length == 0) {\n        return 0;\n    }\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n*/\n\n// Your code here\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n// Refactored Solution\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long - awaited \n   consequence is ultimately known. The spirit and idea you induce at that moment are \n   definitely deserving noting down and comparing. \n   Your undertaking is to determine if a person correctly estimate the resultant role of a number of match. \n   You are given two array of score and guess of adequate length, where each index shows a peer. \n   Return an array of the like duration denoting how far off each guess was. If they have guess correctly, \n   the value is 0, and if not, the value is the absolute deviation between the guess and the grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I think we all remember that feeling when the result of some long - awaited \n   consequence is ultimately known. The spirit and idea you induce at that moment are \n   definitely deserving noting down and comparing. \n   Your undertaking is to determine if a person correctly estimate the resultant role of a number of match. \n   You are given two array of score and guess of adequate length, where each index shows a peer. \n   Return an array of the like duration denoting how far off each guess was. If they have guess correctly, \n   the value is 0, and if not, the value is the absolute deviation between the guess and the grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < game.length && j < guess.length) {\n    if (game[i] === guess[j]) {\n      result[i] = result[i] || 0;\n      result[i] += 1;\n      i++;\n      j++;\n    } else if (game[i] < guess[j]) {\n      result[i] = result[i] || 0;\n      result[i] += 1;\n      i++;\n    } else {\n      result[j] = result[j] || 0;\n      result[j] += 1;\n      j++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be used to load additional class to the class. The \n   strength of the elongation is as follows: Let CAP equal the numeral of the capital \n   letters in the extension's name, and permit SM be the phone number of small letter letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find oneself the hard elongation and return a chain in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be used to load additional class to the class. The \n   strength of the elongation is as follows: Let CAP equal the numeral of the capital \n   letters in the extension's name, and permit SM be the phone number of small letter letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find oneself the hard elongation and return a chain in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_name = ''\n  let extension_strength = 0\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i]\n    let extension_length = extension.length\n    let extension_name_length = extension.length\n    let extension_name_index = extension.indexOf(extension_name)\n    if (extension_name_index === -1) {\n      extension_name_index = extension.indexOf(extension_name.toUpperCase())\n    }\n    if (extension_name_index!== -1) {\n      extension_name = extension.substring(extension_name_index + 1, extension_name_length)\n      extension_strength = extension.charCodeAt(extension_name_index) - extension.charCodeAt(extension_name_length - 1)\n    }\n  }\n  return class_name + '.' + extension_name\n}\n\nmodule.exports = strongestExtension\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second bible or any of its rotation is a substring in the inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > dependable \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > assumed \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*You are given 2 words. You need to return true if the second bible or any of its rotation is a substring in the inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > dependable \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > assumed \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let h", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and leftover finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and leftover finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0\n  let leftOver = 0\n  if (num % 2 === 0) {\n    even = 1\n  } else {\n    even = 0\n  }\n  if (num > 0) {\n    leftOver = num % 2\n  }\n  return {even, leftOver}\n}\n\nmodule.exports = evenOddCount\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a drawstring, \n   and return it in small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   exemplar:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a drawstring, \n   and return it in small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   exemplar:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = ''\n  let num = number\n  let i = 0\n  while (num > 0) {\n    let digit = num % 10\n    result += (digit < 4)? 'iv' : (digit < 9)? 'ix' : 'x'\n    num = num / 10\n    i++\n  }\n  return result.toLowerCase()\n}\n\nmodule.exports = intToMiniRoman\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const sides = [a, b, c];\n  const sidesSum = sides.reduce((acc, curr) => acc + curr, 0);\n  const sidesSumSquared = sides.reduce((acc, curr) => acc + curr * curr, 0);\n  const sidesSumSquaredDividedByThree = sidesSumSquared / 3;\n  const sidesSumSquaredDividedByTwo = sidesSumSquared / 2;\n  const sidesSumSquaredDividedByFour = sidesSumSquared / 4;\n  const sidesSumSquaredDividedBySix = sidesSumSquared / 6;\n  const sidesSumSquaredDividedByEight = sidesSumSquared / 8;\n  const sidesSumSquaredDividedByTen = sidesSumSquared / 10;\n  const sidesSumSquaredDividedByTwelve = sidesSumSquared / 12;\n  const sidesSumSquaredDividedByTwenty = sidesSumSquared / 20;\n  const sidesSumSquaredDividedByThirty = sidesSumSquared / 30;\n  const sidesSumSquaredDividedBySixty = sidesSumSquared / 60;\n  const sidesSumSquaredDividedByOneHundred = sidesSumSquared / 100;\n  const sidesSumSquaredDividedByTwoHundred = sidesSumSquared / 200;\n  const sidesSumSquaredDividedByFourHundred = sidesSumSquared / 400;\n  const sidesSumSquaredDividedBySixHundred = sidesSumSquared / 600;\n  const sidesSumSquaredDividedByEightHundred = sidesSumSquared / 800;\n  const sidesSumSquaredDividedByTenHundred = sidesSumSquared / 1000;\n  const sidesSumSquaredDividedByTwelveHundred = sidesSumSquared / 1200;\n  const sidesSumSquaredDividedByTwentyHundred = sidesSumSquared / 2000;\n  const sidesSumSquaredDividedByThirtyHundred = sidesSumSquared / 3000;\n  const sidesSumSquaredDividedBySixtyHundred = sidesSumSquared / 6000;\n  const sidesSumSquaredDividedByOneHundredHundred = sidesSumSquared / 100000;\n  const sidesSumSquaredDividedByTwoHundredHundred = sidesSumSquared / 200000;\n  const sidesSumSquaredDividedByFourHundredHundred = sidesSumSquared / 400000;\n  const sidesSumSquaredDividedBySixHundredHundred = sidesSumSquared / 600000;\n  const sidesSumSquaredDividedByEightHundredHundred = sidesSumSquared / 800000;\n  const sidesSumSquaredDividedByTenHundredHundred = sidesSumSquared / 1000000;\n  const sidesSumSquaredDividedByTwelveHundredHundred = sidesSumSquared / 1200000;\n  const sidesSumSquaredDividedByTwentyHundredHundred = sidesSumSquared / 2000000;\n  const sidesSumSquaredDividedByThirtyHundredHundred = sidesSumSquared / 3000000;\n  const sidesSumSquaredDividedBySixtyHundredHundred = sidesSumSquared / 6000000;\n  const sidesSumSquaredDividedByOneHundredHundredHundred = sidesSumSquared / 10000000;\n  const sidesSumSquaredDividedByTwoHundredHundredHundred = sidesSumSquared / 20000000;\n  const sidesSumSquaredDividedByFourHundredHundredHundred = sidesSumSquared / 40000000;\n  const sidesSumSquaredDividedBySixHundredHundredHundred = sidesSumSquared / 60000000;\n  const sidesSumSquaredDividedByEightHundredHundredHundred = sidesSumSquared / 8000000;\n  const sidesSumSquaredDividedByTenHundredHundredHundred = sidesSumSquared / 100000000;\n  const sidesSumSquaredDividedByTwelveHundredHundredHundred = sidesSumSquared / 120000000;\n  const sidesSumSquaredDividedByTwentyHundredHundredHundred = sidesSumSquared / 200000000;\n  const sidesSumSquaredDividedByThirtyHundredHundredHundred = sidesSumSquared / 300000000;\n  const sidesSumSquaredDividedBySixtyHundredHundredHundred = sidesSumSquared / 600000000;\n  const sidesSumSquaredDividedByOneHundredHundredHundredHundred = sidesSumSquared / 100000000000;\n  const sidesSumSquaredDividedByTwoHundredHundredHundredHundred = sidesSumSquared / 200000000000;\n  const sidesSumSquaredDividedByFourHundredHundredHundredHundred = sidesSumSquared / 40000000000;\n  const sidesSumSquaredDividedBySixHundredHundredHundredHundred = sidesSumSquared / 60000000000;\n  const sidesSumSquaredDividedByEightHundredHundredHundredHundred = sidesSumSquared / 80000000000;\n  const sidesSumSquaredDividedByTenHundredHundredHundredHundred = sidesSumSquared / 1000000000000;\n  const sidesSumSquaredDividedByTwelveHundredHundredHundredHundred = sidesSumSquared / 120000000000;\n  const sidesSumSquaredDividedByTwentyHundredHundredHundredHundred = sidesSumSquared / 2000000000000;\n  const sidesSumSquaredDividedByThirtyHundredHundredHundredHundred = sidesSumSquared / 3000000000000;\n  const sidesSumSquaredDividedBySixtyHundredHundredHundredHundred = sidesSumSquared / 6000000000000;\n  const sidesSumSquaredDividedByOneHundredHundredHundredHundredHundred = sidesSumSquared / 10000000000000;\n  const sidesSumSquaredDividedByTwoHundredHundredHundredHundredHundred = sidesSumSquared / 20000000000000;\n  const sidesSumSquaredDividedByFourHundredHundredHundredHundredHundred = sidesSumSquared / 40000000000000;\n  const sidesSumSquaredDividedBySixHundredHundredHundredHundredHundred = sidesSumSquared / 60000000000000;\n  const sidesSumSquaredDividedByEightHundredHundredHundredHundredHundred = sidesSumSquared / 8", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings. \n   The list contains unlike words. Return the word with maximal act \n   of unique character. If multiple string have maximum numeral of unique \n   character, return the one which come first in lexicographic holy order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*Write a function that accepts a list of strings. \n   The list contains unlike words. Return the word with maximal act \n   of unique character. If multiple string have maximum numeral of unique \n   character, return the one which come first in lexicographic holy order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n    let max = words[0];\n    let maxIndex = 0;\n    for (let i = 1; i < words.length; i++) {\n        if (words[i].length > max.length) {\n            max = words[i];\n            maxIndex = i;\n        }\n        else if (words[i].length === max.length) {\n            if (words[i].localeCompare(max) > 0) {\n                max = words[i];\n                maxIndex = i;\n            }\n        }\n    }\n    return max;\n}\n*/\n\nconst findMax = (words) => {\n    let max = words[0];\n    let maxIndex = 0;\n    for (let i = 1; i < words.length; i++) {\n        if (words[i].length > max.length) {\n            max = words[i];\n            maxIndex = i;\n        }\n        else if (words[i].length === max.length) {\n            if (words[i].localeCompare(max) > 0) {\n                max = words[i];\n                maxIndex = i;\n            }\n        }\n    }\n    return max;\n}\n\nmodule.exports = findMax;<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                   the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                   the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let [total, carrot] = [0, 0];\n  while (need > 0) {\n    if (need < remaining) {\n      total += need;\n      remaining -= need;\n      need = 0;\n    } else {\n      total += remaining;\n      need -= remaining;\n      remaining = 0;\n    }\n    carrot++;\n  }\n  return [total, carrot];\n};\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char = '';\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char!== char.toUpperCase() && char!== char.toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n   the second list embody a list of integers. practice the two given list to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n   the second list embody a list of integers. practice the two given list to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  while (i < operator.length && j < operand.length) {\n    if (operator[i] === '+') {\n      result += operand[j];\n    } else if (operator[i] === '-') {\n      result -= operand[j];\n    } else if (operator[i] === '*') {\n      result *= operand[j];\n    } else if (operator[i] === '/') {\n      result /= operand[j];\n    } else if (operator[i] === '//') {\n      result = result / operand[j];\n    } else if (operator[i] === '*') {\n      result = result * operand[j];\n    }\n    i++;\n    j++;\n  }\n  return result;\n};\n\nconst test = [\n  ['+', '*', '-'],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3, 4, 5],\n  [2, 3", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.split(\"\").reverse().join(\"\");\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      result += str[i].toUpperCase();\n    } else {\n      result += str[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return '';\n  }\n\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascend orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascend orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  while (a <= b) {\n    result.push(a % 10);\n    a = Math.floor(a / 10);\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical eminence in a especial american standard code for information interchange format. \n   Your undertaking is to parse this string and return list of integer corresponding to how many beats does each \n   not last. \n\n   Here is a caption: \n  ' o' - hale bill, survive four beats \n  ' o|' - half note, lasts two beat \n  ' .|' - quater bill, lasts one beatnik\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* Input to this function is a string representing musical eminence in a especial american standard code for information interchange format. \n   Your undertaking is to parse this string and return list of integer corresponding to how many beats does each \n   not last. \n\n   Here is a caption: \n 'o' - hale bill, survive four beats \n 'o|' - half note, lasts two beat \n  '.|' - quater bill, lasts one beatnik\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = [];\n  let music_string_array = music_string.split('|');\n  for (let i = 0; i < music_string_array.length; i++) {\n    let music_string_array_item = music_string_array[i].split(' ');\n    let music_string_array_item_length = music_string_array_item.length;\n    let music_string_array_item_index = 0;\n    let music_string_array_item_value = 0;\n    while (music_string_array_item_index < music_string_array_item_length) {\n      if (music_string_array_item_index == 0) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 1) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 2) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 3) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 4) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 5) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 6) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 7) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 8) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 9) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 10) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 11) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 12) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 13) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 14) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 15) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 16) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 17) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      } else if (music_string_array_item_index == 18) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index]);\n        music_string_array_item_index++;\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substr(i, substring.length) === substring) {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\n/*\n  Find the longest substring in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('a', 'a')\n  'a'\n  >>> longestSubstring('abc', 'a')\n  'abc'\n  >>> longestSubstring('abc', 'b')\n  'abc'\n  >>> longestSubstring('abc', 'c')\n  'abc'\n  >>> longestSubstring('abc', 'd')\n  ''\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0\n  let i = 0\n  while (i < string.length) {\n    let currentLength = howManyTimes(string, substring)\n    if (currentLength > maxLength) {\n      maxLength = currentLength\n    }\n    i += 1\n  }\n  return string.substr(0, maxLength)\n}\n\n/*\n  Find the shortest substring in the given string.\n  >>> shortestSubstring('', 'a')\n  ''\n  >>> shortestSubstring('a', 'a')\n  'a'\n  >>> shortestSubstring('abc', 'a')\n  'abc'\n  >>> shortestSubstring('abc', 'b')\n  'abc'\n  >>> shortestSubstring('abc', 'c')\n  'abc'\n  >>> shortestSubstring('abc', 'd')\n  ''\n  */\nconst shortestSubstring = (string, substring) => {\n  let minLength = Infinity\n  let i = 0\n  while (i < string.length) {\n    let currentLength = howManyTimes(string, substring)\n    if (currentLength < minLength) {\n      minLength = currentLength\n    }\n    i += 1\n  }\n  return string.substr(0, minLength)\n}\n\n/*\n  Find the longest substring in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('a', 'a')\n  'a'\n  >>> longestSubstring('abc', 'a')\n  'abc'\n  >>> longestSubstring('abc', 'b')\n  'abc'\n  >>> longestSubstring('abc', 'c')\n  'abc'\n  >>> longestSubstring('abc', 'd')\n  ''\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0\n  let i = 0\n  while (i < string.length) {\n    let currentLength = howManyTimes(string, substring)\n    if (currentLength > maxLength) {\n      maxLength = currentLength\n    }\n    i += 1\n  }\n  return string.substr(0, maxLength)\n}\n\n/*\n  Find the shortest substring in the given string.\n  >>> shortestSubstring('', 'a')\n  ''\n  >>> shortestSubstring('a', 'a')\n  'a'\n  >>> shortestSubstring('abc', 'a')\n  'abc'\n  >>> shortestSubstring('abc', 'b')\n  'abc'\n  >>> shortestSubstring('abc', 'c')\n  'abc'\n  >>> shortestSubstring('abc', 'd')\n  ''\n  */\nconst shortestSubstring = (string, substring) => {\n  let minLength = Infinity\n  let i = 0\n  while (i < string.length) {\n    let currentLength = howManyTimes(string, substring)\n    if (currentLength < minLength) {\n      minLength = currentLength\n    }\n    i += 1\n  }\n  return string.substr(0, minLength)\n}\n\n/*\n  Find the longest substring in the given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('a', 'a')\n  'a'\n  >>> longestSubstring('abc', 'a')\n  'abc'\n  >>> longestSubstring('abc', 'b')\n  'abc'\n  >>> longestSubstring('abc', 'c')\n  'abc'\n  >>> longestSubstring('abc', 'd')\n  ''\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0\n  let i = 0\n  while (i < string.length) {\n    let currentLength = howManyTimes(string, substring)\n    if (currentLength > maxLength) {\n      maxLength = currentLength\n    }\n    i += 1\n  }\n  return string.substr(0, maxLength)\n}\n\n/*\n  Find the shortest substring in the given string.\n  >>> shortestSubstring('', 'a')\n  ''\n  >>> shortestSubstring('a', 'a')\n  'a'\n  >>> shortestSubstring('abc', 'a')\n  'abc'\n  >>> shortestSubstring('abc', 'b')\n  'abc'\n  >>> shortestSubstring('abc', 'c')\n  'abc'\n  >>> shortestSubstring('abc', 'd')\n  ''\n  */\nconst shortestSubstring = (string, substring) => {\n  let minLength = Infinity\n  let i = 0\n  while (i < string.length) {\n    let currentLength = howManyTimes(string, substring)\n    if (currentLength < minLength) {\n      minLength = currentLength\n    }\n    i += 1\n  }\n  return string.substr(0, minLength)\n}\n\nmodule.exports = {\n  howManyTimes,\n  longestSubstring,\n  shortestSubstring,\n  longestSubstring,\n  shortestSubstring\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers2 = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers3 = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers4 = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers5 = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers6 = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers7 = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers8 = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers9 = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers10 = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    if (a < b) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integerPart, fractionPart] = number.toString().split('.');\n  return integerPart + fractionPart;\n};\n\nmodule.exports = truncateNumber;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that be the airless to each \n   early and return them in order (humble number, big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select and return two that be the airless to each \n   early and return them in order (humble number, big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[numbers.length - 1];\n  const mid = (min + max) / 2;\n  const mid2 = (min + max) / 2;\n  const mid3 = (min + max) / 2;\n  const mid4 = (min + max) / 2;\n  const mid5 = (min + max) / 2;\n  const mid6 = (min + max) / 2;\n  const mid7 = (min + max) / 2;\n  const mid8 = (min + max) / 2;\n  const mid9 = (min + max) / 2;\n  const mid10 = (min + max) / 2;\n  const mid11 = (min + max) / 2;\n  const mid12 = (min + max) / 2;\n  const mid13 = (min + max) / 2;\n  const mid14 = (min + max) / 2;\n  const mid15 = (min + max) / 2;\n  const mid16 = (min + max) / 2;\n  const mid17 = (min + max) / 2;\n  const mid18 = (min + max) / 2;\n  const mid19 = (min + max) / 2;\n  const mid20 = (min + max) / 2;\n  const mid21 = (min + max) / 2;\n  const mid22 = (min + max) / 2;\n  const mid23 = (min + max) / 2;\n  const mid24 = (min + max) / 2;\n  const mid25 = (min + max) / 2;\n  const mid26 = (min + max) / 2;\n  const mid27 = (min + max) / 2;\n  const mid28 = (min + max) / 2;\n  const mid29 = (min + max) / 2;\n  const mid30 = (min + max) / 2;\n  const mid31 = (min + max) / 2;\n  const mid32 = (min + max) / 2;\n  const mid33 = (min + max) / 2;\n  const mid34 = (min + max) / 2;\n  const mid35 = (min + max) / 2;\n  const mid36 = (min + max) / 2;\n  const mid37 = (min + max) / 2;\n  const mid38 = (min + max) / 2;\n  const mid39 = (min + max) / 2;\n  const mid40 = (min + max) / 2;\n  const mid41 = (min + max) / 2;\n  const mid42 = (min + max) / 2;\n  const mid43 = (min + max) / 2;\n  const mid44 = (min + max) / 2;\n  const mid45 = (min + max) / 2;\n  const mid46 = (min + max) / 2;\n  const mid47 = (min + max) / 2;\n  const mid48 = (min + max) / 2;\n  const mid49 = (min + max) / 2;\n  const mid50 = (min + max) / 2;\n  const mid51 = (min + max) / 2;\n  const mid52 = (min + max) / 2;\n  const mid53 = (min + max) / 2;\n  const mid54 = (min + max) / 2;\n  const mid55 = (min + max) / 2;\n  const mid56 = (min + max) / 2;\n  const mid57 = (min + max) / 2;\n  const mid58 = (min + max) / 2;\n  const mid59 = (min + max) / 2;\n  const mid60 = (min + max) / 2;\n  const mid61 = (min + max) / 2;\n  const mid62 = (min + max) / 2;\n  const mid63 = (min + max) / 2;\n  const mid64 = (min + max) / 2;\n  const mid65 = (min + max) / 2;\n  const mid66 = (min + max) / 2;\n  const mid67 = (min + max) / 2;\n  const mid68 = (min + max) / 2;\n  const mid69 = (min + max) / 2;\n  const mid70 = (min + max) / 2;\n  const mid71 = (min + max) / 2;\n  const mid72 = (min + max) / 2;\n  const mid73 = (min + max) / 2;\n  const mid74 = (min + max) / 2;\n  const mid75 = (min + max) / 2;\n  const mid76 = (min + max) / 2;\n  const mid77 = (min + max) / 2;\n  const mid78 = (min + max) / 2;\n  const mid79 = (min + max) / 2;\n  const mid80 = (min + max) / 2;\n  const mid81 = (min + max) / 2;\n  const mid82 = (min + max) / 2;\n  const mid83 = (min + max) / 2;\n  const mid84 = (min + max) / 2;\n  const mid85 = (min + max) / 2;\n  const mid86 = (min + max) / 2;\n  const mid87 = (min + max) / 2;\n  const mid88 = (min + max) / 2;\n  const mid89 = (min + max) / 2;\n  const mid90 = (min + max) / 2;\n  const mid91 = (min + max) / 2;\n  const mid92 = (min + max) / 2;\n  const mid93 = (min + max) / 2;\n  const mid94 = (min + max) / 2;\n  const mid95 = (min + max) / 2;\n  const mid96 = (min + max) / 2;\n  const mid97 = (min + max) / 2;\n  const mid98 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = numbers.reduce((max, number) => Math.max(max, number), 0);\n  const min = numbers.reduce((min, number) => Math.min(min, number), max);\n  const scale = (max - min) / (max + min);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Given list of numbers, apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const max = numbers.reduce((max, number) => Math.max(max, number), 0);\n  const min = numbers.reduce((min, number) => Math.min(min, number), max);\n  const scale = (max - min) / (max + min);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Given list of numbers, apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const max = numbers.reduce((max, number) => Math.max(max, number), 0);\n  const min = numbers.reduce((min, number) => Math.min(min, number), max);\n  const scale = (max - min) / (max + min);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Given list of numbers, apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const max = numbers.reduce((max, number) => Math.max(max, number), 0);\n  const min = numbers.reduce((min, number) => Math.min(min, number), max);\n  const scale = (max - min) / (max + min);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Given list of numbers, apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const max = numbers.reduce((max, number) => Math.max(max, number), 0);\n  const min = numbers.reduce((min, number) => Math.min(min, number), max);\n  const scale = (max - min) / (max + min);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Given list of numbers, apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const max = numbers.reduce((max, number) => Math.max(max, number), 0);\n  const min = numbers.reduce((min, number) => Math.min(min, number), max);\n  const scale = (max - min) / (max + min);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Given list of numbers, apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const max = numbers.reduce((max, number) => Math.max(max, number), 0);\n  const min = numbers.reduce((min, number) => Math.min(min, number), max);\n  const scale = (max - min) / (max + min);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Given list of numbers, apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit8 = (numbers) => {\n  const max = numbers.reduce((max, number) => Math.max(max, number), 0);\n  const min = numbers.reduce((min, number) => Math.min(min, number), max);\n  const scale = (max - min) / (max + min);\n  return numbers.map((number) => number * scale);\n};\n\n/**\n * Given list of numbers, apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for numbers\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return true if given string is empty\n  * @param {string} string\n  * @returns {boolean}\n  */\nconst isEmpty = (string) => {\n  return strlen(string) === 0;\n};\n\nmodule.exports = {\n  isEmpty,\n  strlen,\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* For a given number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  let largestDivisor = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      if (i > largestDivisor) {\n        largestDivisor = i;\n        largest = i;\n      }\n      i += 1;\n    }\n    else {\n      i += 1;\n    }\n  }\n  return largest;\n};\n\nmodule.exports = largestDivisor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nmodule.exports = {\n  factorize\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates2 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates3 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates4 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates5 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates6 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates7 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates8 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates9 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates10 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates11 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates12 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": false, "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  });\n};\n\n/**\n  For a given string, return a string with all lowercase characters replaced with\n  uppercase ones.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  For a given string, return a string with all uppercase characters replaced with\n  lowercase ones.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return a string with all uppercase characters replaced with\n  lowercase ones.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toTitleCase = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all lowercase characters replaced with\n  uppercase ones.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toTitleCaseWithSpace = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all lowercase characters replaced with\n  uppercase ones.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toCamelCase = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all lowercase characters replaced with\n  uppercase ones.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toCamelCaseWithSpace = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all lowercase characters replaced with\n  uppercase ones.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSnakeCase = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all lowercase characters replaced with\n  uppercase ones.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSnakeCaseWithSpace = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all lowercase characters replaced with\n  uppercase ones.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toKebabCase = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all lowercase characters replaced with\n  uppercase ones.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toKebabCaseWithSpace = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all lowercase characters replaced with\n  uppercase ones.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toDashCase = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all lowercase characters replaced with\n  uppercase ones.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toDashCaseWithSpace = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all lowercase characters replaced with\n  uppercase ones.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toCamelCaseWithUnderscores = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all lowercase characters replaced with\n  uppercase ones.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSnakeCaseWithUndersc", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Convert a string to a camel-case string\n  >>> camelCase('hello')\n  'hello'\n  >>> camelCase('hello_world')\n  'helloWorld'\n  */\nconst camelCase = (str) => {\n  return str.replace(/^[a-z]+(?=[A-Z])/g, function (match) {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  Convert a string to a snake-case string\n  >>> snakeCase('hello')\n  'hello'\n  >>> snakeCase('hello_world')\n  'hello_world'\n  */\nconst snakeCase = (str) => {\n  return str.replace(/[A-Z]/g, (match) => {\n    return '_' + match.toLowerCase();\n  });\n};\n\n/*\n  Convert a string to a dash-case string\n  >>> dashCase('hello')\n  'hello'\n  >>> dashCase('hello_world')\n  'hello-world'\n  */\nconst dashCase = (str) => {\n  return str.replace(/[A-Z]/g, (match) => {\n    return '-' + match.toLowerCase();\n  });\n};\n\n/*\n  Convert a string to a dash-case string\n  >>> dashCase('hello')\n  'hello'\n  >>> dashCase('hello_world')\n  'hello-world'\n  */\nconst dashCase2 = (str) => {\n  return str.replace(/[A-Z]/g, (match) => {\n    return '-' + match.toLowerCase();\n  });\n};\n\n/*\n  Convert a string to a dash-case string\n  >>> dashCase('hello')\n  'hello'\n  >>> dashCase('hello_world')\n  'hello-world'\n  */\nconst dashCase3 = (str) => {\n  return str.replace(/[A-Z]/g, (match) => {\n    return '-' + match.toLowerCase();\n  });\n};\n\n/*\n  Convert a string to a dash-case string\n  >>> dashCase('hello')\n  'hello'\n  >>> dashCase('hello_world')\n  'hello-world'\n  */\nconst dashCase4 = (str) => {\n  return str.replace(/[A-Z]/g, (match) => {\n    return '-' + match.toLowerCase();\n  });\n};\n\n/*\n  Convert a string to a dash-case string\n  >>> dashCase('hello')\n  'hello'\n  >>> dashCase('hello_world')\n  'hello-world'\n  */\nconst dashCase5 = (str) => {\n  return str.replace(/[A-Z]/g, (match) => {\n    return '-' + match.toLowerCase();\n  });\n};\n\n/*\n  Convert a string to a dash-case string\n  >>> dashCase('hello')\n  'hello'\n  >>> dashCase('hello_world')\n  'hello-world'\n  */\nconst dashCase6 = (str) => {\n  return str.replace(/[A-Z]/g, (match) => {\n    return '-' + match.toLowerCase();\n  });\n};\n\n/*\n  Convert a string to a dash-case string\n  >>> dashCase('hello')\n  'hello'\n  >>> dashCase('hello_world')\n  'hello-world'\n  */\nconst dashCase7 = (str) => {\n  return str.replace(/[A-Z]/g, (match) => {\n    return '-' + match.toLowerCase();\n  });\n};\n\n/*\n  Convert a string to a dash-case string\n  >>> dashCase('hello')\n  'hello'\n  >>> dashCase('hello_world')\n  'hello-world'\n  */\nconst dashCase8 = (str) => {\n  return str.replace(/[A-Z]/g, (match) => {\n    return '-' + match.toLowerCase();\n  });\n};\n\n/*\n  Convert a string to a dash-case string\n  >>> dashCase('hello')\n  'hello'\n  >>> dashCase('hello_world')\n  'hello-world'\n  */\nconst dashCase9 = (str) => {\n  return str.replace(/[A-Z]/g, (match) => {\n    return '-' + match.toLowerCase();\n  });\n};\n\n/*\n  Convert a string to a dash-case string\n  >>> dashCase('hello')\n  'hello'\n  >>> dashCase('hello_world')\n  'hello-world'\n  */\nconst dashCase10 = (str) => {\n  return str.replace(/[A-Z]/g, (match) => {\n    return '-' + match.toLowerCase();\n  });\n};\n\n/*\n  Convert a string to a dash-case string\n  >>> dashCase('hello')\n  'hello'\n  >>> dashCase('hello_world')\n  'hello-world'\n  */\nconst dashCase11 = (str) => {\n  return str.replace(/[A-Z]/g, (match) => {\n    return '-' + match.toLowerCase();\n  });\n};\n\n/*\n  Convert a string to a dash-case string\n  >>> dashCase('hello')\n  'hello'\n  >>> dashCase('hello_world')\n  'hello-world'\n  */\nconst dashCase12 = (str) => {\n  return str.replace(/[A-Z]/g, (match) => {\n    return '-' + match.toLowerCase();\n  });\n};\n\n/*\n  Convert a string to a dash-case string\n  >>> dashCase('hello')\n  'hello'\n  >>> dashCase('hello_world')\n  'hello-world'\n  */\nconst dashCase13 = (str) => {\n  return str.replace(/[A-Z]/g, (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": false, "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (!strings ||!prefix) {\n    return [];\n  }\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that end with a given suffix.\n  * @param {Array} strings\n  * @param {String} suffix\n  * @returns {Array}\n  */\nconst filterBySuffix = (strings, suffix) => {\n  if (!strings ||!suffix) {\n    return [];\n  }\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring.\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring.\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterByRegex = (strings, regex) => {\n  if (!strings ||!regex) {\n    return [];\n  }\n  return strings.filter(s => s.match(regex));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring.\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterByRegexWithFlags = (strings, regex, flags) => {\n  if (!strings ||!regex) {\n    return [];\n  }\n  return strings.filter(s => s.match(regex, flags));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring.\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterByRegexWithFlagsAndModifiers = (strings, regex, flags, modifiers) => {\n  if (!strings ||!regex) {\n    return [];\n  }\n  return strings.filter(s => s.match(regex, flags, modifiers));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring.\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterByRegexWithFlagsAndModifiersAndFlags = (strings, regex, flags, modifiers, flags2) => {\n  if (!strings ||!regex) {\n    return [];\n  }\n  return strings.filter(s => s.match(regex, flags, modifiers, flags2));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring.\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterByRegexWithFlagsAndModifiersAndFlagsAndModifiers = (\n  strings,\n  regex,\n  flags,\n  modifiers,\n  flags2,\n  modifiers2\n) => {\n  if (!strings ||!regex) {\n    return [];\n  }\n  return strings.filter(s => s.match(regex, flags, modifiers, flags2, modifiers2));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring.\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterByRegexWithFlagsAndModifiersAndFlagsAndModifiersAndFlags = (\n  strings,\n  regex,\n  flags,\n  modifiers,\n  flags2,\n  modifiers2,\n  flags3\n) => {\n  if (!strings ||!regex) {\n    return [];\n  }\n  return strings.filter(s => s.match(regex, flags, modifiers, flags2, modifiers2, flags3));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring.\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterByRegexWithFlagsAndModifiersAndFlagsAndModifiersAndFlagsAndModifiers = (\n  strings,\n  regex,\n  flags,\n  modifiers,\n  flags2,\n  modifiers2,\n  flags3,\n  modifiers3\n) => {\n  if (!strings ||!regex) {\n    return [];\n  }\n  return strings.filter(s => s.match(regex, flags, modifiers, flags2, modifiers2, flags3, modifiers3));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring.\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterByRegexWithFlagsAndModifiersAndFlagsAndModifiersAndFlagsAndModifiersAndFlags = (\n  strings,\n  regex,\n  flags,\n  modifiers,\n  flags2,\n  modifiers2,\n  flags3,\n  modifiers3,\n  flags4\n) => {\n  if (!strings ||!regex) {\n    return [];\n  }\n  return strings.filter(s => s.match(regex, flags, modifiers, flags2, modifiers2, flags3, modifiers3, flags4));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring.\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterByRegexWithFlagsAndModifiersAndFlagsAndModifiersAndFlagsAndModifiersAndFlagsAndModifiers = (\n  strings,\n  regex,\n  flags,\n  mod", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum < 0\n}\n\n/*\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst aboveZero = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum > 0\n}\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance2 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance3 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance4 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance5 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance6 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance7 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance8 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance9 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance10 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance11 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance12 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance13 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance14 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/**\n  Returns a list of numbers that are negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter((e) => e < 0);\n};\n\n/**\n  Returns a list of numbers that are zero in the list.\n  >>> getZero([-1, 2, -4, 5, 6])\n  [0, 0, 0]\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  */\nconst getZero = (l) => {\n  return l.filter((e) => e === 0);\n};\n\n/**\n  Returns a list of numbers that are greater than zero in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getPositiveOrZero = (l) => {\n  return getPositive(l).concat(getZero(l));\n};\n\n/**\n  Returns a list of numbers that are less than zero in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegativeOrZero = (l) => {\n  return getNegative(l).concat(getZero(l));\n};\n\n/**\n  Returns a list of numbers that are greater than zero in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getPositiveOrZero = (l) => {\n  return getPositive(l).concat(getZero(l));\n};\n\n/**\n  Returns a list of numbers that are less than zero in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegativeOrZero = (l) => {\n  return getNegative(l).concat(getZero(l));\n};\n\n/**\n  Returns a list of numbers that are greater than zero in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getPositiveOrZero = (l) => {\n  return getPositive(l).concat(getZero(l));\n};\n\n/**\n  Returns a list of numbers that are less than zero in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegativeOrZero = (l) => {\n  return getNegative(l).concat(getZero(l));\n};\n\n/**\n  Returns a list of numbers that are greater than zero in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getPositiveOrZero = (l) => {\n  return getPositive(l).concat(getZero(l));\n};\n\n/**\n  Returns a list of numbers that are less than zero in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegativeOrZero = (l) => {\n  return getNegative(l).concat(getZero(l));\n};\n\n/**\n  Returns a list of numbers that are greater than zero in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getPositiveOrZero = (l) => {\n  return get", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is choice, and fake differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*Return true if a given number is choice, and fake differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*Return the smallest prime number greater than n.\n  >>> getNextPrime(1)\n  2\n  >>> getNextPrime(2)\n  3\n  >>> getNextPrime(3)\n  5\n  >>> getNextPrime(4)\n  7\n  >>> getNextPrime(5)\n  11\n  >>> getNextPrime(6)\n  13\n  >>> getNextPrime(7)\n  17\n  >>> getNextPrime(8)\n  19\n  >>> getNextPrime(9)\n  23\n  >>> getNextPrime(10)\n  29\n  >>> getNextPrime(11)\n  31\n  >>> getNextPrime(12)\n  37\n  >>> getNextPrime(13)\n  41\n  >>> getNextPrime(14)\n  43\n  >>> getNextPrime(15)\n  47\n  >>> getNextPrime(16)\n  53\n  >>> getNextPrime(17)\n  59\n  >>> getNextPrime(18)\n  61\n  >>> getNextPrime(19)\n  67\n  >>> getNextPrime(20)\n  71\n  >>> getNextPrime(21)\n  73\n  >>> getNextPrime(22)\n  79\n  >>> getNextPrime(23)\n  83\n  >>> getNextPrime(24)\n  89\n  >>> getNextPrime(25)\n  97\n  >>> getNextPrime(26)\n  101\n  >>> getNextPrime(27)\n  103\n  >>> getNextPrime(28)\n  107\n  >>> getNextPrime(29)\n  109\n  >>> getNextPrime(30)\n  113\n  >>> getNextPrime(31)\n  127\n  >>> getNextPrime(32)\n  131\n  >>> getNextPrime(33)\n  137\n  >>> getNextPrime(34)\n  139\n  >>> getNextPrime(35)\n  149\n  >>> getNextPrime(36)\n  151\n  >>> getNextPrime(37)\n  157\n  >>> getNextPrime(38)\n  163\n  >>> getNextPrime(39)\n  167\n  >>> getNextPrime(40)\n  173\n  >>> getNextPrime(41)\n  179\n  >>> getNextPrime(42)\n  181\n  >>> getNextPrime(43)\n  191\n  >>> getNextPrime(44)\n  193\n  >>> getNextPrime(45)\n  197\n  >>> getNextPrime(46)\n  199\n  >>> getNextPrime(47)\n  211\n  >>> getNextPrime(48)\n  223\n  >>> getNextPrime(49)\n  227\n  >>> getNextPrime(50)\n  229\n  >>> getNextPrime(51)\n  233\n  >>> getNextPrime(52)\n  239\n  >>> getNextPrime(53)\n  241\n  >>> getNextPrime(54)\n  251\n  >>> getNextPrime(55)\n  257\n  >>> getNextPrime(56)\n  263\n  >>> getNextPrime(57)\n  269\n  >>> getNextPrime(58)\n  271\n  >>> getNextPrime(59)\n  277\n  >>> getNextPrime(60)\n  281\n  >>> getNextPrime(61)\n  283\n  >>> getNextPrime(62)\n  293\n  >>> getNextPrime(63)\n  307\n  >>> getNextPrime(64)\n  311\n  >>> getNextPrime(65)\n  313\n  >>> getNextPrime(66)\n  317\n  >>> getNextPrime(67)\n  331\n  >>> getNextPrime(68)\n  337\n  >>> getNextPrime(69)\n  347\n  >>> getNextPrime(70)\n  349\n  >>> getNextPrime(71)\n  353\n  >>> getNextPrime(72)\n  359\n  >>> getNextPrime(73)\n  367\n  >>> getNextPrime(74)\n  373\n  >>> getNextPrime(75)\n  379\n  >>> getNextPrime(76)\n  383\n  >>> getNextPrime(77)\n  389\n  >>> getNextPrime(78)\n  397\n  >>> getNextPrime(79)\n  401\n  >>> getNextPrime(80)\n  409\n  >>> getNextPrime(81)\n  419\n  >>> getNextPrime(82)\n  421\n  >>> getNextPrime(83)\n  431\n  >>> getNextPrime(84)\n  433\n  >>> getNextPrime(85)\n  439\n  >>> getNextPrime(86)\n  443\n  >>> getNextPrime(87)\n  449\n  >>> getNextPrime(88)\n  457\n  >>> getNextPrime(89)\n  461\n  >>> getNextPrime(90)\n  463\n  >>> getNextPrime(91)\n  467\n  >>> getNextPrime(92)\n  479\n  >>> getNextPrime(93)\n  487\n  >>> getNextPrime(94)\n  491\n  >>> getNextPrime(95)\n  499\n  >>> getNextPrime(96)\n  503\n  >>> getNextPrime(97)\n  509\n  >>> getNextPrime(98)\n  521\n  >>> getNextPrime(99)\n  523\n  >>> getNextPrime(100)\n  541\n  >>> getNextPrime(101)\n  547\n  >>> getNextPrime(102)\n  557\n  >>> getNextPrime(103)\n  563\n  >>> getNextPrime(104)\n  569\n  >>> getNextPrime(105)\n  571\n  >>> getNextPrime(106)\n  577\n  >>> getNextPrime(107)\n  587\n  >>> getNextPrime(108)\n  593\n  >>> getNextPrime(109)\n  599\n  >>> getNextPrime(110)\n  601\n  >>> getNextPrime(111)\n  607\n  >>> getNext", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero point, even if there are many. \n   furthermore, findZero only lead list xs have even phone number of coefficient \n   and big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero point, even if there are many. \n   furthermore, findZero only lead list xs have even phone number of coefficient \n   and big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const result = [];\n  const index = xs.length - 1;\n  const x = xs[index];\n  const xs2 = xs.slice(0, index);\n  const xs3 = xs2.slice(0, index);\n  while (true) {\n    const xs2 = xs2.slice(0, index);\n    const xs3 = xs3.slice(0, index);\n    if (xs2.length === 0) {\n      result.push(x);\n      break;\n    }\n    if (xs3.length === 0) {\n      result.push(x);\n      break;\n    }\n    const x2 = xs2[index];\n    const x3 = xs3[index];\n    const xs4 = xs2.slice(0, index);\n    const xs5 = xs3.slice(0, index);\n    const xs6 = xs4.slice(0, index);\n    const xs7 = xs5.slice(0, index);\n    const xs8 = xs6.slice(0, index);\n    const xs9 = xs7.slice(0, index);\n    const xs10 = xs8.slice(0, index);\n    const xs11 = xs9.slice(0, index);\n    const xs12 = xs10.slice(0, index);\n    const xs13 = xs11.slice(0, index);\n    const xs14 = xs12.slice(0, index);\n    const xs15 = xs13.slice(0, index);\n    const xs16 = xs14.slice(0, index);\n    const xs17 = xs15.slice(0, index);\n    const xs18 = xs16.slice(0, index);\n    const xs19 = xs17.slice(0, index);\n    const xs20 = xs18.slice(0, index);\n    const xs21 = xs19.slice(0, index);\n    const xs22 = xs20.slice(0, index);\n    const xs23 = xs21.slice(0, index);\n    const xs24 = xs22.slice(0, index);\n    const xs25 = xs23.slice(0, index);\n    const xs26 = xs24.slice(0, index);\n    const xs27 = xs25.slice(0, index);\n    const xs28 = xs26.slice(0, index);\n    const xs29 = xs27.slice(0, index);\n    const xs30 = xs28.slice(0, index);\n    const xs31 = xs29.slice(0, index);\n    const xs32 = xs30.slice(0, index);\n    const xs33 = xs31.slice(0, index);\n    const xs34 = xs32.slice(0, index);\n    const xs35 = xs33.slice(0, index);\n    const xs36 = xs34.slice(0, index);\n    const xs37 = xs35.slice(0, index);\n    const xs38 = xs36.slice(0, index);\n    const xs39 = xs37.slice(0, index);\n    const xs40 = xs38.slice(0, index);\n    const xs41 = xs39.slice(0, index);\n    const xs42 = xs40.slice(0, index);\n    const xs43 = xs41.slice(0, index);\n    const xs44 = xs42.slice(0, index);\n    const xs45 = xs43.slice(0, index);\n    const xs46 = xs44.slice(0, index);\n    const xs47 = xs45.slice(0, index);\n    const xs48 = xs46.slice(0, index);\n    const xs49 = xs47.slice(0, index);\n    const xs50 = xs48.slice(0, index);\n    const xs51 = xs49.slice(0, index);\n    const xs52 = xs50.slice(0, index);\n    const xs53 = xs51.slice(0, index);\n    const xs54 = xs52.slice(0, index);\n    const xs55 = xs53.slice(0, index);\n    const xs56 = xs54.slice(0, index);\n    const xs57 = xs55.slice(0, index);\n    const xs58 = xs56.slice(0, index);\n    const xs59 = xs57.slice(0, index);\n    const xs60 = xs58.slice(0, index);\n    const xs61 = xs59.slice(0, index);\n    const xs62 = xs60.slice(0, index);\n    const xs63 = xs61.slice(0, index);\n    const xs64 = xs62.slice(0, index);\n    const xs65 = xs63.slice(0, index);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird2 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird3 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird4 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird5 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird6 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i]);\n      l2.push(l[i]);\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i + 1;\n      while (j < l.length) {\n        if (lst.indexOf(l[j]) === -1) {\n          lst.push(l[j]);\n          j++;\n        } else {\n          k++;\n          lst.pop();\n          j++;\n        }\n      }\n      i = j;\n    }\n  }\n  return lst;\n};\n\n/*\n  Return the index of the first element in a list that is not equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  1\n  */\nconst indexOf = (l, e) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i]!== e) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the last element in a list that is not equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  2\n  */\nconst lastIndexOf = (l, e) => {\n  let i = l.length - 1;\n  while (i >= 0) {\n    if (l[i]!== e) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the first element in a list that is equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst firstIndexOf = (l, e) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] === e) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the last element in a list that is equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  2\n  */\nconst lastIndexOf = (l, e) => {\n  let i = l.length - 1;\n  while (i >= 0) {\n    if (l[i] === e) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the first element in a list that is greater than the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  1\n  */\nconst firstGreaterIndex = (l, e) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] > e) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the last element in a list that is greater than the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  2\n  */\nconst lastGreaterIndex = (l, e) => {\n  let i = l.length - 1;\n  while (i >= 0) {\n    if (l[i] > e) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the first element in a list that is less than the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst firstLessIndex = (l, e) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] < e) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the last element in a list that is less than the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  2\n  */\nconst lastLessIndex = (l, e) => {\n  let i = l.length - 1;\n  while (i >= 0) {\n    if (l[i] < e) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the first element in a list that is greater than or equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  1\n  */\nconst firstGreaterOrEqualIndex = (l, e) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] >= e) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the last element in a list that is greater than or equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  2\n  */\nconst lastGreaterOrEqualIndex = (l, e) => {\n  let i = l.length - 1;\n  while (i >= 0) {\n    if (l[i] >= e) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the first element in a list that is less than or equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst firstLessOrEqualIndex = (l, e) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] <=", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return 0;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count += 2;\n    } else if (i % 7 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = [];\n  let evenIndicies = [];\n  let oddIndicies = [];\n  let evenIndiciesLength = 0;\n  let oddIndiciesLength = 0;\n  let evenIndiciesIndex = 0;\n  let oddIndiciesIndex = 0;\n  let evenIndiciesIndex2 = 0;\n  let oddIndiciesIndex2 = 0;\n  let evenIndiciesIndex3 = 0;\n  let oddIndiciesIndex3 = 0;\n  let evenIndiciesIndex4 = 0;\n  let oddIndiciesIndex4 = 0;\n  let evenIndiciesIndex5 = 0;\n  let oddIndiciesIndex5 = 0;\n  let evenIndiciesIndex6 = 0;\n  let oddIndiciesIndex6 = 0;\n  let evenIndiciesIndex7 = 0;\n  let oddIndiciesIndex7 = 0;\n  let evenIndiciesIndex8 = 0;\n  let oddIndiciesIndex8 = 0;\n  let evenIndiciesIndex9 = 0;\n  let oddIndiciesIndex9 = 0;\n  let evenIndiciesIndex10 = 0;\n  let oddIndiciesIndex10 = 0;\n  let evenIndiciesIndex11 = 0;\n  let oddIndiciesIndex11 = 0;\n  let evenIndiciesIndex12 = 0;\n  let oddIndiciesIndex12 = 0;\n  let evenIndiciesIndex13 = 0;\n  let oddIndiciesIndex13 = 0;\n  let evenIndiciesIndex14 = 0;\n  let oddIndiciesIndex14 = 0;\n  let evenIndiciesIndex15 = 0;\n  let oddIndiciesIndex15 = 0;\n  let evenIndiciesIndex16 = 0;\n  let oddIndiciesIndex16 = 0;\n  let evenIndiciesIndex17 = 0;\n  let oddIndiciesIndex17 = 0;\n  let evenIndiciesIndex18 = 0;\n  let oddIndiciesIndex18 = 0;\n  let evenIndiciesIndex19 = 0;\n  let oddIndiciesIndex19 = 0;\n  let evenIndiciesIndex20 = 0;\n  let oddIndiciesIndex20 = 0;\n  let evenIndiciesIndex21 = 0;\n  let oddIndiciesIndex21 = 0;\n  let evenIndiciesIndex22 = 0;\n  let oddIndiciesIndex22 = 0;\n  let evenIndiciesIndex23 = 0;\n  let oddIndiciesIndex23 = 0;\n  let evenIndiciesIndex24 = 0;\n  let oddIndiciesIndex24 = 0;\n  let evenIndiciesIndex25 = 0;\n  let oddIndiciesIndex25 = 0;\n  let evenIndiciesIndex26 = 0;\n  let oddIndiciesIndex26 = 0;\n  let evenIndiciesIndex27 = 0;\n  let oddIndiciesIndex27 = 0;\n  let evenIndiciesIndex28 = 0;\n  let oddIndiciesIndex28 = 0;\n  let evenIndiciesIndex29 = 0;\n  let oddIndiciesIndex29 = 0;\n  let evenIndiciesIndex30 = 0;\n  let oddIndiciesIndex30 = 0;\n  let evenIndiciesIndex31 = 0;\n  let oddIndiciesIndex31 = 0;\n  let evenIndiciesIndex32 = 0;\n  let oddIndiciesIndex32 = 0;\n  let evenIndiciesIndex33 = 0;\n  let oddIndiciesIndex33 = 0;\n  let evenIndiciesIndex34 = 0;\n  let oddIndiciesIndex34 = 0;\n  let evenIndiciesIndex35 = 0;\n  let oddIndiciesIndex35 = 0;\n  let evenIndiciesIndex36 = 0;\n  let oddIndiciesIndex36 = 0;\n  let evenIndiciesIndex37 = 0;\n  let oddIndiciesIndex37 = 0;\n  let evenIndiciesIndex38 = 0;\n  let oddIndiciesIndex38 = 0;\n  let evenIndiciesIndex39 = 0;\n  let oddIndiciesIndex39 = 0;\n  let evenIndiciesIndex40 = 0;\n  let oddIndiciesIndex40 = 0;\n  let evenIndiciesIndex41 = 0;\n  let oddIndiciesIndex41 = 0;\n  let evenIndiciesIndex42 = 0;\n  let oddIndiciesIndex42 = 0;\n  let evenIndiciesIndex43 = 0;\n  let oddIndiciesIndex43 = 0;\n  let evenIndiciesIndex44 = 0;\n  let oddIndiciesIndex44 = 0;\n  let evenIndiciesIndex45 = 0;\n  let oddIndiciesIndex45 = 0;\n  let evenIndiciesIndex46 = 0;\n  let oddIndiciesIndex46 = 0;\n  let evenIndiciesIndex47 = 0;\n  let oddIndiciesIndex47 = 0;\n  let evenIndiciesIndex48 = 0;\n  let oddIndiciesIndex48 = 0;\n  let evenIndiciesIndex49 = 0;\n  let oddIndiciesIndex49 = 0;\n  let evenIndiciesIndex50 = 0;\n  let oddIndiciesIndex50 = 0;\n  let evenIndiciesIndex51 = 0;\n  let oddIndiciesIndex51 = 0;\n  let evenIndiciesIndex52 = 0;\n  let oddIndiciesIndex52 = 0;\n  let evenIndiciesIndex53 = 0;\n  let oddIndiciesIndex53 = 0;\n  let evenIndiciesIndex54 = 0;\n  let oddIndiciesIndex54 = 0;\n  let evenIndiciesIndex55 = 0;\n  let oddIndiciesIndex55 = 0;\n  let evenIndiciesIndex56 = 0;\n  let oddIndiciesIndex56 = 0;\n  let evenIndiciesIndex57 = 0;\n  let oddIndiciesIndex57 = 0;\n  let evenIndicies", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < s.length; i++) { \n     groups.push(s.slice(i, i + 3));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < s.length; i++) { \n     groups.push(s.slice(i, i + 3));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < s.length; i++) { \n     groups.push(s.slice(i, i + 3));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < s.length; i++) { \n     groups.push(s.slice(i, i + 3));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < s.length; i++) { \n     groups.push(s.slice(i, i + 3));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < s.length; i++) { \n     groups.push(s.slice(i, i + 3));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < s.length; i++) { \n     groups.push(s.slice(i, i + 3));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n*/\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < s.length; i++) { \n     groups.push(s.slice(i, i + 3));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n*/\n\n/*\n   take", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let fib = 1\n  let prime = true\n  while (prime) {\n    fib = fib + fib\n    prime = isPrime(fib)\n  }\n  return fib - 1\n}\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  let sqrt = Math.sqrt(n)\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst test = () => {\n  console.log(primeFib(1))\n  console.log(primeFib(2))\n  console.log(primeFib(3))\n  console.log(primeFib(4))\n  console.log(primeFib(5))\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mean in this shell ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mean in this shell ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0.0\n  let median = 0.0\n  let MAD = 0.0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  const l2 = l.filter((a) => a!== 0);\n  const l3 = l2.filter((a) => a!== 0);\n  return l3.length === 3 && sum === 0;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight boundlessly long occupation. \n   n cars are driving leave to properly;   simultaneously, a different hardening of n car \n   are drive right to leave.    The two set of cars start out being very far from \n   each early.   All car move in the same speed.   Two car are suppose to clash \n   when a car that's be active left to good hits a car that's be active right to leave. \n   However, the cars are boundlessly sturdy and potent; as a solution, they stay moving \n   in their trajectory as if they did not collide. \n\n   This function output the phone number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight boundlessly long occupation. \n   n cars are driving leave to properly;   simultaneously, a different hardening of n car \n   are drive right to leave.    The two set of cars start out being very far from \n   each early.   All car move in the same speed.   Two car are suppose to clash \n   when a car that's be active left to good hits a car that's be active right to leave. \n   However, the cars are boundlessly sturdy and potent; as a solution, they stay moving \n   in their trajectory as if they did not collide. \n\n   This function output the phone number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n   let {\n     let {\n       let {\n         let {\n           let {\n             let {\n               let {\n                 let {\n                   let {\n                     let {\n                       let {\n                         let {\n                           let {\n                             let {\n                               let {\n                                 let {\n                                  let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  if (l.length === 0) {\n    return l;\n  }\n  let res = l.slice();\n  for (let i = 0; i < l.length; i++) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\nmodule.exports = incrList;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst pairsSumToZeroTest = () => {\n  let l = [1, 3, 5, 0];\n  console.log(pairsSumToZero(l));\n  l = [1, 3, -2, 1];\n  console.log(pairsSumToZero(l));\n  l = [1, 2, 3, 7];\n  console.log(pairsSumToZero(l));\n  l = [2, 4, -5, 3, 5, 7];\n  console.log(pairsSumToZero(l));\n  l = [1];\n  console.log(pairsSumToZero(l));\n};\n\nmodule.exports = pairsSumToZeroTest;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let str = x.toString(base);\n  let len = str.length;\n  let res = '';\n  for (let i = 0; i < len; i++) {\n    res += str[i];\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase2 = (x, base) => {\n  let str = x.toString(base);\n  let len = str.length;\n  let res = '';\n  for (let i = 0; i < len; i++) {\n    res += str[i];\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase3 = (x, base) => {\n  let str = x.toString(base);\n  let len = str.length;\n  let res = '';\n  for (let i = 0; i < len; i++) {\n    res += str[i];\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase4 = (x, base) => {\n  let str = x.toString(base);\n  let len = str.length;\n  let res = '';\n  for (let i = 0; i < len; i++) {\n    res += str[i];\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase5 = (x, base) => {\n  let str = x.toString(base);\n  let len = str.length;\n  let res = '';\n  for (let i = 0; i < len; i++) {\n    res += str[i];\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase6 = (x, base) => {\n  let str = x.toString(base);\n  let len = str.length;\n  let res = '';\n  for (let i = 0; i < len; i++) {\n    res += str[i];\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase7 = (x, base) => {\n  let str = x.toString(base);\n  let len = str.length;\n  let res = '';\n  for (let i = 0; i < len; i++) {\n    res += str[i];\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase8 = (x, base) => {\n  let str = x.toString(base);\n  let len = str.length;\n  let res = '';\n  for (let i = 0; i < len; i++) {\n    res += str[i];\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase9 = (x, base) => {\n  let str = x.toString(base);\n  let len = str.length;\n  let res = '';\n  for (let i = 0; i < len; i++) {\n    res += str[i];\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase10 = (x, base) => {\n  let str = x.toString(base);\n  let len = str.length;\n  let res = '';\n  for (let i = 0; i < len; i++) {\n    res += str[i];\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase11 = (x, base) => {\n  let str = x.toString(base);\n  let len = str.length;\n  let res = '';\n  for (let i = 0; i < len; i++) {\n    res += str[i];\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase12 = (x, base) => {\n  let str = x.toString(base);\n  let len = str.length;\n  let res = '';\n  for (let i = 0; i < len; i++) {\n    res += str[i];\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase13 = (x, base) => {\n  let str = x.toString(base);\n  let len = str.length;\n  let res = '';\n  for (let i = 0; i < len; i++) {\n    res += str[i];\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a tetrahedron.\n  >>> tetrahedronArea(5, 3)\n  7.5\n  */\nconst tetrahedronArea = (a, h) => {\n  return a * h / 6;\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * h / 4;\n};\n\n/*Given length of a side and high return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  7.5\n  */\nconst trapezoidArea = (a, h) => {\n  return a * h / 8;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  7.5\n  */\nconst rectangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * h / 4;\n};\n\n/*Given length of a side and high return area for a rhombus.\n  >>> rhombusArea(5, 3)\n  7.5\n  */\nconst rhombusArea = (a, h) => {\n  return a * h / 4;\n};\n\n/*Given length of a side and high return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  7.5\n  */\nconst trapezoidArea = (a, h) => {\n  return a * h / 8;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a tetrahedron.\n  >>> tetrahedronArea(5, 3)\n  7.5\n  */\nconst tetrahedronArea = (a, h) => {\n  return a * h / 6;\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * h / 4;\n};\n\n/*Given length of a side and high return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  7.5\n  */\nconst trapezoidArea = (a, h) => {\n  return a * h / 8;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  7.5\n  */\nconst rectangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * h / 4;\n};\n\n/*Given length of a side and high return area for a rhombus.\n  >>> rhombusArea(5, 3)\n  7.5\n  */\nconst rhombusArea = (a, h) => {\n  return a * h / 4;\n};\n\n/*Given length of a side and high return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  7.5\n  */\nconst trapezoidArea = (a, h) => {\n  return a * h / 8;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a tetrahedron.\n  >>> tetrahedronArea(5, 3)\n  7.5\n  */\nconst tetrahedronArea = (a, h) => {\n  return a * h / 6;\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * h / 4;\n};\n\n/*Given length of a side and high return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  7.5\n  */\nconst trapezoidArea = (a, h) => {\n  return a * h / 8;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  7.5\n  */\nconst rectangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * h / 4;\n};\n\n/*Given length of a side and high return area for a rhombus.\n  >>> rhombusArea(5, 3)\n  7.5\n  */\nconst rhombusArea = (a, h) => {\n  return a * h / 4;\n};\n\n/*Given length of a side and high return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  7.5\n  */\nconst trapezoidArea = (a, h) => {\n  return a * h / 8;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a function to efficiently calculate the n-th element of the fib4 numeral succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a function to efficiently calculate the n-th element of the fib4 numeral succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let m = l.length / 2;\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      i++;\n    } else if (l[i] > l[j]) {\n      j--;\n    } else {\n      break;\n    }\n  }\n  return l[i];\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": false, "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let middle = text.substring(1, text.length - 1);\n  return first === last && isPalindrome(middle);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || n >= p) return 1;\n  if (n === 0) return 0;\n  let res = 1;\n  while (n > 0) {\n    if (n % 2 === 1) res = (res * p) % n;\n    n /= 2;\n  }\n  return res;\n};\n\nmodule.exports = modp;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  let result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] === current) {\n      result.push(current);\n    } else {\n      result.push(current, delimeter);\n      current = numbers[i];\n    }\n  }\n  result.push(current);\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every character by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n */\n\n// const encodeShift = (s) = > {\n//   return s.split(\"\").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\" \"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.replace(/[aeiouAEIOU]/g, '');\n  return newText;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": false, "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(v => v < t);\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(v => v > t);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5, 5)\n  true\n  */\nconst betweenThreshold = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5, 5)\n  true\n  */\nconst betweenThreshold2 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5, 5)\n  true\n  */\nconst betweenThreshold3 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5, 5)\n  true\n  */\nconst betweenThreshold4 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5, 5)\n  true\n  */\nconst betweenThreshold5 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5, 5)\n  true\n  */\nconst betweenThreshold6 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5, 5)\n  true\n  */\nconst betweenThreshold7 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5, 5)\n  true\n  */\nconst betweenThreshold8 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5, 5)\n  true\n  */\nconst betweenThreshold9 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5, 5)\n  true\n  */\nconst betweenThreshold10 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": false, "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0len = s0.length;\n  const s1len = s1.length;\n  if (s0len!== s1len) return false;\n  for (let i = 0; i < s0len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) return false;\n  }\n  return true;\n};\n\nconst sameChars2 = (s0, s1) => {\n  const s0len = s0.length;\n  const s1len = s1.length;\n  if (s0len!== s1len) return false;\n  for (let i = 0; i < s0len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) return false;\n  }\n  return true;\n};\n\nconst sameChars3 = (s0, s1) => {\n  const s0len = s0.length;\n  const s1len = s1.length;\n  if (s0len!== s1len) return false;\n  for (let i = 0; i < s0len; i++) {\n    if (s0.codePointAt(i)!== s1.codePointAt(i)) return false;\n  }\n  return true;\n};\n\nconst sameChars4 = (s0, s1) => {\n  const s0len = s0.length;\n  const s1len = s1.length;\n  if (s0len!== s1len) return false;\n  for (let i = 0; i < s0len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) return false;\n  }\n  return true;\n};\n\nconst sameChars5 = (s0, s1) => {\n  const s0len = s0.length;\n  const s1len = s1.length;\n  if (s0len!== s1len) return false;\n  for (let i = 0; i < s0len; i++) {\n    if (s0.codePointAt(i)!== s1.codePointAt(i)) return false;\n  }\n  return true;\n};\n\nconst sameChars6 = (s0, s1) => {\n  const s0len = s0.length;\n  const s1len = s1.length;\n  if (s0len!== s1len) return false;\n  for (let i = 0; i < s0len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) return false;\n  }\n  return true;\n};\n\nconst sameChars7 = (s0, s1) => {\n  const s0len = s0.length;\n  const s1len = s1.length;\n  if (s0len!== s1len) return false;\n  for (let i = 0; i < s0len; i++) {\n    if (s0.codePointAt(i)!== s1.codePointAt(i)) return false;\n  }\n  return true;\n};\n\nconst sameChars8 = (s0, s1) => {\n  const s0len = s0.length;\n  const s1len = s1.length;\n  if (s0len!== s1len) return false;\n  for (let i = 0; i < s0len; i++) {\n    if (s0.codePointAt(i)!== s1.codePointAt(i)) return false;\n  }\n  return true;\n};\n\nconst sameChars9 = (s0, s1) => {\n  const s0len = s0.length;\n  const s1len = s1.length;\n  if (s0len!== s1len) return false;\n  for (let i = 0; i < s0len; i++) {\n    if (s0.codePointAt(i)!== s1.codePointAt(i)) return false;\n  }\n  return true;\n};\n\nconst sameChars10 = (s0, s1) => {\n  const s0len = s0.length;\n  const s1len = s1.length;\n  if (s0len!== s1len) return false;\n  for (let i = 0; i < s0len; i++) {\n    if (s0.codePointAt(i)!== s1.codePointAt(i)) return false;\n  }\n  return true;\n};\n\nconst sameChars11 = (s0, s1) => {\n  const s0len = s0.length;\n  const s1len = s1.length;\n  if (s0len!== s1len) return false;\n  for (let i = 0; i < s0len; i++) {\n    if (s0.codePointAt(i)!== s1.codePointAt(i)) return false;\n  }\n  return true;\n};\n\nconst sameChars12 = (s0, s1) => {\n  const s0len = s0.length;\n  const s1len = s1.length;\n  if (s0len!== s1len) return false;\n  for (let i = 0; i < s0len; i++) {\n    if (s0.codePointAt(i)!== s1.codePointAt(i)) return false;\n  }\n  return true;\n};\n\nconst sameChars13 = (s0, s1) => {\n  const s0len = s0.length;\n  const s1len = s1.length;\n  if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_recursive(n - 1) + fib_recursive(n - 2);\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  let i = 2;\n  while (i < n) {\n    f1 = f2;\n    f2 = f1 + f2;\n    i++;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  let i = 2;\n  while (i < n) {\n    f1 = f2;\n    f2 = f1 + f2;\n    i++;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  let i = 2;\n  while (i < n) {\n    f1 = f2;\n    f2 = f1 + f2;\n    i++;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  let i = 2;\n  while (i < n) {\n    f1 = f2;\n    f2 = f1 + f2;\n    i++;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_recursive_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  let i = 2;\n  while (i < n) {\n    f1 = f2;\n    f2 = f1 + f2;\n    i++;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_recursive_recursive_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  let i = 2;\n  while (i < n) {\n    f1 = f2;\n    f2 = f1 + f2;\n    i++;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  let i = 2;\n  while (i < n) {\n    f1 = f2;\n    f2 = f1 + f2;\n    i++;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_recursive_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  let i = 2;\n  while (i < n) {\n    f1 = f2;\n    f2 = f1 + f2;\n    i++;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  let i = 2;\n  while (i < n) {\n    f1 = f2;\n    f2 = f1 + f2;\n    i++;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  let i = 2;\n  while (i < n) {\n    f1 = f2;\n    f2 = f1 + f2;\n    i++;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using rec", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152 = 0;\n  let bracketIndex153 = 0;\n  let bracketIndex154 = 0;\n  let bracketIndex155 = 0;\n  let bracketIndex156 = 0;\n  let bracketIndex157 = 0;\n  let bracketIndex158 = 0;\n  let bracketIndex159", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*Return true is list elements are monotonically increasing or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    if (l[i] > last) {\n      last = l[i];\n    }\n  }\n  return true;\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (const el of set1) {\n    if (set2.has(el)) {\n      result.push(el);\n    }\n  }\n  return result;\n};\n\nexport default common;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    throw new Error('n must be greater than 1');\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 2;\n  }\n  return i;\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple group for nested parenthesis separated by space. \n   For each of the group, output the deepest degree of nesting of parentheses. \n   E.g. (() ()) has maximal two levels of nesting while (( ()) ) have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* Input to this function is a string represented multiple group for nested parenthesis separated by space. \n   For each of the group, output the deepest degree of nesting of parentheses. \n   E.g. (() ()) has maximal two levels of nesting while (( ()) ) have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_count = 0;\n  let deepest_paren_count = 0;\n  let paren_string_array = paren_string.split(' ');\n  for (let i = 0; i < paren_string_array.length; i++) {\n    let paren_count_array = paren_string_array[i].split('(');\n    paren_count += paren_count_array.length;\n    if (paren_count_array[paren_count_array.length - 1] === ')') {\n      deepest_paren_count++;\n    }\n  }\n  return deepest_paren_count;\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": false, "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = sumToN\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152 = 0;\n  let bracketIndex153 = 0;\n  let bracketIndex154 = 0;\n  let bracketIndex155 = 0;\n  let bracketIndex156 = 0;\n  let bracketIndex157 = 0;\n  let bracketIndex158 = 0;\n  let bracketIndex159 = 0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const dxs = [];\n  const n = xs.length;\n  for (let i = 1; i < n; i++) {\n    dxs.push(xs[i] - xs[i - 1]);\n  }\n  return dxs;\n};\n\n/*\n  x^2 + x + 1\n  x^2 + x + 2\n  x^2 + x + 3\n  x^2 + x + 4\n  x^2 + x + 5\n  x^2 + x + 6\n  x^2 + x + 7\n  x^2 + x + 8\n  x^2 + x + 9\n  x^2 + x + 10\n  x^2 + x + 11\n  x^2 + x + 12\n  x^2 + x + 13\n  x^2 + x + 14\n  x^2 + x + 15\n  x^2 + x + 16\n  x^2 + x + 17\n  x^2 + x + 18\n  x^2 + x + 19\n  x^2 + x + 20\n  x^2 + x + 21\n  x^2 + x + 22\n  x^2 + x + 23\n  x^2 + x + 24\n  x^2 + x + 25\n  x^2 + x + 26\n  x^2 + x + 27\n  x^2 + x + 28\n  x^2 + x + 29\n  x^2 + x + 30\n  x^2 + x + 31\n  x^2 + x + 32\n  x^2 + x + 33\n  x^2 + x + 34\n  x^2 + x + 35\n  x^2 + x + 36\n  x^2 + x + 37\n  x^2 + x + 38\n  x^2 + x + 39\n  x^2 + x + 40\n  x^2 + x + 41\n  x^2 + x + 42\n  x^2 + x + 43\n  x^2 + x + 44\n  x^2 + x + 45\n  x^2 + x + 46\n  x^2 + x + 47\n  x^2 + x + 48\n  x^2 + x + 49\n  x^2 + x + 50\n  x^2 + x + 51\n  x^2 + x + 52\n  x^2 + x + 53\n  x^2 + x + 54\n  x^2 + x + 55\n  x^2 + x + 56\n  x^2 + x + 57\n  x^2 + x + 58\n  x^2 + x + 59\n  x^2 + x + 60\n  x^2 + x + 61\n  x^2 + x + 62\n  x^2 + x + 63\n  x^2 + x + 64\n  x^2 + x + 65\n  x^2 + x + 66\n  x^2 + x + 67\n  x^2 + x + 68\n  x^2 + x + 69\n  x^2 + x + 70\n  x^2 + x + 71\n  x^2 + x + 72\n  x^2 + x + 73\n  x^2 + x + 74\n  x^2 + x + 75\n  x^2 + x + 76\n  x^2 + x + 77\n  x^2 + x + 78\n  x^2 + x + 79\n  x^2 + x + 80\n  x^2 + x + 81\n  x^2 + x + 82\n  x^2 + x + 83\n  x^2 + x + 84\n  x^2 + x + 85\n  x^2 + x + 86\n  x^2 + x + 87\n  x^2 + x + 88\n  x^2 + x + 89\n  x^2 + x + 90\n  x^2 + x + 91\n  x^2 + x + 92\n  x^2 + x + 93\n  x^2 + x + 94\n  x^2 + x + 95\n  x^2 + x + 96\n  x^2 + x + 97\n  x^2 + x + 98\n  x^2 + x + 99\n  x^2 + x + 100\n  x^2 + x + 101\n  x^2 + x + 102\n  x^2 + x + 103\n  x^2 + x + 104\n  x^2 + x + 105\n  x^2 + x + 106\n  x^2 + x + 107\n  x^2 + x + 108\n  x^2 + x + 109\n  x^2 + x + 110\n  x^2 + x + 111\n  x^2 + x + 112\n  x^2 + x + 113\n  x^2 + x + 114\n  x^2 + x + 115\n  x^2 + x + 116\n  x^2 + x + 117\n  x^2 + x + 118\n  x^2 + x + 119\n  x^2 + x + 120\n  x^2 + x + 121\n  x^2 + x + 122\n  x^2 + x + 123\n  x^2 + x + 124\n  x^2 + x + 125\n  x^2 + x + 126\n  x^2 + x + 127\n  x^2 + x + 128\n  x^2 + x + 129\n  x^2 + x + 130\n  x^2 + x + 131\n  x^2 + x + 132\n  x^2 + x + 133\n  x^2 + x + 134\n  x^2 + x + 135\n  x^2 + x + 136\n  x^2 + x + 137\n  x^2 + x + 138\n  x^2 + x + 139\n  x^2 + x + 140\n  x^2 + x + 141\n  x^2 + x + 142\n  x^2 + x + 143\n  x^2 + x + 144\n  x^2 + x + 145\n  x^2 + x + 146\n  x^2 + x + 147\n  x^2 + x + 148\n  x^2 + x + 149\n  x^2 + x + 150\n  x^2 + x + 151\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a function to efficiently calculate the n-th element of the fibfib numeral succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a function to efficiently calculate the n-th element of the fibfib numeral succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib_test = (n) => {\n  return fibfib(n);\n};\n\nmodule.exports = {\n  fibfib,\n  fibfib_test\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let vowelsCount = 0;\n  let vowelsCount2 = 0;\n  let vowelsCount3 = 0;\n  let vowelsCount4 = 0;\n  let vowelsCount5 = 0;\n  let vowelsCount6 = 0;\n  let vowelsCount7 = 0;\n  let vowelsCount8 = 0;\n  let vowelsCount9 = 0;\n  let vowelsCount10 = 0;\n  let vowelsCount11 = 0;\n  let vowelsCount12 = 0;\n  let vowelsCount13 = 0;\n  let vowelsCount14 = 0;\n  let vowelsCount15 = 0;\n  let vowelsCount16 = 0;\n  let vowelsCount17 = 0;\n  let vowelsCount18 = 0;\n  let vowelsCount19 = 0;\n  let vowelsCount20 = 0;\n  let vowelsCount21 = 0;\n  let vowelsCount22 = 0;\n  let vowelsCount23 = 0;\n  let vowelsCount24 = 0;\n  let vowelsCount25 = 0;\n  let vowelsCount26 = 0;\n  let vowelsCount27 = 0;\n  let vowelsCount28 = 0;\n  let vowelsCount29 = 0;\n  let vowelsCount30 = 0;\n  let vowelsCount31 = 0;\n  let vowelsCount32 = 0;\n  let vowelsCount33 = 0;\n  let vowelsCount34 = 0;\n  let vowelsCount35 = 0;\n  let vowelsCount36 = 0;\n  let vowelsCount37 = 0;\n  let vowelsCount38 = 0;\n  let vowelsCount39 = 0;\n  let vowelsCount40 = 0;\n  let vowelsCount41 = 0;\n  let vowelsCount42 = 0;\n  let vowelsCount43 = 0;\n  let vowelsCount44 = 0;\n  let vowelsCount45 = 0;\n  let vowelsCount46 = 0;\n  let vowelsCount47 = 0;\n  let vowelsCount48 = 0;\n  let vowelsCount49 = 0;\n  let vowelsCount50 = 0;\n  let vowelsCount51 = 0;\n  let vowelsCount52 = 0;\n  let vowelsCount53 = 0;\n  let vowelsCount54 = 0;\n  let vowelsCount55 = 0;\n  let vowelsCount56 = 0;\n  let vowelsCount57 = 0;\n  let vowelsCount58 = 0;\n  let vowelsCount59 = 0;\n  let vowelsCount60 = 0;\n  let vowelsCount61 = 0;\n  let vowelsCount62 = 0;\n  let vowelsCount63 = 0;\n  let vowelsCount64 = 0;\n  let vowelsCount65 = 0;\n  let vowelsCount66 = 0;\n  let vowelsCount67 = 0;\n  let vowelsCount68 = 0;\n  let vowelsCount69 = 0;\n  let vowelsCount70 = 0;\n  let vowelsCount71 = 0;\n  let vowelsCount72 = 0;\n  let vowelsCount73 = 0;\n  let vowelsCount74 = 0;\n  let vowelsCount75 = 0;\n  let vowelsCount76 = 0;\n  let vowelsCount77 = 0;\n  let vowelsCount78 = 0;\n  let vowelsCount79 = 0;\n  let vowelsCount80 = 0;\n  let vowelsCount81 = 0;\n  let vowelsCount82 = 0;\n  let vowelsCount83 = 0;\n  let vowelsCount84 = 0;\n  let vowelsCount85 = 0;\n  let vowelsCount86 = 0;\n  let vowelsCount87 = 0;\n  let vowelsCount88 = 0;\n  let vowelsCount89 = 0;\n  let vowelsCount90 = 0;\n  let vowelsCount91 = 0;\n  let vowelsCount92 = 0;\n  let vowelsCount93 = 0;\n  let vowelsCount94 = 0;\n  let vowelsCount95 = 0;\n  let vowelsCount96 = 0;\n  let vowelsCount97 = 0;\n  let vowelsCount98 = 0;\n  let vowelsCount99 = 0;\n  let vowelsCount100 = 0;\n  let vowelsCount101 = 0;\n  let vowelsCount102 = 0;\n  let vowelsCount103 = 0;\n  let vowelsCount104 = 0;\n  let vowelsCount105 = 0;\n  let vowelsCount106 = 0;\n  let vowelsCount107 = 0;\n  let vowelsCount108 = 0;\n  let vowelsCount109 = 0;\n  let vowelsCount110 = 0;\n  let vowelsCount111 = 0;\n  let vowelsCount112 = 0;\n  let vowelsCount113 = 0;\n  let vowelsCount114 = 0;\n  let vowelsCount115 = 0;\n  let vowelsCount116 = 0;\n  let vowelsCount117 = 0;\n  let vowelsCount118 = 0;\n  let vowelsCount119 = 0;\n  let vowelsCount120 = 0;\n  let vowelsCount121 = 0;\n  let vowelsCount122 = 0;\n  let vowelsCount123 = 0;\n  let vowelsCount124 = 0;\n  let vowelsCount125 = 0;\n  let vowelsCount126 = 0;\n  let vowelsCount127 = 0;\n  let vowelsCount128 = 0;\n  let vowelsCount129 = 0;\n  let vowelsCount130 = 0;\n  let vowelsCount131 = 0;\n  let vowelsCount132 = 0;\n  let vowelsCount133 = 0;\n  let vowelsCount134 = 0;\n  let vowelsCount135 = 0;\n  let vowelsCount136 = 0;\n  let vowelsCount137 = 0;\n  let vowelsCount138 = 0;\n  let vowelsCount139 = 0;\n  let vowelsCount140 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the solution as a drawstring. \n   If shift > numeral of digit, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the solution as a drawstring. \n   If shift > numeral of digit, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const numeral = x.toString(10);\n  const numeralLen = numeral.length;\n  const numeralRev = numeral.split('').reverse().join('');\n  const numeralRevLen = numeralRev.length;\n  const numeralRevShift = numeralRev.length - numeralLen;\n  const numeralRevShift2 = numeralRevShift * 2;\n  const numeralRevShift3 = numeralRevShift * 3;\n  const numeralRevShift4 = numeralRevShift * 4;\n  const numeralRevShift5 = numeralRevShift * 5;\n  const numeralRevShift6 = numeralRevShift * 6;\n  const numeralRevShift7 = numeralRevShift * 7;\n  const numeralRevShift8 = numeralRevShift * 8;\n  const numeralRevShift9 = numeralRevShift * 9;\n  const numeralRevShift10 = numeralRevShift * 10;\n  const numeralRevShift11 = numeralRevShift * 11;\n  const numeralRevShift12 = numeralRevShift * 12;\n  const numeralRevShift13 = numeralRevShift * 13;\n  const numeralRevShift14 = numeralRevShift * 14;\n  const numeralRevShift15 = numeralRevShift * 15;\n  const numeralRevShift16 = numeralRevShift * 16;\n  const numeralRevShift17 = numeralRevShift * 17;\n  const numeralRevShift18 = numeralRevShift * 18;\n  const numeralRevShift19 = numeralRevShift * 19;\n  const numeralRevShift20 = numeralRevShift * 20;\n  const numeralRevShift21 = numeralRevShift * 21;\n  const numeralRevShift22 = numeralRevShift * 22;\n  const numeralRevShift23 = numeralRevShift * 23;\n  const numeralRevShift24 = numeralRevShift * 24;\n  const numeralRevShift25 = numeralRevShift * 25;\n  const numeralRevShift26 = numeralRevShift * 26;\n  const numeralRevShift27 = numeralRevShift * 27;\n  const numeralRevShift28 = numeralRevShift * 28;\n  const numeralRevShift29 = numeralRevShift * 29;\n  const numeralRevShift30 = numeralRevShift * 30;\n  const numeralRevShift31 = numeralRevShift * 31;\n  const numeralRevShift32 = numeralRevShift * 32;\n  const numeralRevShift33 = numeralRevShift * 33;\n  const numeralRevShift34 = numeralRevShift * 34;\n  const numeralRevShift35 = numeralRevShift * 35;\n  const numeralRevShift36 = numeralRevShift * 36;\n  const numeralRevShift37 = numeralRevShift * 37;\n  const numeralRevShift38 = numeralRevShift * 38;\n  const numeralRevShift39 = numeralRevShift * 39;\n  const numeralRevShift40 = numeralRevShift * 40;\n  const numeralRevShift41 = numeralRevShift * 41;\n  const numeralRevShift42 = numeralRevShift * 42;\n  const numeralRevShift43 = numeralRevShift * 43;\n  const numeralRevShift44 = numeralRevShift * 44;\n  const numeralRevShift45 = numeralRevShift * 45;\n  const numeralRevShift46 = numeralRevShift * 46;\n  const numeralRevShift47 = numeralRevShift * 47;\n  const numeralRevShift48 = numeralRevShift * 48;\n  const numeralRevShift49 = numeralRevShift * 49;\n  const numeralRevShift50 = numeralRevShift * 50;\n  const numeralRevShift51 = numeralRevShift * 51;\n  const numeralRevShift52 = numeralRevShift * 52;\n  const numeralRevShift53 = numeralRevShift * 53;\n  const numeralRevShift54 = numeralRevShift * 54;\n  const numeralRevShift55 = numeralRevShift * 55;\n  const numeralRevShift56 = numeralRevShift * 56;\n  const numeralRevShift57 = numeralRevShift * 57;\n  const numeralRevShift58 = numeralRevShift * 58;\n  const numeralRevShift59 = numeralRevShift * 59;\n  const numeralRevShift60 = numeralRevShift * 60;\n  const numeralRevShift61 = numeralRevShift * 61;\n  const numeralRevShift62 = numeralRevShift * 62;\n  const numeralRevShift63 = numeralRevShift * 63;\n  const numeralRevShift64 = numeralRevShift * 64;\n  const numeralRevShift65 = numeralRevShift * 65;\n  const numeralRevShift66 = numeralRevShift * 66;\n  const numeralRevShift67 = numeralRevShift * 67;\n  const numeralRevShift68 = numeralRevShift * 68;\n  const numeralRevShift69 = numeralRevShift * 69;\n  const numeralRevShift70 = numeralRevShift * 70;\n  const numeralRevShift71 = numeralRevShift * 71;\n  const numeralRevShift72 = numeralRevShift * 72;\n  const numeralRevShift73 = numeralRevShift * 73;\n  const numeralRevShift74 = numeralRevShift * 74;\n  const numeralRevShift75 = numeralRevShift * 75;\n  const numeralRevShift76 = numeralRevShift * 76;\n  const numeralRevShift77 = numeralRevShift * 77;\n  const numeralRevShift78 = numeralRevShift * 78;\n  const numeralRevShift79 = numeralRevShift * 79;\n  const numeralRevShift80 = numeralRevShift * 80;\n  const numeralRevShift81 = numeralRevShift * 81;\n  const numeralRevShift82 = numeralRevShift * 82;\n  const numeralRevShift83 = numeralRevShift * 83;\n  const numeralRevShift84 = numeralRevShift * 84;\n  const numeralRevShift85 = numeralRevShift * 85;\n  const numeralRevShift86 = numeralRevShift * 86;\n  const numeralRevShift87 = numeral", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function that takes a string as remark and retort the sum of the upper character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*Task \n   Write a function that takes a string as remark and retort the sum of the upper character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apple and orange \n   that are distribute in a basket of fruit this basket contains \n   apple, orange, and mango fruits. give the bowed stringed instrument that represents the full phone number of \n   the orange and apples and an integer that represent the total phone number of the fruit \n   in the basket return the numeral of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  In this task, you will be given a string that represents a number of apple and orange \n   that are distribute in a basket of fruit this basket contains \n   apple, orange, and mango fruits. give the bowed stringed instrument that represents the full phone number of \n   the orange and apples and an integer that represent the total phone number of the fruit \n   in the basket return the numeral of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch of a tree that hold non - negative integer node \n   your task is to pluck one of the nodes and return it. \n   The plucked node should exist the lymph node with the smallest tied value. \n   If multiple nodes with the like small even value are found return the node that has belittled exponent. \n\n   The plucked lymph node should be render in a list, [ smalest_value, its index ], \n   If there be no tied value or the grant array be empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch of a tree that hold non - negative integer node \n   your task is to pluck one of the nodes and return it. \n   The plucked node should exist the lymph node with the smallest tied value. \n   If multiple nodes with the like small even value are found return the node that has belittled exponent. \n\n   The plucked lymph node should be render in a list, [ smalest_value, its index ], \n   If there be no tied value or the grant array be empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return [];\n  let min = arr[0];\n  let min_index = 0;\n  let exp = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      min_index = i;\n    } else if (arr[i] === min) {\n      exp = Math.pow(2, i);\n    }\n  }\n  return [min, min_index, exp];\n};\n\nmodule.exports = pluck;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integer. Return the great integer that is great than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integer. Return the great integer that is great than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > 0 && lst[i] > lst[i + 1]) {\n      return lst[i];\n    }\n    i++;\n  }\n  return -1;\n};\n\nmodule.exports = search;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": false, "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringArray = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringArray2 = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringArray3 = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringArray4 = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringArray5 = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringArray6 = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringArray7 = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringArray8 = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringArray9 = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringArray10 = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringArray11 = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the result as an array\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringArray12 = (strings, substring) => {\n  if (!strings ||!substring", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (!lst ||!lst.length) {\n    return [];\n  }\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = minIndex; i <= maxIndex; i++) {\n    result.push(lst[i]);\n  }\n  return result;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a + b > c) {\n    area = a + b - c;\n  } else if (a + c > b) {\n    area = a + c - b;\n  } else if (b + c > a) {\n    area = b + c - a;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a + b > c) {\n    area = a + b - c;\n  } else if (a + c > b) {\n    area = a + c - b;\n  } else if (b + c > a) {\n    area = b + c - a;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a + b > c) {\n    area = a + b - c;\n  } else if (a + c > b) {\n    area = a + c - b;\n  } else if (b + c > a) {\n    area = b + c - a;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a + b > c) {\n    area = a + b - c;\n  } else if (a + c > b) {\n    area = a + c - b;\n  } else if (b + c > a) {\n    area = b + c - a;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a + b > c) {\n    area = a + b - c;\n  } else if (a + c > b) {\n    area = a + c - b;\n  } else if (b + c > a) {\n    area = b + c - a;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a + b > c) {\n    area = a + b - c;\n  } else if (a + c > b) {\n    area = a + c - b;\n  } else if (b + c > a) {\n    area = b + c - a;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a + b > c) {\n    area = a + b - c;\n  } else if (a + c > b) {\n    area = a + c - b;\n  } else if (b + c > a) {\n    area = b + c - a;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a + b > c) {\n    area = a + b - c;\n  } else if (a + c > b) {\n    area = a + c - b;\n  } else if (b + c > a) {\n    area = b + c - a;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a + b > c) {\n    area = a + b - c;\n  } else if (a + c > b) {\n    area = a + c - b;\n  } else if (b + c > a) {\n    area = b + c - a;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a + b > c) {\n    area = a + b - c;\n  } else if (a + c > b) {\n    area = a + c - b;\n  } else if (b + c > a) {\n    area = b + c - a;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a + b > c) {\n    area = a + b - c;\n  } else if (a + c > b) {\n    area = a + c - b;\n  } else if (b + c > a) {\n    area = b + c - a;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a + b > c) {\n    area = a + b - c;\n  } else if (a + c > b) {\n    area = a + c - b;\n  } else if (b + c > a) {\n    area = b + c - a;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a + b > c) {\n    area = a + b - c;\n  } else if (a + c > b) {\n    area = a + c - b;\n  } else if (b + c > a) {\n    area = b + c - a;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a + b > c) {\n    area = a + b - c;\n  } else if (a + c > b) {\n    area = a + c - b;\n  } else if (b + c > a) {\n    area = b + c - a;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a + b > c) {\n    area = a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will vanish, and fake differently. \n   The object q will flee if it's balanced (it is a palindromic list) and the sum of its elements equal less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that returns true if the object q will vanish, and fake differently. \n   The object q will flee if it's balanced (it is a palindromic list) and the sum of its elements equal less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return true;\n  }\n  const max = q.reduce((a, b) => a + b, 0);\n  const sum = q.reduce((a, b) => a + b, 0);\n  if (sum > max) {\n    return false;\n  }\n  if (sum < max - w) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = willItFly;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  let result = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    let change = arr[i];\n    let left = i - 1;\n    let right = i + 1;\n    while (left >= 0 && right < arr.length && arr[left] === arr[right]) {\n      left--;\n      right++;\n    }\n    if (left < 0 || right >= arr.length) {\n      result = Math.min(result, change);\n    } else {\n      result = Math.min(result, change + arr[left] + arr[right]);\n    }\n  }\n  return result;\n};\n\nconsole.log(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  let i = 0;\n  while (i < lst1.length && i < lst2.length) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i]);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nmodule.exports = totalMatch;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the give issue embody the multiplication of 3 premier numbers \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*Write a function that returns true if the give issue embody the multiplication of 3 premier numbers \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime19 = (a) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower(x, n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns on-key \n   if this ingeger is a cube of some integer numeral. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and returns on-key \n   if this ingeger is a cube of some integer numeral. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 3 == 0 && a % 5 == 0 && a % 7 == 0 && a % 11 == 0 && a % 13 == 0 && a % 17 == 0 && a % 19 == 0 && a % 23 == 0 && a % 29 == 0 && a % 31 == 0 && a % 37 == 0 && a % 41 == 0 && a % 43 == 0 && a % 47 == 0 && a % 53 == 0 && a % 59 == 0 && a % 61 == 0 && a % 67 == 0 && a % 71 == 0 && a % 73 == 0 && a % 79 == 0 && a % 83 == 0 && a % 89 == 0 && a % 97 == 0 && a % 101 == 0 && a % 103 == 0 && a % 107 == 0 && a % 109 == 0 && a % 113 == 0 && a % 127 == 0 && a % 131 == 0 && a % 137 == 0 && a % 139 == 0 && a % 149 == 0 && a % 151 == 0 && a % 157 == 0 && a % 163 == 0 && a % 167 == 0 && a % 173 == 0 && a % 179 == 0 && a % 181 == 0 && a % 191 == 0 && a % 193 == 0 && a % 197 == 0 && a % 199 == 0 && a % 211 == 0 && a % 223 == 0 && a % 227 == 0 && a % 229 == 0 && a % 233 == 0 && a % 239 == 0 && a % 241 == 0 && a % 251 == 0 && a % 257 == 0 && a % 263 == 0 && a % 269 == 0 && a % 271 == 0 && a % 277 == 0 && a % 281 == 0 && a % 283 == 0 && a % 293 == 0 && a % 307 == 0 && a % 311 == 0 && a % 313 == 0 && a % 317 == 0 && a % 331 == 0 && a % 337 == 0 && a % 347 == 0 && a % 349 == 0 && a % 353 == 0 && a % 359 == 0 && a % 367 == 0 && a % 373 == 0 && a % 379 == 0 && a % 383 == 0 && a % 389 == 0 && a % 397 == 0 && a % 401 == 0 && a % 409 == 0 && a % 419 == 0 && a % 421 == 0 && a % 431 == 0 && a % 433 == 0 && a % 439 == 0 && a % 443 == 0 && a % 449 == 0 && a % 457 == 0 && a % 461 == 0 && a % 463 == 0 && a % 467 == 0 && a % 479 == 0 && a % 487 == 0 && a % 491 == 0 && a % 499 == 0 && a % 503 == 0 && a % 509 == 0 && a % 521 == 0 && a % 523 == 0 && a % 541 == 0 && a % 547 == 0 && a % 557 == 0 && a % 563 == 0 && a % 569 == 0 && a % 571 == 0 && a % 577 == 0 && a % 587 == 0 && a % 593 == 0 && a % 599 == 0 && a % 601 == 0 && a % 607 == 0 && a % 613 == 0 && a % 617 == 0 && a % 619 == 0 && a % 631 == 0 && a % 641 == 0 && a % 643 == 0 && a % 647 == 0 && a % 653 == 0 && a % 659 == 0 && a % 661 == 0 && a % 673 == 0 && a % 677 == 0 && a % 683 == 0 && a % 691 == 0 && a % 701 == 0 && a % 709 == 0 && a % 719 == 0 && a % 727 == 0 && a % 733 == 0 && a % 739 == 0 && a % 743 == 0 && a % 751 == 0 && a % 757 == 0 && a % 761 == 0 && a % 769 == 0 && a % 773 == 0 && a % 787 == 0 && a % 797 == 0 && a % 809 == 0 && a % 811 == 0 && a % 821 == 0 && a % 823 == 0 && a % 827 == 0 && a % 829 == 0 && a % 839 == 0 && a % 853 == 0 && a % 857 == 0 && a % 859 == 0 && a % 863 == 0 && a % 877 == 0 && a % 881 == 0 && a % 883 == 0 && a % 887 == 0 && a % 907 == 0 && a % 917 == 0 && a % 919 == 0 && a % 929 == 0 && a % 937 == 0 && a % 941 == 0 && a % 947 == 0 && a % 953 == 0 && a % 967 == 0 && a % 971 == 0 && a % 977 == 0 && a % 983 == 0 && a % 991 == 0 && a % 997 == 0 && a % 1009 == 0 && a % 1013 == 0 && a % 1019 == 0 && a % 1021 == 0 && a % 1031 == 0 && a % 1033 == 0 && a % 1039 == 0 && a % 1049 == 0 && a % 1051 == 0 && a % 1061 == 0 && a % 1063 == 0 && a % 1069 == 0 && a % 1087 == 0 && a % 1091 == 0 && a % 1093 == 0 && a % 1097 == 0 && a % 1103 == 0 && a % 1109 == 0 && a % 1117 == 0 && a % 1123 == 0 && a % 1129 == 0 && a % 1151 == 0 && a % 1163 == 0 && a % 1169 == 0 && a % 1171 == 0 && a % 1181 == 0 && a % 1187 == 0 && a % 1193 == 0 && a % 1201 == 0 && a % 1213 == 0 && a % 1217 == 0 && a % 1223 == 0 && a % 1229 == 0 && a % 1231 == 0 && a % 1237 == 0 && a % 1249 == 0 && a % 1259 == 0 && a % 1261 == 0 && a % 1267 == 0 && a % 1277 == 0 && a % 1279 == 0 && a % 1283 == 0 && a % 1289 == 0 && a % 1297 == 0 && a % 1301 == 0 && a % 1303 == 0 && a % 1307 == 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives \n   a hexadecimal issue as a drawstring and consider the numeral of hexadecimal \n   digits that equal primes (prime number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two smaller lifelike act). \n   Hexadecimal finger are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers pool are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you have to settle a act of the following digits: 2=== 3=== 5=== 7=== \n   b-complex vitamin (= decimal 11)=== vitamin d (= decimal 13). \n   Note: you may simulate the input is constantly right or empty string=== \n   and symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*You have been tasked to write a function that receives \n   a hexadecimal issue as a drawstring and consider the numeral of hexadecimal \n   digits that equal primes (prime number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two smaller lifelike act). \n   Hexadecimal finger are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers pool are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you have to settle a act of the following digits: 2=== 3=== 5=== 7=== \n   b-complex vitamin (= decimal 11)=== vitamin d (= decimal 13). \n   Note: you may simulate the input is constantly right or empty string=== \n   and symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let numDigits = num.length;\n  let numDigitsArray = num.split(\"\");\n  for (let i = 0; i < numDigitsArray.length; i++) {\n    let numDigit = numDigitsArray[i];\n    let numDigitArray = numDigit.split(\"\");\n    for (let j = 0; j < numDigitArray.length; j++) {\n      let numDigitArrayElement = numDigitArray[j];\n      if (numDigitArrayElement.length === 1) {\n        result += parseInt(numDigitArrayElement, 10);\n      } else if (numDigitArrayElement.length === 2) {\n        result += parseInt(numDigitArrayElement, 16);\n      }\n    }\n  }\n  return result;\n};\n\nconst hexKey2 = (num) => {\n  let result = 0;\n  let numDigits = num.length;\n  let numDigitsArray = num.split(\"\");\n  for (let i = 0; i < numDigitsArray.length; i++) {\n    let numDigit = numDigitsArray[i];\n    let numDigitArray = numDigit.split(\"\");\n    for (let j = 0; j < numDigitArray.length; j++) {\n      let numDigitArrayElement = numDigitArray[j];\n      if (numDigitArrayElement.length === 1) {\n        result += parseInt(numDigitArrayElement, 10);\n      } else if (numDigitArrayElement.length === 2) {\n        result += parseInt(numDigitArrayElement, 16);\n      }\n    }\n  }\n  return result;\n};\n\nconst hexKey3 = (num) => {\n  let result = 0;\n  let numDigits = num.length;\n  let numDigitsArray = num.split(\"\");\n  for (let i = 0; i < numDigitsArray.length; i++) {\n    let numDigit = numDigitsArray[i];\n    let numDigitArray = numDigit.split(\"\");\n    for (let j = 0; j < numDigitArray.length; j++) {\n      let numDigitArrayElement = numDigitArray[j];\n      if (numDigitArrayElement.length === 1) {\n        result += parseInt(numDigitArrayElement, 10);\n      } else if (numDigitArrayElement.length === 2) {\n        result += parseInt(numDigitArrayElement, 16);\n      }\n    }\n  }\n  return result;\n};\n\nconst hexKey4 = (num) => {\n  let result = 0;\n  let numDigits = num.length;\n  let numDigitsArray = num.split(\"\");\n  for (let i = 0; i < numDigitsArray.length; i++) {\n    let numDigit = numDigitsArray[i];\n    let numDigitArray = numDigit.split(\"\");\n    for (let j = 0; j < numDigitArray.length; j++) {\n      let numDigitArrayElement = numDigitArray[j];\n      if (numDigitArrayElement.length === 1) {\n        result += parseInt(numDigitArrayElement, 10);\n      } else if (numDigitArrayElement.length === 2) {\n        result += parseInt(numDigitArrayElement, 16);\n      }\n    }\n  }\n  return result;\n};\n\nconst hexKey5 = (num) => {\n  let result = 0;\n  let numDigits = num.length;\n  let numDigitsArray = num.split(\"\");\n  for (let i = 0; i < numDigitsArray.length; i++) {\n    let numDigit = numDigitsArray[i];\n    let numDigitArray = numDigit.split(\"\");\n    for (let j = 0; j < numDigitArray.length; j++) {\n      let numDigitArrayElement = numDigitArray[j];\n      if (numDigitArrayElement.length === 1) {\n        result += parseInt(numDigitArrayElement, 10);\n      } else if (numDigitArrayElement.length === 2) {\n        result += parseInt(numDigitArrayElement, 16);\n      }\n    }\n  }\n  return result;\n};\n\nconst hexKey6 = (num) => {\n  let result = 0;\n  let numDigits = num.length;\n  let numDigitsArray = num.split(\"\");\n  for (let i = 0; i < numDigitsArray.length; i++) {\n    let numDigit = numDigitsArray[i];\n    let numDigitArray = numDigit.split(\"\");\n    for (let j = 0; j < numDigitArray.length; j++) {\n      let numDigitArrayElement = numDigitArray[j];\n      if (numDigitArrayElement.length === 1) {\n        result += parseInt(numDigitArrayElement, 10);\n      } else if (numDigitArrayElement.length === 2) {\n        result += parseInt(numDigitArray", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to commute it to \n   binary format. The function should return a string, with each fictional character representing a binary \n   phone number. Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*You will be given a number in decimal form and your task is to commute it to \n   binary format. The function should return a string, with each fictional character representing a binary \n   phone number. Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binary_number = \"\";\n  let binary_number_length = 0;\n  let binary_number_length_temp = 0;\n  let binary_number_length_temp_temp = 0;\n  let binary_number_length_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  let binary_number_length_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integer in a list.\n   Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integer in a list.\n   Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\nconst test = () => {\n  let [sum, product] = sumProduct([1, 2, 3, 4])\n  console.log(sum, product)\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task is to check if the string is glad or not. \n   A drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*You are given a string s.\n   Your task is to check if the string is glad or not. \n   A drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let i = 0;\n  while (i < len) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      i++;\n      continue;\n    }\n    if (c === 'b' || c === 'c' || c === 'd' || c === 'f' || c === 'g' || c === 'h' || c === 'j' || c === 'k' || c === 'l' || c ==='m' || c === 'n' || c === 'p' || c === 'q' || c === 'r' || c ==='s' || c === 't' || c === 'v' || c === 'w' || c === 'x' || c === 'y' || c === 'z') {\n      i++;\n      continue;\n    }\n    if (c === 'A' || c === 'E' || c === 'I' || c === 'O' || c === 'U') {\n      i++;\n      continue;\n    }\n    if (c === 'B' || c === 'C' || c === 'D' || c === 'F' || c === 'G' || c === 'H' || c === 'J' || c === 'K' || c === 'L' || c === 'M' || c === 'N' || c === 'P' || c === 'Q' || c === 'R' || c === 'S' || c === 'T' || c === 'V' || c === 'W' || c === 'X' || c === 'Y' || c === 'Z') {\n      i++;\n      continue;\n    }\n    if (c === '0' || c === '1' || c === '2' || c === '3' || c === '4' || c === '5' || c === '6' || c === '7' || c === '8' || c === '9') {\n      i++;\n      continue;\n    }\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = isHappy;<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher hold to grant the grades\n   to student. The teacher has been make her own algorithm for grade. \n   The lone trouble is, she has lost the code she use for grading. \n   She has given you a list of grade point average for some student and you consume to write \n   a routine that can output a list of letter grades use the come mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher hold to grant the grades\n   to student. The teacher has been make her own algorithm for grade. \n   The lone trouble is, she has lost the code she use for grading. \n   She has given you a list of grade point average for some student and you consume to write \n   a routine that can output a list of letter grades use the come mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradeList = []\n  grades.forEach((grade) => {\n    if (grade > 3.7) {\n      gradeList.push('A+')\n    } else if (grade > 3.3) {\n      gradeList.push('A')\n    } else if (grade > 3.0) {\n      gradeList.push('A-')\n    } else if (grade > 2.7) {\n      gradeList.push('B+')\n    } else if (grade > 2.3) {\n      gradeList.push('B')\n    } else if (grade > 2.0) {\n      gradeList.push('B-')\n    } else if (grade > 1.7) {\n      gradeList.push('C+')\n    } else if (grade > 1.3) {\n      gradeList.push('C')\n    } else if (grade > 1.0) {\n      gradeList.push('C-')\n    } else if (grade > 0.7) {\n      gradeList.push('D+')\n    } else if (grade > 0.0) {\n      gradeList.push('D')\n    } else {\n      gradeList.push('E')\n    }\n  })\n  return gradeList\n}\n\nmodule.exports = numericalLetterGrade\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let prime = true;\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i) === string.charAt(i - 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   plus integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   plus integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   let count = 0;\n   for (let i = 1; i <= n; i++) {\n     if (i === 1 || i === n) {\n       count += 1;\n     }\n   }\n   return count;\n }\n * / \n * @param {number} n\n * @return {number}\n */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = startsOneEnds;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [...new Array(N + 1).keys()].map((digit, index) => {\n    return digit === 0? 0 : 1 << index;\n  });\n  const sum = digits.reduce((acc, digit) => acc + digit, 0);\n  return digits.map((digit, index) => {\n    return sum % 2 === 0? digit : digit + 1;\n  });\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nmodule.exports = add\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an coherent translation of it. \n   order interpretation of string, is a string where all words (separate by quad) \n   are replaced by a newfangled news where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should continue the decree of words and blank spaces in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes a string and returns an coherent translation of it. \n   order interpretation of string, is a string where all words (separate by quad) \n   are replaced by a newfangled news where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should continue the decree of words and blank spaces in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s1 = 0;\n  let s2 = 0;\n  let s3 = 0;\n  let s4 = 0;\n  let s5 = 0;\n  let s6 = 0;\n  let s7 = 0;\n  let s8 = 0;\n  let s9 = 0;\n  let s10 = 0;\n  let s11 = 0;\n  let s12 = 0;\n  let s13 = 0;\n  let s14 = 0;\n  let s15 = 0;\n  let s16 = 0;\n  let s17 = 0;\n  let s18 = 0;\n  let s19 = 0;\n  let s20 = 0;\n  let s21 = 0;\n  let s22 = 0;\n  let s23 = 0;\n  let s24 = 0;\n  let s25 = 0;\n  let s26 = 0;\n  let s27 = 0;\n  let s28 = 0;\n  let s29 = 0;\n  let s30 = 0;\n  let s31 = 0;\n  let s32 = 0;\n  let s33 = 0;\n  let s34 = 0;\n  let s35 = 0;\n  let s36 = 0;\n  let s37 = 0;\n  let s38 = 0;\n  let s39 = 0;\n  let s40 = 0;\n  let s41 = 0;\n  let s42 = 0;\n  let s43 = 0;\n  let s44 = 0;\n  let s45 = 0;\n  let s46 = 0;\n  let s47 = 0;\n  let s48 = 0;\n  let s49 = 0;\n  let s50 = 0;\n  let s51 = 0;\n  let s52 = 0;\n  let s53 = 0;\n  let s54 = 0;\n  let s55 = 0;\n  let s56 = 0;\n  let s57 = 0;\n  let s58 = 0;\n  let s59 = 0;\n  let s60 = 0;\n  let s61 = 0;\n  let s62 = 0;\n  let s63 = 0;\n  let s64 = 0;\n  let s65 = 0;\n  let s66 = 0;\n  let s67 = 0;\n  let s68 = 0;\n  let s69 = 0;\n  let s70 = 0;\n  let s71 = 0;\n  let s72 = 0;\n  let s73 = 0;\n  let s74 = 0;\n  let s75 = 0;\n  let s76 = 0;\n  let s77 = 0;\n  let s78 = 0;\n  let s79 = 0;\n  let s80 = 0;\n  let s81 = 0;\n  let s82 = 0;\n  let s83 = 0;\n  let s84 = 0;\n  let s85 = 0;\n  let s86 = 0;\n  let s87 = 0;\n  let s88 = 0;\n  let s89 = 0;\n  let s90 = 0;\n  let s91 = 0;\n  let s92 = 0;\n  let s93 = 0;\n  let s94 = 0;\n  let s95 = 0;\n  let s96 = 0;\n  let s97 = 0;\n  let s98 = 0;\n  let s99 = 0;\n  let s100 = 0;\n  let s101 = 0;\n  let s102 = 0;\n  let s103 = 0;\n  let s104 = 0;\n  let s105 = 0;\n  let s106 = 0;\n  let s107 = 0;\n  let s108 = 0;\n  let s109 = 0;\n  let s110 = 0;\n  let s111 = 0;\n  let s112 = 0;\n  let s113 = 0;\n  let s114 = 0;\n  let s115 = 0;\n  let s116 = 0;\n  let s117 = 0;\n  let s118 = 0;\n  let s119 = 0;\n  let s120 = 0;\n  let s121 = 0;\n  let s122 = 0;\n  let s123 = 0;\n  let s124 = 0;\n  let s125 = 0;\n  let s126 = 0;\n  let s127 = 0;\n  let s128 = 0;\n  let s129 = 0;\n  let s130 = 0;\n  let s131 = 0;\n  let s132 = 0;\n  let s133 = 0;\n  let s134 = 0;\n  let s135 = 0;\n  let s136 = 0;\n  let s137 = 0;\n  let s138 = 0;\n  let s139 = 0;\n  let s140 = 0;\n  let s141 = 0;\n  let s142 = 0;\n  let s143 = 0;\n  let s144 = 0;\n  let s145 = 0;\n  let s146 = 0;\n  let s147 = 0;\n  let s148 = 0;\n  let s149 = 0;\n  let s150 = 0;\n  let s151 = 0;\n  let s152 = 0;\n  let s153 = 0;\n  let s154 = 0;\n  let s155 = 0;\n  let s156 = 0;\n  let s157 = 0;\n  let s158 = 0;\n  let s159 = 0;\n  let s160 = 0;\n  let s161 = 0;\n  let s162 = 0;\n  let s163 = 0;\n  let s164", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists, \n   which be like to matrix, however, unlike matrix, \n   each quarrel may hold a different number of column. \n   Given lst, and integer x, detect integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (rowing, columns), starting with 0. \n   Sort coordinates initially by course in ascending order. \n   Also, kind coordinates of the rowing by column in fall ordering.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists, \n   which be like to matrix, however, unlike matrix, \n   each quarrel may hold a different number of column. \n   Given lst, and integer x, detect integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (rowing, columns), starting with 0. \n   Sort coordinates initially by course in ascending order. \n   Also, kind coordinates of the rowing by column in fall ordering.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const result = [];\n  const sorted = sortBy(lst, (row, i) => row[x]);\n  for (let i = 0; i < sorted.length; i++) {\n    result.push([...sorted[i], i]);\n  }\n  return result;\n};\n\nconst sortBy = (lst, key) => {\n  return lst.sort((a, b) => a[key] - b[key]);\n};\n\nconst getColumn = (lst, y) => {\n  const result = [];\n  const sorted = sortBy(lst, (row, i) => row[y]);\n  for (let i = 0; i < sorted.length; i++) {\n    result.push([i,...sorted[i]]);\n  }\n  return result;\n};\n\nconst getRowColumn = (lst, x, y) => {\n  const result = [];\n  const sorted = sortBy(lst, (row, i) => row[x] - row[y]);\n  for (let i = 0; i < sorted.length; i++) {\n    result.push([...sorted[i], i, i]);\n  }\n  return result;\n};\n\nconst getRowColumns = (lst, x, y) => {\n  const result = [];\n  const sorted = sortBy(lst, (row, i) => row[x] - row[y]);\n  for (let i = 0; i < sorted.length; i++) {\n    result.push([...sorted[i], i, i]);\n  }\n  return result;\n};\n\nconst getRowColumns2 = (lst, x, y) => {\n  const result = [];\n  const sorted = sortBy(lst, (row, i) => row[x] - row[y]);\n  for (let i = 0; i < sorted.length; i++) {\n    result.push([...sorted[i], i, i]);\n  }\n  return result;\n};\n\nconst getRowColumns3 = (lst, x, y) => {\n  const result = [];\n  const sorted = sortBy(lst, (row, i) => row[x] - row[y]);\n  for (let i = 0; i < sorted.length; i++) {\n    result.push([...sorted[i], i, i]);\n  }\n  return result;\n};\n\nconst getRowColumns4 = (lst, x, y) => {\n  const result = [];\n  const sorted = sortBy(lst, (row, i) => row[x] - row[y]);\n  for (let i = 0; i < sorted.length; i++) {\n    result.push([...sorted[i], i, i]);\n  }\n  return result;\n};\n\nconst getRowColumns5 = (lst, x, y) => {\n  const result = [];\n  const sorted = sortBy(lst, (row, i) => row[x] - row[y]);\n  for (let i = 0; i < sorted.length; i++) {\n    result.push([...sorted[i], i, i]);\n  }\n  return result;\n};\n\nconst getRowColumns6 = (lst, x, y) => {\n  const result = [];\n  const sorted = sortBy(lst, (row, i) => row[x] - row[y]);\n  for (let i = 0; i < sorted.length; i++) {\n    result.push([...sorted[i], i, i]);\n  }\n  return result;\n};\n\nconst getRowColumns7 = (lst, x, y) => {\n  const result = [];\n  const sorted = sortBy(lst, (row, i) => row[x] - row[y]);\n  for (let i = 0; i < sorted.length; i++) {\n    result.push([...sorted[i], i, i]);\n  }\n  return result;\n};\n\nconst getRowColumns8 = (lst, x, y) => {\n  const result = [];\n  const sorted = sortBy(lst, (row, i) => row[x] - row[y]);\n  for (let i = 0; i < sorted.length; i++) {\n    result.push([...sorted[i], i, i]);\n  }\n  return result;\n};\n\nconst getRowColumns9 = (lst, x, y) => {\n  const result = [];\n  const sorted = sortBy(lst, (row, i) => row[x] - row[y]);\n  for (let i = 0; i < sorted.length; i++) {\n    result.push([...sorted[i], i, i]);\n  }\n  return result;\n};\n\nconst getRowColumns10 = (lst, x, y) => {\n  const result = [];\n  const sorted = sortBy(lst, (row, i) => row[x] - row[y]);\n  for (let i = 0; i < sorted.length; i++) {\n    result.push([...sorted[i], i, i]);\n  }\n  return result;\n};\n\nconst getRowColumns11 = (lst, x, y) => {\n  const result = [];\n  const sorted", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let result = [];\n  let sum = 0;\n  let i = 0;\n  let j = array.length - 1;\n  while (i < j) {\n    if (sum % 2 === 0) {\n      sum = sum + array[i];\n      result.push(array[i]);\n      i++;\n    } else {\n      sum = sum + array[j];\n      result.push(array[j]);\n      j--;\n    }\n  }\n  if (sum % 2 === 0) {\n    sum = sum + array[i];\n    result.push(array[i]);\n  } else {\n    sum = sum + array[j];\n    result.push(array[j]);\n  }\n  return result;\n};\n\nmodule.exports = sortArray;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch down by two multiplied to two seat.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*Create a function encrypt that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch down by two multiplied to two seat.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let code = '';\n  let rotate = 0;\n  let rotate2 = 0;\n  for (let i = 0; i < s.length; i++) {\n    let letter = s.charAt(i);\n    if (letter === 'a') {\n      rotate += 2;\n      rotate2 += 2;\n    } else if (letter === 'e') {\n      rotate += 1;\n      rotate2 += 1;\n    } else if (letter === 'i') {\n      rotate += 0;\n      rotate2 += 0;\n    } else if (letter === 'o') {\n      rotate += 3;\n      rotate2 += 3;\n    } else if (letter === 'u') {\n      rotate += 5;\n      rotate2 += 5;\n    } else if (letter === 'h') {\n      rotate += 4;\n      rotate2 += 4;\n    } else if (letter === 'k') {\n      rotate += 6;\n      rotate2 += 6;\n    } else if (letter === 'l') {\n      rotate += 7;\n      rotate2 += 7;\n    } else if (letter ==='m') {\n      rotate += 8;\n      rotate2 += 8;\n    } else if (letter === 'n') {\n      rotate += 9;\n      rotate2 += 9;\n    } else if (letter === 'r') {\n      rotate += 10;\n      rotate2 += 10;\n    } else if (letter ==='s') {\n      rotate += 11;\n      rotate2 += 11;\n    } else if (letter === 't') {\n      rotate += 12;\n      rotate2 += 12;\n    } else if (letter === 'v') {\n      rotate += 13;\n      rotate2 += 13;\n    } else if (letter === 'w') {\n      rotate += 14;\n      rotate2 += 14;\n    } else if (letter === 'x') {\n      rotate += 15;\n      rotate2 += 15;\n    } else if (letter === 'y') {\n      rotate += 16;\n      rotate2 += 16;\n    } else if (letter === 'z') {\n      rotate += 17;\n      rotate2 += 17;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    let letter = s.charAt(i);\n    if (letter === 'a') {\n      code += 'a' + rotate;\n      code += 'a' + rotate2;\n    } else if (letter === 'e') {\n      code += 'e' + rotate;\n      code += 'e' + rotate2;\n    } else if (letter === 'i') {\n      code += 'i' + rotate;\n      code += 'i' + rotate2;\n    } else if (letter === 'o') {\n      code += 'o' + rotate;\n      code += 'o' + rotate2;\n    } else if (letter === 'u') {\n      code += 'u' + rotate;\n      code += 'u' + rotate2;\n    } else if (letter === 'h') {\n      code += 'h' + rotate;\n      code += 'h' + rotate2;\n    } else if (letter === 'k') {\n      code += 'k' + rotate;\n      code += 'k' + rotate2;\n    } else if (letter === 'l') {\n      code += 'l' + rotate;\n      code += 'l' + rotate2;\n    } else if (letter ==='m') {\n      code +='m' + rotate;\n      code +='m' + rotate2;\n    } else if (letter === 'n') {\n      code += 'n' + rotate;\n      code += 'n' + rotate2;\n    } else if (letter === 'r') {\n      code += 'r' + rotate;\n      code += 'r' + rotate2;\n    } else if (letter ==='s') {\n      code +='s' + rotate;\n      code +='s' + rotate2;\n    } else if (letter === 't') {\n      code += 't' + rotate;\n      code += 't' + rotate2;\n    } else if (letter === 'v') {\n      code += 'v' + rotate;\n      code += 'v' + rotate2;\n    } else if (letter === 'w') {\n      code += 'w' + rotate;\n      code += 'w' + rotate2;\n    } else if (letter === 'x') {\n      code += 'x' + rotate;\n      code += 'x' + rotate2;\n    } else if (letter === 'y') {\n      code += 'y' + rotate;\n      code += 'y' + rotate2;\n    } else if (letter === 'z') {\n      code += 'z' + rotate;\n      code += 'z' + rotate2;\n    }\n  }\n  return code;\n};\n\nmodule.exports = encrypt;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum component witness until given here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* From a given list of integers, generate a list of rolling maximum component witness until given here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxIndex2 = 0;\n  let maxIndex3 = 0;\n  let maxIndex4 = 0;\n  let maxIndex5 = 0;\n  let maxIndex6 = 0;\n  let maxIndex7 = 0;\n  let maxIndex8 = 0;\n  let maxIndex9 = 0;\n  let maxIndex10 = 0;\n  let maxIndex11 = 0;\n  let maxIndex12 = 0;\n  let maxIndex13 = 0;\n  let maxIndex14 = 0;\n  let maxIndex15 = 0;\n  let maxIndex16 = 0;\n  let maxIndex17 = 0;\n  let maxIndex18 = 0;\n  let maxIndex19 = 0;\n  let maxIndex20 = 0;\n  let maxIndex21 = 0;\n  let maxIndex22 = 0;\n  let maxIndex23 = 0;\n  let maxIndex24 = 0;\n  let maxIndex25 = 0;\n  let maxIndex26 = 0;\n  let maxIndex27 = 0;\n  let maxIndex28 = 0;\n  let maxIndex29 = 0;\n  let maxIndex30 = 0;\n  let maxIndex31 = 0;\n  let maxIndex32 = 0;\n  let maxIndex33 = 0;\n  let maxIndex34 = 0;\n  let maxIndex35 = 0;\n  let maxIndex36 = 0;\n  let maxIndex37 = 0;\n  let maxIndex38 = 0;\n  let maxIndex39 = 0;\n  let maxIndex40 = 0;\n  let maxIndex41 = 0;\n  let maxIndex42 = 0;\n  let maxIndex43 = 0;\n  let maxIndex44 = 0;\n  let maxIndex45 = 0;\n  let maxIndex46 = 0;\n  let maxIndex47 = 0;\n  let maxIndex48 = 0;\n  let maxIndex49 = 0;\n  let maxIndex50 = 0;\n  let maxIndex51 = 0;\n  let maxIndex52 = 0;\n  let maxIndex53 = 0;\n  let maxIndex54 = 0;\n  let maxIndex55 = 0;\n  let maxIndex56 = 0;\n  let maxIndex57 = 0;\n  let maxIndex58 = 0;\n  let maxIndex59 = 0;\n  let maxIndex60 = 0;\n  let maxIndex61 = 0;\n  let maxIndex62 = 0;\n  let maxIndex63 = 0;\n  let maxIndex64 = 0;\n  let maxIndex65 = 0;\n  let maxIndex66 = 0;\n  let maxIndex67 = 0;\n  let maxIndex68 = 0;\n  let maxIndex69 = 0;\n  let maxIndex70 = 0;\n  let maxIndex71 = 0;\n  let maxIndex72 = 0;\n  let maxIndex73 = 0;\n  let maxIndex74 = 0;\n  let maxIndex75 = 0;\n  let maxIndex76 = 0;\n  let maxIndex77 = 0;\n  let maxIndex78 = 0;\n  let maxIndex79 = 0;\n  let maxIndex80 = 0;\n  let maxIndex81 = 0;\n  let maxIndex82 = 0;\n  let maxIndex83 = 0;\n  let maxIndex84 = 0;\n  let maxIndex85 = 0;\n  let maxIndex86 = 0;\n  let maxIndex87 = 0;\n  let maxIndex88 = 0;\n  let maxIndex89 = 0;\n  let maxIndex90 = 0;\n  let maxIndex91 = 0;\n  let maxIndex92 = 0;\n  let maxIndex93 = 0;\n  let maxIndex94 = 0;\n  let maxIndex95 = 0;\n  let maxIndex96 = 0;\n  let maxIndex97 = 0;\n  let maxIndex98 = 0;\n  let maxIndex99 = 0;\n  let maxIndex100 = 0;\n  let maxIndex101 = 0;\n  let maxIndex102 = 0;\n  let maxIndex103 = 0;\n  let maxIndex104 = 0;\n  let maxIndex105 = 0;\n  let maxIndex106 = 0;\n  let maxIndex107 = 0;\n  let maxIndex108 = 0;\n  let maxIndex109 = 0;\n  let maxIndex110 = 0;\n  let maxIndex111 = 0;\n  let maxIndex112 = 0;\n  let maxIndex113 = 0;\n  let maxIndex114 = 0;\n  let maxIndex115 = 0;\n  let maxIndex116 = 0;\n  let maxIndex117 = 0;\n  let maxIndex118 = 0;\n  let maxIndex119 = 0;\n  let maxIndex120 = 0;\n  let maxIndex121 = 0;\n  let maxIndex122 = 0;\n  let maxIndex123 = 0;\n  let maxIndex124 = 0;\n  let maxIndex125 = 0;\n  let maxIndex126 = 0;\n  let maxIndex127 = 0;\n  let maxIndex128 = 0;\n  let maxIndex129 = 0;\n  let maxIndex130 = 0;\n  let maxIndex131 = 0;\n  let maxIndex132 = 0;\n  let maxIndex133 = 0;\n  let maxIndex134 = 0;\n  let maxIndex135 = 0;\n  let maxIndex136 = 0;\n  let maxIndex137 = 0;\n  let maxIndex138 = 0;\n  let maxIndex139 = 0;\n  let maxIndex140 = 0;\n  let maxIndex141 = 0;\n  let maxIndex142 = 0;\n  let maxIndex143 = 0;\n  let maxIndex144 = 0;\n  let maxIndex145 = 0;\n  let maxIndex146 = 0;\n  let maxIndex147 = 0;\n  let maxIndex148 = 0;\n  let maxIndex149 = 0;\n  let maxIndex150 = 0;\n  let maxIndex151 = 0;\n  let maxIndex152 = 0;\n  let maxIndex153 = 0;\n  let maxIndex154 = 0;\n  let maxIndex155 = 0;\n  let maxIndex156 = 0;\n  let maxIndex157 = 0;\n  let maxIndex158 = 0;\n  let maxIndex159 = 0;\n  let maxIndex160 = 0;\n  let maxIndex161 = 0;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that returns the second smallest element of the list.\n   Return null if there be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that returns the second smallest element of the list.\n   Return null if there be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  const arr = lst.slice(0);\n  const smallest = arr.reduce((a, b) => a < b? a : b);\n  return smallest;\n }\n*/\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr.reduce((a, b) => a < b? a : b);\n  return smallest;\n};\n\nmodule.exports = nextSmallest;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0\n  let isBored = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Create a function that takes 3 numbers. \n  Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n  Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt2 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Create a function that takes 3 numbers. \n  Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n  Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Create a function that takes 3 numbers. \n  Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n  Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Create a function that takes 3 numbers. \n  Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n  Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Create a function that takes 3 numbers. \n  Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n  Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Create a function that takes 3 numbers. \n  Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n  Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt7 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Create a function that takes 3 numbers. \n  Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n  Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt8 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Create a function that takes 3 numbers. \n  Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n  Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt9 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Create a function that takes 3 numbers. \n  Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n  Returns assumed in", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  let i = 0\n  while (i < message.length) {\n    let letter = message[i]\n    let nextLetter = message[i + 1]\n    if (letter === nextLetter) {\n      result += letter.toUpperCase()\n    } else {\n      result += letter.toLowerCase()\n    }\n    i += 2\n  }\n  return result\n}\n\nmodule.exports = encode\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need to find the largest choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need to find the largest choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    let curr = lst[i];\n    if (curr > max) {\n      max = curr;\n    }\n    sum += curr;\n    i++;\n  }\n  return max;\n};\n\nconst test = [\n  [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3],\n  [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1],\n  [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3],\n  [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6],\n  [0, 81, 12, 3, 1, 21]\n];\n\nconsole.log(skjkasdkd(test[0]));\nconsole.log(skjkasdkd(test[1]));\nconsole.log(skjkasdkd(test[2]));\nconsole.log(skjkasdkd(test[3]));\nconsole.log(skjkasdkd(test[4]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) {\n    return [];\n  }\n  if (n === 1) {\n    return [2];\n  }\n  if (n === 2) {\n    return [2, 3];\n  }\n  if (n === 3) {\n    return [2, 3, 5];\n  }\n  if (n === 4) {\n    return [2, 3, 5, 7];\n  }\n  if (n === 5) {\n    return [2, 3, 5, 7, 11];\n  }\n  if (n === 6) {\n    return [2, 3, 5, 7, 11, 13];\n  }\n  if (n === 7) {\n    return [2, 3, 5, 7, 11, 13, 17];\n  }\n  if (n === 8) {\n    return [2, 3, 5, 7, 11, 13, 17, 19];\n  }\n  if (n === 9) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23];\n  }\n  if (n === 10) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29];\n  }\n  if (n === 11) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33];\n  }\n  if (n === 12) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37];\n  }\n  if (n === 13) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41];\n  }\n  if (n === 14) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45];\n  }\n  if (n === 15) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49];\n  }\n  if (n === 16) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53];\n  }\n  if (n === 17) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57];\n  }\n  if (n === 18) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61];\n  }\n  if (n === 19) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65];\n  }\n  if (n === 20) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69];\n  }\n  if (n === 21) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73];\n  }\n  if (n === 22) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 79];\n  }\n  if (n === 23) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 79, 83];\n  }\n  if (n === 24) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 79, 83, 89];\n  }\n  if (n === 25) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 79, 83, 89, 93];\n  }\n  if (n === 26) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 79, 83, 89, 93, 97];\n  }\n  if (n === 27) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 79, 83, 89, 93, 97, 101];\n  }\n  if (n === 28) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 79, 83, 89, 93, 97, 101, 105];\n  }\n  if (n === 29) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 79, 83, 89, 93, 97, 101, 105, 109];\n  }\n  if (n === 30) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n   the intersection of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*Complete the function that takes two integers and returns \n   the intersection of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === b % 10) {\n      result += a % 10;\n      a = a / 10;\n      b = b / 10;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\n// Complete the function below.\nconst isPalindrome = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n = n / 10;\n  }\n  return result % 2 === 0;\n};\n\n// Your function will be called like this:\n// function myFunction(a, b) {\n//   // Write your code here\n// }\n\n// Refactored Solution\n\n// Complete the function below.\nconst isPalindrome = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n = n / 10;\n  }\n  return result % 2 === 0;\n};\n\n// Reflection\n/*\nWhat was it like to approach the problem from the perspective of\nwriting a function?\n\nIt was a bit challenging to write a function. I was able to get the\nfunction to work, but I was not able to get it to run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it\nto run.\n\nI was able to get the function to work, but I was not able to get it", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string s, count the number of uppercase vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 2;\n    } else {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a issue \n   and retort the close integer to it. If the numeral is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* Create a function that takes a value (string) representing a issue \n   and retort the close integer to it. If the numeral is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let numeral = value.toString();\n  let numeralLength = numeral.length;\n  let integer = 0;\n  let decimal = 0;\n  let decimalLength = 0;\n  let decimalIndex = 0;\n  let integerIndex = 0;\n  let decimalIndex2 = 0;\n  let integerIndex2 = 0;\n  let decimalIndex3 = 0;\n  let integerIndex3 = 0;\n  let decimalIndex4 = 0;\n  let integerIndex4 = 0;\n  let decimalIndex5 = 0;\n  let integerIndex5 = 0;\n  let decimalIndex6 = 0;\n  let integerIndex6 = 0;\n  let decimalIndex7 = 0;\n  let integerIndex7 = 0;\n  let decimalIndex8 = 0;\n  let integerIndex8 = 0;\n  let decimalIndex9 = 0;\n  let integerIndex9 = 0;\n  let decimalIndex10 = 0;\n  let integerIndex10 = 0;\n  let decimalIndex11 = 0;\n  let integerIndex11 = 0;\n  let decimalIndex12 = 0;\n  let integerIndex12 = 0;\n  let decimalIndex13 = 0;\n  let integerIndex13 = 0;\n  let decimalIndex14 = 0;\n  let integerIndex14 = 0;\n  let decimalIndex15 = 0;\n  let integerIndex15 = 0;\n  let decimalIndex16 = 0;\n  let integerIndex16 = 0;\n  let decimalIndex17 = 0;\n  let integerIndex17 = 0;\n  let decimalIndex18 = 0;\n  let integerIndex18 = 0;\n  let decimalIndex19 = 0;\n  let integerIndex19 = 0;\n  let decimalIndex20 = 0;\n  let integerIndex20 = 0;\n  let decimalIndex21 = 0;\n  let integerIndex21 = 0;\n  let decimalIndex22 = 0;\n  let integerIndex22 = 0;\n  let decimalIndex23 = 0;\n  let integerIndex23 = 0;\n  let decimalIndex24 = 0;\n  let integerIndex24 = 0;\n  let decimalIndex25 = 0;\n  let integerIndex25 = 0;\n  let decimalIndex26 = 0;\n  let integerIndex26 = 0;\n  let decimalIndex27 = 0;\n  let integerIndex27 = 0;\n  let decimalIndex28 = 0;\n  let integerIndex28 = 0;\n  let decimalIndex29 = 0;\n  let integerIndex29 = 0;\n  let decimalIndex30 = 0;\n  let integerIndex30 = 0;\n  let decimalIndex31 = 0;\n  let integerIndex31 = 0;\n  let decimalIndex32 = 0;\n  let integerIndex32 = 0;\n  let decimalIndex33 = 0;\n  let integerIndex33 = 0;\n  let decimalIndex34 = 0;\n  let integerIndex34 = 0;\n  let decimalIndex35 = 0;\n  let integerIndex35 = 0;\n  let decimalIndex36 = 0;\n  let integerIndex36 = 0;\n  let decimalIndex37 = 0;\n  let integerIndex37 = 0;\n  let decimalIndex38 = 0;\n  let integerIndex38 = 0;\n  let decimalIndex39 = 0;\n  let integerIndex39 = 0;\n  let decimalIndex40 = 0;\n  let integerIndex40 = 0;\n  let decimalIndex41 = 0;\n  let integerIndex41 = 0;\n  let decimalIndex42 = 0;\n  let integerIndex42 = 0;\n  let decimalIndex43 = 0;\n  let integerIndex43 = 0;\n  let decimalIndex44 = 0;\n  let integerIndex44 = 0;\n  let decimalIndex45 = 0;\n  let integerIndex45 = 0;\n  let decimalIndex46 = 0;\n  let integerIndex46 = 0;\n  let decimalIndex47 = 0;\n  let integerIndex47 = 0;\n  let decimalIndex48 = 0;\n  let integerIndex48 = 0;\n  let decimalIndex49 = 0;\n  let integerIndex49 = 0;\n  let decimalIndex50 = 0;\n  let integerIndex50 = 0;\n  let decimalIndex51 = 0;\n  let integerIndex51 = 0;\n  let decimalIndex52 = 0;\n  let integerIndex52 = 0;\n  let decimalIndex53 = 0;\n  let integerIndex53 = 0;\n  let decimalIndex54 = 0;\n  let integerIndex54 = 0;\n  let decimalIndex55 = 0;\n  let integerIndex55 = 0;\n  let decimalIndex56 = 0;\n  let integerIndex56 = 0;\n  let decimalIndex57 = 0;\n  let integerIndex57 = 0;\n  let decimalIndex58 = 0;\n  let integerIndex58 = 0;\n  let decimalIndex59 = 0;\n  let integerIndex59 = 0;\n  let decimalIndex60 = 0;\n  let integerIndex60 = 0;\n  let decimalIndex61 = 0;\n  let integerIndex61 = 0;\n  let decimalIndex62 = 0;\n  let integerIndex62 = 0;\n  let decimalIndex63 = 0;\n  let integerIndex63 = 0;\n  let decimalIndex64 = 0;\n  let integerIndex64 = 0;\n  let decimalIndex65 = 0;\n  let integerIndex65 = 0;\n  let decimalIndex66 = 0;\n  let integerIndex66 = 0;\n  let decimalIndex67 = 0;\n  let integerIndex67 = 0;\n  let decimalIndex68 = 0;\n  let integerIndex68 = 0;\n  let decimalIndex69 = 0;\n  let integerIndex69 = 0;\n  let decimalIndex70 = 0;\n  let integerIndex70 = 0;\n  let decimalIndex71 = 0;\n  let integerIndex71 = 0;\n  let decimalIndex72 = 0;\n  let integerIndex72 = 0;\n  let decimalIndex73 = 0;\n  let integerIndex73 = 0;\n  let decimalIndex74 = 0;\n  let integerIndex74 =", "passed": 0, "run_status": 2}
