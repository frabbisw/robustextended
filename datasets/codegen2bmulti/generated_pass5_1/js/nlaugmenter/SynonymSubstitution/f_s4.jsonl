{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers.reduce((acc, curr, index) => {\n    if (index === 0) {\n      return curr - sortedNumbers[index + 1];\n    }\n    return Math.min(acc, curr - sortedNumbers[index + 1]);\n  }, Infinity);\n  return minDistance < threshold;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers.reduce((acc, curr, index) => {\n    if (index === 0) {\n      return curr - sortedNumbers[index + 1];\n    }\n    return Math.min(acc, curr - sortedNumbers[index + 1]);\n  }, Infinity);\n  return minDistance < threshold;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers.reduce((acc, curr, index) => {\n    if (index === 0) {\n      return curr - sortedNumbers[index + 1];\n    }\n    return Math.min(acc, curr - sortedNumbers[index + 1]);\n  }, Infinity);\n  return minDistance < threshold;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers.reduce((acc, curr, index) => {\n    if (index === 0) {\n      return curr - sortedNumbers[index + 1];\n    }\n    return Math.min(acc, curr - sortedNumbers[index + 1]);\n  }, Infinity);\n  return minDistance < threshold;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers.reduce((acc, curr, index) => {\n    if (index === 0) {\n      return curr - sortedNumbers[index + 1];\n    }\n    return Math.min(acc, curr - sortedNumbers[index + 1]);\n  }, Infinity);\n  return minDistance < threshold;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers.reduce((acc, curr, index) => {\n    if (index === 0) {\n      return curr - sortedNumbers[index + 1];\n    }\n    return Math.min(acc, curr - sortedNumbers[index + 1]);\n  }, Infinity);\n  return minDistance < threshold;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers.reduce((acc, curr, index) => {\n    if (index === 0) {\n      return curr - sortedNumbers[index + 1];\n    }\n    return Math.min(acc, curr - sortedNumbers[index + 1]);\n  }, Infinity);\n  return minDistance < threshold;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple group of nest parentheses. Your goal is to \n   freestanding those group into separate string and return the list of those. \n   Separate groups are balanced (each open brace is by rights shut) and not nested within each early \n   dismiss any spaces in the stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* Input to this function is a string containing multiple group of nest parentheses. Your goal is to \n   freestanding those group into separate string and return the list of those. \n   Separate groups are balanced (each open brace is by rights shut) and not nested within each early \n   dismiss any spaces in the stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let result = [];\n  let open_paren = 0;\n  let closed_paren = 0;\n  let open_paren_count = 0;\n  let closed_paren_count = 0;\n  let current_paren = 0;\n  let current_paren_count = 0;\n  let current_char = '';\n  let current_char_count = 0;\n  let current_char_index = 0;\n  let current_char_index_count = 0;\n  let current_char_index_count_max = 0;\n  let current_char_index_count_min = 0;\n  let current_char_index_count_max_max = 0;\n  let current_char_index_count_max_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;\n  let current_char_index_count_min_min = 0;\n  let current_char_index_count_min_max = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = string;\n  let prefix = '';\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    let current = string[i];\n    if (isPalindrome(current)) {\n      prefix += current;\n      suffix += current;\n      i++;\n    } else {\n      suffix += current;\n      i++;\n    }\n  }\n  suffix = suffix.split('').reverse().join('');\n  palindrome = prefix + suffix;\n  return palindrome;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = string;\n  let prefix = '';\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    let current = string[i];\n    if (isPalindrome(current)) {\n      prefix += current;\n      suffix += current;\n      i++;\n    } else {\n      suffix += current;\n      i++;\n    }\n  }\n  suffix = suffix.split('').reverse().join('');\n  palindrome = prefix + suffix;\n  return palindrome;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = string;\n  let prefix = '';\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    let current = string[i];\n    if (isPalindrome(current)) {\n      prefix += current;\n      suffix += current;\n      i++;\n    } else {\n      suffix += current;\n      i++;\n    }\n  }\n  suffix = suffix.split('').reverse().join('');\n  palindrome = prefix + suffix;\n  return palindrome;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = string;\n  let prefix = '';\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    let current = string[i];\n    if (isPalindrome(current)) {\n      prefix += current;\n      suffix += current;\n      i++;\n    } else {\n      suffix += current;\n      i++;\n    }\n  }\n  suffix = suffix.split('').reverse().join('');\n  palindrome = prefix + suffix;\n  return palindrome;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = string;\n  let prefix = '';\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    let current = string[i];\n    if (isPalindrome(current)) {\n      prefix += current;\n      suffix += current;\n      i++;\n    } else {\n      suffix", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  let n1 = n;\n  while (n1 > 0) {\n    let n2 = n1;\n    while (n2 > 0) {\n      let n3 = n2;\n      while (n3 > 0) {\n        let n4 = n3;\n        while (n4 > 0) {\n          let n5 = n4;\n          while (n5 > 0) {\n            let n6 = n5;\n            while (n6 > 0) {\n              let n7 = n6;\n              while (n7 > 0) {\n                let n8 = n7;\n                while (n8 > 0) {\n                  let n9 = n8;\n                  while (n9 > 0) {\n                    let n10 = n9;\n                    while (n10 > 0) {\n                      let n11 = n10;\n                      while (n11 > 0) {\n                        let n12 = n11;\n                        while (n12 > 0) {\n                          let n13 = n12;\n                          while (n13 > 0) {\n                            let n14 = n13;\n                            while (n14 > 0) {\n                              let n15 = n14;\n                              while (n15 > 0) {\n                                let n16 = n15;\n                                while (n16 > 0) {\n                                  let n17 = n16;\n                                  while (n17 > 0) {\n                                    let n18 = n17;\n                                    while (n18 > 0) {\n                                      let n19 = n18;\n                                      while (n19 > 0) {\n                                        let n20 = n19;\n                                        while (n20 > 0) {\n                                          let n21 = n20;\n                                          while (n21 > 0) {\n                                            let n22 = n21;\n                                            while (n22 > 0) {\n                                              let n23 = n22;\n                                              while (n23 > 0) {\n                                                let n24 = n23;\n                                                while (n24 > 0) {\n                                                  let n25 = n24;\n                                                  while (n25 > 0) {\n                                                    let n26 = n25;\n                                                    while (n26 > 0) {\n                                                      let n27 = n26;\n                                                      while (n27 > 0) {\n                                                        let n28 = n27;\n                                                        while (n28 > 0) {\n                                                         let n29 = n28;\n                                                         while (n29 > 0) {\n                                                           let n30 = n29;\n                                                           while (n30 > 0) {\n                                                            let n31 = n30;\n                                                            while (n31 > 0) {\n                                                              let n32 = n31;\n                                                              while (n32 > 0) {\n                                                                let n33 = n32;\n                                                                while (n33 > 0) {\n                                                                  let n34 = n33;\n                                                                  while (n34 > 0) {\n                                                                    let n35 = n34;\n                                                                    while (n35 > 0) {\n                                                                      let n36 = n35;\n                                                                      while (n36 > 0) {\n                                                                        let n37 = n36;\n                                                                        while (n37 > 0) {\n                                                                          let n38 = n37;\n                                                                          while (n38 > 0) {\n                                                                            let n39 = n38;\n                                                                            while (n39 > 0) {\n                                                                              let n40 = n39;\n                                                                              while (n40 > 0) {\n                                                                                let n41 = n40;\n                                                                                while (n41 > 0) {\n                                                                                    let n42 = n41;\n                                                                                    while (n42 > 0) {\n                                                                                      let n43 = n42;\n                                                                                      while (n43 > 0) {\n                                                                                        let n44 = n43;\n                                                                                        while (n44 > 0) {\n                                                                                          let n45 = n44;\n                                                                                          while (n45 > 0) {\n                                                                                            let n46 = n45;\n                                                                                            while (n46 > 0) {\n                                                                                              let n47 = n46;\n                                                                                              while (n47 > 0) {\n                                                                                                let n48 = n47;\n                                                                                                while (n48 > 0) {\n                                                                                                  let n49 = n48;\n                                                                                                  while (n49 > 0) {\n                                                                                                    let n50 = n49;\n                                                                                                    while (n50 > 0) {\n                                                                                                      let n51 = n50;\n                                                                                                      while (n51 > 0) {\n                                                                                                        let n52 = n51;\n                                                                                                        while (n52 > 0) {\n                                                                                                         let n53 = n52;\n                                                                                                         while (n53 > 0) {\n                                                                                                            let n54 = n53;\n                                                                                                            while (n54 > 0) {\n                                                                                                              let n55 = n54;\n                                                                                                              while (n55 > 0) {\n                                                                                                                  let n56 = n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i]);\n  }\n  return words;\n};\n\nconst wordsArray = wordsString(\"Hi, my name is John\");\nconsole.log(wordsArray);\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = wordsString(\"Hi, my name is John\");\nconsole.log(wordsArray);\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = wordsString(\"Hi, my name is John\");\nconsole.log(wordsArray);\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = wordsString(\"Hi, my name is John\");\nconsole.log(wordsArray);\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = wordsString(\"Hi, my name is John\");\nconsole.log(wordsArray);\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = wordsString(\"Hi, my name is John\");\nconsole.log(wordsArray);\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = wordsString(\"Hi, my name is John\");\nconsole.log(wordsArray);\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = wordsString(\"Hi, my name is John\");\nconsole.log(wordsArray);\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = wordsString(\"Hi, my name is John\");\nconsole.log(wordsArray);\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = wordsString(\"Hi, my name is John\");\nconsole.log(wordsArray);\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the \n   big even integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*This function takes two positive numbers x and y and returns the \n   big even integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let result = 0;\n  let i = 0;\n  while (x >= y) {\n    result += (x % 2) * (i + 1);\n    x /= 2;\n    i++;\n  }\n  return result;\n};\n\nconst test = () => {\n  let result = 0;\n  for (let i = 1; i <= 100; i++) {\n    result += chooseNum(i, 100);\n  }\n  console.log(result);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let avg = 0;\n  for (let i = n; i <= m; i++) {\n    avg += i;\n  }\n  avg = avg / (m - n + 1);\n  return avg.toString(2);\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    let j = i + 1;\n    while (j < x.length && x[i] === x[j]) {\n      j++;\n    }\n    if (j - i > 1) {\n      result.push(x[i]);\n    }\n    i = j;\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that be between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that be between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return reversed.map((item, index) => {\n    return [sorted[index], item];\n  });\n};\n\nmodule.exports = byLength;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the factorial of i if i is even \n   or the union of issue from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the generation of the numbers pool from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* Implement the function f that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the factorial of i if i is even \n   or the union of issue from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the generation of the numbers pool from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f(i + 1));\n    } else {\n      result = result.concat(f(i + 1).map((x) => x + 1));\n    }\n  }\n  return result;\n};\n\nconst f2 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f2(i + 1));\n    } else {\n      result = result.concat(f2(i + 1).map((x) => x + 1));\n    }\n  }\n  return result;\n};\n\nconst f3 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f3(i + 1));\n    } else {\n      result = result.concat(f3(i + 1).map((x) => x + 1));\n    }\n  }\n  return result;\n};\n\nconst f4 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f4(i + 1));\n    } else {\n      result = result.concat(f4(i + 1).map((x) => x + 1));\n    }\n  }\n  return result;\n};\n\nconst f5 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f5(i + 1));\n    } else {\n      result = result.concat(f5(i + 1).map((x) => x + 1));\n    }\n  }\n  return result;\n};\n\nconst f6 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f6(i + 1));\n    } else {\n      result = result.concat(f6(i + 1).map((x) => x + 1));\n    }\n  }\n  return result;\n};\n\nconst f7 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f7(i + 1));\n    } else {\n      result = result.concat(f7(i + 1).map((x) => x + 1));\n    }\n  }\n  return result;\n};\n\nconst f8 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f8(i + 1));\n    } else {\n      result = result.concat(f8(i + 1).map((x) => x + 1));\n    }\n  }\n  return result;\n};\n\nconst f9 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f9(i + 1));\n    } else {\n      result = result.concat(f9(i + 1).map((x) => x + 1));\n    }\n  }\n  return result;\n};\n\nconst f10 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f10(i + 1));\n    } else {\n      result = result.concat(f10(i + 1).map((x) => x + 1));\n    }\n  }\n  return result;\n};\n\nconst f11 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f11(i + 1));\n    } else {\n      result = result.concat(f11(i + 1).map((x) => x + 1));\n    }\n  }\n  return result;\n};\n\nconst f12 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f12(i + 1));\n    } else {\n      result = result.concat(f12(i + 1).map((x) => x + 1));\n    }\n  }\n  return result;\n};\n\nconst f13 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f13(i + 1));\n    } else {\n      result = result.concat(f13(i + 1).map", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd \n   integer palindrome that decrease within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd \n   integer palindrome that decrease within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nmodule.exports = evenOddPalindrome\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result.length;\n};\n\nmodule.exports = countNums;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered. Your job is to determine if \n   it is possible to make an array sorted in non - decreasing ordering by perform \n   the following operation on the give array: \n       You are allow to perform correct shift operation any phone number of clock time. \n  \n   One correct shift key process think of shift all element of the array by one \n   side in the right direction. The final element of the array will be travel to \n   the starting military position in the array i.e. 0th exponent. \n\n   If it is potential to obtain the sorted array by performing the above mathematical process \n   then return true else return false. \n   If the sacrifice array is empty then return true. \n\n   Note: The sacrifice list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered. Your job is to determine if \n   it is possible to make an array sorted in non - decreasing ordering by perform \n   the following operation on the give array: \n       You are allow to perform correct shift operation any phone number of clock time. \n  \n   One correct shift key process think of shift all element of the array by one \n   side in the right direction. The final element of the array will be travel to \n   the starting military position in the array i.e. 0th exponent. \n\n   If it is potential to obtain the sorted array by performing the above mathematical process \n   then return true else return false. \n   If the sacrifice array is empty then return true. \n\n   Note: The sacrifice list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let result = false;\n  let index = 0;\n  while (index < arr.length) {\n    let temp = arr[index];\n    arr[index] = arr[index + 1];\n    arr[index + 1] = temp;\n    index++;\n    if (arr[index] < arr[index - 1]) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\n\nmodule.exports = moveOneBall;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor2 = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor3 = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor4 = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor5 = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor6 = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor7 = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor8 = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s. \n  do binary XOR on these input and return result also as a chain.\n  */\nconst stringXor9 = (a, b) => {\n  const result = '';\n  for (let", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of number, \n   and determine whether it is potential to do an exchange of elements \n   between them to name lst1 a list of merely even numbers. \n   There is no terminus ad quem on the numeral of exchanged elements between lst1 and lst2.\n   If it be possible to exchange elements between the lst1 and lst2 to cause \n   all the element of lst1 to constitute even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*In this problem, you will implement a function that takes two lists of number, \n   and determine whether it is potential to do an exchange of elements \n   between them to name lst1 a list of merely even numbers. \n   There is no terminus ad quem on the numeral of exchanged elements between lst1 and lst2.\n   If it be possible to exchange elements between the lst1 and lst2 to cause \n   all the element of lst1 to constitute even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even++;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even--;\n    }\n  }\n  return even === 0? \"YES\" : \"NO\";\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 5]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letter = '';\n  let count = 0;\n  let repeat = 0;\n  let i = 0;\n  while (i < test.length) {\n    if (test[i] ==='') {\n      i++;\n      continue;\n    }\n    if (test[i] in histogram) {\n      repeat = histogram[test[i]];\n      histogram[test[i]] = repeat + 1;\n    } else {\n      histogram[test[i]] = 1;\n    }\n    i++;\n  }\n  for (let key in histogram) {\n    if (histogram[key] > repeat) {\n      letter = key;\n      repeat = histogram[key];\n    }\n  }\n  return {letter, repeat};\n};\n\nmodule.exports = histogram;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings s and c, you have to deleted all the character in s that be adequate to any fictional character in c\n   then check if the consequence drawstring is palindrome. \n   A chain is called palindrome if it reads the same backward as ahead. \n   You should return a tuple check the resultant role string and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*Task \n   We are given two strings s and c, you have to deleted all the character in s that be adequate to any fictional character in c\n   then check if the consequence drawstring is palindrome. \n   A chain is called palindrome if it reads the same backward as ahead. \n   You should return a tuple check the resultant role string and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let check = false;\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < c.length) {\n    if (s[i] === c[j]) {\n      i++;\n      j++;\n    } else if (s[i] < c[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (j === c.length) {\n    check = true;\n  }\n  return [result, check];\n};\n\nmodule.exports = reverseDelete;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let n = 0;\n  let i = 0;\n  while (i < lst.length) {\n    let str = lst[i];\n    let nstr = str.length;\n    let nstr2 = nstr;\n    while (nstr2 > 0) {\n      let nstr3 = nstr2;\n      let nstr4 = nstr3;\n      while (nstr4 > 0) {\n        let nstr5 = nstr4;\n        let nstr6 = nstr5;\n        while (nstr6 > 0) {\n          let nstr7 = nstr6;\n          let nstr8 = nstr7;\n          while (nstr8 > 0) {\n            let nstr9 = nstr8;\n            let nstr10 = nstr9;\n            while (nstr10 > 0) {\n              let nstr11 = nstr10;\n              let nstr12 = nstr11;\n              while (nstr12 > 0) {\n                let nstr13 = nstr12;\n                let nstr14 = nstr13;\n                while (nstr14 > 0) {\n                  let nstr15 = nstr14;\n                  let nstr16 = nstr15;\n                  while (nstr16 > 0) {\n                    let nstr17 = nstr16;\n                    let nstr18 = nstr17;\n                    while (nstr18 > 0) {\n                      let nstr19 = nstr18;\n                      let nstr20 = nstr19;\n                      while (nstr20 > 0) {\n                        let nstr21 = nstr20;\n                        let nstr22 = nstr21;\n                        while (nstr22 > 0) {\n                          let nstr23 = nstr22;\n                          let nstr24 = nstr23;\n                          while (nstr24 > 0) {\n                            let nstr25 = nstr24;\n                            let nstr26 = nstr25;\n                            while (nstr26 > 0) {\n                              let nstr27 = nstr26;\n                              let nstr28 = nstr27;\n                              while (nstr28 > 0) {\n                                let nstr29 = nstr28;\n                                let nstr30 = nstr29;\n                                while (nstr30 > 0) {\n                                  let nstr31 = nstr30;\n                                  let nstr32 = nstr31;\n                                  while (nstr32 > 0) {\n                                    let nstr33 = nstr32;\n                                    let nstr34 = nstr33;\n                                    while (nstr34 > 0) {\n                                      let nstr35 = nstr34;\n                                      let nstr36 = nstr35;\n                                      while (nstr36 > 0) {\n                                        let nstr37 = nstr36;\n                                        let nstr38 = nstr37;\n                                        while (nstr38 > 0) {\n                                          let nstr39 = nstr38;\n                                          let nstr40 = nstr39;\n                                          while (nstr40 > 0) {\n                                            let nstr41 = nstr40;\n                                            let nstr42 = nstr41;\n                                            while (nstr42 > 0) {\n                                              let nstr43 = nstr42;\n                                              let nstr44 = nstr43;\n                                              while (nstr44 > 0) {\n                                                let nstr45 = nstr44;\n                                                let nstr46 = nstr45;\n                                                while (nstr46 > 0) {\n                                                  let nstr47 = nstr46;\n                                                  let nstr48 = nstr47;\n                                                  while (nstr48 > 0) {\n                                                    let nstr49 = nstr48;\n                                                    let nstr50 = nstr49;\n                                                    while (nstr50 > 0) {\n                                                      let nstr51 = nstr50;\n                                                      let nstr52 = nstr51;\n                                                      while (nstr52 > 0) {\n                                                        let nstr53 = nstr52;\n                                                        let nstr54 = nstr53;\n                                                        while (nstr54 > 0) {\n                                                          let nstr55 = nstr54;\n                                                          let nstr56 = nstr55;\n                                                          while (nstr56 > 0) {\n                                                            let nstr57 = nstr56;\n                                                            let nstr58 = nstr57;\n                                                            while (nstr58 > 0) {\n                                                              let nstr59 = nstr58;\n                                                              let nstr60 = nstr59;\n                                                              while (nstr60 > 0) {\n                                                                let nstr61 = nstr60;\n                                                                let nstr62 = nstr61;\n                                                                while (nstr62 > 0) {\n                                                                  let nstr63 = nstr62;\n                                                                  let nstr64 = nstr63;\n                                                                  while (nstr64 > 0) {\n                                                                    let nstr65 = nstr64;\n                                                                    let nstr66 = nstr65;\n                                                                    while (nstr66 > 0) {\n                                                                      let nstr67 = nstr66;\n                                                                      ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find the minimum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  if (nums.length === 0) return 0;\n  let min = nums[0];\n  let max = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      sum = 0;\n      min = nums[i];\n      max = nums[i];\n    } else {\n      sum += nums[i];\n      if (sum < min) {\n        min = sum;\n      }\n      if (sum > max) {\n        max = sum;\n      }\n    }\n  }\n  return min;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a unmarried well, \n   and each 1 in a quarrel represents a individual unit of water. \n   Each well has a comparable bucket that can be use to extract urine from it, \n   and all buckets have the like capacity.\n   Your undertaking is to practice the buckets to empty the wells. \n   Output the number of meter you necessitate to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a unmarried well, \n   and each 1 in a quarrel represents a individual unit of water. \n   Each well has a comparable bucket that can be use to extract urine from it, \n   and all buckets have the like capacity.\n   Your undertaking is to practice the buckets to empty the wells. \n   Output the number of meter you necessitate to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = [...new Set(grid.map(row => row[1]))];\n  const buckets_capacity = buckets.map(bucket => bucket.length);\n  const buckets_capacity_sum = buckets_capacity.reduce((a, b) => a + b, 0);\n  const buckets_capacity_sum_sum = buckets_capacity.reduce((a, b) => a + b, 0);\n  const buckets_capacity_sum_sum_sum = buckets_capacity_sum_sum + buckets_capacity_sum;\n  const buckets_capacity_sum_sum_sum_sum = buckets_capacity_sum_sum_sum + buckets_capacity_sum_sum;\n  const buckets_capacity_sum_sum_sum_sum_sum = buckets_capacity_sum_sum_sum_sum + buckets_capacity_sum_sum_sum;\n  const buckets_capacity_sum_sum_sum_sum_sum_sum = buckets_capacity_sum_sum_sum_sum_sum + buckets_capacity_sum_sum_sum_sum;\n  const buckets_capacity_sum_sum_sum_sum_sum_sum_sum = buckets_capacity_sum_sum_sum_sum_sum_sum_sum + buckets_capacity_sum_sum_sum_sum_sum;\n  const buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum = buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum + buckets_capacity_sum_sum_sum_sum_sum_sum;\n  const buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum_sum = buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum_sum + buckets_capacity_sum_sum_sum_sum_sum_sum;\n  const buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum + buckets_capacity_sum_sum_sum_sum_sum_sum;\n  const buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum + buckets_capacity_sum_sum_sum_sum_sum_sum;\n  const buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum + buckets_capacity_sum_sum_sum_sum_sum_sum;\n  const buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum + buckets_capacity_sum_sum_sum_sum_sum_sum;\n  const buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum + buckets_capacity_sum_sum_sum_sum_sum_sum;\n  const buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum + buckets_capacity_sum_sum_sum_sum_sum_sum;\n  return buckets_capacity_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in ascend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in ascend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArray = arr.slice(0);\n  let sortedArrayLength = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  let tempLength = 0;\n  let tempIndex = 0;\n  let tempIndexLength = 0;\n  let tempIndexValue = 0;\n  let tempIndexValueLength = 0;\n  let tempIndexValueValue = 0;\n  let tempIndexValueValueLength = 0;\n  let tempIndexValueValueValue = 0;\n  let tempIndexValueValueValueLength = 0;\n  let tempIndexValueValueValueValue = 0;\n  let tempIndexValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let tempIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to follow through \n   a routine that come back a list of all words from chain s that contain exactly \n   n consonant, in order these news appear in the chain s.\n   If the string s is empty then the affair should return an empty list.\n   Note: you may assume the input string contains entirely letter and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*Given a string s and a natural number n, you have been tasked to follow through \n   a routine that come back a list of all words from chain s that contain exactly \n   n consonant, in order these news appear in the chain s.\n   If the string s is empty then the affair should return an empty list.\n   Note: you may assume the input string contains entirely letter and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length === 0) return [];\n  let words = [];\n  let word = s.split('');\n  let len = word.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && word[j]!=='') {\n      j++;\n    }\n    if (j - i === n) {\n      words.push(word.slice(i, j));\n    }\n    i = j;\n  }\n  return words;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stand between \n   two consonant from the correct side of the word (shell sensitive). \n  \n   Vowels in the beginning and ending doesn't consider. refund empty chain if you didn't \n   find any vowel meet the above circumstance. \n\n   You may assume that the given string contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*You are given a word. Your task is to find the closest vowel that stand between \n   two consonant from the correct side of the word (shell sensitive). \n  \n   Vowels in the beginning and ending doesn't consider. refund empty chain if you didn't \n   find any vowel meet the above circumstance. \n\n   You may assume that the given string contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let result = '';\n  let len = word.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  let min = Infinity;\n  while (i < j) {\n    let c = word[i];\n    let d = word[j];\n    let vowel = getVowel(c, d);\n    if (vowel!== '') {\n      let distance = Math.abs(vowel.charCodeAt(0) - c.charCodeAt(0)) + Math.abs(vowel.charCodeAt(0) - d.charCodeAt(0));\n      if (distance < min) {\n        min = distance;\n        result = vowel;\n      }\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst getVowel = (c, d) => {\n  let result = '';\n  let len = c.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  while (i < j) {\n    let c1 = c[i];\n    let c2 = c[j];\n    let d1 = d[i];\n    let d2 = d[j];\n    if (c1 === 'a' || c1 === 'e' || c1 === 'i' || c1 === 'o' || c1 === 'u') {\n      if (c2 === 'a' || c2 === 'e' || c2 === 'i' || c2 === 'o' || c2 === 'u') {\n        result = c1;\n        break;\n      }\n    }\n    if (c1 === 'e' || c1 === 'i' || c1 === 'o' || c1 === 'u') {\n      if (c2 === 'a' || c2 === 'e' || c2 === 'i' || c2 === 'o' || c2 === 'u') {\n        result = c1;\n        break;\n      }\n    }\n    if (c1 === 'a' || c1 === 'e' || c1 === 'i' || c1 === 'o' || c1 === 'u') {\n      if (c2 === 'a' || c2 === 'e' || c2 === 'i' || c2 === 'o' || c2 === 'u') {\n        result = c1;\n        break;\n      }\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconsole.log(getClosestVowel(\"yogurt\"));\nconsole.log(getClosestVowel(\"FULL\"));\nconsole.log(getClosestVowel(\"quick\"));\nconsole.log(getClosestVowel(\"ab\"));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open \n   digression' (' or airless parenthesis')' merely. \n   Your job is to check if it equal possible to concatenate the two string in\n   some order, that the result string will be estimable. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* You are given a list of two strings, both strings consist of open \n   digression' (' or airless parenthesis')' merely. \n   Your job is to check if it equal possible to concatenate the two string in\n   some order, that the result string will be estimable. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let result = 'No';\n  let lstLen = lst.length;\n  let lstLen2 = lst.length;\n  let lstLen3 = lst.length;\n  let lstLen4 = lst.length;\n  let lstLen5 = lst.length;\n  let lstLen6 = lst.length;\n  let lstLen7 = lst.length;\n  let lstLen8 = lst.length;\n  let lstLen9 = lst.length;\n  let lstLen10 = lst.length;\n  let lstLen11 = lst.length;\n  let lstLen12 = lst.length;\n  let lstLen13 = lst.length;\n  let lstLen14 = lst.length;\n  let lstLen15 = lst.length;\n  let lstLen16 = lst.length;\n  let lstLen17 = lst.length;\n  let lstLen18 = lst.length;\n  let lstLen19 = lst.length;\n  let lstLen20 = lst.length;\n  let lstLen21 = lst.length;\n  let lstLen22 = lst.length;\n  let lstLen23 = lst.length;\n  let lstLen24 = lst.length;\n  let lstLen25 = lst.length;\n  let lstLen26 = lst.length;\n  let lstLen27 = lst.length;\n  let lstLen28 = lst.length;\n  let lstLen29 = lst.length;\n  let lstLen30 = lst.length;\n  let lstLen31 = lst.length;\n  let lstLen32 = lst.length;\n  let lstLen33 = lst.length;\n  let lstLen34 = lst.length;\n  let lstLen35 = lst.length;\n  let lstLen36 = lst.length;\n  let lstLen37 = lst.length;\n  let lstLen38 = lst.length;\n  let lstLen39 = lst.length;\n  let lstLen40 = lst.length;\n  let lstLen41 = lst.length;\n  let lstLen42 = lst.length;\n  let lstLen43 = lst.length;\n  let lstLen44 = lst.length;\n  let lstLen45 = lst.length;\n  let lstLen46 = lst.length;\n  let lstLen47 = lst.length;\n  let lstLen48 = lst.length;\n  let lstLen49 = lst.length;\n  let lstLen50 = lst.length;\n  let lstLen51 = lst.length;\n  let lstLen52 = lst.length;\n  let lstLen53 = lst.length;\n  let lstLen54 = lst.length;\n  let lstLen55 = lst.length;\n  let lstLen56 = lst.length;\n  let lstLen57 = lst.length;\n  let lstLen58 = lst.length;\n  let lstLen59 = lst.length;\n  let lstLen60 = lst.length;\n  let lstLen61 = lst.length;\n  let lstLen62 = lst.length;\n  let lstLen63 = lst.length;\n  let lstLen64 = lst.length;\n  let lstLen65 = lst.length;\n  let lstLen66 = lst.length;\n  let lstLen67 = lst.length;\n  let lstLen68 = lst.length;\n  let lstLen69 = lst.length;\n  let lstLen70 = lst.length;\n  let lstLen71 = lst.length;\n  let lstLen72 = lst.length;\n  let lstLen73 = lst.length;\n  let lstLen74 = lst.length;\n  let lstLen75 = lst.length;\n  let lstLen76 = lst.length;\n  let lstLen77 = lst.length;\n  let lstLen78 = lst.length;\n  let lstLen79 = lst.length;\n  let lstLen80 = lst.length;\n  let lstLen81 = lst.length;\n  let lstLen82 = lst.length;\n  let lstLen83 = lst.length;\n  let lstLen84 = lst.length;\n  let lstLen85 = lst.length;\n  let lstLen86 = lst.length;\n  let lstLen87 = lst.length;\n  let lstLen88 = lst.length;\n  let lstLen89 = lst.length;\n  let lstLen90 = lst.length;\n  let lstLen91 = lst.length;\n  let lstLen92 = lst.length;\n  let lstLen93 = lst.length;\n  let lstLen94 = lst.length;\n  let lstLen95 = lst.length;\n  let lstLen96 = lst.length;\n  let lstLen97 = lst.length;\n  let lstLen98 = lst.length;\n  let lstLen99 = lst.length;\n  let lstLen100 = lst.length;\n  let lstLen101 = lst.length;\n  let lstLen102 = lst.length;\n  let lstLen103 = lst.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\nmodule.exports = longest\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((max, val) => {\n    if (val < 0) {\n      return val;\n    } else if (val > max) {\n      return val;\n    } else {\n      return max;\n    }\n  }, -Infinity);\n\n  if (max === -Infinity) {\n    return [];\n  }\n\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    const index = arr.findIndex(val => val > max);\n    if (index === -1) {\n      break;\n    } else {\n      result.push(arr[index]);\n      max = arr[index];\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = maximum;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the union of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the union of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const evens = lst.filter((x) => x % 2 === 0);\n  return evens.reduce((acc, x) => acc + x, 0);\n};\n\nmodule.exports = solution;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the leftover number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a succession defined \n   as follows: begin with any positive integer n. Then each term is obtained from the \n   former condition as follow: if the previous terminus is even, the adjacent condition is one one-half of \n   the former condition. If the previous condition be odd, the adjacent term is 3 time the previous \n   term plus 1. The guess is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that has the leftover number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a succession defined \n   as follows: begin with any positive integer n. Then each term is obtained from the \n   former condition as follow: if the previous terminus is even, the adjacent condition is one one-half of \n   the former condition. If the previous condition be odd, the adjacent term is 3 time the previous \n   term plus 1. The guess is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1];\n  while (n > 1) {\n    let newCollatz = [];\n    let last = n;\n    while (n > 1) {\n      if (last % 2 === 0) {\n        newCollatz.push(last / 2);\n      } else {\n        newCollatz.push(last * 3 + 1);\n      }\n      last = newCollatz[newCollatz.length - 1];\n      n = newCollatz[newCollatz.length - 1];\n    }\n    collatz = newCollatz;\n  }\n  return collatz;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date drawstring and \n   rejoinder true if the date is valid otherwise delusive. \n   The date is valid if all of the following dominion equal satisfied: \n   1. The date chain is not empty. \n   2. The number of day is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for months 4,6,9,11. And, the number of sidereal day is not less than 1 or gamey than 29 for the calendar month 2. \n   3. The month should not exist less than 1 or higher than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*You have to write a function which validates a given date drawstring and \n   rejoinder true if the date is valid otherwise delusive. \n   The date is valid if all of the following dominion equal satisfied: \n   1. The date chain is not empty. \n   2. The number of day is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for months 4,6,9,11. And, the number of sidereal day is not less than 1 or gamey than 29 for the calendar month 2. \n   3. The month should not exist less than 1 or higher than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateChain = [];\n  let month = 0;\n  let day = 0;\n  let siderealDay = 0;\n  let year = 0;\n  let monthChain = [];\n  let dayChain = [];\n  let siderealDayChain = [];\n  let yearChain = [];\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let siderealDayChainLength = 0;\n  let yearChainLength = 0;\n  let monthChainLength = 0;\n  let dayChainLength = 0;\n  let", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  while (i < len) {\n    let c = txt.charCodeAt(i);\n    if (c > 96 && c < 123) {\n      word += txt.charAt(i);\n    } else {\n      if (word!== \"\") {\n        words.push(word);\n        word = \"\";\n      }\n      words.push(txt.charAt(i));\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  return words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  while (i < len) {\n    let c = txt.charCodeAt(i);\n    if (c > 96 && c < 123) {\n      word += txt.charAt(i);\n    } else {\n      if (word!== \"\") {\n        words.push(word);\n        word = \"\";\n      }\n      words.push(txt.charAt(i));\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  return words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords3 = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  while (i < len) {\n    let c = txt.charCodeAt(i);\n    if (c > 96 && c < 123) {\n      word += txt.charAt(i);\n    } else {\n      if (word!== \"\") {\n        words.push(word);\n        word = \"\";\n      }\n      words.push(txt.charAt(i));\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  return words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords4 = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  while (i < len) {\n    let c = txt.charCodeAt(i);\n    if (c > 96 && c < 123) {\n      word += txt.charAt(i);\n    } else {\n      if (word!== \"\") {\n        words.push(word);\n        word = \"\";\n      }\n      words.push(txt.charAt(i));\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  return words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords5 = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  while (i < len) {\n    let c = txt.charCodeAt(i);\n    if (c > 96 && c < 123) {\n      word += txt.charAt(i);\n    } else {\n      if (word!== \"\") {\n        words.push(word);\n        word = \"\";\n      }\n      words.push(txt.charAt(i));\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nmodule.exports = isSorted;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval is a couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval is a couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\"\n  }\n  if (interval1.start < interval2.start && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.start && interval1.end < interval2.end) {\n    return \"NO\"\n  }\n  if (interval1.start > interval2.start && interval1.end < interval2.end) {\n    return \"NO\"\n  }\n  if (interval1.start > interval2.start && interval1.end > interval2.end) {\n    return \"NO\"\n  }\n  return \"YES\"\n}\n\nmodule.exports = intersection\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i];\n  }\n  return prod;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cellular telephone of the grid contains a value. Every integer in the compass [ 1, N * N ] \n   inclusive appears precisely once on the cells of the grid.\n\n   You accept to discover the minimum way of duration k in the grid. You can start \n   from any cellular telephone, and in each dance step you can act to any of the neighbor cell, \n   in other words, you can survive to cellular telephone which share an edge with you current \n   cell. \n   Please notice that a path of length k entail chew the fat exactly k cellular telephone (not \n   necessarily distinct). \n   You CANNOT sound off the grid.\n   A path A (of duration k) is consider less than a path b-complex vitamin (of distance k) if \n   after induce the ordered lists of the value on the cell that A and B go \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the value on the cells that the minimal way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cellular telephone of the grid contains a value. Every integer in the compass [ 1, N * N ] \n   inclusive appears precisely once on the cells of the grid.\n\n   You accept to discover the minimum way of duration k in the grid. You can start \n   from any cellular telephone, and in each dance step you can act to any of the neighbor cell, \n   in other words, you can survive to cellular telephone which share an edge with you current \n   cell. \n   Please notice that a path of length k entail chew the fat exactly k cellular telephone (not \n   necessarily distinct). \n   You CANNOT sound off the grid.\n   A path A (of duration k) is consider less than a path b-complex vitamin (of distance k) if \n   after induce the ordered lists of the value on the cell that A and B go \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the value on the cells that the minimal way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  if (grid.length === 0 || grid[0].length === 0) return [];\n  const dirs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const result = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      const current = grid[i][j];\n      const next = grid[i][j + 1];\n      const prev = grid[i][j - 1];\n      const nextNext = grid[i][j + 2];\n      const prevPrev = grid[i][j - 2];\n      const nextNextNext = grid[i][j + 3];\n      const prevPrevPrev = grid[i][j - 3];\n      const nextNextNextNext = grid[i][j + 4];\n      const prevPrevPrevPrev = grid[i][j - 4];\n      const nextNextNextNextNext = grid[i][j + 5];\n      const prevPrevPrevPrevPrev = grid[i][j - 5];\n      const nextNextNextNextNextNext = grid[i][j + 6];\n      const prevPrevPrevPrevPrevPrev = grid[i][j - 6];\n      const nextNextNextNextNextNextNext = grid[i][j + 7];\n      const prevPrevPrevPrevPrevPrevPrev = grid[i][j - 7];\n      const nextNextNextNextNextNextNextNext = grid[i][j + 8];\n      const prevPrevPrevPrevPrevPrevPrevPrev = grid[i][j - 8];\n      const nextNextNextNextNextNextNextNextNext = grid[i][j + 9];\n      const prevPrevPrevPrevPrevPrevPrevPrevPrev = grid[i][j - 9];\n      const nextNextNextNextNextNextNextNextNextNext = grid[i][j + 10];\n      const prevPrevPrevPrevPrevPrevPrevPrevPrevPrev = grid[i][j - 10];\n      const nextNextNextNextNextNextNextNextNextNextNext = grid[i][j + 11];\n      const prevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = grid[i][j - 11];\n      const nextNextNextNextNextNextNextNextNextNextNextNext = grid[i][j + 12];\n      const prevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = grid[i][j - 12];\n      const nextNextNextNextNextNextNextNextNextNextNextNextNext = grid[i][j + 13];\n      const prevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = grid[i][j - 13];\n      const nextNextNextNextNextNextNextNextNextNextNextNextNextNext = grid[i][j + 14];\n      const prevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = grid[i][j - 14];\n      const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = grid[i][j + 15];\n      const prevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = grid[i][j - 15];\n      const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = grid[i][j + 16];\n      const prevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = grid[i][j - 16];\n      const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = grid[i][j + 17];\n      const prevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = grid[i][j - 17];\n      const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = grid[i][j + 18];\n      const prevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = grid[i][j - 18];\n      const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = grid[i][j + 19];\n      const prevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = grid[i][j - 19];\n      const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = grid[i][j + 20];\n      const prevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = grid[i][j - 20];\n      const nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = grid[i][j + 21];\n      const prevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = grid[i][j - 21];\n      const nextNextNextNextNextNextNextNextNextNext", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === 0) {\n    return a;\n  }\n  if (b === 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === b + 1) {\n    return a;\n  }\n  if (a === b - 1) {\n    return a;\n  }\n  if (a % b === 0) {\n    return a / b;\n  }\n  if (b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 1) {\n    return a / b;\n  }\n  if (b % a === 1) {\n    return b / a;\n  }\n  if (a % b === 0) {\n    return a / b;\n  }\n  if (b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 1) {\n    return a / b;\n  }\n  if (b % a === 1) {\n    return b / a;\n  }\n  if (a % b === 0) {\n    return a / b;\n  }\n  if (b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 1) {\n    return a / b;\n  }\n  if (b % a === 1) {\n    return b / a;\n  }\n  if (a % b === 0) {\n    return a / b;\n  }\n  if (b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 1) {\n    return a / b;\n  }\n  if (b % a === 1) {\n    return b / a;\n  }\n  if (a % b === 0) {\n    return a / b;\n  }\n  if (b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 1) {\n    return a / b;\n  }\n  if (b % a === 1) {\n    return b / a;\n  }\n  if (a % b === 0) {\n    return a / b;\n  }\n  if (b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 1) {\n    return a / b;\n  }\n  if (b % a === 1) {\n    return b / a;\n  }\n  if (a % b === 0) {\n    return a / b;\n  }\n  if (b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 1) {\n    return a / b;\n  }\n  if (b % a === 1) {\n    return b / a;\n  }\n  if (a % b === 0) {\n    return a / b;\n  }\n  if (b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 1) {\n    return a / b;\n  }\n  if (b % a === 1) {\n    return b / a;\n  }\n  if (a % b === 0) {\n    return a / b;\n  }\n  if (b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 1) {\n    return a / b;\n  }\n  if (b % a === 1) {\n    return b / a;\n  }\n  if (a % b === 0) {\n    return a / b;\n  }\n  if (b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 1) {\n    return a / b;\n  }\n  if (b % a === 1) {\n    return b / a;\n  }\n  if (a % b === 0) {\n    return a / b;\n  }\n  if (b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 1) {\n    return a / b;\n  }\n  if (b % a === 1) {\n    return b / a;\n  }\n  if (a % b === 0) {\n    return a / b;\n  }\n  if (b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 1) {\n    return a / b;\n  }\n  if (b % a === 1) {\n    return b / a;\n  }\n  if (a % b === 0) {\n    return a / b;\n  }\n  if (b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 1) {\n    return a / b;\n  }\n  if (b % a === 1) {\n    return b / a;\n  }\n  if (a % b === 0) {\n    return a / b;\n  }\n  if (b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 1) {\n    return a / b;\n  }\n  if (b % a === 1) {\n    return b / a;\n  }\n  if (a % b === 0) {\n    return a / b;\n  }\n  if (b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 1) {\n    return a / b;\n  }\n  if (b % a === 1) {\n    return b / a;\n  }\n  if (a % b === 0) {\n    return a / b;\n  }\n  if (b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 1) {\n    return a / b;\n  }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematician in \n   the last couple century. However, what citizenry don't know is Tribonacci sequence. \n   Tribonacci succession is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is leftover.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematician in \n   the last couple century. However, what citizenry don't know is Tribonacci sequence. \n   Tribonacci succession is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is leftover.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i = i + 1 / 2;\n  }\n  return result;\n};\n\nconst test = (n) => {\n  console.log(tri(n));\n};\n\ntest(1);\ntest(2);\ntest(3);\ntest(4);\ntest(5);\ntest(6);\ntest(7);\ntest(8);\ntest(9);\ntest(10);\ntest(11);\ntest(12);\ntest(13);\ntest(14);\ntest(15);\ntest(16);\ntest(17);\ntest(18);\ntest(19);\ntest(20);\ntest(21);\ntest(22);\ntest(23);\ntest(24);\ntest(25);\ntest(26);\ntest(27);\ntest(28);\ntest(29);\ntest(30);\ntest(31);\ntest(32);\ntest(33);\ntest(34);\ntest(35);\ntest(36);\ntest(37);\ntest(38);\ntest(39);\ntest(40);\ntest(41);\ntest(42);\ntest(43);\ntest(44);\ntest(45);\ntest(46);\ntest(47);\ntest(48);\ntest(49);\ntest(50);\ntest(51);\ntest(52);\ntest(53);\ntest(54);\ntest(55);\ntest(56);\ntest(57);\ntest(58);\ntest(59);\ntest(60);\ntest(61);\ntest(62);\ntest(63);\ntest(64);\ntest(65);\ntest(66);\ntest(67);\ntest(68);\ntest(69);\ntest(70);\ntest(71);\ntest(72);\ntest(73);\ntest(74);\ntest(75);\ntest(76);\ntest(77);\ntest(78);\ntest(79);\ntest(80);\ntest(81);\ntest(82);\ntest(83);\ntest(84);\ntest(85);\ntest(86);\ntest(87);\ntest(88);\ntest(89);\ntest(90);\ntest(91);\ntest(92);\ntest(93);\ntest(94);\ntest(95);\ntest(96);\ntest(97);\ntest(98);\ntest(99);\ntest(100);\ntest(101);\ntest(102);\ntest(103);\ntest(104);\ntest(105);\ntest(106);\ntest(107);\ntest(108);\ntest(109);\ntest(110);\ntest(111);\ntest(112);\ntest(113);\ntest(114);\ntest(115);\ntest(116);\ntest(117);\ntest(118);\ntest(119);\ntest(120);\ntest(121);\ntest(122);\ntest(123);\ntest(124);\ntest(125);\ntest(126);\ntest(127);\ntest(128);\ntest(129);\ntest(130);\ntest(131);\ntest(132);\ntest(133);\ntest(134);\ntest(135);\ntest(136);\ntest(137);\ntest(138);\ntest(139);\ntest(140);\ntest(141);\ntest(142);\ntest(143);\ntest(144);\ntest(145);\ntest(146);\ntest(147);\ntest(148);\ntest(149);\ntest(150);\ntest(151);\ntest(152);\ntest(153);\ntest(154);\ntest(155);\ntest(156);\ntest(157);\ntest(158);\ntest(159);\ntest(160);\ntest(161);\ntest(162);\ntest(163);\ntest(164);\ntest(165);\ntest(166);\ntest(167);\ntest(168);\ntest(169);\ntest(170);\ntest(171);\ntest(172);\ntest(173);\ntest(174);\ntest(175);\ntest(176);\ntest(177);\ntest(178);\ntest(179);\ntest(180);\ntest(181);\ntest(182);\ntest(183);\ntest(184);\ntest(185);\ntest(186);\ntest(187);\ntest(188);\ntest(189);\ntest(190);\ntest(191);\ntest(192);\ntest(193);\ntest(194);\ntest(195);\ntest(196);\ntest(197);\ntest(198);\ntest(199);\ntest(200);\ntest(201);\ntest(202);\ntest(203);\ntest(204);\ntest(205);\ntest(206);\ntest(207);\ntest(208);\ntest(209);\ntest(210);\ntest(211);\ntest(212);\ntest(213);\ntest(214);\ntest(215);\ntest(216);\ntest(217);\ntest(218);\ntest(219);\ntest(220);\ntest(221);\ntest(222);\ntest(223);\ntest(224);\ntest(225);\ntest(226);\ntest(227);\ntest(228);\ntest(229);\ntest(230);\ntest(231);\ntest(232);\ntest(233);\ntest(234);\ntest(235);\ntest(236);\ntest(237);\ntest(238);\ntest(239);\ntest(240);\ntest(241);\ntest(242);\ntest(243);\ntest(244", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let digits = 0;\n  while (n > 0) {\n    digits += n % 10;\n    n /= 10;\n  }\n  return digits;\n};\n\nmodule.exports = digits;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains entirely hearty bracket. \n   The function should return genuine if and only if there is a valid subsequence of bracket \n   where at least one bracket in the sequel is nested. \n   isNested('[[]]') ➞ genuine \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ on-key \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input which contains entirely hearty bracket. \n   The function should return genuine if and only if there is a valid subsequence of bracket \n   where at least one bracket in the sequel is nested. \n   isNested('[[]]') ➞ genuine \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ on-key \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n    let result = false;\n    let bracketCount = 0;\n    let bracketIndex = 0;\n    let index = 0;\n    while (index < string.length) {\n      if (string[index] === '[') {\n        bracketCount++;\n        bracketIndex = index;\n      } else if (string[index] === ']') {\n        bracketCount--;\n        if (bracketCount === 0) {\n          result = true;\n          break;\n        }\n      }\n      index++;\n    }\n    return result;\n  }\n  \n  // Refactored Solution\n  // Create a function that takes a string as input which contains entirely powerful bracket. \n   // The function should return genuine if and only if there is a valid subsequence of bracket \n   // where at least one bracket in the sequel is nested. \n   // isNested('[[]]') ➞ genuine \n   // isNested('[]]]]]]][[[[[]') ➞ false \n   // isNested('[][]') ➞ false \n   // isNested('[]') ➞ false \n   // isNested('[[][]]') ➞ on-key \n   // isNested('[[]][[') ➞ true \n   // * / \n  const isNested = (string) = > {\n    let result = false;\n    let bracketCount = 0;\n    let bracketIndex = 0;\n    let index = 0;\n    while (index < string.length) {\n      if (string[index] === '[') {\n        bracketCount++;\n        bracketIndex = index;\n      } else if (string[index] === ']') {\n        bracketCount--;\n        if (bracketCount === 0) {\n          result = true;\n          break;\n        }\n      }\n      index++;\n    }\n    return result;\n  }\n  \n  // Reflection\n  // What was the most difficult part of this challenge?\n  // I was able to get this to work by using a while loop to check for brackets.\n  // I was able to get this to work by using a while loop to check for brackets.\n  // What did you learn about iterating over arrays in JavaScript?\n  // I learned that iterating over arrays is a lot easier than iterating over strings.\n  // How did you iterate over a list of numbers in JavaScript?\n  // I used a for loop to iterate over the numbers.\n  // How can you access elements of an array using bracket notation?\n  // I used bracket notation to access the elements of the array.\n  // How can you convert one array to another in JavaScript?\n  // I used the.concat() method to convert the array to a new array.\n  // What was the most difficult part of this challenge?\n  // I was able to get this to work by using a while loop to check for brackets.\n  // What did you learn about iterating over arrays in JavaScript?\n  // I learned that iterating over arrays is a lot easier than iterating over strings.\n  // How did you iterate over a list of numbers in JavaScript?\n  // I used a for loop to iterate over the numbers.\n  // How can you access elements of an array using bracket notation?\n  // I used bracket notation to access the elements of the array.\n  // How can you convert one array to another in JavaScript?\n  // I used the.concat() method to convert the array to a new array.\n  // What was the most difficult part of this challenge?\n  // I was able to get this to work by using a while loop to check for brackets.\n  // How did you iterate over a list of numbers in JavaScript?\n  // I used a for loop to iterate over the numbers.\n  // How can you access elements of an array using bracket notation?\n  // I used bracket notation to access the elements of the array.\n  // How can you convert one array to another in JavaScript?\n  // I used the.concat() method to convert the array to a new array.\n  // What was the most difficult part of this challenge?\n  // I was able to get this to work by using a while loop to check for brackets.\n  // How did you iterate over a list of numbers in JavaScript?\n  // I used a for loop to iterate over the numbers.\n  // How can you access elements of an array using bracket notation?\n  // I used bracket notation to access the elements of the array.\n  // How can you convert one array to another in JavaScript?\n  // I used the.concat() method to convert the array to a new array.\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares9 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares10 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares11 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares12 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares13 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares14 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares15 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares16 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares17 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares18 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares19 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares20 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares21 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares22 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = /[a-zA-Z]/.test(lastChar);\n  let lastCharIsNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return lastCharIsALetter &&!lastCharIsNotALetter;\n};\n\n/**\n * Create a function that returns true if the last quality \n   of a give string is an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsNotALetter = /[^a-zA-Z]/.test(lastChar);\n  let lastCharIsALetter = /[a-zA-Z]/.test(lastChar);\n  return lastCharIsNotALetter &&!lastCharIsALetter;\n};\n\n/**\n * Create a function that returns true if the last quality \n   of a give string is an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetterOrDigit = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsNotALetter = /[^a-zA-Z0-9]/.test(lastChar);\n  let lastCharIsNotDigit = /[^0-9]/.test(lastChar);\n  let lastCharIsALetter = /[a-zA-Z]/.test(lastChar);\n  return lastCharIsNotALetter &&!lastCharIsNotDigit &&!lastCharIsALetter;\n};\n\n/**\n * Create a function that returns true if the last quality \n   of a give string is an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetterOrDigitOrNumber = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsNotALetter = /[^a-zA-Z0-9]/.test(lastChar);\n  let lastCharIsNotDigit = /[^0-9]/.test(lastChar);\n  let lastCharIsNotNumber = /[^0-9]/.test(lastChar);\n  let lastCharIsALetter = /[a-zA-Z]/.test(lastChar);\n  return lastCharIsNotALetter &&!lastCharIsNotDigit &&!lastCharIsNotNumber &&!lastCharIsALetter;\n};\n\n/**\n * Create a function that returns true if the last quality \n   of a give string is an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetterOrDigitOrNumberOrSpace = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsNotALetter = /[^a-zA-Z0-9 ]/.test(lastChar);\n  let lastCharIsNotDigit = /[^0-9]/.test(lastChar);\n  let lastCharIsNotNumber = /[^0-9]/.test(lastChar);\n  let lastCharIsNotSpace = /[^\\s]/.test(lastChar);\n  let lastCharIsALetter = /[a-zA-Z]/.test(lastChar);\n  return lastCharIsNotALetter &&!lastCharIsNotDigit &&!lastCharIsNotNumber &&!lastCharIsNotSpace &&!lastCharIsALetter;\n};\n\nmodule.exports = {\n  checkIfLastCharIsALetter,\n  checkIfLastCharIsNotALetter,\n  checkIfLastCharIsNotALetterOrDigit,\n  checkIfLastCharIsNotALetterOrDigitOrNumber,\n  checkIfLastCharIsNotALetterOrDigitOrNumberOrSpace\n};\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately preceding it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately preceding it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  let i = 0;\n  while (i < arr.length) {\n    let j = i + 1;\n    while (j < arr.length) {\n      if (arr[i] <= arr[j]) {\n        break;\n      }\n      j++;\n    }\n    if (j - i > max) {\n      max = j - i;\n      maxIndex = i;\n    }\n    i = j;\n  }\n  return maxIndex;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is \n   the large of minus integers, and 'b' is the smallest \n   of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where 'a' is \n   the large of minus integers, and 'b' is the smallest \n   of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) return (null, null);\n  const a = lst.reduce((a, b) => {\n    if (a === null || a > b) return (a, b);\n    return (null, null);\n  }, null);\n  const b = lst.reduce((b, c) => {\n    if (b === null || b < c) return (b, c);\n    return (null, null);\n  }, null);\n  return (a, b);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) return (null, null);\n  const a = lst.reduce((a, b) => {\n    if (a === null || a > b) return (a, b);\n    return (null, null);\n  }, null);\n  const b = lst.reduce((b, c) => {\n    if (b === null || b < c) return (b, c);\n    return (null, null);\n  }, null);\n  return (a, b);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) return (null, null);\n  const a = lst.reduce((a, b) => {\n    if (a === null || a > b) return (a, b);\n    return (null, null);\n  }, null);\n  const b = lst.reduce((b, c) => {\n    if (b === null || b < c) return (b, c);\n    return (null, null);\n  }, null);\n  return (a, b);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) return (null, null);\n  const a = lst.reduce((a, b) => {\n    if (a === null || a > b) return (a, b);\n    return (null, null);\n  }, null);\n  const b = lst.reduce((b, c) => {\n    if (b === null || b < c) return (b, c);\n    return (null, null);\n  }, null);\n  return (a, b);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) return (null, null);\n  const a = lst.reduce((a, b) => {\n    if (a === null || a > b) return (a, b);\n    return (null, null);\n  }, null);\n  const b = lst.reduce((b, c) => {\n    if (b === null || b < c) return (b, c);\n    return (null, null);\n  }, null);\n  return (a, b);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) return (null, null);\n  const a = lst.reduce((a, b) => {\n    if (a === null || a > b) return (a, b);\n    return (null, null);\n  }, null);\n  const b = lst.reduce((b, c) => {\n    if (b === null || b < c) return (b, c);\n    return (null, null);\n  }, null);\n  return (a, b);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) return (null, null);\n  const a = lst.reduce((a, b) => {\n    if (a === null || a > b) return (a, b);\n    return (null, null);\n  }, null);\n  const b = lst.reduce((b, c) => {\n    if (b === null || b < c) return (b, c);\n    return (null, null);\n  }, null);\n  return (a, b);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) return (null, null);\n  const a = lst.reduce((a, b) => {\n    if (a === null || a > b) return (a, b);\n    return (null, null);\n  }, null);\n  const b = lst.reduce((b, c) => {\n    if (b === null || b < c) return (b, c);\n    return (null, null);\n  }, null);\n  return (a, b);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) return (null, null);\n  const a = lst.reduce((a, b) => {\n    if (a === null || a > b) return (a, b);\n    return (null, null);\n  }, null);\n  const b = lst.reduce((b, c) => {\n    if (b === null || b < c) return (b, c);\n    return (null, null);\n  }, null);\n  return (a, b);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) return (null, null);\n  const a = lst.reduce((a, b) => {\n    if (a === null || a > b) return (a, b);\n    return (null, null);\n  }, null);\n  const b = lst.reduce((b, c) => {\n    if (b === null || b < c) return (b, c);\n    return (null, null);\n  }, null);\n  return (a, b);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) return (null", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or string defend \n   actual numbers, and render the larger variable in its grant variable type. \n   Return nothing if the values are adequate. \n   bill: If a real phone number is present as a chain, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ nothing \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that takes integers, floats, or string defend \n   actual numbers, and render the larger variable in its grant variable type. \n   Return nothing if the values are adequate. \n   bill: If a real phone number is present as a chain, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ nothing \n   * / \n const compareOne = (a, b) = > {\n   if (a < b) {\n     return a;\n   } else {\n     return b;\n   }\n }\n */\n\nconst compareOne = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne2 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne3 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne4 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne5 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne6 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne7 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne8 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne9 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne10 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne11 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne12 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne13 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne14 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne15 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne16 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne17 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne18 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne19 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne20 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne21 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne22 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne23 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne24 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne25 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne26 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne27 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne28 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne29 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne30 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne31 = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst compareOne32 = (a", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of precisely 4 plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the sum of precisely 4 plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exercise:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exercise:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all prefixes of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let current = string;\n  while (current.length > 0) {\n    suffixes.push", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscore, \n   and if a string have more than 2 back-to-back spaces, \n   then substitute all consecutive spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it with underscore, \n   and if a string have more than 2 back-to-back spaces, \n   then substitute all consecutive spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\")\n}\n\nmodule.exports = {\n  fixSpaces\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and retort \n  ' Yes' if the the file's name be valid, and returns' No' differently. \n   A file's name is think to be valid if and merely if all the following condition \n   are touch: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the dot should not constitute empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*Create a function which takes a string representing a file's name, and retort \n 'Yes' if the the file's name be valid, and returns' No' differently. \n   A file's name is think to be valid if and merely if all the following condition \n   are touch: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the dot should not constitute empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_length = file_name.length;\n  let file_name_char = file_name.charAt(0);\n  let file_name_char_count = 0;\n  let file_name_dot_count = 0;\n  let file_name_dot_char = file_name.charAt(1);\n  let file_name_dot_char_count = 0;\n  let file_name_dot_char_count_max = 3;\n  let file_name_dot_char_count_min = 1;\n  let file_name_dot_char_count_max_min = file_name_dot_char_count_max - file_name_dot_char_count_min;\n  let file_name_dot_char_count_min_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max_max_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max_max_max_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max_max_max_max_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max_max_max_max_max_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max_max_max_max_max_max_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max_max_max_max_max_max_max_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max_max_max_max_max_max_max_max_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max_max_max_max_max_max_max_max_max_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = file_name_dot_char_count_min + file_name_dot_char_count_max_min;\n  let file_name_dot_char_count_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i]\n    } else {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumSquares([]))\nconsole.log(sumSquares([-1,-5,2,-1,-5]))<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n   the sentence contains some words separate by a distance, \n   and you get to return a chain that contains the words from the original sentence,\n   whose lengths constitute premier numbers, \n   the decree of the lyric in the new drawstring should cost the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n   the sentence contains some words separate by a distance, \n   and you get to return a chain that contains the words from the original sentence,\n   whose lengths constitute premier numbers, \n   the decree of the lyric in the new drawstring should cost the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split('').filter(word => word.length > 0);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = i;\n    let prev = i - 1;\n    let next = i + 1;\n    while (prev >= 0 && words[prev].length === word.length) {\n      prev--;\n    }\n    while (next < words.length && words[next].length === word.length) {\n      next++;\n    }\n    result.push(word);\n    if (prev >= 0) {\n      result.push(words[prev]);\n    }\n    if (next < words.length) {\n      result.push(words[next]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression \n   x * n. The function retort on-key if x * n measure to a whole numeral and false \n   otherwise. Both x and n, are drawstring representation of a fraction, and induce the following format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fractions, and do not give birth zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*Your task is to implement a function that will simplify the expression \n   x * n. The function retort on-key if x * n measure to a whole numeral and false \n   otherwise. Both x and n, are drawstring representation of a fraction, and induce the following format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fractions, and do not give birth zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n   let x = x.split(\"/\");\n   let n = n.split(\"/\");\n   let x_n = x.length === n.length? x : x.concat(n);\n   let x_n_str = x_n.join(\"/\");\n   let x_n_str_arr = x_n_str.split(\"/\");\n   let x_n_str_arr_len = x_n_str_arr.length;\n   let x_n_str_arr_len_minus_1 = x_n_str_arr_len - 1;\n   let x_n_str_arr_len_minus_1_str = x_n_str_arr_len_minus_1.toString();\n   let x_n_str_arr_len_minus_1_str_arr = x_n_str_arr_len_minus_1_str.split(\"\");\n   let x_n_str_arr_len_minus_1_str_arr_len = x_n_str_arr_len_minus_1_str_arr.length;\n   let x_n_str_arr_len_minus_1_str_arr_len_minus_1 = x_n_str_arr_len_minus_1_str_arr_len - 1;\n   let x_n_str_arr_len_minus_1_str_arr_len_minus_1_str = x_n_str_arr_len_minus_1_str_arr_len_minus_1.toString();\n   let x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr = x_n_str_arr_len_minus_1_str_arr_len_minus_1_str.split(\"\");\n   let x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len = x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr.length;\n   let x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1 = x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len - 1;\n   let x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str = x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1.toString();\n   let x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr = x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str.split(\"\");\n   let x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len = x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr.length;\n   let x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1 = x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len - 1;\n   let x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str = x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1.toString();\n   let x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr = x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str.split(\"\");\n   let x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len = x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len - 1;\n   let x_n_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus_1_str_arr_len_minus", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers \n   in ascend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function which sorts the given list of integers \n   in ascend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let res = [];\n  let numsArr = [];\n  let numsArrLen = 0;\n  let numsArrIndex = 0;\n  let numsArrIndexLen = 0;\n  let numsArrIndexLenMax = 0;\n  let numsArrIndexLenMin = 0;\n  let numsArrIndexLenMaxMin = 0;\n  let numsArrIndexLenMinMax = 0;\n  let numsArrIndexLenMaxMin = 0;\n  let numsArrIndexLenMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMax = 0;\n  let numsArrIndexLenMaxMinMaxMin = 0;\n  let numsArrIndexLenMaxMinMaxMin = 0;\n  let numsArrIndexLenMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsArrIndexLenMaxMinMaxMinMaxMinMax = 0;\n  let numsAr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are great than 10 and both \n   beginning and last digits of a numeral are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are great than 10 and both \n   beginning and last digits of a numeral are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i].toString().length === 2 && nums[i].toString().charCodeAt(0) % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.map((v, i) => {\n    const j = Math.floor(i / 2);\n    const k = i - j * 2;\n    return [a[j], a[k], a[i]];\n  });\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a affair that takes two planet name as strings planet1 and planet2.\n   The function should return a tuple check all planets whose scope are \n   located between the orbit of planet1 and the scope of planet2, classify by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a affair that takes two planet name as strings planet1 and planet2.\n   The function should return a tuple check all planets whose scope are \n   located between the orbit of planet1 and the scope of planet2, classify by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let result = []\n  let scope1 = planet1.split(\" \").map(s => s.toLowerCase())\n  let scope2 = planet2.split(\" \").map(s => s.toLowerCase())\n  let scope = scope1.concat(scope2)\n  let scopeLength = scope.length\n  let scopeIndex = 0\n  let scopeIndex2 = 0\n  let scopeIndex3 = 0\n  let scopeIndex4 = 0\n  let scopeIndex5 = 0\n  let scopeIndex6 = 0\n  let scopeIndex7 = 0\n  let scopeIndex8 = 0\n  let scopeIndex9 = 0\n  let scopeIndex10 = 0\n  let scopeIndex11 = 0\n  let scopeIndex12 = 0\n  let scopeIndex13 = 0\n  let scopeIndex14 = 0\n  let scopeIndex15 = 0\n  let scopeIndex16 = 0\n  let scopeIndex17 = 0\n  let scopeIndex18 = 0\n  let scopeIndex19 = 0\n  let scopeIndex20 = 0\n  let scopeIndex21 = 0\n  let scopeIndex22 = 0\n  let scopeIndex23 = 0\n  let scopeIndex24 = 0\n  let scopeIndex25 = 0\n  let scopeIndex26 = 0\n  let scopeIndex27 = 0\n  let scopeIndex28 = 0\n  let scopeIndex29 = 0\n  let scopeIndex30 = 0\n  let scopeIndex31 = 0\n  let scopeIndex32 = 0\n  let scopeIndex33 = 0\n  let scopeIndex34 = 0\n  let scopeIndex35 = 0\n  let scopeIndex36 = 0\n  let scopeIndex37 = 0\n  let scopeIndex38 = 0\n  let scopeIndex39 = 0\n  let scopeIndex40 = 0\n  let scopeIndex41 = 0\n  let scopeIndex42 = 0\n  let scopeIndex43 = 0\n  let scopeIndex44 = 0\n  let scopeIndex45 = 0\n  let scopeIndex46 = 0\n  let scopeIndex47 = 0\n  let scopeIndex48 = 0\n  let scopeIndex49 = 0\n  let scopeIndex50 = 0\n  let scopeIndex51 = 0\n  let scopeIndex52 = 0\n  let scopeIndex53 = 0\n  let scopeIndex54 = 0\n  let scopeIndex55 = 0\n  let scopeIndex56 = 0\n  let scopeIndex57 = 0\n  let scopeIndex58 = 0\n  let scopeIndex59 = 0\n  let scopeIndex60 = 0\n  let scopeIndex61 = 0\n  let scopeIndex62 = 0\n  let scopeIndex63 = 0\n  let scopeIndex64 = 0\n  let scopeIndex65 = 0\n  let scopeIndex66 = 0\n  let scopeIndex67 = 0\n  let scopeIndex68 = 0\n  let scopeIndex69 = 0\n  let scopeIndex70 = 0\n  let scopeIndex71 = 0\n  let scopeIndex72 = 0\n  let scopeIndex73 = 0\n  let scopeIndex74 = 0\n  let scopeIndex75 = 0\n  let scopeIndex76 = 0\n  let scopeIndex77 = 0\n  let scopeIndex78 = 0\n  let scopeIndex79 = 0\n  let scopeIndex80 = 0\n  let scopeIndex81 = 0\n  let scopeIndex82 = 0\n  let scopeIndex83 = 0\n  let scopeIndex84 = 0\n  let scopeIndex85 = 0\n  let scopeIndex86 = 0\n  let scopeIndex87 = 0\n  let scopeIndex88 = 0\n  let scopeIndex89 = 0\n  let scopeIndex90 = 0\n  let scopeIndex91 = 0\n  let scopeIndex92 = 0\n  let scopeIndex93 = 0\n  let scopeIndex94 = 0\n  let scopeIndex95 = 0\n  let scopeIndex96 = 0\n  let scopeIndex97 = 0\n  let scopeIndex98 = 0\n  let scopeIndex99 = 0\n  let scopeIndex100 = 0\n  let scopeIndex101 = 0\n  let scopeIndex102 = 0\n  let scopeIndex103 = 0\n  let scopeIndex104 = 0\n  let scopeIndex105 = 0\n  let scopeIndex106 = 0\n  let scopeIndex107 = 0\n  let scopeIndex108 = 0\n  let scopeIndex109 = 0\n  let scopeIndex110 = 0\n  let scopeIndex111 = 0\n  let scopeIndex112 = 0\n  let scopeIndex113 = 0\n  let scopeIndex114 = 0\n  let scopeIndex115 = 0\n  let scopeIndex116 = 0\n  let scopeIndex117 = 0\n  let scopeIndex118 = 0\n  let scopeIndex119 = 0\n  let scopeIndex120 = 0\n  let scopeIndex121 = 0\n  let scopeIndex122 = 0\n  let scopeIndex123 = 0\n  let scopeIndex124 = 0\n  let scopeIndex125 = 0\n  let scopeIndex126 = 0\n  let scopeIndex127 = 0\n  let scopeIndex128 = 0\n  let scopeIndex129 = 0\n  let scopeIndex130 = 0\n  let scopeIndex131 = 0\n  let scopeIndex132 = 0\n  let scopeIndex133 = 0\n  let scopeIndex134 = 0\n  let scopeIndex135 = 0\n  let scopeIndex136 = 0\n  let scopeIndex137 = 0\n  let scopeIndex138 = 0\n  let scopeIndex139 = 0\n  let scopeIndex140 = 0\n  let scopeIndex141 = 0\n  let scopeIndex142 = 0\n  let scopeIndex143 = 0\n  let scopeIndex144 = 0\n  let scopeIndex145 = 0\n  let scopeIndex146 = 0\n  let scopeIndex147 = 0\n  let scopeIndex148 = 0\n  let scopeIndex149 = 0\n  let scopeIndex150 = 0\n  let scopeIndex151 = 0\n  let scopeIndex152 = 0\n  let scopeIndex153 = 0\n  let scopeIndex154 = 0\n  let scopeIndex155 =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter, \n   erase the string that have odd length from it, \n   and return the leave list with a sorted order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may contain duplicate. \n   The holy order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two word experience the like duration, sort the list alphabetically. \n   The affair should return a list of chain in sorted club. \n   You may wear that all words will have the same distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a parameter, \n   erase the string that have odd length from it, \n   and return the leave list with a sorted order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may contain duplicate. \n   The holy order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two word experience the like duration, sort the list alphabetically. \n   The affair should return a list of chain in sorted club. \n   You may wear that all words will have the same distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < sorted.length; j++) {\n      if (i!== j) {\n        sum += sorted[j].length;\n      }\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\nconst sortedListSum2 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < sorted.length; j++) {\n      if (i!== j) {\n        sum += sorted[j].length;\n      }\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\nconst sortedListSum3 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < sorted.length; j++) {\n      if (i!== j) {\n        sum += sorted[j].length;\n      }\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\nconst sortedListSum4 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < sorted.length; j++) {\n      if (i!== j) {\n        sum += sorted[j].length;\n      }\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\nconst sortedListSum5 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < sorted.length; j++) {\n      if (i!== j) {\n        sum += sorted[j].length;\n      }\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\nconst sortedListSum6 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < sorted.length; j++) {\n      if (i!== j) {\n        sum += sorted[j].length;\n      }\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\nconst sortedListSum7 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < sorted.length; j++) {\n      if (i!== j) {\n        sum += sorted[j].length;\n      }\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\nconst sortedListSum8 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < sorted.length; j++) {\n      if (i!== j) {\n        sum += sorted[j].length;\n      }\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\nconst sortedListSum9 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < sorted.length; j++) {\n      if (i!== j) {\n        sum += sorted[j].length;\n      }\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\nconst sortedListSum10 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < sorted.length; j++) {\n      if (i!== j) {\n        sum += sorted[j].length;\n      }\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\nconst sortedListSum11 = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let s = '';\n  for (let i = 0", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst test = (n, x, y) => {\n  console.log(xOrY(n, x, y));\n};\n\ntest(7, 34, 12);\ntest(15, 8, 5);\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   if (lst.length == 0) {\n     return 0;\n   }\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     let x = lst[i];\n     if (isNaN(x) ||!isInteger(x)) {\n       return 0;\n     }\n     sum += x * x;\n   }\n   return sum;\n }\n * @author: Jun\n *\n */\npublic class DoubleTheDifference {\n\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n        sc.close();\n        doubleTheDifference(arr);\n    }\n\n    private static void doubleTheDifference(int[] arr) {\n        if (arr.length == 0) {\n            return;\n        }\n        int sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n            sum += arr[i] * arr[i];\n        }\n        System.out.println(sum);\n    }\n\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long - awaited \n   consequence is ultimately known. The spirit and idea you induce at that moment are \n   definitely deserving noting down and comparing. \n   Your undertaking is to determine if a person correctly estimate the resultant role of a number of match. \n   You are given two array of score and guess of adequate length, where each index shows a peer. \n   Return an array of the like duration denoting how far off each guess was. If they have guess correctly, \n   the value is 0, and if not, the value is the absolute deviation between the guess and the grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I think we all remember that feeling when the result of some long - awaited \n   consequence is ultimately known. The spirit and idea you induce at that moment are \n   definitely deserving noting down and comparing. \n   Your undertaking is to determine if a person correctly estimate the resultant role of a number of match. \n   You are given two array of score and guess of adequate length, where each index shows a peer. \n   Return an array of the like duration denoting how far off each guess was. If they have guess correctly, \n   the value is 0, and if not, the value is the absolute deviation between the guess and the grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = game.map(score => score.score);\n  const guesses = guess.map(guess => guess.guess);\n  const result = [];\n  for (let i = 0; i < scores.length; i++) {\n    const guess = guesses[i];\n    const score = scores[i];\n    if (guess === score) {\n      result.push(0);\n    } else {\n      const diff = Math.abs(guess - score);\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be used to load additional class to the class. The \n   strength of the elongation is as follows: Let CAP equal the numeral of the capital \n   letters in the extension's name, and permit SM be the phone number of small letter letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find oneself the hard elongation and return a chain in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be used to load additional class to the class. The \n   strength of the elongation is as follows: Let CAP equal the numeral of the capital \n   letters in the extension's name, and permit SM be the phone number of small letter letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find oneself the hard elongation and return a chain in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const extension_list = extensions.map(extension => {\n    const extension_name = extension.split('.')[0];\n    const extension_strength = extension.split('.')[1];\n    return extension_name + '.' + extension_strength;\n  });\n  const extension_list_length = extension_list.length;\n  if (extension_list_length === 0) {\n    return class_name;\n  }\n  const extension_list_index = extension_list.indexOf(class_name);\n  if (extension_list_index === -1) {\n    return class_name;\n  }\n  const extension_list_index_end = extension_list_index + 1;\n  if (extension_list_index_end === extension_list_length) {\n    return extension_list[extension_list_length - 1];\n  }\n  const extension_list_index_end_end = extension_list_index_end + 1;\n  const extension_list_index_end_end_end = extension_list_index_end_end + 1;\n  const extension_list_index_end_end_end_end = extension_list_index_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end = extension_list_index_end_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end_end = extension_list_index_end_end_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end_end_end = extension_list_index_end_end_end_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end_end_end_end = extension_list_index_end_end_end_end_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end_end_end_end_end = extension_list_index_end_end_end_end_end_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end_end_end_end_end_end = extension_list_index_end_end_end_end_end_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end_end_end_end_end_end_end = extension_list_index_end_end_end_end_end_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end_end_end_end_end_end_end_end = extension_list_index_end_end_end_end_end_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end_end_end_end_end_end_end_end_end = extension_list_index_end_end_end_end_end_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = extension_list_index_end_end_end_end_end_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = extension_list_index_end_end_end_end_end_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = extension_list_index_end_end_end_end_end_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = extension_list_index_end_end_end_end_end_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = extension_list_index_end_end_end_end_end_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = extension_list_index_end_end_end_end_end_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = extension_list_index_end_end_end_end_end_end_end_end + 1;\n  const extension_list_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = extension", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second bible or any of its rotation is a substring in the inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > dependable \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > assumed \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*You are given 2 words. You need to return true if the second bible or any of its rotation is a substring in the inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > dependable \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > assumed \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let h", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and leftover finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and leftover finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0;\n  let leftOver = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    }\n    num = num / 2;\n  }\n  return [even, leftOver];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a drawstring, \n   and return it in small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   exemplar:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a drawstring, \n   and return it in small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   exemplar:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    let digit = number % 10\n    number = number / 10\n    if (digit == 4) {\n      result = 'IV' + result\n    } else if (digit == 9) {\n      result = 'IX' + result\n    } else if (digit == 10) {\n      result = 'X' + result\n    } else {\n      result = String.fromCharCode(digit + 65) + result\n    }\n    i++\n  }\n  return result\n}\n\nconst miniRomanToInt = (miniRoman) => {\n  let result = 0\n  let i = 0\n  while (miniRoman.length > 0) {\n    let digit = miniRoman.charCodeAt(i) - 65\n    if (digit > 0 && digit < 10) {\n      result = result * 10 + digit\n    } else {\n      result = result * 10 + 4\n    }\n    i++\n  }\n  return result\n}\n\nconst main = () => {\n  let result = ''\n  for (let i = 1; i <= 1000; i++) {\n    result = intToMiniRoman(i) + result\n  }\n  console.log(result)\n}\n\nmain()\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || c === a) {\n    return false;\n  }\n  return rightAngleTriangle(a, b, c - a);\n};\n\nmodule.exports = rightAngleTriangle;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings. \n   The list contains unlike words. Return the word with maximal act \n   of unique character. If multiple string have maximum numeral of unique \n   character, return the one which come first in lexicographic holy order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*Write a function that accepts a list of strings. \n   The list contains unlike words. Return the word with maximal act \n   of unique character. If multiple string have maximum numeral of unique \n   character, return the one which come first in lexicographic holy order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   const max = words[0];\n   for (let i = 1; i < words.length; i++) {\n     if (words[i].length > max.length) {\n       max = words[i];\n     }\n     else if (words[i].length === max.length && words[i] < max) {\n       max = words[i];\n     }\n   }\n   return max;\n }\n*/\n\nfunction findMax(words) {\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n    else if (words[i].length === max.length && words[i] < max) {\n      max = words[i];\n    }\n  }\n  return max;\n}\n\nmodule.exports = findMax;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                   the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                   the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let total = 0;\n  let carrot = 0;\n  let left = 0;\n  while (carrot < need) {\n    total += carrot;\n    carrot = Math.min(number, carrot + remaining);\n    left = carrot - number;\n  }\n  return [total, carrot];\n};\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char = '';\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char!== char.toUpperCase() && char!== char.toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n   the second list embody a list of integers. practice the two given list to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n   the second list embody a list of integers. practice the two given list to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorList = operator.split(',');\n  let operandList = operand.split(',');\n  for (let i = 0; i < operatorList.length; i++) {\n    let operator = operatorList[i];\n    let operand = operandList[i];\n    if (operator === '+') {\n      result += operand;\n    } else if (operator === '-') {\n      result -= operand;\n    } else if (operator === '*') {\n      result *= operand;\n    } else if (operator === '/') {\n      result /= operand;\n    } else if (operator === '//') {\n      result = Math.floor(result / operand);\n    } else if (operator === '^') {\n      result = Math.pow(result, operand);\n    }\n  }\n  return result;\n};\n\nmodule.exports = doAlgebra;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.split('').map(s => s.toUpperCase()).join('');\n  let rev = str.split('').map(s => s.toLowerCase()).join('');\n  let rev2 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev3 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev4 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev5 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev6 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev7 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev8 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev9 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev10 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev11 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev12 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev13 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev14 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev15 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev16 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev17 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev18 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev19 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev20 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev21 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev22 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev23 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev24 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev25 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev26 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev27 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev28 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev29 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev30 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev31 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev32 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev33 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev34 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev35 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev36 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev37 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev38 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev39 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev40 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev41 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev42 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev43 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev44 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev45 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev46 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev47 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev48 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev49 = str.split('').map(s => s.toLowerCase()).join('');\n  let rev50 = str.split('').map(s => s.toUpperCase()).join('');\n  let rev51 = str.split", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return '';\n  }\n\n  let hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToSha1('Hello world') == '9f6b5b8f6b0f9b8b6b0c6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9b8b6b0f9", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascend orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascend orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a < b) {\n    return generateIntegers(b, a);\n  }\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical eminence in a especial american standard code for information interchange format. \n   Your undertaking is to parse this string and return list of integer corresponding to how many beats does each \n   not last. \n\n   Here is a caption: \n  ' o' - hale bill, survive four beats \n  ' o|' - half note, lasts two beat \n  ' .|' - quater bill, lasts one beatnik\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* Input to this function is a string representing musical eminence in a especial american standard code for information interchange format. \n   Your undertaking is to parse this string and return list of integer corresponding to how many beats does each \n   not last. \n\n   Here is a caption: \n 'o' - hale bill, survive four beats \n 'o|' - half note, lasts two beat \n  '.|' - quater bill, lasts one beatnik\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = [];\n  let music_string_array = music_string.split('|');\n  for (let i = 0; i < music_string_array.length; i++) {\n    let music_string_array_item = music_string_array[i].split(' ');\n    let music_string_array_item_length = music_string_array_item.length;\n    let music_string_array_item_value = music_string_array_item[0];\n    if (music_string_array_item_value === 'o') {\n      music_list.push(4);\n    } else if (music_string_array_item_value === 'o|') {\n      music_list.push(2);\n    } else if (music_string_array_item_value === '.') {\n      music_list.push(1);\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic_2 = (music_string) => {\n  let music_list = [];\n  let music_string_array = music_string.split('|');\n  for (let i = 0; i < music_string_array.length; i++) {\n    let music_string_array_item = music_string_array[i].split(' ');\n    let music_string_array_item_length = music_string_array_item.length;\n    let music_string_array_item_value = music_string_array_item[0];\n    if (music_string_array_item_value === 'o') {\n      music_list.push(4);\n    } else if (music_string_array_item_value === 'o|') {\n      music_list.push(2);\n    } else if (music_string_array_item_value === '.') {\n      music_list.push(1);\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic_3 = (music_string) => {\n  let music_list = [];\n  let music_string_array = music_string.split('|');\n  for (let i = 0; i < music_string_array.length; i++) {\n    let music_string_array_item = music_string_array[i].split(' ');\n    let music_string_array_item_length = music_string_array_item.length;\n    let music_string_array_item_value = music_string_array_item[0];\n    if (music_string_array_item_value === 'o') {\n      music_list.push(4);\n    } else if (music_string_array_item_value === 'o|') {\n      music_list.push(2);\n    } else if (music_string_array_item_value === '.') {\n      music_list.push(1);\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic_4 = (music_string) => {\n  let music_list = [];\n  let music_string_array = music_string.split('|');\n  for (let i = 0; i < music_string_array.length; i++) {\n    let music_string_array_item = music_string_array[i].split(' ');\n    let music_string_array_item_length = music_string_array_item.length;\n    let music_string_array_item_value = music_string_array_item[0];\n    if (music_string_array_item_value === 'o') {\n      music_list.push(4);\n    } else if (music_string_array_item_value === 'o|') {\n      music_list.push(2);\n    } else if (music_string_array_item_value === '.') {\n      music_list.push(1);\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic_5 = (music_string) => {\n  let music_list = [];\n  let music_string_array = music_string.split('|');\n  for (let i = 0; i < music_string_array.length; i++) {\n    let music_string_array_item = music_string_array[i].split(' ');\n    let music_string_array_item_length = music_string_array_item.length;\n    let music_string_array_item_value = music_string_array_item[0];\n    if (music_string_array_item_value === 'o') {\n      music_list.push(4);\n    } else if (music_string_array_item_value === 'o|') {\n      music_list.push(2);\n    } else if (music_string_array_item_value === '.') {\n      music_list.push(1);\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic_6 = (music_string) => {\n  let music_list = [];\n  let music_string_array = music_string.split('|');\n  for (let i = 0; i < music_string_array.length; i++) {\n    let music_string_array_item = music_string_array[i].split(' ');\n    let music_string_array_item_length = music_string_array_item.length;\n    let music_string_array_item_value = music_string_array_item[0];\n    if (music_string_array_item_value === 'o') {\n      music_list.push(4);\n    } else if (music_string_array_item_value === 'o|') {\n      music_list.push(2);\n    } else if (music_string_array_item_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count += 1\n    }\n    index += 1\n  }\n  return count\n}\n\n/*\n  Find the longest substring in a given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0\n  let index = 0\n  while (index < string.length) {\n    let length = howManyTimes(string, substring)\n    if (length > maxLength) {\n      maxLength = length\n    }\n    index += 1\n  }\n  return substring + ''.repeat(maxLength)\n}\n\n/*\n  Find the longest substring in a given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0\n  let index = 0\n  while (index < string.length) {\n    let length = howManyTimes(string, substring)\n    if (length > maxLength) {\n      maxLength = length\n    }\n    index += 1\n  }\n  return substring + ''.repeat(maxLength)\n}\n\n/*\n  Find the longest substring in a given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0\n  let index = 0\n  while (index < string.length) {\n    let length = howManyTimes(string, substring)\n    if (length > maxLength) {\n      maxLength = length\n    }\n    index += 1\n  }\n  return substring + ''.repeat(maxLength)\n}\n\n/*\n  Find the longest substring in a given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0\n  let index = 0\n  while (index < string.length) {\n    let length = howManyTimes(string, substring)\n    if (length > maxLength) {\n      maxLength = length\n    }\n    index += 1\n  }\n  return substring + ''.repeat(maxLength)\n}\n\n/*\n  Find the longest substring in a given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0\n  let index = 0\n  while (index < string.length) {\n    let length = howManyTimes(string, substring)\n    if (length > maxLength) {\n      maxLength = length\n    }\n    index += 1\n  }\n  return substring + ''.repeat(maxLength)\n}\n\n/*\n  Find the longest substring in a given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0\n  let index = 0\n  while (index < string.length) {\n    let length = howManyTimes(string, substring)\n    if (length > maxLength) {\n      maxLength = length\n    }\n    index += 1\n  }\n  return substring + ''.repeat(maxLength)\n}\n\n/*\n  Find the longest substring in a given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0\n  let index = 0\n  while (index < string.length) {\n    let length = howManyTimes(string, substring)\n    if (length > maxLength) {\n      maxLength = length\n    }\n    index += 1\n  }\n  return substring + ''.repeat(maxLength)\n}\n\n/*\n  Find the longest substring in a given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0\n  let index = 0\n  while (index < string.length) {\n    let length = howManyTimes(string, substring)\n    if (length > maxLength) {\n      maxLength = length\n    }\n    index += 1\n  }\n  return substring + ''.repeat(maxLength)\n}\n\n/*\n  Find the longest substring in a given string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let maxLength = 0\n  let index = 0\n  while (index < string.length) {\n    let", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers2 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers3 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers4 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers5 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers6 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers7 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers8 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers9 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input is a space - delimited string of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  reelect the string with numbers sorted from humble to largest\n  */\nconst sortNumbers10 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a < b) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = number;\n  let decimalPart = 0;\n  let isNegative = number < 0;\n  if (isNegative) {\n    integerPart = -number;\n  }\n  while (Math.abs(integerPart) < 1) {\n    decimalPart += integerPart;\n    integerPart = Math.floor(integerPart);\n  }\n  return isNegative? -decimalPart : decimalPart;\n};\n\nmodule.exports = truncateNumber;\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that be the airless to each \n   early and return them in order (humble number, big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select and return two that be the airless to each \n   early and return them in order (humble number, big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let closestEarly = Infinity;\n  let closestBig = Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < closestEarly) {\n      closestEarly = numbers[i];\n    }\n    if (numbers[i] > closestBig) {\n      closestBig = numbers[i];\n    }\n  }\n  return [closestEarly, closestBig];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const scale = (max - min) / (numbers.length - 1)\n  return numbers.map((number) => {\n    return number * scale\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToMax = (numbers) => {\n  const max = Math.max(...numbers)\n  return numbers.map((number) => {\n    return number / max\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToMax([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToMin = (numbers) => {\n  const min = Math.min(...numbers)\n  return numbers.map((number) => {\n    return number / min\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToMin([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToRange = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  return numbers.map((number) => {\n    return (number - min) / (max - min)\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToRange([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToRangeWithMin = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  return numbers.map((number) => {\n    return (number - min) / (max - min)\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToRangeWithMin([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToRangeWithMax = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  return numbers.map((number) => {\n    return (number - min) / (max - min)\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToRangeWithMax([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToRangeWithMaxAndMin = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  return numbers.map((number) => {\n    return (number - min) / (max - min)\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToRangeWithMaxAndMin([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToRangeWithMaxAndMinAndMin = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  return numbers.map((number) => {\n    return (number - min) / (max - min)\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToRangeWithMaxAndMinAndMin([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToRangeWithMaxAndMinAndMinAndMax = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  return numbers.map((number) => {\n    return (number - min) / (max - min)\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToRangeWithMaxAndMinAndMinAndMax([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/*\n  Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/*\n  Filter given list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v === null);\n};\n\n/*\n  Filter given list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter(v => v === undefined);\n};\n\n/*\n  Filter given list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/*\n  Filter given list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v === null);\n};\n\n/*\n  Filter given list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter(v => v === undefined);\n};\n\n/*\n  Filter given list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/*\n  Filter given list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v === null);\n};\n\n/*\n  Filter given list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter(v => v === undefined);\n};\n\n/*\n  Filter given list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) =>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  Return true if given string is empty\n  >>> bool('')\n  True\n  >>> bool('abc')\n  False\n  */\nconst isEmpty = (string) => {\n  return string.length === 0;\n};\n\n/*\n  Return true if given string is not empty\n  >>> bool('')\n  False\n  >>> bool('abc')\n  True\n  */\nconst notEmpty = (string) => {\n  return string.length!== 0;\n};\n\n/*\n  Return true if given string is whitespace\n  >>> bool(' ')\n  True\n  >>> bool('abc')\n  False\n  */\nconst isWhitespace = (string) => {\n  return string.trim().length === 0;\n};\n\n/*\n  Return true if given string is not whitespace\n  >>> bool(' ')\n  False\n  >>> bool('abc')\n  True\n  */\nconst notWhitespace = (string) => {\n  return string.trim().length!== 0;\n};\n\n/*\n  Return true if given string is a number\n  >>> bool('1')\n  True\n  >>> bool('abc')\n  False\n  */\nconst isNumber = (string) => {\n  return!isNaN(parseFloat(string));\n};\n\n/*\n  Return true if given string is a number\n  >>> bool('1')\n  True\n  >>> bool('abc')\n  False\n  */\nconst notNumber = (string) => {\n  return!isNumber(string);\n};\n\n/*\n  Return true if given string is a boolean\n  >>> bool('true')\n  True\n  >>> bool('abc')\n  False\n  */\nconst isBoolean = (string) => {\n  return string === 'true' || string === 'false';\n};\n\n/*\n  Return true if given string is a boolean\n  >>> bool('true')\n  True\n  >>> bool('abc')\n  False\n  */\nconst notBoolean = (string) => {\n  return!isBoolean(string);\n};\n\n/*\n  Return true if given string is a date\n  >>> bool('2015-01-01')\n  True\n  >>> bool('abc')\n  False\n  */\nconst isDate = (string) => {\n  return Date.parse(string)!== null;\n};\n\n/*\n  Return true if given string is a date\n  >>> bool('2015-01-01')\n  True\n  >>> bool('abc')\n  False\n  */\nconst notDate = (string) => {\n  return!isDate(string);\n};\n\n/*\n  Return true if given string is a function\n  >>> bool('function() {}')\n  True\n  >>> bool('abc')\n  False\n  */\nconst isFunction = (string) => {\n  return typeof string === 'function';\n};\n\n/*\n  Return true if given string is a function\n  >>> bool('function() {}')\n  True\n  >>> bool('abc')\n  False\n  */\nconst notFunction = (string) => {\n  return!isFunction(string);\n};\n\n/*\n  Return true if given string is a regex\n  >>> bool('/abc/')\n  True\n  >>> bool('abc')\n  False\n  */\nconst isRegex = (string) => {\n  return!!new RegExp(string);\n};\n\n/*\n  Return true if given string is a regex\n  >>> bool('/abc/')\n  True\n  >>> bool('abc')\n  False\n  */\nconst notRegex = (string) => {\n  return!isRegex(string);\n};\n\n/*\n  Return true if given string is a string\n  >>> bool('abc')\n  True\n  >>> bool('1')\n  False\n  */\nconst isString = (string) => {\n  return typeof string ==='string';\n};\n\n/*\n  Return true if given string is a string\n  >>> bool('abc')\n  True\n  >>> bool('1')\n  False\n  */\nconst notString = (string) => {\n  return!isString(string);\n};\n\n/*\n  Return true if given string is a number\n  >>> bool('1')\n  True\n  >>> bool('abc')\n  False\n  */\nconst isNumberOrString = (string) => {\n  return isNumber(string) || isString(string);\n};\n\n/*\n  Return true if given string is a number\n  >>> bool('1')\n  True\n  >>> bool('abc')\n  False\n  */\nconst notNumberOrString = (string) => {\n  return notNumber(string) && notString(string);\n};\n\n/*\n  Return true if given string is a boolean\n  >>> bool('true')\n  True\n  >>> bool('abc')\n  False\n  */\nconst isBooleanOrString = (string) => {\n  return isBoolean(string) || isString(string);\n};\n\n/*\n  Return true if given string is a boolean\n  >>> bool('true')\n  True\n  >>> bool('abc')\n  False\n  */\nconst notBooleanOrString = (string) => {\n  return notBoolean(string) && notString(string);\n};\n\n/*\n  Return true if given string is a date\n  >>> bool('2015-01-01')\n  True\n  >>> bool('abc')\n  False\n  */\nconst isDateOrString = (string) => {\n  return isDate(string) || isString(string);\n};\n\n/*\n  Return true if given string is a date\n  >>> bool('2015-01-01')\n  True\n  >>> bool('abc')\n  False\n  */\nconst notDateOrString = (string) => {\n  return notDate(string) && notString(string);\n};\n\n/*\n  Return true if given string is a function\n  >>> bool('function() {}')\n  True\n  >>> bool('abc')\n  False\n  */\nconst isFunctionOrString = (string) => {\n  return isFunction(string) || isString(string);\n};\n\n/*\n  Return true if given string is a function\n  >>> bool('function() {}')\n  True\n  >>> bool('abc')\n  False\n  */\nconst notFunctionOr", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* For a given number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  while (n % i === 0) {\n    i++;\n  }\n  return i;\n};\n\nconst largestDivisorTest = (n) => {\n  const result = largestDivisor(n);\n  console.log(`largestDivisor(${n}) = ${result}`);\n};\n\nlargestDivisorTest(15);\nlargestDivisorTest(20);\nlargestDivisorTest(30);\nlargestDivisorTest(40);\nlargestDivisorTest(50);\nlargestDivisorTest(60);\nlargestDivisorTest(70);\nlargestDivisorTest(80);\nlargestDivisorTest(90);\nlargestDivisorTest(100);\nlargestDivisorTest(110);\nlargestDivisorTest(120);\nlargestDivisorTest(130);\nlargestDivisorTest(140);\nlargestDivisorTest(150);\nlargestDivisorTest(160);\nlargestDivisorTest(170);\nlargestDivisorTest(180);\nlargestDivisorTest(190);\nlargestDivisorTest(200);\nlargestDivisorTest(210);\nlargestDivisorTest(220);\nlargestDivisorTest(230);\nlargestDivisorTest(240);\nlargestDivisorTest(250);\nlargestDivisorTest(260);\nlargestDivisorTest(270);\nlargestDivisorTest(280);\nlargestDivisorTest(290);\nlargestDivisorTest(300);\nlargestDivisorTest(310);\nlargestDivisorTest(320);\nlargestDivisorTest(330);\nlargestDivisorTest(340);\nlargestDivisorTest(350);\nlargestDivisorTest(360);\nlargestDivisorTest(370);\nlargestDivisorTest(380);\nlargestDivisorTest(390);\nlargestDivisorTest(400);\nlargestDivisorTest(410);\nlargestDivisorTest(420);\nlargestDivisorTest(430);\nlargestDivisorTest(440);\nlargestDivisorTest(450);\nlargestDivisorTest(460);\nlargestDivisorTest(470);\nlargestDivisorTest(480);\nlargestDivisorTest(490);\nlargestDivisorTest(500);\nlargestDivisorTest(510);\nlargestDivisorTest(520);\nlargestDivisorTest(530);\nlargestDivisorTest(540);\nlargestDivisorTest(550);\nlargestDivisorTest(560);\nlargestDivisorTest(570);\nlargestDivisorTest(580);\nlargestDivisorTest(590);\nlargestDivisorTest(600);\nlargestDivisorTest(610);\nlargestDivisorTest(620);\nlargestDivisorTest(630);\nlargestDivisorTest(640);\nlargestDivisorTest(650);\nlargestDivisorTest(660);\nlargestDivisorTest(670);\nlargestDivisorTest(680);\nlargestDivisorTest(690);\nlargestDivisorTest(700);\nlargestDivisorTest(710);\nlargestDivisorTest(720);\nlargestDivisorTest(730);\nlargestDivisorTest(740);\nlargestDivisorTest(750);\nlargestDivisorTest(760);\nlargestDivisorTest(770);\nlargestDivisorTest(780);\nlargestDivisorTest(790);\nlargestDivisorTest(800);\nlargestDivisorTest(810);\nlargestDivisorTest(820);\nlargestDivisorTest(830);\nlargestDivisorTest(840);\nlargestDivisorTest(850);\nlargestDivisorTest(860);\nlargestDivisorTest(870);\nlargestDivisorTest(880);\nlargestDivisorTest(890);\nlargestDivisorTest(900);\nlargestDivisorTest(910);\nlargestDivisorTest(920);\nlargestDivisorTest(930);\nlargestDivisorTest(940);\nlargestDivisorTest(950);\nlargestDivisorTest(960);\nlargestDivisorTest(970);\nlargestDivisorTest(980);\nlargestDivisorTest(990);\nlargestDivisorTest(1000);\nlargestDivisorTest(1010);\nlargestDivisorTest(1020);\nlargestDivisorTest(1030);\nlargestDivisorTest(1040);\nlargestDivisorTest(1050);\nlargestDivisorTest(1060);\nlargestDivisorTest(1070);\nlargestDivisorTest(1080);\nlargestDivisorTest(1090);\nlargestDivisorTest(1100);\nlargestDivisorTest(1110);\nlargestDivisorTest(1120);\nlargestDivisorTest(1130);\nlargestDivisorTest(1140);\nlargestDivisorTest(1150);\nlargestDivisorTest(1160);\nlargestDivisorTest(1170);\nlargestDivisorTest(1180);\nlargestDivisorTest(1190);\nlargestDivisorTest(1200);\nlargestDivisorTest(1210);\nlargestDivisorTest(1220);\nlargestDivisorTest(1230);\nlargestDivisorTest(1240);\nlargestDivisorTest(1250);\nlargestDivisorTest(1260);\nlargestDivisorTest(1270);\nlargestDivisorTest(1280);\nlargestDivisorTest(1290);\nlargestDivisorTest(1300);\nlargestDivisorTest(1310);\nlargestDivisorTest(1320);\nlargestDivisorTest(1330);\nlargestDivisorTest(1340);\nlargestDivisorTest(1350);\nlargestDivisorTest(1360);\nlargestDivisorTest(1370);\nlargestDivisorTest(1380);\nlargestDivisorTest(1390);\nlargestDivisorTest(1400);\nlargestDivisorTest(1410);\nlargestDivisorTest(1420);\nlargestDivisorTest(1430);\nlargestDivisorTest(1440);\nlargestDivisorTest(1450);\nlargestDivisorTest(1460);\nlargestDivisorTest(1470);\nlargestDivisorTest(1480);\nlargestDivisorTest(1490);\nlargestDivisorTest(1500);\nlargestDivisorTest(1510);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  return factors;\n};\n\nmodule.exports = factorize;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let index = unique.indexOf(numbers[i]);\n    if (index === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once. \n  Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let index = unique.indexOf(numbers[i]);\n    if (index === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once. \n  Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let index = unique.indexOf(numbers[i]);\n    if (index === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once. \n  Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let index = unique.indexOf(numbers[i]);\n    if (index === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once. \n  Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let index = unique.indexOf(numbers[i]);\n    if (index === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once. \n  Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let index = unique.indexOf(numbers[i]);\n    if (index === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once. \n  Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let index = unique.indexOf(numbers[i]);\n    if (index === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once. \n  Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let index = unique.indexOf(numbers[i]);\n    if (index === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once. \n  Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let index = unique.indexOf(numbers[i]);\n    if (index === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once. \n  Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  let unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let index = unique.indexOf(numbers[i]);\n    if (index === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": false, "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return a string with all characters in lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  For a given string, return a string with all characters in uppercase.\n  >>> upperCase('Hello')\n  'HELLO'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  For a given string, return a string with all characters in lowercase and uppercase.\n  >>> lowerUpperCase('Hello')\n  'HELLO'\n  */\nconst lowerUpperCase = (string) => {\n  return lowerCase(upperCase(string));\n};\n\n/*\n  For a given string, return a string with all characters in uppercase and lowercase.\n  >>> upperLowerCase('Hello')\n  'hello'\n  */\nconst upperLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, return a string with all characters in lowercase and uppercase.\n  >>> lowerUpperLowerCase('Hello')\n  'HELLO'\n  */\nconst lowerUpperLowerCase = (string) => {\n  return lowerUpperCase(upperLowerCase(string));\n};\n\n/*\n  For a given string, return a string with all characters in uppercase and lowercase.\n  >>> upperLowerUpperLowerCase('Hello')\n  'HELLO'\n  */\nconst upperLowerUpperLowerCase = (string) => {\n  return upperUpperLowerCase(lowerUpperLowerCase(string));\n};\n\n/*\n  For a given string, return a string with all characters in lowercase and uppercase.\n  >>> lowerUpperUpperLowerCase('Hello')\n  'HELLO'\n  */\nconst lowerUpperUpperLowerCase = (string) => {\n  return lowerUpperUpperCase(upperUpperLowerCase(string));\n};\n\n/*\n  For a given string, return a string with all characters in uppercase and lowercase.\n  >>> upperLowerUpperUpperLowerCase('Hello')\n  'HELLO'\n  */\nconst upperLowerUpperUpperLowerCase = (string) => {\n  return upperUpperUpperLowerCase(lowerUpperUpperLowerCase(string));\n};\n\n/*\n  For a given string, return a string with all characters in lowercase and uppercase.\n  >>> lowerUpperUpperUpperLowerCase('Hello')\n  'HELLO'\n  */\nconst lowerUpperUpperUpperLowerCase = (string) => {\n  return lowerUpperUpperUpperLowerCase(upperUpperUpperLowerCase(string));\n};\n\n/*\n  For a given string, return a string with all characters in uppercase and lowercase.\n  >>> upperLowerUpperUpperUpperLowerCase('Hello')\n  'HELLO'\n  */\nconst upperLowerUpperUpperUpperLowerCase = (string) => {\n  return upperUpperUpperUpperUpperLowerCase(lowerUpperUpperUpperLowerCase(string));\n};\n\n/*\n  For a given string, return a string with all characters in lowercase and uppercase.\n  >>> lowerUpperUpperUpperUpperLowerCase('Hello')\n  'HELLO'\n  */\nconst lowerUpperUpperUpperUpperLowerCase = (string) => {\n  return lowerUpperUpperUpperUpperLowerCase(upperUpperUpperUpperLowerCase(string));\n};\n\n/*\n  For a given string, return a string with all characters in uppercase and lowercase.\n  >>> upperLowerUpperUpperUpperLowerCase('Hello')\n  'HELLO'\n  */\nconst upperLowerUpperUpperUpperLowerCase = (string) => {\n  return upperUpperUpperUpperUpperLowerCase(lowerUpperUpperUpperLowerCase(string));\n};\n\n/*\n  For a given string, return a string with all characters in lowercase and uppercase.\n  >>> lowerUpperUpperUpperUpperLowerCase('Hello')\n  'HELLO'\n  */\nconst lowerUpperUpperUpperUpperLowerCase = (string) => {\n  return lowerUpperUpperUpperUpperLowerCase(upperUpperUpperUpperLowerCase(string));\n};\n\n/*\n  For a given string, return a string with all characters in uppercase and lowercase.\n  >>> upperLowerUpperUpperUpperLowerCase('Hello')\n  'HELLO'\n  */\nconst upperLowerUpperUpperUpperLowerCase = (string) => {\n  return upperUpperUpperUpperUpperLowerCase(lowerUpperUpperUpperLowerCase(string));\n};\n\n/*\n  For a given string, return a string with all characters in lowercase and uppercase.\n  >>> lowerUpperUpperUpperUpperLowerCase('Hello')\n  'HELLO'\n  */\nconst lowerUpperUpperUpperUpperLowerCase = (string) => {\n  return lowerUpperUpperUpperUpperLowerCase(upperUpperUpperUpperLowerCase(string));\n};\n\n/*\n  For a given string, return a string with all characters in uppercase and lowercase.\n  >>> upperLowerUpperUpperUpperLowerCase('Hello')\n  'HELLO'\n  */\nconst upperLowerUpperUpperUpperLowerCase = (string) => {\n  return upperUpperUpperUpperUpperLowerCase(lowerUpperUpperUpperLowerCase(string));\n};\n\n/*\n  For a given string, return a string with all characters in lowercase and uppercase.\n  >>> lowerUpperUpperUpperUpperLowerCase('Hello')\n  'HELLO'\n  */\nconst lowerUpperUpperUpperUpperLowerCase = (string) => {\n  return lowerUpperUpperUpperUpperLowerCase(upperUpperUpperUpperLowerCase(string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  >>> split('a b c','')\n  ['a', 'b', 'c']\n  */\nconst split = (str, sep) => {\n  if (str === '') {\n    return []\n  }\n\n  return str.split(sep)\n}\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n\n  return words.join('')\n}\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c','')\n  ['a', 'b', 'c']\n  */\nconst split = (str, sep) => {\n  if (str === '') {\n    return []\n  }\n\n  return str.split(sep)\n}\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n\n  return words.join('')\n}\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c','')\n  ['a', 'b', 'c']\n  */\nconst split = (str, sep) => {\n  if (str === '') {\n    return []\n  }\n\n  return str.split(sep)\n}\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n\n  return words.join('')\n}\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c','')\n  ['a', 'b', 'c']\n  */\nconst split = (str, sep) => {\n  if (str === '') {\n    return []\n  }\n\n  return str.split(sep)\n}\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n\n  return words.join('')\n}\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c','')\n  ['a', 'b', 'c']\n  */\nconst split = (str, sep) => {\n  if (str === '') {\n    return []\n  }\n\n  return str.split(sep)\n}\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n\n  return words.join('')\n}\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c','')\n  ['a', 'b', 'c']\n  */\nconst split = (str, sep) => {\n  if (str === '') {\n    return []\n  }\n\n  return str.split(sep)\n}\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n\n  return words.join('')\n}\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c','')\n  ['a', 'b', 'c']\n  */\nconst split = (str, sep) => {\n  if (str === '') {\n    return []\n  }\n\n  return str.split(sep)\n}\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n\n  return words.join('')\n}\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c','')\n  ['a', 'b', 'c']\n  */\nconst split = (str, sep) => {\n  if (str === '') {\n    return []\n  }\n\n  return str.split(sep)\n}\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n\n  return words.join('')\n}\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c','')\n  ['a', 'b', 'c']\n  */\nconst split = (str, sep) => {\n  if (str === '') {\n    return []\n  }\n\n  return str.split(sep)\n}\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n\n  return words.join('')\n}\n\n/*\n  Convert a string to a list of words", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": false, "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    return strings.indexOf(prefix) === 0? [strings[0]] : [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    return strings.indexOf(suffix) === strings[0].length - suffix.length? [strings[0]] : [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(suffix) === strings[i].length - suffix.length) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    return strings.match(regex)!== null? [strings[0]] : [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)!== null) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\nmodule.exports = {\n  filterByPrefix,\n  filterBySuffix,\n  filterBySubstring,\n  filterByRegex,\n};\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/*\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst aboveZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum > 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance2 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length > 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance3 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance4 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length === 0 && operations[0] === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance5 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length === 0 && operations[0] === 0 && operations[1] === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance6 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length === 0 && operations[0] === 0 && operations[1] === 0 && operations[2] === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance7 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length === 0 && operations[0] === 0 && operations[1] === 0 && operations[2] === 0 && operations[3] === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance8 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length === 0 && operations[0] === 0 && operations[1] === 0 && operations[2] === 0 && operations[3] === 0 && operations[4] === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance9 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length === 0 && operations[0] === 0 && operations[1] === 0 && operations[2] === 0 && operations[3] === 0 && operations[4] === 0 && operations[5] === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance10 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === 0 && operations.length === 0 && operations[0] === 0 && operations[1] === 0 && operations[2] === 0 && operations[3] === 0 && operations[4] === 0 && operations[5] === 0 && operations[6] === 0;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance11 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/**\n  Returns the list of numbers in the list, sorted in ascending order.\n  >>> getSorted([-1, 2, -4, 5, 6])\n  [-1, -4, 2, 5, 6]\n  >>> getSorted([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -3, -5, -4, -1, 0, 3, 9, 123, 5, 2]\n  */\nconst getSorted = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  Returns the list of numbers in the list, sorted in descending order.\n  >>> getSorted([-1, 2, -4, 5, 6])\n  [6, 5, 2, 1]\n  >>> getSorted([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -3, -5, -4, -1, 0, 3, 9, 123, 5, 2]\n  */\nconst getSortedDescending = (l) => {\n  return l.sort((a, b) => b - a);\n};\n\n/**\n  Returns the list of numbers in the list, sorted in descending order,\n  but with the numbers in the list that are negative sorted in ascending\n  order.\n  >>> getSortedDescending([-1, 2, -4, 5, 6])\n  [-1, -4, 2, 5, 6]\n  >>> getSortedDescending([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -3, -5, -4, -1, 0, 3, 9, 123, 5, 2]\n  */\nconst getSortedDescendingWithNegative = (l) => {\n  return l.sort((a, b) => b - a);\n};\n\n/**\n  Returns the list of numbers in the list, sorted in ascending order,\n  but with the numbers in the list that are negative sorted in descending\n  order.\n  >>> getSortedDescendingWithNegative([-1, 2, -4, 5, 6])\n  [-1, -4, 2, 5, 6]\n  >>> getSortedDescendingWithNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -3, -5, -4, -1, 0, 3, 9, 123, 5, 2]\n  */\nconst getSortedDescendingWithNegative = (l) => {\n  return l.sort((a, b) => b - a);\n};\n\nmodule.exports = {\n  getPositive,\n  getSorted,\n  getSortedDescending,\n  getSortedDescendingWithNegative,\n};\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is choice, and fake differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*Return true if a given number is choice, and fake differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime2 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime3 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime4 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime5 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime6 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime7 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime8 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime9 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime10 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime11 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime12 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime13 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime14 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime15 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime16 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime17 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime18 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime19 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero point, even if there are many. \n   furthermore, findZero only lead list xs have even phone number of coefficient \n   and big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero point, even if there are many. \n   furthermore, findZero only lead list xs have even phone number of coefficient \n   and big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let xs1 = [];\n  let xs2 = [];\n  let xs3 = [];\n  let xs4 = [];\n  let xs5 = [];\n  let xs6 = [];\n  let xs7 = [];\n  let xs8 = [];\n  let xs9 = [];\n  let xs10 = [];\n  let xs11 = [];\n  let xs12 = [];\n  let xs13 = [];\n  let xs14 = [];\n  let xs15 = [];\n  let xs16 = [];\n  let xs17 = [];\n  let xs18 = [];\n  let xs19 = [];\n  let xs20 = [];\n  let xs21 = [];\n  let xs22 = [];\n  let xs23 = [];\n  let xs24 = [];\n  let xs25 = [];\n  let xs26 = [];\n  let xs27 = [];\n  let xs28 = [];\n  let xs29 = [];\n  let xs30 = [];\n  let xs31 = [];\n  let xs32 = [];\n  let xs33 = [];\n  let xs34 = [];\n  let xs35 = [];\n  let xs36 = [];\n  let xs37 = [];\n  let xs38 = [];\n  let xs39 = [];\n  let xs40 = [];\n  let xs41 = [];\n  let xs42 = [];\n  let xs43 = [];\n  let xs44 = [];\n  let xs45 = [];\n  let xs46 = [];\n  let xs47 = [];\n  let xs48 = [];\n  let xs49 = [];\n  let xs50 = [];\n  let xs51 = [];\n  let xs52 = [];\n  let xs53 = [];\n  let xs54 = [];\n  let xs55 = [];\n  let xs56 = [];\n  let xs57 = [];\n  let xs58 = [];\n  let xs59 = [];\n  let xs60 = [];\n  let xs61 = [];\n  let xs62 = [];\n  let xs63 = [];\n  let xs64 = [];\n  let xs65 = [];\n  let xs66 = [];\n  let xs67 = [];\n  let xs68 = [];\n  let xs69 = [];\n  let xs70 = [];\n  let xs71 = [];\n  let xs72 = [];\n  let xs73 = [];\n  let xs74 = [];\n  let xs75 = [];\n  let xs76 = [];\n  let xs77 = [];\n  let xs78 = [];\n  let xs79 = [];\n  let xs80 = [];\n  let xs81 = [];\n  let xs82 = [];\n  let xs83 = [];\n  let xs84 = [];\n  let xs85 = [];\n  let xs86 = [];\n  let xs87 = [];\n  let xs88 = [];\n  let xs89 = [];\n  let xs90 = [];\n  let xs91 = [];\n  let xs92 = [];\n  let xs93 = [];\n  let xs94 = [];\n  let xs95 = [];\n  let xs96 = [];\n  let xs97 = [];\n  let xs98 = [];\n  let xs99 = [];\n  let xs100 = [];\n  let xs101 = [];\n  let xs102 = [];\n  let xs103 = [];\n  let xs104 = [];\n  let xs105 = [];\n  let xs106 = [];\n  let xs107 = [];\n  let xs108 = [];\n  let xs109 = [];\n  let xs110 = [];\n  let xs111 = [];\n  let xs112 = [];\n  let xs113 = [];\n  let xs114 = [];\n  let xs115 = [];\n  let xs116 = [];\n  let xs117 = [];\n  let xs118 = [];\n  let xs119 = [];\n  let xs120 = [];\n  let xs121 = [];\n  let xs122 = [];\n  let xs123 = [];\n  let xs124 = [];\n  let xs125 = [];\n  let xs126 = [];\n  let xs127 = [];\n  let xs128 = [];\n  let xs129 = [];\n  let xs130 = [];\n  let xs131 = [];\n  let xs132 = [];\n  let xs133 = [];\n  let xs134 = [];\n  let xs135 = [];\n  let xs136 = [];\n  let xs137 = [];\n  let xs138 = [];\n  let xs139 = [];\n  let xs140 = [];\n  let xs141 = [];\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird2 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird3 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird4 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird5 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird6 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird7 = (l) =>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < l.length; i++) {\n    const el = l[i];\n    if (seen[el]) continue;\n    seen[el] = true;\n    result.push(el);\n  }\n  return result;\n};\n\nmodule.exports = unique;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count += 2;\n    } else if (i % 7 === 0) {\n      count += 1;\n    } else {\n      count += 0;\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the odd indicies are adequate \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 5, 6, 4]\n  */\nconst sortOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 5, 6, 4]\n  */\nconst sortEvenOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 5, 6, 4]\n  */\nconst sortOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 5, 6, 4]\n  */\nconst sortEvenOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 5, 6, 4]\n  */\nconst sortOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 5, 6, 4]\n  */\nconst sortEvenOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 5, 6, 4]\n  */\nconst sortOddOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 5, 6, 4]\n  */\nconst sortEvenOddOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let i = 0; i < s.length; i++) {\n     groups.push(s.slice(i, i + 3));\n   }\n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let i = 0; i < s.length; i++) {\n     groups.push(s.slice(i, i + 3));\n   }\n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let i = 0; i < s.length; i++) {\n     groups.push(s.slice(i, i + 3));\n   }\n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let i = 0; i < s.length; i++) {\n     groups.push(s.slice(i, i + 3));\n   }\n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let fib = primeFib(n - 1) + primeFib(n - 2)\n  while (fib < n) {\n    let temp = fib\n    fib = fib + fib\n    if (isPrime(temp)) {\n      return fib\n    }\n  }\n  return fib\n}\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  let sqrt = Math.sqrt(n)\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let fib = primeFib(n - 1) + primeFib(n - 2)\n  while (fib < n) {\n    let temp = fib\n    fib = fib + fib\n    if (isPrime(temp)) {\n      return fib\n    }\n  }\n  return fib\n}\n\nconst fibonacci2 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let fib = primeFib(n - 1) + primeFib(n - 2)\n  while (fib < n) {\n    let temp = fib\n    fib = fib + fib\n    if (isPrime(temp)) {\n      return fib\n    }\n  }\n  return fib\n}\n\nconst fibonacci3 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let fib = primeFib(n - 1) + primeFib(n - 2)\n  while (fib < n) {\n    let temp = fib\n    fib = fib + fib\n    if (isPrime(temp)) {\n      return fib\n    }\n  }\n  return fib\n}\n\nconst fibonacci4 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let fib = primeFib(n - 1) + primeFib(n - 2)\n  while (fib < n) {\n    let temp = fib\n    fib = fib + fib\n    if (isPrime(temp)) {\n      return fib\n    }\n  }\n  return fib\n}\n\nconst fibonacci5 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let fib = primeFib(n - 1) + primeFib(n - 2)\n  while (fib < n) {\n    let temp = fib\n    fib = fib + fib\n    if (isPrime(temp)) {\n      return fib\n    }\n  }\n  return fib\n}\n\nconst fibonacci6 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let fib = primeFib(n - 1) + primeFib(n - 2)\n  while (fib < n) {\n    let temp = fib\n    fib = fib + fib\n    if (isPrime(temp)) {\n      return fib\n    }\n  }\n  return fib\n}\n\nconst fibonacci7 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let fib = primeFib(n - 1) + primeFib(n - 2)\n  while (fib < n) {\n    let temp = fib\n    fib = fib + fib\n    if (isPrime(temp)) {\n      return fib\n    }\n  }\n  return fib\n}\n\nconst fibonacci8 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let fib = primeFib(n - 1) + primeFib(n - 2)\n  while (fib < n) {\n    let temp = fib\n    fib = fib + fib\n    if (isPrime(temp)) {\n      return fib\n    }\n  }\n  return fib\n}\n\nconst fibonacci9 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let fib = primeFib(n - 1) + primeFib(n - 2)\n  while (fib < n) {\n    let temp = fib\n    fib = fib + fib\n    if (isPrime(temp)) {\n      return fib\n    }\n  }\n  return fib\n}\n\nconst fibonacci10 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let fib = primeFib(n - 1) + primeFib(n - 2)\n  while (fib < n) {\n    let temp = fib\n    fib = fib + fib\n    if (isPrime(temp)) {\n      return fib\n    }\n  }\n  return fib\n}\n\nconst fibonacci11 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let fib = primeFib(n - 1) + primeFib(n - 2)\n  while (fib < n) {\n    let temp = fib\n    fib = fib + fib\n    if (isPrime(temp)) {\n      return fib\n    }\n  }\n  return fib\n}\n\nconst fibonacci12 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let fib = primeFib(n - 1) + primeFib(n - 2)\n  while (fib < n) {\n    let temp = fib\n    fib = fib + fib\n    if (isPrime(temp)) {\n      return fib\n    }\n  }\n  return fib\n}\n\nconst fibonacci13 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let fib = primeFib(n - 1) + primeFib(n - 2)\n  while (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mean in this shell ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mean in this shell ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0.0\n  let median = 0.0\n  let MAD = 0.0\n  let i = 0\n  let j = 0\n  let k = 0\n  let n = 0\n  let x_mean = 0.0\n  let x_median = 0.0\n  let x_MAD = 0.0\n  let x_MAD_sq = 0.0\n  let x_MAD_sq_sq = 0.0\n  let x_MAD_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0.0\n  let x_MAD_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count === 3;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight boundlessly long occupation. \n   n cars are driving leave to properly;   simultaneously, a different hardening of n car \n   are drive right to leave.    The two set of cars start out being very far from \n   each early.   All car move in the same speed.   Two car are suppose to clash \n   when a car that's be active left to good hits a car that's be active right to leave. \n   However, the cars are boundlessly sturdy and potent; as a solution, they stay moving \n   in their trajectory as if they did not collide. \n\n   This function output the phone number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight boundlessly long occupation. \n   n cars are driving leave to properly;   simultaneously, a different hardening of n car \n   are drive right to leave.    The two set of cars start out being very far from \n   each early.   All car move in the same speed.   Two car are suppose to clash \n   when a car that's be active left to good hits a car that's be active right to leave. \n   However, the cars are boundlessly sturdy and potent; as a solution, they stay moving \n   in their trajectory as if they did not collide. \n\n   This function output the phone number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n   let {\n     let {\n       let {\n         let {\n           let {\n             let {\n               let {\n                 let {\n                   let {\n                     let {\n                       let {\n                         let {\n                           let {\n                             let {\n                               let {\n                                 let {\n                                  let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    let {\n                                    ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i] + 1);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 4, 3, 3, 3, 8, 2, 122]\n  */\nconst decrList = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i] - 1);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> mult2List([1, 2, 3])\n  [2, 4, 6]\n  >>> mult2List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 15, 75, 5, 15, 15, 75, 3, 123]\n  */\nconst mult2List = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i] * 2);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> div2List([1, 2, 3])\n  [0.5, 1, 1.5]\n  >>> div2List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [3.3333333333333333, 1.6666666666666667, 4.166666666666667, 1.3333333333333333, 1.6666666666666667, 1.3333333333333333, 8.333333333333333, 0.6666666666666667, 123]\n  */\nconst div2List = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i] / 2);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3.\n  >>> mult3List([1, 2, 3])\n  [3, 6, 9]\n  >>> mult3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [27, 15, 75, 5, 15, 15, 75, 3, 123]\n  */\nconst mult3List = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i] * 3);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3.\n  >>> div3List([1, 2, 3])\n  [0.3333333333333333, 1.6666666666666667, 2.6666666666666667]\n  >>> div3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2.3333333333333333, 1.6666666666666667, 4.166666666666667, 1.3333333333333333, 1.6666666666666667, 1.3333333333333333, 8.333333333333333, 0.6666666666666667, 123]\n  */\nconst div3List = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i] / 3);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 4.\n  >>> mult4List([1, 2, 3])\n  [4, 8, 12]\n  >>> mult4List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [36, 24, 72, 5, 24, 24, 72, 3, 123]\n  */\nconst mult4List = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i] * 4);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements divided by 4.\n  >>> div4List([1, 2, 3])\n  [0.25, 1, 1.5]\n  >>> div4List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [3.3333333333333333, 1.6666666666666667, 4.166666666666667, 1.3333333333333333, 1.6666666666666667, 1.3333333333333333, 8.333333333333333, 0.6666666666666667, 123]\n  */\nconst div4List = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i] / 4);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 5.\n  >>> mult5List([1, 2, 3])\n  [5, 10, 15]\n  >>> mult5List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [50, 25, 75, 5, 25, 25, 75, 3, 123]\n  */\nconst mult5List = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    result.push(l[i] * 5);\n    i++;\n  }\n  return result;\n};\n\n/*Return list with elements divided by 5.\n  >>> div5", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === l.length;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase2 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase3 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase4 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase5 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase6 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase7 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase8 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase9 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase10 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase11 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase12 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change base of input number x to base.\n  return string theatrical performance after the conversion. \n  base number are less than 10.\n  */\nconst changeBase13 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low return area for a", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a function to efficiently calculate the n-th element of the fib4 numeral succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a function to efficiently calculate the n-th element of the fib4 numeral succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  let i = Math.floor(l.length / 2);\n  let j = l.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (l[i] > l[j]) {\n      return l[i];\n    }\n    if (l[i] < l[j]) {\n      return l[j];\n    }\n    i--;\n    j--;\n  }\n  return l[i];\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": false, "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let middle = text.substring(1, text.length - 1);\n  return first === last && isPalindrome(middle);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0) throw new Error('Negative numbers not supported')\n  if (n >= p) throw new Error('Number too big')\n  if (n <= 1) return 1\n  let m = 1\n  while (n > 1) {\n    m = m * p % n\n    n = n / p\n  }\n  return m\n}\n\nmodule.exports = modp\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) return [];\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (current!== numbers[i]) {\n      result.push(current);\n      current = numbers[i];\n    }\n  }\n  result.push(current);\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every character by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let result = text;\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  for (let i = 0; i < vowels.length; i++) {\n    result = result.replace(new RegExp(vowels[i], 'g'), '');\n  }\n  return result;\n};\n\n/*\n  removeDiacritics is a function that takes string and returns string without diacritics.\n  >>> removeDiacritics('')\n  ''\n  >>> removeDiacritics('abcdef\\nghijklm')\n  'bcdef\\nghijklm'\n  >>> removeDiacritics('abcdef')\n  'abcdef'\n  >>> removeDiacritics('aaaaa')\n  ''\n  >>> removeDiacritics('aaBAA')\n  'BAA'\n  >>> removeDiacritics('zbcd')\n  'zbcd'\n  */\nconst removeDiacritics = (text) => {\n  let result = text;\n  let diacritics = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', '\\u0300', '\\u0301', '\\u0302', '\\u0303', '\\u0304', '\\u0305', '\\u0306', '\\u0307', '\\u0308', '\\u0309', '\\u030A', '\\u030B', '\\u030C', '\\u030D', '\\u030E', '\\u030F', '\\u0310', '\\u0311', '\\u0312', '\\u0313', '\\u0314', '\\u0315', '\\u0316', '\\u0317', '\\u0318', '\\u0319', '\\u031A', '\\u031B', '\\u031C', '\\u031D', '\\u031E', '\\u031F', '\\u0320', '\\u0321', '\\u0322', '\\u0323', '\\u0324', '\\u0325', '\\u0326', '\\u0327', '\\u0328', '\\u0329', '\\u032A', '\\u032B', '\\u032C', '\\u032D', '\\u032E', '\\u032F', '\\u0330', '\\u0331', '\\u0332', '\\u0333', '\\u0334', '\\u0335', '\\u0336', '\\u0337', '\\u0338', '\\u0339', '\\u033A', '\\u033B', '\\u033C', '\\u033D', '\\u033E', '\\u033F', '\\u0340', '\\u0341', '\\u0342', '\\u0343', '\\u0344', '\\u0345', '\\u0346', '\\u0347', '\\u0348', '\\u0349', '\\u034A', '\\u034B', '\\u034C', '\\u034D', '\\u034E', '\\u034F', '\\u0350', '\\u0351', '\\u0352', '\\u0353', '\\u0354', '\\u0355', '\\u0356', '\\u0357', '\\u0358', '\\u0359', '\\u035A', '\\u035B', '\\u035C', '\\u035D', '\\u035E', '\\u035F', '\\u0360', '\\u0361', '\\u0362', '\\u0363', '\\u0364', '\\u0365', '\\u0366', '\\u0367', '\\u0368', '\\u0369', '\\u036A', '\\u036B', '\\u036C', '\\u036D', '\\u036E', '\\u036F', '\\u0370', '\\u0371', '\\u0372', '\\u0373', '\\u0374', '\\u0375', '\\u0376', '\\u0377', '\\u0378', '\\u0379', '\\u037A', '\\u037B', '\\u037C', '\\u037D', '\\u037E', '\\u037F', '\\u0380', '\\u0381', '\\u0382', '\\u0383', '\\u0384', '\\u0385', '\\u0386', '\\u0387', '\\u0388', '\\u0389', '\\u038A', '\\u038B', '\\u038C', '\\u038D', '\\u038E', '\\u038F', '\\u0390', '\\u0391', '\\u0392', '\\u0393', '\\u0394', '\\u0395', '\\u0396', '\\u0397', '\\u0398', '\\u0399', '\\u039A', '\\u039B', '\\u039C', '\\u039D', '\\u039E', '\\u039F', '\\u03A0', '\\u03A1', '\\u03A2', '\\u03A3', '\\u03A4', '\\u03A5', '\\u03A6', '\\u03A7', '\\u03A8', '\\u03A9', '\\u03AA', '\\u03AB', '\\u03AC', '\\u03AD', '\\u03AE', '\\u03AF', '\\u03B0', '\\u03B1', '", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": false, "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(x => x > t);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 101)\n  false\n  */\nconst betweenThreshold = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 101)\n  false\n  */\nconst betweenThreshold2 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 101)\n  false\n  */\nconst betweenThreshold3 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 101)\n  false\n  */\nconst betweenThreshold4 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 101)\n  false\n  */\nconst betweenThreshold5 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 101)\n  false\n  */\nconst betweenThreshold6 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 101)\n  false\n  */\nconst betweenThreshold7 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 101)\n  false\n  */\nconst betweenThreshold8 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 101)\n  false\n  */\nconst betweenThreshold9 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 101)\n  false\n  */\nconst betweenThreshold10 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 101)\n  false\n  */\nconst betweenThreshold11 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 101)\n  false\n  */\nconst betweenThreshold12 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 101)\n  false\n  */\nconst betweenThreshold13 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add = (x, y) => {\n  return x + y;\n};", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": false, "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i = 0;\n  while (i < s0.length && i < s1.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return i === s0.length && i === s1.length;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib15(n - 1) + fib15(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib16(n - 1) + fib16(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib17 = (n) => {\n  if (n < 2) {\n    return n;", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsArray = brackets.split(\" \");\n  let i = 0;\n  let j = 0;\n  let bracketsCount = bracketsArray.length;\n  let bracketsCount2 = bracketsArray.length;\n  let bracketsCount3 = bracketsArray.length;\n  let bracketsCount4 = bracketsArray.length;\n  let bracketsCount5 = bracketsArray.length;\n  let bracketsCount6 = bracketsArray.length;\n  let bracketsCount7 = bracketsArray.length;\n  let bracketsCount8 = bracketsArray.length;\n  let bracketsCount9 = bracketsArray.length;\n  let bracketsCount10 = bracketsArray.length;\n  let bracketsCount11 = bracketsArray.length;\n  let bracketsCount12 = bracketsArray.length;\n  let bracketsCount13 = bracketsArray.length;\n  let bracketsCount14 = bracketsArray.length;\n  let bracketsCount15 = bracketsArray.length;\n  let bracketsCount16 = bracketsArray.length;\n  let bracketsCount17 = bracketsArray.length;\n  let bracketsCount18 = bracketsArray.length;\n  let bracketsCount19 = bracketsArray.length;\n  let bracketsCount20 = bracketsArray.length;\n  let bracketsCount21 = bracketsArray.length;\n  let bracketsCount22 = bracketsArray.length;\n  let bracketsCount23 = bracketsArray.length;\n  let bracketsCount24 = bracketsArray.length;\n  let bracketsCount25 = bracketsArray.length;\n  let bracketsCount26 = bracketsArray.length;\n  let bracketsCount27 = bracketsArray.length;\n  let bracketsCount28 = bracketsArray.length;\n  let bracketsCount29 = bracketsArray.length;\n  let bracketsCount30 = bracketsArray.length;\n  let bracketsCount31 = bracketsArray.length;\n  let bracketsCount32 = bracketsArray.length;\n  let bracketsCount33 = bracketsArray.length;\n  let bracketsCount34 = bracketsArray.length;\n  let bracketsCount35 = bracketsArray.length;\n  let bracketsCount36 = bracketsArray.length;\n  let bracketsCount37 = bracketsArray.length;\n  let bracketsCount38 = bracketsArray.length;\n  let bracketsCount39 = bracketsArray.length;\n  let bracketsCount40 = bracketsArray.length;\n  let bracketsCount41 = bracketsArray.length;\n  let bracketsCount42 = bracketsArray.length;\n  let bracketsCount43 = bracketsArray.length;\n  let bracketsCount44 = bracketsArray.length;\n  let bracketsCount45 = bracketsArray.length;\n  let bracketsCount46 = bracketsArray.length;\n  let bracketsCount47 = bracketsArray.length;\n  let bracketsCount48 = bracketsArray.length;\n  let bracketsCount49 = bracketsArray.length;\n  let bracketsCount50 = bracketsArray.length;\n  let bracketsCount51 = bracketsArray.length;\n  let bracketsCount52 = bracketsArray.length;\n  let bracketsCount53 = bracketsArray.length;\n  let bracketsCount54 = bracketsArray.length;\n  let bracketsCount55 = bracketsArray.length;\n  let bracketsCount56 = bracketsArray.length;\n  let bracketsCount57 = bracketsArray.length;\n  let bracketsCount58 = bracketsArray.length;\n  let bracketsCount59 = bracketsArray.length;\n  let bracketsCount60 = bracketsArray.length;\n  let bracketsCount61 = bracketsArray.length;\n  let bracketsCount62 = bracketsArray.length;\n  let bracketsCount63 = bracketsArray.length;\n  let bracketsCount64 = bracketsArray.length;\n  let bracketsCount65 = bracketsArray.length;\n  let bracketsCount66 = bracketsArray.length;\n  let bracketsCount67 = bracketsArray.length;\n  let bracketsCount68 = bracketsArray.length;\n  let bracketsCount69 = bracketsArray.length;\n  let bracketsCount70 = bracketsArray.length;\n  let bracketsCount71 = bracketsArray.length;\n  let bracketsCount72 = bracketsArray.length;\n  let bracketsCount73 = bracketsArray.length;\n  let bracketsCount74 = bracketsArray.length;\n  let bracketsCount75 = bracketsArray.length;\n  let bracketsCount76 = bracketsArray.length;\n  let bracketsCount77 = bracketsArray.length;\n  let bracketsCount78 = bracketsArray.length;\n  let bracketsCount79 = bracketsArray.length;\n  let bracketsCount80 = bracketsArray.length;\n  let bracketsCount81 = bracketsArray.length;\n  let bracketsCount82 = bracketsArray.length;\n  let bracketsCount83 = bracketsArray.length;\n  let bracketsCount84 = bracketsArray.length;\n  let bracketsCount85 = bracketsArray.length;\n  let bracketsCount86 = bracketsArray.length;\n  let bracketsCount87 = bracketsArray.length;\n  let bracketsCount88 = bracketsArray.length;\n  let bracketsCount89 = bracketsArray.length;\n  let bracketsCount90 = bracketsArray.length;\n  let bracketsCount91 = bracketsArray.length;\n  let bracketsCount92 = bracketsArray.length;\n  let bracketsCount93 = bracketsArray.length;\n  let bracketsCount94 = bracketsArray.length;\n  let bracketsCount95 = bracketsArray.length;\n  let bracketsCount96 = bracketsArray.length;\n  let bracketsCount97 = bracketsArray.length;\n  let bracketsCount98 = bracketsArray.length;\n  let bracketsCount99 = bracketsArray.length;\n  let bracketsCount100 = bracketsArray.length;\n  let bracketsCount101 = bracketsArray.length;\n  let bracketsCount102 = bracketsArray.length;\n  let bracketsCount103 = bracketsArray.length;\n  let bracketsCount104 = bracketsArray.length;\n  let bracketsCount105 = bracketsArray.length;\n  let bracketsCount106 = bracketsArray.length;\n  let bracketsCount107 = bracketsArray.length;\n  let bracketsCount108 = bracketsArray.length;\n  let bracketsCount109 = bracketsArray.length;\n  let bracketsCount110 = bracketsArray.length;\n  let bracketsCount111 = bracketsArray.length;\n  let bracketsCount112 = bracketsArray.length;\n  let bracketsCount113 = bracketsArray.length;\n  let bracketsCount114 = bracketsArray.length;\n  let bracketsCount115 = bracketsArray.length;\n  let bracketsCount116 = bracketsArray.length;\n  let bracketsCount117 = bracketsArray.length;\n  let bracketsCount118", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*Return true is list elements are monotonically increasing or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) return true;\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) return true;\n    if (l[i] < l[j]) return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      l.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return l;\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return i;\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple group for nested parenthesis separated by space. \n   For each of the group, output the deepest degree of nesting of parentheses. \n   E.g. (() ()) has maximal two levels of nesting while (( ()) ) have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* Input to this function is a string represented multiple group for nested parenthesis separated by space. \n   For each of the group, output the deepest degree of nesting of parentheses. \n   E.g. (() ()) has maximal two levels of nesting while (( ()) ) have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let depth = 0;\n  let max_depth = 0;\n  let current_depth = 0;\n  let current_max_depth = 0;\n  let current_paren_string = '';\n  let paren_string_length = paren_string.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let paren_string_length_minus_one = paren_string_length - 1;\n  let paren_string_length_minus_two = paren_string_length - 2;\n  let paren_string_length_minus_three = paren_string_length - 3;\n  let paren_string_length_minus_four = paren_string_length - 4;\n  let paren_string_length_minus_five = paren_string_length - 5;\n  let paren_string_length_minus_six = paren_string_length - 6;\n  let paren_string_length_minus_seven = paren_string_length - 7;\n  let paren_string_length_minus_eight = paren_string_length - 8;\n  let paren_string_length_minus_nine = paren_string_length - 9;\n  let paren_string_length_minus_ten = paren_string_length - 10;\n  let paren_string_length_minus_eleven = paren_string_length - 11;\n  let paren_string_length_minus_twelve = paren_string_length - 12;\n  let paren_string_length_minus_thirteen = paren_string_length - 13;\n  let paren_string_length_minus_fourteen = paren_string_length - 14;\n  let paren_string_length_minus_fifteen = paren_string_length - 15;\n  let paren_string_length_minus_sixteen = paren_string_length - 16;\n  let paren_string_length_minus_seventeen = paren_string_length - 17;\n  let paren_string_length_minus_eighteen = paren_string_length - 18;\n  let paren_string_length_minus_nineteen = paren_string_length - 19;\n  let paren_string_length_minus_twenty = paren_string_length - 20;\n  let paren_string_length_minus_twenty_one = paren_string_length - 21;\n  let paren_string_length_minus_twenty_two = paren_string_length - 22;\n  let paren_string_length_minus_twenty_three = paren_string_length - 23;\n  let paren_string_length_minus_twenty_four = paren_string_length - 24;\n  let paren_string_length_minus_twenty_five = paren_string_length - 25;\n  let paren_string_length_minus_twenty_six = paren_string_length - 26;\n  let paren_string_length_minus_twenty_seven = paren_string_length - 27;\n  let paren_string_length_minus_twenty_eight = paren_string_length - 28;\n  let paren_string_length_minus_twenty_nine = paren_string_length - 29;\n  let paren_string_length_minus_twenty_ten = paren_string_length - 30;\n  let paren_string_length_minus_twenty_eleven = paren_string_length - 31;\n  let paren_string_length_minus_twenty_twelve = paren_string_length - 32;\n  let paren_string_length_minus_twenty_thirteen = paren_string_length - 33;\n  let paren_string_length_minus_twenty_fourteen = paren_string_length - 34;\n  let paren_string_length_minus_twenty_fifteen = paren_string_length - 35;\n  let paren_string_length_minus_twenty_sixteen = paren_string_length - 36;\n  let paren_string_length_minus_twenty_seventeen = paren_string_length - 37;\n  let paren_string_length_minus_twenty_eight = paren_string_length - 38;\n  let paren_string_length_minus_twenty_nineteen = paren_string_length - 39;\n  let paren_string_length_minus_twenty_ten = paren_string_length - 40;\n  let paren_string_length_minus_twenty_eleven = paren_string_length - 41;\n  let paren_string_length_minus_twenty_twelve = paren_string_length - 42;\n  let paren_string_length_minus_twenty_thirteen = paren_string_length - 43;\n  let paren_string_length_minus_twenty_fourteen = paren_string_length - 44;\n  let paren_string_length_minus_twenty_fifteen = paren_string_length - 45;\n  let paren_string_length_minus_twenty_sixteen = paren_string_length - 46;\n  let paren_string_length_minus_twenty_seventeen = paren_string_length - 47;\n  let paren_string_length_minus_twenty_eight = paren_string_length - 48;\n  let paren_string_length_minus_twenty_nineteen = paren_string_length - 49;\n  let paren_string_length_minus_twenty_ten = paren_string_length - 50;\n  let paren_string_length_minus_twenty_eleven = paren_string_length - 51;\n  let paren_string_length_minus_twenty_twelve = paren_string_length - 52;\n  let paren_string_length_minus_twenty_th", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": false, "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = sumToN\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketsCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152 = 0;\n  let bracketIndex153 = 0;\n  let bracketIndex154 = 0;\n  let bracketIndex155 = 0;\n  let bracketIndex156 = 0;\n  let bracketIndex157 = 0;\n  let bracketIndex158 = 0;\n  let bracketIndex159 = 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  const deriv = [];\n  for (let i = 0; i < len; i++) {\n    deriv.push(xs[i + 1] / xs[i]);\n  }\n  return deriv;\n};\n\n/*\n  x^n\n  x^n - 1\n  x^n - 2\n  x^n - 3\n ...\n  x^n - n\n  */\nconst polynomial = (xs) => {\n  const len = xs.length;\n  const deriv = [];\n  for (let i = 0; i < len; i++) {\n    deriv.push(xs[i] * xs[i]);\n  }\n  return deriv;\n};\n\n/*\n  x^n\n  x^n - 1\n  x^n - 2\n  x^n - 3\n ...\n  x^n - n\n  */\nconst derivative2 = (xs) => {\n  const len = xs.length;\n  const deriv = [];\n  for (let i = 0; i < len; i++) {\n    deriv.push(xs[i] * (xs[i] - 1));\n  }\n  return deriv;\n};\n\n/*\n  x^n\n  x^n - 1\n  x^n - 2\n  x^n - 3\n ...\n  x^n - n\n  */\nconst polynomial2 = (xs) => {\n  const len = xs.length;\n  const deriv = [];\n  for (let i = 0; i < len; i++) {\n    deriv.push(xs[i] * (xs[i] - 1));\n  }\n  return deriv;\n};\n\n/*\n  x^n\n  x^n - 1\n  x^n - 2\n  x^n - 3\n ...\n  x^n - n\n  */\nconst derivative3 = (xs) => {\n  const len = xs.length;\n  const deriv = [];\n  for (let i = 0; i < len; i++) {\n    deriv.push(xs[i] * (xs[i] - 1));\n  }\n  return deriv;\n};\n\n/*\n  x^n\n  x^n - 1\n  x^n - 2\n  x^n - 3\n ...\n  x^n - n\n  */\nconst polynomial3 = (xs) => {\n  const len = xs.length;\n  const deriv = [];\n  for (let i = 0; i < len; i++) {\n    deriv.push(xs[i] * (xs[i] - 1));\n  }\n  return deriv;\n};\n\n/*\n  x^n\n  x^n - 1\n  x^n - 2\n  x^n - 3\n ...\n  x^n - n\n  */\nconst derivative4 = (xs) => {\n  const len = xs.length;\n  const deriv = [];\n  for (let i = 0; i < len; i++) {\n    deriv.push(xs[i] * (xs[i] - 1));\n  }\n  return deriv;\n};\n\n/*\n  x^n\n  x^n - 1\n  x^n - 2\n  x^n - 3\n ...\n  x^n - n\n  */\nconst polynomial4 = (xs) => {\n  const len = xs.length;\n  const deriv = [];\n  for (let i = 0; i < len; i++) {\n    deriv.push(xs[i] * (xs[i] - 1));\n  }\n  return deriv;\n};\n\n/*\n  x^n\n  x^n - 1\n  x^n - 2\n  x^n - 3\n ...\n  x^n - n\n  */\nconst derivative5 = (xs) => {\n  const len = xs.length;\n  const deriv = [];\n  for (let i = 0; i < len; i++) {\n    deriv.push(xs[i] * (xs[i] - 1));\n  }\n  return deriv;\n};\n\n/*\n  x^n\n  x^n - 1\n  x^n - 2\n  x^n - 3\n ...\n  x^n - n\n  */\nconst polynomial5 = (xs) => {\n  const len = xs.length;\n  const deriv = [];\n  for (let i = 0; i < len; i++) {\n    deriv.push(xs[i] * (xs[i] - 1));\n  }\n  return deriv;\n};\n\n/*\n  x^n\n  x^n - 1\n  x^n - 2\n  x^n - 3\n ...\n  x^n - n\n  */\nconst derivative6 = (xs) => {\n  const len = xs.length;\n  const deriv = [];\n  for (let i = 0; i < len; i++) {\n    deriv.push(xs[i] * (xs[i] - 1));\n  }\n  return deriv;\n};\n\n/*\n  x^n\n  x^n - 1\n  x^n - 2\n  x^n - 3\n ...\n  x^n - n\n  */\nconst polynomial6 = (xs) => {\n  const len = xs.length;\n  const deriv = [];\n  for (let i = 0; i < len; i++) {\n    deriv.push(xs[i] * (xs[i] - 1));\n  }\n  return deriv;\n};\n\n/*\n  x^n\n  x^n - 1\n  x^n - 2\n  x^n - 3\n ...\n  x^n - n\n  */\nconst derivative7 = (xs) => {\n  const len = xs.length;\n  const deriv = [];\n  for (let i = 0; i < len; i++) {\n    deriv.push(xs[i] * (xs[i] - 1));", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a function to efficiently calculate the n-th element of the fibfib numeral succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a function to efficiently calculate the n-th element of the fibfib numeral succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nmodule.exports = fibfib;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      vowels++;\n    }\n    i++;\n  }\n  return vowels;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the solution as a drawstring. \n   If shift > numeral of digit, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the solution as a drawstring. \n   If shift > numeral of digit, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = \"\";\n  let numeral = \"\";\n  let i = 0;\n  while (i < x.length) {\n    numeral = x.substr(i, shift);\n    result += numeral;\n    i += shift;\n  }\n  return result;\n};\n\nconst getDigit = (x, i) => {\n  return x.substr(i, 1);\n};\n\nconst getDigitCount = (x) => {\n  return x.length;\n};\n\nconst getDigitSum = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum2 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum3 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum4 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum5 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum6 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum7 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum8 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum9 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum10 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum11 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum12 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum13 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum14 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum15 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum16 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum17 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum18 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum19 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum20 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum21 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum22 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum23 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum24 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum25 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum26 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum27 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum28 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum29 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum30 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum31 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum32 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum33 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum34 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum35 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum36 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum37 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum38 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function that takes a string as remark and retort the sum of the upper character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*Task \n   Write a function that takes a string as remark and retort the sum of the upper character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0);\n  }\n  return sum;\n};\n\nmodule.exports = digitSum;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apple and orange \n   that are distribute in a basket of fruit this basket contains \n   apple, orange, and mango fruits. give the bowed stringed instrument that represents the full phone number of \n   the orange and apples and an integer that represent the total phone number of the fruit \n   in the basket return the numeral of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  In this task, you will be given a string that represents a number of apple and orange \n   that are distribute in a basket of fruit this basket contains \n   apple, orange, and mango fruits. give the bowed stringed instrument that represents the full phone number of \n   the orange and apples and an integer that represent the total phone number of the fruit \n   in the basket return the numeral of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n  let total = 0;\n  let numeral = 0;\n  let numeral2 = 0;\n  let numeral3 = 0;\n  let numeral4 = 0;\n  let numeral5 = 0;\n  let numeral6 = 0;\n  let numeral7 = 0;\n  let numeral8 = 0;\n  let numeral9 = 0;\n  let numeral10 = 0;\n  let numeral11 = 0;\n  let numeral12 = 0;\n  let numeral13 = 0;\n  let numeral14 = 0;\n  let numeral15 = 0;\n  let numeral16 = 0;\n  let numeral17 = 0;\n  let numeral18 = 0;\n  let numeral19 = 0;\n  let numeral20 = 0;\n  let numeral21 = 0;\n  let numeral22 = 0;\n  let numeral23 = 0;\n  let numeral24 = 0;\n  let numeral25 = 0;\n  let numeral26 = 0;\n  let numeral27 = 0;\n  let numeral28 = 0;\n  let numeral29 = 0;\n  let numeral30 = 0;\n  let numeral31 = 0;\n  let numeral32 = 0;\n  let numeral33 = 0;\n  let numeral34 = 0;\n  let numeral35 = 0;\n  let numeral36 = 0;\n  let numeral37 = 0;\n  let numeral38 = 0;\n  let numeral39 = 0;\n  let numeral40 = 0;\n  let numeral41 = 0;\n  let numeral42 = 0;\n  let numeral43 = 0;\n  let numeral44 = 0;\n  let numeral45 = 0;\n  let numeral46 = 0;\n  let numeral47 = 0;\n  let numeral48 = 0;\n  let numeral49 = 0;\n  let numeral50 = 0;\n  let numeral51 = 0;\n  let numeral52 = 0;\n  let numeral53 = 0;\n  let numeral54 = 0;\n  let numeral55 = 0;\n  let numeral56 = 0;\n  let numeral57 = 0;\n  let numeral58 = 0;\n  let numeral59 = 0;\n  let numeral60 = 0;\n  let numeral61 = 0;\n  let numeral62 = 0;\n  let numeral63 = 0;\n  let numeral64 = 0;\n  let numeral65 = 0;\n  let numeral66 = 0;\n  let numeral67 = 0;\n  let numeral68 = 0;\n  let numeral69 = 0;\n  let numeral70 = 0;\n  let numeral71 = 0;\n  let numeral72 = 0;\n  let numeral73 = 0;\n  let numeral74 = 0;\n  let numeral75 = 0;\n  let numeral76 = 0;\n  let numeral77 = 0;\n  let numeral78 = 0;\n  let numeral79 = 0;\n  let numeral80 = 0;\n  let numeral81 = 0;\n  let numeral82 = 0;\n  let numeral83 = 0;\n  let numeral84 = 0;\n  let numeral85 = 0;\n  let numeral86 = 0;\n  let numeral87 = 0;\n  let numeral88 = 0;\n  let numeral89 = 0;\n  let numeral90 = 0;\n  let numeral91 = 0;\n  let numeral92 = 0;\n  let numeral93 = 0;\n  let numeral94 = 0;\n  let numeral95 = 0;\n  let numeral96 = 0;\n  let numeral97 = 0;\n  let numeral98 = 0;\n  let numeral99 = 0;\n  let numeral100 = 0;\n  let numeral101 = 0;\n  let numeral102 = 0;\n  let numeral103 = 0;\n  let numeral104 = 0;\n  let numeral105 = 0;\n  let numeral106 = 0;\n  let numeral107 = 0;\n  let numeral108 = 0;\n  let numeral109 = 0;\n  let numeral110 = 0;\n  let numeral111 = 0;\n  let numeral112 = 0;\n  let numeral113 = 0;\n  let numeral114 = 0;\n  let numeral115 = 0;\n  let numeral116 = 0;\n  let numeral117 = 0;\n  let numeral118 = 0;\n  let numeral119 = 0;\n  let numeral120 = 0;\n  let numeral121 = 0;\n  let numeral122 = 0;\n  let numeral123 = 0;\n  let numeral124 = 0;\n  let numeral125 = 0;\n  let numeral126 = 0;\n  let numeral127 = 0;\n  let numeral128 = 0;\n  let numeral129 = 0;\n  let numeral130 = 0;\n  let numeral131 = 0;\n  let numeral132 = 0;\n  let numeral133 = 0;\n  let numeral134 = 0;\n  let numeral135 = 0;\n  let numeral136 = 0;\n  let numeral137 = 0;\n  let numeral138 = 0;\n  let numeral139 = 0;\n  let numeral140 = 0;\n  let numeral141 = 0;\n  let numeral142 = 0;\n  let numeral143 = 0;\n  let numeral144 = 0;\n  let numeral145 = 0;\n  let numeral146 =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch of a tree that hold non - negative integer node \n   your task is to pluck one of the nodes and return it. \n   The plucked node should exist the lymph node with the smallest tied value. \n   If multiple nodes with the like small even value are found return the node that has belittled exponent. \n\n   The plucked lymph node should be render in a list, [ smalest_value, its index ], \n   If there be no tied value or the grant array be empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch of a tree that hold non - negative integer node \n   your task is to pluck one of the nodes and return it. \n   The plucked node should exist the lymph node with the smallest tied value. \n   If multiple nodes with the like small even value are found return the node that has belittled exponent. \n\n   The plucked lymph node should be render in a list, [ smalest_value, its index ], \n   If there be no tied value or the grant array be empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return []\n  const l = arr.length\n  const res = []\n  let min = arr[0]\n  let min_index = 0\n  let min_exp = 0\n  for (let i = 1; i < l; i++) {\n    const exp = Math.pow(10, i)\n    const val = arr[i]\n    if (val < min) {\n      min = val\n      min_index = i\n      min_exp = exp\n    } else if (val === min) {\n      min_exp = Math.max(min_exp, exp)\n    }\n  }\n  res.push([min, min_index])\n  if (min_exp === 0) return res\n  for (let i = 1; i < l; i++) {\n    const exp = Math.pow(10, i)\n    const val = arr[i]\n    if (val === min) {\n      res.push([val, i])\n    } else if (val < min) {\n      res.push([val, i])\n    }\n  }\n  return res\n}\n\nmodule.exports = pluck\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integer. Return the great integer that is great than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integer. Return the great integer that is great than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const len = lst.length\n  if (len === 0) return -1\n  let low = 0\n  let high = len - 1\n  while (low <= high) {\n    const mid = (low + high) >> 1\n    if (lst[mid] < lst[mid + 1]) {\n      low = mid + 1\n    } else {\n      high = mid - 1\n    }\n  }\n  if (lst[low] === lst[low + 1]) {\n    return low\n  } else {\n    return -1\n  }\n}\n\nmodule.exports = search\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": false, "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n\n  return filtered;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return the first one found.\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {String}\n  */\nconst filterFirstBySubstring = (strings, substring) => {\n  const filtered = filterBySubstring(strings, substring);\n  if (filtered.length === 0) {\n    return null;\n  }\n  return filtered[0];\n};\n\nmodule.exports = {\n  filterBySubstring,\n  filterFirstBySubstring,\n};\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let result = [];\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  result.push(lst[minIndex]);\n  result.push(lst[maxIndex]);\n  result.push(lst[minIndex]);\n  result.push(lst[maxIndex]);\n  return result;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a === b && b === c) {\n    return a;\n  }\n  if (a === b || b === c || c === a) {\n    return -1;\n  }\n  return Math.abs(a + b + c - Math.sqrt(a * a + b * b + c * c));\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will vanish, and fake differently. \n   The object q will flee if it's balanced (it is a palindromic list) and the sum of its elements equal less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that returns true if the object q will vanish, and fake differently. \n   The object q will flee if it's balanced (it is a palindromic list) and the sum of its elements equal less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return true;\n  }\n\n  let max = 0;\n  for (let i = 0; i < q.length; i++) {\n    max = Math.max(max, q[i]);\n  }\n\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n\n  return sum <= w && q.length === 1 && max === q[0];\n};\n\nmodule.exports = willItFly;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const arrLen = arr.length;\n  if (arrLen === 0) {\n    return 0;\n  }\n  const arrCopy = arr.slice();\n  let minChange = arrLen;\n  for (let i = 0; i < arrLen; i++) {\n    for (let j = 0; j < arrLen; j++) {\n      if (arrCopy[i] === arrCopy[j]) {\n        continue;\n      }\n      const diff = Math.abs(arrCopy[i] - arrCopy[j]);\n      if (diff < minChange) {\n        minChange = diff;\n      }\n    }\n  }\n  return minChange;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  let i = 0;\n  while (i < lst1.length && i < lst2.length) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i]);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nmodule.exports = totalMatch;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the give issue embody the multiplication of 3 premier numbers \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*Write a function that returns true if the give issue embody the multiplication of 3 premier numbers \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime19 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime20 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime21 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime22 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime23 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower(x, n);\n};\n\nmodule.exports = isSimplePower;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns on-key \n   if this ingeger is a cube of some integer numeral. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and returns on-key \n   if this ingeger is a cube of some integer numeral. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube2 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube3 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube4 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube5 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube6 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube7 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube8 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube9 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube10 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube11 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube12 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube13 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube14 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube15 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube16 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube17 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube18 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube19 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube20 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube21 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube22 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube23 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube24 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube25 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  return false;\n};\n\nconst iscube26 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 3 == 0) {\n    return true;\n  }\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives \n   a hexadecimal issue as a drawstring and consider the numeral of hexadecimal \n   digits that equal primes (prime number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two smaller lifelike act). \n   Hexadecimal finger are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers pool are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you have to settle a act of the following digits: 2=== 3=== 5=== 7=== \n   b-complex vitamin (= decimal 11)=== vitamin d (= decimal 13). \n   Note: you may simulate the input is constantly right or empty string=== \n   and symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*You have been tasked to write a function that receives \n   a hexadecimal issue as a drawstring and consider the numeral of hexadecimal \n   digits that equal primes (prime number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two smaller lifelike act). \n   Hexadecimal finger are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers pool are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you have to settle a act of the following digits: 2=== 3=== 5=== 7=== \n   b-complex vitamin (= decimal 11)=== vitamin d (= decimal 13). \n   Note: you may simulate the input is constantly right or empty string=== \n   and symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let temp = num;\n  while (temp!== \"\") {\n    let tempDigit = temp.charCodeAt(0);\n    if (tempDigit > 47 && tempDigit < 58) {\n      result += tempDigit - 48;\n    } else if (tempDigit > 96 && tempDigit < 103) {\n      result += tempDigit - 87;\n    } else {\n      result += tempDigit - 55;\n    }\n    temp = temp.substring(1);\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let result = true;\n  let temp = num;\n  while (temp!== \"\") {\n    let tempDigit = temp.charCodeAt(0);\n    if (tempDigit > 47 && tempDigit < 58) {\n      result = result && (tempDigit % 2 === 0);\n    } else if (tempDigit > 96 && tempDigit < 103) {\n      result = result && (tempDigit % 3 === 0);\n    } else {\n      result = result && (tempDigit % 5 === 0);\n    }\n    temp = temp.substring(1);\n  }\n  return result;\n};\n\nconst isPrime2 = (num) => {\n  let result = true;\n  let temp = num;\n  while (temp!== \"\") {\n    let tempDigit = temp.charCodeAt(0);\n    if (tempDigit > 47 && tempDigit < 58) {\n      result = result && (tempDigit % 2 === 0);\n    } else if (tempDigit > 96 && tempDigit < 103) {\n      result = result && (tempDigit % 3 === 0);\n    } else {\n      result = result && (tempDigit % 5 === 0);\n    }\n    temp = temp.substring(1);\n  }\n  return result;\n};\n\nconst isPrime3 = (num) => {\n  let result = true;\n  let temp = num;\n  while (temp!== \"\") {\n    let tempDigit = temp.charCodeAt(0);\n    if (tempDigit > 47 && tempDigit < 58) {\n      result = result && (tempDigit % 2 === 0);\n    } else if (tempDigit > 96 && tempDigit < 103) {\n      result = result && (tempDigit % 3 === 0);\n    } else {\n      result = result && (tempDigit % 5 === 0);\n    }\n    temp = temp.substring(1);\n  }\n  return result;\n};\n\nconst isPrime4 = (num) => {\n  let result = true;\n  let temp = num;\n  while (temp!== \"\") {\n    let tempDigit = temp.charCodeAt(0);\n    if (tempDigit > 47 && tempDigit < 58) {\n      result = result && (tempDigit % 2 === 0);\n    } else if (tempDigit > 96 && tempDigit < 103) {\n      result = result && (tempDigit % 3 === 0);\n    } else {\n      result = result && (tempDigit % 5 === 0);\n    }\n    temp = temp.substring(1);\n  }\n  return result;\n};\n\nconst isPrime5 = (num) => {\n  let result = true;\n  let temp = num;\n  while (temp!== \"\") {\n    let tempDigit = temp.charCodeAt(0);\n    if (tempDigit > 47 && tempDigit < 58) {\n      result = result && (tempDigit % 2 === 0);\n    } else if (tempDigit > 96 && tempDigit < 103) {\n      result = result && (tempDigit % 3 === 0);\n    } else {\n      result = result && (tempDigit % 5 === 0);\n    }\n    temp = temp.substring(1);\n  }\n  return result;\n};\n\nconst isPrime6 = (num) => {\n  let result = true;\n  let temp = num;\n  while (temp!== \"\") {\n    let tempDigit = temp.charCodeAt(0);\n    if (tempDigit > 47 && tempDigit < 58) {\n      result = result && (tempDigit % 2 === 0);\n    } else if (tempDigit > 96 && tempDigit < 103) {\n      result = result && (tempDigit % 3 === 0);\n    } else {\n      result = result && (tempDigit % 5 === 0);\n    }\n    temp = temp.substring(1);\n  }\n  return result;\n};\n\nconst isPrime7 = (num) => {\n  let result = true;\n  let temp = num;\n  while (temp!== \"\") {\n    let tempDigit = temp.charCodeAt(0);\n    if (tempDigit > 47 && tempDigit < 58) {\n      result = result && (tempDigit % 2 === 0);\n    } else if (tempDigit > 96 && tempDigit < 103) {\n      result = result && (tempDigit % 3 === 0);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to commute it to \n   binary format. The function should return a string, with each fictional character representing a binary \n   phone number. Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*You will be given a number in decimal form and your task is to commute it to \n   binary format. The function should return a string, with each fictional character representing a binary \n   phone number. Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binary_number = '';\n  let binary_number_length = 0;\n  let binary_number_length_increment = 0;\n  let binary_number_increment = 0;\n  let binary_number_increment_increment = 0;\n  let binary_number_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let binary_number_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_incre", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integer in a list.\n   Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integer in a list.\n   Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let product = 1\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n\n  return [sum, product]\n}\n\nmodule.exports = sumProduct\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task is to check if the string is glad or not. \n   A drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*You are given a string s.\n   Your task is to check if the string is glad or not. \n   A drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  let isHappy = true;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s1 = 0;\n  let s2 = 0;\n  let s3 = 0;\n  let s4 = 0;\n  let s5 = 0;\n  let s6 = 0;\n  let s7 = 0;\n  let s8 = 0;\n  let s9 = 0;\n  let s10 = 0;\n  let s11 = 0;\n  let s12 = 0;\n  let s13 = 0;\n  let s14 = 0;\n  let s15 = 0;\n  let s16 = 0;\n  let s17 = 0;\n  let s18 = 0;\n  let s19 = 0;\n  let s20 = 0;\n  let s21 = 0;\n  let s22 = 0;\n  let s23 = 0;\n  let s24 = 0;\n  let s25 = 0;\n  let s26 = 0;\n  let s27 = 0;\n  let s28 = 0;\n  let s29 = 0;\n  let s30 = 0;\n  let s31 = 0;\n  let s32 = 0;\n  let s33 = 0;\n  let s34 = 0;\n  let s35 = 0;\n  let s36 = 0;\n  let s37 = 0;\n  let s38 = 0;\n  let s39 = 0;\n  let s40 = 0;\n  let s41 = 0;\n  let s42 = 0;\n  let s43 = 0;\n  let s44 = 0;\n  let s45 = 0;\n  let s46 = 0;\n  let s47 = 0;\n  let s48 = 0;\n  let s49 = 0;\n  let s50 = 0;\n  let s51 = 0;\n  let s52 = 0;\n  let s53 = 0;\n  let s54 = 0;\n  let s55 = 0;\n  let s56 = 0;\n  let s57 = 0;\n  let s58 = 0;\n  let s59 = 0;\n  let s60 = 0;\n  let s61 = 0;\n  let s62 = 0;\n  let s63 = 0;\n  let s64 = 0;\n  let s65 = 0;\n  let s66 = 0;\n  let s67 = 0;\n  let s68 = 0;\n  let s69 = 0;\n  let s70 = 0;\n  let s71 = 0;\n  let s72 = 0;\n  let s73 = 0;\n  let s74 = 0;\n  let s75 = 0;\n  let s76 = 0;\n  let s77 = 0;\n  let s78 = 0;\n  let s79 = 0;\n  let s80 = 0;\n  let s81 = 0;\n  let s82 = 0;\n  let s83 = 0;\n  let s84 = 0;\n  let s85 = 0;\n  let s86 = 0;\n  let s87 = 0;\n  let s88 = 0;\n  let s89 = 0;\n  let s90 = 0;\n  let s91 = 0;\n  let s92 = 0;\n  let s93 = 0;\n  let s94 = 0;\n  let s95 = 0;\n  let s96 = 0;\n  let s97 = 0;\n  let s98 = 0;\n  let s99 = 0;\n  let s100 = 0;\n  let s101 = 0;\n  let s102 = 0;\n  let s103 = 0;\n  let s104 = 0;\n  let s105 = 0;\n  let s106 = 0;\n  let s107 = 0;\n  let s108 = 0;\n  let s109 = 0;\n  let s110 = 0;\n  let s111 = 0;\n  let s112 = 0;\n  let s113 = 0;\n  let s114 = 0;\n  let s115 = 0;\n  let s116 = 0;\n  let s117 = 0;\n  let s118 = 0;\n  let s119 = 0;\n  let s120 = 0;\n  let s121 = 0;\n  let s122 = 0;\n  let s123 = 0;\n  let s124 = 0;\n  let s125 = 0;\n  let s126 = 0;\n  let s127 = 0;\n  let s128 = 0;\n  let s129 = 0;\n  let s130 = 0;\n  let s131 = 0;\n  let s132 = 0;\n  let s133 = 0;\n  let s134 = 0;\n  let s135 = 0;\n  let s136 = 0;\n  let s137 = 0;\n  let s138 = 0;\n  let s139 = 0;\n  let s140 = 0;\n  let s141 = 0;\n  let s142 = 0;\n  let s143 = 0;\n  let s144 = 0;\n  let s145 = 0;\n  let s146 = 0;\n  let s147 = 0;\n  let s148 = 0;\n  let s149 = 0;\n  let s150 = 0;\n  let s151 = 0;\n  let s152 = 0;\n  let s153 = 0;\n  let s154 = 0;\n  let s155 = 0;\n  let s156 = 0;\n  let s157 = 0;\n  let s158 = 0;\n  let s159 = 0;\n  let s160 = 0;\n  let s161 = 0;\n  let s162 = 0;\n  let s163 = 0;\n  let s164 = 0;\n  let s165 = 0;\n  let s166 =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher hold to grant the grades\n   to student. The teacher has been make her own algorithm for grade. \n   The lone trouble is, she has lost the code she use for grading. \n   She has given you a list of grade point average for some student and you consume to write \n   a routine that can output a list of letter grades use the come mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher hold to grant the grades\n   to student. The teacher has been make her own algorithm for grade. \n   The lone trouble is, she has lost the code she use for grading. \n   She has given you a list of grade point average for some student and you consume to write \n   a routine that can output a list of letter grades use the come mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradeList = []\n  for (let i = 0; i < grades.length; i++) {\n    const grade = grades[i]\n    const gradePoint = Math.floor(grade)\n    const gradeLetter = gradePoint === 0? 'E' : gradePoint === 1? 'A' : gradePoint === 2? 'B' : gradePoint === 3? 'C' : gradePoint === 4? 'D' : 'E'\n    gradeList.push(gradeLetter)\n  }\n  return gradeList\n}\n\nmodule.exports = numericalLetterGrade\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   plus integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   plus integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// \nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let digit = 1;\n  while (N > 0) {\n    sum += digit;\n    N -= digit;\n    digit *= 2;\n  }\n  return sum.toString();\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = lst[0];\n  for (let i = 1; i < lst.length; i += 2) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nmodule.exports = add;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an coherent translation of it. \n   order interpretation of string, is a string where all words (separate by quad) \n   are replaced by a newfangled news where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should continue the decree of words and blank spaces in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes a string and returns an coherent translation of it. \n   order interpretation of string, is a string where all words (separate by quad) \n   are replaced by a newfangled news where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should continue the decree of words and blank spaces in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists, \n   which be like to matrix, however, unlike matrix, \n   each quarrel may hold a different number of column. \n   Given lst, and integer x, detect integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (rowing, columns), starting with 0. \n   Sort coordinates initially by course in ascending order. \n   Also, kind coordinates of the rowing by column in fall ordering.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists, \n   which be like to matrix, however, unlike matrix, \n   each quarrel may hold a different number of column. \n   Given lst, and integer x, detect integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (rowing, columns), starting with 0. \n   Sort coordinates initially by course in ascending order. \n   Also, kind coordinates of the rowing by column in fall ordering.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = [];\n  let row = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length > 0) {\n      row = [...row,...lst[i]];\n    }\n    i++;\n  }\n  const sorted = row.sort((a, b) => a[1] - b[1]);\n  const sortedByColumn = sorted.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < sortedByColumn.length; i++) {\n    if (sortedByColumn[i][1] === x) {\n      rows.push([...sortedByColumn[i][0], x]);\n    }\n  }\n  return rows;\n};\n\nconst getRow2 = (lst, x) => {\n  const rows = [];\n  let row = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length > 0) {\n      row = [...row,...lst[i]];\n    }\n    i++;\n  }\n  const sorted = row.sort((a, b) => a[1] - b[1]);\n  const sortedByColumn = sorted.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < sortedByColumn.length; i++) {\n    if (sortedByColumn[i][1] === x) {\n      rows.push([...sortedByColumn[i][0], x]);\n    }\n  }\n  return rows;\n};\n\nconst getRow3 = (lst, x) => {\n  const rows = [];\n  let row = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length > 0) {\n      row = [...row,...lst[i]];\n    }\n    i++;\n  }\n  const sorted = row.sort((a, b) => a[1] - b[1]);\n  const sortedByColumn = sorted.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < sortedByColumn.length; i++) {\n    if (sortedByColumn[i][1] === x) {\n      rows.push([...sortedByColumn[i][0], x]);\n    }\n  }\n  return rows;\n};\n\nconst getRow4 = (lst, x) => {\n  const rows = [];\n  let row = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length > 0) {\n      row = [...row,...lst[i]];\n    }\n    i++;\n  }\n  const sorted = row.sort((a, b) => a[1] - b[1]);\n  const sortedByColumn = sorted.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < sortedByColumn.length; i++) {\n    if (sortedByColumn[i][1] === x) {\n      rows.push([...sortedByColumn[i][0], x]);\n    }\n  }\n  return rows;\n};\n\nconst getRow5 = (lst, x) => {\n  const rows = [];\n  let row = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length > 0) {\n      row = [...row,...lst[i]];\n    }\n    i++;\n  }\n  const sorted = row.sort((a, b) => a[1] - b[1]);\n  const sortedByColumn = sorted.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < sortedByColumn.length; i++) {\n    if (sortedByColumn[i][1] === x) {\n      rows.push([...sortedByColumn[i][0], x]);\n    }\n  }\n  return rows;\n};\n\nconst getRow6 = (lst, x) => {\n  const rows = [];\n  let row = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length > 0) {\n      row = [...row,...lst[i]];\n    }\n    i++;\n  }\n  const sorted = row.sort((a, b) => a[1] - b[1]);\n  const sortedByColumn = sorted.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < sortedByColumn.length; i++) {\n    if (sortedByColumn[i][1] === x) {\n      rows.push([...sortedByColumn[i][0], x]);\n    }\n  }\n  return rows;\n};\n\nconst getRow7 = (lst, x) => {\n  const rows = [];\n  let row = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length > 0) {\n      row = [...row,...lst", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return [];\n  }\n  let result = [];\n  let sum = 0;\n  let i = 0;\n  while (i < array.length) {\n    sum += array[i];\n    if (sum % 2 === 0) {\n      result.push(array[i]);\n      sum = 0;\n    } else {\n      sum = sum / 2;\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = sortArray;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch down by two multiplied to two seat.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*Create a function encrypt that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch down by two multiplied to two seat.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let code = '';\n  let i = 0;\n  while (i < s.length) {\n    let c = s.charAt(i);\n    let n = s.charAt(i + 1);\n    let n2 = s.charAt(i + 2);\n    let n3 = s.charAt(i + 3);\n    let n4 = s.charAt(i + 4);\n    let n5 = s.charAt(i + 5);\n    let n6 = s.charAt(i + 6);\n    let n7 = s.charAt(i + 7);\n    let n8 = s.charAt(i + 8);\n    let n9 = s.charAt(i + 9);\n    let n10 = s.charAt(i + 10);\n    let n11 = s.charAt(i + 11);\n    let n12 = s.charAt(i + 12);\n    let n13 = s.charAt(i + 13);\n    let n14 = s.charAt(i + 14);\n    let n15 = s.charAt(i + 15);\n    let n16 = s.charAt(i + 16);\n    let n17 = s.charAt(i + 17);\n    let n18 = s.charAt(i + 18);\n    let n19 = s.charAt(i + 19);\n    let n20 = s.charAt(i + 20);\n    let n21 = s.charAt(i + 21);\n    let n22 = s.charAt(i + 22);\n    let n23 = s.charAt(i + 23);\n    let n24 = s.charAt(i + 24);\n    let n25 = s.charAt(i + 25);\n    let n26 = s.charAt(i + 26);\n    let n27 = s.charAt(i + 27);\n    let n28 = s.charAt(i + 28);\n    let n29 = s.charAt(i + 29);\n    let n30 = s.charAt(i + 30);\n    let n31 = s.charAt(i + 31);\n    let n32 = s.charAt(i + 32);\n    let n33 = s.charAt(i + 33);\n    let n34 = s.charAt(i + 34);\n    let n35 = s.charAt(i + 35);\n    let n36 = s.charAt(i + 36);\n    let n37 = s.charAt(i + 37);\n    let n38 = s.charAt(i + 38);\n    let n39 = s.charAt(i + 39);\n    let n40 = s.charAt(i + 40);\n    let n41 = s.charAt(i + 41);\n    let n42 = s.charAt(i + 42);\n    let n43 = s.charAt(i + 43);\n    let n44 = s.charAt(i + 44);\n    let n45 = s.charAt(i + 45);\n    let n46 = s.charAt(i + 46);\n    let n47 = s.charAt(i + 47);\n    let n48 = s.charAt(i + 48);\n    let n49 = s.charAt(i + 49);\n    let n50 = s.charAt(i + 50);\n    let n51 = s.charAt(i + 51);\n    let n52 = s.charAt(i + 52);\n    let n53 = s.charAt(i + 53);\n    let n54 = s.charAt(i + 54);\n    let n55 = s.charAt(i + 55);\n    let n56 = s.charAt(i + 56);\n    let n57 = s.charAt(i + 57);\n    let n58 = s.charAt(i + 58);\n    let n59 = s.charAt(i + 59);\n    let n60 = s.charAt(i + 60);\n    let n61 = s.charAt(i + 61);\n    let n62 = s.charAt(i + 62);\n    let n63 = s.charAt(i + 63);\n    let n64 = s.charAt(i + 64);\n    let n65 = s.charAt(i + 65);\n    let n66 = s.charAt(i + 66);\n    let n67 = s.charAt(i + 67);\n    let n68 = s.charAt(i + 68);\n    let n69 = s.charAt(i + 69);\n    let n70 = s.charAt(i + 70);\n    let n71 = s.charAt(i + 71);\n    let n72 = s.charAt(i + 72);\n    let n73 = s.charAt(i + 73);\n    let n74 = s.charAt(i + 74);\n    let n75 = s.charAt(i + 75);\n    let n76 = s.charAt(i + 76);\n    let n77 = s.charAt(i + 77);\n    let n78 = s.charAt(i + 78);\n    let n79 = s.charAt(i + 79);\n    let n80 = s.charAt(i + 80);\n    let n81 = s.charAt(i + 81);\n    let n82 = s.charAt(i + 82);\n    let n83 = s.charAt(i + 83);\n    let n84 = s.charAt(i + 84);\n    let n85 = s.charAt(i + 85);\n    let n86 = s.charAt(i + 86);\n    let n87 = s.charAt(i + 87);\n    let n88 = s.charAt(i + 88);\n    let n89 = s.charAt(i + 89);\n    let n90 = s.charAt(i + 90);\n    let n91 = s.charAt(i + 91);\n    let n92 = s", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum component witness until given here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* From a given list of integers, generate a list of rolling maximum component witness until given here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const max = numbers[0];\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  result.push(max);\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, generate a list of rolling minimum component witness until given here and now \n   in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMin = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const min = numbers[0];\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  result.push(min);\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      result.push(min);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, generate a list of rolling sum component witness until given here and now \n   in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 3, 5, 5, 5, 6, 6]\n  */\nconst rollingSum = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const sum = numbers[0];\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  result.push(sum);\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] === sum) {\n      result.push(sum);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, generate a list of rolling product component witness until given here and now \n   in the sequence.\n  >>> rollingProduct([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 24, 120, 720, 5040]\n  */\nconst rollingProduct = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const product = numbers[0];\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  result.push(product);\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] === product) {\n      result.push(product);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, generate a list of rolling average component witness until given here and now \n   in the sequence.\n  >>> rollingAverage([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4]\n  */\nconst rollingAverage = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const sum = numbers[0];\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  result.push(sum / numbers.length);\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] === sum / numbers.length) {\n      result.push(sum / numbers.length);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, generate a list of rolling variance component witness until given here and now \n   in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4]\n  */\nconst rollingVariance = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const sum = numbers[0];\n  const sumSquares = numbers.reduce((a, b) => a + b * b, 0);\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    const difference = numbers[i] - sum;\n    sum += difference;\n    sumSquares += difference * difference;\n  }\n  result.push(sumSquares / numbers.length);\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] === sumSquares / numbers.length) {\n      result.push(sumSquares / numbers.length);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, generate a list of rolling standard deviation component witness until given here and now \n   in the sequence.\n  >>> rollingStandardDeviation([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4]\n  */\nconst rollingStandardDeviation = (numbers) => {\n  if", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that returns the second smallest element of the list.\n   Return null if there be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that returns the second smallest element of the list.\n   Return null if there be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n}\n\nconst nextSmallest = (lst) => {\n  const arr = lst.slice(0);\n  const smallest = arr[0];\n  for (let i = 1; i <", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let isBored = 0;\n  let words = S.split(/[.?!]/);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"I\")) {\n      isBored++;\n    }\n  }\n  return isBored;\n};\n\nmodule.exports = isBored;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt2 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt3 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt4 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt5 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt6 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt7 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt8 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt9 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt10 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt11 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt12 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt13 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt14 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt15 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt16 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt17 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt18 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt19 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt20 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt21 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt22 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt23 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt24 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt25 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt26 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt27 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt28 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt29 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt30 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt31 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt32 = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt33 = (x, y", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const vowels = 'aeiouAEIOU';\n  const result = message.split('').map((letter) => {\n    return letters.indexOf(letter)!== -1? letter : vowels.indexOf(letter)!== -1? vowels[letters.indexOf(letter)] : letter;\n  });\n  return result.join('');\n};\n\nmodule.exports = encode;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need to find the largest choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need to find the largest choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let sum = 0;\n    for (let j = 0; j < num; j++) {\n      sum += num % 10;\n      num /= 10;\n    }\n    if (max < sum) {\n      max = sum;\n    }\n  }\n  return max;\n};\n\nconst test = (lst) => {\n  let res = skjkasdkd(lst);\n  console.log(res);\n};\n\ntest([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]);\ntest([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([1,3,1,32,5107,34,83278,109,163,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  let keys = Object.keys(dict);\n  let isString = keys.every(key => typeof key ==='string');\n  let isChain = keys.every(key => key.toUpperCase() === key);\n  return isString && isChain;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n < 0) {\n    return [];\n  }\n  let result = [];\n  let i = 0;\n  while (i < n) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n   the intersection of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*Complete the function that takes two integers and returns \n   the intersection of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === b % 10) {\n      result += a % 10;\n      a /= 10;\n      b /= 10;\n    } else {\n      result += a % 10;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst test = () => {\n  let result = 0;\n  for (let i = 1; i < 100; i++) {\n    result += multiply(i, i);\n  }\n  console.log(result);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string s, count the number of uppercase vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a issue \n   and retort the close integer to it. If the numeral is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* Create a function that takes a value (string) representing a issue \n   and retort the close integer to it. If the numeral is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const numeral = require('numeral');\n  const numeralRounded = numeral(value).round();\n  const numeralRoundedClosest = numeralRounded.subtract(numeralRounded.valueOf()).valueOf();\n  return numeralRoundedClosest;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
