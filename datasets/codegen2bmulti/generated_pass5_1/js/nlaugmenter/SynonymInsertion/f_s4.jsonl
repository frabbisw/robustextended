{"task_id": "JavaScript/0", "prompt": "/* Check discipline if in given list of numbers, are any two numbers closer cheeseparing to each other than \n   given afford threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* Check discipline if in given list of numbers, are any two numbers closer cheeseparing to each other than \n   given afford threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers[0] - threshold;\n  const minDistanceIndex = sortedNumbers.indexOf(minDistance);\n  return minDistanceIndex!== -1 && sortedNumbers[minDistanceIndex + 1] - minDistance < threshold;\n};\n\nmodule.exports = hasCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input remark to this function is a string chain containing control multiple groups of nested nest parentheses parenthesis. Your goal finish is to \n   separate those group into separate freestanding strings and return the list of those. \n   Separate groups are balanced (each open capable brace pair is properly by rights closed) and not nested within each other \n   Ignore dismiss any spaces outer space in the input stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* Input remark to this function is a string chain containing control multiple groups of nested nest parentheses parenthesis. Your goal finish is to \n   separate those group into separate freestanding strings and return the list of those. \n   Separate groups are balanced (each open capable brace pair is properly by rights closed) and not nested within each other \n   Ignore dismiss any spaces outer space in the input stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let paren_groups = [];\n  let paren_group = '';\n  let paren_count = 0;\n  let paren_open = 0;\n  let paren_close = 0;\n  let paren_string_length = paren_string.length;\n  let paren_char = '';\n  let paren_char_index = 0;\n  let paren_char_count = 0;\n  let paren_char_index_end = 0;\n  let paren_char_index_start = 0;\n  let paren_char_count_end = 0;\n  let paren_char_count_start = 0;\n  let paren_char_count_end_start = 0;\n  let paren_char_count_end_end = 0;\n  let paren_char_count_end_end_end = 0;\n  let paren_char_count_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_char_count_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_"}
{"task_id": "JavaScript/2", "prompt": "/* Given move over a positive floating float point item number, it can be decomposed into \n   and integer part share (largest bombastic integer smaller little than given number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return refund the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* Given move over a positive floating float point item number, it can be decomposed into \n   and integer part share (largest bombastic integer smaller little than given number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return refund the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = number;\n  let decimalPart = 0;\n  let decimalPartIndex = 0;\n  let decimalPartIndexMax = 0;\n  let decimalPartIndexMin = 0;\n  let decimalPartIndexMaxMax = 0;\n  let decimalPartIndexMinMax = 0;\n  let decimalPartIndexMaxMin = 0;\n  let decimalPartIndexMaxMinMax = 0;\n  let decimalPartIndexMaxMinMax = 0;\n  let decimalPartIndexMaxMinMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let decimalPartIndexMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax"}
{"task_id": "JavaScript/3", "prompt": "/* You're given move over a list of deposit and withdrawal operations on a bank depository financial institution account explanation that starts with \n   zero balance. Your task job is to detect if at any point decimal point the balance of account bill fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* You're given move over a list of deposit and withdrawal operations on a bank depository financial institution account explanation that starts with \n   zero balance. Your task job is to detect if at any point decimal point the balance of account bill fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\nmodule.exports = {\n  aboveZero: aboveZero,\n  belowZero: belowZero\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given move over list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference remainder between each \n   element and a centerpoint (mean in this case character ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* For a given move over list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference remainder between each \n   element and a centerpoint (mean in this case character ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const remainder = numbers.map((number) => Math.abs(number - mean));\n  const mad = median(remainder);\n  return mad;\n};\n\n/*\n  For a given move over list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   Median Absolute Deviation is the average median absolute difference remainder between each \n   element and a centerpoint (median in this case character ): \n   MAD = average modal | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const remainder = numbers.map((number) => Math.abs(number - median));\n  const mad = median(remainder);\n  return mad;\n};\n\n/*\n  For a given move over list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation is the average standard deviation of the elements in this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the sum of the squares of the differences between the elements and the mean of this dataset. \n   Standard Deviation is the average of the square root of the"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number phone number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "/* Insert a number phone number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    if (i + 1 < numbers.length) {\n      result.push(delimeter);\n    }\n    i += 1;\n  }\n  return result;\n};\n\nexport default intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input remark to this function is a string chain represented act multiple groups for nested parentheses digression separated divide by spaces quad. \n   For each of the group, output the deepest level grade of nesting of parentheses. \n   E.g. (() ()) has maximum two levels of nesting cuddle while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* Input remark to this function is a string chain represented act multiple groups for nested parentheses digression separated divide by spaces quad. \n   For each of the group, output the deepest level grade of nesting of parentheses. \n   E.g. (() ()) has maximum two levels of nesting cuddle while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_string_length = paren_string.length;\n  let paren_string_index = 0;\n  let paren_string_current = '';\n  let paren_string_next = '';\n  let paren_string_next_index = 0;\n  let paren_string_next_current = '';\n  let paren_string_next_next = '';\n  let paren_string_next_next_index = 0;\n  let paren_string_next_next_current = '';\n  let paren_string_next_next_next = '';\n  let paren_string_next_next_next_index = 0;\n  let paren_string_next_next_next_current = '';\n  let paren_string_next_next_next_next = '';\n  let paren_string_next_next_next_next_index = 0;\n  let paren_string_next_next_next_next_current = '';\n  let paren_string_next_next_next_next_next = '';\n  let paren_string_next_next_next_next_next_index = 0;\n  let paren_string_next_next_next_next_next_current = '';\n  let paren_string_next_next_next_next_next_next = '';\n  let paren_string_next_next_next_next_next_next_index = 0;\n  let paren_string_next_next_next_next_next_next_current = '';\n  let paren_string_next_next_next_next_next_next_next = '';\n  let paren_string_next_next_next_next_next_next_next_index = 0;\n  let paren_string_next_next_next_next_next_next_next_current = '';\n  let paren_string_next_next_next_next_next_next_next_next = '';\n  let paren_string_next_next_next_next_next_next_next_next_index = 0;\n  let paren_string_next_next_next_next_next_next_next_next_current = '';\n  let paren_string_next_next_next_next_next_next_next_next_next = '';\n  let paren_string_next_next_next_next_next_next_next_next_next_index = 0;\n  let paren_string_next_next_next_next_next_next_next_next_next_current = '';\n  let paren_string_next_next_next_next_next_next_next_next_next_next = '';\n  let paren_string_next_next_next_next_next_next_next_next_next_next_index = 0;\n  let paren_string_next_next_next_next_next_next_next_next_next_next_current = '';\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next = '';\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next_index = 0;\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next_current = '';\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next_next = '';\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next_next_index = 0;\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next_next_current = '';\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next_next_next = '';\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next_next_next_index = 0;\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next_next_next_current = '';\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next_next_next_next = '';\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next_next_next_next_index = 0;\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = '';\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = '';\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = '';\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = '';\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = '';\n  let paren_string_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = '';\n  let paren_string_next_next_next_next_next_"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input remark list of strings only for ones that contain check given afford substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "/* Filter an input remark list of strings only for ones that contain check given afford substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input remark list of strings only for ones that contain check given afford substring\n * @param {string} substring\n * @param {string} [afford]\n * @returns {string[]}\n */\nconst filterByAfford = (strings, afford) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(afford)!== -1);\n};\n\n/**\n * Filter an input remark list of strings only for ones that contain check given afford substring\n * @param {string} substring\n * @param {string} [afford]\n * @returns {string[]}\n */\nconst filterByAffordSubstring = (strings, afford, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(afford)!== -1 && s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input remark list of strings only for ones that contain check given afford substring\n * @param {string} substring\n * @param {string} [afford]\n * @returns {string[]}\n */\nconst filterByAffordSubstring2 = (strings, afford, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(afford)!== -1 && s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input remark list of strings only for ones that contain check given afford substring\n * @param {string} substring\n * @param {string} [afford]\n * @returns {string[]}\n */\nconst filterByAffordSubstring3 = (strings, afford, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(afford)!== -1 && s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input remark list of strings only for ones that contain check given afford substring\n * @param {string} substring\n * @param {string} [afford]\n * @returns {string[]}\n */\nconst filterByAffordSubstring4 = (strings, afford, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(afford)!== -1 && s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input remark list of strings only for ones that contain check given afford substring\n * @param {string} substring\n * @param {string} [afford]\n * @returns {string[]}\n */\nconst filterByAffordSubstring5 = (strings, afford, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(afford)!== -1 && s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input remark list of strings only for ones that contain check given afford substring\n * @param {string} substring\n * @param {string} [afford]\n * @returns {string[]}\n */\nconst filterByAffordSubstring6 = (strings, afford, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(afford)!== -1 && s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input remark list of strings only for ones that contain check given afford substring\n * @param {string} substring\n * @param {string} [afford]\n * @returns {string[]}\n */\nconst filterByAffordSubstring7 = (strings, afford, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(afford)!== -1 && s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input remark list of strings only for ones that contain check given afford substring\n * @param {string} substring\n * @param {string} [afford]\n * @returns {string[]}\n */\nconst filterByAffordSubstring8 = (strings, afford, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(afford)!== -1 && s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input remark list of strings only for ones that contain check given afford substring\n * @param {string} substring\n * @param {string} [afford]\n * @returns {string[]}\n */\nconst filterByAffordSubstring9 = (strings, afford, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(afford)!== -1 && s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input remark list of strings only for ones that contain check given afford substring\n * @param {string} substring\n * @param {string} [afford]\n * @returns {string[]}\n */\nconst filterByAffordSubstring10 = (strings, afford, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(afford)!== -1 && s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input remark list of strings only for ones"}
{"task_id": "JavaScript/8", "prompt": "/* For a given move over list of integers, return a tuple consisting consist of a sum kernel and a product of all the integers integer in a list.\n   Empty sum kernel should be equal adequate to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* For a given move over list of integers, return a tuple consisting consist of a sum kernel and a product of all the integers integer in a list.\n   Empty sum kernel should be equal adequate to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\nmodule.exports = sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given move over list of integers, generate render a list of rolling wheel maximum element component found detect until given hold moment here and now \n   in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* From a given move over list of integers, generate render a list of rolling wheel maximum element component found detect until given hold moment here and now \n   in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  const result = [];\n  for (let i = 0; i < maxIndex; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given move over list of integers, generate render a list of rolling wheel maximum element component found detect until given hold moment here and now \n  in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax2 = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  const result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given move over list of integers, generate render a list of rolling wheel maximum element component found detect until given hold moment here and now \n  in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax3 = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  const result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given move over list of integers, generate render a list of rolling wheel maximum element component found detect until given hold moment here and now \n  in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax4 = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  const result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given move over list of integers, generate render a list of rolling wheel maximum element component found detect until given hold moment here and now \n  in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax5 = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  const result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given move over list of integers, generate render a list of rolling wheel maximum element component found detect until given hold moment here and now \n  in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax6 = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  const result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given move over list of integers, generate render a list of rolling wheel maximum element component found detect until given hold moment here and now \n  in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax7 = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  const result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given move over list of integers, generate render a list of rolling wheel maximum element component found detect until given hold moment here and now \n  in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax8 ="}
{"task_id": "JavaScript/10", "prompt": "/* Test screen if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive palindrome that begins get down with a supplied string.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* Test screen if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive palindrome that begins get down with a supplied string.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string === '') {\n    return string;\n  }\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const palindrome = postfix.length > prefix.length? postfix : prefix;\n  return palindrome;\n}\n\n/* Test if a string is a palindrome * / \nconst isPalindrome = (string) = > { \n  return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive palindrome that begins get down with a supplied string.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string === '') {\n    return string;\n  }\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const palindrome = postfix.length > prefix.length? postfix : prefix;\n  return palindrome;\n}\n\n/* Test if a string is a palindrome * / \nconst isPalindrome = (string) = > { \n  return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive palindrome that begins get down with a supplied string.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string === '') {\n    return string;\n  }\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const palindrome = postfix.length > prefix.length? postfix : prefix;\n  return palindrome;\n}\n\n/* Test if a string is a palindrome * / \nconst isPalindrome = (string) = > { \n  return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive palindrome that begins get down with a supplied string.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string === '') {\n    return string;\n  }\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const palindrome = postfix.length > prefix.length? postfix : prefix;\n  return palindrome;\n}\n\n/* Test if a string is a palindrome * / \nconst isPalindrome = (string) = > { \n  return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive palindrome that begins get down with a supplied string.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string === '') {\n    return string;\n  }\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  const palindrome = postfix.length > prefix.length? postfix : prefix;\n  return palindrome;\n}\n\n/* Test if a string is a palindrome * / \nconst isPalindrome = (string) = > { \n  return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive palindrome that begins get down with a supplied string.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePal"}
{"task_id": "JavaScript/11", "prompt": "/* Input remark are two strings a and b consisting consist only of 1s and 0s zero. \n   Perform binary XOR on these inputs remark and return result solution also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* Input remark are two strings a and b consisting consist only of 1s and 0s zero. \n   Perform binary XOR on these inputs remark and return result solution also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  let aLength = a.length;\n  let bLength = b.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  while (aIndex < aLength && bIndex < bLength) {\n    if (a[aIndex] === b[bIndex]) {\n      result += a[aIndex];\n      aIndex++;\n      bIndex++;\n    } else if (a[aIndex] === 0) {\n      result += '0';\n      aIndex++;\n    } else if (b[bIndex] === 0) {\n      result += '0';\n      bIndex++;\n    } else {\n      result += '1';\n      aIndex++;\n      bIndex++;\n    }\n  }\n  while (aIndex < aLength) {\n    result += a[aIndex];\n    aIndex++;\n  }\n  while (bIndex < bLength) {\n    result += b[bIndex];\n    bIndex++;\n  }\n  return result;\n};\n\nconst stringXorTest = () => {\n  let a}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return come back the first one in case casing of multiple \n   strings of the same length distance. Return null in case character the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return come back the first one in case casing of multiple \n   strings of the same length distance. Return null in case character the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  const longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return tax return a greatest common coarse divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "/* Return tax return a greatest common coarse divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n\n  if (a === 0) {\n    return b;\n  }\n\n  if (b === 0) {\n    return a;\n  }\n\n  if (a === 1) {\n    return b;\n  }\n\n  if (b === 1) {\n    return a;\n  }\n\n  if (a === b) {\n    return a;\n  }\n\n  let gcd = a;\n\n  while (gcd!== 1) {\n    if (a % gcd === 0) {\n      gcd = b % gcd;\n    } else if (b % gcd === 0) {\n      gcd = a % gcd;\n    } else {\n      return gcd;\n    }\n  }\n\n  return gcd;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [string]\n  let i = 1\n  while (i < string.length) {\n    const prefix = string.substr(0, i)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  return prefixes\n}\n\n/**\n * Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [string]\n  let i = 1\n  while (i < string.length) {\n    const prefix = string.substr(0, i)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  return prefixes\n}\n\n/**\n * Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [string]\n  let i = 1\n  while (i < string.length) {\n    const prefix = string.substr(0, i)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  return prefixes\n}\n\n/**\n * Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [string]\n  let i = 1\n  while (i < string.length) {\n    const prefix = string.substr(0, i)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  return prefixes\n}\n\n/**\n * Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [string]\n  let i = 1\n  while (i < string.length) {\n    const prefix = string.substr(0, i)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  return prefixes\n}\n\n/**\n * Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [string]\n  let i = 1\n  while (i < string.length) {\n    const prefix = string.substr(0, i)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  return prefixes\n}\n\n/**\n * Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [string]\n  let i = 1\n  while (i < string.length) {\n    const prefix = string.substr(0, i)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  return prefixes\n}\n\n/**\n * Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [string]\n  let i = 1\n  while (i < string.length) {\n    const prefix = string.substr(0, i)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  return prefixes\n}\n\n/**\n * Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [string]\n  let i = 1\n  while (i < string.length) {\n    const prefix = string.substr(0, i)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  return prefixes\n}\n\n/**\n * Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [string]\n  let i = 1\n  while (i < string.length) {\n    const prefix = string.substr(0, i)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  return prefixes\n}\n\n/**\n * Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [string]\n  let i = 1\n  while (i < string.length) {\n    const prefix = string.substr(0, i"}
{"task_id": "JavaScript/15", "prompt": "/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return come back a string containing check space quad - delimited numbers number starting"}
{"task_id": "JavaScript/16", "prompt": "/* Given move over a string, find out how many distinct clear-cut characters quality (regardless of case) does it consist dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* Given move over a string, find out how many distinct clear-cut characters quality (regardless of case) does it consist dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charMap = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charMap.has(char)) {\n      charMap.set(char, charMap.get(char) + 1);\n    } else {\n      charMap.set(char, 1);\n    }\n  }\n  return charMap.size;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input remark to this function is a string chain representing act musical notes eminence in a special limited ASCII american standard code for information interchange format. \n   Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n   not last concluding. \n\n   Here is a legend caption: \n  ' o' - whole unharmed note bill, lasts four beats beat \n  ' o|' - half one-half note bill, lasts two beats \n  ' .|' - quater note, lasts one beat meter\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* Input remark to this function is a string chain representing act musical notes eminence in a special limited ASCII american standard code for information interchange format. \n   Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n   not last concluding. \n\n   Here is a legend caption: \n 'o' - whole unharmed note bill, lasts four beats beat \n 'o|' - half one-half note bill, lasts two beats \n  '.|' - quater note, lasts one beat meter\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_notes = music_string.split('|');\n  let music_notes_length = music_notes.length;\n  let music_notes_array = [];\n  let music_notes_array_length = 0;\n  let music_notes_array_index = 0;\n  let music_notes_array_index_end = 0;\n  let music_notes_array_index_start = 0;\n  let music_notes_array_index_end_start = 0;\n  let music_notes_array_index_end_end = 0;\n  let music_notes_array_index_end_end_end = 0;\n  let music_notes_array_index_end_end_end_end = 0;\n  let music_notes_array_index_end_end_end_end_end = 0;\n  let music_notes_array_index_end_end_end_end_end_end = 0;\n  let music_notes_array_index_end_end_end_end_end_end_end = 0;\n  let music_notes_array_index_end_end_end_end_end_end_end_end = 0;\n  let music_notes_array_index_end_end_end_end_end_end_end_end_end = 0;\n  let music_notes_array_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let music_notes_array_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let music_notes_array_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let music_notes_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let music_notes_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let music_notes_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let music_notes_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let music_notes_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let music_notes_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end"}
{"task_id": "JavaScript/18", "prompt": "/* Find recover how many times a given substring can be found recover in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* Find recover how many times a given substring can be found recover in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++\n      i += substring.length\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input remark is a space - delimited specify string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return revert the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* Input remark is a space - delimited specify string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return revert the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: 'three one five'\n  Output: 'one three five'\n  */\nconst removeNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: 'three one five'\n  Output: 'three one five'\n  */\nconst removeSpaces = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: 'three one five'\n  Output: 'three one five'\n  */\nconst removeSpacesAndNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: 'three one five'\n  Output: 'three one five'\n  */\nconst removeSpacesAndNumbersAndNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: 'three one five'\n  Output: 'three one five'\n  */\nconst removeSpacesAndNumbersAndNumbersAndNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: 'three one five'\n  Output: 'three one five'\n  */\nconst removeSpacesAndNumbersAndNumbersAndNumbersAndNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: 'three one five'\n  Output: 'three one five'\n  */\nconst removeSpacesAndNumbersAndNumbersAndNumbersAndNumbersAndNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: 'three one five'\n  Output: 'three one five'\n  */\nconst removeSpacesAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: 'three one five'\n  Output: 'three one five'\n  */\nconst removeSpacesAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: 'three one five'\n  Output: 'three one five'\n  */\nconst removeSpacesAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: 'three one five'\n  Output: 'three one five'\n  */\nconst removeSpacesAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: 'three one five'\n  Output: 'three one five'\n  */\nconst removeSpacesAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: 'three one five'\n  Output: 'three one five'\n  */\nconst removeSpacesAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: 'three one five'\n  Output: 'three one five'\n  */\nconst removeSpacesAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: 'three one five'\n  Output: 'three one five'\n  */\nconst removeSpacesAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input: 'three one five'\n  Output"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied add list of numbers (of length at least two) select blue-ribbon and return two that are the closest near to each \n   other and return them in order (smaller modest number numeral, larger large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* From a supplied add list of numbers (of length at least two) select blue-ribbon and return two that are the closest near to each \n   other and return them in order (smaller modest number numeral, larger large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closest = numbers.reduce((a, b) => {\n    const distance = Math.abs(a - b);\n    if (distance < Math.abs(a - closest[1])) {\n      return [a, b];\n    } else {\n      return [b, a];\n    }\n  }, [0, 0]);\n  return closest;\n};\n\nconst findClosestElements2 = (numbers) => {\n  const closest = numbers.reduce((a, b) => {\n    const distance = Math.abs(a - b);\n    if (distance < Math.abs(a - closest[1])) {\n      return [a, b];\n    } else {\n      return [b, a];\n    }\n  }, [0, 0]);\n  return closest;\n};\n\nconst findClosestElements3 = (numbers) => {\n  const closest = numbers.reduce((a, b) => {\n    const distance = Math.abs(a - b);\n    if (distance < Math.abs(a - closest[1])) {\n      return [a, b];\n    } else {\n      return [b, a];\n    }\n  }, [0, 0]);\n  return closest;\n};\n\nconst findClosestElements4 = (numbers) => {\n  const closest = numbers.reduce((a, b) => {\n    const distance = Math.abs(a - b);\n    if (distance < Math.abs(a - closest[1])) {\n      return [a, b];\n    } else {\n      return [b, a];\n    }\n  }, [0, 0]);\n  return closest;\n};\n\nconst findClosestElements5 = (numbers) => {\n  const closest = numbers.reduce((a, b) => {\n    const distance = Math.abs(a - b);\n    if (distance < Math.abs(a - closest[1])) {\n      return [a, b];\n    } else {\n      return [b, a];\n    }\n  }, [0, 0]);\n  return closest;\n};\n\nconst findClosestElements6 = (numbers) => {\n  const closest = numbers.reduce((a, b) => {\n    const distance = Math.abs(a - b);\n    if (distance < Math.abs(a - closest[1])) {\n      return [a, b];\n    } else {\n      return [b, a];\n    }\n  }, [0, 0]);\n  return closest;\n};\n\nconst findClosestElements7 = (numbers) => {\n  const closest = numbers.reduce((a, b) => {\n    const distance = Math.abs(a - b);\n    if (distance < Math.abs(a - closest[1])) {\n      return [a, b];\n    } else {\n      return [b, a];\n    }\n  }, [0, 0]);\n  return closest;\n};\n\nconst findClosestElements8 = (numbers) => {\n  const closest = numbers.reduce((a, b) => {\n    const distance = Math.abs(a - b);\n    if (distance < Math.abs(a - closest[1])) {\n      return [a, b];\n    } else {\n      return [b, a];\n    }\n  }, [0, 0]);\n  return closest;\n};\n\nconst findClosestElements9 = (numbers) => {\n  const closest = numbers.reduce((a, b) => {\n    const distance = Math.abs(a - b);\n    if (distance < Math.abs(a - closest[1])) {\n      return [a, b];\n    } else {\n      return [b, a];\n    }\n  }, [0, 0]);\n  return closest;\n};\n\nconst findClosestElements10 = (numbers) => {\n  const closest = numbers.reduce((a, b) => {\n    const distance = Math.abs(a - b);\n    if (distance < Math.abs(a - closest[1])) {\n      return [a, b];\n    } else {\n      return [b, a];\n    }\n  }, [0, 0]);\n  return closest;\n};\n\nconst findClosestElements11 = (numbers) => {\n  const closest = numbers.reduce((a, b) => {\n    const distance = Math.abs(a - b);\n    if (distance < Math.abs(a - closest[1])) {\n      return [a, b];\n    } else {\n      return [b, a];\n    }\n  }, [0, 0]);\n  return closest;\n};\n\nconst findClosestElements12 = (numbers) => {\n  const closest = numbers.reduce((a, b) => {\n    const distance = Math.abs(a - b);\n    if (distance < Math.abs(a - closest[1])) {\n      return [a, b];\n    } else {\n      return [b, a];\n    }\n  }, [0, 0]);\n  return closest;\n};\n\nconst findClosestElements13 = (numbers) => {\n  const closest = numbers.reduce((a, b) => {\n    const distance = Math.abs(a - b);\n    if (distance < Math.abs(a - closest[1])) {\n      return [a, b];\n    } else {\n      return [b, a];\n    }\n  }, [0, 0]);\n  return closest;\n};\n\nconst findClosestElements14 = (numbers) => {\n  const closest = numbers.reduce((a, b) => {\n    const distance = Math.abs(a - b);\n    if (distance < Math.abs"}
{"task_id": "JavaScript/21", "prompt": "/* Given move over list of numbers (of at least two elements), apply put on a linear analogue transform to that list,\n   such that the smallest number phone number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* Given move over list of numbers (of at least two elements), apply put on a linear analogue transform to that list,\n   such that the smallest number phone number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\n/* Given a list of numbers, apply put on a linear analogue transform to that list,\n   such that the smallest number phone number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\n/* Given a list of numbers, apply put on a linear analogue transform to that list,\n   such that the smallest number phone number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\n/* Given a list of numbers, apply put on a linear analogue transform to that list,\n   such that the smallest number phone number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\n/* Given a list of numbers, apply put on a linear analogue transform to that list,\n   such that the smallest number phone number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\n/* Given a list of numbers, apply put on a linear analogue transform to that list,\n   such that the smallest number phone number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\n/* Given a list of numbers, apply put on a linear analogue transform to that list,\n   such that the smallest number phone number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\n/* Given a list of numbers, apply put on a linear analogue transform to that list,\n   such that the smallest number phone number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4."}
{"task_id": "JavaScript/22", "prompt": "/* Filter given move over list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "/* Filter given move over list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  Filter given move over list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/*\n  Filter given move over list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/*\n  Filter given move over list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v === null);\n};\n\n/*\n  Filter given move over list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter(v => v === undefined);\n};\n\n/*\n  Filter given move over list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  Filter given move over list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/*\n  Filter given move over list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v === null);\n};\n\n/*\n  Filter given move over list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter(v => v === undefined);\n};\n\n/*\n  Filter given move over list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  Filter given move over list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/*\n  Filter given move over list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v === null);\n};\n\n/*\n  Filter given move over list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter(v => v === undefined);\n};\n\n/*\n  Filter given move over list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  Filter given move over list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/*\n  Filter given move over list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1"}
{"task_id": "JavaScript/23", "prompt": "/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen2 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen3 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen4 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen5 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen6 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen7 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen8 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen9 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen10 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen11 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen12 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen13 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen14 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen15 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen16 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen17 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen18 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen19 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen20 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/* Return tax return length of given move over string\n  >>> strlen(''"}
{"task_id": "JavaScript/24", "prompt": "/* For a given move over number n, find recover the largest large number that divides separate n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* For a given move over number n, find recover the largest large number that divides separate n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = n;\n  let largestDivisor = n;\n  let largestDivisorIndex = 0;\n  let largestDivisorIndex2 = 0;\n  let largestDivisorIndex3 = 0;\n  let largestDivisorIndex4 = 0;\n  let largestDivisorIndex5 = 0;\n  let largestDivisorIndex6 = 0;\n  let largestDivisorIndex7 = 0;\n  let largestDivisorIndex8 = 0;\n  let largestDivisorIndex9 = 0;\n  let largestDivisorIndex10 = 0;\n  let largestDivisorIndex11 = 0;\n  let largestDivisorIndex12 = 0;\n  let largestDivisorIndex13 = 0;\n  let largestDivisorIndex14 = 0;\n  let largestDivisorIndex15 = 0;\n  let largestDivisorIndex16 = 0;\n  let largestDivisorIndex17 = 0;\n  let largestDivisorIndex18 = 0;\n  let largestDivisorIndex19 = 0;\n  let largestDivisorIndex20 = 0;\n  let largestDivisorIndex21 = 0;\n  let largestDivisorIndex22 = 0;\n  let largestDivisorIndex23 = 0;\n  let largestDivisorIndex24 = 0;\n  let largestDivisorIndex25 = 0;\n  let largestDivisorIndex26 = 0;\n  let largestDivisorIndex27 = 0;\n  let largestDivisorIndex28 = 0;\n  let largestDivisorIndex29 = 0;\n  let largestDivisorIndex30 = 0;\n  let largestDivisorIndex31 = 0;\n  let largestDivisorIndex32 = 0;\n  let largestDivisorIndex33 = 0;\n  let largestDivisorIndex34 = 0;\n  let largestDivisorIndex35 = 0;\n  let largestDivisorIndex36 = 0;\n  let largestDivisorIndex37 = 0;\n  let largestDivisorIndex38 = 0;\n  let largestDivisorIndex39 = 0;\n  let largestDivisorIndex40 = 0;\n  let largestDivisorIndex41 = 0;\n  let largestDivisorIndex42 = 0;\n  let largestDivisorIndex43 = 0;\n  let largestDivisorIndex44 = 0;\n  let largestDivisorIndex45 = 0;\n  let largestDivisorIndex46 = 0;\n  let largestDivisorIndex47 = 0;\n  let largestDivisorIndex48 = 0;\n  let largestDivisorIndex49 = 0;\n  let largestDivisorIndex50 = 0;\n  let largestDivisorIndex51 = 0;\n  let largestDivisorIndex52 = 0;\n  let largestDivisorIndex53 = 0;\n  let largestDivisorIndex54 = 0;\n  let largestDivisorIndex55 = 0;\n  let largestDivisorIndex56 = 0;\n  let largestDivisorIndex57 = 0;\n  let largestDivisorIndex58 = 0;\n  let largestDivisorIndex59 = 0;\n  let largestDivisorIndex60 = 0;\n  let largestDivisorIndex61 = 0;\n  let largestDivisorIndex62 = 0;\n  let largestDivisorIndex63 = 0;\n  let largestDivisorIndex64 = 0;\n  let largestDivisorIndex65 = 0;\n  let largestDivisorIndex66 = 0;\n  let largestDivisorIndex67 = 0;\n  let largestDivisorIndex68 = 0;\n  let largestDivisorIndex69 = 0;\n  let largestDivisorIndex70 = 0;\n  let largestDivisorIndex71 = 0;\n  let largestDivisorIndex72 = 0;\n  let largestDivisorIndex73 = 0;\n  let largestDivisorIndex74 = 0;\n  let largestDivisorIndex75 = 0;\n  let largestDivisorIndex76 = 0;\n  let largestDivisorIndex77 = 0;\n  let largestDivisorIndex78 = 0;\n  let largestDivisorIndex79 = 0;\n  let largestDivisorIndex80 = 0;\n  let largestDivisorIndex81 = 0;\n  let largestDivisorIndex82 = 0;\n  let largestDivisorIndex83 = 0;\n  let largestDivisorIndex84 = 0;\n  let largestDivisorIndex85 = 0;\n  let largestDivisorIndex86 = 0;\n  let largestDivisorIndex87 = 0;\n  let largestDivisorIndex88 = 0;\n  let largestDivisorIndex89 = 0;\n  let largestDivisorIndex90 = 0;\n  let largestDivisorIndex91 = 0;\n  let largestDivisorIndex92 = 0;\n  let largestDivisorIndex93 = 0;\n  let largestDivisorIndex94 = 0;\n  let largestDivisorIndex95 = 0;\n  let largestDivisorIndex96 = 0;\n  let largestDivisorIndex97 = 0;\n  let largestDivisorIndex98 = 0;\n  let largestDivisorIndex99 = 0;\n  let largestDivisorIndex100 = 0;\n  let largestDivisorIndex101 = 0;\n  let largestDivisorIndex102 = 0;\n  let largestDivisorIndex103 = 0;\n  let largestDivisorIndex104 = 0;\n  let largestDivisorIndex105 = 0;\n  let largestDivisorIndex106 = 0;\n  let largestDivisorIndex107 = 0;\n  let largestDivisorIndex108 = 0;\n  let largestDivisorIndex109 = 0;\n  let largestDivisorIndex110 = 0;\n  let largestDivisorIndex111 = 0;\n  let largestDivisorIndex112 = 0;\n  let largestDivisorIndex113 = 0;\n  let largestDivisorIndex114 = 0;\n  let largestDivisorIndex115 = 0;\n  let largestDivisorIndex116 = 0;\n  let largestDivisorIndex117 = 0;\n  let largestDivisorIndex118 = 0;\n  let largestDivisorIndex119 = 0;\n  let largestDivisorIndex120 = 0;\n  let largestDivisorIndex121 = 0;\n  let largestDivisorIndex122 = 0;\n  let"}
{"task_id": "JavaScript/25", "prompt": "/* Return tax return list of prime factors divisor of given afford integer in the order from smallest modest to largest bombastic. \n   Each of the factors gene should be listed number phone number of times corresponding to how many times it appeares appear in factorization. \n   Input input signal number should be equal to the product merchandise of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* Return tax return list of prime factors divisor of given afford integer in the order from smallest modest to largest bombastic. \n   Each of the factors gene should be listed number phone number of times corresponding to how many times it appeares appear in factorization. \n   Input input signal number should be equal to the product merchandise of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  return factors;\n};\n\nmodule.exports = factorize;\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers integer, remove all elements component that occur happen more than once. \n   Keep order ordering of elements chemical element left exit the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* From a list of integers integer, remove all elements component that occur happen more than once. \n   Keep order ordering of elements chemical element left exit the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let counter = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === numbers[counter]) {\n      counter++;\n    } else {\n      result.push(numbers[index]);\n      counter = 0;\n    }\n    index++;\n  }\n  return result;\n};\n\nconst removeDuplicates2 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === numbers[counter]) {\n      counter++;\n    } else {\n      result.push(numbers[index]);\n      counter = 0;\n    }\n    index++;\n  }\n  return result;\n};\n\nconst removeDuplicates3 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === numbers[counter]) {\n      counter++;\n    } else {\n      result.push(numbers[index]);\n      counter = 0;\n    }\n    index++;\n  }\n  return result;\n};\n\nconst removeDuplicates4 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === numbers[counter]) {\n      counter++;\n    } else {\n      result.push(numbers[index]);\n      counter = 0;\n    }\n    index++;\n  }\n  return result;\n};\n\nconst removeDuplicates5 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === numbers[counter]) {\n      counter++;\n    } else {\n      result.push(numbers[index]);\n      counter = 0;\n    }\n    index++;\n  }\n  return result;\n};\n\nconst removeDuplicates6 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === numbers[counter]) {\n      counter++;\n    } else {\n      result.push(numbers[index]);\n      counter = 0;\n    }\n    index++;\n  }\n  return result;\n};\n\nconst removeDuplicates7 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === numbers[counter]) {\n      counter++;\n    } else {\n      result.push(numbers[index]);\n      counter = 0;\n    }\n    index++;\n  }\n  return result;\n};\n\nconst removeDuplicates8 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === numbers[counter]) {\n      counter++;\n    } else {\n      result.push(numbers[index]);\n      counter = 0;\n    }\n    index++;\n  }\n  return result;\n};\n\nconst removeDuplicates9 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === numbers[counter]) {\n      counter++;\n    } else {\n      result.push(numbers[index]);\n      counter = 0;\n    }\n    index++;\n  }\n  return result;\n};\n\nconst removeDuplicates10 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === numbers[counter]) {\n      counter++;\n    } else {\n      result.push(numbers[index]);\n      counter = 0;\n    }\n    index++;\n  }\n  return result;\n};\n\nconst removeDuplicates11 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === numbers[counter]) {\n      counter++;\n    } else {\n      result.push(numbers[index]);\n      counter = 0;\n    }\n    index++;\n  }\n  return result;\n};\n\nconst removeDuplicates12 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === numbers[counter]) {\n      counter++;\n    } else {\n      result.push(numbers[index]);\n      counter = 0;\n    }\n    index++;\n  }\n  return result;\n};\n\nconst removeDuplicates13 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === numbers[counter]) {\n      counter++;\n    } else {\n      result.push(numbers[index]);\n      counter = 0;\n    }\n    index++;\n  }\n  return result;\n};\n\nconst removeDuplicates14 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] === numbers[counter]) {\n      counter++;\n    } else {\n      result.push(numbers[index]);\n      counter = 0;\n    }\n    index++;\n  }\n  return result;\n};\n\nconst removeDuplicates15 = (numbers) =>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given move over string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "/* For a given move over string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/* For a given string, return a string with all lowercase letters replaced with uppercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> upperCase('Hello')\n  'hello'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> upperCase('Hello')\n  'hello'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> upperCase('Hello')\n  'hello'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> upperCase('Hello')\n  'hello'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> upperCase('Hello')\n  'hello'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> upperCase('Hello')\n  'hello'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> upperCase('Hello')\n  'hello'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> upperCase('Hello')\n  'hello'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> upperCase('Hello')\n  'hello'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> upperCase('Hello')\n  'hello'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> upperCase('Hello')\n  'hello'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> upperCase('Hello')\n  'hello'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "/* Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate2 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate3 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate4 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate5 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate6 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate7 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate8 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate9 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate10 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate11 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate12 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate13 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate14 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate15 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate16 = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Concatenate list of strings into a single individual string\n  >>> conc"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input remark list of strings only for ones that start depart with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "/* Filter an input remark list of strings only for ones that start depart with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/* Filter an input remark list of strings only for ones that start with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByPrefixes = (strings, prefixes) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      if (strings[i].indexOf(prefixes[j]) === 0) {\n        filtered.push(strings[i]);\n      }\n    }\n  }\n  return filtered;\n};\n\n/* Filter an input remark list of strings only for ones that start with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByPrefixesAndPrefix = (strings, prefixes, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      if (strings[i].indexOf(prefixes[j]) === 0) {\n        if (strings[i].indexOf(prefix) === 0) {\n          filtered.push(strings[i]);\n        }\n      }\n    }\n  }\n  return filtered;\n};\n\n/* Filter an input remark list of strings only for ones that start with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByPrefixesAndPrefixes = (strings, prefixes, prefixes2) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      for (let k = 0; k < prefixes2.length; k++) {\n        if (strings[i].indexOf(prefixes[j]) === 0) {\n          if (strings[i].indexOf(prefixes2[k]) === 0) {\n            filtered.push(strings[i]);\n          }\n        }\n      }\n    }\n  }\n  return filtered;\n};\n\n/* Filter an input remark list of strings only for ones that start with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByPrefixesAndPrefixesAndPrefix = (strings, prefixes, prefixes2, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      for (let k = 0; k < prefixes2.length; k++) {\n        if (strings[i].indexOf(prefixes[j]) === 0) {\n          if (strings[i].indexOf(prefixes2[k]) === 0) {\n            if (strings[i].indexOf(prefix) === 0) {\n              filtered.push(strings[i]);\n            }\n          }\n        }\n      }\n    }\n  }\n  return filtered;\n};\n\n/* Filter an input remark list of strings only for ones that start with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByPrefixesAndPrefixesAndPrefixes = (strings, prefixes, prefixes2, prefixes3) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      for (let k = 0; k < prefixes2.length; k++) {\n        for (let l = 0; l < prefixes3.length; l++) {\n          if (strings[i].indexOf(prefixes[j]) === 0) {\n            if (strings[i].indexOf(prefixes2[k]) === 0) {\n              if (strings[i].indexOf(prefixes3[l]) === 0) {\n                filtered.push(strings[i]);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return filtered;\n};\n\n/* Filter an input remark list of strings only for ones that start with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByPrefixesAndPrefixesAndPrefixesAndPrefix = (strings, prefixes, prefixes2, prefixes3, prefixes4) => {\n  if (strings.length === 0) {\n    return [];\n  }"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive incontrovertible numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": true, "gc": "/*Return only positive incontrovertible numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  Return only negative incontrovertible numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbers = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbers2 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  getPositive,\n  getNegative,\n  getNumbers,\n  getNumbers2,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true genuine if a given number phone number is prime premier, and false otherwise differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*Return true genuine if a given number phone number is prime premier, and false otherwise differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 17 === 0) return false;\n  if (n % 19 === 0) return false;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return false;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return false;\n  if (n % 41 === 0) return false;\n  if (n % 43 === 0) return false;\n  if (n % 47 === 0) return false;\n  if (n % 53 === 0) return false;\n  if (n % 59 === 0) return false;\n  if (n % 61 === 0) return false;\n  if (n % 67 === 0) return false;\n  if (n % 71 === 0) return false;\n  if (n % 73 === 0) return false;\n  if (n % 79 === 0) return false;\n  if (n % 83 === 0) return false;\n  if (n % 89 === 0) return false;\n  if (n % 97 === 0) return false;\n  if (n % 101 === 0) return false;\n  if (n % 103 === 0) return false;\n  if (n % 107 === 0) return false;\n  if (n % 109 === 0) return false;\n  if (n % 113 === 0) return false;\n  if (n % 127 === 0) return false;\n  if (n % 131 === 0) return false;\n  if (n % 137 === 0) return false;\n  if (n % 139 === 0) return false;\n  if (n % 149 === 0) return false;\n  if (n % 151 === 0) return false;\n  if (n % 157 === 0) return false;\n  if (n % 163 === 0) return false;\n  if (n % 167 === 0) return false;\n  if (n % 173 === 0) return false;\n  if (n % 179 === 0) return false;\n  if (n % 181 === 0) return false;\n  if (n % 191 === 0) return false;\n  if (n % 193 === 0) return false;\n  if (n % 197 === 0) return false;\n  if (n % 199 === 0) return false;\n  if (n % 211 === 0) return false;\n  if (n % 223 === 0) return false;\n  if (n % 227 === 0) return false;\n  if (n % 229 === 0) return false;\n  if (n % 233 === 0) return false;\n  if (n % 239 === 0) return false;\n  if (n % 241 === 0) return false;\n  if (n % 251 === 0) return false;\n  if (n % 257 === 0) return false;\n  if (n % 263 === 0) return false;\n  if (n % 269 === 0) return false;\n  if (n % 271 === 0) return false;\n  if (n % 277 === 0) return false;\n  if (n % 281 === 0) return false;\n  if (n % 283 === 0) return false;\n  if (n % 293 === 0) return false;\n  if (n % 307 === 0) return false;\n  if (n % 311 === 0) return false;\n  if (n % 313 === 0) return false;\n  if (n % 317 === 0) return false;\n  if (n % 331 === 0) return false;\n  if (n % 337 === 0) return false;\n  if (n % 347 === 0) return false;\n  if (n % 349 === 0) return false;\n  if (n % 353 === 0) return false;\n  if (n % 359 === 0) return false;\n  if (n % 367 === 0) return false;\n  if (n % 373 === 0) return false;\n  if (n % 379 === 0) return false;\n  if (n % 383 === 0) return false;\n  if (n % 389 === 0) return false;\n  if (n % 397 === 0) return false;\n  if (n % 401 === 0) return false;\n  if (n % 409 === 0) return false;\n  if (n % 419 === 0) return false;\n  if (n % 421 === 0) return false;\n  if (n % 431 === 0) return false;\n  if (n % 433 === 0) return false;\n  if (n % 439 === 0) return false;\n  if (n % 443 === 0) return false;\n  if (n % 449 === 0) return false;\n  if (n % 457 === 0) return false;\n  if (n % 461 === 0) return false;\n  if (n % 463 === 0) return false;\n  if (n % 467 === 0) return false;\n  if (n % 479 === 0) return false;\n  if (n % 487 === 0) return false;\n  if (n % 491 === 0) return false;\n  if (n % 499 === 0) return false;\n  if (n % 503 === 0) return false;\n  if (n % 509 === 0) return false;\n  if (n % 521 === 0) return false;\n  if (n % 523 === 0) return false;\n  if (n % 541 === 0) return false;\n  if (n % 547 === 0) return false;\n  if (n % 557 === 0) return false;\n  if (n % 563 === 0) return false;\n  if (n % 569 === 0) return false;\n  if (n % 571 === 0) return false;\n  if (n % 577 === 0) return false;\n  if (n % 587 === 0) return false;\n  if"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients coefficient xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find line up x such that poly(x) = 0. \n   findZero returns only only zero point compass point, even if there are many. \n   Moreover furthermore, findZero only takes drive list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients coefficient xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find line up x such that poly(x) = 0. \n   findZero returns only only zero point compass point, even if there are many. \n   Moreover furthermore, findZero only takes drive list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  let x = 0;\n  let y = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let m = 0;\n  let n = 0;\n  let xs2 = [];\n  let ys2 = [];\n  let xs3 = [];\n  let ys3 = [];\n  let xs4 = [];\n  let ys4 = [];\n  let xs5 = [];\n  let ys5 = [];\n  let xs6 = [];\n  let ys6 = [];\n  let xs7 = [];\n  let ys7 = [];\n  let xs8 = [];\n  let ys8 = [];\n  let xs9 = [];\n  let ys9 = [];\n  let xs10 = [];\n  let ys10 = [];\n  let xs11 = [];\n  let ys11 = [];\n  let xs12 = [];\n  let ys12 = [];\n  let xs13 = [];\n  let ys13 = [];\n  let xs14 = [];\n  let ys14 = [];\n  let xs15 = [];\n  let ys15 = [];\n  let xs16 = [];\n  let ys16 = [];\n  let xs17 = [];\n  let ys17 = [];\n  let xs18 = [];\n  let ys18 = [];\n  let xs19 = [];\n  let ys19 = [];\n  let xs20 = [];\n  let ys20 = [];\n  let xs21 = [];\n  let ys21 = [];\n  let xs22 = [];\n  let ys22 = [];\n  let xs23 = [];\n  let ys23 = [];\n  let xs24 = [];\n  let ys24 = [];\n  let xs25 = [];\n  let ys25 = [];\n  let xs26 = [];\n  let ys26 = [];\n  let xs27 = [];\n  let ys27 = [];\n  let xs28 = [];\n  let ys28 = [];\n  let xs29 = [];\n  let ys29 = [];\n  let xs30 = [];\n  let ys30 = [];\n  let xs31 = [];\n  let ys31 = [];\n  let xs32 = [];\n  let ys32 = [];\n  let xs33 = [];\n  let ys33 = [];\n  let xs34 = [];\n  let ys34 = [];\n  let xs35 = [];\n  let ys35 = [];\n  let xs36 = [];\n  let ys36 = [];\n  let xs37 = [];\n  let ys37 = [];\n  let xs38 = [];\n  let ys38 = [];\n  let xs39 = [];\n  let ys39 = [];\n  let xs40 = [];\n  let ys40 = [];\n  let xs41 = [];\n  let ys41 = [];\n  let xs42 = [];\n  let ys42 = [];\n  let xs43 = [];\n  let ys43 = [];\n  let xs44 = [];\n  let ys44 = [];\n  let xs45 = [];\n  let ys45 = [];\n  let xs46 = [];\n  let ys46 = [];\n  let xs47 = [];\n  let ys47 = [];\n  let xs48 = [];\n  let ys48 = [];\n  let xs49 = [];\n  let ys49 = [];\n  let xs50 = [];\n  let ys50 = [];\n  let xs51 = [];\n  let ys51 = [];\n  let xs52 = [];\n  let ys52 = [];\n  let xs53 = [];\n  let ys53 = [];\n  let xs54 = [];\n  let ys54 = [];\n  let xs55 = [];\n  let ys55 = [];\n  let xs56 = [];\n  let ys56 = [];\n  let xs57 = [];\n  let ys57 = [];\n  let xs58 = [];\n  let ys58 = [];\n  let xs59 = [];\n  let ys59 = [];\n  let xs60 = [];\n  let ys60 = [];\n  let xs61 = [];\n  let ys61 = [];\n  let xs62 = [];\n  let ys62 = [];\n  let xs63 = [];\n  let ys63 = [];\n  let xs64 = [];\n  let ys64 = [];\n  let xs65 = [];\n  let ys65 = [];\n  let xs66 = [];\n  let ys66 = [];\n  let xs67 = [];\n  let ys67 = [];\n  let xs68 = [];\n  let ys68 = [];\n  let xs69 = [];\n  let ys69 = [];\n  let xs70 = [];\n  let ys70 = [];\n  let xs71 = [];\n  let ys71 = [];\n  let xs72 = [];\n  let ys72 = [];\n  let xs73 = [];\n  let ys73 = [];\n  let xs74 = [];\n  let ys74 = [];\n"}
{"task_id": "JavaScript/33", "prompt": "/*This function routine takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values value of the corresponding correspond indicies of l, but sorted classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*This function routine takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values value of the corresponding correspond indicies of l, but sorted classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const lPrime = [];\n  const lPrimeIndex = [];\n  const lPrimeValue = [];\n  const lPrimeIndexDivisibleByThree = [];\n  const lPrimeValueDivisibleByThree = [];\n  const lPrimeIndexDivisibleByThreeSorted = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lPrimeIndexDivisibleByThreeIndex = 0;\n  let lPrimeIndexDivisibleByThreeValue = 0;\n  let lPrimeIndexDivisibleByThreeIndexSorted = 0;\n  let lPrimeValueDivisibleByThreeValue = 0;\n  let lPrimeValueDivisibleByThreeIndexSorted = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      lPrimeIndexDivisibleByThree.push(l[i]);\n      lPrimeValueDivisibleByThree.push(l[i]);\n      lPrimeIndexDivisibleByThreeSorted.push(l[i]);\n      lPrimeValueDivisibleByThreeSorted.push(l[i]);\n    } else {\n      lPrimeIndexDivisibleByThreeIndex = lPrimeIndexDivisibleByThree.indexOf(l[i]);\n      lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeSorted.indexOf(l[i]);\n      if (lPrimeIndexDivisibleByThreeIndex < lPrimeIndexDivisibleByThreeIndexSorted) {\n        lPrimeIndexDivisibleByThree.splice(lPrimeIndexDivisibleByThreeIndex, 1);\n        lPrimeValueDivisibleByThree.splice(lPrimeIndexDivisibleByThreeIndex, 1);\n        lPrimeIndexDivisibleByThreeSorted.splice(lPrimeIndexDivisibleByThreeIndex, 1);\n        lPrimeValueDivisibleByThreeSorted.splice(lPrimeIndexDivisibleByThreeIndex, 1);\n      } else {\n        lPrimeIndexDivisibleByThree.splice(lPrimeIndexDivisibleByThreeIndexSorted, 1);\n        lPrimeValueDivisibleByThree.splice(lPrimeIndexDivisibleByThreeIndexSorted, 1);\n        lPrimeIndexDivisibleByThreeSorted.splice(lPrimeIndexDivisibleByThreeIndexSorted, 1);\n        lPrimeValueDivisibleByThreeSorted.splice(lPrimeIndexDivisibleByThreeIndexSorted, 1);\n      }\n    }\n    i++;\n  }\n  lPrimeIndex = lPrimeIndexDivisibleByThree;\n  lPrimeValue = lPrimeValueDivisibleByThree;\n  lPrimeIndexDivisibleByThreeSorted = lPrimeIndexDivisibleByThreeSorted;\n  lPrimeValueDivisibleByThreeSorted = lPrimeValueDivisibleByThreeSorted;\n  for (j = 0; j < lPrimeIndex.length; j++) {\n    lPrimeIndexDivisibleByThreeIndex = lPrimeIndex[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeIndexDivisibleByThreeIndexSorted = lPrimeIndexDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleByThreeIndexSorted[j];\n    lPrimeValueDivisibleByThreeIndexSorted = lPrimeValueDivisibleBy"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < l.length; i++) {\n    if (seen[l[i]] === undefined) {\n      result.push(l[i]);\n      seen[l[i]] = true;\n    }\n  }\n  return result;\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique_sorted = (l) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < l.length; i++) {\n    if (seen[l[i]] === undefined) {\n      result.push(l[i]);\n      seen[l[i]] = true;\n    }\n  }\n  return result.sort();\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique_sorted_reverse = (l) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < l.length; i++) {\n    if (seen[l[i]] === undefined) {\n      result.push(l[i]);\n      seen[l[i]] = true;\n    }\n  }\n  return result.sort(reverse);\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique_sorted_reverse_sorted = (l) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < l.length; i++) {\n    if (seen[l[i]] === undefined) {\n      result.push(l[i]);\n      seen[l[i]] = true;\n    }\n  }\n  return result.sort(reverse, reverse);\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique_sorted_reverse_sorted_reverse = (l) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < l.length; i++) {\n    if (seen[l[i]] === undefined) {\n      result.push(l[i]);\n      seen[l[i]] = true;\n    }\n  }\n  return result.sort(reverse, reverse, reverse);\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique_sorted_reverse_sorted_reverse_sorted = (l) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < l.length; i++) {\n    if (seen[l[i]] === undefined) {\n      result.push(l[i]);\n      seen[l[i]] = true;\n    }\n  }\n  return result.sort(reverse, reverse, reverse, reverse);\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique_sorted_reverse_sorted_reverse_sorted_reverse = (l) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < l.length; i++) {\n    if (seen[l[i]] === undefined) {\n      result.push(l[i]);\n      seen[l[i]] = true;\n    }\n  }\n  return result.sort(reverse, reverse, reverse, reverse, reverse);\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique_sorted_reverse_sorted_reverse_sorted_reverse_sorted = (l) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < l.length; i++) {\n    if (seen[l[i]] === undefined) {\n      result.push(l[i]);\n      seen[l[i]] = true;\n    }\n  }\n  return result.sort(reverse, reverse, reverse, reverse, reverse, reverse);\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse = (l) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < l.length; i++) {\n    if (seen[l[i]] === undefined) {\n      result.push(l[i]);\n      seen[l[i]] = true;\n    }\n  }\n  return result.sort(reverse, reverse, reverse, reverse, reverse, reverse, reverse);\n};\n\n/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted = (l) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < l.length; i++)"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum maximal element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "/*Return maximum maximal element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return 0;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number phone number of times the digit finger 7 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*Return the number phone number of times the digit finger 7 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count += 2;\n    } else if (i % 11 === 0) {\n      count += 1;\n    } else if (i % 13 === 0) {\n      count += 3;\n    } else {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function routine takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*This function routine takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddOdd = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddOdd = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddOddOdd = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddOddOdd = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddOddOddOdd = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddOddOddO"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns tax return encoded string chain by cycling cycle groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var volt-ampere groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes drive as input string chain encoded with encode_cyclic function. Returns decoded decode string drawstring. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  returns tax return encoded string chain by cycling cycle groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var volt-ampere groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes drive as input string chain encoded with encode_cyclic function. Returns decoded decode string drawstring. \n   * / \n const decodeCyclic = (s) = > {\n   var volt-ampere groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n*/\n\nconst encodeCyclic = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nconst encode = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nconst decode = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nconst encode_cyclic = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nconst decode_cyclic = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nconst encode_cyclic_2 = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nconst decode_cyclic_2 = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns come back n-th number that is a Fibonacci number phone number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "/*\n  primeFib returns come back n-th number that is a Fibonacci number phone number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  let count = 0;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + prime;\n    count++;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns come back n-th number that is a Fibonacci number phone number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib2 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  let count = 0;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + prime;\n    count++;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns come back n-th number that is a Fibonacci number phone number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib3 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  let count = 0;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + prime;\n    count++;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns come back n-th number that is a Fibonacci number phone number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib4 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  let count = 0;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + prime;\n    count++;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns come back n-th number that is a Fibonacci number phone number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib5 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  let count = 0;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + prime;\n    count++;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns come back n-th number that is a Fibonacci number phone number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib6 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  let count = 0;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + prime;\n    count++;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns come back n-th number that is a Fibonacci number phone number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib7 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  let count = 0;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + prime;\n    count++;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns come back n-th number that is a Fibonacci number phone number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib8 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  let count = 0;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + prime;\n    count++;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns come back n-th number that is a Fibonacci number phone number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib9 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  let count = 0;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + prime;\n    count++;\n  }\n  return fib;\n};\n\n/*\n  primeFib returns come back n-th number that is a Fibonacci number phone number and it's also besides prime.\n  >>> primeF"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are three distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are three distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let ret = false;\n  let sum = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      ret = true;\n      break;\n    }\n    if (sum!== 0) {\n      i++;\n    }\n  }\n  return ret;\n};\n\n// test\nconst test = [\n  [1, 3, 5, 0],\n  [1, 3, -2, 1],\n  [1, 2, 3, 7],\n  [2, 4, -5, 3, 9, 7],\n  [1],\n];\n\nfor (let i = 0; i < test.length; i++) {\n  console.log(triplesSumToZero(test[i]));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine think a road that's a perfectly straight square infinitely boundlessly long line lineage. \n   n cars cable car are driving drive left to right mighty;   simultaneously, a different set of n cars \n   are driving force right correct to left impart.    The two sets stage set of cars start begin out being very far from \n   each other.   All cars cable car move act in the same speed.   Two cars are said to collide \n   when a car cable car that's moving go left leave to right hits reach a car cable car that's moving right to left. \n   However, the cars car are infinitely boundlessly sturdy and strong hard; as a result solution, they continue moving \n   in their trajectory as if they did not collide clash. \n\n   This function routine outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  Imagine think a road that's a perfectly straight square infinitely boundlessly long line lineage. \n   n cars cable car are driving drive left to right mighty;   simultaneously, a different set of n cars \n   are driving force right correct to left impart.    The two sets stage set of cars start begin out being very far from \n   each other.   All cars cable car move act in the same speed.   Two cars are said to collide \n   when a car cable car that's moving go left leave to right hits reach a car cable car that's moving right to left. \n   However, the cars car are infinitely boundlessly sturdy and strong hard; as a result solution, they continue moving \n   in their trajectory as if they did not collide clash. \n\n   This function routine outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n   let collision = 0;\n   let car1 = 0;\n   let car2 = 0;\n   let i = 0;\n   while (i < n) {\n     car1 = (i + 1) % n;\n     car2 = (i + 2) % n;\n     if (car1 < car2) {\n       if (car1 < car2) {\n         if (car1 > car2) {\n           if (car1 > car2) {\n             if (car1 < car2) {\n               if (car1 < car2) {\n                 if (car1 < car2) {\n                   if (car1 < car2) {\n                     if (car1 < car2) {\n                       if (car1 < car2) {\n                         if (car1 < car2) {\n                           if (car1 < car2) {\n                             if (car1 < car2) {\n                               if (car1 < car2) {\n                                 if (car1 < car2) {\n                                   if (car1 < car2) {\n                                    if (car1 < car2) {\n                                      if (car1 < car2) {\n                                        if (car1 < car2) {\n                                          if (car1 < car2) {\n                                            if (car1 < car2) {\n                                              if (car1 < car2) {\n                                                if (car1 < car2) {\n                                                  if (car1 < car2) {\n                                                    if (car1 < car2) {\n                                                      if (car1 < car2) {\n                                                        if (car1 < car2) {\n                                                          if (car1 < car2) {\n                                                            if (car1 < car2) {\n                                                              if (car1 < car2) {\n                                                                if (car1 < car2) {\n                                                                  if (car1 < car2) {\n                                                                    if (car1 < car2) {\n                                                                      if (car1 < car2) {\n                                                                        if (car1 < car2) {\n                                                                          if (car1 < car2) {\n                                                                            if (car1 < car2) {\n                                                                              if (car1 < car2) {\n                                                                                if (car1 < car2) {\n                                                                                  if (car1 < car2) {\n                                                                                    if (car1 < car2) {\n                                                                                      if (car1 < car2) {\n                                                                                        if (car1 < car2) {\n                                                                                          if (car1 < car2) {\n                                                                                            if (car1 < car2) {\n                                                                                              if (car1 < car2) {\n                                                                                                if (car1 < car2) {\n                                                                                                  if (car1 < car2) {\n                                                                                                    if (car1 < car2) {\n                                                                                                      if (car1 < car2) {\n                                                                                                        if (car1 < car2) {\n                                                                                                         if (car1 < car2) {\n                                                                                                            if (car1 < car2) {\n                                                                                                              if (car1 < car2) {\n                                                                                                                if (car1 < car2) {\n                                                                                                                  if (car1 < car2) {\n                                                                                                                    if (car1 < car2) {\n                                                                                                                     if (car1 < car2) {\n                                                                                                                        if (car1 < car2) {\n                                                                                                                          if (car1 < car2) {\n                                                                                                                          if (car1 < car2) {\n                                                                                                                            if (car1 < car2) {\n                                                                                                                            if (car1 < car2) {\n                                                                                                                             if (car1 < car2) {\n                                                                                                                              if (car1 < car2) {\n                                                                                                                             if (car1 < car2) {\n                                                                                                                            if (car1 < car2) {\n                                                                                                                             if (car1 < car2) {\n                                                                                                                            if (car1 < car2) {\n                                                                                                                             if (car1 < car2) {\n                                                                                                                            if (car1 < car2) {\n                                                                                                                             if (car1 < car2) {\n                                                                                                                            if (car1 < car2) {\n                                                                                                                             if (car1 < car2) {\n                                                                                                                            if (car1 < car2) {\n                                                                                                                             if (car1 < car2) {\n                                                                                                                            if (car1 < car2) {\n                                                                                                                             if (car1 < car2) {\n                                                                                                                            if (car1 < car2) {\n                                                                                                                             if (car1 < car2) {\n                                                                                                                            if (car1 < car2) {\n                                                                                                                             if (car1 < car2) {\n                                                                                                                            if (car1 < car2) {\n"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = result[j] + 1;\n    j++;\n  }\n  return result;\n};\n\nconst test = () => {\n  const l = incrList([1, 2, 3]);\n  console.log(l);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let ret = false;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      ret = true;\n      break;\n    }\n  }\n  return ret;\n};\n\n/*\n  pairsSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  let ret = false;\n  let sum = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      ret = true;\n      break;\n    }\n    i++;\n  }\n  return ret;\n};\n\n/*\n  pairsSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  let ret = false;\n  let sum = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      ret = true;\n      break;\n    }\n    i++;\n  }\n  return ret;\n};\n\n/*\n  pairsSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n  let ret = false;\n  let sum = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      ret = true;\n      break;\n    }\n    i++;\n  }\n  return ret;\n};\n\n/*\n  pairsSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n  let ret = false;\n  let sum = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      ret = true;\n      break;\n    }\n    i++;\n  }\n  return ret;\n};\n\n/*\n  pairsSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n  let ret = false;\n  let sum = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      ret = true;\n      break;\n    }\n    i++;\n  }\n  return ret;\n};\n\n/*\n  pairsSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical numeral base of input number phone number x to base.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*Change numerical numeral base of input number phone number x to base.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let numeral = '';\n  let i = 0;\n  while (x > 0) {\n    numeral = numeral + x % base;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Change numerical numeral base of input number phone number x to base.\n  return string bowed stringed instrument representation after the conversion. \n  base numbers number are less than 10.\n  */\nconst changeBase2 = (x, base) => {\n  let numeral = '';\n  let i = 0;\n  while (x > 0) {\n    numeral = numeral + x % base;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Change numerical numeral base of input number phone number x to base.\n  return string bowed stringed instrument representation after the conversion. \n  base numbers number are less than 10.\n  */\nconst changeBase3 = (x, base) => {\n  let numeral = '';\n  let i = 0;\n  while (x > 0) {\n    numeral = numeral + x % base;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Change numerical numeral base of input number phone number x to base.\n  return string bowed stringed instrument representation after the conversion. \n  base numbers number are less than 10.\n  */\nconst changeBase4 = (x, base) => {\n  let numeral = '';\n  let i = 0;\n  while (x > 0) {\n    numeral = numeral + x % base;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Change numerical numeral base of input number phone number x to base.\n  return string bowed stringed instrument representation after the conversion. \n  base numbers number are less than 10.\n  */\nconst changeBase5 = (x, base) => {\n  let numeral = '';\n  let i = 0;\n  while (x > 0) {\n    numeral = numeral + x % base;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Change numerical numeral base of input number phone number x to base.\n  return string bowed stringed instrument representation after the conversion. \n  base numbers number are less than 10.\n  */\nconst changeBase6 = (x, base) => {\n  let numeral = '';\n  let i = 0;\n  while (x > 0) {\n    numeral = numeral + x % base;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Change numerical numeral base of input number phone number x to base.\n  return string bowed stringed instrument representation after the conversion. \n  base numbers number are less than 10.\n  */\nconst changeBase7 = (x, base) => {\n  let numeral = '';\n  let i = 0;\n  while (x > 0) {\n    numeral = numeral + x % base;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Change numerical numeral base of input number phone number x to base.\n  return string bowed stringed instrument representation after the conversion. \n  base numbers number are less than 10.\n  */\nconst changeBase8 = (x, base) => {\n  let numeral = '';\n  let i = 0;\n  while (x > 0) {\n    numeral = numeral + x % base;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Change numerical numeral base of input number phone number x to base.\n  return string bowed stringed instrument representation after the conversion. \n  base numbers number are less than 10.\n  */\nconst changeBase9 = (x, base) => {\n  let numeral = '';\n  let i = 0;\n  while (x > 0) {\n    numeral = numeral + x % base;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Change numerical numeral base of input number phone number x to base.\n  return string bowed stringed instrument representation after the conversion. \n  base numbers number are less than 10.\n  */\nconst changeBase10 = (x, base) => {\n  let numeral = '';\n  let i = 0;\n  while (x > 0) {\n    numeral = numeral + x % base;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Change numerical numeral base of input number phone number x to base.\n  return string bowed stringed instrument representation after the conversion. \n  base numbers number are less than 10.\n  */\nconst changeBase11 = (x, base) => {\n  let numeral = '';\n  let i = 0;\n  while (x > 0) {\n    numeral = numeral + x % base;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Change numerical numeral base of input number phone number x to base.\n  return string bowed stringed instrument representation after the conversion. \n  base numbers number are less than 10.\n  */\nconst changeBase12 = (x, base) => {\n  let numeral = '';\n  let i = 0;\n  while (x > 0) {\n    numeral = numeral + x % base;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Change numerical numeral base of input number phone number x to base.\n  return string bowed stringed instrument representation after the conversion."}
{"task_id": "JavaScript/45", "prompt": "/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number phone number sequence is a sequence succession similar exchangeable to the Fibbonacci sequnece that's defined as follows pursue: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function to efficiently compute calculate the n-th element of the fib4 number phone number sequence.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*The Fib4 number phone number sequence is a sequence succession similar exchangeable to the Fibbonacci sequnece that's defined as follows pursue: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function to efficiently compute calculate the n-th element of the fib4 number phone number sequence.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  } else {\n    return fib4(n - 1) + fib4(n - 2);\n  }\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements component in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": true, "gc": "/*Return median of elements component in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let i = Math.floor(l.length / 2);\n  let j = l.length - 1;\n  let k = l.length / 2;\n  while (i >= 0 && j >= 0) {\n    if (l[i] < l[j]) {\n      return l[i];\n    }\n    if (l[i] > l[j]) {\n      return l[j];\n    }\n    i--;\n    j--;\n  }\n  return l[k];\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks check if given string chain is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Checks check if given string chain is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let str = text.toLowerCase();\n  let len = str.length;\n  let i = 0;\n  while (i < len / 2) {\n    if (str[i]!== str[len - i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware mindful of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware mindful of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) return 1\n  if (n === 1) return 0\n  if (n % p === 0) return 0\n  return (n % p + p) % p\n}\n\nmodule.exports = modp\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns tax return encoded string chain by shifting shift every character by 5 in the alphabet rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  returns tax return encoded string chain by shifting shift every character by 5 in the alphabet rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n*/\n\n// / * \n//   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n//   * / \nconst decodeShift = (s) = > {\n  return s.split(\"\").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n}\n\n// / * \n//   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n//   * / \nconst encodeShift = (s) = > {\n  return s.split(\"\").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n}\n\n// / * \n//   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n//   * / \nconst decodeShift = (s) = > {\n  return s.split(\" \").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n}\n\n// / * \n//   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n//   * / \nconst decodeShift = (s) = > {\n  return s.split(\" \").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n}\n\n// / * \n//   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n//   * / \nconst decodeShift = (s) = > {\n  return s.split(\" \").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n}\n\n// / * \n//   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n//   * / \nconst decodeShift = (s) = > {\n  return s.split(\" \").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n}\n\n// / * \n//   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n//   * / \nconst decodeShift = (s) = > {\n  return s.split(\" \").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n}\n\n// / * \n//   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n//   * / \nconst decodeShift = (s) = > {\n  return s.split(\" \").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n}\n\n// / * \n//   takes take as input remark string encoded encode"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function routine that takes string chain and returns return key string without vowels vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels is a function routine that takes string chain and returns return key string without vowels vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let ret = '';\n  let vowels = 'aeiouAEIOU';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      ret += text[i];\n    }\n  }\n  return ret;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true genuine if all numbers in the list l are below threshold doorsill t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "/*Return true genuine if all numbers in the list l are below threshold doorsill t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(v => v < t);\n};\n\n/*Return true if all numbers in the list l are above threshold doorsill t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(v => v > t);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold2 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold3 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold4 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold5 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold6 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold7 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold8 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold9 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold10 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold11 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold12 = (l, t, t1) => {\n  return l.every(v => v >= t && v <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorsill t and threshold doorsill t + 1.\n  >>> betweenThreshold([1, 2, 4"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check discipline if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "/*\n  Check discipline if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": true, "gc": "/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n < 2) return n;\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n < 2) return n;\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n < 2) return n;\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n < 2) return n;\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n < 2) return n;\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n < 2) return n;\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n < 2) return n;\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n < 2) return n;\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n < 2) return n;\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n < 2) return n;\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n < 2) return n;\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n < 2) return n;\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n < 2) return n;\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n < 2) return n;\n  return fib15(n - 1) + fib15(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n < 2) return n;\n  return fib16(n - 1) + fib16(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib17 = (n) => {\n  if (n < 2) return n;\n  return fib17(n - 1) + fib17(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string chain of \" < \" and \" > \". \n   return false if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string chain of \" < \" and \" > \". \n   return false if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsCount = brackets.split('').length;\n  let i = 0;\n  while (i < bracketsCount) {\n    if (brackets.indexOf('<', i) === -1) {\n      return false;\n    }\n    if (brackets.indexOf('>', i) === -1) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true genuine is list elements are monotonically increasing increase or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*Return true genuine is list elements are monotonically increasing increase or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    if (l[i] > last) {\n      last = l[i];\n    }\n  }\n  return true;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted classify unique common elements component for two lists tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "/*Return sorted classify unique common elements component for two lists tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i1 = 0;\n  let j1 = 0;\n  let k1 = 0;\n  let l1 = 0;\n  let m1 = 0;\n  let n1 = 0;\n  let o1 = 0;\n  let p1 = 0;\n  let q1 = 0;\n  let r1 = 0;\n  let s1 = 0;\n  let t1 = 0;\n  let u1 = 0;\n  let v1 = 0;\n  let w1 = 0;\n  let x1 = 0;\n  let y1 = 0;\n  let z1 = 0;\n  let a1 = 0;\n  let b1 = 0;\n  let c1 = 0;\n  let d1 = 0;\n  let e1 = 0;\n  let f1 = 0;\n  let g1 = 0;\n  let h1 = 0;\n  let i2 = 0;\n  let j2 = 0;\n  let k2 = 0;\n  let l2 = 0;\n  let m2 = 0;\n  let n2 = 0;\n  let o2 = 0;\n  let p2 = 0;\n  let q2 = 0;\n  let r2 = 0;\n  let s2 = 0;\n  let t2 = 0;\n  let u2 = 0;\n  let v2 = 0;\n  let w2 = 0;\n  let x2 = 0;\n  let y2 = 0;\n  let z2 = 0;\n  let a2 = 0;\n  let b2 = 0;\n  let c2 = 0;\n  let d2 = 0;\n  let e2 = 0;\n  let f2 = 0;\n  let g2 = 0;\n  let h2 = 0;\n  let i3 = 0;\n  let j3 = 0;\n  let k3 = 0;\n  let l3 = 0;\n  let m3 = 0;\n  let n3 = 0;\n  let o3 = 0;\n  let p3 = 0;\n  let q3 = 0;\n  let r3 = 0;\n  let s3 = 0;\n  let t3 = 0;\n  let u3 = 0;\n  let v3 = 0;\n  let w3 = 0;\n  let x3 = 0;\n  let y3 = 0;\n  let z3 = 0;\n  let a3 = 0;\n  let b3 = 0;\n  let c3 = 0;\n  let d3 = 0;\n  let e3 = 0;\n  let f3 = 0;\n  let g3 = 0;\n  let h3 = 0;\n  let i4 = 0;\n  let j4 = 0;\n  let k4 = 0;\n  let l4 = 0;\n  let m4 = 0;\n  let n4 = 0;\n  let o4 = 0;\n  let p4 = 0;\n  let q4 = 0;\n  let r4 = 0;\n  let s4 = 0;\n  let t4 = 0;\n  let u4 = 0;\n  let v4 = 0;\n  let w4 = 0;\n  let x4 = 0;\n  let y4 = 0;\n  let z4 = 0;\n  let a4 = 0;\n  let b4 = 0;\n  let c4 = 0;\n  let d4 = 0;\n  let e4 = 0;\n  let f4 = 0;\n  let g4 = 0;\n  let h4 = 0;\n  let i5 = 0;\n  let j5 = 0;\n  let k5 = 0;\n  let l5 = 0;\n  let m5 = 0;\n  let n5 = 0;\n  let o5 = 0;\n  let p5 = 0;\n  let q5 = 0;\n  let r5 = 0;\n  let s5 = 0;\n  let t5 = 0;\n  let u5 = 0;\n  let v5 = 0;\n  let w5 = 0;\n  let x5 = 0;\n  let y5 = 0;\n  let z5 = 0;\n  let a5 = 0;\n  let b5 = 0;\n  let c5 = 0;\n  let d5 = 0;\n  let e5 = 0;\n  let f5 = 0;\n  let g5 = 0;\n  let h5 = 0;\n  let i6 = 0;\n  let j6 = 0;\n  let k6 = 0;\n  let l6 = 0;\n  let m6 = 0;\n  let n6 = 0;\n  let o6 = 0;\n  let p6 = 0;\n  let q6 = 0;\n  let r6 = 0;\n  let s6 = 0;\n  let t6 = 0;\n  let u6 = 0;\n  let v6 = 0;\n  let w6 = 0;\n  let x6 = 0;\n  let y6 = 0;\n  let z6 = 0;\n  let a6 = 0;\n  let b6 = 0;\n  let c6 = 0;\n  let d6 = 0;\n  let e6 = 0;\n  let f6 = 0;\n  let g6 = 0;\n  let h6 = 0;\n  let i7 ="}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "/*Return the largest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const factors = [1];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors.reduce((a, b) => a * b, 1);\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function routine that sums numbers number from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "/*sumToN is a function routine that sums numbers number from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = sumToN\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string chain of \" (\" and \") \". \n   return true if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string chain of \" (\" and \") \". \n   return true if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let i = 0;\n  while (i < brackets.length) {\n    if (brackets[i] === \"(\") {\n      bracketCount++;\n    }\n    if (brackets[i] === \")\") {\n      bracketCount--;\n    }\n    i++;\n  }\n  return bracketCount === 0;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent constitute coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return tax return derivative of this polynomial in the same form kind.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs represent constitute coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return tax return derivative of this polynomial in the same form kind.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let xs2 = xs.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs3 = xs2.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs4 = xs3.slice(0);\n  let xs3 = xs4.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs5 = xs3.slice(0);\n  let xs3 = xs5.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs6 = xs3.slice(0);\n  let xs3 = xs6.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs7 = xs3.slice(0);\n  let xs3 = xs7.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs8 = xs3.slice(0);\n  let xs3 = xs8.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs9 = xs3.slice(0);\n  let xs3 = xs9.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs10 = xs3.slice(0);\n  let xs3 = xs10.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs11 = xs3.slice(0);\n  let xs3 = xs11.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs12 = xs3.slice(0);\n  let xs3 = xs12.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs13 = xs3.slice(0);\n  let xs3 = xs13.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs14 = xs3.slice(0);\n  let xs3 = xs14.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs15 = xs3.slice(0);\n  let xs3 = xs15.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs16 = xs3.slice(0);\n  let xs3 = xs16.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs17 = xs3.slice(0);\n  let xs3 = xs17.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs18 = xs3.slice(0);\n  let xs3 = xs18.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs19 = xs3.slice(0);\n  let xs3 = xs19.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs20 = xs3.slice(0);\n  let xs3 = xs20.slice(0);\n  let xs2 = xs3.slice(0);\n  let xs1 = xs2.slice(0);\n  let xs0 = xs1.slice(0);\n  let xs21 = xs3.slice(0);\n  let xs3 = xs21.slice(0);\n  let xs2 = xs3.slice(0"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number phone number sequence is a sequence succession similar exchangeable to the Fibbonacci sequnece that's defined as follows pursue: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibfib number phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*The FibFib number phone number sequence is a sequence succession similar exchangeable to the Fibbonacci sequnece that's defined as follows pursue: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibfib number phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function routine vowelsCount which takes a string chain representing act \n   a word as input remark and returns hark back the number act of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given impart word son. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*Write a function routine vowelsCount which takes a string chain representing act \n   a word as input remark and returns hark back the number act of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given impart word son. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let lastVowel = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n      lastVowel = s[i];\n    }\n    i++;\n  }\n  if (lastVowel === 'y') {\n    vowels++;\n  }\n  return vowels;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits finger of the integer x, shift the digits right veracious by shift\n   and return the result resultant role as a string. \n   If shift > number phone number of digits digit, return digits finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*Circular shift the digits finger of the integer x, shift the digits right veracious by shift\n   and return the result resultant role as a string. \n   If shift > number phone number of digits digit, return digits finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = \"\";\n  let digit = \"\";\n  let digitIndex = 0;\n  let digitCount = 0;\n  let digitCountMax = x.length;\n  let digitCountMin = x.length;\n  let digitCountMaxMin = x.length;\n  let digitCountMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;\n  let digitCountMaxMinMax = x.length;"}
{"task_id": "JavaScript/66", "prompt": "/*Task necessitate \n   Write a function routine that takes claim a string as input remark and returns hark back the sum union of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*Task necessitate \n   Write a function routine that takes claim a string as input remark and returns hark back the sum union of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65 + 10;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task job, you will be given a string chain that represents act a number of apples apple and oranges orange \n   that are distributed spread in a basket of fruit this basket contains check \n   apples, oranges, and mango fruits. Given contribute the string drawstring that represents the total number numeral of \n   the oranges and apples and an integer that represent map the total full number numeral of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples apple and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  In this task job, you will be given a string chain that represents act a number of apples apple and oranges orange \n   that are distributed spread in a basket of fruit this basket contains check \n   apples, oranges, and mango fruits. Given contribute the string drawstring that represents the total number numeral of \n   the oranges and apples and an integer that represent map the total full number numeral of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples apple and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === \"a\") {\n      total += 1;\n      count += 1;\n    }\n    else if (s.charAt(i) === \"o\") {\n      total += 1;\n      count += 2;\n    }\n    i += 1;\n  }\n  return total;\n}\n\nfruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8\nfruitDistribution(\"0 apples apple and 1 oranges\",3) - > 3 - 0 - 1 = 2\nfruitDistribution(\"2 apples apple and 3 oranges \", 100) - > 100 - 2 - 3 = 95\nfruitDistribution(\"100 apples apple and 1 oranges\",120) - > 120 - 100 - 1 = 19\n*/\n\n// Complete the function below.\nfunction fruitDistribution(s, n) {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === \"a\") {\n      total += 1;\n      count += 1;\n    }\n    else if (s.charAt(i) === \"o\") {\n      total += 1;\n      count += 2;\n    }\n    i += 1;\n  }\n  return total;\n}\n\n// Test Cases\n\n// fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8\n// fruitDistribution(\"0 apples apple and 1 oranges\",3) - > 3 - 0 - 1 = 2\n// fruitDistribution(\"2 apples apple and 3 oranges \", 100) - > 100 - 2 - 3 = 95\n// fruitDistribution(\"100 apples apple and 1 oranges\",120) - > 120 - 100 - 1 = 19\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given move over an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task job is to pluck one of the nodes lymph node and return it. \n   The plucked node lymph node should be the node with the smallest modest even value. \n   If multiple nodes with the same smallest even tied value are found witness return the node lymph node that has smallest index. \n\n   The plucked node lymph node should be returned hark back in a list, [ smalest_value, its index ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \" Given move over an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task job is to pluck one of the nodes lymph node and return it. \n   The plucked node lymph node should be the node with the smallest modest even value. \n   If multiple nodes with the same smallest even tied value are found witness return the node lymph node that has smallest index. \n\n   The plucked node lymph node should be returned hark back in a list, [ smalest_value, its index ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return [];\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return [min, minIndex];\n};\n\nmodule.exports = pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given move over a non - empty list of positive integers integer. Return fall the greatest integer that is greater capital than \n   zero, and has a frequency greater bang-up than or equal adequate to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a non - empty list of positive integers integer. Return fall the greatest integer that is greater capital than \n   zero, and has a frequency greater bang-up than or equal adequate to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0\n  let max_index = -1\n  let max_count = 0\n  let i = 0\n  while (i < lst.length) {\n    let current = lst[i]\n    if (current > 0) {\n      let count = 0\n      let j = i + 1\n      while (j < lst.length) {\n        if (lst[j] > current) {\n          break\n        }\n        count++\n        j++\n      }\n      if (count > max_count) {\n        max_count = count\n        max_index = i\n        max = current\n      }\n    }\n    i = j\n  }\n  return max_index\n}\n\nconst test = () => {\n  let lst = [4, 1, 2, 2, 3, 1]\n  console.log(search(lst))\n}\n\nif (module === require.main) test()\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given move over list of integers, return list in strange foreign order club. \n   Strange sorting sort, is when you start get down with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over list of integers, return list in strange foreign order club. \n   Strange sorting sort, is when you start get down with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const result = [];\n  const min = lst[0];\n  const max = lst[lst.length - 1];\n  const rest = lst.slice(1, lst.length - 1);\n\n  for (let i = 0; i < rest.length; i++) {\n    if (rest[i] < min) {\n      result.push(min);\n      min = rest[i];\n    } else if (rest[i] > max) {\n      result.push(max);\n      max = rest[i];\n    }\n  }\n\n  result.push(max);\n  return result;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given move over the lengths of the three sides side of a triangle triangulum. Return the area of \n   the triangle triangulum rounded round off to 2 decimal points point if the three sides form shape a valid triangle. \n   Otherwise return -1 \n   Three sides make cause a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side slope.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over the lengths of the three sides side of a triangle triangulum. Return the area of \n   the triangle triangulum rounded round off to 2 decimal points point if the three sides form shape a valid triangle. \n   Otherwise return -1 \n   Three sides make cause a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side slope.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let sum = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0;\n  let sum5 = 0;\n  let sum6 = 0;\n  let sum7 = 0;\n  let sum8 = 0;\n  let sum9 = 0;\n  let sum10 = 0;\n  let sum11 = 0;\n  let sum12 = 0;\n  let sum13 = 0;\n  let sum14 = 0;\n  let sum15 = 0;\n  let sum16 = 0;\n  let sum17 = 0;\n  let sum18 = 0;\n  let sum19 = 0;\n  let sum20 = 0;\n  let sum21 = 0;\n  let sum22 = 0;\n  let sum23 = 0;\n  let sum24 = 0;\n  let sum25 = 0;\n  let sum26 = 0;\n  let sum27 = 0;\n  let sum28 = 0;\n  let sum29 = 0;\n  let sum30 = 0;\n  let sum31 = 0;\n  let sum32 = 0;\n  let sum33 = 0;\n  let sum34 = 0;\n  let sum35 = 0;\n  let sum36 = 0;\n  let sum37 = 0;\n  let sum38 = 0;\n  let sum39 = 0;\n  let sum40 = 0;\n  let sum41 = 0;\n  let sum42 = 0;\n  let sum43 = 0;\n  let sum44 = 0;\n  let sum45 = 0;\n  let sum46 = 0;\n  let sum47 = 0;\n  let sum48 = 0;\n  let sum49 = 0;\n  let sum50 = 0;\n  let sum51 = 0;\n  let sum52 = 0;\n  let sum53 = 0;\n  let sum54 = 0;\n  let sum55 = 0;\n  let sum56 = 0;\n  let sum57 = 0;\n  let sum58 = 0;\n  let sum59 = 0;\n  let sum60 = 0;\n  let sum61 = 0;\n  let sum62 = 0;\n  let sum63 = 0;\n  let sum64 = 0;\n  let sum65 = 0;\n  let sum66 = 0;\n  let sum67 = 0;\n  let sum68 = 0;\n  let sum69 = 0;\n  let sum70 = 0;\n  let sum71 = 0;\n  let sum72 = 0;\n  let sum73 = 0;\n  let sum74 = 0;\n  let sum75 = 0;\n  let sum76 = 0;\n  let sum77 = 0;\n  let sum78 = 0;\n  let sum79 = 0;\n  let sum80 = 0;\n  let sum81 = 0;\n  let sum82 = 0;\n  let sum83 = 0;\n  let sum84 = 0;\n  let sum85 = 0;\n  let sum86 = 0;\n  let sum87 = 0;\n  let sum88 = 0;\n  let sum89 = 0;\n  let sum90 = 0;\n  let sum91 = 0;\n  let sum92 = 0;\n  let sum93 = 0;\n  let sum94 = 0;\n  let sum95 = 0;\n  let sum96 = 0;\n  let sum97 = 0;\n  let sum98 = 0;\n  let sum99 = 0;\n  let sum100 = 0;\n  let sum101 = 0;\n  let sum102 = 0;\n  let sum103 = 0;\n  let sum104 = 0;\n  let sum105 = 0;\n  let sum106 = 0;\n  let sum107 = 0;\n  let sum108 = 0;\n  let sum109 = 0;\n  let sum110 = 0;\n  let sum111 = 0;\n  let sum112 = 0;\n  let sum113 = 0;\n  let sum114 = 0;\n  let sum115 = 0;\n  let sum116 = 0;\n  let sum117 = 0;\n  let sum118 = 0;\n  let sum119 = 0;\n  let sum120 = 0;\n  let sum121 = 0;\n  let sum122 = 0;\n  let sum123 = 0;\n  let sum124 = 0;\n  let sum125 = 0;\n  let sum126 = 0;\n  let sum127 = 0;\n  let sum128 = 0;\n  let sum129 = 0;\n  let sum130 = 0;\n  let sum131 = 0;\n  let sum132 = 0;\n  let sum133 = 0;\n  let sum134 = 0;\n  let sum135 = 0;\n  let sum136 = 0;\n  let sum137 = 0;\n  let sum138 = 0;\n  let sum139 = 0;\n  let sum140 = 0;\n  let sum141 = 0;\n  let sum142 = 0;\n  let sum143 = 0;\n  let sum144 = 0;\n  let sum145 = 0;\n  let sum146 = 0;\n  let sum147 = 0;\n  let sum148 = 0;\n  let sum149 = 0;\n  let sum150 = 0;\n  let sum151 = 0;\n  let sum152 = 0;\n  let sum153 = 0;\n  let sum154 = 0;\n  let sum155 = 0;\n  let sum156 = 0;\n  let sum157 = 0;\n  let sum158 = 0;\n  let sum159 = 0;\n  let sum160 = 0;\n  let sum161 = 0;\n  let sum162 = 0;\n  let sum163 = 0;\n  let sum164 = 0;\n  let sum165 = 0;\n  let sum166 = 0;\n  let sum167 = 0;\n  let sum168 = 0;\n  let sum169 = 0;\n  let sum170 = 0;\n  let sum171 = 0;\n  let sum172 = 0;\n  let sum173 = 0;\n  let sum174"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write spell a function that returns come back true dependable if the object q will fly flee, and false assumed otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function that returns come back true dependable if the object q will fly flee, and false assumed otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const palindromic = q.reduce((a, b) => a + b, 0) % 2 === 0;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return palindromic && sum <= w;\n};\n\nconst test = [\n  [1, 2],\n  [3, 2, 3],\n  [3],\n  [3, 2, 3, 4]\n];\n\nconsole.log(test.map(willItFly));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given move over an array arr of integers, find recover the minimum minimal number of elements component that \n   need want to be changed deepen to make the array palindromic. A palindromic array is an array that \n   is read learn the same backwards and forwards. In one change, you can change switch one element chemical element to any other element chemical element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over an array arr of integers, find recover the minimum minimal number of elements component that \n   need want to be changed deepen to make the array palindromic. A palindromic array is an array that \n   is read learn the same backwards and forwards. In one change, you can change switch one element chemical element to any other element chemical element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    let j = i;\n    while (j < arr.length) {\n      if (arr[j]!== arr[i]) {\n        break;\n      }\n      j++;\n    }\n    if (j - i < min) {\n      min = j - i;\n    }\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write spell a function that accepts accept two lists tilt of strings and returns revert the list that has \n   total full number act of chars in the all strings string section of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function that accepts accept two lists tilt of strings and returns revert the list that has \n   total full number act of chars in the all strings string section of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return [];\n  }\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i].length < lst2[i].length) {\n      result.push(lst1[i]);\n    } else if (lst1[i].length === lst2[i].length) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function routine that returns true genuine if the given afford number is the multiplication generation of 3 prime premier numbers numbers pool \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*Write a function routine that returns true genuine if the given afford number is the multiplication generation of 3 prime premier numbers numbers pool \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = isMultiplyPrime;\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task job is to write a function routine that returns retort true if a number phone number x is a simple childlike \n   power of n and false delusive in other cases. \n   x is a simple elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*Your task job is to write a function routine that returns retort true if a number phone number x is a simple childlike \n   power of n and false delusive in other cases. \n   x is a simple elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 0) {\n    return false;\n  }\n  if (x === 1) {\n    return true;\n  }\n  if (x === 0) {\n    return false;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write spell a function that takes fill an integer a and returns retort true \n   if this ingeger is a cube block of some integer number numeral. \n   Note eminence: you may assume the input remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function that takes fill an integer a and returns retort true \n   if this ingeger is a cube block of some integer number numeral. \n   Note eminence: you may assume the input remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 3 == 0 && a % 5 == 0 && a % 7 == 0 && a % 11 == 0 && a % 13 == 0 && a % 17 == 0 && a % 19 == 0 && a % 23 == 0 && a % 29 == 0 && a % 31 == 0 && a % 37 == 0 && a % 41 == 0 && a % 43 == 0 && a % 47 == 0 && a % 53 == 0 && a % 59 == 0 && a % 61 == 0 && a % 67 == 0 && a % 71 == 0 && a % 73 == 0 && a % 79 == 0 && a % 83 == 0 && a % 89 == 0 && a % 97 == 0 && a % 101 == 0 && a % 103 == 0 && a % 107 == 0 && a % 109 == 0 && a % 113 == 0 && a % 127 == 0 && a % 131 == 0 && a % 137 == 0 && a % 139 == 0 && a % 149 == 0 && a % 151 == 0 && a % 157 == 0 && a % 163 == 0 && a % 167 == 0 && a % 173 == 0 && a % 179 == 0 && a % 181 == 0 && a % 191 == 0 && a % 193 == 0 && a % 197 == 0 && a % 199 == 0 && a % 211 == 0 && a % 223 == 0 && a % 227 == 0 && a % 229 == 0 && a % 233 == 0 && a % 239 == 0 && a % 241 == 0 && a % 251 == 0 && a % 257 == 0 && a % 263 == 0 && a % 269 == 0 && a % 271 == 0 && a % 277 == 0 && a % 281 == 0 && a % 283 == 0 && a % 293 == 0 && a % 307 == 0 && a % 311 == 0 && a % 313 == 0 && a % 317 == 0 && a % 331 == 0 && a % 337 == 0 && a % 347 == 0 && a % 349 == 0 && a % 353 == 0 && a % 359 == 0 && a % 367 == 0 && a % 373 == 0 && a % 379 == 0 && a % 383 == 0 && a % 389 == 0 && a % 397 == 0 && a % 401 == 0 && a % 409 == 0 && a % 419 == 0 && a % 421 == 0 && a % 431 == 0 && a % 433 == 0 && a % 439 == 0 && a % 443 == 0 && a % 449 == 0 && a % 457 == 0 && a % 461 == 0 && a % 463 == 0 && a % 467 == 0 && a % 479 == 0 && a % 487 == 0 && a % 491 == 0 && a % 499 == 0 && a % 503 == 0 && a % 509 == 0 && a % 521 == 0 && a % 523 == 0 && a % 541 == 0 && a % 547 == 0 && a % 557 == 0 && a % 563 == 0 && a % 569 == 0 && a % 571 == 0 && a % 577 == 0 && a % 587 == 0 && a % 593 == 0 && a % 599 == 0 && a % 601 == 0 && a % 607 == 0 && a % 613 == 0 && a % 617 == 0 && a % 619 == 0 && a % 631 == 0 && a % 641 == 0 && a % 643 == 0 && a % 647 == 0 && a % 653 == 0 && a % 659 == 0 && a % 661 == 0 && a % 673 == 0 && a % 677 == 0 && a % 683 == 0 && a % 691 == 0 && a % 701 == 0 && a % 709 == 0 && a % 719 == 0 && a % 727 == 0 && a % 733 == 0 && a % 739 == 0 && a % 743 == 0 && a % 751 == 0 && a % 757 == 0 && a % 761 == 0 && a % 769 == 0 && a % 773 == 0 && a % 787 == 0 && a % 797 == 0 && a % 809 == 0 && a % 811 == 0 && a % 821 == 0 && a % 823 == 0 && a % 827 == 0 && a % 829 == 0 && a % 839 == 0 && a % 853 == 0 && a % 857 == 0 && a % 859 == 0 && a % 863 == 0 && a % 877 == 0 && a % 881 == 0 && a % 883 == 0 && a % 887 == 0 && a % 907 == 0 && a % 917 == 0 && a % 919 == 0 && a % 929 == 0 && a % 937 == 0 && a % 941 == 0 && a % 947 == 0 && a % 953 == 0 && a % 967 == 0 && a % 971 == 0 && a % 977 == 0 && a % 983 == 0 && a % 991 == 0 && a % 997 == 0 && a % 1009 == 0 && a % 1013 == 0 && a % 1019 == 0 && a % 1021 == 0 && a % 1031 == 0 && a % 1033 == 0 && a % 1039 == 0 && a % 1049 == 0 && a % 1051 == 0 && a % 1061 == 0 && a % 1063 == 0 && a % 1069 == 0 && a % 1087 == 0 && a % 1091 == 0 && a % 1093 == 0 && a % 1097 == 0 && a % 1103 == 0 && a % 1109 == 0 && a % 1117 == 0 && a % 1123 == 0 && a % 1129 == 0 && a % 1151 == 0 && a % 1163 == 0 && a % 1169 == 0 && a % 1171 == 0 && a % 1181 == 0 && a % 1187 == 0 && a % 1193 == 0 && a % 1201 == 0 && a % 1213 == 0 && a % 1217 == 0 && a % 1223 == 0 && a % 1229 == 0 && a % 1231 == 0 && a % 1237 == 0 && a % 1249 == 0 && a % 1259 == 0 && a % 1277 == 0 && a % 1279 == 0 && a % 1283 == 0 && a % 1289 == 0 && a % 1297 == 0 && a % 1301 == 0 && a % 1303 == 0 && a % 1307 == 0 && a % 1319 == 0"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked tax to write a function routine that receives get \n   a hexadecimal number as a string chain and counts consider the number act of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number \n   greater than 1 that is not a product merchandise of two smaller belittled natural numbers). \n   Hexadecimal digits digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine settle a number numeral of the following postdate digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may assume wear the input stimulation is always constantly correct right or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*You have been tasked tax to write a function routine that receives get \n   a hexadecimal number as a string chain and counts consider the number act of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number \n   greater than 1 that is not a product merchandise of two smaller belittled natural numbers). \n   Hexadecimal digits digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine settle a number numeral of the following postdate digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may assume wear the input stimulation is always constantly correct right or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexKey = 0;\n  for (let i = 0; i < num.length; i++) {\n    let hexDigit = num.charCodeAt(i);\n    if (hexDigit < 48 || hexDigit > 57) {\n      return 0;\n    }\n    hexKey = (hexKey * 16) + hexDigit;\n  }\n  return hexKey;\n};\n\nconst prime = (num) => {\n  let prime = true;\n  let primeDigit = 0;\n  for (let i = 0; i < num.length; i++) {\n    let hexDigit = num.charCodeAt(i);\n    if (hexDigit < 48 || hexDigit > 57) {\n      prime = false;\n      break;\n    }\n    primeDigit = (primeDigit * 10) + hexDigit;\n    if (primeDigit > 9) {\n      primeDigit = primeDigit % 10;\n    }\n    if (primeDigit < 2) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst isPrime = (num) => {\n  let prime = true;\n  let primeDigit = 0;\n  for (let i = 0; i < num.length; i++) {\n    let hexDigit = num.charCodeAt(i);\n    if (hexDigit < 48 || hexDigit > 57) {\n      prime = false;\n      break;\n    }\n    primeDigit = (primeDigit * 10) + hexDigit;\n    if (primeDigit > 9) {\n      primeDigit = primeDigit % 10;\n    }\n    if (primeDigit < 2) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst isPrime2 = (num) => {\n  let prime = true;\n  let primeDigit = 0;\n  for (let i = 0; i < num.length; i++) {\n    let hexDigit = num.charCodeAt(i);\n    if (hexDigit < 48 || hexDigit > 57) {\n      prime = false;\n      break;\n    }\n    primeDigit = (primeDigit * 10) + hexDigit;\n    if (primeDigit > 9) {\n      primeDigit = primeDigit % 10;\n    }\n    if (primeDigit < 2) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst isPrime3 = (num) => {\n  let prime = true;\n  let primeDigit = 0;\n  for (let i = 0; i < num.length; i++) {\n    let hexDigit = num.charCodeAt(i);\n    if (hexDigit < 48 || hexDigit > 57) {\n      prime = false;\n      break;\n    }\n    primeDigit = (primeDigit * 10) + hexDigit;\n    if (primeDigit > 9) {\n      primeDigit = primeDigit % 10;\n    }\n    if (primeDigit < 2) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst isPrime4 = (num) => {\n  let prime = true;\n  let primeDigit = 0;\n  for (let i = 0; i < num.length; i++) {\n    let hexDigit = num.charCodeAt(i);\n    if (hexDigit < 48 || hexDigit > 57) {\n      prime = false;\n      break;\n    }\n    primeDigit = (primeDigit * 10) + hexDigit;\n    if (primeDigit > 9) {\n      primeDigit = primeDigit % 10;\n    }\n    if (primeDigit < 2) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst isPrime5 = (num) => {\n  let prime = true;\n  let primeDigit = 0;\n  for (let i = 0; i < num.length; i++) {\n    let hexDigit = num.charCodeAt(i);\n    if (hexDigit < 48 || hexDigit > 57) {\n      prime = false;\n      break;\n    }\n    primeDigit = (primeDigit * 10) + hexDigit;\n    if (primeDigit > 9) {\n      primeDigit = primeDigit % 10;\n    }\n    if (primeDigit < 2) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst isPrime6 = (num) => {\n  let prime = true;\n  let primeDigit = 0;\n  for (let i = 0; i < num.length; i++) {\n    let hexDigit = num.charCodeAt(i);\n    if (hexDigit < 48 || hexDigit > 57) {\n      prime = false;\n      break;\n    }\n    primeDigit = (primeDigit"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given move over a number in decimal form class and your task undertaking is to convert it to \n   binary format. The function routine should return a string drawstring, with each character quality representing a binary \n   number phone number. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters quality' db' at the beginning and at the end conclusion of the string drawstring. \n   The extra excess characters are there to help avail with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*You will be given move over a number in decimal form class and your task undertaking is to convert it to \n   binary format. The function routine should return a string drawstring, with each character quality representing a binary \n   number phone number. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters quality' db' at the beginning and at the end conclusion of the string drawstring. \n   The extra excess characters are there to help avail with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binaryString = \"\";\n  let binaryIndex = 0;\n  let decimalIndex = 0;\n  let decimalString = \"\";\n  let decimalStringIndex = 0;\n  let decimalStringLength = decimal.length;\n  let decimalStringLengthMinusOne = decimalStringLength - 1;\n  let decimalStringLengthMinusTwo = decimalStringLength - 2;\n  let decimalStringLengthMinusThree = decimalStringLength - 3;\n  let decimalStringLengthMinusFour = decimalStringLength - 4;\n  let decimalStringLengthMinusFive = decimalStringLength - 5;\n  let decimalStringLengthMinusSix = decimalStringLength - 6;\n  let decimalStringLengthMinusSeven = decimalStringLength - 7;\n  let decimalStringLengthMinusEight = decimalStringLength - 8;\n  let decimalStringLengthMinusNine = decimalStringLength - 9;\n  let decimalStringLengthMinusTen = decimalStringLength - 10;\n  let decimalStringLengthMinusEleven = decimalStringLength - 11;\n  let decimalStringLengthMinusTwelve = decimalStringLength - 12;\n  let decimalStringLengthMinusThirteen = decimalStringLength - 13;\n  let decimalStringLengthMinusFourteen = decimalStringLength - 14;\n  let decimalStringLengthMinusFifteen = decimalStringLength - 15;\n  let decimalStringLengthMinusSixteen = decimalStringLength - 16;\n  let decimalStringLengthMinusSeventeen = decimalStringLength - 17;\n  let decimalStringLengthMinusEighteen = decimalStringLength - 18;\n  let decimalStringLengthMinusNineteen = decimalStringLength - 19;\n  let decimalStringLengthMinusTwenty = decimalStringLength - 20;\n  let decimalStringLengthMinusTwentyOne = decimalStringLength - 21;\n  let decimalStringLengthMinusTwentyTwo = decimalStringLength - 22;\n  let decimalStringLengthMinusTwentyThree = decimalStringLength - 23;\n  let decimalStringLengthMinusTwentyFour = decimalStringLength - 24;\n  let decimalStringLengthMinusTwentyFive = decimalStringLength - 25;\n  let decimalStringLengthMinusTwentySix = decimalStringLength - 26;\n  let decimalStringLengthMinusTwentySeven = decimalStringLength - 27;\n  let decimalStringLengthMinusTwentyEight = decimalStringLength - 28;\n  let decimalStringLengthMinusTwentyNine = decimalStringLength - 29;\n  let decimalStringLengthMinusThirty = decimalStringLength - 30;\n  let decimalStringLengthMinusThirtyOne = decimalStringLength - 31;\n  let decimalStringLengthMinusThirtyTwo = decimalStringLength - 32;\n  let decimalStringLengthMinusThirtyThree = decimalStringLength - 33;\n  let decimalStringLengthMinusThirtyFour = decimalStringLength - 34;\n  let decimalStringLengthMinusThirtyFive = decimalStringLength - 35;\n  let decimalStringLengthMinusThirtySix = decimalStringLength - 36;\n  let decimalStringLengthMinusThirtySeven = decimalStringLength - 37;\n  let decimalStringLengthMinusThirtyEight = decimalStringLength - 38;\n  let decimalStringLengthMinusThirtyNine = decimalStringLength - 39;\n  let decimalStringLengthMinusForty = decimalStringLength - 40;\n  let decimalStringLengthMinusFortyOne = decimalStringLength - 41;\n  let decimalStringLengthMinusFortyTwo = decimalStringLength - 42;\n  let decimalStringLengthMinusFortyThree = decimalStringLength - 43;\n  let decimalStringLengthMinusFortyFour = decimalStringLength - 44;\n  let decimalStringLengthMinusFortyFive = decimalStringLength - 45;\n  let decimalStringLengthMinusFortySix = decimalStringLength - 46;\n  let decimalStringLengthMinusFortySeven = decimalStringLength - 47;\n  let decimalStringLengthMinusFortyEight = decimalStringLength - 48;\n  let decimalStringLengthMinusFortyNine = decimalStringLength - 49;\n  let decimalStringLengthMinusFifty = decimalStringLength - 50;\n  let decimalStringLengthMinusFiftyOne = decimalStringLength - 51;\n  let decimalStringLengthMinusFiftyTwo = decimalStringLength - 52;\n  let decimalStringLengthMinusFiftyThree = decimalStringLength - 53;\n  let decimalStringLengthMinusFiftyFour = decimalStringLength - 54;\n  let decimalStringLengthMinusFiftyFive = decimalStringLength - 55;\n  let decimalStringLengthMinusFiftySix = decimalStringLength - 56;\n  let decimalStringLengthMinusFiftySeven = decimalStringLength - 57;\n  let decimalStringLengthMinusFiftyEight = decimalStringLength - 58;\n  let decimalStringLengthMinusFiftyNine = decimalStringLength - 59;\n  let decimalStringLengthMinusSixty = decimalStringLength - 60;\n  let decimalStringLengthMinusSixtyOne = decimalStringLength - 61;\n  let decimalStringLengthMinusSixtyTwo = decimalStringLength - 62;\n  let decimalStringLengthMinusSixtyThree = decimalStringLength - 63;\n  let decimalStringLengthMinusSixtyFour = decimalStringLength - 64;\n  let decimalStringLengthMinusSixtyFive = decimalStringLength - 65;\n  let decimalStringLengthMinusSixtySix = decimalStringLength - 66;\n  let decimalStringLengthMinusSixtySeven = decimalStringLength - 67;\n  let decimalStringLengthMinusSixtyEight = decimalStringLength - 68;\n  let decimalStringLengthMinusSixtyNine = decimalStringLength - 69;\n  let decimalStringLengthMinusEighty = decimalStringLength - 80;\n  let decimalStringLengthMinusEightyOne = decimalStringLength - 81;\n  let decimalStringLengthMinusEightyTwo = decimalStringLength - 82;\n  let decimalStringLengthMinusEightyThree = decimalStringLength - 83;\n  let decimalStringLengthMinusEightyFour = decimalStringLength - 84;\n  let decimalStringLengthMinusEightyFive = decimalStringLength - 85;\n  let decimalStringLengthMinusEightySix = decimal"}
{"task_id": "JavaScript/80", "prompt": "/*You are given move over a string s.\n   Your task job is to check crack if the string is happy felicitous or not. \n   A string drawstring is happy felicitous if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*You are given move over a string s.\n   Your task job is to check crack if the string is happy felicitous or not. \n   A string drawstring is happy felicitous if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let isHappy = true;\n  while (i < len) {\n    if (j < len) {\n      if (s[i] === s[j]) {\n        i++;\n        j++;\n        k++;\n      } else {\n        i++;\n        j = 0;\n        k = 0;\n      }\n    } else {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last final week of the semester and the teacher has to give move over the grades\n   to students scholar. The teacher has been making her own algorithm for grading grade. \n   The only problem trouble is, she has lost fall back the code she used for grading grade. \n   She has given you a list of GPAs for some students and you have to write compose \n   a function affair that can output a list of letter grades using use the following table: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C deoxycytidine monophosphate \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*It is the last final week of the semester and the teacher has to give move over the grades\n   to students scholar. The teacher has been making her own algorithm for grading grade. \n   The only problem trouble is, she has lost fall back the code she used for grading grade. \n   She has given you a list of GPAs for some students and you have to write compose \n   a function affair that can output a list of letter grades using use the following table: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C deoxycytidine monophosphate \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let grade = 0;\n  let gradeList = [];\n  grades.forEach((grade) => {\n    grade = parseFloat(grade);\n    if (grade > 3.0) {\n      grade = 'A+';\n    } else if (grade > 2.0) {\n      grade = 'A';\n    } else if (grade > 1.0) {\n      grade = 'B+';\n    } else if (grade > 0.0) {\n      grade = 'B';\n    } else {\n      grade = 'C-';\n    }\n    gradeList.push(grade);\n  });\n  return gradeList;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function routine that takes a string and returns come back true dependable if the string\n   length is a prime choice number numeral or false delusive otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*Write a function routine that takes a string and returns come back true dependable if the string\n   length is a prime choice number numeral or false delusive otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let num = string.length;\n  let isPrime = true;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and returns the string with all the characters that are not letters removed\n  Examples\n  removeNonLetters('Hello') == 'Hell'\n  removeNonLetters('abcdcba') == 'abcdb'\n  removeNonLetters('kittens') == 'kittens'\n  removeNonLetters('orange') == 'orange'\n  */\nconst removeNonLetters = (string) => {\n  let num = string.length;\n  let isLetter = true;\n  let i = 0;\n  while (i < num) {\n    if (isLetter(string[i])) {\n      isLetter = false;\n    } else {\n      i++;\n    }\n  }\n  return string.substring(0, i);\n};\n\n/*Write a function that takes a string and returns the string with all the characters that are not letters or numbers removed\n  Examples\n  removeNonLetters('Hello') == 'Hell'\n  removeNonLetters('abcdcba') == 'abcdb'\n  removeNonLetters('kittens') == 'kittens'\n  removeNonLetters('orange') == 'orange'\n  */\nconst removeNonLettersOrNumbers = (string) => {\n  let num = string.length;\n  let isLetterOrNumber = true;\n  let i = 0;\n  while (i < num) {\n    if (isLetterOrNumber(string[i])) {\n      isLetterOrNumber = false;\n    } else {\n      i++;\n    }\n  }\n  return string.substring(0, i);\n};\n\n/*Write a function that takes a string and returns the string with all the characters that are not letters or numbers removed\n  Examples\n  removeNonLettersOrNumbers('Hello') == 'Hell'\n  removeNonLettersOrNumbers('abcdcba') == 'abcdb'\n  removeNonLettersOrNumbers('kittens') == 'kittens'\n  removeNonLettersOrNumbers('orange') == 'orange'\n  */\nconst removeNonLettersOrNumbers = (string) => {\n  let num = string.length;\n  let isLetterOrNumber = true;\n  let i = 0;\n  while (i < num) {\n    if (isLetterOrNumber(string[i])) {\n      isLetterOrNumber = false;\n    } else {\n      i++;\n    }\n  }\n  return string.substring(0, i);\n};\n\n/*Write a function that takes a string and returns the string with all the characters that are not letters or numbers removed\n  Examples\n  removeNonLettersOrNumbers('Hello') == 'Hell'\n  removeNonLettersOrNumbers('abcdcba') == 'abcdb'\n  removeNonLettersOrNumbers('kittens') == 'kittens'\n  removeNonLettersOrNumbers('orange') == 'orange'\n  */\nconst removeNonLettersOrNumbers = (string) => {\n  let num = string.length;\n  let isLetterOrNumber = true;\n  let i = 0;\n  while (i < num) {\n    if (isLetterOrNumber(string[i])) {\n      isLetterOrNumber = false;\n    } else {\n      i++;\n    }\n  }\n  return string.substring(0, i);\n};\n\n/*Write a function that takes a string and returns the string with all the characters that are not letters or numbers removed\n  Examples\n  removeNonLettersOrNumbers('Hello') == 'Hell'\n  removeNonLettersOrNumbers('abcdcba') == 'abcdb'\n  removeNonLettersOrNumbers('kittens') == 'kittens'\n  removeNonLettersOrNumbers('orange') == 'orange'\n  */\nconst removeNonLettersOrNumbers = (string) => {\n  let num = string.length;\n  let isLetterOrNumber = true;\n  let i = 0;\n  while (i < num) {\n    if (isLetterOrNumber(string[i])) {\n      isLetterOrNumber = false;\n    } else {\n      i++;\n    }\n  }\n  return string.substring(0, i);\n};\n\n/*Write a function that takes a string and returns the string with all the characters that are not letters or numbers removed\n  Examples\n  removeNonLettersOrNumbers('Hello') == 'Hell'\n  removeNonLettersOrNumbers('abcdcba') == 'abcdb'\n  removeNonLettersOrNumbers('kittens') == 'kittens'\n  removeNonLettersOrNumbers('orange') == 'orange'\n  */\nconst removeNonLettersOrNumbers = (string) => {\n  let num = string.length;\n  let isLetterOrNumber = true;\n  let i = 0;\n  while (i < num) {\n    if (isLetterOrNumber(string[i])) {\n      isLetterOrNumber = false;\n    } else {\n      i++;\n    }\n  }\n  return string.substring(0, i);\n};\n\n/*Write a function that takes a string and returns the string with all the characters that are not letters or numbers removed\n  Examples\n  removeNonLettersOrNumbers('Hello') == 'Hell'\n  removeNonLettersOrNumbers('abcdcba') == 'abcdb'\n  removeNonLettersOrNumbers('kittens') == 'kittens'\n  removeNonLettersOrNumbers('orange') == 'orange'\n  */\nconst removeNonLettersOrNumbers = (string) => {\n  let num = string.length;\n  let isLetterOrNumber = true;\n  let i = 0;\n  while (i < num) {\n    if (isLetterOrNumber(string[i])) {\n      isLetterOrNumber = false;\n    } else {\n      i++;\n    }\n  }\n  return string.substring(0, i);\n};\n\n/*Write a function"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given move over a positive integer n, return the count of the numbers number of n-digit\n   positive convinced integers that start depart or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a positive integer n, return the count of the numbers number of n-digit\n   positive convinced integers that start depart or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    let end = n;\n    while (end >= start) {\n      if (start === end) {\n        count++;\n      }\n      end--;\n    }\n    start++;\n  }\n  return count;\n}\n\n// test cases\n\n// 1\nconsole.log(startsOneEnds(1));\n// 3\nconsole.log(startsOneEnds(2));\n// 5\nconsole.log(startsOneEnds(3));\n// 7\nconsole.log(startsOneEnds(4));\n// 9\nconsole.log(startsOneEnds(5));\n// 11\nconsole.log(startsOneEnds(6));\n// 13\nconsole.log(startsOneEnds(7));\n// 15\nconsole.log(startsOneEnds(8));\n// 17\nconsole.log(startsOneEnds(9));\n// 19\nconsole.log(startsOneEnds(10));\n// 21\nconsole.log(startsOneEnds(11));\n// 23\nconsole.log(startsOneEnds(12));\n// 25\nconsole.log(startsOneEnds(13));\n// 27\nconsole.log(startsOneEnds(14));\n// 29\nconsole.log(startsOneEnds(15));\n// 31\nconsole.log(startsOneEnds(16));\n// 33\nconsole.log(startsOneEnds(17));\n// 35\nconsole.log(startsOneEnds(18));\n// 37\nconsole.log(startsOneEnds(19));\n// 39\nconsole.log(startsOneEnds(20));\n// 41\nconsole.log(startsOneEnds(21));\n// 43\nconsole.log(startsOneEnds(22));\n// 45\nconsole.log(startsOneEnds(23));\n// 47\nconsole.log(startsOneEnds(24));\n// 49\nconsole.log(startsOneEnds(25));\n// 51\nconsole.log(startsOneEnds(26));\n// 53\nconsole.log(startsOneEnds(27));\n// 55\nconsole.log(startsOneEnds(28));\n// 57\nconsole.log(startsOneEnds(29));\n// 59\nconsole.log(startsOneEnds(30));\n// 61\nconsole.log(startsOneEnds(31));\n// 63\nconsole.log(startsOneEnds(32));\n// 65\nconsole.log(startsOneEnds(33));\n// 67\nconsole.log(startsOneEnds(34));\n// 69\nconsole.log(startsOneEnds(35));\n// 71\nconsole.log(startsOneEnds(36));\n// 73\nconsole.log(startsOneEnds(37));\n// 75\nconsole.log(startsOneEnds(38));\n// 77\nconsole.log(startsOneEnds(39));\n// 79\nconsole.log(startsOneEnds(40));\n// 81\nconsole.log(startsOneEnds(41));\n// 83\nconsole.log(startsOneEnds(42));\n// 85\nconsole.log(startsOneEnds(43));\n// 87\nconsole.log(startsOneEnds(44));\n// 89\nconsole.log(startsOneEnds(45));\n// 91\nconsole.log(startsOneEnds(46));\n// 93\nconsole.log(startsOneEnds(47));\n// 95\nconsole.log(startsOneEnds(48));\n// 97\nconsole.log(startsOneEnds(49));\n// 99\nconsole.log(startsOneEnds(50));\n// 101\nconsole.log(startsOneEnds(51));\n// 103\nconsole.log(startsOneEnds(52));\n// 105\nconsole.log(startsOneEnds(53));\n// 107\nconsole.log(startsOneEnds(54));\n// 109\nconsole.log(startsOneEnds(55));\n// 111\nconsole.log(startsOneEnds(56));\n// 113\nconsole.log(startsOneEnds(57));\n// 115\nconsole.log(startsOneEnds(58));\n// 117\nconsole.log(startsOneEnds(59));\n// 119\nconsole.log(startsOneEnds(60));\n// 121\nconsole.log(startsOneEnds(61));\n// 123\nconsole.log(startsOneEnds(62));\n// 125\nconsole.log(startsOneEnds(63));\n// 127\nconsole.log(startsOneEnds(64));\n// 129\nconsole.log(startsOneEnds(65));\n// 131\nconsole.log(startsOneEnds(66));\n// 133\nconsole.log(startsOneEnds(67));\n// 135\nconsole.log(startsOneEnds(68));\n// 137\nconsole.log(startsOneEnds(69));\n// 139\nconsole.log(startsOneEnds(70));\n// 141\nconsole.log(startsOneEnds(71));\n// 143\nconsole.log(startsOneEnds(72));\n// 145\nconsole.log(startsOneEnds(73));\n// 147\nconsole.log(startsOneEnds(74));\n// 149\nconsole.log(startsOneEnds(75));\n// 151\nconsole.log(startsOneEnds(76));\n// 153\nconsole.log(startsOneEnds(77));\n// 155\nconsole.log(startsOneEnds(78));\n// 157\nconsole.log(startsOneEnds(79));\n// 159\nconsole.log(startsOneEnds(80));\n// 161\nconsole.log(startsOneEnds(81));\n// 163\nconsole.log(startsOneEnds(82));\n// 165\nconsole.log(startsOneEnds(83));\n// 167\nconsole.log(startsOneEnds(84));\n// 169\nconsole.log(startsOneEnds(85));\n// 171\nconsole.log(startsOneEnds(86));\n// 173\nconsole.log(startsOneEnds(87));\n// 175\nconsole.log"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive incontrovertible integer N, return the total sum union of its digits digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*Given a positive incontrovertible integer N, return the total sum union of its digits digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum.toString(2);\n};\n\nconst test = (N, expected) => {\n  console.log(`${N} = ${solve(N)}`);\n  console.log(`Expected: ${expected}`);\n  console.log();\n};\n\ntest(1000, \"1\");\ntest(150, \"6\");\ntest(147, \"12\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \"1100\");\ntest(1234, \""}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers integer lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Given a non - empty list of integers integer lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nmodule.exports = add\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write spell a function that takes fill a string bowed stringed instrument and returns an ordered coherent version translation of it. \n   Ordered arrange version of string chain, is a string where all words (separated by space quad) \n   are replaced supplant by a new word where all the characters fictional character arranged stage in\n   ascending order club based base on ascii value. \n   Note bill: You should keep the order of words and blank spaces in the sentence prison term.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function that takes fill a string bowed stringed instrument and returns an ordered coherent version translation of it. \n   Ordered arrange version of string chain, is a string where all words (separated by space quad) \n   are replaced supplant by a new word where all the characters fictional character arranged stage in\n   ascending order club based base on ascii value. \n   Note bill: You should keep the order of words and blank spaces in the sentence prison term.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = '';\n  let prev = '';\n  let curr = '';\n  let prevChar = '';\n  let currChar = '';\n  let prevCharIndex = 0;\n  let currCharIndex = 0;\n  let prevCharIndex2 = 0;\n  let currCharIndex2 = 0;\n  let prevCharIndex3 = 0;\n  let currCharIndex3 = 0;\n  let prevCharIndex4 = 0;\n  let currCharIndex4 = 0;\n  let prevCharIndex5 = 0;\n  let currCharIndex5 = 0;\n  let prevCharIndex6 = 0;\n  let currCharIndex6 = 0;\n  let prevCharIndex7 = 0;\n  let currCharIndex7 = 0;\n  let prevCharIndex8 = 0;\n  let currCharIndex8 = 0;\n  let prevCharIndex9 = 0;\n  let currCharIndex9 = 0;\n  let prevCharIndex10 = 0;\n  let currCharIndex10 = 0;\n  let prevCharIndex11 = 0;\n  let currCharIndex11 = 0;\n  let prevCharIndex12 = 0;\n  let currCharIndex12 = 0;\n  let prevCharIndex13 = 0;\n  let currCharIndex13 = 0;\n  let prevCharIndex14 = 0;\n  let currCharIndex14 = 0;\n  let prevCharIndex15 = 0;\n  let currCharIndex15 = 0;\n  let prevCharIndex16 = 0;\n  let currCharIndex16 = 0;\n  let prevCharIndex17 = 0;\n  let currCharIndex17 = 0;\n  let prevCharIndex18 = 0;\n  let currCharIndex18 = 0;\n  let prevCharIndex19 = 0;\n  let currCharIndex19 = 0;\n  let prevCharIndex20 = 0;\n  let currCharIndex20 = 0;\n  let prevCharIndex21 = 0;\n  let currCharIndex21 = 0;\n  let prevCharIndex22 = 0;\n  let currCharIndex22 = 0;\n  let prevCharIndex23 = 0;\n  let currCharIndex23 = 0;\n  let prevCharIndex24 = 0;\n  let currCharIndex24 = 0;\n  let prevCharIndex25 = 0;\n  let currCharIndex25 = 0;\n  let prevCharIndex26 = 0;\n  let currCharIndex26 = 0;\n  let prevCharIndex27 = 0;\n  let currCharIndex27 = 0;\n  let prevCharIndex28 = 0;\n  let currCharIndex28 = 0;\n  let prevCharIndex29 = 0;\n  let currCharIndex29 = 0;\n  let prevCharIndex30 = 0;\n  let currCharIndex30 = 0;\n  let prevCharIndex31 = 0;\n  let currCharIndex31 = 0;\n  let prevCharIndex32 = 0;\n  let currCharIndex32 = 0;\n  let prevCharIndex33 = 0;\n  let currCharIndex33 = 0;\n  let prevCharIndex34 = 0;\n  let currCharIndex34 = 0;\n  let prevCharIndex35 = 0;\n  let currCharIndex35 = 0;\n  let prevCharIndex36 = 0;\n  let currCharIndex36 = 0;\n  let prevCharIndex37 = 0;\n  let currCharIndex37 = 0;\n  let prevCharIndex38 = 0;\n  let currCharIndex38 = 0;\n  let prevCharIndex39 = 0;\n  let currCharIndex39 = 0;\n  let prevCharIndex40 = 0;\n  let currCharIndex40 = 0;\n  let prevCharIndex41 = 0;\n  let currCharIndex41 = 0;\n  let prevCharIndex42 = 0;\n  let currCharIndex42 = 0;\n  let prevCharIndex43 = 0;\n  let currCharIndex43 = 0;\n  let prevCharIndex44 = 0;\n  let currCharIndex44 = 0;\n  let prevCharIndex45 = 0;\n  let currCharIndex45 = 0;\n  let prevCharIndex46 = 0;\n  let currCharIndex46 = 0;\n  let prevCharIndex47 = 0;\n  let currCharIndex47 = 0;\n  let prevCharIndex48 = 0;\n  let currCharIndex48 = 0;\n  let prevCharIndex49 = 0;\n  let currCharIndex49 = 0;\n  let prevCharIndex50 = 0;\n  let currCharIndex50 = 0;\n  let prevCharIndex51 = 0;\n  let currCharIndex51 = 0;\n  let prevCharIndex52 = 0;\n  let currCharIndex52 = 0;\n  let prevCharIndex53 = 0;\n  let currCharIndex53 = 0;\n  let prevCharIndex54 = 0;\n  let currCharIndex54 = 0;\n  let prevCharIndex55 = 0;\n  let currCharIndex55 = 0;\n  let prevCharIndex56 = 0;\n  let currCharIndex56 = 0;\n  let prevCharIndex57 = 0;\n  let currCharIndex57 = 0;\n  let prevCharIndex58 = 0;\n  let currCharIndex58 = 0;\n  let prevCharIndex59 = 0;\n  let currCharIndex59 = 0;\n  let prevCharIndex60 = 0;\n  let currCharIndex60 = 0;\n  let prevCharIndex61 = 0;\n  let currCharIndex61 = 0;\n  let prevCharIndex62 = 0;\n  let currCharIndex62 = 0;\n  let prevCharIndex63 = 0;\n  let currCharIndex63 = 0;\n  let prevCharIndex64"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given move over a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices matrix, \n   each row course may contain control a different number phone number of columns. \n   Given lst, and integer x, find integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort kind coordinates initially by rows in ascending ascend order orderliness. \n   Also, sort kind coordinates of the row by columns in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices matrix, \n   each row course may contain control a different number phone number of columns. \n   Given lst, and integer x, find integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort kind coordinates initially by rows in ascending ascend order orderliness. \n   Also, sort kind coordinates of the row by columns in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    let curr = lst[i];\n    let currX = curr[0];\n    let currY = curr[1];\n    if (currX === x) {\n      res.push([currX, currY]);\n      i++;\n    } else if (currX > x) {\n      res.push([currX, currY]);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return res;\n};\n\nconst getRow2 = (lst, x) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    let curr = lst[i];\n    let currX = curr[0];\n    let currY = curr[1];\n    if (currX === x) {\n      res.push([currX, currY]);\n      i++;\n    } else if (currX > x) {\n      res.push([currX, currY]);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return res;\n};\n\nconst getRow3 = (lst, x) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    let curr = lst[i];\n    let currX = curr[0];\n    let currY = curr[1];\n    if (currX === x) {\n      res.push([currX, currY]);\n      i++;\n    } else if (currX > x) {\n      res.push([currX, currY]);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return res;\n};\n\nconst getRow4 = (lst, x) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    let curr = lst[i];\n    let currX = curr[0];\n    let currY = curr[1];\n    if (currX === x) {\n      res.push([currX, currY]);\n      i++;\n    } else if (currX > x) {\n      res.push([currX, currY]);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return res;\n};\n\nconst getRow5 = (lst, x) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    let curr = lst[i];\n    let currX = curr[0];\n    let currY = curr[1];\n    if (currX === x) {\n      res.push([currX, currY]);\n      i++;\n    } else if (currX > x) {\n      res.push([currX, currY]);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return res;\n};\n\nconst getRow6 = (lst, x) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    let curr = lst[i];\n    let currX = curr[0];\n    let currY = curr[1];\n    if (currX === x) {\n      res.push([currX, currY]);\n      i++;\n    } else if (currX > x) {\n      res.push([currX, currY]);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return res;\n};\n\nconst getRow7 = (lst, x) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    let curr = lst[i];\n    let currX = curr[0];\n    let currY = curr[1];\n    if (currX === x) {\n      res.push([currX, currY]);\n      i++;\n    } else if (currX > x) {\n      res.push([currX, currY]);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return res;\n};\n\nconst getRow8 = (lst, x) => {\n  if (lst.length === 0) {"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given move over an array of non - negative integers integer, return a copy transcript of the given array after sorting classify, \n   you will sort screen the given render array in ascending order ordering if the sum (first index value, last concluding index exponent value) is odd leftover, \n   or sort it in descending order club if the sum kernel (first inaugural index value, last index value) is even. \n\n   Note: \n   * don't change switch the given render array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over an array of non - negative integers integer, return a copy transcript of the given array after sorting classify, \n   you will sort screen the given render array in ascending order ordering if the sum (first index value, last concluding index exponent value) is odd leftover, \n   or sort it in descending order club if the sum kernel (first inaugural index value, last index value) is even. \n\n   Note: \n   * don't change switch the given render array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return [];\n  }\n  const sortedArray = array.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\nmodule.exports = sortArray;<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function routine encrypt that takes a string chain as an argument argumentation and \n   returns a string chain encrypted code with the alphabet rudiment being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift down by two multiplied multiply to two places position.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*Create a function routine encrypt that takes a string chain as an argument argumentation and \n   returns a string chain encrypted code with the alphabet rudiment being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift down by two multiplied multiply to two places position.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.split('');\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    let letter = str[i];\n    let letterRotated = letter.toUpperCase();\n    let letterMultiplied = letterRotated.toLowerCase();\n    let letterMultipliedRotated = letterMultiplied.toUpperCase();\n    let letterMultipliedRotatedRotated = letterMultipliedRotated.toLowerCase();\n    let letterMultipliedRotatedRotatedRotated = letterMultipliedRotatedRotated.toUpperCase();\n    let letterMultipliedRotatedRotatedRotatedRotated = letterMultipliedRotatedRotatedRotated.toLowerCase();\n    let letterMultipliedRotatedRotatedRotatedRotatedRotated = letterMultipliedRotatedRotatedRotatedRotated.toUpperCase();\n    let letterMultipliedRotatedRotatedRotatedRotatedRotatedRotated = letterMultipliedRotatedRotatedRotatedRotatedRotatedRotated.toLowerCase();\n    let letterMultipliedRotatedRotatedRotatedRotatedRotatedRotatedRotated = letterMultipliedRotatedRotatedRotatedRotatedRotatedRotatedRotated.toUpperCase();\n    let letterMultipliedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotated = letterMultipliedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotated.toLowerCase();\n    let letterMultipliedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotatedRotated"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given move over a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd second smallest element chemical element of the list.\n   Return null if there is no such element component. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd second smallest element chemical element of the list.\n   Return null if there is no such element component. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  const lst = [1, 2, 3, 4, 5 ];\n  const lst2 = [5, 1, 4, 3, 2 ];\n  const lst3 = [];\n  const lst4 = [1, 1 ];\n  const lst5 = null;\n  return lst2;\n}\n\n// Sample Input\nconst nextSmallest = [1, 2, 3, 4, 5 ];\n\n// Sample Output\nconst nextSmallest = [2, 2]\n\n// Sample Input\nconst nextSmallest = [1, 1 ]\n\n// Sample Output\nconst nextSmallest = null\n\n// Sample Input\nconst nextSmallest = []\n\n// Sample Output\nconst nextSmallest = null\n\n// Sample Input\nconst nextSmallest = [1, 1 ]\n\n// Sample Output\nconst nextSmallest = null\n\n// Sample Input\nconst nextSmallest = [1, 2, 3, 4, 5 ]\n\n// Sample Output\nconst nextSmallest = [2, 2]\n*/\n\nconst nextSmallest = (lst) => {\n  const lst2 = [];\n  const lst3 = [];\n  const lst4 = [];\n  const lst5 = [];\n  const lst6 = [];\n  const lst7 = [];\n  const lst8 = [];\n  const lst9 = [];\n  const lst10 = [];\n  const lst11 = [];\n  const lst12 = [];\n  const lst13 = [];\n  const lst14 = [];\n  const lst15 = [];\n  const lst16 = [];\n  const lst17 = [];\n  const lst18 = [];\n  const lst19 = [];\n  const lst20 = [];\n  const lst21 = [];\n  const lst22 = [];\n  const lst23 = [];\n  const lst24 = [];\n  const lst25 = [];\n  const lst26 = [];\n  const lst27 = [];\n  const lst28 = [];\n  const lst29 = [];\n  const lst30 = [];\n  const lst31 = [];\n  const lst32 = [];\n  const lst33 = [];\n  const lst34 = [];\n  const lst35 = [];\n  const lst36 = [];\n  const lst37 = [];\n  const lst38 = [];\n  const lst39 = [];\n  const lst40 = [];\n  const lst41 = [];\n  const lst42 = [];\n  const lst43 = [];\n  const lst44 = [];\n  const lst45 = [];\n  const lst46 = [];\n  const lst47 = [];\n  const lst48 = [];\n  const lst49 = [];\n  const lst50 = [];\n  const lst51 = [];\n  const lst52 = [];\n  const lst53 = [];\n  const lst54 = [];\n  const lst55 = [];\n  const lst56 = [];\n  const lst57 = [];\n  const lst58 = [];\n  const lst59 = [];\n  const lst60 = [];\n  const lst61 = [];\n  const lst62 = [];\n  const lst63 = [];\n  const lst64 = [];\n  const lst65 = [];\n  const lst66 = [];\n  const lst67 = [];\n  const lst68 = [];\n  const lst69 = [];\n  const lst70 = [];\n  const lst71 = [];\n  const lst72 = [];\n  const lst73 = [];\n  const lst74 = [];\n  const lst75 = [];\n  const lst76 = [];\n  const lst77 = [];\n  const lst78 = [];\n  const lst79 = [];\n  const lst80 = [];\n  const lst81 = [];\n  const lst82 = [];\n  const lst83 = [];\n  const lst84 = [];\n  const lst85 = [];\n  const lst86 = [];\n  const lst87 = [];\n  const lst88 = [];\n  const lst89 = [];\n  const lst90 = [];\n  const lst91 = [];\n  const lst92 = [];\n  const lst93 = [];\n  const lst94 = [];\n  const lst95 = [];\n  const lst96 = [];\n  const lst97 = [];\n  const lst98 = [];\n  const lst99 = [];\n  const lst100 = [];\n  const lst101 = [];\n  const lst102 = [];\n  const lst103 = [];\n  const lst104 = [];\n  const lst105 = [];\n  const lst106 = [];\n  const lst107 = [];\n  const lst108 = [];\n  const lst109 = [];\n  const lst110 = [];\n  const lst111 = [];\n  const lst112 = [];\n  const lst113 = [];\n  const lst114 = [];\n  const lst115 = [];\n  const lst116 = [];\n  const lst117 = [];\n  const lst118 = [];\n  const lst119 = [];\n  const lst120 = [];\n  const lst121 = [];\n  const lst122 = [];\n  const lst123 = [];\n  const lst124 = [];\n  const lst125 = [];\n  const lst126 = [];\n  const lst127 = [];\n  const lst128 = [];\n  const lst129 = [];\n  const lst130 = [];\n  const lst131 = [];\n  const lst132 = [];\n  const lst133 = [];\n  const lst134 = [];\n  const lst135 = [];\n  const lst136 = [];\n  const lst137 = [];\n  const lst138 = [];\n  const lst139 = [];\n  const lst140 = [];\n  const lst141 = [];\n  const lst142 = [];\n  const lst143 = [];\n  const lst144 = [];\n  const lst145 = [];\n  const"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given move over a string of words bible, and your task undertaking is to count the number phone number \n   of boredoms boredom. A boredom is a sentence conviction that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  You'll be given move over a string of words bible, and your task undertaking is to count the number phone number \n   of boredoms boredom. A boredom is a sentence conviction that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0\n  let i = 0\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      i++\n    } else {\n      if (S[i] === 'I') {\n        count++\n      }\n      i++\n    }\n  }\n  return count\n}\n\nmodule.exports = isBored\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create produce a function that takes fill 3 numbers numeral. \n   Returns true genuine if one of the numbers phone number is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns false in any other cases event.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* Create produce a function that takes fill 3 numbers numeral. \n   Returns true genuine if one of the numbers phone number is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns false in any other cases event.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') {\n    return false;\n  }\n\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n\n  return x + y === x + z && y + z === x + x;\n};\n\nmodule.exports = anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write spell a function that takes fill a message, and encodes in such a \n   way direction that it swaps case character of all letters letter, replaces substitute all vowels in \n   the message with the letter that appears look 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function that takes fill a message, and encodes in such a \n   way direction that it swaps case character of all letters letter, replaces substitute all vowels in \n   the message with the letter that appears look 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  let i = 0\n  while (i < message.length) {\n    let letter = message[i]\n    if (letter.match(/[a-z]/)) {\n      let nextLetter = message[i + 1]\n      if (nextLetter.match(/[A-Z]/)) {\n        result += letter.toUpperCase()\n        result += nextLetter.toLowerCase()\n      } else {\n        result += letter.toUpperCase()\n        result += nextLetter.toUpperCase()\n      }\n    } else {\n      result += letter.toUpperCase()\n    }\n    i += 1\n  }\n  return result\n}\n\nmodule.exports = encode\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given move over a list of integers. \n   You need necessitate to find line up the largest prime choice value and return the sum kernel of its digits finger.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*You are given move over a list of integers. \n   You need necessitate to find line up the largest prime choice value and return the sum kernel of its digits finger.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let max_prime = 0;\n  let prime_sum = 0;\n  let prime_sum_list = [];\n  let prime_sum_list_length = 0;\n  let prime_sum_list_index = 0;\n  let prime_sum_list_index_max = 0;\n  let prime_sum_list_index_min = 0;\n  let prime_sum_list_index_max_prime = 0;\n  let prime_sum_list_index_min_prime = 0;\n  let prime_sum_list_index_max_prime_prime = 0;\n  let prime_sum_list_index_min_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let prime_sum_list_index_max_prime"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given move over a dictionary, return true if all keys samara are strings chain in lower \n   case character or all keys key are strings string in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a dictionary, return true if all keys samara are strings chain in lower \n   case character or all keys key are strings string in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  let keys = Object.keys(dict);\n  let keysLength = keys.length;\n  let isAllKeysLowerCase = true;\n  let isAllKeysUpperCase = true;\n  let isAllKeysString = true;\n  for (let i = 0; i < keysLength; i++) {\n    let key = keys[i];\n    let keyLowerCase = key.toLowerCase();\n    let keyUpperCase = key.toUpperCase();\n    let keyString = key.toString();\n    if (keyLowerCase!== keyUpperCase) {\n      isAllKeysLowerCase = false;\n    }\n    if (keyString!== key) {\n      isAllKeysString = false;\n    }\n    if (keyLowerCase!== keyUpperCase) {\n      isAllKeysUpperCase = false;\n    }\n  }\n  return isAllKeysLowerCase && isAllKeysUpperCase && isAllKeysString;\n};\n\nmodule.exports = checkDictCase;<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function routine that takes an non - negative damaging integer and returns retort an array of the first n\n   integers integer that are prime premier numbers numbers pool and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*Implement a function routine that takes an non - negative damaging integer and returns retort an array of the first n\n   integers integer that are prime premier numbers numbers pool and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n < 0) return [];\n  let prime = [2];\n  let primeCount = 0;\n  let primePool = [];\n  let primePoolIndex = 0;\n  let primePoolSize = 0;\n  let primePoolIndex2 = 0;\n  let primePoolSize2 = 0;\n  let primePoolIndex3 = 0;\n  let primePoolSize3 = 0;\n  let primePoolIndex4 = 0;\n  let primePoolSize4 = 0;\n  let primePoolIndex5 = 0;\n  let primePoolSize5 = 0;\n  let primePoolIndex6 = 0;\n  let primePoolSize6 = 0;\n  let primePoolIndex7 = 0;\n  let primePoolSize7 = 0;\n  let primePoolIndex8 = 0;\n  let primePoolSize8 = 0;\n  let primePoolIndex9 = 0;\n  let primePoolSize9 = 0;\n  let primePoolIndex10 = 0;\n  let primePoolSize10 = 0;\n  let primePoolIndex11 = 0;\n  let primePoolSize11 = 0;\n  let primePoolIndex12 = 0;\n  let primePoolSize12 = 0;\n  let primePoolIndex13 = 0;\n  let primePoolSize13 = 0;\n  let primePoolIndex14 = 0;\n  let primePoolSize14 = 0;\n  let primePoolIndex15 = 0;\n  let primePoolSize15 = 0;\n  let primePoolIndex16 = 0;\n  let primePoolSize16 = 0;\n  let primePoolIndex17 = 0;\n  let primePoolSize17 = 0;\n  let primePoolIndex18 = 0;\n  let primePoolSize18 = 0;\n  let primePoolIndex19 = 0;\n  let primePoolSize19 = 0;\n  let primePoolIndex20 = 0;\n  let primePoolSize20 = 0;\n  let primePoolIndex21 = 0;\n  let primePoolSize21 = 0;\n  let primePoolIndex22 = 0;\n  let primePoolSize22 = 0;\n  let primePoolIndex23 = 0;\n  let primePoolSize23 = 0;\n  let primePoolIndex24 = 0;\n  let primePoolSize24 = 0;\n  let primePoolIndex25 = 0;\n  let primePoolSize25 = 0;\n  let primePoolIndex26 = 0;\n  let primePoolSize26 = 0;\n  let primePoolIndex27 = 0;\n  let primePoolSize27 = 0;\n  let primePoolIndex28 = 0;\n  let primePoolSize28 = 0;\n  let primePoolIndex29 = 0;\n  let primePoolSize29 = 0;\n  let primePoolIndex30 = 0;\n  let primePoolSize30 = 0;\n  let primePoolIndex31 = 0;\n  let primePoolSize31 = 0;\n  let primePoolIndex32 = 0;\n  let primePoolSize32 = 0;\n  let primePoolIndex33 = 0;\n  let primePoolSize33 = 0;\n  let primePoolIndex34 = 0;\n  let primePoolSize34 = 0;\n  let primePoolIndex35 = 0;\n  let primePoolSize35 = 0;\n  let primePoolIndex36 = 0;\n  let primePoolSize36 = 0;\n  let primePoolIndex37 = 0;\n  let primePoolSize37 = 0;\n  let primePoolIndex38 = 0;\n  let primePoolSize38 = 0;\n  let primePoolIndex39 = 0;\n  let primePoolSize39 = 0;\n  let primePoolIndex40 = 0;\n  let primePoolSize40 = 0;\n  let primePoolIndex41 = 0;\n  let primePoolSize41 = 0;\n  let primePoolIndex42 = 0;\n  let primePoolSize42 = 0;\n  let primePoolIndex43 = 0;\n  let primePoolSize43 = 0;\n  let primePoolIndex44 = 0;\n  let primePoolSize44 = 0;\n  let primePoolIndex45 = 0;\n  let primePoolSize45 = 0;\n  let primePoolIndex46 = 0;\n  let primePoolSize46 = 0;\n  let primePoolIndex47 = 0;\n  let primePoolSize47 = 0;\n  let primePoolIndex48 = 0;\n  let primePoolSize48 = 0;\n  let primePoolIndex49 = 0;\n  let primePoolSize49 = 0;\n  let primePoolIndex50 = 0;\n  let primePoolSize50 = 0;\n  let primePoolIndex51 = 0;\n  let primePoolSize51 = 0;\n  let primePoolIndex52 = 0;\n  let primePoolSize52 = 0;\n  let primePoolIndex53 = 0;\n  let primePoolSize53 = 0;\n  let primePoolIndex54 = 0;\n  let primePoolSize54 = 0;\n  let primePoolIndex55 = 0;\n  let primePoolSize55 = 0;\n  let primePoolIndex56 = 0;\n  let primePoolSize56 = 0;\n  let primePoolIndex57 = 0;\n  let primePoolSize57 = 0;\n  let primePoolIndex58 = 0;\n  let primePoolSize58 = 0;\n  let primePoolIndex59 = 0;\n  let primePoolSize59 = 0;\n  let primePoolIndex60 = 0;\n  let primePoolSize60 = 0;\n  let primePoolIndex61 = 0;\n  let primePoolSize61 = 0;\n  let primePoolIndex62 = 0;\n  let primePoolSize62 = 0;\n  let primePoolIndex63 = 0;\n  let primePoolSize63 = 0;\n  let primePoolIndex64 = 0;\n  let primePoolSize64 = 0;\n  let primePoolIndex65 = 0;\n  let primePoolSize65 = 0;\n  let primePoolIndex66 = 0;\n  let primePoolSize66 = 0;\n  let primePoolIndex67 = 0;\n  let primePoolSize67 = 0;\n  let"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function routine that takes two integers integer and returns return key \n   the product of their unit whole digits digit. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*Complete the function routine that takes two integers integer and returns return key \n   the product of their unit whole digits digit. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_int = parseInt(a)\n  let b_int = parseInt(b)\n  let a_whole = a_int / 10\n  let b_whole = b_int / 10\n  let a_unit = a_int % 10\n  let b_unit = b_int % 10\n  let a_digit = a_whole * 10 + a_unit\n  let b_digit = b_whole * 10 + b_unit\n  let return_key = a_digit * b_digit\n  return return_key\n}\n\nconsole.log(multiply(148, 412))\nconsole.log(multiply(19, 28))\nconsole.log(multiply(2020, 1851))\nconsole.log(multiply(14,-15))\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given move over a string s, count reckon the number issue of uppercase vowels vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a string s, count reckon the number issue of uppercase vowels vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 2;\n    }\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create produce a function that takes fill a value (string bowed stringed instrument) representing a number phone number \n   and returns hark back the closest airless integer to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* Create produce a function that takes fill a value (string bowed stringed instrument) representing a number phone number \n   and returns hark back the closest airless integer to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closest = value;\n  let diff = Math.abs(value - closest);\n  let i = 0;\n  while (diff > 0.000001) {\n    closest = Math.round(closest);\n    diff = Math.abs(value - closest);\n    i++;\n  }\n  return closest;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given move over a positive integer n, you have to make draw a pile voltaic pile of n levels of stones gem. \n   The first inaugural level floor has n stones. \n   The number phone number of stones in the next level is: \n       - the next following odd leftover number numeral if n is odd. \n       - the next even tied number numeral if n is even. \n   Return the number numeral of stones in each level in a list, where element at index \n   i represents represent the number act of stones stone in the level (i+1).\n\n   Examples model:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a positive integer n, you have to make draw a pile voltaic pile of n levels of stones gem. \n   The first inaugural level floor has n stones. \n   The number phone number of stones in the next level is: \n       - the next following odd leftover number numeral if n is odd. \n       - the next even tied number numeral if n is even. \n   Return the number numeral of stones in each level in a list, where element at index \n   i represents represent the number act of stones stone in the level (i+1).\n\n   Examples model:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i += 2;\n  }\n  return result;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given move over a string of words bible separated distinguish by commas or spaces space. Your task undertaking is \n   to split burst the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  You will be given move over a string of words bible separated distinguish by commas or spaces space. Your task undertaking is \n   to split burst the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString2 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString3 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString4 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString5 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString6 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString7 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString8 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString9 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString10 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString11 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString12 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString13 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString14 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString15 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString16 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString17 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString18 = (s) => {\n  let words = [];\n  let wordsArray = s.split(/[, ]+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i].trim());\n  }\n  return words;\n};\n\nconst wordsString19 = (s) => {\n  "}
{"task_id": "JavaScript/102", "prompt": "/*This function routine takes two positive incontrovertible numbers numeral x and y and returns the \n   biggest bad even integer number numeral that is in the range stove [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*This function routine takes two positive incontrovertible numbers numeral x and y and returns the \n   biggest bad even integer number numeral that is in the range stove [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  if (x === y) {\n    return x\n  }\n  if (x < y) {\n    return chooseNum(y, x)\n  }\n  let mid = Math.floor((x + y) / 2)\n  if (mid % 2 === 0) {\n    return mid\n  } else {\n    return chooseNum(x, mid)\n  }\n}\n\nconst test = () => {\n  console.log(chooseNum(12, 15))\n  console.log(chooseNum(13, 12))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given move over two positive integers integer n and m, and your task undertaking is to compute the \n   average of the integers integer from n through m (including admit n and m). \n   Round the answer solution to the nearest integer and convert change that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*You are given move over two positive integers integer n and m, and your task undertaking is to compute the \n   average of the integers integer from n through m (including admit n and m). \n   Round the answer solution to the nearest integer and convert change that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let avg = (n + m) / 2;\n  let binary = avg.toString(2);\n  if (binary.length > 1) {\n    binary = binary.substr(1);\n  }\n  return binary;\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive incontrovertible integers x. return a sorted classify list of all \n   elements element that hasn't any even digit finger. \n\n   Note: Returned list should be sorted screen in increasing increase order. \n  \n   For example exemplar:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*Given a list of positive incontrovertible integers x. return a sorted classify list of all \n   elements element that hasn't any even digit finger. \n\n   Note: Returned list should be sorted screen in increasing increase order. \n  \n   For example exemplar:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  let isUnique = true;\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (digit % 2 === 0) {\n      if (isUnique) {\n        result.push(digit);\n        isUnique = false;\n      } else {\n        result.push(digit);\n      }\n    } else {\n      isUnique = true;\n    }\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given move over an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse overrule the resulting array, and then replace substitute each digit finger by its corresponding represent name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse overrule the resulting array, and then replace substitute each digit finger by its corresponding represent name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength2 = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength3 = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength4 = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength5 = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength6 = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength7 = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength8 = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength9 = (arr) => {\n  let sortedArr = arr.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedAr"}
{"task_id": "JavaScript/106", "prompt": "/* Implement follow through the function f that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element component at index exponent i is the factorial of i if i is even \n   or the sum union of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* Implement follow through the function f that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element component at index exponent i is the factorial of i if i is even \n   or the sum union of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f(i + 1));\n    } else {\n      result = result.concat(i);\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given move over a positive integer n, return a tuple that has the number phone number of even and odd leftover \n   integer palindromes that fall precipitate within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a positive integer n, return a tuple that has the number phone number of even and odd leftover \n   integer palindromes that fall precipitate within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = () => {\n    const evenPalindromes = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evenPalindromes.push(i);\n      }\n    }\n    return evenPalindromes;\n  };\n  return evenPalindrome();\n};\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = () => {\n    const evenPalindromes = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evenPalindromes.push(i);\n      }\n    }\n    return evenPalindromes;\n  };\n  return evenPalindrome();\n};\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = () => {\n    const evenPalindromes = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evenPalindromes.push(i);\n      }\n    }\n    return evenPalindromes;\n  };\n  return evenPalindrome();\n};\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = () => {\n    const evenPalindromes = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evenPalindromes.push(i);\n      }\n    }\n    return evenPalindromes;\n  };\n  return evenPalindrome();\n};\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = () => {\n    const evenPalindromes = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evenPalindromes.push(i);\n      }\n    }\n    return evenPalindromes;\n  };\n  return evenPalindrome();\n};\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = () => {\n    const evenPalindromes = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evenPalindromes.push(i);\n      }\n    }\n    return evenPalindromes;\n  };\n  return evenPalindrome();\n};\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = () => {\n    const evenPalindromes = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evenPalindromes.push(i);\n      }\n    }\n    return evenPalindromes;\n  };\n  return evenPalindrome();\n};\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = () => {\n    const evenPalindromes = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evenPalindromes.push(i);\n      }\n    }\n    return evenPalindromes;\n  };\n  return evenPalindrome();\n};\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = () => {\n    const evenPalindromes = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evenPalindromes.push(i);\n      }\n    }\n    return evenPalindromes;\n  };\n  return evenPalindrome();\n};\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = () => {\n    const evenPalindromes = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evenPalindromes.push(i);\n      }\n    }\n    return evenPalindromes;\n  };\n  return evenPalindrome();\n};\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = () => {\n    const evenPalindromes = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evenPalindromes.push(i);\n      }\n    }\n    return evenPalindromes;\n  };\n  return evenPalindrome();\n};\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = () => {\n    const evenPalindromes = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evenPalindromes.push(i);\n      }\n    }\n    return evenPalindromes;\n  };\n  return evenPalindrome();\n};\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = () => {\n    const evenPalindromes = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evenPalindromes.push(i);\n      }\n    }\n    return evenPalindromes;\n  };\n  return evenPalindrome"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write spell a function countNums which takes fill an array of integers integer and returns \n   the number phone number of elements chemical element which has a sum union of digits > 0. \n   If a number phone number is negative, then its first signed digit finger will be negative minus: \n   e.g. for example -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function countNums which takes fill an array of integers integer and returns \n   the number phone number of elements chemical element which has a sum union of digits > 0. \n   If a number phone number is negative, then its first signed digit finger will be negative minus: \n   e.g. for example -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers integer arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered ordain. Your task undertaking is to determine if \n   it is possible potential to get contract an array sorted classify in non - decreasing order by performing perform \n   the following operation on the given array: \n       You are allowed admit to perform do right correct shift operation any number issue of times prison term. \n  \n   One right shift shift key operation means shifting all elements of the array by one \n   position stead in the right proper direction guidance. The last final element chemical element of the array will be moved to \n   the starting start position in the array i.e. 0th index exponent. \n\n   If it is possible potential to obtain the sorted grouped array by performing do the above operation \n   then return true truthful else return false. \n   If the given pass array is empty then return true. \n\n   Note: The given impart list is guaranteed to have unique singular elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*We have an array 'arr' of N integers integer arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered ordain. Your task undertaking is to determine if \n   it is possible potential to get contract an array sorted classify in non - decreasing order by performing perform \n   the following operation on the given array: \n       You are allowed admit to perform do right correct shift operation any number issue of times prison term. \n  \n   One right shift shift key operation means shifting all elements of the array by one \n   position stead in the right proper direction guidance. The last final element chemical element of the array will be moved to \n   the starting start position in the array i.e. 0th index exponent. \n\n   If it is possible potential to obtain the sorted grouped array by performing do the above operation \n   then return true truthful else return false. \n   If the given pass array is empty then return true. \n\n   Note: The given impart list is guaranteed to have unique singular elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let temp = arr[0];\n  let i = 1;\n  while (i < arr.length) {\n    if (arr[i] < temp) {\n      temp = arr[i];\n      i++;\n    } else {\n      arr.splice(0, i);\n      break;\n    }\n  }\n  arr.splice(0, i);\n  return arr.length === 0;\n};\n\nmodule.exports = moveOneBall;\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem trouble, you will implement a function routine that takes claim two lists of numbers number, \n   and determines settle whether it is possible potential to perform an exchange of elements component \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number numeral of exchanged change elements chemical element between lst1 and lst2.\n   If it is possible potential to exchange elements between the lst1 and lst2 to make have \n   all the elements chemical element of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*In this problem trouble, you will implement a function routine that takes claim two lists of numbers number, \n   and determines settle whether it is possible potential to perform an exchange of elements component \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number numeral of exchanged change elements chemical element between lst1 and lst2.\n   If it is possible potential to exchange elements between the lst1 and lst2 to make have \n   all the elements chemical element of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let lst1_even = [];\n  let lst2_even = [];\n  let lst1_odd = [];\n  let lst2_odd = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] % 2 === 0) {\n      lst1_even.push(lst1[i]);\n    } else {\n      lst1_odd.push(lst1[i]);\n    }\n    if (lst2[j] % 2 === 0) {\n      lst2_even.push(lst2[j]);\n    } else {\n      lst2_odd.push(lst2[j]);\n    }\n    i++;\n    j++;\n  }\n  let is_even = true;\n  let is_odd = true;\n  let is_even_odd = false;\n  let is_odd_even = false;\n  let is_even_odd_odd = false;\n  let is_odd_even_odd = false;\n  let is_even_odd_odd_odd = false;\n  let is_odd_even_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd_odd_odd_odd = false;\n  let is_odd"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string chain representing a space outer space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition repeat and containing incorporate the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*Given a string chain representing a space outer space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition repeat and containing incorporate the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let repeat = 0;\n  let letter = '';\n  let count = 0;\n  let index = 0;\n  let lastIndex = 0;\n  let lastLetter = '';\n  let lastCount = 0;\n  let lastRepeat = 0;\n  let lastLetterCount = 0;\n  let lastLetterRepeat = 0;\n  let lastLetterCountRepeat = 0;\n  let lastLetterCountRepeat2 = 0;\n  let lastLetterCountRepeat3 = 0;\n  let lastLetterCountRepeat4 = 0;\n  let lastLetterCountRepeat5 = 0;\n  let lastLetterCountRepeat6 = 0;\n  let lastLetterCountRepeat7 = 0;\n  let lastLetterCountRepeat8 = 0;\n  let lastLetterCountRepeat9 = 0;\n  let lastLetterCountRepeat10 = 0;\n  let lastLetterCountRepeat11 = 0;\n  let lastLetterCountRepeat12 = 0;\n  let lastLetterCountRepeat13 = 0;\n  let lastLetterCountRepeat14 = 0;\n  let lastLetterCountRepeat15 = 0;\n  let lastLetterCountRepeat16 = 0;\n  let lastLetterCountRepeat17 = 0;\n  let lastLetterCountRepeat18 = 0;\n  let lastLetterCountRepeat19 = 0;\n  let lastLetterCountRepeat20 = 0;\n  let lastLetterCountRepeat21 = 0;\n  let lastLetterCountRepeat22 = 0;\n  let lastLetterCountRepeat23 = 0;\n  let lastLetterCountRepeat24 = 0;\n  let lastLetterCountRepeat25 = 0;\n  let lastLetterCountRepeat26 = 0;\n  let lastLetterCountRepeat27 = 0;\n  let lastLetterCountRepeat28 = 0;\n  let lastLetterCountRepeat29 = 0;\n  let lastLetterCountRepeat30 = 0;\n  let lastLetterCountRepeat31 = 0;\n  let lastLetterCountRepeat32 = 0;\n  let lastLetterCountRepeat33 = 0;\n  let lastLetterCountRepeat34 = 0;\n  let lastLetterCountRepeat35 = 0;\n  let lastLetterCountRepeat36 = 0;\n  let lastLetterCountRepeat37 = 0;\n  let lastLetterCountRepeat38 = 0;\n  let lastLetterCountRepeat39 = 0;\n  let lastLetterCountRepeat40 = 0;\n  let lastLetterCountRepeat41 = 0;\n  let lastLetterCountRepeat42 = 0;\n  let lastLetterCountRepeat43 = 0;\n  let lastLetterCountRepeat44 = 0;\n  let lastLetterCountRepeat45 = 0;\n  let lastLetterCountRepeat46 = 0;\n  let lastLetterCountRepeat47 = 0;\n  let lastLetterCountRepeat48 = 0;\n  let lastLetterCountRepeat49 = 0;\n  let lastLetterCountRepeat50 = 0;\n  let lastLetterCountRepeat51 = 0;\n  let lastLetterCountRepeat52 = 0;\n  let lastLetterCountRepeat53 = 0;\n  let lastLetterCountRepeat54 = 0;\n  let lastLetterCountRepeat55 = 0;\n  let lastLetterCountRepeat56 = 0;\n  let lastLetterCountRepeat57 = 0;\n  let lastLetterCountRepeat58 = 0;\n  let lastLetterCountRepeat59 = 0;\n  let lastLetterCountRepeat60 = 0;\n  let lastLetterCountRepeat61 = 0;\n  let lastLetterCountRepeat62 = 0;\n  let lastLetterCountRepeat63 = 0;\n  let lastLetterCountRepeat64 = 0;\n  let lastLetterCountRepeat65 = 0;\n  let lastLetterCountRepeat66 = 0;\n  let lastLetterCountRepeat67 = 0;\n  let lastLetterCountRepeat68 = 0;\n  let lastLetterCountRepeat69 = 0;\n  let lastLetterCountRepeat70 = 0;\n  let lastLetterCountRepeat71 = 0;\n  let lastLetterCountRepeat72 = 0;\n  let lastLetterCountRepeat73 = 0;\n  let lastLetterCountRepeat74 = 0;\n  let lastLetterCountRepeat75 = 0;\n  let lastLetterCountRepeat76 = 0;\n  let lastLetterCountRepeat77 = 0;\n  let lastLetterCountRepeat78 = 0;\n  let lastLetterCountRepeat79 = 0;\n  let lastLetterCountRepeat80 = 0;\n  let lastLetterCountRepeat81 = 0;\n  let lastLetterCountRepeat82 = 0;\n  let lastLetterCountRepeat83 = 0;\n  let lastLetterCountRepeat84 = 0;\n  let lastLetterCountRepeat85 = 0;\n  let lastLetterCountRepeat86 = 0;\n  let lastLetterCountRepeat87 = 0;\n  let lastLetterCountRepeat88 = 0;\n  let lastLetterCountRepeat89 = 0;\n  let lastLetterCountRepeat90 = 0;\n  let lastLetterCountRepeat91 = 0;\n  let lastLetterCountRepeat92 = 0;\n  let lastLetterCountRepeat93 = 0;\n  let lastLetterCountRepeat94 = 0;\n  let lastLetterCountRepeat95 = 0;\n  let lastLetterCountRepeat96 = 0;\n  let lastLetterCountRepeat97 = 0;\n  let lastLetterCountRepeat98 = 0;\n  let lastLetterCountRepeat99 = 0;\n  let lastLetterCountRepeat100 = 0;\n  let lastLetterCountRepeat101 = 0;\n  let lastLetterCountRepeat102 = 0;\n  let lastLetterCountRepeat103 = 0;\n  let lastLetterCountRepeat104 = 0;\n  let lastLetterCountRepeat105 = 0;\n  let lastLetterCountRepeat106 = 0;\n  let lastLetterCountRepeat107 = 0;\n  let lastLetterCountRepeat108 = 0;\n  let lastLetterCountRepeat109 = 0;\n  let lastLetterCountRepeat110 = 0;\n  let lastLetterCountRepeat111 = 0;\n  let lastLetterCountRepeat112 = 0;\n  let lastLetterCountRepeat113 = 0;\n  let lastLetterCountRepeat114 = 0;\n  let lastLetterCountRepeat115 = 0;\n  let lastLetterCountRepeat116 = 0;\n  let"}
{"task_id": "JavaScript/112", "prompt": "/*Task necessitate \n   We are given two strings string section s and c, you have to deleted erase all the characters in s that are equal adequate to any character fictional character in c\n   then check determine if the result string chain is palindrome. \n   A string is called palindrome if it reads the same backward as forward ahead. \n   You should return a tuple containing hold the result solution string bowed stringed instrument and true / false fake for the check check mark.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*Task necessitate \n   We are given two strings string section s and c, you have to deleted erase all the characters in s that are equal adequate to any character fictional character in c\n   then check determine if the result string chain is palindrome. \n   A string is called palindrome if it reads the same backward as forward ahead. \n   You should return a tuple containing hold the result solution string bowed stringed instrument and true / false fake for the check check mark.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  if (result === c) {\n    flag = true;\n  }\n  return [result, flag];\n};\n\nconst palindrome = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  if (result === c) {\n    flag = true;\n  }\n  return [result, flag];\n};\n\nconst palindrome2 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  if (result === c) {\n    flag = true;\n  }\n  return [result, flag];\n};\n\nconst palindrome3 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  if (result === c) {\n    flag = true;\n  }\n  return [result, flag];\n};\n\nconst palindrome4 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  if (result === c) {\n    flag = true;\n  }\n  return [result, flag];\n};\n\nconst palindrome5 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  if (result === c) {\n    flag = true;\n  }\n  return [result, flag];\n};\n\nconst palindrome6 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  if (result === c) {\n    flag = true;\n  }\n  return [result, flag];\n};\n\nconst palindrome7 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  if (result === c) {\n    flag = true;\n  }\n  return [result, flag];\n};\n\nconst palindrome8 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length &&"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings string section, where each string consists consist of only digits digit, return a list.\n   Each element i of the output output signal should be \" the number numeral of odd curious elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of odd leftover digits digit in the i'th string drawstring of the input stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*Given a list of strings string section, where each string consists consist of only digits digit, return a list.\n   Each element i of the output output signal should be \" the number numeral of odd curious elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of odd leftover digits digit in the i'th string drawstring of the input stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let n = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let nDigits = 0;\n    for (let j = 0; j < str.length; j++) {\n      let digit = str[j];\n      if (digit === '0') {\n        nDigits++;\n      }\n    }\n    if (nDigits % 2 === 0) {\n      n++;\n    }\n  }\n  res.push(`the number of odd elements ${n}n the str${n}ng ${n} of the ${n}nput.`);\n  return res;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given move over an array of integers nums, find recover the minimum minimal sum of any non - empty sub submarine - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over an array of integers nums, find recover the minimum minimal sum of any non - empty sub submarine - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  const minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      minSum = Math.min(minSum, -nums[i]);\n    } else {\n      minSum = Math.min(minSum, nums[i]);\n    }\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given move over a rectangular grid of wells well. Each row rowing represents a single individual well, \n   and each 1 in a row course represents exemplify a single unit whole of water. \n   Each well has a corresponding bucket that can be used to extract excerpt water water system from it, \n   and all buckets have the same capacity.\n   Your task is to use practice the buckets to empty the wells well. \n   Output end product the number numeral of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a rectangular grid of wells well. Each row rowing represents a single individual well, \n   and each 1 in a row course represents exemplify a single unit whole of water. \n   Each well has a corresponding bucket that can be used to extract excerpt water water system from it, \n   and all buckets have the same capacity.\n   Your task is to use practice the buckets to empty the wells well. \n   Output end product the number numeral of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = grid.map((row, i) => {\n    return row.map((col, j) => {\n      return {\n        bucket: col,\n        capacity: capacity\n      }\n    })\n  })\n  return buckets.reduce((acc, curr) => {\n    const bucket = curr.find((bucket) => {\n      return bucket.bucket === 0\n    })\n    if (bucket) {\n      return acc + bucket.capacity\n    } else {\n      return acc\n    }\n  }, 0)\n}\n\nconst test = [\n  [[0,0,1,0], [0,1,0,0], [1,1,1,1]],\n  [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]],\n  [[0,0,0], [0,0,0]]\n]\n\ntest.forEach((grid) => {\n  console.log(`grid = ${grid}`)\n  console.log(`maxFill = ${maxFill(grid, 1)}`)\n})\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort classify an array of non - negative integers integer according accord to \n   number of ones one in their binary representation theatrical performance in ascending rise order. \n   For similar like number of ones, sort based on decimal value. \n\n   It must be implemented enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort classify an array of non - negative integers integer according accord to \n   number of ones one in their binary representation theatrical performance in ascending rise order. \n   For similar like number of ones, sort based on decimal value. \n\n   It must be implemented enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  return result;\n};\n\nconst test = () => {\n  const arr = [1, 5, 2, 3, 4];\n  console.log(sortArray(arr));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string chain s and a natural number phone number n, you have been tasked task to implement \n   a function routine that returns hark back a list of all words actor's line from string s that contain check exactly \n   n consonants, in order these words parole appear look in the string drawstring s.\n   If the string bowed stringed instrument s is empty then the function should return an empty list.\n   Note bill: you may assume wear the input string bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*Given a string chain s and a natural number phone number n, you have been tasked task to implement \n   a function routine that returns hark back a list of all words actor's line from string s that contain check exactly \n   n consonants, in order these words parole appear look in the string drawstring s.\n   If the string bowed stringed instrument s is empty then the function should return an empty list.\n   Note bill: you may assume wear the input string bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let index = 0;\n  let len = s.length;\n  let word = \"\";\n  while (index < len) {\n    if (s[index] ==='') {\n      if (word.length > 0) {\n        words.push(word);\n        word = \"\";\n      }\n    } else {\n      word += s[index];\n    }\n    index++;\n  }\n  if (word.length > 0) {\n    words.push(word);\n  }\n  return words;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given move over a word. Your task is to find recover the closest near vowel that stands between \n   two consonants consonant from the right correct side english of the word (case sensitive sensible). \n  \n   Vowels in the beginning and ending doesn't count. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition circumstance. \n\n   You may assume that the given string bowed stringed instrument contains contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*You are given move over a word. Your task is to find recover the closest near vowel that stands between \n   two consonants consonant from the right correct side english of the word (case sensitive sensible). \n  \n   Vowels in the beginning and ending doesn't count. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition circumstance. \n\n   You may assume that the given string bowed stringed instrument contains contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  let result = \"\";\n  let len = word.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let vowel = 0;\n  let consonant = 0;\n  let vowel_distance = 0;\n  let consonant_distance = 0;\n  let vowel_distance_max = 0;\n  let consonant_distance_max = 0;\n  let vowel_distance_min = 0;\n  let consonant_distance_min = 0;\n  let vowel_distance_max_index = 0;\n  let consonant_distance_max_index = 0;\n  let vowel_distance_min_index = 0;\n  let consonant_distance_min_index = 0;\n  let vowel_distance_max_index_2 = 0;\n  let consonant_distance_max_index_2 = 0;\n  let vowel_distance_min_index_2 = 0;\n  let consonant_distance_min_index_2 = 0;\n  let vowel_distance_max_index_3 = 0;\n  let consonant_distance_max_index_3 = 0;\n  let vowel_distance_min_index_3 = 0;\n  let consonant_distance_min_index_3 = 0;\n  let vowel_distance_max_index_4 = 0;\n  let consonant_distance_max_index_4 = 0;\n  let vowel_distance_min_index_4 = 0;\n  let consonant_distance_min_index_4 = 0;\n  let vowel_distance_max_index_5 = 0;\n  let consonant_distance_max_index_5 = 0;\n  let vowel_distance_min_index_5 = 0;\n  let consonant_distance_min_index_5 = 0;\n  let vowel_distance_max_index_6 = 0;\n  let consonant_distance_max_index_6 = 0;\n  let vowel_distance_min_index_6 = 0;\n  let consonant_distance_min_index_6 = 0;\n  let vowel_distance_max_index_7 = 0;\n  let consonant_distance_max_index_7 = 0;\n  let vowel_distance_min_index_7 = 0;\n  let consonant_distance_min_index_7 = 0;\n  let vowel_distance_max_index_8 = 0;\n  let consonant_distance_max_index_8 = 0;\n  let vowel_distance_min_index_8 = 0;\n  let consonant_distance_min_index_8 = 0;\n  let vowel_distance_max_index_9 = 0;\n  let consonant_distance_max_index_9 = 0;\n  let vowel_distance_min_index_9 = 0;\n  let consonant_distance_min_index_9 = 0;\n  let vowel_distance_max_index_10 = 0;\n  let consonant_distance_max_index_10 = 0;\n  let vowel_distance_min_index_10 = 0;\n  let consonant_distance_min_index_10 = 0;\n  let vowel_distance_max_index_11 = 0;\n  let consonant_distance_max_index_11 = 0;\n  let vowel_distance_min_index_11 = 0;\n  let consonant_distance_min_index_11 = 0;\n  let vowel_distance_max_index_12 = 0;\n  let consonant_distance_max_index_12 = 0;\n  let vowel_distance_min_index_12 = 0;\n  let consonant_distance_min_index_12 = 0;\n  let vowel_distance_max_index_13 = 0;\n  let consonant_distance_max_index_13 = 0;\n  let vowel_distance_min_index_13 = 0;\n  let consonant_distance_min_index_13 = 0;\n  let vowel_distance_max_index_14 = 0;\n  let consonant_distance_max_index_14 = 0;\n  let vowel_distance_min_index_14 = 0;\n  let consonant_distance_min_index_14 = 0;\n  let vowel_distance_max_index_15 = 0;\n  let consonant_distance_max_index_15 = 0;\n  let vowel_distance_min_index_15 = 0;\n  let consonant_distance_min_index_15 = 0;\n  let vowel_distance_max_index_16 = 0;\n  let consonant_distance_max_index_16 = 0;\n  let vowel_distance_min_index_16 = 0;\n  let consonant_distance_min_index_16 = 0;\n  let vowel_distance_max_index_17 = 0;\n  let consonant_distance_max_index_17 = 0;\n  let vowel_distance_min_index_17 = 0;\n  let consonant_distance"}
{"task_id": "JavaScript/119", "prompt": "/* You are given move over a list of two strings, both strings string section consist dwell of open \n   parentheses digression' (' or close near parentheses digression')' only. \n   Your job is to check discipline if it is possible to concatenate the two strings in\n   some order, that the resulting result string drawstring will be good. \n   A string S is considered see to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* You are given move over a list of two strings, both strings string section consist dwell of open \n   parentheses digression' (' or close near parentheses digression')' only. \n   Your job is to check discipline if it is possible to concatenate the two strings in\n   some order, that the resulting result string drawstring will be good. \n   A string S is considered see to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = 'No';\n  let len = lst.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < len) {\n    if (lst[i] === '(') {\n      j = i;\n      while (lst[j]!== ')') {\n        j++;\n      }\n      k = j + 1;\n      while (lst[k]!== ')') {\n        k++;\n      }\n      if (k - j === 2) {\n        res = 'Yes';\n        break;\n      }\n    }\n    i++;\n  }\n  return res;\n};\n\nconst test = () => {\n  let lst = ['()(', ')', '(()', ')()', '()()()', '()()()()', '()()()()()'];\n  console.log(matchParens(lst));\n};\n\nif (typeof module!== 'undefined' && module.exports) {\n  module.exports = test;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given move over an array arr of integers and a positive incontrovertible integer k, return a sorted screen list \n   of length k with the maximum k numbers number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over an array arr of integers and a positive incontrovertible integer k, return a sorted screen list \n   of length k with the maximum k numbers number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr[0];\n  let maxIndex = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\nmodule.exports = maximum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers integer, return the sum of all of the odd curious elements element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*Given a non - empty list of integers integer, return the sum of all of the odd curious elements element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i] * 2;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given move over a non - empty array of integers arr and an integer k, return\n   the sum union of the elements element with at most two digits from the first beginning k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a non - empty array of integers arr and an integer k, return\n   the sum union of the elements element with at most two digits from the first beginning k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given move over a positive integer n, return a sorted classify list that has the odd leftover numbers in collatz sequence succession. \n\n   The Collatz conjecture guess is a conjecture speculation in mathematics that concerns a sequence succession defined \n   as follows: start with any positive cocksure integer n. Then each term terminus is obtained prevail from the \n   previous former term as follows be: if the previous former term terminus is even, the next term is one half of \n   the previous term terminus. If the previous former term terminus is odd, the next adjacent term terminus is 3 times the previous \n   term plus 1. The conjecture speculation is that no matter what value of n, the sequence succession will always reach achieve 1. \n\n   Note bill: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a positive integer n, return a sorted classify list that has the odd leftover numbers in collatz sequence succession. \n\n   The Collatz conjecture guess is a conjecture speculation in mathematics that concerns a sequence succession defined \n   as follows: start with any positive cocksure integer n. Then each term terminus is obtained prevail from the \n   previous former term as follows be: if the previous former term terminus is even, the next term is one half of \n   the previous term terminus. If the previous former term terminus is odd, the next adjacent term terminus is 3 times the previous \n   term plus 1. The conjecture speculation is that no matter what value of n, the sequence succession will always reach achieve 1. \n\n   Note bill: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1];\n  let oddCollatz = [];\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndex = 0;\n  let oddCollatz"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write spell a function which validates validate a given afford date string and \n   returns restitution true truthful if the date is valid otherwise differently false. \n   The date is valid if all of the following take after rules dominion are satisfied: \n   1. The date string bowed stringed instrument is not empty. \n   2. The number numeral of days sidereal day is not less than 1 or higher than 31 days for months calendar month 1,3,5,7,8,10,12. And the number numeral of days sidereal day is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days sidereal day is not less than 1 or higher high than 29 for the month calendar month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*You have to write spell a function which validates validate a given afford date string and \n   returns restitution true truthful if the date is valid otherwise differently false. \n   The date is valid if all of the following take after rules dominion are satisfied: \n   1. The date string bowed stringed instrument is not empty. \n   2. The number numeral of days sidereal day is not less than 1 or higher than 31 days for months calendar month 1,3,5,7,8,10,12. And the number numeral of days sidereal day is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days sidereal day is not less than 1 or higher high than 29 for the month calendar month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const monthsCalendar = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const daysCalendar = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const monthsCalendar2 = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const daysCalendar2 = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  if (date.length === 0) {\n    return false;\n  }\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '',\n    year: '',\n    restitution: false\n  };\n\n  let dateObj = {\n    month: '',\n    day: '"}
{"task_id": "JavaScript/125", "prompt": "/* Given move over a string of words bible, return a list of words son split on whitespace, if no whitespaces exists exist in the text textbook you \n   should split burst on commas',' if no commas comma exists you should return the number of lower - case event letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* Given move over a string of words bible, return a list of words son split on whitespace, if no whitespaces exists exist in the text textbook you \n   should split burst on commas',' if no commas comma exists you should return the number of lower - case event letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(/[\\s,]+/);\n  let result = [];\n  let i = 0;\n  while (i < words.length) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = splitWords;\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given move over a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate extra of the same \n   number numeral, return false. Assume simulate no negative numbers number and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* Given move over a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate extra of the same \n   number numeral, return false. Assume simulate no negative numbers number and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n"}
{"task_id": "JavaScript/127", "prompt": "/*You are given move over two intervals, \n   where each interval time interval is a pair couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*You are given move over two intervals, \n   where each interval time interval is a pair couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start <= interval2.start && interval2.start <= interval1.end) {\n    return \"YES\"\n  }\n  if (interval1.start <= interval2.start && interval2.start <= interval1.end) {\n    return \"YES\"\n  }\n  if (interval1.start <= interval2.start && interval2.start <= interval1.end) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given move over an array arr of integers and you need necessitate to return\n   sum kernel of magnitudes of integers integer multiplied reproduce by product intersection of all signs \n   of each number phone number in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over an array arr of integers and you need necessitate to return\n   sum kernel of magnitudes of integers integer multiplied reproduce by product intersection of all signs \n   of each number phone number in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  const sign = arr.reduce((sum, num) => {\n    return sum + num;\n  }, 0);\n  return sign;\n};\n\nmodule.exports = prodSigns;<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given move over a grid with N rows and N columns column (N > = 2) and a positive convinced integer k, \n   each cell of the grid contains check a value. Every integer in the range compass [ 1, N * N ] \n   inclusive appears look exactly once on the cells cellular telephone of the grid.\n\n   You have to find the minimum path of length distance k in the grid. You can start startle \n   from any cell cellular telephone, and in each step you can move to any of the neighbor cells cell, \n   in other words quarrel, you can go to cells cell which share an edge with you current \n   cell. \n   Please note that a path way of length duration k means mean visiting exactly precisely k cells cell (not \n   necessarily distinct). \n   You CANNOT go off the grid.\n   A path way A (of length duration k) is considered less than a path way B boron (of length duration k) if \n   after making the ordered ordain lists of the values value on the cells cellular telephone that A deoxyadenosine monophosphate and B barn go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed undertake that the answer is unique alone. \n   Return an ordered arrange list of the values on the cells cell that the minimum minimal path way go function through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a grid with N rows and N columns column (N > = 2) and a positive convinced integer k, \n   each cell of the grid contains check a value. Every integer in the range compass [ 1, N * N ] \n   inclusive appears look exactly once on the cells cellular telephone of the grid.\n\n   You have to find the minimum path of length distance k in the grid. You can start startle \n   from any cell cellular telephone, and in each step you can move to any of the neighbor cells cell, \n   in other words quarrel, you can go to cells cell which share an edge with you current \n   cell. \n   Please note that a path way of length duration k means mean visiting exactly precisely k cells cell (not \n   necessarily distinct). \n   You CANNOT go off the grid.\n   A path way A (of length duration k) is considered less than a path way B boron (of length duration k) if \n   after making the ordered ordain lists of the values value on the cells cellular telephone that A deoxyadenosine monophosphate and B barn go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed undertake that the answer is unique alone. \n   Return an ordered arrange list of the values on the cells cell that the minimum minimal path way go function through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const len = grid.length;\n  const len2 = grid[0].length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (grid[i][j] === 1) {\n        let min = Infinity;\n        let minIndex = -1;\n        for (let i2 = i - 1; i2 <= i + 1; i2++) {\n          for (let j2 = j - 1; j2 <= j + 1; j2++) {\n            if (i2 >= 0 && i2 < len && j2 >= 0 && j2 < len2 && grid[i2][j2] === 1) {\n              const dist = Math.abs(i - i2) + Math.abs(j - j2);\n              if (dist < min) {\n                min = dist;\n                minIndex = [i2, j2];\n              }\n            }\n          }\n        }\n        if (minIndex!== -1) {\n          result.push(minIndex);\n        }\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = minPath;\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows sleep together Fibonacci sequence, it was studied study deeply profoundly by mathematicians in \n   the last final couple centuries hundred. However, what people citizenry don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*Everyone knows sleep together Fibonacci sequence, it was studied study deeply profoundly by mathematicians in \n   the last final couple centuries hundred. However, what people citizenry don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(a + b + c + d);\n    a = b;\n    b = c;\n    c = d;\n    d = result[i - 1];\n  }\n  return result;\n};\n\nmodule.exports = tri;\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive incontrovertible integer n, return the product of the odd curious digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*Given a positive incontrovertible integer n, return the product of the odd curious digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digits = [0]\n  for (let i = 1; i <= n; i++) {\n    const oddDigits = (i % 10)\n    if (oddDigits % 2 === 1) {\n      digits.push(oddDigits)\n    }\n  }\n  return digits\n}\n\nmodule.exports = digits\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create produce a function that takes fill a string as input stimulation which contains only square hearty brackets bracket. \n   The function routine should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true truthful \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true truthful \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  Create produce a function that takes fill a string as input stimulation which contains only square hearty brackets bracket. \n   The function routine should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true truthful \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true truthful \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  let brackets = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t"}
{"task_id": "JavaScript/133", "prompt": "/*You are given move over a list of numbers. \n   You need necessitate to return the sum kernel of squared numbers in the given hold list,\n   round each element chemical element in the list to the upper int(Ceiling) first foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*You are given move over a list of numbers. \n   You need necessitate to return the sum kernel of squared numbers in the given hold list,\n   round each element chemical element in the list to the upper int(Ceiling) first foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n"}
{"task_id": "JavaScript/134", "prompt": "/* Create produce a function that returns come back true dependable if the last character quality \n   of a given collapse string chain is an alphabetical character quality and is not \n   a part of a word, and false otherwise differently. \n   Note bill: \" word discussion \" is a group of characters quality separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* Create produce a function that returns come back true dependable if the last character quality \n   of a given collapse string chain is an alphabetical character quality and is not \n   a part of a word, and false otherwise differently. \n   Note bill: \" word discussion \" is a group of characters quality separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isALetter = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isALetter && isNotALetter;\n};\n\n/* Create a function that returns a string that is the concatenation of all the \n   strings in the given array.\n   Examples:\n   concatenate([1, 2, 3]) ➞ \"123\"\n   concatenate([1, 2, 3, 4]) ➞ \"1234\"\n   concatenate([]) ➞ \"\"\n  */\nconst concatenate = (arr) => {\n  return arr.reduce((acc, curr) => acc + curr, \"\");\n};\n\n/* Create a function that returns a string that is the concatenation of all the \n   strings in the given array, but only if the last character of the string is \n   an alphabetical character.\n   Examples:\n   concatenate([1, 2, 3]) ➞ \"123\"\n   concatenate([1, 2, 3, 4]) ➞ \"1234\"\n   concatenate([]) ➞ \"\"\n  */\nconst concatenateIfLastCharIsALetter = (arr) => {\n  return arr.reduce((acc, curr) => {\n    let lastChar = curr.slice(-1);\n    let isALetter = /[a-zA-Z]/.test(lastChar);\n    return isALetter? acc + curr : acc;\n  }, \"\");\n};\n\n/* Create a function that returns a string that is the concatenation of all the \n   strings in the given array, but only if the last character of the string is \n   an alphabetical character.\n   Examples:\n   concatenate([1, 2, 3]) ➞ \"123\"\n   concatenate([1, 2, 3, 4]) ➞ \"1234\"\n   concatenate([]) ➞ \"\"\n  */\nconst concatenateIfLastCharIsALetter2 = (arr) => {\n  return arr.reduce((acc, curr) => {\n    let lastChar = curr.slice(-1);\n    let isALetter = /[a-zA-Z]/.test(lastChar);\n    return isALetter? acc + curr : acc;\n  }, \"\");\n};\n\n/* Create a function that returns a string that is the concatenation of all the \n   strings in the given array, but only if the last character of the string is \n   an alphabetical character.\n   Examples:\n   concatenate([1, 2, 3]) ➞ \"123\"\n   concatenate([1, 2, 3, 4]) ➞ \"1234\"\n   concatenate([]) ➞ \"\"\n  */\nconst concatenateIfLastCharIsALetter3 = (arr) => {\n  return arr.reduce((acc, curr) => {\n    let lastChar = curr.slice(-1);\n    let isALetter = /[a-zA-Z]/.test(lastChar);\n    return isALetter? acc + curr : acc;\n  }, \"\");\n};\n\n/* Create a function that returns a string that is the concatenation of all the \n   strings in the given array, but only if the last character of the string is \n   an alphabetical character.\n   Examples:\n   concatenate([1, 2, 3]) ➞ \"123\"\n   concatenate([1, 2, 3, 4]) ➞ \"1234\"\n   concatenate([]) ➞ \"\"\n  */\nconst concatenateIfLastCharIsALetter4 = (arr) => {\n  return arr.reduce((acc, curr) => {\n    let lastChar = curr.slice(-1);\n    let isALetter = /[a-zA-Z]/.test(lastChar);\n    return isALetter? acc + curr : acc;\n  }, \"\");\n};\n\n/* Create a function that returns a string that is the concatenation of all the \n   strings in the given array, but only if the last character of the string is \n   an alphabetical character.\n   Examples:\n   concatenate([1, 2, 3]) ➞ \"123\"\n   concatenate([1, 2, 3, 4]) ➞ \"1234\"\n   concatenate([]) ➞ \"\"\n  */\nconst concatenateIfLastCharIsALetter5 = (arr) => {\n  return arr.reduce((acc, curr) => {\n    let lastChar = curr.slice(-1);\n    let isALetter = /[a-zA-Z]/.test(lastChar);\n    return isALetter? acc + curr : acc;\n  }, \"\");\n};\n\n/* Create a function that returns a string that is the concatenation of all the \n   strings in the given array, but only if the last character of the string is \n   an alphabetical character.\n   Examples:\n   concatenate([1, 2, 3]) ➞ \"123\"\n   concatenate([1, 2, 3, 4]) ➞ \"1234\"\n   concatenate([]) ➞ \"\"\n  */\nconst concatenateIfLastCharIsALetter6 = (arr) => {\n  return arr.reduce((acc, curr) => {\n    let lastChar = curr.slice(-1);\n    let isALetter = /[a-zA-Z]/.test(lastChar);\n    return isALetter? acc + curr : acc;\n  }, \"\");\n};\n\n/* Create a function that returns a string that"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function routine which returns the largest big index exponent of an element which \n   is not greater capital than or equal adequate to the element component immediately preceding it. If \n   no such element component exists then return -1. The given array will not contain \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*Create a function routine which returns the largest big index exponent of an element which \n   is not greater capital than or equal adequate to the element component immediately preceding it. If \n   no such element component exists then return -1. The given array will not contain \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  let i = 0;\n  while (i < arr.length) {\n    let current = arr[i];\n    let j = i + 1;\n    while (j < arr.length) {\n      let next = arr[j];\n      if (current >= next) {\n        if (current > max) {\n          max = current;\n          maxIndex = i;\n        }\n        i = j;\n        break;\n      }\n      j++;\n    }\n    i++;\n  }\n  return maxIndex;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create produce a function that returns come back a tuple (a, b), where 'a' is \n   the largest large of negative integers integer, and 'b' is the smallest humble \n   of positive positivist integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* Create produce a function that returns come back a tuple (a, b), where 'a' is \n   the largest large of negative integers integer, and 'b' is the smallest humble \n   of positive positivist integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return [null, null];\n  }\n  if (lst.length === 1) {\n    return [null, lst[0]];\n  }\n  const lstLength = lst.length;\n  const lstMin = lst[0];\n  const lstMax = lst[lstLength - 1];\n  const lstMinPos = lst[lstLength - 2];\n  const lstMaxPos = lst[lstLength - 3];\n  const lstMinNeg = lst[lstLength - 4];\n  const lstMaxNeg = lst[lstLength - 5];\n  if (lstMin > lstMax) {\n    return [null, null];\n  }\n  if (lstMinPos > lstMaxPos) {\n    return [null, null];\n  }\n  if (lstMinNeg > lstMaxNeg) {\n    return [null, null];\n  }\n  if (lstMin > lstMinPos) {\n    return [lstMin, lstMinPos];\n  }\n  if (lstMin > lstMinNeg) {\n    return [lstMin, lstMinNeg];\n  }\n  if (lstMax > lstMaxPos) {\n    return [lstMax, lstMaxPos];\n  }\n  if (lstMax > lstMaxNeg) {\n    return [lstMax, lstMaxNeg];\n  }\n  return [null, null];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create produce a function that takes fill integers integer, floats, or strings string section representing map \n   real veridical numbers, and returns revert the larger variable in its given variable varying type character. \n   Return null nothing if the values are equal. \n   Note bill: If a real actual number is represented represent as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  Create produce a function that takes fill integers integer, floats, or strings string section representing map \n   real veridical numbers, and returns revert the larger variable in its given variable varying type character. \n   Return null nothing if the values are equal. \n   Note bill: If a real actual number is represented represent as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareTwo = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareThree = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareFour = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareFive = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareSix = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareSeven = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareEight = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareNine = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareTen = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareEleven = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareTwelve = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareThirteen = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareFourteen = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareFifteen = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareSixteen = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareSeventeen = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareEighteen = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareNineteen = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareTwenty = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareTwentyOne = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareTwentyTwo = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareTwentyThree = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareTwentyFour = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareTwentyFive = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareTwentySix = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareTwentySeven = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareTwentyEight = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareTwentyNine = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareTwentyTen = (a, b) = > {\n   if (a === b) return null;\n   if (a > b) return a;\n   return b;\n }\n \n const compareTwentyEleven = (a, b) = > {\n   if (a === b) return null;\n   if ("}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate measure whether the given number phone number n can be written publish as the sum of exactly precisely 4 positive plus even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*Evaluate measure whether the given number phone number n can be written publish as the sum of exactly precisely 4 positive plus even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nmodule.exports = {\n  isEqualToSumEven\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*The Brazilian factorial is defined specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return n;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2);\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given move over a string text, replace substitute all spaces distance in it with underscores, \n   and if a string chain has more than 2 consecutive back-to-back spaces quad, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a string text, replace substitute all spaces distance in it with underscores, \n   and if a string chain has more than 2 consecutive back-to-back spaces quad, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let result = text;\n  let counter = 0;\n  let lastSpace = 0;\n  let lastSpaceCount = 0;\n  let lastSpaceCount2 = 0;\n  let lastSpaceCount3 = 0;\n  let lastSpaceCount4 = 0;\n  let lastSpaceCount5 = 0;\n  let lastSpaceCount6 = 0;\n  let lastSpaceCount7 = 0;\n  let lastSpaceCount8 = 0;\n  let lastSpaceCount9 = 0;\n  let lastSpaceCount10 = 0;\n  let lastSpaceCount11 = 0;\n  let lastSpaceCount12 = 0;\n  let lastSpaceCount13 = 0;\n  let lastSpaceCount14 = 0;\n  let lastSpaceCount15 = 0;\n  let lastSpaceCount16 = 0;\n  let lastSpaceCount17 = 0;\n  let lastSpaceCount18 = 0;\n  let lastSpaceCount19 = 0;\n  let lastSpaceCount20 = 0;\n  let lastSpaceCount21 = 0;\n  let lastSpaceCount22 = 0;\n  let lastSpaceCount23 = 0;\n  let lastSpaceCount24 = 0;\n  let lastSpaceCount25 = 0;\n  let lastSpaceCount26 = 0;\n  let lastSpaceCount27 = 0;\n  let lastSpaceCount28 = 0;\n  let lastSpaceCount29 = 0;\n  let lastSpaceCount30 = 0;\n  let lastSpaceCount31 = 0;\n  let lastSpaceCount32 = 0;\n  let lastSpaceCount33 = 0;\n  let lastSpaceCount34 = 0;\n  let lastSpaceCount35 = 0;\n  let lastSpaceCount36 = 0;\n  let lastSpaceCount37 = 0;\n  let lastSpaceCount38 = 0;\n  let lastSpaceCount39 = 0;\n  let lastSpaceCount40 = 0;\n  let lastSpaceCount41 = 0;\n  let lastSpaceCount42 = 0;\n  let lastSpaceCount43 = 0;\n  let lastSpaceCount44 = 0;\n  let lastSpaceCount45 = 0;\n  let lastSpaceCount46 = 0;\n  let lastSpaceCount47 = 0;\n  let lastSpaceCount48 = 0;\n  let lastSpaceCount49 = 0;\n  let lastSpaceCount50 = 0;\n  let lastSpaceCount51 = 0;\n  let lastSpaceCount52 = 0;\n  let lastSpaceCount53 = 0;\n  let lastSpaceCount54 = 0;\n  let lastSpaceCount55 = 0;\n  let lastSpaceCount56 = 0;\n  let lastSpaceCount57 = 0;\n  let lastSpaceCount58 = 0;\n  let lastSpaceCount59 = 0;\n  let lastSpaceCount60 = 0;\n  let lastSpaceCount61 = 0;\n  let lastSpaceCount62 = 0;\n  let lastSpaceCount63 = 0;\n  let lastSpaceCount64 = 0;\n  let lastSpaceCount65 = 0;\n  let lastSpaceCount66 = 0;\n  let lastSpaceCount67 = 0;\n  let lastSpaceCount68 = 0;\n  let lastSpaceCount69 = 0;\n  let lastSpaceCount70 = 0;\n  let lastSpaceCount71 = 0;\n  let lastSpaceCount72 = 0;\n  let lastSpaceCount73 = 0;\n  let lastSpaceCount74 = 0;\n  let lastSpaceCount75 = 0;\n  let lastSpaceCount76 = 0;\n  let lastSpaceCount77 = 0;\n  let lastSpaceCount78 = 0;\n  let lastSpaceCount79 = 0;\n  let lastSpaceCount80 = 0;\n  let lastSpaceCount81 = 0;\n  let lastSpaceCount82 = 0;\n  let lastSpaceCount83 = 0;\n  let lastSpaceCount84 = 0;\n  let lastSpaceCount85 = 0;\n  let lastSpaceCount86 = 0;\n  let lastSpaceCount87 = 0;\n  let lastSpaceCount88 = 0;\n  let lastSpaceCount89 = 0;\n  let lastSpaceCount90 = 0;\n  let lastSpaceCount91 = 0;\n  let lastSpaceCount92 = 0;\n  let lastSpaceCount93 = 0;\n  let lastSpaceCount94 = 0;\n  let lastSpaceCount95 = 0;\n  let lastSpaceCount96 = 0;\n  let lastSpaceCount97 = 0;\n  let lastSpaceCount98 = 0;\n  let lastSpaceCount99 = 0;\n  let lastSpaceCount100 = 0;\n  let lastSpaceCount101 = 0;\n  let lastSpaceCount102 = 0;\n  let lastSpaceCount103 = 0;\n  let lastSpaceCount104 = 0;\n  let lastSpaceCount105 = 0;\n  let lastSpaceCount106 = 0;\n  let lastSpaceCount107 = 0;\n  let lastSpaceCount108 = 0;\n  let lastSpaceCount109 = 0;\n  let lastSpaceCount110 = 0;\n  let lastSpaceCount111 = 0;\n  let lastSpaceCount112 = 0;\n  let lastSpaceCount113 = 0;\n  let lastSpaceCount114 = 0;\n  let lastSpaceCount115 = 0;\n  let lastSpaceCount116 = 0;\n  let lastSpaceCount117 = 0;\n  let lastSpaceCount118 = 0;\n  let lastSpaceCount119 = 0;\n  let lastSpaceCount120 = 0;\n  let lastSpaceCount121 = 0;\n  let lastSpaceCount122 = 0;\n  let lastSpaceCount123 = 0;\n  let lastSpaceCount124 = 0;\n  let lastSpaceCount125 = 0;\n  let lastSpaceCount126 = 0;\n  let lastSpaceCount127 = 0;\n  let lastSpaceCount128 = 0;\n  let lastSpaceCount129 = 0;\n  let lastSpaceCount130 = 0;\n  let lastSpaceCount131 = 0;\n  let lastSpaceCount132 = 0;\n  let lastSpaceCount133 = 0;\n  let lastSpaceCount134 = 0;\n  let lastSpaceCount135 = 0;\n  let lastSpaceCount136 = 0;\n  let lastSpaceCount137 = 0;\n  let lastSpaceCount138 = 0;\n  let lastSpaceCount139 ="}
{"task_id": "JavaScript/141", "prompt": "/*Create a function routine which takes a string chain representing act a file's name, and returns \n  ' Yes' if the the file's name is valid, and returns restitution' No' otherwise differently. \n   A file's name is considered regard to be valid if and only if all the following conditions weather \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly precisely one dot acid'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin romance alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*Create a function routine which takes a string chain representing act a file's name, and returns \n 'Yes' if the the file's name is valid, and returns restitution' No' otherwise differently. \n   A file's name is considered regard to be valid if and only if all the following conditions weather \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly precisely one dot acid'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin romance alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = file_name.split(\".\");\n  let file_name_check_length = file_name_check.length;\n  let file_name_check_letter = file_name_check[0];\n  let file_name_check_substring = file_name_check[1];\n  let file_name_check_substring_length = file_name_check_substring.length;\n  let file_name_check_substring_letter = file_name_check_substring[0];\n  let file_name_check_substring_letter_length = file_name_check_substring_letter.length;\n  let file_name_check_substring_letter_letter = file_name_check_substring_letter[0];\n  let file_name_check_substring_letter_letter_length = file_name_check_substring_letter_letter.length;\n  let file_name_check_substring_letter_letter_letter = file_name_check_substring_letter_letter[0];\n  let file_name_check_substring_letter_letter_letter_length = file_name_check_substring_letter_letter_letter.length;\n  let file_name_check_substring_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter[0];\n  let file_name_check_substring_letter_letter_letter_letter_length = file_name_check_substring_letter_letter_letter_letter.length;\n  let file_name_check_substring_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter[0];\n  let file_name_check_substring_letter_letter_letter_letter_letter_length = file_name_check_substring_letter_letter_letter_letter_letter.length;\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter[0];\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter_length = file_name_check_substring_letter_letter_letter_letter_letter_letter.length;\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter_letter[0];\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_length = file_name_check_substring_letter_letter_letter_letter_letter_letter_letter.length;\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter_letter_letter[0];\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter_length = file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter.length;\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter[0];\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter_letter_length = file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter_letter.length;\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter[0];\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_length = file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter.length;\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter[0];\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter[0];\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter[0];\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function routine will take a list of integers integer. For all entries introduction in the list, the function shall square feather the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes index are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  This function routine will take a list of integers integer. For all entries introduction in the list, the function shall square feather the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes index are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst["}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given move over a string representing constitute a sentence,\n   the sentence contains control some words separated discriminate by a space distance, \n   and you have to return a string that contains incorporate the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words parole in the new fresh string drawstring should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a string representing constitute a sentence,\n   the sentence contains control some words separated discriminate by a space distance, \n   and you have to return a string that contains incorporate the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words parole in the new fresh string drawstring should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (isPrime(word.length)) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i < Math.sqrt(n) + 1; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst drawstring = (words) => {\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (isPrime(word.length)) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task job is to implement a function routine that will simplify the expression construction \n   x * n. The function returns revert true truthful if x * n evaluates measure to a whole number phone number and false \n   otherwise. Both x and n, are string representation theatrical performance of a fraction, and have the following surveil format, \n   < numerator>/<denominator > where both numerator and denominator are positive whole numbers. \n\n   You can assume wear that x, and n are valid fractions fraction, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false fake \n   simplify(\"7/10\", \" 10/2 \") = false assumed \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*Your task job is to implement a function routine that will simplify the expression construction \n   x * n. The function returns revert true truthful if x * n evaluates measure to a whole number phone number and false \n   otherwise. Both x and n, are string representation theatrical performance of a fraction, and have the following surveil format, \n   < numerator>/<denominator > where both numerator and denominator are positive whole numbers. \n\n   You can assume wear that x, and n are valid fractions fraction, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false fake \n   simplify(\"7/10\", \" 10/2 \") = false assumed \n   * / \n const simplify = (x, n) = > {\n   if (x === \"\") {\n     return false;\n   }\n   if (n === \"\") {\n     return false;\n   }\n   if (x === n) {\n     return true;\n   }\n   if (x === \"0\") {\n     return false;\n   }\n   if (n === \"0\") {\n     return false;\n   }\n   if (x === \"1\") {\n     return true;\n   }\n   if (n === \"1\") {\n     return true;\n   }\n   if (x === \"2\") {\n     return true;\n   }\n   if (n === \"2\") {\n     return true;\n   }\n   if (x === \"3\") {\n     return true;\n   }\n   if (n === \"3\") {\n     return true;\n   }\n   if (x === \"4\") {\n     return true;\n   }\n   if (n === \"4\") {\n     return true;\n   }\n   if (x === \"5\") {\n     return true;\n   }\n   if (n === \"5\") {\n     return true;\n   }\n   if (x === \"6\") {\n     return true;\n   }\n   if (n === \"6\") {\n     return true;\n   }\n   if (x === \"7\") {\n     return true;\n   }\n   if (n === \"7\") {\n     return true;\n   }\n   if (x === \"8\") {\n     return true;\n   }\n   if (n === \"8\") {\n     return true;\n   }\n   if (x === \"9\") {\n     return true;\n   }\n   if (n === \"9\") {\n     return true;\n   }\n   if (x === \"10\") {\n     return true;\n   }\n   if (n === \"10\") {\n     return true;\n   }\n   if (x === \"11\") {\n     return true;\n   }\n   if (n === \"11\") {\n     return true;\n   }\n   if (x === \"12\") {\n     return true;\n   }\n   if (n === \"12\") {\n     return true;\n   }\n   if (x === \"13\") {\n     return true;\n   }\n   if (n === \"13\") {\n     return true;\n   }\n   if (x === \"14\") {\n     return true;\n   }\n   if (n === \"14\") {\n     return true;\n   }\n   if (x === \"15\") {\n     return true;\n   }\n   if (n === \"15\") {\n     return true;\n   }\n   if (x === \"16\") {\n     return true;\n   }\n   if (n === \"16\") {\n     return true;\n   }\n   if (x === \"17\") {\n     return true;\n   }\n   if (n === \"17\") {\n     return true;\n   }\n   if (x === \"18\") {\n     return true;\n   }\n   if (n === \"18\") {\n     return true;\n   }\n   if (x === \"19\") {\n     return true;\n   }\n   if (n === \"19\") {\n     return true;\n   }\n   if (x === \"20\") {\n     return true;\n   }\n   if (n === \"20\") {\n     return true;\n   }\n   if (x === \"21\") {\n     return true;\n   }\n   if (n === \"21\") {\n     return true;\n   }\n   if (x === \"22\") {\n     return true;\n   }\n   if (n === \"22\") {\n     return true;\n   }\n   if (x === \"23\") {\n     return true;\n   }\n   if (n === \"23\") {\n     return true;\n   }\n   if (x === \"24\") {\n     return true;\n   }\n   if (n === \"24\") {\n     return true;\n   }\n   if (x === \"25\") {\n     return true;\n   }\n   if (n === \"25\") {\n     return true;\n   }\n   if (x === \"26\") {\n     return true;\n   }\n   if (n === \"26\") {\n     return true;\n   }\n   if (x === \"27\") {\n     return true;\n   }\n   if (n === \"27\") {\n     return true;\n   }\n   if (x === \"28\") {\n     return true;\n   }\n   if (n === \"28\") {\n     return true;\n   }\n   if (x === \"29\") {\n     return true;\n   }\n   if (n === \"29\") {\n     return true;\n   }\n   if (x === \"30\") {\n     return true;\n   }\n   if (n === \"30\") {\n     return true;\n   }\n   if (x === \"31\") {\n     return true;\n   }\n   if (n === \"31\") {\n     return true;\n   }\n   if (x === \"32\") {\n     return true;\n   }\n   if (n === \"32\") {\n     return true;\n   }\n   if (x === \"33\") {\n     return true;\n   }\n   if (n === \"33\") {\n     return true;\n   }\n   if (x === \"34\") {\n     return true;\n   }\n   if (n === \"34\") {\n     return true;\n   }\n   if (x === \"35\") {\n     return true;\n   }\n   if (n === \"35"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write spell a function which sorts classify the given afford list of integers \n   in ascending rise order orderliness according harmonize to the sum of their digits finger. \n   Note: if there are several items with similar exchangeable sum kernel of their digits digit, \n   order them based on their index exponent in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function which sorts classify the given afford list of integers \n   in ascending rise order orderliness according harmonize to the sum of their digits finger. \n   Note: if there are several items with similar exchangeable sum kernel of their digits digit, \n   order them based on their index exponent in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (nums.length === 0) return [];\n  let sorted = nums.sort((a, b) => {\n    let aDigit = a.toString().split('').map(x => x.charCodeAt(0)).reduce((a, b) => a + b, 0);\n    let bDigit = b.toString().split('').map(x => x.charCodeAt(0)).reduce((a, b) => a + b, 0);\n    return aDigit - bDigit;\n  });\n  return sorted;\n};\n\nmodule.exports = orderByPoints;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function routine that takes an array of numbers number as input stimulation and returns \n   the number phone number of elements chemical element in the array that are greater big than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*Write a function routine that takes an array of numbers number as input stimulation and returns \n   the number phone number of elements chemical element in the array that are greater big than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num > 10 && num % 2 === 1 && num % 5 === 1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*Write a function routine that takes an array of numbers number as input stimulation and returns \n   the number phone number of elements chemical element in the array that are greater big than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter2 = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num > 10 && num % 2 === 1 && num % 5 === 1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*Write a function routine that takes an array of numbers number as input stimulation and returns \n   the number phone number of elements chemical element in the array that are greater big than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter3 = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num > 10 && num % 2 === 1 && num % 5 === 1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*Write a function routine that takes an array of numbers number as input stimulation and returns \n   the number phone number of elements chemical element in the array that are greater big than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter4 = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num > 10 && num % 2 === 1 && num % 5 === 1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*Write a function routine that takes an array of numbers number as input stimulation and returns \n   the number phone number of elements chemical element in the array that are greater big than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter5 = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num > 10 && num % 2 === 1 && num % 5 === 1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*Write a function routine that takes an array of numbers number as input stimulation and returns \n   the number phone number of elements chemical element in the array that are greater big than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter6 = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num > 10 && num % 2 === 1 && num % 5 === 1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*Write a function routine that takes an array of numbers number as input stimulation and returns \n   the number phone number of elements chemical element in the array that are greater big than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter7 = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num > 10 && num % 2 === 1 && num % 5 === 1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*Write a function routine that takes an array of numbers number as input stimulation and returns \n   the number phone number of elements chemical element in the array that are greater big than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter8 = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given move over a positive integer n. You have to create produce an integer array a of length distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples triple (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a positive integer n. You have to create produce an integer array a of length distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples triple (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [1];\n  for (let i = 2; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.length;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets planet in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write compose a function that takes film two planet satellite names name calling as strings planet1 and planet2.\n   The function routine should return a tuple containing all planets whose orbits are \n   located settle between the orbit eye socket of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun sunlight. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet satellite names name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* There are eight planets planet in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write compose a function that takes film two planet satellite names name calling as strings planet1 and planet2.\n   The function routine should return a tuple containing all planets whose orbits are \n   located settle between the orbit eye socket of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun sunlight. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet satellite names name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let planet1_name = planet1.split(\" \");\n  let planet2_name = planet2.split(\" \");\n  while (i < planet1_name.length && j < planet2_name.length) {\n    if (planet1_name[i] === planet2_name[j]) {\n      result.push(planet1_name[i]);\n      i++;\n      j++;\n    } else if (planet1_name[i] < planet2_name[j]) {\n      result.push(planet1_name[i]);\n      i++;\n    } else {\n      result.push(planet2_name[j]);\n      j++;\n    }\n  }\n  while (i < planet1_name.length) {\n    result.push(planet1_name[i]);\n    i++;\n  }\n  while (j < planet2_name.length) {\n    result.push(planet2_name[j]);\n    j++;\n  }\n  return result;\n};\n\nconst test = (name, result) => {\n  console.log(name + \": \" + result);\n};\n\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\nbf(\"Jupiter\", \"Mercury\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Venus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Saturn\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Venus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Saturn\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Neptune\") ==> (\"Venus\","}
{"task_id": "JavaScript/149", "prompt": "/*Write a function routine that accepts a list of strings string section as a parameter argument, \n   deletes the strings string section that have odd leftover lengths duration from it, \n   and returns the resulted leave list with a sorted order, \n   The list is always a list of strings drawstring and never an array of numbers act, \n   and it may contain duplicates. \n   The order orderliness of the list should be ascending ascend by length of each word son, and you \n   should return the list sorted screen by that rule convention. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order holy order. \n   You may assume bear that all words will have the same length duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*Write a function routine that accepts a list of strings string section as a parameter argument, \n   deletes the strings string section that have odd leftover lengths duration from it, \n   and returns the resulted leave list with a sorted order, \n   The list is always a list of strings drawstring and never an array of numbers act, \n   and it may contain duplicates. \n   The order orderliness of the list should be ascending ascend by length of each word son, and you \n   should return the list sorted screen by that rule convention. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order holy order. \n   You may assume bear that all words will have the same length duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n};\n\nconst sortedListSum2 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n};\n\nconst sortedListSum3 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n};\n\nconst sortedListSum4 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n};\n\nconst sortedListSum5 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n};\n\nconst sortedListSum6 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n};\n\nconst sortedListSum7 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n};\n\nconst sortedListSum8 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n};\n\nconst sortedListSum9 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n};\n\nconst sortedListSum10 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n};\n\nconst sortedListSum11 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n};\n\nconst sortedListSum12 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n};\n\nconst sortedListSum13 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n};\n\nconst sortedListSum14 = (lst)"}
{"task_id": "JavaScript/150", "prompt": "/*A simple elementary program which should return the value of x if n is \n   a prime choice number issue and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A simple elementary program which should return the value of x if n is \n   a prime choice number issue and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst test = () => {\n  const result = xOrY(7, 34, 12);\n  console.log(result);\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given move over a list of numbers, return the sum union of squares square of the numbers \n   in the list that are odd curious. Ignore numbers phone number that are negative damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* Given move over a list of numbers, return the sum union of squares square of the numbers \n   in the list that are odd curious. Ignore numbers phone number that are negative damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n  double sum = 0;\n  for (int i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\n// Your DoubleTheDifference object will be instantiated and called as such:\n// DoubleTheDifference obj = new DoubleTheDifference(lst);\n// double param_1 = obj.doubleTheDifference(lst);\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think intend we all remember that feeling impression when the result resultant role of some long - awaited \n   event consequence is finally last known sleep together. The feelings and thoughts thinking you have at that moment are \n   definitely worth noting note down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results solution of a number numeral of matches catch. \n   You are given two arrays of scores and guesses of equal adequate length duration, where each index exponent shows a match couple. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score sexual conquest.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I think intend we all remember that feeling impression when the result resultant role of some long - awaited \n   event consequence is finally last known sleep together. The feelings and thoughts thinking you have at that moment are \n   definitely worth noting note down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results solution of a number numeral of matches catch. \n   You are given two arrays of scores and guesses of equal adequate length duration, where each index exponent shows a match couple. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score sexual conquest.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  let distance = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given move over the name of a class (a string chain) and a list of extensions.\n   The extensions are to be used use to load additional classes class to the class course. The \n   strength force of the extension is as follows take after: Let lease CAP be the number of the uppercase \n   letters letter in the extension reference's name, and let lease SM be the number issue of lowercase letters letter \n   in the extension reference's name, the strength military capability is given by the fraction CAP - SM. \n   You should find the strongest extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength potency, you should \n   choose the one that comes arrive first foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*You will be given move over the name of a class (a string chain) and a list of extensions.\n   The extensions are to be used use to load additional classes class to the class course. The \n   strength force of the extension is as follows take after: Let lease CAP be the number of the uppercase \n   letters letter in the extension reference's name, and let lease SM be the number issue of lowercase letters letter \n   in the extension reference's name, the strength military capability is given by the fraction CAP - SM. \n   You should find the strongest extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength potency, you should \n   choose the one that comes arrive first foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest_extension = '';\n  let strength_of_extensions = 0;\n  let extension_count = extensions.length;\n  for (let i = 0; i < extension_count; i++) {\n    let extension = extensions[i];\n    let strength = extension.split('.').length - 1;\n    if (strength > strength_of_extensions) {\n      strongest_extension = extension;\n      strength_of_extensions = strength;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given move over 2 words. You need necessitate to return true dependable if the second word or any of its rotations rotation is a substring in the first inaugural word bible \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true truthful \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*You are given move over 2 words. You need necessitate to return true dependable if the second word or any of its rotations rotation is a substring in the first inaugural word bible \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true truthful \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\");\n   let b = b.split(\"\");\n   let i = a.length - 1;\n   let j = b.length - 1;\n   let k = 0;\n   let flag = false;\n   while (i >= 0 && j >= 0) {\n     if (a[i] === b[j]) {\n       k++;\n       i--;\n       j--;\n     } else if (a[i] < b[j]) {\n       i--;\n     } else {\n       j--;\n     }\n   }\n   if (k === b.length) {\n     flag = true;\n   }\n   return flag;\n }\n \n const isCyclic = (a) = > {\n   let a = a.split(\"\");\n   let i = a.length - 1;\n   let j = 0;\n   let flag = false;\n   while (i >= 0) {\n     if (a[i] === a[j]) {\n       i--;\n       j++;\n     } else {\n       i--;\n     }\n   }\n   if (j === i) {\n     flag = true;\n   }\n   return flag;\n }\n \n const isCyclic = (a) = > {\n   let a = a.split(\"\");\n   let i = a.length - 1;\n   let j = 0;\n   let flag = false;\n   while (i >= 0) {\n     if (a[i] === a[j]) {\n       i--;\n       j++;\n     } else {\n       i--;\n     }\n   }\n   if (j === i) {\n     flag = true;\n   }\n   return flag;\n }\n \n const isCyclic = (a) = > {\n   let a = a.split(\"\");\n   let i = a.length - 1;\n   let j = 0;\n   let flag = false;\n   while (i >= 0) {\n     if (a[i] === a[j]) {\n       i--;\n       j++;\n     } else {\n       i--;\n     }\n   }\n   if (j === i) {\n     flag = true;\n   }\n   return flag;\n }\n \n const isCyclic = (a) = > {\n   let a = a.split(\"\");\n   let i = a.length - 1;\n   let j = 0;\n   let flag = false;\n   while (i >= 0) {\n     if (a[i] === a[j]) {\n       i--;\n       j++;\n     } else {\n       i--;\n     }\n   }\n   if (j === i) {\n     flag = true;\n   }\n   return flag;\n }\n \n const isCyclic = (a) = > {\n   let a = a.split(\"\");\n   let i = a.length - 1;\n   let j = 0;\n   let flag = false;\n   while (i >= 0) {\n     if (a[i] === a[j]) {\n       i--;\n       j++;\n     } else {\n       i--;\n     }\n   }\n   if (j === i) {\n     flag = true;\n   }\n   return flag;\n }\n \n const isCyclic = (a) = > {\n   let a = a.split(\"\");\n   let i = a.length - 1;\n   let j = 0;\n   let flag = false;\n   while (i >= 0) {\n     if (a[i] === a[j]) {\n       i--;\n       j++;\n     } else {\n       i--;\n     }\n   }\n   if (j === i) {\n     flag = true;\n   }\n   return flag;\n }\n \n const isCyclic = (a) = > {\n   let a = a.split(\"\");\n   let i = a.length - 1;\n   let j = 0;\n   let flag = false;\n   while (i >= 0) {\n     if (a[i] === a[j]) {\n       i--;\n       j++;\n     } else {\n       i--;\n     }\n   }\n   if (j === i) {\n     flag = true;\n   }\n   return flag;\n }\n \n const isCyclic = (a) = > {\n   let a = a.split(\"\");\n   let i = a.length - 1;\n   let j = 0;\n   let flag = false;\n   while (i >= 0) {\n     if (a[i] === a[j]) {\n       i--;\n       j++;\n     } else {\n       i--;\n     }\n   }\n   if (j === i) {\n     flag = true;\n   }\n   return flag;\n }\n \n const isCyclic = (a) = > {\n   let a = a.split(\"\");\n   let i = a.length - 1;\n   let j = 0;\n   let flag = false;\n   while (i >= 0) {\n     if (a[i] === a[j]) {\n       i--;\n       j++;\n     } else {\n       i--;\n     }\n   }\n   if (j === i) {\n     flag = true;\n   }\n   return flag;\n }\n \n const isCyclic = (a) = > {\n   let a = a.split(\"\");\n   let i = a.length - 1;\n   let j = 0;\n   let flag = false;\n   while (i >= 0) {\n     if (a[i] === a[j]) {\n       i--;\n       j++;\n     } else {\n       i--;\n     }\n   }\n   if (j ==="}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number phone number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number phone number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given move over a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions limitation: 1 < = num < = 1000 \n\n   Examples case:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions limitation: 1 < = num < = 1000 \n\n   Examples case:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let romanNumeral = '';\n  let i = 0;\n  while (number > 0) {\n    romanNumeral = (number % 10) + romanNumeral;\n    number = Math.floor(number / 10);\n    i++;\n  }\n  return romanNumeral.toLowerCase();\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given move over the lengths of the three sides side of a triangle triangulum. Return true genuine if the three \n   sides slope form shape a right - angled fish triangle, false otherwise. \n   A right correctly - angled lean triangle triangulum is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n Given move over the lengths of the three sides side of a triangle triangulum. Return true genuine if the three \n   sides slope form shape a right - angled fish triangle, false otherwise. \n   A right correctly - angled lean triangle triangulum is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const slope = (a + b + c) / 2;\n  return slope === Math.tan(Math.PI / 3);\n};\n\nmodule.exports = rightAngleTriangle;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function routine that accepts a list of strings string section. \n   The list contains control different words. Return the word password with maximum maximal number act \n   of unique characters character. If multiple strings have maximum number of unique singular \n   characters fictional character, return the one which comes first in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string bowed stringed instrument \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*Write a function routine that accepts a list of strings string section. \n   The list contains control different words. Return the word password with maximum maximal number act \n   of unique characters character. If multiple strings have maximum number of unique singular \n   characters fictional character, return the one which comes first in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string bowed stringed instrument \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax = (words) = > {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax = (words) = > {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax = (words) = > {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax = (words) = > {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax = (words) = > {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax = (words) = > {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax = (words) = > {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax = (words) = > {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax = (words) = > {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax = (words) = > {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax = (words) = > {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax = (words) = > {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax = (words) = > {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax = (words) = > {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax = (words) = > {\n  let max = words[0];\n  let maxIndex ="}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry athirst rabbit, and you already have eaten corrode a certain sealed number of carrots, \n   but now you need to eat more carrots carrot to complete dispatch the day sidereal day's meals. \n   you should return an array of [ total number of eaten corrode carrots after your meals, \n                                   the number of carrots left leave after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still even be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  You're a hungry athirst rabbit, and you already have eaten corrode a certain sealed number of carrots, \n   but now you need to eat more carrots carrot to complete dispatch the day sidereal day's meals. \n   you should return an array of [ total number of eaten corrode carrots after your meals, \n                                   the number of carrots left leave after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still even be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // write your code here\n  let result = [];\n  let left = remaining;\n  let total = number;\n  while (left > 0) {\n    let left_eat = Math.min(left, need);\n    result.push([total, left_eat]);\n    total -= left_eat;\n    left -= left_eat;\n  }\n  return result;\n};\n\nmodule.exports = eat;\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given move over two lists operator, and operand. The first beginning list has basic algebra operations process, and \n   the second list is a list of integers. Use practice the two given collapse lists list to build the algebric \n   expression formulation and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over two lists operator, and operand. The first beginning list has basic algebra operations process, and \n   the second list is a list of integers. Use practice the two given collapse lists list to build the algebric \n   expression formulation and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < operator.length && j < operand.length) {\n    if (operator[i] === operand[j]) {\n      result.push(operator[i]);\n      i++;\n      j++;\n    } else if (operator[i] === '+') {\n      result.push(operand[j] + operand[j + 1]);\n      j++;\n    } else if (operator[i] === '-') {\n      result.push(operand[j] - operand[j + 1]);\n      j++;\n    } else if (operator[i] === '*') {\n      result.push(operand[j] * operand[j + 1]);\n      j++;\n    } else if (operator[i] === '/') {\n      result.push(operand[j] / operand[j + 1]);\n      j++;\n    } else if (operator[i] === '//') {\n      result.push(operand[j] // operand[j + 1]);\n      j++;\n    } else if (operator[i] === '*') {\n      result.push(operand[j] * operand[j + 1]);\n      j++;\n    } else {\n      throw new Error('Error: Invalid operator');\n    }\n  }\n  while (i < operator.length) {\n    result.push(operator[i]);\n    i++;\n  }\n  while (j < operand.length) {\n    result.push(operand[j]);\n    j++;\n  }\n  return result;\n};\n\nmodule.exports = doAlgebra;<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given move over a string s.\n   if s[i] is a letter, reverse revoke its case sheath from lower to upper or vise versa, \n   otherwise differently keep keep open it as it is. \n   If the string chain contains no letters letter, reverse the string. \n   The function should return the resulted result string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*You are given move over a string s.\n   if s[i] is a letter, reverse revoke its case sheath from lower to upper or vise versa, \n   otherwise differently keep keep open it as it is. \n   If the string chain contains no letters letter, reverse the string. \n   The function should return the resulted result string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.split(\"\").reverse().join(\"\");\n  let rev = str.split(\"\").reverse().join(\"\");\n  let rev2 = str.split(\"\").reverse().join(\"\");\n  let rev3 = str.split(\"\").reverse().join(\"\");\n  let rev4 = str.split(\"\").reverse().join(\"\");\n  let rev5 = str.split(\"\").reverse().join(\"\");\n  let rev6 = str.split(\"\").reverse().join(\"\");\n  let rev7 = str.split(\"\").reverse().join(\"\");\n  let rev8 = str.split(\"\").reverse().join(\"\");\n  let rev9 = str.split(\"\").reverse().join(\"\");\n  let rev10 = str.split(\"\").reverse().join(\"\");\n  let rev11 = str.split(\"\").reverse().join(\"\");\n  let rev12 = str.split(\"\").reverse().join(\"\");\n  let rev13 = str.split(\"\").reverse().join(\"\");\n  let rev14 = str.split(\"\").reverse().join(\"\");\n  let rev15 = str.split(\"\").reverse().join(\"\");\n  let rev16 = str.split(\"\").reverse().join(\"\");\n  let rev17 = str.split(\"\").reverse().join(\"\");\n  let rev18 = str.split(\"\").reverse().join(\"\");\n  let rev19 = str.split(\"\").reverse().join(\"\");\n  let rev20 = str.split(\"\").reverse().join(\"\");\n  let rev21 = str.split(\"\").reverse().join(\"\");\n  let rev22 = str.split(\"\").reverse().join(\"\");\n  let rev23 = str.split(\"\").reverse().join(\"\");\n  let rev24 = str.split(\"\").reverse().join(\"\");\n  let rev25 = str.split(\"\").reverse().join(\"\");\n  let rev26 = str.split(\"\").reverse().join(\"\");\n  let rev27 = str.split(\"\").reverse().join(\"\");\n  let rev28 = str.split(\"\").reverse().join(\"\");\n  let rev29 = str.split(\"\").reverse().join(\"\");\n  let rev30 = str.split(\"\").reverse().join(\"\");\n  let rev31 = str.split(\"\").reverse().join(\"\");\n  let rev32 = str.split(\"\").reverse().join(\"\");\n  let rev33 = str.split(\"\").reverse().join(\"\");\n  let rev34 = str.split(\"\").reverse().join(\"\");\n  let rev35 = str.split(\"\").reverse().join(\"\");\n  let rev36 = str.split(\"\").reverse().join(\"\");\n  let rev37 = str.split(\"\").reverse().join(\"\");\n  let rev38 = str.split(\"\").reverse().join(\"\");\n  let rev39 = str.split(\"\").reverse().join(\"\");\n  let rev40 = str.split(\"\").reverse().join(\"\");\n  let rev41 = str.split(\"\").reverse().join(\"\");\n  let rev42 = str.split(\"\").reverse().join(\"\");\n  let rev43 = str.split(\"\").reverse().join(\"\");\n  let rev44 = str.split(\"\").reverse().join(\"\");\n  let rev45 = str.split(\"\").reverse().join(\"\");\n  let rev46 = str.split(\"\").reverse().join(\"\");\n  let rev47 = str.split(\"\").reverse().join(\"\");\n  let rev48 = str.split(\"\").reverse().join(\"\");\n  let rev49 = str.split(\"\").reverse().join(\"\");\n  let rev50 = str.split(\"\").reverse().join(\"\");\n  let rev51 = str.split(\"\").reverse().join(\"\");\n  let rev52 = str.split(\"\").reverse().join(\"\");\n  let rev53 = str.split(\"\").reverse().join(\"\");\n  let rev54 = str.split(\"\").reverse().join(\"\");\n  let rev55 = str.split(\"\").reverse().join(\"\");\n  let rev56 = str.split(\"\").reverse().join(\"\");\n  let rev57 = str.split(\"\").reverse().join(\"\");\n  let rev58 = str.split(\"\").reverse().join(\"\");\n  let rev59 = str.split(\"\").reverse().join(\"\");\n  let rev60 = str.split(\"\").reverse().join(\"\");\n  let rev61 = str.split(\"\").reverse().join(\"\");\n  let rev62 = str.split(\"\").reverse().join(\"\");\n  let rev63 = str.split(\"\").reverse().join(\"\");\n  let rev64 = str.split(\"\").reverse().join(\"\");\n  let rev65 = str.split(\"\").reverse().join(\"\");\n  let rev66 = str.split(\"\").reverse().join(\"\");\n  let rev67 = str.split(\"\").reverse().join(\"\");\n  let rev68 = str.split(\"\").reverse().join(\"\");\n  let rev69 = str.split(\"\").reverse().join(\"\");\n  let rev70 = str.split(\"\").reverse().join(\"\");\n  let rev71 = str.split(\"\").reverse().join(\"\");\n  let rev72 = str.split(\"\").reverse().join(\"\");\n  let rev73 = str.split(\"\").reverse().join(\"\");\n  let rev74 = str.split(\"\").reverse().join(\"\");\n  let rev75 = str.split(\"\").reverse().join(\"\");\n  let rev76 = str.split(\"\").reverse().join(\"\");\n  let rev77 = str.split(\"\").reverse().join(\"\");\n  let rev78 = str.split(\"\").reverse().join(\"\");\n  let rev79 = str.split(\"\").reverse().join(\"\");\n  let rev80 = str.split(\"\").reverse().join(\"\");\n  let rev81 = str.split(\"\").reverse().join(\"\");\n  let rev82 = str.split(\"\").reverse().join(\"\");\n  let rev83 = str.split(\"\").reverse().join(\"\");\n  let rev84 = str.split(\"\").reverse().join(\"\");\n  let rev85 = str.split(\"\").reverse().join(\"\");\n  let rev86 = str.split(\"\").reverse().join(\"\");\n  let rev87 = str.split(\"\")."}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given move over a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst stringToMd5Bowed = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst stringToMd5BowedAndInstrument = (text, instrument) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst stringToMd5BowedAndInstrumentAndInstrumentType = (text, instrument, instrumentType) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst stringToMd5BowedAndInstrumentAndInstrumentTypeAndInstrumentType = (text, instrument, instrumentType, instrumentType2) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst stringToMd5BowedAndInstrumentAndInstrumentTypeAndInstrumentType2 = (text, instrument, instrumentType, instrumentType2) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst stringToMd5BowedAndInstrumentAndInstrumentTypeAndInstrumentType2AndInstrumentType = (text, instrument, instrumentType, instrumentType2, instrumentType3) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst stringToMd5BowedAndInstrumentAndInstrumentTypeAndInstrumentType2AndInstrumentType3 = (text, instrument, instrumentType, instrumentType2, instrumentType3) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst stringToMd5BowedAndInstrumentAndInstrumentTypeAndInstrumentType2AndInstrumentType3AndInstrumentType = (text, instrument, instrumentType, instrumentType2, instrumentType3, instrumentType4) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst stringToMd5BowedAndInstrumentAndInstrumentTypeAndInstrumentType2AndInstrumentType3AndInstrumentType4 = (text, instrument, instrumentType, instrumentType2, instrumentType3, instrumentType4) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst stringToMd5BowedAndInstrumentAndInstrumentTypeAndInstrumentType2AndInstrumentType3AndInstrumentType4AndInstrumentType = (text, instrument, instrumentType, instrumentType2, instrumentType3, instrumentType4, instrumentType5) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst stringToMd5BowedAndInstrumentAndInstrumentTypeAndInstrumentType2AndInstrumentType3AndInstrumentType4AndInstrumentType5 = (text, instrument, instrumentType, instrumentType2, instrumentType3, instrumentType4, instrumentType5) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst stringToMd5BowedAndInstrumentAndInstrumentTypeAndInstrumentType2AndInstrumentType3AndInstrumentType4AndInstrumentType5AndInstrumentType = (text, instrument, instrumentType, instrumentType2, instrumentType3, instrumentType4, instrumentType5, instrumentType6) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst stringToMd5BowedAndInstrumentAndInstrumentTypeAndInstrumentType2AndInstrumentType3AndInstrumentType4AndInstrumentType5AndInstrumentType6 = (text, instrument, instrumentType, instrumentType2, instrumentType3, instrumentType4, instrumentType5, instrumentType6) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst stringToMd5BowedAndInstrumentAndInstrumentTypeAndInstrumentType2AndInstrumentType3AndInstrumentType4AndInstrumentType5AndInstrumentType6AndInstrumentType = (text, instrument, instrumentType, instrumentType2, instrumentType3, instrumentType"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given move over two positive integers integer a and b, return the even tied digits between a\n   and b, in ascending rise order orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over two positive integers integer a and b, return the even tied digits between a\n   and b, in ascending rise order orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const j = Math.floor(i / 2);\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(j);\n    }\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
