{"task_id": "JavaScript/0", "prompt": "/* Check match if in given pass list of numbers, are any two numbers closer to each other than \n   given hold threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "/* Check match if in given pass list of numbers, are any two numbers closer to each other than \n   given hold threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort(function(a, b) {\n    return a - b;\n  });\n\n  const minDistance = sortedNumbers.length - 1;\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    const distance = sortedNumbers[i] - sortedNumbers[i + 1];\n    if (distance < minDistance && distance < threshold) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nmodule.exports = hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input input signal to this function routine is a string containing incorporate multiple groups of nested nest parentheses. Your goal finish is to \n   separate those group into separate freestanding strings and return the list of those. \n   Separate disjoined groups group are balanced (each open brace couple is properly closed) and not nested within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "/* Input input signal to this function routine is a string containing incorporate multiple groups of nested nest parentheses. Your goal finish is to \n   separate those group into separate freestanding strings and return the list of those. \n   Separate disjoined groups group are balanced (each open brace couple is properly closed) and not nested within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let result = [];\n  let open_paren = 0;\n  let open_paren_count = 0;\n  let open_paren_count_max = 0;\n  let open_paren_count_min = 0;\n  let close_paren = 0;\n  let close_paren_count = 0;\n  let close_paren_count_max = 0;\n  let close_paren_count_min = 0;\n  let current_string = '';\n  let current_string_length = 0;\n  let current_string_index = 0;\n  let current_string_index_max = 0;\n  let current_string_index_min = 0;\n  let current_string_index_count = 0;\n  let current_string_index_count_max = 0;\n  let current_string_index_count_min = 0;\n  let current_string_index_count_max_max = 0;\n  let current_string_index_count_min_min = 0;\n  let current_string_index_count_max_min = 0;\n  let current_string_index_count_min_max = 0;\n  let current_string_index_count_max_max_max = 0;\n  let current_string_index_count_min_min_max = 0;\n  let current_string_index_count_max_min_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_max_max_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_max_max_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_max_max_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_max_max_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_max_max_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_max_max_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_max_max_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_max_max_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_max_max_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_max_max_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_max_min_max_max = 0;\n  let current_string_index_count_min_max_max_max = 0;\n  let current_string_index_count_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test quiz if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find witness the shortest palindrome that begins begin with a supplied string.\n   Algorithm idea estimate is simple: \n   - Find recover the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/* Test quiz if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find witness the shortest palindrome that begins begin with a supplied string.\n   Algorithm idea estimate is simple: \n   - Find recover the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const longestPostfixSuffix = longestPostfixSuffix(string);\n  const prefix = string.substring(0, longestPostfixSuffix.length);\n  const reverse = reverse(prefix);\n  return reverse + longestPostfixSuffix;\n}\n\n/* Find witness the shortest palindrome that begins begin with a supplied string.\n   Algorithm idea estimate is simple: \n   - Find recover the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst longestPostfixSuffix = (string) => {\n  const longestPostfixSuffix = longestPostfixSuffix(string);\n  const prefix = string.substring(0, longestPostfixSuffix.length);\n  const reverse = reverse(prefix);\n  return reverse + longestPostfixSuffix;\n}\n\n/* Find witness the shortest palindrome that begins begin with a supplied string.\n   Algorithm idea estimate is simple: \n   - Find recover the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst longestPostfixSuffix = (string) => {\n  const longestPostfixSuffix = longestPostfixSuffix(string);\n  const prefix = string.substring(0, longestPostfixSuffix.length);\n  const reverse = reverse(prefix);\n  return reverse + longestPostfixSuffix;\n}\n\n/* Find witness the shortest palindrome that begins begin with a supplied string.\n   Algorithm idea estimate is simple: \n   - Find recover the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst reverse = (string) => {\n  return string.split('').reverse().join('');\n}\n\n/* Find witness the shortest palindrome that begins begin with a supplied string.\n   Algorithm idea estimate is simple: \n   - Find recover the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst longestPostfixSuffix = (string) => {\n  const longestPostfixSuffix = longestPostfixSuffix(string);\n  const prefix = string.substring(0, longestPostfixSuffix.length);\n  const reverse = reverse(prefix);\n  return reverse + longestPostfixSuffix;\n}\n\n/* Find witness the shortest palindrome that begins begin with a supplied string.\n   Algorithm idea estimate is simple: \n   - Find recover the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst longestPostfixSuffix = (string) => {\n  const longestPostfixSuffix = longestPostfixSuffix(string);\n  const prefix = string.substring(0, longestPostfixSuffix.length);\n  const reverse = reverse(prefix);\n  return reverse + longestPostfixSuffix;\n}\n\n/* Find witness the shortest palindrome that begins begin with a supplied string.\n   Algorithm idea estimate is simple: \n   - Find recover the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst reverse = (string) => {\n  return string.split('').reverse().join('');\n}\n\n/* Find witness the shortest palindrome that begins begin with a supplied string.\n   Algorithm idea estimate is simple: \n   - Find recover the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst longestPostfixSuffix = (string) => {\n  const longestPostfixSuffix = longestPostfixSuffix(string);\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given grant a positive integer n, you have to make seduce a pile atomic pile of n levels grade of stones. \n   The first inaugural level has n stones stone. \n   The number of stones gem in the next future level is: \n       - the next following odd leftover number if n is odd curious. \n       - the next even number if n is even. \n   Return the number of stones in each level in a list, where element at index exponent \n   i represents the number of stones in the level degree (i+1).\n\n   Examples model:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant a positive integer n, you have to make seduce a pile atomic pile of n levels grade of stones. \n   The first inaugural level has n stones stone. \n   The number of stones gem in the next future level is: \n       - the next following odd leftover number if n is odd curious. \n       - the next even number if n is even. \n   Return the number of stones in each level in a list, where element at index exponent \n   i represents the number of stones in the level degree (i+1).\n\n   Examples model:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let [result, [level, [levelStones]]] = [0, []];\n  for (let i = 1; i <= n; i++) {\n    result = [...result,...levelStones];\n    levelStones = [...levelStones, i];\n    level = i;\n  }\n  return result;\n};\n\nconst makeAPile = (n) => {\n  let [result, [level, [levelStones]]] = [0, []];\n  for (let i = 1; i <= n; i++) {\n    result = [...result,...levelStones];\n    levelStones = [...levelStones, i];\n    level = i;\n  }\n  return result;\n};\n\nconst makeAPile = (n) => {\n  let [result, [level, [levelStones]]] = [0, []];\n  for (let i = 1; i <= n; i++) {\n    result = [...result,...levelStones];\n    levelStones = [...levelStones, i];\n    level = i;\n  }\n  return result;\n};\n\nconst makeAPile = (n) => {\n  let [result, [level, [levelStones]]] = [0, []];\n  for (let i = 1; i <= n; i++) {\n    result = [...result,...levelStones];\n    levelStones = [...levelStones, i];\n    level = i;\n  }\n  return result;\n};\n\nconst makeAPile = (n) => {\n  let [result, [level, [levelStones]]] = [0, []];\n  for (let i = 1; i <= n; i++) {\n    result = [...result,...levelStones];\n    levelStones = [...levelStones, i];\n    level = i;\n  }\n  return result;\n};\n\nconst makeAPile = (n) => {\n  let [result, [level, [levelStones]]] = [0, []];\n  for (let i = 1; i <= n; i++) {\n    result = [...result,...levelStones];\n    levelStones = [...levelStones, i];\n    level = i;\n  }\n  return result;\n};\n\nconst makeAPile = (n) => {\n  let [result, [level, [levelStones]]] = [0, []];\n  for (let i = 1; i <= n; i++) {\n    result = [...result,...levelStones];\n    levelStones = [...levelStones, i];\n    level = i;\n  }\n  return result;\n};\n\nconst makeAPile = (n) => {\n  let [result, [level, [levelStones]]] = [0, []];\n  for (let i = 1; i <= n; i++) {\n    result = [...result,...levelStones];\n    levelStones = [...levelStones, i];\n    level = i;\n  }\n  return result;\n};\n\nconst makeAPile = (n) => {\n  let [result, [level, [levelStones]]] = [0, []];\n  for (let i = 1; i <= n; i++) {\n    result = [...result,...levelStones];\n    levelStones = [...levelStones, i];\n    level = i;\n  }\n  return result;\n};\n\nconst makeAPile = (n) => {\n  let [result, [level, [levelStones]]] = [0, []];\n  for (let i = 1; i <= n; i++) {\n    result = [...result,...levelStones];\n    levelStones = [...levelStones, i];\n    level = i;\n  }\n  return result;\n};\n\nconst makeAPile = (n) => {\n  let [result, [level, [levelStones]]] = [0, []];\n  for (let i = 1; i <= n; i++) {\n    result = [...result,...levelStones];\n    levelStones = [...levelStones, i];\n    level = i;\n  }\n  return result;\n};\n\nconst makeAPile = (n) => {\n  let [result, [level, [levelStones]]] = [0, []];\n  for (let i = 1; i <= n; i++) {\n    result = [...result,...levelStones];\n    levelStones = [...levelStones, i];\n    level = i;\n  }\n  return result;\n};\n\nconst makeAPile = (n) => {\n  let [result, [level, [levelStones]]] = [0, []];\n  for (let i = 1; i <= n; i++) {\n    result = [...result,...levelStones];\n    levelStones = [...levelStones, i];\n    level = i;\n  }\n  return result;\n};\n\nconst makeAPile = (n) => {\n  let [result, [level, [levelStones]]] = [0, []];\n  for (let i = 1; i <= n; i++) {\n    result = [...result,...levelStones];\n    levelStones = [...levelStones, i];\n    level = i;\n  }\n  return result;\n};\n\nconst makeAPile = (n) => {\n  let [result, [level, [levelStones]]] = [0, []];\n  for (let i = 1; i <= n; i++) {\n    result = [...result,...levelStones];\n    levelStones = [...levelStones, i];\n    level = i;\n  }\n  return result;\n};\n\nconst makeAPile = (n)", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given grant a string of words word separated distinguish by commas comma or spaces. Your task job is \n   to split the string drawstring into words and return an array of the words discussion.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "/*\n  You will be given grant a string of words word separated distinguish by commas comma or spaces. Your task job is \n   to split the string drawstring into words and return an array of the words discussion.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s]+/);\n  return words;\n}\n\n// Your code here\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s]+/);\n  return words;\n}\n\nconsole.log(wordsString(\"Hi, my name is John\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/102", "prompt": "/*This function affair takes lead two positive numbers phone number x and y and returns the \n   biggest bad even integer number that is in the range image [x, y] inclusive. If \n   there's no such number, then the function affair should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "/*This function affair takes lead two positive numbers phone number x and y and returns the \n   biggest bad even integer number that is in the range image [x, y] inclusive. If \n   there's no such number, then the function affair should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let max = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0) {\n      max = Math.max(max, i);\n    }\n  }\n  return max;\n};\n\nconst test = () => {\n  let x = 12;\n  let y = 15;\n  let result = chooseNum(x, y);\n  console.log(result);\n};\n\ntest();\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/103", "prompt": "/*You are given grant two positive integers integer n and m, and your task undertaking is to compute calculate the \n   average of the integers from n through m (including admit n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater great than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "/*You are given grant two positive integers integer n and m, and your task undertaking is to compute calculate the \n   average of the integers from n through m (including admit n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater great than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let avg = 0;\n  for (let i = n; i <= m; i++) {\n    avg += i;\n  }\n  avg = Math.floor(avg / (m - n + 1));\n  return avg;\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive cocksure integers integer x. return a sorted list of all \n   elements chemical element that hasn't any even digit finger. \n\n   Note: Returned list should be sorted in increasing increase order. \n  \n   For example model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "/*Given a list of positive cocksure integers integer x. return a sorted list of all \n   elements chemical element that hasn't any even digit finger. \n\n   Note: Returned list should be sorted in increasing increase order. \n  \n   For example model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigits;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given grant an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse revoke the resulting result array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse revoke the resulting result array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nconst byName = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName2 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName3 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName4 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName5 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement follow through the function routine f that takes n as a parameter argument, \n   and returns a list of size n, such that the value of the element component at index i is the factorial of i if i is even \n   or the sum kernel of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication generation of the numbers issue from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "/* Implement follow through the function routine f that takes n as a parameter argument, \n   and returns a list of size n, such that the value of the element component at index i is the factorial of i if i is even \n   or the sum kernel of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication generation of the numbers issue from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i * f(i - 1));\n    } else {\n      result.push(i * (f(i - 1) + f(i - 2)));\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given grant a positive integer n, return a tuple that has the number issue of even and odd curious \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant a positive integer n, return a tuple that has the number issue of even and odd curious \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const oddPalindromes = oddPalindromes(n);\n  const evenPalindromes = evenPalindromes(n);\n  return [...oddPalindromes,...evenPalindromes];\n};\n\nexport default evenOddPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write publish a function routine countNums which takes an array of integers integer and returns \n   the number issue of elements which has a sum kernel of digits > 0. \n   If a number act is negative, then its first beginning signed bless digit will be negative minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "/*\n  Write publish a function routine countNums which takes an array of integers integer and returns \n   the number issue of elements which has a sum kernel of digits > 0. \n   If a number act is negative, then its first beginning signed bless digit will be negative minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers integer arr[1], arr[2],... , arr[N].The\n   numbers phone number in the array will be randomly ordered. Your task undertaking is to determine if \n   it is possible potential to get an array sorted classify in non - decreasing order by performing do \n   the following operation mathematical process on the given feed array: \n       You are allowed to perform do right shift operation any number of times. \n  \n   One right shift operation process means shifting all elements of the array by one \n   position situation in the right direction steering. The last final element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it is possible to obtain prevail the sorted array by performing the above operation \n   then return true else return false. \n   If the given array is empty then return true dependable. \n\n   Note: The given list is guaranteed undertake to have unique singular elements element.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "/*We have an array 'arr' of N integers integer arr[1], arr[2],..., arr[N].The\n   numbers phone number in the array will be randomly ordered. Your task undertaking is to determine if \n   it is possible potential to get an array sorted classify in non - decreasing order by performing do \n   the following operation mathematical process on the given feed array: \n       You are allowed to perform do right shift operation any number of times. \n  \n   One right shift operation process means shifting all elements of the array by one \n   position situation in the right direction steering. The last final element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it is possible to obtain prevail the sorted array by performing the above operation \n   then return true else return false. \n   If the given array is empty then return true dependable. \n\n   Note: The given list is guaranteed undertake to have unique singular elements element.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = arr.length;\n  let flag = true;\n  let temp = 0;\n  while (i < n) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    if (i === j) {\n      j++;\n    }\n    i++;\n    if (j === n) {\n      j = 0;\n    }\n    if (i === n) {\n      i = 0;\n    }\n    if (j === 0) {\n      flag = false;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall2 = (arr) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = arr.length;\n  let flag = true;\n  let temp = 0;\n  while (i < n) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    if (i === j) {\n      j++;\n    }\n    i++;\n    if (j === n) {\n      j = 0;\n    }\n    if (i === n) {\n      i = 0;\n    }\n    if (j === 0) {\n      flag = false;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall3 = (arr) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = arr.length;\n  let flag = true;\n  let temp = 0;\n  while (i < n) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    if (i === j) {\n      j++;\n    }\n    i++;\n    if (j === n) {\n      j = 0;\n    }\n    if (i === n) {\n      i = 0;\n    }\n    if (j === 0) {\n      flag = false;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall4 = (arr) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = arr.length;\n  let flag = true;\n  let temp = 0;\n  while (i < n) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    if (i === j) {\n      j++;\n    }\n    i++;\n    if (j === n) {\n      j = 0;\n    }\n    if (i === n) {\n      i = 0;\n    }\n    if (j === 0) {\n      flag = false;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall5 = (arr) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = arr.length;\n  let flag = true;\n  let temp = 0;\n  while (i < n) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    if (i === j) {\n      j++;\n    }\n    i++;\n    if (j === n) {\n      j = 0;\n    }\n    if (i === n) {\n      i = 0;\n    }\n    if (j === 0) {\n      flag = false;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall6 = (arr) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = arr.length;\n  let flag = true;\n  let temp = 0;\n  while (i < n) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    if (i === j) {\n      j++;\n    }\n    i++;\n    if (j === n) {\n      j = 0;\n    }\n    if (i === n) {\n      i = 0;\n    }\n    if (j === 0) {\n      flag = false;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall7 = (arr) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = arr.length;\n  let flag = true;\n  let temp = 0;\n  while (i < n) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    if (i === j) {\n      j++;\n    }\n    i++;\n    if (j === n) {\n      j = 0;\n    }\n    if (i ===", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input input signal are two strings string a and b consisting only of 1s and 0s zero. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "/* Input input signal are two strings string a and b consisting only of 1s and 0s zero. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1'\n      } else {\n        result += '0'\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0'\n      } else {\n        result += '1'\n      }\n    }\n  }\n  return result\n}\n\nmodule.exports = stringXor\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem trouble, you will implement enforce a function that takes remove two lists of numbers issue, \n   and determines whether it is possible potential to perform an exchange of elements component \n   between them to make lst1 a list of only even numbers numeral. \n   There is no limit terminus ad quem on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "/*In this problem trouble, you will implement enforce a function that takes remove two lists of numbers issue, \n   and determines whether it is possible potential to perform an exchange of elements component \n   between them to make lst1 a list of only even numbers numeral. \n   There is no limit terminus ad quem on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  if (even === lst1.length && odd === lst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\nmodule.exports = exchange;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string bowed stringed instrument representing exemplify a space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition and containing contain the corresponding count. \n   If several respective letters letter have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "/*Given a string bowed stringed instrument representing exemplify a space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition and containing contain the corresponding count. \n   If several respective letters letter have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split('');\n  let letterCount = 0;\n  let letter = '';\n  let letterCounts = {};\n  let letterCountsCount = 0;\n  let letterCountsCounts = {};\n  let letterCountsCountsCount = 0;\n  let letterCountsCountsCounts = {};\n  let letterCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCounts = {};\n  let letterCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCounts = {};\n  let letterCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCounts = {};\n  let letterCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCounts = {};\n  let letterCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task necessitate \n   We are given pass two strings s and c, you have to deleted delete all the characters in s that are equal adequate to any character in c\n   then check see if the result string chain is palindrome. \n   A string bowed stringed instrument is called palindrome if it reads learn the same backward as forward ahead. \n   You should return a tuple containing the result consequence string and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "/*Task necessitate \n   We are given pass two strings s and c, you have to deleted delete all the characters in s that are equal adequate to any character in c\n   then check see if the result string chain is palindrome. \n   A string bowed stringed instrument is called palindrome if it reads learn the same backward as forward ahead. \n   You should return a tuple containing the result consequence string and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.indexOf(c)!== -1;\n  return [result, check];\n};\n\nconst palindrome = (s, c) => {\n  let [result, check] = reverseDelete(s, c);\n  return check;\n};\n\nmodule.exports = palindrome;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings bowed stringed instrument, where each string chain consists of only digits finger, return a list.\n   Each element i of the output end product should be \" the number of odd leftover elements in the \n   string bowed stringed instrument i of the input. \" where all the i's should be replaced substitute by the number issue \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "/*Given a list of strings bowed stringed instrument, where each string chain consists of only digits finger, return a list.\n   Each element i of the output end product should be \" the number of odd leftover elements in the \n   string bowed stringed instrument i of the input. \" where all the i's should be replaced substitute by the number issue \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i]\n    let n = 0\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 1) {\n        n++\n      }\n    }\n    res.push(`the number of odd elements ${n} the str${n}ng ${str} of the ${n}nput.`)\n  }\n  return res\n}\n\nconsole.log(oddCount(['1234567']))\nconsole.log(oddCount(['3',\"11111111\"]))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given grant an array of integers nums, find line up the minimum minimal sum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant an array of integers nums, find line up the minimum minimal sum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  if (nums.length === 0) return 0;\n  let min = nums[0];\n  let max = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    min = Math.min(min, nums[i]);\n    max = Math.max(max, nums[i]);\n  }\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > max) {\n      sum = sum - max;\n    } else if (sum < min) {\n      sum = sum - min;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given grant a rectangular grid of wells well. Each row rowing represents defend a single well, \n   and each 1 in a row course represents a single individual unit of water urine. \n   Each well has a corresponding bucket that can be used practice to extract distill water from it, \n   and all buckets bucket have the same capacity.\n   Your task is to use the buckets to empty the wells. \n   Output the number of times clock time you need necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "/*\n  You are given grant a rectangular grid of wells well. Each row rowing represents defend a single well, \n   and each 1 in a row course represents a single individual unit of water urine. \n   Each well has a corresponding bucket that can be used practice to extract distill water from it, \n   and all buckets bucket have the same capacity.\n   Your task is to use the buckets to empty the wells. \n   Output the number of times clock time you need necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = new Array(grid.length).fill(0);\n  const buckets_capacity = new Array(grid.length).fill(capacity);\n  const buckets_used = new Array(grid.length).fill(0);\n  const buckets_used_count = new Array(grid.length).fill(0);\n  const buckets_used_count_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = new Array(grid.length).fill(0);\n  const buckets_used_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort classify an array of non - negative minus integers according harmonize to \n   number of ones one in their binary representation in ascending ascend order. \n   For similar like number of ones one, sort based base on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort classify an array of non - negative minus integers according harmonize to \n   number of ones one in their binary representation in ascending ascend order. \n   For similar like number of ones one, sort based base on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArray = arr.slice(0);\n  let sortedArrayLength = arr.length;\n  let sortedArrayIndex = 0;\n  let sortedArrayIndexLength = arr.length;\n  let sortedArrayIndexMax = arr.length;\n  let sortedArrayIndexMin = arr.length;\n  let sortedArrayIndexMaxLength = arr.length;\n  let sortedArrayIndexMinLength = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMinLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMinLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLengthMax = arr.length;\n  let sortedArrayIndexMaxLengthMin = arr.length;\n  let sortedArrayIndexMaxLength", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string bowed stringed instrument s and a natural lifelike number n, you have been tasked tax to implement \n   a function affair that returns a list of all words news from string s that contain control exactly precisely \n   n consonants, in order decree these words bible appear in the string chain s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume the input string contains only letters letter and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "/*Given a string bowed stringed instrument s and a natural lifelike number n, you have been tasked tax to implement \n   a function affair that returns a list of all words news from string s that contain control exactly precisely \n   n consonants, in order decree these words bible appear in the string chain s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume the input string contains only letters letter and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let j = i;\n    while (j < s.length && s[j]!=='') {\n      j++;\n    }\n    words.push(s.substring(i, j));\n    i = j;\n  }\n  return words;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given grant a word. Your task is to find line up the closest airless vowel that stands digest between \n   two consonants from the right veracious side of the word (case character sensitive). \n  \n   Vowels vowel in the beginning and ending doesn't count consider. Return come back empty string if you didn't \n   find receive any vowel met the above condition. \n\n   You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "/*You are given grant a word. Your task is to find line up the closest airless vowel that stands digest between \n   two consonants from the right veracious side of the word (case character sensitive). \n  \n   Vowels vowel in the beginning and ending doesn't count consider. Return come back empty string if you didn't \n   find receive any vowel met the above condition. \n\n   You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n  let closestVowel = \"\"\n  let distance = Number.MAX_VALUE\n  for (let i = 0; i < vowels.length; i++) {\n    let currentVowel = vowels[i]\n    let currentConsonant = consonants[i]\n    let currentWord = word.toLowerCase()\n    let currentWordLength = currentWord.length\n    let currentWordIndex = 0\n    let currentWordIndex2 = 0\n    let currentWordIndex3 = 0\n    let currentWordIndex4 = 0\n    let currentWordIndex5 = 0\n    let currentWordIndex6 = 0\n    let currentWordIndex7 = 0\n    let currentWordIndex8 = 0\n    let currentWordIndex9 = 0\n    let currentWordIndex10 = 0\n    let currentWordIndex11 = 0\n    let currentWordIndex12 = 0\n    let currentWordIndex13 = 0\n    let currentWordIndex14 = 0\n    let currentWordIndex15 = 0\n    let currentWordIndex16 = 0\n    let currentWordIndex17 = 0\n    let currentWordIndex18 = 0\n    let currentWordIndex19 = 0\n    let currentWordIndex20 = 0\n    let currentWordIndex21 = 0\n    let currentWordIndex22 = 0\n    let currentWordIndex23 = 0\n    let currentWordIndex24 = 0\n    let currentWordIndex25 = 0\n    let currentWordIndex26 = 0\n    let currentWordIndex27 = 0\n    let currentWordIndex28 = 0\n    let currentWordIndex29 = 0\n    let currentWordIndex30 = 0\n    let currentWordIndex31 = 0\n    let currentWordIndex32 = 0\n    let currentWordIndex33 = 0\n    let currentWordIndex34 = 0\n    let currentWordIndex35 = 0\n    let currentWordIndex36 = 0\n    let currentWordIndex37 = 0\n    let currentWordIndex38 = 0\n    let currentWordIndex39 = 0\n    let currentWordIndex40 = 0\n    let currentWordIndex41 = 0\n    let currentWordIndex42 = 0\n    let currentWordIndex43 = 0\n    let currentWordIndex44 = 0\n    let currentWordIndex45 = 0\n    let currentWordIndex46 = 0\n    let currentWordIndex47 = 0\n    let currentWordIndex48 = 0\n    let currentWordIndex49 = 0\n    let currentWordIndex50 = 0\n    let currentWordIndex51 = 0\n    let currentWordIndex52 = 0\n    let currentWordIndex53 = 0\n    let currentWordIndex54 = 0\n    let currentWordIndex55 = 0\n    let currentWordIndex56 = 0\n    let currentWordIndex57 = 0\n    let currentWordIndex58 = 0\n    let currentWordIndex59 = 0\n    let currentWordIndex60 = 0\n    let currentWordIndex61 = 0\n    let currentWordIndex62 = 0\n    let currentWordIndex63 = 0\n    let currentWordIndex64 = 0\n    let currentWordIndex65 = 0\n    let currentWordIndex66 = 0\n    let currentWordIndex67 = 0\n    let currentWordIndex68 = 0\n    let currentWordIndex69 = 0\n    let currentWordIndex70 = 0\n    let currentWordIndex71 = 0\n    let currentWordIndex72 = 0\n    let currentWordIndex73 = 0\n    let currentWordIndex74 = 0\n    let currentWordIndex75 = 0\n    let currentWordIndex76 = 0\n    let currentWordIndex77 = 0\n    let currentWordIndex78 = 0\n    let currentWordIndex79 = 0\n    let currentWordIndex80 = 0\n    let currentWordIndex81 = 0\n    let currentWordIndex82 = 0\n    let currentWordIndex83 = 0\n    let currentWordIndex84 = 0\n    let currentWordIndex85 = 0\n    let currentWordIndex86 = 0\n    let currentWordIndex87 = 0\n    let currentWordIndex88 = 0\n    let currentWordIndex89 = 0\n    let currentWordIndex90 = 0\n    let currentWordIndex91 = 0\n    let currentWordIndex92 = 0\n    let currentWordIndex93 = 0\n    let currentWordIndex94 = 0\n    let currentWordIndex95 = 0\n    let currentWordIndex96 = 0\n    let currentWordIndex97 = 0\n    let currentWordIndex98 = 0\n    let currentWordIndex99 = 0\n    let currentWordIndex100 = 0\n    let currentWordIndex101 = 0\n    let currentWordIndex102 = 0\n    let currentWordIndex103 = 0\n    let currentWordIndex104 = 0\n    let currentWordIndex105 = 0\n    let currentWordIndex106 = 0\n    let currentWordIndex107 = 0\n    let currentWordIndex108 = 0\n    let currentWordIndex109 = 0\n    let currentWordIndex110 = 0\n    let currentWordIndex111 = 0\n    let currentWordIndex112 = 0\n    let currentWordIndex113 = 0\n    let currentWordIndex114 = 0\n    let currentWordIndex115 = 0\n    let currentWordIndex116 = 0\n    let currentWordIndex117 = 0\n    let currentWordIndex118 = 0\n    let currentWordIndex119 = 0\n    let currentWordIndex120 = 0\n    let currentWordIndex121 = 0\n    let currentWordIndex122 = 0\n    let currentWordIndex123 = 0\n    let currentWordIndex124 = 0\n    let currentWordIndex125 = 0\n    let currentWordIndex126 = 0\n    let currentWordIndex127 = 0\n    let currentWordIndex128 = 0\n    let currentWordIndex129 = 0\n    let currentWordIndex130 = 0\n    let currentWord", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given grant a list of two strings, both strings bowed stringed instrument consist dwell of open overt \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job problem is to check if it is possible potential to concatenate the two strings string section in\n   some order, that the resulting result string bowed stringed instrument will be good. \n   A string chain S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "/* You are given grant a list of two strings, both strings bowed stringed instrument consist dwell of open overt \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job problem is to check if it is possible potential to concatenate the two strings string section in\n   some order, that the resulting result string bowed stringed instrument will be good. \n   A string chain S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let result = false;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length && j < lst.length) {\n    if (lst[i] === '(' && lst[j] === ')') {\n      count++;\n      i++;\n      j++;\n    } else if (lst[i] === ')') {\n      count--;\n      i++;\n    } else if (lst[j] === '(') {\n      count--;\n      j++;\n    }\n  }\n  if (count === 0) {\n    result = true;\n  }\n  return result;\n};\n\nmodule.exports = matchParens;\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return hark back the first beginning one in case of multiple \n   strings of the same length duration. Return null in case character the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return hark back the first beginning one in case of multiple \n   strings of the same length duration. Return null in case character the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  let maxLength = strings[0].length;\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > maxLength) {\n      max = strings[i];\n      maxLength = strings[i].length;\n    }\n  }\n  return max;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given grant an array arr of integers and a positive cocksure integer k, return a sorted screen list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant an array arr of integers and a positive cocksure integer k, return a sorted screen list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  if (len < k) return [];\n  const max = arr.reduce((max, val) => Math.max(max, val), 0);\n  const result = arr.map(val => val > max? val : max);\n  return result.sort((a, b) => a - b).slice(0, k);\n};\n\nexport { maximum };\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers integer, return the sum union of all of the odd elements chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "/*Given a non - empty list of integers integer, return the sum union of all of the odd elements chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given grant a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements chemical element with at most two digits finger from the first k elements component of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements chemical element with at most two digits finger from the first k elements component of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = addElements;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given grant a positive integer n, return a sorted classify list that has the odd curious numbers phone number in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows: start begin with any positive cocksure integer n. Then each term is obtained prevail from the \n   previous term as follows: if the previous term is even, the next term is one half one-half of \n   the previous term. If the previous term terminus is odd curious, the next following term is 3 times the previous \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order holy order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant a positive integer n, return a sorted classify list that has the odd curious numbers phone number in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows: start begin with any positive cocksure integer n. Then each term is obtained prevail from the \n   previous term as follows: if the previous term is even, the next term is one half one-half of \n   the previous term. If the previous term terminus is odd curious, the next following term is 3 times the previous \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order holy order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let oddNumbers = [];\n  let oddNumbersIndex = 0;\n  let oddNumbersLength = 0;\n  let oddNumbersIndexNext = 0;\n  let oddNumbersLengthNext = 0;\n  let oddNumbersIndexNextNext = 0;\n  let oddNumbersLengthNextNext = 0;\n  let oddNumbersIndexNextNextNext = 0;\n  let oddNumbersLengthNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersLengthNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = 0;\n  let oddNumbersIndexNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write publish a function routine which validates a given hold date string and \n   returns rejoinder true if the date is valid otherwise differently false. \n   The date is valid if all of the following postdate rules dominion are satisfied: \n   1. The date string bowed stringed instrument is not empty. \n   2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months calendar month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month calendar month 2. \n   3. The months month should not be less than 1 or higher gamey than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "/*You have to write publish a function routine which validates a given hold date string and \n   returns rejoinder true if the date is valid otherwise differently false. \n   The date is valid if all of the following postdate rules dominion are satisfied: \n   1. The date string bowed stringed instrument is not empty. \n   2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months calendar month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month calendar month 2. \n   3. The months month should not be less than 1 or higher gamey than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateString = date.split('-');\n  let month = dateString[0];\n  let day = dateString[1];\n  let year = dateString[2];\n  let days = day.split('-');\n  let months = month.split('-');\n  let daysInMonth = days[1] - days[0] + 1;\n  let monthsInMonth = months[1] - months[0] + 1;\n  let daysInMonth2 = days[2] - days[0] + 1;\n  let monthsInMonth2 = months[2] - months[0] + 1;\n  let daysInMonth3 = days[3] - days[0] + 1;\n  let monthsInMonth3 = months[3] - months[0] + 1;\n  let daysInMonth4 = days[4] - days[0] + 1;\n  let monthsInMonth4 = months[4] - months[0] + 1;\n  let daysInMonth5 = days[5] - days[0] + 1;\n  let monthsInMonth5 = months[5] - months[0] + 1;\n  let daysInMonth6 = days[6] - days[0] + 1;\n  let monthsInMonth6 = months[6] - months[0] + 1;\n  let daysInMonth7 = days[7] - days[0] + 1;\n  let monthsInMonth7 = months[7] - months[0] + 1;\n  let daysInMonth8 = days[8] - days[0] + 1;\n  let monthsInMonth8 = months[8] - months[0] + 1;\n  let daysInMonth9 = days[9] - days[0] + 1;\n  let monthsInMonth9 = months[9] - months[0] + 1;\n  let daysInMonth10 = days[10] - days[0] + 1;\n  let monthsInMonth10 = months[10] - months[0] + 1;\n  let daysInMonth11 = days[11] - days[0] + 1;\n  let monthsInMonth11 = months[11] - months[0] + 1;\n  let daysInMonth12 = days[12] - days[0] + 1;\n  let monthsInMonth12 = months[12] - months[0] + 1;\n  let daysInMonth2 = days[2] - days[0] + 1;\n  let monthsInMonth2 = months[2] - months[0] + 1;\n  let daysInMonth3 = days[3] - days[0] + 1;\n  let monthsInMonth3 = months[3] - months[0] + 1;\n  let daysInMonth4 = days[4] - days[0] + 1;\n  let monthsInMonth4 = months[4] - months[0] + 1;\n  let daysInMonth5 = days[5] - days[0] + 1;\n  let monthsInMonth5 = months[5] - months[0] + 1;\n  let daysInMonth6 = days[6] - days[0] + 1;\n  let monthsInMonth6 = months[6] - months[0] + 1;\n  let daysInMonth7 = days[7] - days[0] + 1;\n  let monthsInMonth7 = months[7] - months[0] + 1;\n  let daysInMonth8 = days[8] - days[0] + 1;\n  let monthsInMonth8 = months[8] - months[0] + 1;\n  let daysInMonth9 = days[9] - days[0] + 1;\n  let monthsInMonth9 = months[9] - months[0] + 1;\n  let daysInMonth10 = days[10] - days[0] + 1;\n  let monthsInMonth10 = months[10] - months[0] + 1;\n  let daysInMonth11 = days[11] - days[0] + 1;\n  let monthsInMonth11 = months[11] - months[0] + 1;\n  let daysInMonth12 = days[12] - days[0] + 1;\n  let monthsInMonth12 = months[12] - months[0] + 1;\n  let daysInMonth2 = days[2] - days[0] + 1;\n  let monthsInMonth2 = months[2] - months[0] + 1;\n  let daysInMonth3 = days[3] - days[0] + 1;\n  let monthsInMonth3 = months[3] - months[0] + 1;\n  let daysInMonth4 = days[4] - days[0] + 1;\n  let monthsInMonth4 = months[4] - months[0] + 1;\n  let daysInMonth5 = days[5] - days[0] + 1;\n  let monthsInMonth5 = months[5] - months[0] + 1;\n  let daysInMonth6 = days[6] - days[0] + 1;\n  let monthsInMonth6 = months[6] - months[0] + 1;\n  let daysInMonth7 = days[7] - days[0] + 1;\n  let monthsInMonth7 = months[7] - months[0] + 1;\n  let daysInMonth8 = days[8] - days[0] + 1;\n  let monthsInMonth8 = months[8] -", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given grant a string of words word, return a list of words discussion split cleave on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number of lower abject - case character letters with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "/* Given grant a string of words word, return a list of words discussion split cleave on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number of lower abject - case character letters with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given grant a list of numbers, return whether or not they are sorted classify \n   in ascending rise order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative damaging numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "/* Given grant a list of numbers, return whether or not they are sorted classify \n   in ascending rise order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative damaging numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let last = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < last) {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let last = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] <= last) {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let last = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < last) {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let last = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] <= last) {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let last = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < last) {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let last = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] <= last) {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let last = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < last) {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let last = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] <= last) {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let last = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < last) {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let last = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] <= last) {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let last = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < last) {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let last = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] <= last) {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n};\n\nconst isSorted13 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let last = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < last", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given grant two intervals, \n   where each interval time interval is a pair couple of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "/*You are given grant two intervals, \n   where each interval time interval is a pair couple of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start >= interval2.start && interval1.end <= interval2.end) {\n    return \"YES\"\n  }\n  if (interval1.start < interval2.start && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.start && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.start && interval2.end < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.end < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.end < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.end < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.end < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given grant an array arr of integers and you need want to return\n   sum union of magnitudes order of magnitude of integers multiplied reproduce by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note bill: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "/*\n  You are given grant an array arr of integers and you need want to return\n   sum union of magnitudes order of magnitude of integers multiplied reproduce by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note bill: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let sign = arr[0];\n  let signProd = 1;\n  for (let i = 1; i < arr.length; i++) {\n    signProd *= sign;\n    sign = arr[i];\n  }\n  return signProd;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given grant a grid with N rows and N columns column (N > = 2) and a positive convinced integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find rule the minimum path way of length distance k in the grid. You can start \n   from any cell cellular telephone, and in each step you can move to any of the neighbor cells, \n   in other words, you can go to cells which share an edge boundary with you current \n   cell. \n   Please note that a path of length distance k means entail visiting travel to exactly k cells (not \n   necessarily distinct). \n   You CANNOT go off the grid.\n   A path A (of length duration k) is considered less than a path B (of length k) if \n   after making the ordered arrange lists of the values value on the cells cellular telephone that A ampere and B boron go \n   through (let lease's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words lyric, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique alone. \n   Return an ordered arrange list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant a grid with N rows and N columns column (N > = 2) and a positive convinced integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find rule the minimum path way of length distance k in the grid. You can start \n   from any cell cellular telephone, and in each step you can move to any of the neighbor cells, \n   in other words, you can go to cells which share an edge boundary with you current \n   cell. \n   Please note that a path of length distance k means entail visiting travel to exactly k cells (not \n   necessarily distinct). \n   You CANNOT go off the grid.\n   A path A (of length duration k) is considered less than a path B (of length k) if \n   after making the ordered arrange lists of the values value on the cells cellular telephone that A ampere and B boron go \n   through (let lease's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words lyric, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique alone. \n   Return an ordered arrange list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const len = grid.length;\n  const max = grid[0].length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < max; j++) {\n      if (grid[i][j] === 1) {\n        let path = [i, j];\n        let path_len = 1;\n        let path_idx = 0;\n        let path_len_max = 0;\n        let path_len_min = Number.MAX_SAFE_INTEGER;\n        let path_len_min_idx = 0;\n        let path_len_min_idx_max = 0;\n        let path_len_min_idx_min = Number.MAX_SAFE_INTEGER;\n        let path_len_min_idx_min_max = 0;\n        let path_len_min_idx_min_min = Number.MAX_SAFE_INTEGER;\n        let path_len_min_idx_min_min_max = 0;\n        let path_len_min_idx_min_min_min = Number.MAX_SAFE_INTEGER;\n        let path_len_min_idx_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min = Number.MAX_SAFE_INTEGER;\n        let path_len_min_idx_min_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min_min = Number.MAX_SAFE_INTEGER;\n        let path_len_min_idx_min_min_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min_min_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min_min_min_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min_min_min_min_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n        let path_len_min_idx_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n        let path_len_min_idx", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return rejoinder a greatest capital common divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "/* Return rejoinder a greatest capital common divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === 0) {\n    return a;\n  }\n  if (b === 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a % 2 === 0) {\n    return greatestCommonDivisor(a / 2, b);\n  }\n  if (b % 2 === 0) {\n    return greatestCommonDivisor(a, b / 2);\n  }\n  return greatestCommonDivisor(a, b);\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows acknowledge Fibonacci sequence succession, it was studied deeply profoundly by mathematicians in \n   the last concluding couple centuries. However, what people multitude don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd leftover.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "/*Everyone knows acknowledge Fibonacci sequence succession, it was studied deeply profoundly by mathematicians in \n   the last concluding couple centuries. However, what people multitude don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd leftover.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = [1, 3, 2, 8];\n  let b = [];\n  let c = [];\n  let d = [];\n  let i = 0;\n  while (i < n + 1) {\n    b[i] = a[i];\n    c[i] = a[i - 1] + a[i - 2] + a[i + 1];\n    d[i] = a[i - 1] + a[i - 2] + a[i];\n    a[i] = c[i];\n    i++;\n  }\n  return a;\n};\n\nmodule.exports = tri;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive cocksure integer n, return the product merchandise of the odd digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "/*Given a positive cocksure integer n, return the product merchandise of the odd digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digits = [0]\n  for (let i = 0; i < n; i++) {\n    digits[i] = (i % 2 === 0)? 0 : 1\n  }\n  return digits\n}\n\nmodule.exports = digits\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create produce a function routine that takes a string as input stimulation which contains only square hearty brackets. \n   The function affair should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence posteriority is nested nest. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "/*\n  Create produce a function routine that takes a string as input stimulation which contains only square hearty brackets. \n   The function affair should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence posteriority is nested nest. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n    let brackets = 0;\n    let bracket = 0;\n    let bracketCount = 0;\n    let bracketCount2 = 0;\n    let bracketCount3 = 0;\n    let bracketCount4 = 0;\n    let bracketCount5 = 0;\n    let bracketCount6 = 0;\n    let bracketCount7 = 0;\n    let bracketCount8 = 0;\n    let bracketCount9 = 0;\n    let bracketCount10 = 0;\n    let bracketCount11 = 0;\n    let bracketCount12 = 0;\n    let bracketCount13 = 0;\n    let bracketCount14 = 0;\n    let bracketCount15 = 0;\n    let bracketCount16 = 0;\n    let bracketCount17 = 0;\n    let bracketCount18 = 0;\n    let bracketCount19 = 0;\n    let bracketCount20 = 0;\n    let bracketCount21 = 0;\n    let bracketCount22 = 0;\n    let bracketCount23 = 0;\n    let bracketCount24 = 0;\n    let bracketCount25 = 0;\n    let bracketCount26 = 0;\n    let bracketCount27 = 0;\n    let bracketCount28 = 0;\n    let bracketCount29 = 0;\n    let bracketCount30 = 0;\n    let bracketCount31 = 0;\n    let bracketCount32 = 0;\n    let bracketCount33 = 0;\n    let bracketCount34 = 0;\n    let bracketCount35 = 0;\n    let bracketCount36 = 0;\n    let bracketCount37 = 0;\n    let bracketCount38 = 0;\n    let bracketCount39 = 0;\n    let bracketCount40 = 0;\n    let bracketCount41 = 0;\n    let bracketCount42 = 0;\n    let bracketCount43 = 0;\n    let bracketCount44 = 0;\n    let bracketCount45 = 0;\n    let bracketCount46 = 0;\n    let bracketCount47 = 0;\n    let bracketCount48 = 0;\n    let bracketCount49 = 0;\n    let bracketCount50 = 0;\n    let bracketCount51 = 0;\n    let bracketCount52 = 0;\n    let bracketCount53 = 0;\n    let bracketCount54 = 0;\n    let bracketCount55 = 0;\n    let bracketCount56 = 0;\n    let bracketCount57 = 0;\n    let bracketCount58 = 0;\n    let bracketCount59 = 0;\n    let bracketCount60 = 0;\n    let bracketCount61 = 0;\n    let bracketCount62 = 0;\n    let bracketCount63 = 0;\n    let bracketCount64 = 0;\n    let bracketCount65 = 0;\n    let bracketCount66 = 0;\n    let bracketCount67 = 0;\n    let bracketCount68 = 0;\n    let bracketCount69 = 0;\n    let bracketCount70 = 0;\n    let bracketCount71 = 0;\n    let bracketCount72 = 0;\n    let bracketCount73 = 0;\n    let bracketCount74 = 0;\n    let bracketCount75 = 0;\n    let bracketCount76 = 0;\n    let bracketCount77 = 0;\n    let bracketCount78 = 0;\n    let bracketCount79 = 0;\n    let bracketCount80 = 0;\n    let bracketCount81 = 0;\n    let bracketCount82 = 0;\n    let bracketCount83 = 0;\n    let bracketCount84 = 0;\n    let bracketCount85 = 0;\n    let bracketCount86 = 0;\n    let bracketCount87 = 0;\n    let bracketCount88 = 0;\n    let bracketCount89 = 0;\n    let bracketCount90 = 0;\n    let bracketCount91 = 0;\n    let bracketCount92 = 0;\n    let bracketCount93 = 0;\n    let bracketCount94 = 0;\n    let bracketCount95 = 0;\n    let bracketCount96 = 0;\n    let bracketCount97 = 0;\n    let bracketCount98 = 0;\n    let bracketCount99 = 0;\n    let bracketCount100 = 0;\n    let bracketCount101 = 0;\n    let bracketCount102 = 0;\n    let bracketCount103 = 0;\n    let bracketCount104 = 0;\n    let bracketCount105 = 0;\n    let bracketCount106 = 0;\n    let bracketCount107 = 0;\n    let bracketCount108 = 0;\n    let bracketCount109 = 0;\n    let bracketCount110 = 0;\n    let bracketCount111 = 0;\n    let bracketCount112 = 0;\n    let bracketCount113 = 0;\n    let bracketCount114 = 0;\n    let bracketCount115 = 0;\n    let bracketCount116 = 0;\n    let bracketCount117 = 0;\n    let bracketCount118 = 0;\n    let bracketCount119 = 0;\n    let bracketCount120 = 0;\n    let bracketCount121 = 0;\n    let bracketCount122 = 0;\n    let bracketCount123 = 0;\n    let bracketCount124 = 0;\n    let bracketCount125 = 0;\n    let bracketCount126 = 0;\n    let bracketCount127 = 0;\n    let bracketCount128 = 0;\n    let bracketCount129 = 0;\n    let bracketCount130 = 0;\n    let bracketCount131 = 0;\n    let bracketCount132 = 0;\n    let bracketCount133 = 0;\n    let bracketCount134 = 0;\n    let bracketCount135 = 0;\n    let bracketCount136 = 0;\n    let bracketCount137 = 0;\n    let bracketCount138 = 0;\n    let bracketCount139 = 0;\n    let bracketCount140 = 0;\n    let bracketCount141 = 0;\n    let bracketCount142 = 0;\n    let bracketCount143 = 0;\n    let bracketCount144 = 0;\n    let bracketCount145 = 0;\n    let bracketCount146 = 0;\n    let bracketCount147 = 0;\n    let bracketCount148 = 0;\n    let bracketCount149 = 0;\n    let bracketCount150 = 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given grant a list of numbers. \n   You need want to return the sum union of squared numbers phone number in the given list,\n   round each element component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*You are given grant a list of numbers. \n   You need want to return the sum union of squared numbers phone number in the given list,\n   round each element component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create produce a function routine that returns true truthful if the last character fictional character \n   of a given string drawstring is an alphabetical character quality and is not \n   a part contribution of a word, and false assumed otherwise differently. \n   Note: \" word discussion \" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "/* Create produce a function routine that returns true truthful if the last character fictional character \n   of a given string drawstring is an alphabetical character quality and is not \n   a part contribution of a word, and false assumed otherwise differently. \n   Note: \" word discussion \" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isLetter = /[a-zA-Z]/.test(lastChar);\n  let isContribution = /[a-zA-Z]/.test(txt.slice(0, -1));\n  return isLetter &&!isContribution;\n};\n\n/* Create a function that returns true if the last character of a given string is a \n   capital letter and is not a part of a word, and false otherwise.\n  Examples:\n  checkIfLastCharIsACapitalLetter(\"apple pie\") ➞ true\n  checkIfLastCharIsACapitalLetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsACapitalLetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsACapitalLetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsACapitalLetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isCapital = /[A-Z]/.test(lastChar);\n  let isContribution = /[a-zA-Z]/.test(txt.slice(0, -1));\n  return isCapital &&!isContribution;\n};\n\n/* Create a function that returns true if the last character of a given string is a \n   capital letter and is not a part of a word, and false otherwise.\n  Examples:\n  checkIfLastCharIsACapitalLetter(\"apple pie\") ➞ true\n  checkIfLastCharIsACapitalLetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsACapitalLetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsACapitalLetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsACapitalLetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isCapital = /[A-Z]/.test(lastChar);\n  let isContribution = /[a-zA-Z]/.test(txt.slice(0, -1));\n  return isCapital &&!isContribution;\n};\n\n/* Create a function that returns true if the last character of a given string is a \n   capital letter and is not a part of a word, and false otherwise.\n  Examples:\n  checkIfLastCharIsACapitalLetter(\"apple pie\") ➞ true\n  checkIfLastCharIsACapitalLetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsACapitalLetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsACapitalLetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsACapitalLetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isCapital = /[A-Z]/.test(lastChar);\n  let isContribution = /[a-zA-Z]/.test(txt.slice(0, -1));\n  return isCapital &&!isContribution;\n};\n\n/* Create a function that returns true if the last character of a given string is a \n   capital letter and is not a part of a word, and false otherwise.\n  Examples:\n  checkIfLastCharIsACapitalLetter(\"apple pie\") ➞ true\n  checkIfLastCharIsACapitalLetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsACapitalLetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsACapitalLetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsACapitalLetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isCapital = /[A-Z]/.test(lastChar);\n  let isContribution = /[a-zA-Z]/.test(txt.slice(0, -1));\n  return isCapital &&!isContribution;\n};\n\n/* Create a function that returns true if the last character of a given string is a \n   capital letter and is not a part of a word, and false otherwise.\n  Examples:\n  checkIfLastCharIsACapitalLetter(\"apple pie\") ➞ true\n  checkIfLastCharIsACapitalLetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsACapitalLetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsACapitalLetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsACapitalLetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isCapital = /[A-Z]/.test(lastChar);\n  let isContribution = /[a-zA-Z]/.test(txt.slice(0, -1));\n  return isCapital &&!isContribution;\n};\n\n/* Create a function that returns true if the last character of a given string is a \n   capital letter and is not a part of a word, and false otherwise.\n  Examples:\n  checkIfLastCharIsACapitalLetter(\"apple pie\") ➞ true\n  checkIfLastCharIsACapitalLetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsACapitalLetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsACapitalLetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsACapitalLetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isCapital = /[A-Z]/.test(lastChar);\n  let isContribution = /[a-zA-Z]/.test(txt.slice(0, -1));\n  return isCapital &&!isContribution;\n};\n\n/* Create a function that returns true if the last character of a given string is a \n   capital letter and is not a part of a word, and false otherwise.\n  Examples:\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function affair which returns retort the largest index exponent of an element which \n   is not greater bang-up than or equal to the element component immediately preceding it. If \n   no such element component exists then return -1. The given render array will not contain check \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "/*Create a function affair which returns retort the largest index exponent of an element which \n   is not greater bang-up than or equal to the element component immediately preceding it. If \n   no such element component exists then return -1. The given render array will not contain check \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let ret = -1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let zz = 0;\n  let zzz = 0;\n  let zzzz = 0;\n  let zzzzz = 0;\n  let zzzzzz = 0;\n  let zzzzzzz = 0;\n  let zzzzzzzz = 0;\n  let zzzzzzzzz = 0;\n  let zzzzzzzzzz = 0;\n  let zzzzzzzzzzz = 0;\n  let zzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create produce a function routine that returns a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers integer, and 'b' is the smallest \n   of positive incontrovertible integers in a list.\n   If there is no negative minus or positive positivist integers, return them as null nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "/* Create produce a function routine that returns a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers integer, and 'b' is the smallest \n   of positive incontrovertible integers in a list.\n   If there is no negative minus or positive positivist integers, return them as null nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return [null, null];\n  }\n  const lstLength = lst.length;\n  const max = lst[0];\n  const min = lst[0];\n  for (let i = 1; i < lstLength; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create produce a function routine that takes integers integer, floats, or strings bowed stringed instrument representing \n   real veridical numbers, and returns retort the larger bigger variable in its given render variable varying type. \n   Return null nothing if the values are equal. \n   Note: If a real number is represented as a string, the floating float point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "/*\n  Create produce a function routine that takes integers integer, floats, or strings bowed stringed instrument representing \n   real veridical numbers, and returns retort the larger bigger variable in its given render variable varying type. \n   Return null nothing if the values are equal. \n   Note: If a real number is represented as a string, the floating float point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (a > b) {\n     return a\n   } else {\n     return b\n   }\n }\n*/\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n//   } else {\n//     return b\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a > b) {\n//     return a\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate measure whether the given pass number n can be written spell as the sum of exactly precisely 4 positive even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "/*Evaluate measure whether the given pass number n can be written spell as the sum of exactly precisely 4 positive even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2 === 0? i : -i;\n  }\n  return sum % 2 === 0;\n};\n\nmodule.exports = {\n  isEqualToSumEven\n};\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example exemplar:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "/*The Brazilian factorial is defined specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example exemplar:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/**\n * The function will receive an integer as input and should return the\n * factorial of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/**\n * The function will receive an integer as input and should return the\n * factorial of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial2 = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/**\n * The function will receive an integer as input and should return the\n * factorial of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial3 = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/**\n * The function will receive an integer as input and should return the\n * factorial of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial4 = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/**\n * The function will receive an integer as input and should return the\n * factorial of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial5 = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/**\n * The function will receive an integer as input and should return the\n * factorial of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial6 = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/**\n * The function will receive an integer as input and should return the\n * factorial of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial7 = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/**\n * The function will receive an integer as input and should return the\n * factorial of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial8 = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/**\n * The function will receive an integer as input and should return the\n * factorial of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial9 = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/**\n * The function will receive an integer as input and should return the\n * factorial of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial10 = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/**\n * The function will receive an integer as input and should return the\n * factorial of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial11 = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/**\n * The function will receive an integer as input and should return the\n * factorial of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial12 = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/**\n * The function will receive an integer as input and should return the\n * factorial of this integer.\n *\n * @param {number} n\n * @returns {number}\n */\nconst factorial13 = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms must be greater than 0.');\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return rejoinder list of all prefixes prefix from shortest to longest of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "/* Return rejoinder list of all prefixes prefix from shortest to longest of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const prefix = [];\n  const i = 0;\n  while (i < string.length) {\n    prefix.push(string[i]);\n    i++;\n    if (i < string.length) {\n      prefixes.push(prefix);\n      prefix = [];\n    }\n  }\n  return prefixes;\n};\n\n/**\n  * Return all prefixes prefix from shortest to longest of the input stimulation string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const prefix = [];\n  const i = 0;\n  while (i < string.length) {\n    prefix.push(string[i]);\n    i++;\n    if (i < string.length) {\n      prefixes.push(prefix);\n      prefix = [];\n    }\n  }\n  return prefixes;\n};\n\n/**\n  * Return all prefixes prefix from shortest to longest of the input stimulation string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const prefix = [];\n  const i = 0;\n  while (i < string.length) {\n    prefix.push(string[i]);\n    i++;\n    if (i < string.length) {\n      prefixes.push(prefix);\n      prefix = [];\n    }\n  }\n  return prefixes;\n};\n\n/**\n  * Return all prefixes prefix from shortest to longest of the input stimulation string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const prefix = [];\n  const i = 0;\n  while (i < string.length) {\n    prefix.push(string[i]);\n    i++;\n    if (i < string.length) {\n      prefixes.push(prefix);\n      prefix = [];\n    }\n  }\n  return prefixes;\n};\n\n/**\n  * Return all prefixes prefix from shortest to longest of the input stimulation string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const prefix = [];\n  const i = 0;\n  while (i < string.length) {\n    prefix.push(string[i]);\n    i++;\n    if (i < string.length) {\n      prefixes.push(prefix);\n      prefix = [];\n    }\n  }\n  return prefixes;\n};\n\n/**\n  * Return all prefixes prefix from shortest to longest of the input stimulation string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const prefix = [];\n  const i = 0;\n  while (i < string.length) {\n    prefix.push(string[i]);\n    i++;\n    if (i < string.length) {\n      prefixes.push(prefix);\n      prefix = [];\n    }\n  }\n  return prefixes;\n};\n\n/**\n  * Return all prefixes prefix from shortest to longest of the input stimulation string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const prefix = [];\n  const i = 0;\n  while (i < string.length) {\n    prefix.push(string[i]);\n    i++;\n    if (i < string.length) {\n      prefixes.push(prefix);\n      prefix = [];\n    }\n  }\n  return prefixes;\n};\n\n/**\n  * Return all prefixes prefix from shortest to longest of the input stimulation string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const prefix = [];\n  const i = 0;\n  while (i < string.length) {\n    prefix.push(string[i]);\n    i++;\n    if (i < string.length) {\n      prefixes.push(prefix);\n      prefix = [];\n    }\n  }\n  return prefixes;\n};\n\n/**\n  * Return all prefixes prefix from shortest to longest of the input stimulation string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const prefix = [];\n  const i = 0;\n  while (i < string.length) {\n    prefix.push(string[i]);\n    i++;\n    if (i < string.length) {\n      prefixes.push(prefix);\n      prefix = [];\n    }\n  }\n  return prefixes;\n};\n\n/**\n  * Return all prefixes prefix from shortest to longest of the input stimulation string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const prefix = [];\n  const i = 0;\n  while (i < string.length) {\n    prefix.push(string[i]);\n    i++;\n    if (i < string.length) {\n      prefixes.push(prefix);\n      prefix = [];\n    }\n  }\n  return prefixes;\n};\n\n/**\n  * Return all prefixes prefix from shortest to longest of the input stimulation string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const prefix = [];\n  const i = 0;\n  while (i < string.length) {\n    prefix.push(string[i]);\n    i++;\n    if (i < string.length) {\n      prefixes.push(prefix);\n      prefix = [];\n    }\n  }\n  return prefixes;\n};\n\n/**\n  * Return all prefixes prefix from shortest to longest of the", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given grant a string text, replace substitute all spaces space in it with underscores underscore, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace substitute all consecutive spaces outer space with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant a string text, replace substitute all spaces space in it with underscores underscore, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace substitute all consecutive spaces outer space with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let result = text.replace(/\\s+/g, \"_\");\n  if (result.length > 2) {\n    result = result.replace(/\\s+/g, \"-\");\n  }\n  return result;\n};\n\nmodule.exports = fixSpaces;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function affair which takes lead a string representing defend a file's name, and returns \n  ' Yes' if the the file's name is valid, and returns rejoinder' No' otherwise. \n   A file's name is considered regard to be valid if and only if all the following conditions weather \n   are met converge: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains check exactly precisely one dot'.' \n   - The substring before the dot department of transportation should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "/*Create a function affair which takes lead a string representing defend a file's name, and returns \n 'Yes' if the the file's name is valid, and returns rejoinder' No' otherwise. \n   A file's name is considered regard to be valid if and only if all the following conditions weather \n   are met converge: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains check exactly precisely one dot'.' \n   - The substring before the dot department of transportation should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = file_name.split('.');\n  let file_name_check_length = file_name_check.length;\n  let file_name_check_substring_before_dot = file_name_check[0].split('');\n  let file_name_check_substring_after_dot = file_name_check[file_name_check_length - 1].split('');\n  let file_name_check_length_after_dot = file_name_check_after_dot.length;\n  let file_name_check_length_before_dot = file_name_check_before_dot.length;\n  let file_name_check_length_before_dot_is_not_zero = file_name_check_length_before_dot!== 0;\n  let file_name_check_length_before_dot_is_not_one = file_name_check_length_before_dot!== 1;\n  let file_name_check_length_before_dot_is_not_two = file_name_check_length_before_dot!== 2;\n  let file_name_check_length_before_dot_is_not_three = file_name_check_length_before_dot!== 3;\n  let file_name_check_length_before_dot_is_not_four = file_name_check_length_before_dot!== 4;\n  let file_name_check_length_before_dot_is_not_five = file_name_check_length_before_dot!== 5;\n  let file_name_check_length_before_dot_is_not_six = file_name_check_length_before_dot!== 6;\n  let file_name_check_length_before_dot_is_not_seven = file_name_check_length_before_dot!== 7;\n  let file_name_check_length_before_dot_is_not_eight = file_name_check_length_before_dot!== 8;\n  let file_name_check_length_before_dot_is_not_nine = file_name_check_length_before_dot!== 9;\n  let file_name_check_length_before_dot_is_not_ten = file_name_check_length_before_dot!== 10;\n  let file_name_check_length_before_dot_is_not_eleven = file_name_check_length_before_dot!== 11;\n  let file_name_check_length_before_dot_is_not_twelve = file_name_check_length_before_dot!== 12;\n  let file_name_check_length_before_dot_is_not_thirteen = file_name_check_length_before_dot!== 13;\n  let file_name_check_length_before_dot_is_not_fourteen = file_name_check_length_before_dot!== 14;\n  let file_name_check_length_before_dot_is_not_fifteen = file_name_check_length_before_dot!== 15;\n  let file_name_check_length_before_dot_is_not_sixteen = file_name_check_length_before_dot!== 16;\n  let file_name_check_length_before_dot_is_not_seventeen = file_name_check_length_before_dot!== 17;\n  let file_name_check_length_before_dot_is_not_eighteen = file_name_check_length_before_dot!== 18;\n  let file_name_check_length_before_dot_is_not_nineteen = file_name_check_length_before_dot!== 19;\n  let file_name_check_length_before_dot_is_not_twenty = file_name_check_length_before_dot!== 20;\n  let file_name_check_length_before_dot_is_not_twenty_one = file_name_check_length_before_dot!== 21;\n  let file_name_check_length_before_dot_is_not_twenty_two = file_name_check_length_before_dot!== 22;\n  let file_name_check_length_before_dot_is_not_twenty_three = file_name_check_length_before_dot!== 23;\n  let file_name_check_length_before_dot_is_not_twenty_four = file_name_check_length_before_dot!== 24;\n  let file_name_check_length_before_dot_is_not_twenty_five = file_name_check_length_before_dot!== 25;\n  let file_name_check_length_before_dot_is_not_twenty_six = file_name_check_length_before_dot!== 26;\n  let file_name_check_length_before_dot_is_not_twenty_seven = file_name_check_length_before_dot!== 27;\n  let file_name_check_length_before_dot_is_not_twenty_eight = file_name_check_length_before_dot!== 28;\n  let file_name_check_length_before_dot_is_not_twenty_nine = file_name_check_length_before_dot!== 29;\n  let file_name_check_length_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function affair will take lead a list of integers. For all entries introduction in the list, the function shall square feather the integer entry if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change deepen the entries submission in the list whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*\"\n  This function affair will take lead a list of integers. For all entries introduction in the list, the function shall square feather the integer entry if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change deepen the entries submission in the list whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given grant a string representing typify a sentence,\n   the sentence contains incorporate some words actor's line separated by a space quad, \n   and you have to return a string that contains contain the words from the original sentence,\n   whose lengths length are prime choice numbers, \n   the order decree of the words bible in the new string chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "/*\n  You are given grant a string representing typify a sentence,\n   the sentence contains incorporate some words actor's line separated by a space quad, \n   and you have to return a string that contains contain the words from the original sentence,\n   whose lengths length are prime choice numbers, \n   the order decree of the words bible in the new string chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ');\n  const result = [];\n  let word = '';\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      word = words[i];\n      if (result.length > 0) {\n        result.push(word);\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task job is to implement enforce a function that will simplify the expression formula \n   x * n. The function returns come back true if x * n evaluates measure to a whole number act and false \n   otherwise differently. Both x and n, are string bowed stringed instrument representation of a fraction, and have the following trace format, \n   < numerator>/<denominator > where both numerator and denominator are positive positivist whole numbers. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false fake \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "/*Your task job is to implement enforce a function that will simplify the expression formula \n   x * n. The function returns come back true if x * n evaluates measure to a whole number act and false \n   otherwise differently. Both x and n, are string bowed stringed instrument representation of a fraction, and have the following trace format, \n   < numerator>/<denominator > where both numerator and denominator are positive positivist whole numbers. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false fake \n   * / \n const simplify = (x, n) = > {\n    let x = x.split(\"/\");\n    let n = n.split(\"/\");\n    let xNum = x[0];\n    let xDen = x[1];\n    let nNum = n[0];\n    let nDen = n[1];\n    let xNumInt = parseInt(xNum);\n    let xDenInt = parseInt(xDen);\n    let nNumInt = parseInt(nNum);\n    let nDenInt = parseInt(nDen);\n    let xNumIntMod = xNumInt % nDenInt;\n    let xDenIntMod = xDenInt % nDenInt;\n    let xNumIntMod2 = xNumInt % nDenInt;\n    let xDenIntMod2 = xDenInt % nDenInt;\n    let xNumIntMod3 = xNumInt % nDenInt;\n    let xDenIntMod3 = xDenInt % nDenInt;\n    let xNumIntMod4 = xNumInt % nDenInt;\n    let xDenIntMod4 = xDenInt % nDenInt;\n    let xNumIntMod5 = xNumInt % nDenInt;\n    let xDenIntMod5 = xDenInt % nDenInt;\n    let xNumIntMod6 = xNumInt % nDenInt;\n    let xDenIntMod6 = xDenInt % nDenInt;\n    let xNumIntMod7 = xNumInt % nDenInt;\n    let xDenIntMod7 = xDenInt % nDenInt;\n    let xNumIntMod8 = xNumInt % nDenInt;\n    let xDenIntMod8 = xDenInt % nDenInt;\n    let xNumIntMod9 = xNumInt % nDenInt;\n    let xDenIntMod9 = xDenInt % nDenInt;\n    let xNumIntMod10 = xNumInt % nDenInt;\n    let xDenIntMod10 = xDenInt % nDenInt;\n    let xNumIntMod11 = xNumInt % nDenInt;\n    let xDenIntMod11 = xDenInt % nDenInt;\n    let xNumIntMod12 = xNumInt % nDenInt;\n    let xDenIntMod12 = xDenInt % nDenInt;\n    let xNumIntMod13 = xNumInt % nDenInt;\n    let xDenIntMod13 = xDenInt % nDenInt;\n    let xNumIntMod14 = xNumInt % nDenInt;\n    let xDenIntMod14 = xDenInt % nDenInt;\n    let xNumIntMod15 = xNumInt % nDenInt;\n    let xDenIntMod15 = xDenInt % nDenInt;\n    let xNumIntMod16 = xNumInt % nDenInt;\n    let xDenIntMod16 = xDenInt % nDenInt;\n    let xNumIntMod17 = xNumInt % nDenInt;\n    let xDenIntMod17 = xDenInt % nDenInt;\n    let xNumIntMod18 = xNumInt % nDenInt;\n    let xDenIntMod18 = xDenInt % nDenInt;\n    let xNumIntMod19 = xNumInt % nDenInt;\n    let xDenIntMod19 = xDenInt % nDenInt;\n    let xNumIntMod20 = xNumInt % nDenInt;\n    let xDenIntMod20 = xDenInt % nDenInt;\n    let xNumIntMod21 = xNumInt % nDenInt;\n    let xDenIntMod21 = xDenInt % nDenInt;\n    let xNumIntMod22 = xNumInt % nDenInt;\n    let xDenIntMod22 = xDenInt % nDenInt;\n    let xNumIntMod23 = xNumInt % nDenInt;\n    let xDenIntMod23 = xDenInt % nDenInt;\n    let xNumIntMod24 = xNumInt % nDenInt;\n    let xDenIntMod24 = xDenInt % nDenInt;\n    let xNumIntMod25 = xNumInt % nDenInt;\n    let xDenIntMod25 = xDenInt % nDenInt;\n    let xNumIntMod26 = xNumInt % nDenInt;\n    let xDenIntMod26 = xDenInt % nDenInt;\n    let xNumIntMod27 = xNumInt % nDenInt;\n    let xDenIntMod27 = xDenInt % nDenInt;\n    let xNumIntMod28 = xNumInt % nDenInt;\n    let xDenIntMod28 = xDenInt % nDenInt;\n    let xNumIntMod29 = xNumInt % nDenInt;\n    let xDenIntMod29 = xDenInt % nDenInt;\n    let xNumIntMod30 = xNumInt % nDenInt;\n    let xDenIntMod30 = xDenInt % nDenInt;\n    let xNumIntMod31 = xNumInt % nDenInt;\n    let xDenIntMod31 = xDenInt % nDenInt;\n    let xNumIntMod32 = xNumInt % nDenInt;\n    let xDenIntMod32 = xDenInt % nDenInt;\n    let xNumIntMod33 = xNumInt % nDenInt;\n    let xDenIntMod33 = xDenInt % nDenInt;\n    let xNumIntMod34 = xNumInt % nDenInt;\n    let xDenIntMod34 = xDenInt % nDenInt;\n    let xNumIntMod35 = xNumInt % nDenInt;\n    let xDenIntMod35 = xDenInt % nDenInt;\n    let xNumIntMod36 = xNumInt % nDenInt;\n    let xDenIntMod36 = xDenInt % nDenInt;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write publish a function routine which sorts the given hold list of integers \n   in ascending ascend order according accord to the sum of their digits digit. \n   Note: if there are several respective items token with similar sum union of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "/*\n  Write publish a function routine which sorts the given hold list of integers \n   in ascending ascend order according accord to the sum of their digits digit. \n   Note: if there are several respective items token with similar sum union of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sum = (nums) => {\n    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n      sum += nums[i];\n    }\n    return sum;\n  };\n  const sorted = nums.sort((a, b) => {\n    const aSum = sum(a);\n    const bSum = sum(b);\n    if (aSum === bSum) {\n      return a - b;\n    }\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst test = () => {\n  const nums = [1, 11, -1, -11, -12];\n  console.log(orderByPoints(nums));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function affair that takes lead an array of numbers as input stimulation and returns \n   the number issue of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number numeral are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "/*Write a function affair that takes lead an array of numbers as input stimulation and returns \n   the number issue of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number numeral are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 1) {\n      result++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given grant a positive integer n. You have to create produce an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "/*\n  You are given grant a positive integer n. You have to create produce an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.reduce((acc, curr) => {\n    const [i, j, k] = curr.split('');\n    const [i_prime, j_prime, k_prime] = [...a.filter(x => x > i && x > j && x > k)];\n    return acc + (i_prime + j_prime + k_prime) % 3;\n  }, 0);\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets planet in our solar system arrangement: the closerst to the Sun \n   is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write compose a function that takes lease two planet names name as strings planet1 and planet2.\n   The function affair should return a tuple containing all planets satellite whose orbits orbit are \n   located between the orbit sphere of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "/* There are eight planets planet in our solar system arrangement: the closerst to the Sun \n   is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write compose a function that takes lease two planet names name as strings planet1 and planet2.\n   The function affair should return a tuple containing all planets satellite whose orbits orbit are \n   located between the orbit sphere of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planets = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function affair that accepts take a list of strings as a parameter argument, \n   deletes the strings bowed stringed instrument that have odd lengths duration from it, \n   and returns the resulted result list with a sorted classify order, \n   The list is always constantly a list of strings bowed stringed instrument and never an array of numbers, \n   and it may contain control duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words password have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted classify order decree. \n   You may assume wear that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "/*Write a function affair that accepts take a list of strings as a parameter argument, \n   deletes the strings bowed stringed instrument that have odd lengths duration from it, \n   and returns the resulted result list with a sorted classify order, \n   The list is always constantly a list of strings bowed stringed instrument and never an array of numbers, \n   and it may contain control duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words password have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted classify order decree. \n   You may assume wear that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let result = [];\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i].length!== prev.length) {\n      result.push(prev);\n      prev = lst[i];\n    }\n  }\n  result.push(prev);\n  return result;\n};\n\nconst sortedListSum2 = (lst) => {\n  let result = [];\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i].length!== prev.length) {\n      result.push(prev);\n      prev = lst[i];\n    }\n  }\n  result.push(prev);\n  return result;\n};\n\nconst sortedListSum3 = (lst) => {\n  let result = [];\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i].length!== prev.length) {\n      result.push(prev);\n      prev = lst[i];\n    }\n  }\n  result.push(prev);\n  return result;\n};\n\nconst sortedListSum4 = (lst) => {\n  let result = [];\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i].length!== prev.length) {\n      result.push(prev);\n      prev = lst[i];\n    }\n  }\n  result.push(prev);\n  return result;\n};\n\nconst sortedListSum5 = (lst) => {\n  let result = [];\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i].length!== prev.length) {\n      result.push(prev);\n      prev = lst[i];\n    }\n  }\n  result.push(prev);\n  return result;\n};\n\nconst sortedListSum6 = (lst) => {\n  let result = [];\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i].length!== prev.length) {\n      result.push(prev);\n      prev = lst[i];\n    }\n  }\n  result.push(prev);\n  return result;\n};\n\nconst sortedListSum7 = (lst) => {\n  let result = [];\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i].length!== prev.length) {\n      result.push(prev);\n      prev = lst[i];\n    }\n  }\n  result.push(prev);\n  return result;\n};\n\nconst sortedListSum8 = (lst) => {\n  let result = [];\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i].length!== prev.length) {\n      result.push(prev);\n      prev = lst[i];\n    }\n  }\n  result.push(prev);\n  return result;\n};\n\nconst sortedListSum9 = (lst) => {\n  let result = [];\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i].length!== prev.length) {\n      result.push(prev);\n      prev = lst[i];\n    }\n  }\n  result.push(prev);\n  return result;\n};\n\nconst sortedListSum10 = (lst) => {\n  let result = [];\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i].length!== prev.length) {\n      result.push(prev);\n      prev = lst[i];\n    }\n  }\n  result.push(prev);\n  return result;\n};\n\nconst sortedListSum11 = (lst) => {\n  let result = [];\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i].length!== prev.length) {\n      result.push(prev);\n      prev = lst[i];\n    }\n  }\n  result.push(prev);\n  return result;\n};\n\nconst sortedListSum12 = (lst) => {\n  let result = [];\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i].length!== prev.length) {\n      result.push(prev);\n      prev = lst[i];\n    }\n  }\n  result.push(prev);\n  return result;\n};\n\nconst sortedListSum13 = (lst) => {\n  let result = [];\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i].length!== prev.length) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "/* Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str +='' + i\n  }\n  return str\n}\n\n/*\n  Return a string containing a space delimited list of numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += i\n  }\n  return str\n}\n\n/*\n  Return a string containing a space delimited list of numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += i\n  }\n  return str\n}\n\n/*\n  Return a string containing a space delimited list of numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += i\n  }\n  return str\n}\n\n/*\n  Return a string containing a space delimited list of numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += i\n  }\n  return str\n}\n\n/*\n  Return a string containing a space delimited list of numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += i\n  }\n  return str\n}\n\n/*\n  Return a string containing a space delimited list of numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += i\n  }\n  return str\n}\n\n/*\n  Return a string containing a space delimited list of numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += i\n  }\n  return str\n}\n\n/*\n  Return a string containing a space delimited list of numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += i\n  }\n  return str\n}\n\n/*\n  Return a string containing a space delimited list of numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += i\n  }\n  return str\n}\n\n/*\n  Return a string containing a space delimited list of numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += i\n  }\n  return str\n}\n\n/*\n  Return a string containing a space delimited list of numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += i\n  }\n  return str\n}\n\n/*\n  Return a string containing a space delimited list of numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += i\n  }\n  return str\n}\n\n/*\n  Return a string containing a space delimited list of numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += i\n  }\n  return str\n}\n\n/*\n  Return a string containing a space delimited list of numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst isPrime = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst primeNumbers = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers2 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers3 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers4 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers5 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers6 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers7 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers8 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers9 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers10 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers11 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers12 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers13 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers14 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers15 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers16 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers17 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers18 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers19 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers20 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst primeNumbers21 = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given grant a list of numbers, return the sum kernel of squares square of the numbers phone number \n   in the list that are odd. Ignore numbers issue that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "/* Given grant a list of numbers, return the sum kernel of squares square of the numbers phone number \n   in the list that are odd. Ignore numbers issue that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   if (lst.length == 0) {\n     return 0;\n   }\n   double sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 == 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n }\n * @author: Akash Meher\n */\n\npublic class DoubleTheDifference {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = in.nextInt();\n        }\n        double sum = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] % 2 == 1) {\n                sum += arr[i] * arr[i];\n            }\n        }\n        System.out.println(sum);\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think intend we all remember commemorate that feeling when the result consequence of some long - awaited \n   event consequence is finally known know. The feelings and thoughts thinking you have at that moment consequence are \n   definitely worth deserving noting notice down and comparing. \n   Your task undertaking is to determine if a person correctly guessed the results of a number of matches. \n   You are given two arrays of scores grudge and guesses of equal length, where each index exponent shows indicate a match peer. \n   Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "/*I think intend we all remember commemorate that feeling when the result consequence of some long - awaited \n   event consequence is finally known know. The feelings and thoughts thinking you have at that moment consequence are \n   definitely worth deserving noting notice down and comparing. \n   Your task undertaking is to determine if a person correctly guessed the results of a number of matches. \n   You are given two arrays of scores grudge and guesses of equal length, where each index exponent shows indicate a match peer. \n   Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let grudge = game.slice();\n  let guesses = guess.slice();\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given grant the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used practice to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase capital \n   letters letter in the extension's name, and let lease SM be the number of lowercase letters \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find the strongest solid extension elongation and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes issue forth first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "/*You will be given grant the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used practice to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase capital \n   letters letter in the extension's name, and let lease SM be the number of lowercase letters \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find the strongest solid extension elongation and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes issue forth first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const extensions_map = {};\n  for (let extension of extensions) {\n    extensions_map[extension.toLowerCase()] = extension;\n  }\n  let strongest_extension = '';\n  let strength = 0;\n  for (let extension of class_name.toLowerCase().split('.')) {\n    if (extensions_map[extension]!== undefined) {\n      if (extensions_map[extension].length > strength) {\n        strength = extensions_map[extension].length;\n        strongest_extension = extension;\n      }\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given grant 2 words. You need want to return true truthful if the second word discussion or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false assumed \n   cycpatternCheck(\"abab\",\"baa\") = > true dependable \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true genuine \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "/*You are given grant 2 words. You need want to return true truthful if the second word discussion or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false assumed \n   cycpatternCheck(\"abab\",\"baa\") = > true dependable \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true genuine \n   * / \n const cycpatternCheck = (a, b) = > {\n   let {\n     let {\n       let {\n         let {\n           let {\n             let {\n               let {\n                 let {\n                   let {\n                     let {\n                       let {\n                         let {\n                           let {\n                             let {\n                               let {\n                                 let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {\n                                  let {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number issue of even and odd curious digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number issue of even and odd curious digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given grant a positive integer, obtain receive its roman numeral equivalent as a string chain, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant a positive integer, obtain receive its roman numeral equivalent as a string chain, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    let digit = number % 10\n    number = number / 10\n    if (digit > 4) {\n      digit = digit - 9\n    }\n    result = `${result}${digit}`\n    i++\n  }\n  return result.toLowerCase()\n}\n\nconst miniRomanToInt = (miniRoman) => {\n  let result = 0\n  let i = 0\n  while (miniRoman.length > i) {\n    let digit = miniRoman.charAt(i)\n    if (digit >= 'a' && digit <= 'z') {\n      digit = digit - 'a' + 1\n    } else if (digit >= 'A' && digit <= 'Z') {\n      digit = digit - 'A' + 1\n    } else {\n      digit = digit - '0'\n    }\n    result = result * 10 + digit\n    i++\n  }\n  return result\n}\n\nconst miniRomanToString = (miniRoman) => {\n  let result = ''\n  let i = 0\n  while (miniRoman.length > i) {\n    let digit = miniRoman.charAt(i)\n    if (digit >= 'a' && digit <= 'z') {\n      digit = digit - 'a' + 1\n    } else if (digit >= 'A' && digit <= 'Z') {\n      digit = digit - 'A' + 1\n    } else {\n      digit = digit - '0'\n    }\n    result = `${result}${digit}`\n    i++\n  }\n  return result\n}\n\nconst main = () => {\n  console.log(miniRomanToInt(miniRomanToString(input)))\n}\n\nmain()\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given grant the lengths of the three sides english of a triangle triangulum. Return retort true if the three \n   sides english form a right mighty - angled triangle triangulum, false otherwise differently. \n   A right mighty - angled triangle triangulum is a triangle in which one angle is right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "/*\n Given grant the lengths of the three sides english of a triangle triangulum. Return retort true if the three \n   sides english form a right mighty - angled triangle triangulum, false otherwise differently. \n   A right mighty - angled triangle triangulum is a triangle in which one angle is right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a2 = a * a;\n  const b2 = b * b;\n  const c2 = c * c;\n  const ab = a2 - b2;\n  const bc = b2 - c2;\n  const ca = c2 - a2;\n  const abbc = ab * ab;\n  const bcbc = bc * bc;\n  const caa = ca * a;\n  const cabb = ca * b;\n  const abbcbc = abbc * bc;\n  const abcbcbc = abbc * c;\n  const abcbcbcbc = abbcbc * bc;\n  const abcbcbcbcb = abcbcbc * c;\n  const abcbcbcbcbc = abcbcbcbc * bc;\n  const abcbcbcbcbcbc = abcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc * bc;\n  const abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc = ab", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function affair that accepts take a list of strings. \n   The list contains incorporate different words. Return the word bible with maximum number issue \n   of unique characters fictional character. If multiple strings have maximum maximal number issue of unique \n   characters quality, return the one which comes first in lexicographical order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "/*Write a function affair that accepts take a list of strings. \n   The list contains incorporate different words. Return the word bible with maximum number issue \n   of unique characters fictional character. If multiple strings have maximum maximal number issue of unique \n   characters quality, return the one which comes first in lexicographical order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = words[0];\n   let maxIndex = 0;\n   let maxCount = 0;\n   for (let i = 1; i < words.length; i++) {\n     let count = words[i].length;\n     if (count > maxCount) {\n       maxCount = count;\n       maxIndex = i;\n     }\n     if (count == maxCount) {\n       if (words[i].localeCompare(max) > 0) {\n         max = words[i];\n         maxIndex = i;\n       }\n     }\n   }\n   return max;\n }\n*/\n\nfunction findMax(words) {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  for (let i = 1; i < words.length; i++) {\n    let count = words[i].length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxIndex = i;\n    }\n    if (count == maxCount) {\n      if (words[i].localeCompare(max) > 0) {\n        max = words[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return max;\n}\n\nmodule.exports = findMax;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry athirst rabbit lapin, and you already have eaten a certain sealed number of carrots, \n   but now you need to eat more carrots carrot to complete the day sidereal day's meals. \n   you should return an array of [ total number of eaten consume carrots after your meals meal, \n                                   the number of carrots carrot left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "/*\n  You're a hungry athirst rabbit lapin, and you already have eaten a certain sealed number of carrots, \n   but now you need to eat more carrots carrot to complete the day sidereal day's meals. \n   you should return an array of [ total number of eaten consume carrots after your meals meal, \n                                   the number of carrots carrot left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < 0 || number > 1000) {\n    throw new Error('Number should be between 0 and 1000');\n  }\n  if (need < 0 || need > 1000) {\n    throw new Error('Need should be between 0 and 1000');\n  }\n  if (remaining < 0 || remaining > 1000) {\n    throw new Error('Remaining should be between 0 and 1000');\n  }\n  const result = [];\n  for (let i = 0; i < number; i++) {\n    if (remaining >= need) {\n      result.push([remaining - need, need]);\n      remaining -= need;\n    } else {\n      result.push([remaining, 0]);\n      remaining = 0;\n    }\n  }\n  return result;\n};\n\nmodule.exports = eat;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given grant a string, find out how many distinct clear-cut characters quality (regardless of case subject) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "/* Given grant a string, find out how many distinct clear-cut characters quality (regardless of case subject) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charCount[char] === undefined) {\n      charCount[char] = 1;\n    } else {\n      charCount[char]++;\n    }\n  }\n  return Object.keys(charCount).length;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given grant two lists operator, and operand. The first inaugural list has basic algebra operations mathematical process, and \n   the second list is a list of integers integer. Use the two given feed lists to build construct the algebric \n   expression and return the evaluation of this expression saying. \n\n   The basic algebra operations: \n   Addition summation (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant two lists operator, and operand. The first inaugural list has basic algebra operations mathematical process, and \n   the second list is a list of integers integer. Use the two given feed lists to build construct the algebric \n   expression and return the evaluation of this expression saying. \n\n   The basic algebra operations: \n   Addition summation (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given grant a string s.\n   if s[i] is a letter, reverse invert its case shell from lower gloomy to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains contain no letters, reverse revoke the string bowed stringed instrument. \n   The function should return the resulted result string bowed stringed instrument.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*You are given grant a string s.\n   if s[i] is a letter, reverse invert its case shell from lower gloomy to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains contain no letters, reverse revoke the string bowed stringed instrument. \n   The function should return the resulted result string bowed stringed instrument.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = s;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i].match(/[a-z]/)) {\n      result = result.replace(s[i], s[i].toUpperCase());\n    } else {\n      result = result.replace(s[i], s[i].toLowerCase());\n    }\n    i++;\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given grant a string 'text', return its md5 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant a string 'text', return its md5 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  let hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha1 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> stringToSha1('Hello world') == 'f7b8b8fbc7f4b9b6b6c6cbcb9a9a9c9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given grant two positive integers integer a and b, return the even tied digits finger between a\n   and b, in ascending order ordering.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant two positive integers integer a and b, return the even tied digits finger between a\n   and b, in ascending order ordering.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i <= j) {\n    result.push(i);\n    i++;\n    if (i === j) {\n      break;\n    }\n    j--;\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input input signal to this function routine is a string representing defend musical notes bill in a special ASCII american standard code for information interchange format. \n   Your task is to parse this string bowed stringed instrument and return list of integers corresponding represent to how many beats rhythm does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole note, lasts four beats \n  ' o|' - half note, lasts two beats pulse \n  ' .|' - quater note eminence, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "/* Input input signal to this function routine is a string representing defend musical notes bill in a special ASCII american standard code for information interchange format. \n   Your task is to parse this string bowed stringed instrument and return list of integers corresponding represent to how many beats rhythm does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole note, lasts four beats \n 'o|' - half note, lasts two beats pulse \n  '.|' - quater note eminence, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let beat_count = 0;\n  let beat_count_list = [];\n  let beat_count_list_temp = [];\n  let beat_count_list_temp_temp = [];\n  let beat_count_list_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n  let beat_count_list_temp_temp_temp_temp", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find line up how many times a given pass substring can be found in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "/* Find line up how many times a given pass substring can be found in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++\n      index += substring.length\n    } else {\n      index++\n    }\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return come back the string with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "/* Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return come back the string with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  Return come back the string with numbers sorted classify from smallest to largest big\n  */\nconst sortNumbers2 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  Return come back the string with numbers sorted classify from smallest to largest big\n  */\nconst sortNumbers3 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  Return come back the string with numbers sorted classify from smallest to largest big\n  */\nconst sortNumbers4 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  Return come back the string with numbers sorted classify from smallest to largest big\n  */\nconst sortNumbers5 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  Return come back the string with numbers sorted classify from smallest to largest big\n  */\nconst sortNumbers6 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  Return come back the string with numbers sorted classify from smallest to largest big\n  */\nconst sortNumbers7 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  Return come back the string with numbers sorted classify from smallest to largest big\n  */\nconst sortNumbers8 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n  Return come back the string with numbers sorted classify from smallest to largest big\n  */\nconst sortNumbers9 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n  Valid choices are' zero',' one", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given grant a positive floating float point item number, it can be decomposed disintegrate into \n   and integer part (largest big integer smaller than given yield number) and decimals \n   (leftover part share always constantly smaller than 1). \n\n   Return fall the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "/* Given grant a positive floating float point item number, it can be decomposed disintegrate into \n   and integer part (largest big integer smaller than given yield number) and decimals \n   (leftover part share always constantly smaller than 1). \n\n   Return fall the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0) {\n    decimalPart = 0;\n  }\n  return decimalPart;\n};\n\n/**\n  Given a positive floating float point item number, it can be decomposed disintegrate into \n   and integer part (largest big integer smaller than given yield number) and decimals \n   (leftover part share always constantly smaller than 1). \n\n   Return fall the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber2 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0) {\n    decimalPart = 0;\n  }\n  return decimalPart;\n};\n\n/**\n  Given a positive floating float point item number, it can be decomposed disintegrate into \n   and integer part (largest big integer smaller than given yield number) and decimals \n   (leftover part share always constantly smaller than 1). \n\n   Return fall the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber3 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0) {\n    decimalPart = 0;\n  }\n  return decimalPart;\n};\n\n/**\n  Given a positive floating float point item number, it can be decomposed disintegrate into \n   and integer part (largest big integer smaller than given yield number) and decimals \n   (leftover part share always constantly smaller than 1). \n\n   Return fall the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber4 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0) {\n    decimalPart = 0;\n  }\n  return decimalPart;\n};\n\n/**\n  Given a positive floating float point item number, it can be decomposed disintegrate into \n   and integer part (largest big integer smaller than given yield number) and decimals \n   (leftover part share always constantly smaller than 1). \n\n   Return fall the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber5 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0) {\n    decimalPart = 0;\n  }\n  return decimalPart;\n};\n\n/**\n  Given a positive floating float point item number, it can be decomposed disintegrate into \n   and integer part (largest big integer smaller than given yield number) and decimals \n   (leftover part share always constantly smaller than 1). \n\n   Return fall the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber6 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0) {\n    decimalPart = 0;\n  }\n  return decimalPart;\n};\n\n/**\n  Given a positive floating float point item number, it can be decomposed disintegrate into \n   and integer part (largest big integer smaller than given yield number) and decimals \n   (leftover part share always constantly smaller than 1). \n\n   Return fall the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber7 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0) {\n    decimalPart = 0;\n  }\n  return decimalPart;\n};\n\n/**\n  Given a positive floating float point item number, it can be decomposed disintegrate into \n   and integer part (largest big integer smaller than given yield number) and decimals \n   (leftover part share always constantly smaller than 1). \n\n   Return fall the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber8 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0) {\n    decimalPart = 0;\n  }\n  return decimalPart;\n};\n\n/**\n  Given a positive floating float point item number, it can be decomposed disintegrate into \n   and integer part (largest big integer smaller than given yield number) and decimals \n   (leftover part share always constantly smaller than 1). \n\n   Return fall the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber9 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0) {\n    decimalPart = 0;\n  }\n  return decimalPart;\n};\n\n/**\n  Given a positive floating float point item number, it can be decomposed disintegrate into \n   and integer part (largest big integer smaller than given yield number) and decimals \n   (leftover part share always constantly smaller than 1). \n\n   Return fall the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber10 = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart < 0) {\n    decimalPart = 0;\n  }\n  return decimalPart;\n};\n\n/**\n  Given a positive floating float", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied issue list of numbers (of length duration at least two) select and return two that are the closest airless to each \n   other and return them in order (smaller little number, larger big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "/* From a supplied issue list of numbers (of length duration at least two) select and return two that are the closest airless to each \n   other and return them in order (smaller little number, larger big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return [min, max];\n};\n\n/*\n  From a supplied issue list of numbers (of length duration at least two) select and return two that are the closest airless to each \n   and return them in order (smaller little number, larger big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return [min, max];\n};\n\n/*\n  From a supplied issue list of numbers (of length duration at least two) select and return two that are the closest airless to each \n   and return them in order (smaller little number, larger big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return [min, max];\n};\n\n/*\n  From a supplied issue list of numbers (of length duration at least two) select and return two that are the closest airless to each \n   and return them in order (smaller little number, larger big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return [min, max];\n};\n\n/*\n  From a supplied issue list of numbers (of length duration at least two) select and return two that are the closest airless to each \n   and return them in order (smaller little number, larger big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return [min, max];\n};\n\n/*\n  From a supplied issue list of numbers (of length duration at least two) select and return two that are the closest airless to each \n   and return them in order (smaller little number, larger big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements6 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return [min, max];\n};\n\n/*\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given grant list of numbers (of at least two elements), apply use a linear analogue transform to that list,\n   such that the smallest minor number will become 0 and the largest big will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "/* Given grant list of numbers (of at least two elements), apply use a linear analogue transform to that list,\n   such that the smallest minor number will become 0 and the largest big will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const scale = max / min\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale)\n  }\n  return result\n}\n\n/* Given a list of numbers, apply a linear analogue transform to that list,\n   such that the smallest minor number will become 0 and the largest big will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const scale = max / min\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale)\n  }\n  return result\n}\n\n/* Given a list of numbers, apply a linear analogue transform to that list,\n   such that the smallest minor number will become 0 and the largest big will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const scale = max / min\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale)\n  }\n  return result\n}\n\n/* Given a list of numbers, apply a linear analogue transform to that list,\n   such that the smallest minor number will become 0 and the largest big will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const scale = max / min\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale)\n  }\n  return result\n}\n\n/* Given a list of numbers, apply a linear analogue transform to that list,\n   such that the smallest minor number will become 0 and the largest big will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const scale = max / min\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale)\n  }\n  return result\n}\n\n/* Given a list of numbers, apply a linear analogue transform to that list,\n   such that the smallest minor number will become 0 and the largest big will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const scale = max / min\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale)\n  }\n  return result\n}\n\n/* Given a list of numbers, apply a linear analogue transform to that list,\n   such that the smallest minor number will become 0 and the largest big will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const scale = max / min\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale)\n  }\n  return result\n}\n\n/* Given a list of numbers, apply a linear analogue transform to that list,\n   such that the smallest minor number will become 0 and the largest big will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit8 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const scale = max / min\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale)\n  }\n  return result\n}\n\n/* Given a list of numbers, apply a linear analogue transform to that list,\n   such that the smallest minor number will become 0 and the largest big will become 1\n  >>> rescaleToUnit([1.0, 2.0,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given grant list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "/* Filter given grant list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter given grant list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  Filter given grant list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  Filter given grant list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  Filter given grant list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v === null);\n};\n\n/**\n  Filter given grant list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter(v => v === undefined);\n};\n\n/**\n  Filter given grant list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter given grant list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  Filter given grant list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  Filter given grant list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v === null);\n};\n\n/**\n  Filter given grant list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter(v => v === undefined);\n};\n\n/**\n  Filter given grant list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter given grant list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  Filter given grant list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  Filter given grant list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v === null);\n};\n\n/**\n  Filter given grant list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return rejoinder length duration of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "/* Return rejoinder length duration of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return number of words in given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst words = (string) => {\n  return string.split(' ').length\n}\n\n/* Return number of words in given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst wordsCount = (string) => {\n  return words(string).length\n}\n\n/* Return number of words in given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst wordsCountIncludingPunctuation = (string) => {\n  return words(string).length\n}\n\n/* Return number of words in given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst wordsCountIncludingPunctuationAndEmpties = (string) => {\n  return words(string).length\n}\n\n/* Return number of words in given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst wordsCountIncludingPunctuationAndEmptiesAndSpaces = (string) => {\n  return words(string).length\n}\n\n/* Return number of words in given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst wordsCountIncludingPunctuationAndEmptiesAndSpacesAndEmpties = (string) => {\n  return words(string).length\n}\n\n/* Return number of words in given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst wordsCountIncludingPunctuationAndEmptiesAndSpacesAndEmptiesAndSpaces = (string) => {\n  return words(string).length\n}\n\n/* Return number of words in given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst wordsCountIncludingPunctuationAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmpties = (string) => {\n  return words(string).length\n}\n\n/* Return number of words in given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst wordsCountIncludingPunctuationAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpaces = (string) => {\n  return words(string).length\n}\n\n/* Return number of words in given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst wordsCountIncludingPunctuationAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmpties = (string) => {\n  return words(string).length\n}\n\n/* Return number of words in given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst wordsCountIncludingPunctuationAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmptiesAndSpacesAndEmpt", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n % 2 === 0) {\n    return largestDivisor(n / 2) + 1\n  } else {\n    return largestDivisor(n - 1)\n  }\n}\n\n/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  if (n % 2 === 0) {\n    return largestDivisor2(n / 2) + 1\n  } else {\n    return largestDivisor2(n - 1)\n  }\n}\n\n/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  if (n % 2 === 0) {\n    return largestDivisor3(n / 2) + 1\n  } else {\n    return largestDivisor3(n - 1)\n  }\n}\n\n/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  if (n % 2 === 0) {\n    return largestDivisor4(n / 2) + 1\n  } else {\n    return largestDivisor4(n - 1)\n  }\n}\n\n/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  if (n % 2 === 0) {\n    return largestDivisor5(n / 2) + 1\n  } else {\n    return largestDivisor5(n - 1)\n  }\n}\n\n/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  if (n % 2 === 0) {\n    return largestDivisor6(n / 2) + 1\n  } else {\n    return largestDivisor6(n - 1)\n  }\n}\n\n/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  if (n % 2 === 0) {\n    return largestDivisor7(n / 2) + 1\n  } else {\n    return largestDivisor7(n - 1)\n  }\n}\n\n/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  if (n % 2 === 0) {\n    return largestDivisor8(n / 2) + 1\n  } else {\n    return largestDivisor8(n - 1)\n  }\n}\n\n/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  if (n % 2 === 0) {\n    return largestDivisor9(n / 2) + 1\n  } else {\n    return largestDivisor9(n - 1)\n  }\n}\n\n/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  if (n % 2 === 0) {\n    return largestDivisor10(n / 2) + 1\n  } else {\n    return largestDivisor10(n - 1)\n  }\n}\n\n/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  if (n % 2 === 0) {\n    return largestDivisor11(n / 2) + 1\n  } else {\n    return largestDivisor11(n - 1)\n  }\n}\n\n/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  if (n % 2 === 0) {\n    return largestDivisor12(n / 2) + 1\n  } else {\n    return largestDivisor12(n - 1)\n  }\n}\n\n/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  if (n % 2 === 0) {\n    return largestDivisor13(n / 2) + 1\n  } else {\n    return largestDivisor13(n - 1)\n  }\n}\n\n/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  if (n % 2 === 0) {\n    return largestDivisor14(n / 2) + 1\n  } else {\n    return largestDivisor14(n - 1)\n  }\n}\n\n/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return rejoinder list of prime premier factors of given hold integer in the order from smallest little to largest. \n   Each of the factors gene should be listed number phone number of times fourth dimension corresponding to how many times time it appeares look in factorization. \n   Input number phone number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "/* Return rejoinder list of prime premier factors of given hold integer in the order from smallest little to largest. \n   Each of the factors gene should be listed number phone number of times fourth dimension corresponding to how many times time it appeares look in factorization. \n   Input number phone number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst prime = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst isPrime = (n) => {\n  let factors = prime(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] === factors[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber = (n) => {\n  let factors = prime(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] === factors[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber2 = (n) => {\n  let factors = prime(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] === factors[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber3 = (n) => {\n  let factors = prime(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] === factors[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber4 = (n) => {\n  let factors = prime(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] === factors[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber5 = (n) => {\n  let factors = prime(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] === factors[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber6 = (n) => {\n  let factors = prime(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] === factors[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber7 = (n) => {\n  let factors = prime(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] === factors[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber8 = (n) => {\n  let factors = prime(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] === factors[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber9 = (n) => {\n  let factors = prime(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] === factors[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber10 = (n) => {\n  let factors = prime(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] === factors[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber11 = (n) => {\n  let factors = prime(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] === factors[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber12 = (n) => {\n  let factors = prime(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] === factors[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber13 = (n) => {\n  let factors = prime(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] === factors[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber14 = (n) => {\n  let factors = prime(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] === factors[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber15 = (n) => {\n  let factors = prime(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] === factors[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber16", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers integer, remove murder all elements that occur happen more than once. \n   Keep order ordering of elements left impart the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "/* From a list of integers integer, remove murder all elements that occur happen more than once. \n   Keep order ordering of elements left impart the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === numbers.length) {\n      result.push(numbers[i]);\n      index = 0;\n    } else if (numbers[i] === numbers[index]) {\n      index++;\n    } else {\n      result.push(numbers[i]);\n      index = 0;\n    }\n  }\n  return result;\n};\n\nconst testRemoveDuplicates = () => {\n  const result = removeDuplicates([1, 2, 3, 2, 4]);\n  console.log(result);\n};\n\nmodule.exports = {\n  removeDuplicates,\n  testRemoveDuplicates\n};\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "/* For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/**\n  For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/**\n  For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/**\n  For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/**\n  For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/**\n  For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/**\n  For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/**\n  For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/**\n  For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/**\n  For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/**\n  For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/**\n  For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/**\n  For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/**\n  For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/**\n  For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/**\n  For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/**\n  For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.toLowerCase().replace", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single individual string chain\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "/* Concatenate list of strings into a single individual string chain\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Convert a string to a list of characters\n  >>> stringToChars('abc')\n  ['a', 'b', 'c']\n  */\nconst stringToChars = (str) => {\n  return str.split('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> charsToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst charsToString = (chars) => {\n  return chars.join('');\n};\n\n/*\n  Convert a string to a list of integers\n  >>> stringToInts('abc')\n  [0, 1, 2]\n  */\nconst stringToInts = (str) => {\n  return str.split('').map((char) => {\n    return char.charCodeAt(0);\n  });\n};\n\n/*\n  Convert a list of integers to a string\n  >>> intsToString(['0', '1', '2'])\n  'abc'\n  */\nconst intsToString = (ints) => {\n  return ints.join('');\n};\n\n/*\n  Convert a list of integers to a list of characters\n  >>> intsToChars(['0', '1', '2'])\n  ['a', 'b', 'c']\n  */\nconst intsToChars = (ints) => {\n  return ints.map((char) => {\n    return String.fromCharCode(char);\n  });\n};\n\n/*\n  Convert a list of integers to a list of integers\n  >>> intsToInts(['0', '1', '2'])\n  [0, 1, 2]\n  */\nconst intsToInts = (ints) => {\n  return ints.map((char) => {\n    return char.charCodeAt(0);\n  });\n};\n\n/*\n  Convert a list of integers to a list of integers\n  >>> intsToInts(['0', '1', '2'])\n  [0, 1, 2]\n  */\nconst intsToInts = (ints) => {\n  return ints.map((char) => {\n    return char.charCodeAt(0);\n  });\n};\n\n/*\n  Convert a list of integers to a list of integers\n  >>> intsToInts(['0', '1', '2'])\n  [0, 1, 2]\n  */\nconst intsToInts = (ints) => {\n  return ints.map((char) => {\n    return char.charCodeAt(0);\n  });\n};\n\n/*\n  Convert a list of integers to a list of integers\n  >>> intsToInts(['0', '1', '2'])\n  [0, 1, 2]\n  */\nconst intsToInts = (ints) => {\n  return ints.map((char) => {\n    return char.charCodeAt(0);\n  });\n};\n\n/*\n  Convert a list of integers to a list of integers\n  >>> intsToInts(['0', '1', '2'])\n  [0, 1, 2]\n  */\nconst intsToInts = (ints) => {\n  return ints.map((char) => {\n    return char.charCodeAt(0);\n  });\n};\n\n/*\n  Convert a list of integers to a list of integers\n  >>> intsToInts(['0', '1', '2'])\n  [0, 1, 2]\n  */\nconst intsToInts = (ints) => {\n  return ints.map((char) => {\n    return char.charCodeAt(0);\n  });\n};\n\n/*\n  Convert a list of integers to a list of integers\n  >>> intsToInts(['0', '1', '2'])\n  [0, 1, 2]\n  */\nconst intsToInts = (ints) => {\n  return ints.map((char) => {\n    return char.charCodeAt(0);\n  });\n};\n\n/*\n  Convert a list of integers to a list of integers\n  >>> intsToInts(['0', '1', '2'])\n  [0, 1, 2]\n  */\nconst intsToInts = (ints) => {\n  return ints.map((char) => {\n    return char.charCodeAt(0);\n  });\n};\n\n/*\n  Convert a list of integers to a list of integers\n  >>> intsToInts(['0', '1', '2'])\n  [0, 1, 2]\n  */\nconst intsToInts = (ints) => {\n  return ints.map((char) => {\n    return char.charCodeAt(0);\n  });\n};\n\n/*\n  Convert a list of integers to a list of integers\n  >>> intsToInts(['0', '1', '2'])\n  [0, 1, 2]\n  */\nconst intsToInts = (ints) => {\n  return ints.map((char) => {\n    return char.charCodeAt(0);\n  });\n};\n\n/*\n  Convert a list of integers to a list of integers\n  >>> intsToInts(['0', '1', '2'])\n  [0, 1, 2]\n  */\nconst intsToInts = (ints) => {\n  return ints.map((char) => {\n    return char.charCodeAt(0);\n  });\n};\n\n/*\n  Convert a list of integers to a list of integers\n  >>> intsToInts(['0', '1', '2'])\n  [0, 1, 2]\n  */\nconst intsToInts = (ints) => {\n  return ints.map((char) => {\n    return char.charCodeAt(0);\n  });\n};\n\n/*\n  Convert a list of integers to a list of integers\n  >>> intsToInt", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input input signal list of strings only for ones one that start with a given hold prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "/* Filter an input input signal list of strings only for ones one that start with a given hold prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    return strings.indexOf(prefix) === 0? [strings[0]] : [];\n  }\n\n  const filtered = strings.filter(s => s.indexOf(prefix) === 0);\n  return filtered.length === 0? [] : filtered;\n};\n\nmodule.exports = {\n  filterByPrefix,\n};\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/3", "prompt": "/* You're given grant a list of deposit and withdrawal operations on a bank savings bank account report that starts get down with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point compass point function should return true truthful. Otherwise differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "/* You're given grant a list of deposit and withdrawal operations on a bank savings bank account report that starts get down with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point compass point function should return true truthful. Otherwise differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\nmodule.exports = belowZero;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive cocksure numbers phone number in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "/*Return only positive cocksure numbers phone number in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegative = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures2 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures3 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures4 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures5 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures6 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures7 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures8 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures9 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures10 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures11 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures12 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures13 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures14 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures15 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures16 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures17 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nconst getNegativeCockSures", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/31", "prompt": "/*Return true on-key if a given pass number is prime premier, and false otherwise differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "/*Return true on-key if a given pass number is prime premier, and false otherwise differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n < 4) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i <= Math.sqrt(n); i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default isPrime;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients coefficient xs at point item x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find receive x such that poly(x) = 0. \n   findZero returns only only zero point degree, even if there are many. \n   Moreover, findZero only takes bring list xs having even number of coefficients coefficient \n   and largest big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients coefficient xs at point item x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find receive x such that poly(x) = 0. \n   findZero returns only only zero point degree, even if there are many. \n   Moreover, findZero only takes bring list xs having even number of coefficients coefficient \n   and largest big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const x = xs[0];\n  const n = xs.length;\n  const max = xs[n - 1];\n  const min = xs[0];\n  const maxCoeff = max;\n  const minCoeff = min;\n  const maxCoeff2 = maxCoeff * maxCoeff;\n  const minCoeff2 = minCoeff * minCoeff;\n  const maxCoeff3 = maxCoeff2 * maxCoeff;\n  const minCoeff3 = minCoeff2 * minCoeff;\n  const maxCoeff4 = maxCoeff3 * maxCoeff;\n  const minCoeff4 = minCoeff3 * minCoeff;\n  const maxCoeff5 = maxCoeff4 * maxCoeff;\n  const minCoeff5 = minCoeff4 * minCoeff;\n  const maxCoeff6 = maxCoeff5 * maxCoeff;\n  const minCoeff6 = minCoeff5 * minCoeff;\n  const maxCoeff7 = maxCoeff6 * maxCoeff;\n  const minCoeff7 = minCoeff6 * minCoeff;\n  const maxCoeff8 = maxCoeff7 * maxCoeff;\n  const minCoeff8 = minCoeff7 * minCoeff;\n  const maxCoeff9 = maxCoeff8 * maxCoeff;\n  const minCoeff9 = minCoeff8 * minCoeff;\n  const maxCoeff10 = maxCoeff9 * maxCoeff;\n  const minCoeff10 = minCoeff9 * minCoeff;\n  const maxCoeff11 = maxCoeff10 * maxCoeff;\n  const minCoeff11 = minCoeff10 * minCoeff;\n  const maxCoeff12 = maxCoeff11 * maxCoeff;\n  const minCoeff12 = minCoeff11 * minCoeff;\n  const maxCoeff13 = maxCoeff12 * maxCoeff;\n  const minCoeff13 = minCoeff12 * minCoeff;\n  const maxCoeff14 = maxCoeff13 * maxCoeff;\n  const minCoeff14 = minCoeff13 * minCoeff;\n  const maxCoeff15 = maxCoeff14 * maxCoeff;\n  const minCoeff15 = minCoeff14 * minCoeff;\n  const maxCoeff16 = maxCoeff15 * maxCoeff;\n  const minCoeff16 = minCoeff15 * minCoeff;\n  const maxCoeff17 = maxCoeff16 * maxCoeff;\n  const minCoeff17 = minCoeff16 * minCoeff;\n  const maxCoeff18 = maxCoeff17 * maxCoeff;\n  const minCoeff18 = minCoeff17 * minCoeff;\n  const maxCoeff19 = maxCoeff18 * maxCoeff;\n  const minCoeff19 = minCoeff18 * minCoeff;\n  const maxCoeff20 = maxCoeff19 * maxCoeff;\n  const minCoeff20 = minCoeff19 * minCoeff;\n  const maxCoeff21 = maxCoeff20 * maxCoeff;\n  const minCoeff21 = minCoeff20 * minCoeff;\n  const maxCoeff22 = maxCoeff21 * maxCoeff;\n  const minCoeff22 = minCoeff21 * minCoeff;\n  const maxCoeff23 = maxCoeff22 * maxCoeff;\n  const minCoeff23 = minCoeff22 * minCoeff;\n  const maxCoeff24 = maxCoeff23 * maxCoeff;\n  const minCoeff24 = minCoeff23 * minCoeff;\n  const maxCoeff25 = maxCoeff24 * maxCoeff;\n  const minCoeff25 = minCoeff24 * minCoeff;\n  const maxCoeff26 = maxCoeff25 * maxCoeff;\n  const minCoeff26 = minCoeff25 * minCoeff;\n  const maxCoeff27 = maxCoeff26 * maxCoeff;\n  const minCoeff27 = minCoeff26 * minCoeff;\n  const maxCoeff28 = maxCoeff27 * maxCoeff;\n  const minCoeff28 = minCoeff27 * minCoeff;\n  const maxCoeff29 = maxCoeff28 * maxCoeff;\n  const minCoeff29 = minCoeff28 * minCoeff;\n  const maxCoeff30 = maxCoeff29 * maxCoeff;\n  const minCoeff30 = minCoeff29 * minCoeff;\n  const maxCoeff31 = max", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values value of the corresponding indicies of l, but sorted classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values value of the corresponding indicies of l, but sorted classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    let j = i;\n    while (j < l.length && l[j] % 3 === 0) {\n      j += 1;\n    }\n    if (j - i > 1) {\n      l2.push(...l.slice(i, j));\n    }\n    i = j;\n  }\n  return l2;\n};\n\nconst test = () => {\n  console.log(sortThird([1, 2, 3]));\n  console.log(sortThird([5, 6, 3, 4, 8, 9, 2]));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      k++;\n      j++;\n    } else {\n      if (k > 0) {\n        u[k] = l[i];\n        k = 0;\n      }\n      i++;\n    }\n  }\n  return u;\n};\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      k++;\n      j++;\n    } else {\n      if (k > 0) {\n        u[k] = l[i];\n        k = 0;\n      }\n      i++;\n    }\n  }\n  return u;\n};\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      k++;\n      j++;\n    } else {\n      if (k > 0) {\n        u[k] = l[i];\n        k = 0;\n      }\n      i++;\n    }\n  }\n  return u;\n};\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      k++;\n      j++;\n    } else {\n      if (k > 0) {\n        u[k] = l[i];\n        k = 0;\n      }\n      i++;\n    }\n  }\n  return u;\n};\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      k++;\n      j++;\n    } else {\n      if (k > 0) {\n        u[k] = l[i];\n        k = 0;\n      }\n      i++;\n    }\n  }\n  return u;\n};\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      k++;\n      j++;\n    } else {\n      if (k > 0) {\n        u[k] = l[i];\n        k = 0;\n      }\n      i++;\n    }\n  }\n  return u;\n};\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      k++;\n      j++;\n    } else {\n      if (k > 0) {\n        u[k] = l[i];\n        k = 0;\n      }\n      i++;\n    }\n  }\n  return u;\n};\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      k++;\n      j++;\n    } else {\n      if (k > 0) {\n        u[k] = l[i];\n        k = 0;\n      }\n      i++;\n    }\n  }\n  return u;\n};\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      k++;\n      j++;\n    } else {\n      if (k > 0) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum maximal element chemical element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "/*Return maximum maximal element chemical element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the index of the element with the maximum value in the list.\n  >>> maxElement([1, 2, 3])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst maxElementIndex = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the index of the element with the minimum value in the list.\n  >>> minElement([1, 2, 3])\n  0\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  let minIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Return the index of the element with the minimum value in the list.\n  >>> minElement([1, 2, 3])\n  0\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst minElementIndex = (l) => {\n  let min = l[0];\n  let minIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Return the index of the element with the maximum value in the list.\n  >>> maxElement([1, 2, 3])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst maxElementIndex = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the index of the element with the minimum value in the list.\n  >>> minElement([1, 2, 3])\n  0\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst minElementIndex = (l) => {\n  let min = l[0];\n  let minIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Return the index of the element with the maximum value in the list.\n  >>> maxElement([1, 2, 3])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst maxElementIndex = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the index of the element with the minimum value in the list.\n  >>> minElement([1, 2, 3])\n  0\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst minElementIndex = (l) => {\n  let min = l[0];\n  let minIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Return the index of the element with the maximum value in the list.\n  >>> maxElement([1, 2, 3])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst maxElementIndex = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the index of the element with the minimum value in the list.\n  >>> minElement([1, 2, 3])\n  0\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst minElementIndex = (l) => {\n  let min = l[0];\n  let minIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex =", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number issue of times prison term the digit 7 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "/*Return the number issue of times prison term the digit 7 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count += 2;\n    } else if (i % 11 === 0) {\n      count += 1;\n    } else if (i % 13 === 0) {\n      count += 3;\n    } else {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    let j = i;\n    while (j < l.length && l[j] % 2 === 0) {\n      j++;\n    }\n    l2.push(l[i]);\n    while (j < l.length && l[j] % 2 === 1) {\n      l2.push(l[j]);\n      j++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven2 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    let j = i;\n    while (j < l.length && l[j] % 2 === 0) {\n      j++;\n    }\n    l2.push(l[i]);\n    while (j < l.length && l[j] % 2 === 1) {\n      l2.push(l[j]);\n      j++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven3 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    let j = i;\n    while (j < l.length && l[j] % 2 === 0) {\n      j++;\n    }\n    l2.push(l[i]);\n    while (j < l.length && l[j] % 2 === 1) {\n      l2.push(l[j]);\n      j++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven4 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    let j = i;\n    while (j < l.length && l[j] % 2 === 0) {\n      j++;\n    }\n    l2.push(l[i]);\n    while (j < l.length && l[j] % 2 === 1) {\n      l2.push(l[j]);\n      j++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven5 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    let j = i;\n    while (j < l.length && l[j] % 2 === 0) {\n      j++;\n    }\n    l2.push(l[i]);\n    while (j < l.length && l[j] % 2 === 1) {\n      l2.push(l[j]);\n      j++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven6 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    let j = i;\n    while (j < l.length && l[j] % 2 === 0) {\n      j++;\n    }\n    l2.push(l[i]);\n    while (j < l.length && l[j] % 2 === 1) {\n      l2.push(l[j]);\n      j++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortEven", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns restitution encoded string bowed stringed instrument by cycling motorbike groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input remark string encoded encode with encode_cyclic function affair. Returns decoded decode string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "/*\n  returns restitution encoded string bowed stringed instrument by cycling motorbike groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input remark string encoded encode with encode_cyclic function affair. Returns decoded decode string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n*/\n\n/*\n  returns restitution encoded string bowed stringed instrument by cycling motorbike groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n*/\n\n/*\n   takes as input remark string encoded encode with encode_cyclic function affair. Returns decoded decode string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n*/\n\n/*\n  returns restitution encoded string bowed stringed instrument by cycling motorbike groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n*/\n\n/*\n   takes as input remark string encoded encode with encode_cyclic function affair. Returns decoded decode string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n*/\n\n/*\n  returns restitution encoded string bowed stringed instrument by cycling motorbike groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n*/\n\n/*\n   takes as input remark string encoded encode with encode_cyclic function affair. Returns decoded decode string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns hark back n-th number phone number that is a Fibonacci number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "/*\n  primeFib returns hark back n-th number phone number that is a Fibonacci number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return n;\n  const fib = primeFib(n - 1);\n  const prime = fib + fib;\n  return prime;\n};\n\n/*\n  primeFib returns hark back n-th number phone number that is a Fibonacci number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib2 = (n) => {\n  if (n < 2) return n;\n  const fib = primeFib2(n - 1);\n  const prime = fib + fib;\n  return prime;\n};\n\n/*\n  primeFib returns hark back n-th number phone number that is a Fibonacci number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib3 = (n) => {\n  if (n < 2) return n;\n  const fib = primeFib3(n - 1);\n  const prime = fib + fib;\n  return prime;\n};\n\n/*\n  primeFib returns hark back n-th number phone number that is a Fibonacci number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib4 = (n) => {\n  if (n < 2) return n;\n  const fib = primeFib4(n - 1);\n  const prime = fib + fib;\n  return prime;\n};\n\n/*\n  primeFib returns hark back n-th number phone number that is a Fibonacci number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib5 = (n) => {\n  if (n < 2) return n;\n  const fib = primeFib5(n - 1);\n  const prime = fib + fib;\n  return prime;\n};\n\n/*\n  primeFib returns hark back n-th number phone number that is a Fibonacci number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib6 = (n) => {\n  if (n < 2) return n;\n  const fib = primeFib6(n - 1);\n  const prime = fib + fib;\n  return prime;\n};\n\n/*\n  primeFib returns hark back n-th number phone number that is a Fibonacci number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib7 = (n) => {\n  if (n < 2) return n;\n  const fib = primeFib7(n - 1);\n  const prime = fib + fib;\n  return prime;\n};\n\n/*\n  primeFib returns hark back n-th number phone number that is a Fibonacci number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib8 = (n) => {\n  if (n < 2) return n;\n  const fib = primeFib8(n - 1);\n  const prime = fib + fib;\n  return prime;\n};\n\n/*\n  primeFib returns hark back n-th number phone number that is a Fibonacci number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib9 = (n) => {\n  if (n < 2) return n;\n  const fib = primeFib9(n - 1);\n  const prime = fib + fib;\n  return prime;\n};\n\n/*\n  primeFib returns hark back n-th number phone number that is a Fibonacci number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib10 = (n) => {\n  if (n < 2) return n;\n  const fib = primeFib10(n - 1);\n  const prime = fib + fib;\n  return prime;\n};\n\n/*\n  primeFib returns hark back n-th number phone number that is a Fibonacci number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> prime", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given grant list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference remainder between each \n   element chemical element and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "/* For a given grant list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference remainder between each \n   element chemical element and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const dev = meanAbsoluteDeviation(numbers);\n  return mean + dev;\n};\n\n/*\n  For a given set of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the average modal absolute difference remainder between each \n  element chemical element and a centerpoint (mean in this case ): \n  STD = average modal | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const dev = standardDeviation(numbers);\n  return dev / mean;\n};\n\n/*\n  For a given set of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the average modal absolute difference remainder between each \n  element chemical element and a centerpoint (mean in this case ): \n  STD = average modal | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const dev = standardDeviation(numbers);\n  return dev * dev;\n};\n\n/*\n  For a given set of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the average modal absolute difference remainder between each \n  element chemical element and a centerpoint (mean in this case ): \n  STD = average modal | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const dev = standardDeviation(numbers);\n  return dev / mean;\n};\n\n/*\n  For a given set of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the average modal absolute difference remainder between each \n  element chemical element and a centerpoint (mean in this case ): \n  STD = average modal | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const dev = standardDeviation(numbers);\n  return dev * dev;\n};\n\n/*\n  For a given set of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the average modal absolute difference remainder between each \n  element chemical element and a centerpoint (mean in this case ): \n  STD = average modal | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const dev = standardDeviation(numbers);\n  return dev / mean;\n};\n\n/*\n  For a given set of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the average modal absolute difference remainder between each \n  element chemical element and a centerpoint (mean in this case ): \n  STD = average modal | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const dev = standardDeviation(numbers);\n  return dev * dev;\n};\n\n/*\n  For a given set of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the average modal absolute difference remainder between each \n  element chemical element and a centerpoint (mean in this case ): \n  STD = average modal | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const dev = standardDeviation(numbers);\n  return dev / mean;\n};\n\n/*\n  For a given set of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the average modal absolute difference remainder between each \n  element chemical element and a centerpoint (mean in this case ): \n  STD = average modal | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const dev = standardDeviation(numbers);\n  return dev * dev;\n};\n\n/*\n  For a given set of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the average modal absolute difference remainder between each \n  element chemical element and a centerpoint (mean in this case ): \n  STD = average modal | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const dev = standardDeviation(numbers);\n  return dev / mean;\n};\n\n/*\n  For a given set of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the average modal absolute difference remainder between each \n  element chemical element and a centerpoint (mean in this case ): \n  STD = average modal | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes fill a list of integers integer as an input. \n   it returns fall true if there are three distinct clear-cut elements in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  triplesSumToZero takes fill a list of integers integer as an input. \n   it returns fall true if there are three distinct clear-cut elements in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine think a road that's a perfectly absolutely straight infinitely boundlessly long line credit line. \n   n cars are driving force left to right correctly;   simultaneously, a different set hardening of n cars car \n   are driving right correct to left.    The two sets of cars start out being very far from \n   each other.   All cars move in the same speed.   Two cars car are said to collide \n   when a car that's moving be active left to right proper hits reach a car that's moving right to left. \n   However, the cars are infinitely sturdy hardy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function affair outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "/*\n  Imagine think a road that's a perfectly absolutely straight infinitely boundlessly long line credit line. \n   n cars are driving force left to right correctly;   simultaneously, a different set hardening of n cars car \n   are driving right correct to left.    The two sets of cars start out being very far from \n   each other.   All cars move in the same speed.   Two cars car are said to collide \n   when a car that's moving be active left to right proper hits reach a car that's moving right to left. \n   However, the cars are infinitely sturdy hardy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function affair outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n    let collision = 0;\n    let car1 = 0;\n    let car2 = 0;\n    while (car1 < n && car2 < n) {\n      if (car1 < car2) {\n        car1++;\n        car2++;\n        if (car1 == car2) {\n          collision++;\n        }\n      } else {\n        car2++;\n        car1++;\n        if (car1 == car2) {\n          collision++;\n        }\n      }\n    }\n    return collision;\n  }\n  */\n  \n  const carRaceCollision = (n) => {\n    let collision = 0;\n    let car1 = 0;\n    let car2 = 0;\n    while (car1 < n && car2 < n) {\n      if (car1 < car2) {\n        car1++;\n        car2++;\n        if (car1 == car2) {\n          collision++;\n        }\n      } else {\n        car2++;\n        car1++;\n        if (car1 == car2) {\n          collision++;\n        }\n      }\n    }\n    return collision;\n  }\n  \n  console.log(carRaceCollision(3));\n  console.log(carRaceCollision(4));\n  console.log(carRaceCollision(5));\n  console.log(carRaceCollision(6));\n  console.log(carRaceCollision(7));\n  console.log(carRaceCollision(8));\n  console.log(carRaceCollision(9));\n  console.log(carRaceCollision(10));\n  console.log(carRaceCollision(11));\n  console.log(carRaceCollision(12));\n  console.log(carRaceCollision(13));\n  console.log(carRaceCollision(14));\n  console.log(carRaceCollision(15));\n  console.log(carRaceCollision(16));\n  console.log(carRaceCollision(17));\n  console.log(carRaceCollision(18));\n  console.log(carRaceCollision(19));\n  console.log(carRaceCollision(20));\n  console.log(carRaceCollision(21));\n  console.log(carRaceCollision(22));\n  console.log(carRaceCollision(23));\n  console.log(carRaceCollision(24));\n  console.log(carRaceCollision(25));\n  console.log(carRaceCollision(26));\n  console.log(carRaceCollision(27));\n  console.log(carRaceCollision(28));\n  console.log(carRaceCollision(29));\n  console.log(carRaceCollision(30));\n  console.log(carRaceCollision(31));\n  console.log(carRaceCollision(32));\n  console.log(carRaceCollision(33));\n  console.log(carRaceCollision(34));\n  console.log(carRaceCollision(35));\n  console.log(carRaceCollision(36));\n  console.log(carRaceCollision(37));\n  console.log(carRaceCollision(38));\n  console.log(carRaceCollision(39));\n  console.log(carRaceCollision(40));\n  console.log(carRaceCollision(41));\n  console.log(carRaceCollision(42));\n  console.log(carRaceCollision(43));\n  console.log(carRaceCollision(44));\n  console.log(carRaceCollision(45));\n  console.log(carRaceCollision(46));\n  console.log(carRaceCollision(47));\n  console.log(carRaceCollision(48));\n  console.log(carRaceCollision(49));\n  console.log(carRaceCollision(50));\n  console.log(carRaceCollision(51));\n  console.log(carRaceCollision(52));\n  console.log(carRaceCollision(53));\n  console.log(carRaceCollision(54));\n  console.log(carRaceCollision(55));\n  console.log(carRaceCollision(56));\n  console.log(carRaceCollision(57));\n  console.log(carRaceCollision(58));\n  console.log(carRaceCollision(59));\n  console.log(carRaceCollision(60));\n  console.log(carRaceCollision(61));\n  console.log(carRaceCollision(62));\n  console.log(carRaceCollision(63));\n  console.log(carRaceCollision(64));\n  console.log(carRaceCollision(65));\n  console.log(carRaceCollision(66));\n  console.log(carRaceCollision(67));\n  console.log(carRaceCollision(68));\n  console.log(carRaceCollision(69));\n  console.log(carRaceCollision(70));\n  console.log(carRaceCollision(71));\n  console.log(carRaceCollision(72));\n  console.log(carRaceCollision(73));\n  console.log(carRaceCollision(74));\n  console.log(carRaceCollision(75));\n  console.log(carRaceCollision(76));\n  console.log(carRaceCollision(77));\n  console.log(carRaceCollision(78));\n  console.log(carRaceCollision(79));\n  console.log(carRaceCollision(80));\n  console.log(carRaceCollision(81));\n  console.log(carRaceCollision(82));\n  console.log(carRaceCollision(83));\n  console.log(carRaceCollision(84));\n  console.log(carRaceCollision", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = result[j] + 1;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = result[j] + 1;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = result[j] + 1;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = result[j] + 1;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = result[j] + 1;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = result[j] + 1;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = result[j] + 1;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = result[j] + 1;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes fill a list of integers integer as an input. \n   it returns fall true if there are two distinct clear-cut elements in the list that \n   sum kernel to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  pairsSumToZero takes fill a list of integers integer as an input. \n   it returns fall true if there are two distinct clear-cut elements in the list that \n   sum kernel to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      while (i < l.length && l[i] === 0) {\n        i++;\n      }\n      if (i < l.length) {\n        j = i + 1;\n        while (j < l.length && l[j] === 0) {\n          j++;\n        }\n        if (j < l.length) {\n          k = j + 1;\n          while (k < l.length && l[k] === 0) {\n            k++;\n          }\n          if (k < l.length) {\n            return true;\n          }\n        }\n      }\n    }\n    i++;\n  }\n  return false;\n};\n\nconst pairsSumToZero_2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      while (i < l.length && l[i] === 0) {\n        i++;\n      }\n      if (i < l.length) {\n        j = i + 1;\n        while (j < l.length && l[j] === 0) {\n          j++;\n        }\n        if (j < l.length) {\n          k = j + 1;\n          while (k < l.length && l[k] === 0) {\n            k++;\n          }\n          if (k < l.length) {\n            return true;\n          }\n        }\n      }\n    }\n    i++;\n  }\n  return false;\n};\n\nconst pairsSumToZero_3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      while (i < l.length && l[i] === 0) {\n        i++;\n      }\n      if (i < l.length) {\n        j = i + 1;\n        while (j < l.length && l[j] === 0) {\n          j++;\n        }\n        if (j < l.length) {\n          k = j + 1;\n          while (k < l.length && l[k] === 0) {\n            k++;\n          }\n          if (k < l.length) {\n            return true;\n          }\n        }\n      }\n    }\n    i++;\n  }\n  return false;\n};\n\nconst pairsSumToZero_4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      while (i < l.length && l[i] === 0) {\n        i++;\n      }\n      if (i < l.length) {\n        j = i + 1;\n        while (j < l.length && l[j] === 0) {\n          j++;\n        }\n        if (j < l.length) {\n          k = j + 1;\n          while (k < l.length && l[k] === 0) {\n            k++;\n          }\n          if (k < l.length) {\n            return true;\n          }\n        }\n      }\n    }\n    i++;\n  }\n  return false;\n};\n\nconst pairsSumToZero_5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      while (i < l.length && l[i] === 0) {\n        i++;\n      }\n      if (i < l.length) {\n        j = i + 1;\n        while (j < l.length && l[j] === 0) {\n          j++;\n        }\n        if (j < l.length) {\n          k = j + 1;\n          while (k < l.length && l[k] === 0) {\n            k++;\n          }\n          if (k < l.length) {\n            return true;\n          }\n        }\n      }\n    }\n    i++;\n  }\n  return false;\n};\n\nconst pairsSumToZero_6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      while (i < l.length && l[i] === 0) {\n        i++;\n      }\n      if (i < l.length) {\n        j = i + 1;\n        while (j < l.length && l[j] === 0) {\n          j++;\n        }\n        if (j < l.length) {\n          k = j + 1;\n          while (k < l.length && l[k] === 0) {\n            k++;\n          }\n          if (k < l.length) {\n            return true;\n          }\n        }\n      }\n    }\n    i++;\n  }\n  return false;\n};\n\nconst pairsSumToZero_7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical numeric base of input stimulation number x to base.\n   return string chain representation after the conversion. \n   base numbers issue are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "/*Change numerical numeric base of input stimulation number x to base.\n   return string chain representation after the conversion. \n   base numbers issue are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  let num = x;\n  while (num > 0) {\n    let digit = num % base;\n    result = String.fromCharCode(digit) + result;\n    num = Math.floor(num / base);\n  }\n  return result;\n};\n\n/*\n  return string chain representation after the conversion. \n  base numbers issue are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let result = '';\n  let num = x;\n  while (num > 0) {\n    let digit = num % base;\n    result = String.fromCharCode(digit) + result;\n    num = Math.floor(num / base);\n  }\n  return result;\n};\n\n/*\n  return string chain representation after the conversion. \n  base numbers issue are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let result = '';\n  let num = x;\n  while (num > 0) {\n    let digit = num % base;\n    result = String.fromCharCode(digit) + result;\n    num = Math.floor(num / base);\n  }\n  return result;\n};\n\n/*\n  return string chain representation after the conversion. \n  base numbers issue are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let result = '';\n  let num = x;\n  while (num > 0) {\n    let digit = num % base;\n    result = String.fromCharCode(digit) + result;\n    num = Math.floor(num / base);\n  }\n  return result;\n};\n\n/*\n  return string chain representation after the conversion. \n  base numbers issue are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let result = '';\n  let num = x;\n  while (num > 0) {\n    let digit = num % base;\n    result = String.fromCharCode(digit) + result;\n    num = Math.floor(num / base);\n  }\n  return result;\n};\n\n/*\n  return string chain representation after the conversion. \n  base numbers issue are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let result = '';\n  let num = x;\n  while (num > 0) {\n    let digit = num % base;\n    result = String.fromCharCode(digit) + result;\n    num = Math.floor(num / base);\n  }\n  return result;\n};\n\n/*\n  return string chain representation after the conversion. \n  base numbers issue are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let result = '';\n  let num = x;\n  while (num > 0) {\n    let digit = num % base;\n    result = String.fromCharCode(digit) + result;\n    num = Math.floor(num / base);\n  }\n  return result;\n};\n\n/*\n  return string chain representation after the conversion. \n  base numbers issue are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let result = '';\n  let num = x;\n  while (num > 0) {\n    let digit = num % base;\n    result = String.fromCharCode(digit) + result;\n    num = Math.floor(num / base);\n  }\n  return result;\n};\n\n/*\n  return string chain representation after the conversion. \n  base numbers issue are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let result = '';\n  let num = x;\n  while (num > 0) {\n    let digit = num % base;\n    result = String.fromCharCode(digit) + result;\n    num = Math.floor(num / base);\n  }\n  return result;\n};\n\n/*\n  return string chain representation after the conversion. \n  base numbers issue are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let result = '';\n  let num = x;\n  while (num > 0) {\n    let digit = num % base;\n    result = String.fromCharCode(digit) + result;\n    num = Math.floor(num", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number issue sequence succession is a sequence similar exchangeable to the Fibbonacci sequnece that's defined as follows surveil: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write a function affair to efficiently compute the n-th element component of the fib4 number sequence succession.   Do not use practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "/*The Fib4 number issue sequence succession is a sequence similar exchangeable to the Fibbonacci sequnece that's defined as follows surveil: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write a function affair to efficiently compute the n-th element component of the fib4 number sequence succession.   Do not use practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  if (n === 4) {\n    return 2;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements component in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "/*Return median of elements component in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('List is empty');\n  }\n  const middle = Math.floor(l.length / 2);\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      return l[i];\n    } else if (l[i] > l[j]) {\n      return l[j];\n    }\n    i++;\n    j--;\n  }\n  return l[i];\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks assay if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Checks assay if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  if (first!== last) {\n    return false;\n  }\n  let middle = text.substring(1, text.length - 1);\n  return isPalindrome(middle);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware mindful of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware mindful of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || n >= p) {\n    throw new Error(`Invalid number ${n}`)\n  }\n  return powMod(n, p, p)\n}\n\nmodule.exports = modp\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number issue 'delimeter' between every two consecutive straight elements of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "/* Insert a number issue 'delimeter' between every two consecutive straight elements of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i += delimeter) {\n    result.push(...numbers.slice(i, i + delimeter));\n  }\n  return result;\n};\n\nexport default intersperse;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns restitution encoded string bowed stringed instrument by shifting careen every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "/*\n  returns restitution encoded string bowed stringed instrument by shifting careen every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\"\"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\"\"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\"\"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\"\"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\"\"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\"\"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\"\"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\"\"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\"\"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\"\"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\"\"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )% 26 \n  ) ).join (\"\"); \n } \n\n / * \n   t", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function affair that takes lead string and returns tax return string without vowels vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "/*\n  removeVowels is a function affair that takes lead string and returns tax return string without vowels vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsRegex = new RegExp(vowels.join('|'), 'g');\n  return text.replace(vowelsRegex, '');\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true on-key if all numbers phone number in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "/*Return true on-key if all numbers phone number in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  aboveThreshold,\n  belowThreshold\n};\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check match if two words discussion have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "/*\n  Check match if two words discussion have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": true, "gc": "/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib15(n - 1) + fib15(n - 2);\n};\n\n/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib16(n - 1) + fib16(n - 2);\n};\n\n/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib17 = (n", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string bowed stringed instrument of \" < \" and \" > \". \n   return false assumed if every opening bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets is a string bowed stringed instrument of \" < \" and \" > \". \n   return false assumed if every opening bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152 = 0;\n  let bracketIndex153 = 0;\n  let bracketIndex154 = 0;\n  let bracketIndex155 = 0;\n  let bracketIndex156 = 0;\n  let bracketIndex157 = 0;\n  let bracketIndex158 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true on-key is list elements chemical element are monotonically increasing or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "/*Return true on-key is list elements chemical element are monotonically increasing or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n\n  let min = l[0];\n  let max = l[0];\n\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    } else if (l[i] > max) {\n      max = l[i];\n    }\n  }\n\n  return min <= max;\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted classify unique singular common elements for two lists list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "/*Return sorted classify unique singular common elements for two lists list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_sorted = sort(l1);\n  const l2_sorted = sort(l2);\n  const l1_unique = unique(l1_sorted);\n  const l2_unique = unique(l2_sorted);\n  const l1_common = intersection(l1_unique, l2_unique);\n  const l2_common = intersection(l2_unique, l1_unique);\n  return l1_common.concat(l2_common);\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime choice factor divisor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "/*Return the largest prime choice factor divisor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return 1\n  }\n  const factors = []\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n    }\n  }\n  if (factors.length === 0) {\n    return 1\n  }\n  return Math.max.apply(null, factors)\n}\n\nmodule.exports = largestPrimeFactor\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input input signal to this function routine is a string represented defend multiple groups for nested parentheses parenthesis separated by spaces quad. \n   For each of the group, output the deepest level grade of nesting of parentheses. \n   E.g. (() ()) has maximum maximal two levels degree of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "/* Input input signal to this function routine is a string represented defend multiple groups for nested parentheses parenthesis separated by spaces quad. \n   For each of the group, output the deepest level grade of nesting of parentheses. \n   E.g. (() ()) has maximum maximal two levels degree of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let result = [];\n  let current_level = 0;\n  let current_paren_level = 0;\n  let current_paren_string = \"\";\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_index_end = 0;\n  let current_paren_string_index_end_end = 0;\n  let current_paren_string_index_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function affair that sums summarize numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "/*sumToN is a function affair that sums summarize numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.exports = sumToN;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string bowed stringed instrument of \" (\" and \") \". \n   return true truthful if every opening bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets is a string bowed stringed instrument of \" (\" and \") \". \n   return true truthful if every opening bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsCount = brackets.split(\"\").length;\n  const bracketsCounts = brackets.split(\"\").map((bracket) => bracket.split(\"\").length);\n  return bracketsCount === bracketsCounts.reduce((acc, curr) => acc + curr, 0) % 2 === 0;\n};\n\nconst testCorrectBracketing = (brackets) => {\n  console.log(correctBracketing(brackets));\n};\n\ntestCorrectBracketing(\"()()()\");\ntestCorrectBracketing(\"()()()()\");\ntestCorrectBracketing(\"()()()()()\");\ntestCorrectBracketing(\"()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrectBracketing(\"()()()()()()()()()()()()()()()\");\ntestCorrect", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent typify coefficients coefficient of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same form shape.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "/* xs represent typify coefficients coefficient of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same form shape.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  const xs3 = xs2.map((x) => x * x * x);\n  return xs3.map((x) => x / x);\n};\n\n/*\n  x^n\n  >>> x^2\n  2\n  >>> x^3\n  3\n  >>> x^4\n  4\n  >>> x^5\n  5\n  >>> x^6\n  6\n  >>> x^7\n  7\n  >>> x^8\n  8\n  >>> x^9\n  9\n  >>> x^10\n  10\n  >>> x^11\n  11\n  >>> x^12\n  12\n  >>> x^13\n  13\n  >>> x^14\n  14\n  >>> x^15\n  15\n  >>> x^16\n  16\n  >>> x^17\n  17\n  >>> x^18\n  18\n  >>> x^19\n  19\n  >>> x^20\n  20\n  >>> x^21\n  21\n  >>> x^22\n  22\n  >>> x^23\n  23\n  >>> x^24\n  24\n  >>> x^25\n  25\n  >>> x^26\n  26\n  >>> x^27\n  27\n  >>> x^28\n  28\n  >>> x^29\n  29\n  >>> x^30\n  30\n  >>> x^31\n  31\n  >>> x^32\n  32\n  >>> x^33\n  33\n  >>> x^34\n  34\n  >>> x^35\n  35\n  >>> x^36\n  36\n  >>> x^37\n  37\n  >>> x^38\n  38\n  >>> x^39\n  39\n  >>> x^40\n  40\n  >>> x^41\n  41\n  >>> x^42\n  42\n  >>> x^43\n  43\n  >>> x^44\n  44\n  >>> x^45\n  45\n  >>> x^46\n  46\n  >>> x^47\n  47\n  >>> x^48\n  48\n  >>> x^49\n  49\n  >>> x^50\n  50\n  >>> x^51\n  51\n  >>> x^52\n  52\n  >>> x^53\n  53\n  >>> x^54\n  54\n  >>> x^55\n  55\n  >>> x^56\n  56\n  >>> x^57\n  57\n  >>> x^58\n  58\n  >>> x^59\n  59\n  >>> x^60\n  60\n  >>> x^61\n  61\n  >>> x^62\n  62\n  >>> x^63\n  63\n  >>> x^64\n  64\n  >>> x^65\n  65\n  >>> x^66\n  66\n  >>> x^67\n  67\n  >>> x^68\n  68\n  >>> x^69\n  69\n  >>> x^70\n  70\n  >>> x^71\n  71\n  >>> x^72\n  72\n  >>> x^73\n  73\n  >>> x^74\n  74\n  >>> x^75\n  75\n  >>> x^76\n  76\n  >>> x^77\n  77\n  >>> x^78\n  78\n  >>> x^79\n  79\n  >>> x^80\n  80\n  >>> x^81\n  81\n  >>> x^82\n  82\n  >>> x^83\n  83\n  >>> x^84\n  84\n  >>> x^85\n  85\n  >>> x^86\n  86\n  >>> x^87\n  87\n  >>> x^88\n  88\n  >>> x^89\n  89\n  >>> x^90\n  90\n  >>> x^91\n  91\n  >>> x^92\n  92\n  >>> x^93\n  93\n  >>> x^94\n  94\n  >>> x^95\n  95\n  >>> x^96\n  96\n  >>> x^97\n  97\n  >>> x^98\n  98\n  >>> x^99\n  99\n  >>> x^100\n  100\n  >>> x^101\n  101\n  >>> x^102\n  102\n  >>> x^103\n  103\n  >>> x^104\n  104\n  >>> x^105\n  105\n  >>> x^106\n  106\n  >>> x^107\n  107\n  >>> x^108\n  108\n  >>> x^109\n  109\n  >>> x^110\n  110\n  >>> x^111\n  111\n  >>> x^112\n  112\n  >>> x^113\n  113\n  >>> x^114\n  114\n  >>> x^115\n  115\n  >>> x^116\n  116\n  >>> x^117\n  117\n  >>> x^118\n  118\n  >>> x^119\n  119\n  >>> x^120\n  120\n  >>> x^121\n  121\n  >>> x^122\n  122\n  >>> x^123\n  123\n  >>> x^124\n  124\n  >>> x^125\n  125\n  >>> x^126\n  126\n  >>> x^127\n  127\n  >>> x^128\n  128\n  >>> x^129\n  129\n  >>> x^130\n  130\n  >>> x^131\n  131\n  >>> x^132\n  132\n  >>> x^133\n  133\n  >>> x^134\n  134\n  >>> x^135\n  135\n  >>> x^136\n  136\n  >>> x^137\n  137\n  >>> x^138\n  138\n  >>> x^139\n  139\n  >>> x^140\n  140\n  >>> x^141\n  141\n  >>> x^142\n  142\n  >>> x^143\n  143\n  >>> x^144\n  144\n  >>> x^145\n  145\n  >>> x^146\n  146\n  >>> x^147\n  147\n  >>> x^148\n  148\n  >>> x^149\n  149\n  >>> x^150\n  150\n  >>> x^151\n  151\n  >>> x^152", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number issue sequence succession is a sequence similar exchangeable to the Fibbonacci sequnece that's defined as follows surveil: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write a function affair to efficiently compute the n-th element component of the fibfib number sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "/*The FibFib number issue sequence succession is a sequence similar exchangeable to the Fibbonacci sequnece that's defined as follows surveil: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write a function affair to efficiently compute the n-th element component of the fibfib number sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function affair vowelsCount which takes lead a string representing defend \n   a word as input input signal and returns the number issue of vowels in the string. \n   Vowels vowel in this case are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "/*Write a function affair vowelsCount which takes lead a string representing defend \n   a word as input input signal and returns the number issue of vowels in the string. \n   Vowels vowel in this case are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let vowelsCount = 0;\n  let vowelsCount2 = 0;\n  let vowelsCount3 = 0;\n  let vowelsCount4 = 0;\n  let vowelsCount5 = 0;\n  let vowelsCount6 = 0;\n  let vowelsCount7 = 0;\n  let vowelsCount8 = 0;\n  let vowelsCount9 = 0;\n  let vowelsCount10 = 0;\n  let vowelsCount11 = 0;\n  let vowelsCount12 = 0;\n  let vowelsCount13 = 0;\n  let vowelsCount14 = 0;\n  let vowelsCount15 = 0;\n  let vowelsCount16 = 0;\n  let vowelsCount17 = 0;\n  let vowelsCount18 = 0;\n  let vowelsCount19 = 0;\n  let vowelsCount20 = 0;\n  let vowelsCount21 = 0;\n  let vowelsCount22 = 0;\n  let vowelsCount23 = 0;\n  let vowelsCount24 = 0;\n  let vowelsCount25 = 0;\n  let vowelsCount26 = 0;\n  let vowelsCount27 = 0;\n  let vowelsCount28 = 0;\n  let vowelsCount29 = 0;\n  let vowelsCount30 = 0;\n  let vowelsCount31 = 0;\n  let vowelsCount32 = 0;\n  let vowelsCount33 = 0;\n  let vowelsCount34 = 0;\n  let vowelsCount35 = 0;\n  let vowelsCount36 = 0;\n  let vowelsCount37 = 0;\n  let vowelsCount38 = 0;\n  let vowelsCount39 = 0;\n  let vowelsCount40 = 0;\n  let vowelsCount41 = 0;\n  let vowelsCount42 = 0;\n  let vowelsCount43 = 0;\n  let vowelsCount44 = 0;\n  let vowelsCount45 = 0;\n  let vowelsCount46 = 0;\n  let vowelsCount47 = 0;\n  let vowelsCount48 = 0;\n  let vowelsCount49 = 0;\n  let vowelsCount50 = 0;\n  let vowelsCount51 = 0;\n  let vowelsCount52 = 0;\n  let vowelsCount53 = 0;\n  let vowelsCount54 = 0;\n  let vowelsCount55 = 0;\n  let vowelsCount56 = 0;\n  let vowelsCount57 = 0;\n  let vowelsCount58 = 0;\n  let vowelsCount59 = 0;\n  let vowelsCount60 = 0;\n  let vowelsCount61 = 0;\n  let vowelsCount62 = 0;\n  let vowelsCount63 = 0;\n  let vowelsCount64 = 0;\n  let vowelsCount65 = 0;\n  let vowelsCount66 = 0;\n  let vowelsCount67 = 0;\n  let vowelsCount68 = 0;\n  let vowelsCount69 = 0;\n  let vowelsCount70 = 0;\n  let vowelsCount71 = 0;\n  let vowelsCount72 = 0;\n  let vowelsCount73 = 0;\n  let vowelsCount74 = 0;\n  let vowelsCount75 = 0;\n  let vowelsCount76 = 0;\n  let vowelsCount77 = 0;\n  let vowelsCount78 = 0;\n  let vowelsCount79 = 0;\n  let vowelsCount80 = 0;\n  let vowelsCount81 = 0;\n  let vowelsCount82 = 0;\n  let vowelsCount83 = 0;\n  let vowelsCount84 = 0;\n  let vowelsCount85 = 0;\n  let vowelsCount86 = 0;\n  let vowelsCount87 = 0;\n  let vowelsCount88 = 0;\n  let vowelsCount89 = 0;\n  let vowelsCount90 = 0;\n  let vowelsCount91 = 0;\n  let vowelsCount92 = 0;\n  let vowelsCount93 = 0;\n  let vowelsCount94 = 0;\n  let vowelsCount95 = 0;\n  let vowelsCount96 = 0;\n  let vowelsCount97 = 0;\n  let vowelsCount98 = 0;\n  let vowelsCount99 = 0;\n  let vowelsCount100 = 0;\n  let vowelsCount101 = 0;\n  let vowelsCount102 = 0;\n  let vowelsCount103 = 0;\n  let vowelsCount104 = 0;\n  let vowelsCount105 = 0;\n  let vowelsCount106 = 0;\n  let vowelsCount107 = 0;\n  let vowelsCount108 = 0;\n  let vowelsCount109 = 0;\n  let vowelsCount110 = 0;\n  let vowelsCount111 = 0;\n  let vowelsCount112 = 0;\n  let vowelsCount113 = 0;\n  let vowelsCount114 = 0;\n  let vowelsCount115 = 0;\n  let vowelsCount116 = 0;\n  let vowelsCount117 = 0;\n  let vowelsCount118 = 0;\n  let vowelsCount119 = 0;\n  let vowelsCount120 = 0;\n  let vowelsCount121 = 0;\n  let vowelsCount122 = 0;\n  let vowelsCount123 = 0;\n  let vowelsCount124 = 0;\n  let vowelsCount125 = 0;\n  let vowelsCount126 = 0;\n  let vowelsCount127 = 0;\n  let vowelsCount128 = 0;\n  let vowelsCount129 = 0;\n  let vowelsCount130 = 0;\n  let vowelsCount131 = 0;\n  let vowelsCount132 = 0;\n  let vowelsCount133 = 0;\n  let vowelsCount134 = 0;\n  let vowelsCount135 = 0;\n  let vowelsCount136 = 0;\n  let vowelsCount137 = 0;\n  let vowelsCount138 = 0;\n  let vowelsCount139 = 0;\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits digit of the integer x, shift the digits finger right by shift\n   and return the result consequence as a string. \n   If shift > number issue of digits, return digits digit reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "/*Circular shift the digits digit of the integer x, shift the digits finger right by shift\n   and return the result consequence as a string. \n   If shift > number issue of digits, return digits digit reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = \"\";\n  let digit = \"\";\n  let finger = \"\";\n  let i = 0;\n  while (i < x.length) {\n    digit = x.charAt(i);\n    finger = digit + finger;\n    i++;\n    if (i % shift === 0) {\n      digit = finger.charAt(0);\n      finger = finger.substring(1);\n    }\n    result = digit + result;\n  }\n  return result;\n};\n\nconst circularShift2 = (x, shift) => {\n  let result = \"\";\n  let digit = \"\";\n  let finger = \"\";\n  let i = 0;\n  while (i < x.length) {\n    digit = x.charAt(i);\n    finger = digit + finger;\n    i++;\n    if (i % shift === 0) {\n      digit = finger.charAt(0);\n      finger = finger.substring(1);\n    }\n    result = digit + result;\n  }\n  return result;\n};\n\nconst circularShift3 = (x, shift) => {\n  let result = \"\";\n  let digit = \"\";\n  let finger = \"\";\n  let i = 0;\n  while (i < x.length) {\n    digit = x.charAt(i);\n    finger = digit + finger;\n    i++;\n    if (i % shift === 0) {\n      digit = finger.charAt(0);\n      finger = finger.substring(1);\n    }\n    result = digit + result;\n  }\n  return result;\n};\n\nconst circularShift4 = (x, shift) => {\n  let result = \"\";\n  let digit = \"\";\n  let finger = \"\";\n  let i = 0;\n  while (i < x.length) {\n    digit = x.charAt(i);\n    finger = digit + finger;\n    i++;\n    if (i % shift === 0) {\n      digit = finger.charAt(0);\n      finger = finger.substring(1);\n    }\n    result = digit + result;\n  }\n  return result;\n};\n\nconst circularShift5 = (x, shift) => {\n  let result = \"\";\n  let digit = \"\";\n  let finger = \"\";\n  let i = 0;\n  while (i < x.length) {\n    digit = x.charAt(i);\n    finger = digit + finger;\n    i++;\n    if (i % shift === 0) {\n      digit = finger.charAt(0);\n      finger = finger.substring(1);\n    }\n    result = digit + result;\n  }\n  return result;\n};\n\nconst circularShift6 = (x, shift) => {\n  let result = \"\";\n  let digit = \"\";\n  let finger = \"\";\n  let i = 0;\n  while (i < x.length) {\n    digit = x.charAt(i);\n    finger = digit + finger;\n    i++;\n    if (i % shift === 0) {\n      digit = finger.charAt(0);\n      finger = finger.substring(1);\n    }\n    result = digit + result;\n  }\n  return result;\n};\n\nconst circularShift7 = (x, shift) => {\n  let result = \"\";\n  let digit = \"\";\n  let finger = \"\";\n  let i = 0;\n  while (i < x.length) {\n    digit = x.charAt(i);\n    finger = digit + finger;\n    i++;\n    if (i % shift === 0) {\n      digit = finger.charAt(0);\n      finger = finger.substring(1);\n    }\n    result = digit + result;\n  }\n  return result;\n};\n\nconst circularShift8 = (x, shift) => {\n  let result = \"\";\n  let digit = \"\";\n  let finger = \"\";\n  let i = 0;\n  while (i < x.length) {\n    digit = x.charAt(i);\n    finger = digit + finger;\n    i++;\n    if (i % shift === 0) {\n      digit = finger.charAt(0);\n      finger = finger.substring(1);\n    }\n    result = digit + result;\n  }\n  return result;\n};\n\nconst circularShift9 = (x, shift) => {\n  let result = \"\";\n  let digit = \"\";\n  let finger = \"\";\n  let i = 0;\n  while (i < x.length) {\n    digit = x.charAt(i);\n    finger = digit + finger;\n    i++;\n    if (i % shift === 0) {\n      digit = finger.charAt(0);\n      finger = finger.substring(1);\n    }\n    result = digit + result;\n  }\n  return result;\n};\n\nconst circularShift10 = (x, shift) => {\n  let result = \"\";\n  let digit = \"\";\n  let finger = \"\";\n  let i = 0;\n  while (i < x.length) {\n    digit = x.charAt(i);\n    finger = digit + finger;\n    i++;\n    if (i % shift === 0) {\n      digit = finger.charAt(0);\n      finger = finger.substring(1);\n    }\n    result = digit + result;\n  }\n  return result;\n};\n\nconst circularShift11 = (x, shift) => {\n  let result = \"\";\n  let digit = \"\";\n  let finger = \"\";\n  let i = 0;\n  while (i < x.length) {\n    digit = x.charAt(i);\n    finger = digit + finger;\n    i++;\n    if (i % shift === 0) {\n      digit = finger.charAt(0);\n      finger = finger.substring(1);\n    }\n    result = digit + result;\n  }\n  return result;\n};\n\nconst circularShift12 = (x, shift) => {\n  let result = \"\";\n  let digit = \"\";\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task necessitate \n   Write compose a function that takes remove a string as input input signal and returns the sum kernel of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "/*Task necessitate \n   Write compose a function that takes remove a string as input input signal and returns the sum kernel of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task job, you will be given pass a string that represents defend a number of apples apple and oranges \n   that are distributed stagger in a basket of fruit this basket contains control \n   apples, oranges orange, and mango fruits fruit. Given the string chain that represents the total number of \n   the oranges and apples and an integer that represent the total number act of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples apple and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "/*\n  In this task job, you will be given pass a string that represents defend a number of apples apple and oranges \n   that are distributed stagger in a basket of fruit this basket contains control \n   apples, oranges orange, and mango fruits fruit. Given the string chain that represents the total number of \n   the oranges and apples and an integer that represent the total number act of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples apple and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n  let total = 0;\n  let totalApples = 0;\n  let totalOranges = 0;\n  let totalMango = 0;\n  let totalFruit = 0;\n  let i = 0;\n  while (i < n) {\n    if (s[i] == \"apple\") {\n      totalApples++;\n    } else if (s[i] == \"orange\") {\n      totalOranges++;\n    } else if (s[i] == \"mango\") {\n      totalMango++;\n    } else {\n      totalFruit++;\n    }\n    i++;\n  }\n  total = totalApples + totalOranges + totalMango + totalFruit;\n  return total;\n}\n\nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let totalApples = 0;\n  let totalOranges = 0;\n  let totalMango = 0;\n  let totalFruit = 0;\n  let i = 0;\n  while (i < n) {\n    if (s[i] == \"apple\") {\n      totalApples++;\n    } else if (s[i] == \"orange\") {\n      totalOranges++;\n    } else if (s[i] == \"mango\") {\n      totalMango++;\n    } else {\n      totalFruit++;\n    }\n    i++;\n  }\n  total = totalApples + totalOranges + totalMango + totalFruit;\n  return total;\n}\n\nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let totalApples = 0;\n  let totalOranges = 0;\n  let totalMango = 0;\n  let totalFruit = 0;\n  let i = 0;\n  while (i < n) {\n    if (s[i] == \"apple\") {\n      totalApples++;\n    } else if (s[i] == \"orange\") {\n      totalOranges++;\n    } else if (s[i] == \"mango\") {\n      totalMango++;\n    } else {\n      totalFruit++;\n    }\n    i++;\n  }\n  total = totalApples + totalOranges + totalMango + totalFruit;\n  return total;\n}\n\nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let totalApples = 0;\n  let totalOranges = 0;\n  let totalMango = 0;\n  let totalFruit = 0;\n  let i = 0;\n  while (i < n) {\n    if (s[i] == \"apple\") {\n      totalApples++;\n    } else if (s[i] == \"orange\") {\n      totalOranges++;\n    } else if (s[i] == \"mango\") {\n      totalMango++;\n    } else {\n      totalFruit++;\n    }\n    i++;\n  }\n  total = totalApples + totalOranges + totalMango + totalFruit;\n  return total;\n}\n\nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let totalApples = 0;\n  let totalOranges = 0;\n  let totalMango = 0;\n  let totalFruit = 0;\n  let i = 0;\n  while (i < n) {\n    if (s[i] == \"apple\") {\n      totalApples++;\n    } else if (s[i] == \"orange\") {\n      totalOranges++;\n    } else if (s[i] == \"mango\") {\n      totalMango++;\n    } else {\n      totalFruit++;\n    }\n    i++;\n  }\n  total = totalApples + totalOranges + totalMango + totalFruit;\n  return total;\n}\n\nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let totalApples = 0;\n  let totalOranges = 0;\n  let totalMango = 0;\n  let totalFruit = 0;\n  let i = 0;\n  while (i < n) {\n    if (s[i] == \"apple\") {\n      totalApples++;\n    } else if (s[i] == \"orange\") {\n      totalOranges++;\n    } else if (s[i] == \"mango\") {\n      totalMango++;\n    } else {\n      totalFruit++;\n    }\n    i++;\n  }\n  total = totalApples + totalOranges + totalMango + totalFruit;\n  return total;\n}\n\nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let totalApples = 0;\n  let totalOranges = 0;\n  let totalMango = 0;\n  let totalFruit = 0;\n  let i = 0;\n  while (i < n) {\n    if (s[i] == \"apple\") {\n      totalApples++;\n    } else if (s[i] == \"orange\") {\n      totalOranges++;\n    } else if (s[i] == \"mango\") {\n      totalMango++;\n    } else {\n      totalFruit++;\n    }\n    i++;\n  }\n  total = totalApples + totalOranges + totalMango + totalFruit;\n  return total;\n}\n\nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let totalApples = 0;\n  let totalOranges", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given grant an array representing a branch outgrowth of a tree that has non - negative minus integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes with the same smallest modest even tied value are found return the node lymph node that has smallest index. \n\n   The plucked node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the given give array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "/*\n  \" Given grant an array representing a branch outgrowth of a tree that has non - negative minus integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes with the same smallest modest even tied value are found return the node lymph node that has smallest index. \n\n   The plucked node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the given give array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return [];\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    } else if (arr[i] === min) {\n      minIndex = i;\n    }\n  }\n  return [min, minIndex];\n};\n\nmodule.exports = pluck;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given grant a non - empty list of positive integers integer. Return revert the greatest capital integer that is greater than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number issue of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "/*\n  You are given grant a non - empty list of positive integers integer. Return revert the greatest capital integer that is greater than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number issue of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    let freq = 0\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j] > lst[i]) {\n        freq++\n      }\n    }\n    if (freq > maxFreq) {\n      max = lst[i]\n      maxFreq = freq\n    }\n  }\n  return max\n}\n\nmodule.exports = search\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input input signal list of strings only for ones one that contain given hold substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "/* Filter an input input signal list of strings only for ones one that contain given hold substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    if (strings[0].indexOf(substring) === -1) {\n      return [];\n    }\n    return [strings[0]];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an input input signal list of strings only for ones one that contain given hold substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    if (strings[0].match(regex) === null) {\n      return [];\n    }\n    return [strings[0]];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)!== null) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an input input signal list of strings only for ones one that contain given hold substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByRegexCaseInsensitive = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    if (strings[0].match(regex) === null) {\n      return [];\n    }\n    return [strings[0]];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)!== null) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an input input signal list of strings only for ones one that contain given hold substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByRegexCaseInsensitiveWithMultipleMatches = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    if (strings[0].match(regex) === null) {\n      return [];\n    }\n    return [strings[0]];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)!== null) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an input input signal list of strings only for ones one that contain given hold substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByRegexCaseInsensitiveWithMultipleMatchesAndMultipleMatches = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    if (strings[0].match(regex) === null) {\n      return [];\n    }\n    return [strings[0]];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)!== null) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an input input signal list of strings only for ones one that contain given hold substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterByRegexCaseInsensitiveWithMultipleMatchesAndMultipleMatchesAndMultipleMatches = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    if (strings[0].match(regex) === null) {\n      return [];\n    }\n    return [strings[0]];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)!== null) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\nmodule.exports = {\n  filterBySubstring,\n  filterByRegex,\n  filterByRegexCaseInsensitive,\n  filterByRegexCaseInsensitiveWithMultipleMatches,\n  filterByRegexCaseInsensitiveWithMultipleMatchesAndMultipleMatches,\n  filterByRegexCaseInsensitiveWithMultipleMatchesAndMultipleMatchesAndMultipleMatches,\n};\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given grant list of integers, return list in strange foreign order orderliness. \n   Strange foreign sorting, is when you start originate with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant list of integers, return list in strange foreign order orderliness. \n   Strange foreign sorting, is when you start originate with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let result = [];\n  if (lst.length === 0) {\n    return result;\n  }\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === min) {\n      result.push(max);\n      max = lst[i];\n    } else if (lst[i] === max) {\n      result.push(min);\n      min = lst[i];\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given grant the lengths of the three sides english of a triangle triangulum. Return retort the area of \n   the triangle rounded round off to 2 decimal points if the three sides side form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make name a valid triangle triangulum when the sum of any two sides slope is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant the lengths of the three sides english of a triangle triangulum. Return retort the area of \n   the triangle rounded round off to 2 decimal points if the three sides side form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make name a valid triangle triangulum when the sum of any two sides slope is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const area = Math.abs(a + b + c) / 2;\n  if (a + b + c > area) {\n    return -1;\n  }\n  return area;\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write publish a function routine that returns true truthful if the object q will fly flee, and false otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements chemical element is less than or equal the maximum maximal possible weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "/*\n  Write publish a function routine that returns true truthful if the object q will fly flee, and false otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements chemical element is less than or equal the maximum maximal possible weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return true;\n  let max = q.reduce((a, b) => a + b, 0);\n  return q.reduce((a, b) => a + b, 0) <= w && q.reduce((a, b) => a + b, 0) === max;\n};\n\nmodule.exports = willItFly;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given grant an array arr of integers, find line up the minimum minimal number phone number of elements that \n   need want to be changed to make do the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards. In one change variety, you can change switch one element to any other element chemical element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant an array arr of integers, find line up the minimum minimal number phone number of elements that \n   need want to be changed to make do the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards. In one change variety, you can change switch one element to any other element chemical element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  if (arr.length === 0) return 0;\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    let j = arr.length - 1 - i;\n    let min1 = arr[i] + arr[j];\n    if (min1 < min) {\n      min = min1;\n    }\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write publish a function routine that accepts two lists list of strings and returns come back the list that has \n   total number issue of chars in the all strings string section of the list less than the other list.\n\n   if the two lists have the same number numeral of chars char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "/*\n  Write publish a function routine that accepts two lists list of strings and returns come back the list that has \n   total number issue of chars in the all strings string section of the list less than the other list.\n\n   if the two lists have the same number numeral of chars char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return [];\n  }\n  const result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    const num = lst1[i].length;\n    const j = lst2.indexOf(lst1[i]);\n    if (j!== -1 && num < lst2[j].length) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function affair that returns retort true if the given hold number is the multiplication generation of 3 prime numbers numbers pool \n   and false otherwise differently. \n   Knowing acknowledge that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "/*Write a function affair that returns retort true if the given hold number is the multiplication generation of 3 prime numbers numbers pool \n   and false otherwise differently. \n   Knowing acknowledge that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(isMultiplyPrime(30));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task job is to write compose a function that returns fall true if a number issue x is a simple \n   power of n and false fake in other cases. \n   x is a simple dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "/*Your task job is to write compose a function that returns fall true if a number issue x is a simple \n   power of n and false fake in other cases. \n   x is a simple dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x < 0) {\n    return false;\n  }\n  if (x === 0) {\n    return true;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = isSimplePower;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write publish a function routine that takes an integer a and returns fall true \n   if this ingeger is a cube block of some integer number. \n   Note bill: you may assume the input input signal is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "/*\n  Write publish a function routine that takes an integer a and returns fall true \n   if this ingeger is a cube block of some integer number. \n   Note bill: you may assume the input input signal is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 3 == 0;\n};\n\nmodule.exports = iscube;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked task to write compose a function that receives receive \n   a hexadecimal number as a string bowed stringed instrument and counts the number issue of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number numeral \n   greater bang-up than 1 that is not a product of two smaller minor natural numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine a number of the following come digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume simulate the input is always constantly correct or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "/*You have been tasked task to write compose a function that receives receive \n   a hexadecimal number as a string bowed stringed instrument and counts the number issue of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number numeral \n   greater bang-up than 1 that is not a product of two smaller minor natural numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine a number of the following come digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume simulate the input is always constantly correct or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given grant a number in decimal form phase and your task undertaking is to convert commute it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing stage a binary \n   number. Each character fictional character in the string will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end of the string chain. \n   The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "/*You will be given grant a number in decimal form phase and your task undertaking is to convert commute it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing stage a binary \n   number. Each character fictional character in the string will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end of the string chain. \n   The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryLength = decimal.toString().length;\n  let binaryIndex = 0;\n  let binaryString = '';\n  let binaryStringLength = 0;\n  let binaryStringIndex = 0;\n  let binaryStringIndex2 = 0;\n  let binaryStringIndex3 = 0;\n  let binaryStringIndex4 = 0;\n  let binaryStringIndex5 = 0;\n  let binaryStringIndex6 = 0;\n  let binaryStringIndex7 = 0;\n  let binaryStringIndex8 = 0;\n  let binaryStringIndex9 = 0;\n  let binaryStringIndex10 = 0;\n  let binaryStringIndex11 = 0;\n  let binaryStringIndex12 = 0;\n  let binaryStringIndex13 = 0;\n  let binaryStringIndex14 = 0;\n  let binaryStringIndex15 = 0;\n  let binaryStringIndex16 = 0;\n  let binaryStringIndex17 = 0;\n  let binaryStringIndex18 = 0;\n  let binaryStringIndex19 = 0;\n  let binaryStringIndex20 = 0;\n  let binaryStringIndex21 = 0;\n  let binaryStringIndex22 = 0;\n  let binaryStringIndex23 = 0;\n  let binaryStringIndex24 = 0;\n  let binaryStringIndex25 = 0;\n  let binaryStringIndex26 = 0;\n  let binaryStringIndex27 = 0;\n  let binaryStringIndex28 = 0;\n  let binaryStringIndex29 = 0;\n  let binaryStringIndex30 = 0;\n  let binaryStringIndex31 = 0;\n  let binaryStringIndex32 = 0;\n  let binaryStringIndex33 = 0;\n  let binaryStringIndex34 = 0;\n  let binaryStringIndex35 = 0;\n  let binaryStringIndex36 = 0;\n  let binaryStringIndex37 = 0;\n  let binaryStringIndex38 = 0;\n  let binaryStringIndex39 = 0;\n  let binaryStringIndex40 = 0;\n  let binaryStringIndex41 = 0;\n  let binaryStringIndex42 = 0;\n  let binaryStringIndex43 = 0;\n  let binaryStringIndex44 = 0;\n  let binaryStringIndex45 = 0;\n  let binaryStringIndex46 = 0;\n  let binaryStringIndex47 = 0;\n  let binaryStringIndex48 = 0;\n  let binaryStringIndex49 = 0;\n  let binaryStringIndex50 = 0;\n  let binaryStringIndex51 = 0;\n  let binaryStringIndex52 = 0;\n  let binaryStringIndex53 = 0;\n  let binaryStringIndex54 = 0;\n  let binaryStringIndex55 = 0;\n  let binaryStringIndex56 = 0;\n  let binaryStringIndex57 = 0;\n  let binaryStringIndex58 = 0;\n  let binaryStringIndex59 = 0;\n  let binaryStringIndex60 = 0;\n  let binaryStringIndex61 = 0;\n  let binaryStringIndex62 = 0;\n  let binaryStringIndex63 = 0;\n  let binaryStringIndex64 = 0;\n  let binaryStringIndex65 = 0;\n  let binaryStringIndex66 = 0;\n  let binaryStringIndex67 = 0;\n  let binaryStringIndex68 = 0;\n  let binaryStringIndex69 = 0;\n  let binaryStringIndex70 = 0;\n  let binaryStringIndex71 = 0;\n  let binaryStringIndex72 = 0;\n  let binaryStringIndex73 = 0;\n  let binaryStringIndex74 = 0;\n  let binaryStringIndex75 = 0;\n  let binaryStringIndex76 = 0;\n  let binaryStringIndex77 = 0;\n  let binaryStringIndex78 = 0;\n  let binaryStringIndex79 = 0;\n  let binaryStringIndex80 = 0;\n  let binaryStringIndex81 = 0;\n  let binaryStringIndex82 = 0;\n  let binaryStringIndex83 = 0;\n  let binaryStringIndex84 = 0;\n  let binaryStringIndex85 = 0;\n  let binaryStringIndex86 = 0;\n  let binaryStringIndex87 = 0;\n  let binaryStringIndex88 = 0;\n  let binaryStringIndex89 = 0;\n  let binaryStringIndex90 = 0;\n  let binaryStringIndex91 = 0;\n  let binaryStringIndex92 = 0;\n  let binaryStringIndex93 = 0;\n  let binaryStringIndex94 = 0;\n  let binaryStringIndex95 = 0;\n  let binaryStringIndex96 = 0;\n  let binaryStringIndex97 = 0;\n  let binaryStringIndex98 = 0;\n  let binaryStringIndex99 = 0;\n  let binaryStringIndex100 = 0;\n  let binaryStringIndex101 = 0;\n  let binaryStringIndex102 = 0;\n  let binaryStringIndex103 = 0;\n  let binaryStringIndex104 = 0;\n  let binaryStringIndex105 = 0;\n  let binaryStringIndex106 = 0;\n  let binaryStringIndex107 = 0;\n  let binaryStringIndex108 = 0;\n  let binaryStringIndex109 = 0;\n  let binaryStringIndex110 = 0;\n  let binaryStringIndex111 = 0;\n  let binaryStringIndex112 = 0;\n  let binaryStringIndex113 = 0;\n  let binaryStringIndex114 = 0;\n  let binaryStringIndex115 = 0;\n  let binaryStringIndex116 = 0;\n  let binaryStringIndex117 = 0;\n  let binaryStringIndex118 = 0;\n  let binaryStringIndex119 = 0;\n  let binaryStringIndex120 = 0;\n  let binaryStringIndex121 = 0;\n  let binaryStringIndex122 = 0;\n  let binaryStringIndex123 = 0;\n  let binaryStringIndex124 = 0;\n  let binaryStringIndex125 = 0;\n  let binaryStringIndex126 = 0;\n  let binaryStringIndex127 = 0;\n  let binaryStringIndex128 = 0;\n  let binaryStringIndex129 = 0;\n  let binaryStringIndex130 = 0;\n  let binaryStringIndex131 = 0;\n  let binaryStringIndex132 = 0;\n  let binaryString", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given grant list of integers, return a tuple consisting consist of a sum union and a product merchandise of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product intersection should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "/* For a given grant list of integers, return a tuple consisting consist of a sum union and a product merchandise of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product intersection should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\nconst test = () => {\n  let numbers = [1, 2, 3, 4]\n  let result = sumProduct(numbers, 0)\n  console.log(result)\n}\n\ntest()\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given grant a string s.\n   Your task job is to check control if the string chain is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "/*You are given grant a string s.\n   Your task job is to check control if the string chain is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let prev = s[0];\n  let curr = s[0];\n  let i = 1;\n  while (i < len) {\n    curr = s[i];\n    if (prev!== curr) {\n      if (i === 1) {\n        if (curr.length < 3) {\n          return false;\n        }\n      } else {\n        if (prev.length!== curr.length) {\n          return false;\n        }\n        for (let j = 0; j < curr.length; j++) {\n          if (prev[j]!== curr[j]) {\n            return false;\n          }\n        }\n      }\n    }\n    prev = curr;\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = isHappy;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last concluding week workweek of the semester and the teacher has to give the grades\n   to students scholar. The teacher has been making her own algorithm for grading grade. \n   The only problem is, she has lost lose the code she used for grading rate. \n   She has given impart you a list of GPAs grade point average for some students and you have to write publish \n   a function that can output a list of letter grades using practice the following table: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "/*It is the last concluding week workweek of the semester and the teacher has to give the grades\n   to students scholar. The teacher has been making her own algorithm for grading grade. \n   The only problem is, she has lost lose the code she used for grading rate. \n   She has given impart you a list of GPAs grade point average for some students and you have to write publish \n   a function that can output a list of letter grades using practice the following table: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 3.7) {\n      letterGrade.push('A+');\n    } else if (grades[i] >= 3.3) {\n      letterGrade.push('A');\n    } else if (grades[i] >= 3.0) {\n      letterGrade.push('A-');\n    } else if (grades[i] >= 2.7) {\n      letterGrade.push('B+');\n    } else if (grades[i] >= 2.3) {\n      letterGrade.push('B');\n    } else if (grades[i] >= 2.0) {\n      letterGrade.push('B-');\n    } else if (grades[i] >= 1.7) {\n      letterGrade.push('C+');\n    } else if (grades[i] >= 1.3) {\n      letterGrade.push('C');\n    } else if (grades[i] >= 1.0) {\n      letterGrade.push('C-');\n    } else if (grades[i] >= 0.7) {\n      letterGrade.push('D+');\n    } else if (grades[i] >= 0.3) {\n      letterGrade.push('D');\n    } else if (grades[i] >= 0.0) {\n      letterGrade.push('D-');\n    }\n  }\n  return letterGrade;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function affair that takes lead a string and returns true truthful if the string\n   length is a prime choice number or false fake otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "/*Write a function affair that takes lead a string and returns true truthful if the string\n   length is a prime choice number or false fake otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 3) {\n    return false;\n  }\n  let prime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i - 1)) {\n      prime = false;\n    }\n    if (string.charAt(i) === string.charAt(i - 2)) {\n      prime = false;\n    }\n    if (string.charAt(i) === string.charAt(i - 3)) {\n      prime = false;\n    }\n  }\n  return prime;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given grant a positive integer n, return the count of the numbers issue of n-digit\n   positive convinced integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant a positive integer n, return the count of the numbers issue of n-digit\n   positive convinced integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  while (start <= n) {\n    if (n % start === 0) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n}", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive cocksure integer N, return the total entire sum of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*Given a positive cocksure integer N, return the total entire sum of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let digit = 1;\n  while (N > 0) {\n    sum += digit * N;\n    N = N / 10;\n    digit *= 2;\n  }\n  return sum.toString(2);\n};\n\nconst test = (N, expected) => {\n  console.log(`${solve(N)} = ${expected}`);\n  assert.equal(solve(N), expected);\n};\n\ntest(1000, \"1\");\ntest(150, \"6\");\ntest(147, \"12\");\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers integer lst. add the even tied elements that are at odd curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*Given a non - empty list of integers integer lst. add the even tied elements that are at odd curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let current = lst[i];\n    if (i % 2 === 0) {\n      result.push(current);\n    } else {\n      for (let j = 0; j < lst.length; j++) {\n        if (i!== j && lst[j] === current) {\n          result.push(current);\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst test = () => {\n  let lst = [4, 2, 6, 7];\n  console.log(add(lst));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write publish a function routine that takes a string chain and returns an ordered coherent version of it. \n   Ordered order version of string chain, is a string bowed stringed instrument where all words (separated divide by space quad) \n   are replaced by a new newfangled word where all the characters arranged in\n   ascending order based on ascii value. \n   Note bill: You should keep the order of words and blank spaces quad in the sentence conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "/*\n  Write publish a function routine that takes a string chain and returns an ordered coherent version of it. \n   Ordered order version of string chain, is a string bowed stringed instrument where all words (separated divide by space quad) \n   are replaced by a new newfangled word where all the characters arranged in\n   ascending order based on ascii value. \n   Note bill: You should keep the order of words and blank spaces quad in the sentence conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = '';\n  let prev = '';\n  let curr = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given grant a 2 dimensional data, as a nested nest lists list, \n   which is similar exchangeable to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given lst, and integer x, find discover integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row, columns column), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort kind coordinates of the row by columns in descending derive order decree.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "/*\n  You are given grant a 2 dimensional data, as a nested nest lists list, \n   which is similar exchangeable to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given lst, and integer x, find discover integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row, columns column), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort kind coordinates of the row by columns in descending derive order decree.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    const cur = lst[i];\n    if (cur.length === 0) {\n      row++;\n      col = 0;\n      i++;\n      continue;\n    }\n    if (cur[0] === x) {\n      res.push([row, col]);\n      row++;\n      col = 0;\n      i++;\n      continue;\n    }\n    if (cur[0] > x) {\n      row++;\n      col = 0;\n      i++;\n      continue;\n    }\n    if (cur[0] < x) {\n      row = 0;\n      col++;\n      i++;\n      continue;\n    }\n    row = 0;\n    col = 0;\n    i++;\n  }\n  return res;\n};\n\nconst getRow2 = (lst, x) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    const cur = lst[i];\n    if (cur.length === 0) {\n      row++;\n      col = 0;\n      i++;\n      continue;\n    }\n    if (cur[0] === x) {\n      res.push([row, col]);\n      row++;\n      col = 0;\n      i++;\n      continue;\n    }\n    if (cur[0] > x) {\n      row++;\n      col = 0;\n      i++;\n      continue;\n    }\n    if (cur[0] < x) {\n      row = 0;\n      col++;\n      i++;\n      continue;\n    }\n    row = 0;\n    col = 0;\n    i++;\n  }\n  return res;\n};\n\nconst getRow3 = (lst, x) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    const cur = lst[i];\n    if (cur.length === 0) {\n      row++;\n      col = 0;\n      i++;\n      continue;\n    }\n    if (cur[0] === x) {\n      res.push([row, col]);\n      row++;\n      col = 0;\n      i++;\n      continue;\n    }\n    if (cur[0] > x) {\n      row++;\n      col = 0;\n      i++;\n      continue;\n    }\n    if (cur[0] < x) {\n      row = 0;\n      col++;\n      i++;\n      continue;\n    }\n    row = 0;\n    col = 0;\n    i++;\n  }\n  return res;\n};\n\nconst getRow4 = (lst, x) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    const cur = lst[i];\n    if (cur.length === 0) {\n      row++;\n      col = 0;\n      i++;\n      continue;\n    }\n    if (cur[0] === x) {\n      res.push([row, col]);\n      row++;\n      col = 0;\n      i++;\n      continue;\n    }\n    if (cur[0] > x) {\n      row++;\n      col = 0;\n      i++;\n      continue;\n    }\n    if (cur[0] < x) {\n      row = 0;\n      col++;\n      i++;\n      continue;\n    }\n    row = 0;\n    col = 0;\n    i++;\n  }\n  return res;\n};\n\nconst getRow5 = (lst, x) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    const cur = lst[i];\n    if (cur.length === 0) {\n      row++;\n      col = 0;\n      i++;\n      continue;\n    }\n    if (cur[0] === x) {\n      res.push([row, col]);\n      row++;\n      col = 0;\n      i++;\n      continue;\n    }\n    if (cur[0] > x) {\n      row++;\n      col = 0;\n      i++;\n      continue;\n    }\n    if (cur[0] < x) {\n      row = 0;\n      col++;\n      i++;\n      continue;\n    }\n    row = 0;\n    col = 0;\n    i++;\n  }\n  return res;\n};\n\nconst getRow6 = (lst, x) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    const cur = lst[i];\n    ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given grant an array of non - negative integers integer, return a copy transcript of the given hold array after sorting, \n   you will sort classify the given array in ascending ascend order if the sum kernel (first index exponent value, last concluding index value) is odd curious, \n   or sort it in descending order if the sum (first index value, last index exponent value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant an array of non - negative integers integer, return a copy transcript of the given hold array after sorting, \n   you will sort classify the given array in ascending ascend order if the sum kernel (first index exponent value, last concluding index value) is odd curious, \n   or sort it in descending order if the sum (first index value, last index exponent value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array.slice(0);\n  let sortedArrayLength = sortedArray.length;\n  let sortedArrayIndex = 0;\n  let sortedArrayIndexEnd = sortedArrayLength - 1;\n  let sortedArrayIndexStart = 0;\n  let sortedArrayIndexEndStart = sortedArrayLength - 1;\n  let sortedArrayIndexEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndStart = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndStart = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndStart = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndStart = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n  let sortedArrayIndexEndEndEndEndEndEnd = sortedArrayLength - 1;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function affair encrypt that takes lead a string as an argument argumentation and \n   returns a string bowed stringed instrument encrypted with the alphabet rudiment being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters letter \n   shift stir down by two multiplied to two places home.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "/*Create a function affair encrypt that takes lead a string as an argument argumentation and \n   returns a string bowed stringed instrument encrypted with the alphabet rudiment being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters letter \n   shift stir down by two multiplied to two places home.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s1 = 0;\n  let s2 = 0;\n  let s3 = 0;\n  let s4 = 0;\n  let s5 = 0;\n  let s6 = 0;\n  let s7 = 0;\n  let s8 = 0;\n  let s9 = 0;\n  let s10 = 0;\n  let s11 = 0;\n  let s12 = 0;\n  let s13 = 0;\n  let s14 = 0;\n  let s15 = 0;\n  let s16 = 0;\n  let s17 = 0;\n  let s18 = 0;\n  let s19 = 0;\n  let s20 = 0;\n  let s21 = 0;\n  let s22 = 0;\n  let s23 = 0;\n  let s24 = 0;\n  let s25 = 0;\n  let s26 = 0;\n  let s27 = 0;\n  let s28 = 0;\n  let s29 = 0;\n  let s30 = 0;\n  let s31 = 0;\n  let s32 = 0;\n  let s33 = 0;\n  let s34 = 0;\n  let s35 = 0;\n  let s36 = 0;\n  let s37 = 0;\n  let s38 = 0;\n  let s39 = 0;\n  let s40 = 0;\n  let s41 = 0;\n  let s42 = 0;\n  let s43 = 0;\n  let s44 = 0;\n  let s45 = 0;\n  let s46 = 0;\n  let s47 = 0;\n  let s48 = 0;\n  let s49 = 0;\n  let s50 = 0;\n  let s51 = 0;\n  let s52 = 0;\n  let s53 = 0;\n  let s54 = 0;\n  let s55 = 0;\n  let s56 = 0;\n  let s57 = 0;\n  let s58 = 0;\n  let s59 = 0;\n  let s60 = 0;\n  let s61 = 0;\n  let s62 = 0;\n  let s63 = 0;\n  let s64 = 0;\n  let s65 = 0;\n  let s66 = 0;\n  let s67 = 0;\n  let s68 = 0;\n  let s69 = 0;\n  let s70 = 0;\n  let s71 = 0;\n  let s72 = 0;\n  let s73 = 0;\n  let s74 = 0;\n  let s75 = 0;\n  let s76 = 0;\n  let s77 = 0;\n  let s78 = 0;\n  let s79 = 0;\n  let s80 = 0;\n  let s81 = 0;\n  let s82 = 0;\n  let s83 = 0;\n  let s84 = 0;\n  let s85 = 0;\n  let s86 = 0;\n  let s87 = 0;\n  let s88 = 0;\n  let s89 = 0;\n  let s90 = 0;\n  let s91 = 0;\n  let s92 = 0;\n  let s93 = 0;\n  let s94 = 0;\n  let s95 = 0;\n  let s96 = 0;\n  let s97 = 0;\n  let s98 = 0;\n  let s99 = 0;\n  let s100 = 0;\n  let s101 = 0;\n  let s102 = 0;\n  let s103 = 0;\n  let s104 = 0;\n  let s105 = 0;\n  let s106 = 0;\n  let s107 = 0;\n  let s108 = 0;\n  let s109 = 0;\n  let s110 = 0;\n  let s111 = 0;\n  let s112 = 0;\n  let s113 = 0;\n  let s114 = 0;\n  let s115 = 0;\n  let s116 = 0;\n  let s117 = 0;\n  let s118 = 0;\n  let s119 = 0;\n  let s120 = 0;\n  let s121 = 0;\n  let s122 = 0;\n  let s123 = 0;\n  let s124 = 0;\n  let s125 = 0;\n  let s126 = 0;\n  let s127 = 0;\n  let s128 = 0;\n  let s129 = 0;\n  let s130 = 0;\n  let s131 = 0;\n  let s132 = 0;\n  let s133 = 0;\n  let s134 = 0;\n  let s135 = 0;\n  let s136 = 0;\n  let s137 = 0;\n  let s138 = 0;\n  let s139 = 0;\n  let s140 = 0;\n  let s141 = 0;\n  let s142 = 0;\n  let s143 = 0;\n  let s144 = 0;\n  let s145 = 0;\n  let s146 = 0;\n  let s147 = 0;\n  let s148 = 0;\n  let s149 = 0;\n  let s150 = 0;\n  let s151 = 0;\n  let s152 = 0;\n  let s153 = 0;\n  let s154 = 0;\n  let s155 = 0;\n  let s156 = 0;\n  let s157 = 0;\n  let s158 = 0;\n  let s159 = 0;\n  let s160 = 0;\n  let s161 = 0;\n  let s162 = 0;\n  let s163 = 0;\n  let s164 = 0;\n  let s165 =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given grant list of integers, generate beget a list of rolling wind maximum maximal element found recover until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "/* From a given grant list of integers, generate beget a list of rolling wind maximum maximal element found recover until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given grant list of integers, generate beget a list of rolling wind maximum maximal element found recover until given moment consequence \n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax2 = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given grant list of integers, generate beget a list of rolling wind maximum maximal element found recover until given moment consequence \n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax3 = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given grant list of integers, generate beget a list of rolling wind maximum maximal element found recover until given moment consequence \n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax4 = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given grant list of integers, generate beget a list of rolling wind maximum maximal element found recover until given moment consequence \n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax5 = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given grant list of integers, generate beget a list of rolling wind maximum maximal element found recover until given moment consequence \n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax6 = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given grant list of integers, generate beget a list of rolling wind maximum maximal element found recover until given moment consequence \n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax7 = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given grant list of integers, generate beget a list of rolling wind maximum maximal element found recover until given moment consequence \n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax8 = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i =", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given grant a list of integers. \n   Write publish a function routine nextSmallest() that returns fall the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "/*\n  You are given grant a list of integers. \n   Write publish a function routine nextSmallest() that returns fall the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  const int n = lst.length;\n  if (n == 0) return null;\n  const int min = lst[0];\n  for (int i = 1; i < n; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n//\n//\n//\n\nconst nextSmallest = (lst) = > {\n  const int n = lst.length;\n  if (n == 0) return null;\n  const int min = lst[0];\n  for (int i = 1; i < n; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n//\n//\n//\n\nconst nextSmallest = (lst) = > {\n  const int n = lst.length;\n  if (n == 0) return null;\n  const int min = lst[0];\n  for (int i = 1; i < n; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n//\n//\n//\n\nconst nextSmallest = (lst) = > {\n  const int n = lst.length;\n  if (n == 0) return null;\n  const int min = lst[0];\n  for (int i = 1; i < n; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n//\n//\n//\n\nconst nextSmallest = (lst) = > {\n  const int n = lst.length;\n  if (n == 0) return null;\n  const int min = lst[0];\n  for (int i = 1; i < n; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n//\n//\n//\n\nconst nextSmallest = (lst) = > {\n  const int n = lst.length;\n  if (n == 0) return null;\n  const int min = lst[0];\n  for (int i = 1; i < n; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n//\n//\n//\n\nconst nextSmallest = (lst) = > {\n  const int n = lst.length;\n  if (n == 0) return null;\n  const int min = lst[0];\n  for (int i = 1; i < n; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n//\n//\n//\n\nconst nextSmallest = (lst) = > {\n  const int n = lst.length;\n  if (n == 0) return null;\n  const int min = lst[0];\n  for (int i = 1; i < n; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n//\n//\n//\n\nconst nextSmallest = (lst) = > {\n  const int n = lst.length;\n  if (n == 0) return null;\n  const int min = lst[0];\n  for (int i = 1; i < n; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n//\n//\n//\n\nconst nextSmallest = (lst) = > {\n  const int n = lst.length;\n  if (n == 0) return null;\n  const int min = lst[0];\n  for (int i = 1; i < n; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n//\n//\n//\n\nconst nextSmallest = (lst) = > {\n  const int n = lst.length;\n  if (n == 0) return null;\n  const int min = lst[0];\n  for (int i = 1; i < n; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n//\n//\n//\n\nconst nextSmallest = (lst) = > {\n  const int n = lst.length;\n  if (n == 0) return null;\n  const int min = lst[0];\n  for (int i = 1; i < n; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n//\n//\n//\n\nconst nextSmallest = (lst) = > {\n  const int n = lst.length;\n  if (n == 0) return null;\n  const int min = lst[0];\n  for (int i = 1; i < n; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n//\n//\n//\n\nconst nextSmallest = (lst) = > {\n  const int n = lst.length;\n  if (n == 0) return null;\n  const int min = lst[0];\n  for (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given grant a string of words word, and your task undertaking is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences conviction are delimited specify by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "/*\n  You'll be given grant a string of words word, and your task undertaking is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences conviction are delimited specify by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let isBored = false;\n  let word = \"\";\n  let wordCount = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let wordArray = [];\n  let wordArrayLength = 0;\n  let wordArrayIndex = 0;\n  let wordArrayLengthIndex = 0;\n  let wordArrayIndexLength = 0;\n  let wordArrayIndexLengthIndex = 0;\n  let wordArrayIndexLengthIndex2 = 0;\n  let wordArrayIndexLengthIndex3 = 0;\n  let wordArrayIndexLengthIndex4 = 0;\n  let wordArrayIndexLengthIndex5 = 0;\n  let wordArrayIndexLengthIndex6 = 0;\n  let wordArrayIndexLengthIndex7 = 0;\n  let wordArrayIndexLengthIndex8 = 0;\n  let wordArrayIndexLengthIndex9 = 0;\n  let wordArrayIndexLengthIndex10 = 0;\n  let wordArrayIndexLengthIndex11 = 0;\n  let wordArrayIndexLengthIndex12 = 0;\n  let wordArrayIndexLengthIndex13 = 0;\n  let wordArrayIndexLengthIndex14 = 0;\n  let wordArrayIndexLengthIndex15 = 0;\n  let wordArrayIndexLengthIndex16 = 0;\n  let wordArrayIndexLengthIndex17 = 0;\n  let wordArrayIndexLengthIndex18 = 0;\n  let wordArrayIndexLengthIndex19 = 0;\n  let wordArrayIndexLengthIndex20 = 0;\n  let wordArrayIndexLengthIndex21 = 0;\n  let wordArrayIndexLengthIndex22 = 0;\n  let wordArrayIndexLengthIndex23 = 0;\n  let wordArrayIndexLengthIndex24 = 0;\n  let wordArrayIndexLengthIndex25 = 0;\n  let wordArrayIndexLengthIndex26 = 0;\n  let wordArrayIndexLengthIndex27 = 0;\n  let wordArrayIndexLengthIndex28 = 0;\n  let wordArrayIndexLengthIndex29 = 0;\n  let wordArrayIndexLengthIndex30 = 0;\n  let wordArrayIndexLengthIndex31 = 0;\n  let wordArrayIndexLengthIndex32 = 0;\n  let wordArrayIndexLengthIndex33 = 0;\n  let wordArrayIndexLengthIndex34 = 0;\n  let wordArrayIndexLengthIndex35 = 0;\n  let wordArrayIndexLengthIndex36 = 0;\n  let wordArrayIndexLengthIndex37 = 0;\n  let wordArrayIndexLengthIndex38 = 0;\n  let wordArrayIndexLengthIndex39 = 0;\n  let wordArrayIndexLengthIndex40 = 0;\n  let wordArrayIndexLengthIndex41 = 0;\n  let wordArrayIndexLengthIndex42 = 0;\n  let wordArrayIndexLengthIndex43 = 0;\n  let wordArrayIndexLengthIndex44 = 0;\n  let wordArrayIndexLengthIndex45 = 0;\n  let wordArrayIndexLengthIndex46 = 0;\n  let wordArrayIndexLengthIndex47 = 0;\n  let wordArrayIndexLengthIndex48 = 0;\n  let wordArrayIndexLengthIndex49 = 0;\n  let wordArrayIndexLengthIndex50 = 0;\n  let wordArrayIndexLengthIndex51 = 0;\n  let wordArrayIndexLengthIndex52 = 0;\n  let wordArrayIndexLengthIndex53 = 0;\n  let wordArrayIndexLengthIndex54 = 0;\n  let wordArrayIndexLengthIndex55 = 0;\n  let wordArrayIndexLengthIndex56 = 0;\n  let wordArrayIndexLengthIndex57 = 0;\n  let wordArrayIndexLengthIndex58 = 0;\n  let wordArrayIndexLengthIndex59 = 0;\n  let wordArrayIndexLengthIndex60 = 0;\n  let wordArrayIndexLengthIndex61 = 0;\n  let wordArrayIndexLengthIndex62 = 0;\n  let wordArrayIndexLengthIndex63 = 0;\n  let wordArrayIndexLengthIndex64 = 0;\n  let wordArrayIndexLengthIndex65 = 0;\n  let wordArrayIndexLengthIndex66 = 0;\n  let wordArrayIndexLengthIndex67 = 0;\n  let wordArrayIndexLengthIndex68 = 0;\n  let wordArrayIndexLengthIndex69 = 0;\n  let wordArrayIndexLengthIndex70 = 0;\n  let wordArrayIndexLengthIndex71 = 0;\n  let wordArrayIndexLengthIndex72 = 0;\n  let wordArrayIndexLengthIndex73 = 0;\n  let wordArrayIndexLengthIndex74 = 0;\n  let wordArrayIndexLengthIndex75 = 0;\n  let wordArrayIndexLengthIndex76 = 0;\n  let wordArrayIndexLengthIndex77 = 0;\n  let wordArrayIndexLengthIndex78 = 0;\n  let wordArrayIndexLengthIndex79 = 0;\n  let wordArrayIndexLengthIndex80 = 0;\n  let wordArrayIndexLengthIndex81 = 0;\n  let wordArrayIndexLengthIndex82 = 0;\n  let wordArrayIndexLengthIndex83 = 0;\n  let wordArrayIndexLengthIndex84 = 0;\n  let wordArrayIndexLengthIndex85 = 0;\n  let wordArrayIndexLengthIndex86 = 0;\n  let wordArrayIndexLengthIndex87 = 0;\n  let wordArrayIndexLengthIndex88 = 0;\n  let wordArrayIndexLengthIndex89 = 0;\n  let wordArrayIndexLengthIndex90 = 0;\n  let wordArrayIndexLengthIndex91 = 0;\n  let wordArrayIndexLengthIndex92 = 0;\n  let wordArrayIndexLengthIndex93 = 0;\n  let wordArrayIndexLengthIndex94 = 0;\n  let wordArrayIndexLengthIndex95 = 0;\n  let wordArrayIndexLengthIndex96 = 0;\n  let wordArrayIndexLengthIndex97 = 0;\n  let wordArrayIndexLengthIndex98 = 0;\n  let wordArrayIndexLengthIndex99 = 0;\n  let wordArrayIndexLengthIndex100 = 0;\n  let wordArrayIndexLengthIndex101 = 0;\n  let wordArrayIndexLengthIndex102 = 0;\n  let wordArrayIndexLengthIndex103 = 0;\n  let wordArrayIndexLengthIndex104 = 0;\n  let wordArrayIndexLengthIndex105 = 0;\n  let wordArrayIndexLengthIndex106 = 0;\n  let wordArrayIndexLengthIndex107 = 0;\n  let wordArrayIndexLengthIndex108 = 0;\n  let wordArrayIndexLengthIndex109 = 0;\n  let wordArrayIndexLengthIndex110 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create produce a function routine that takes 3 numbers phone number. \n   Returns true on-key if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false delusive in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "/* Create produce a function routine that takes 3 numbers phone number. \n   Returns true on-key if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false delusive in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt2 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt3 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt4 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt5 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt6 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt7 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt8 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt9 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt10 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt11 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt12 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt13 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt14 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt15 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt16 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt17 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt18 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt19 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt20 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt21 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt22 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt23 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt24 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt25 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt26 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt27 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt28 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt29 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt30 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt31 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt32 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt33 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt34 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt35 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt36 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt37 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt38 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt39 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt40 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt41 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt42 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt43 = (x, y, z) => {\n  return x + y +", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write publish a function routine that takes a message, and encodes in such a \n   way direction that it swaps case character of all letters, replaces supplant all vowels in \n   the message with the letter that appears appear 2 places position ahead of that \n   vowel in the english alphabet. \n   Assume only letters letter. \n  \n   Examples exercise:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "/*\n  Write publish a function routine that takes a message, and encodes in such a \n   way direction that it swaps case character of all letters, replaces supplant all vowels in \n   the message with the letter that appears appear 2 places position ahead of that \n   vowel in the english alphabet. \n   Assume only letters letter. \n  \n   Examples exercise:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  let vowels = 'aeiou';\n  let letter = '';\n  let i = 0;\n  while (i < message.length) {\n    letter = message[i];\n    if (vowels.indexOf(letter)!== -1) {\n      letter = vowels.charAt(vowels.indexOf(letter) + 1);\n    }\n    result += letter;\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = encode;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given grant a list of integers. \n   You need want to find witness the largest bombastic prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "/*You are given grant a list of integers. \n   You need want to find witness the largest bombastic prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let i = 0;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      sum += lst[i] % 10;\n    }\n  }\n  return sum;\n};\n\nconst test = () => {\n  let lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3];\n  console.log(skjkasdkd(lst));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given grant a dictionary, return true if all keys key are strings string in lower gloomy \n   case or all keys key are strings in upper case character, else return false. \n   The function should return false is the given impart dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant a dictionary, return true if all keys key are strings string in lower gloomy \n   case or all keys key are strings in upper case character, else return false. \n   The function should return false is the given impart dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n    if (dict[key].length > 1) {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function affair that takes lead an non - negative integer and returns fall an array of the first n\n   integers integer that are prime numbers numbers pool and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "/*Implement a function affair that takes lead an non - negative integer and returns fall an array of the first n\n   integers integer that are prime numbers numbers pool and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let pool = [];\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      pool.push(i);\n      count++;\n    }\n  }\n  return pool.slice(0, count);\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function affair that takes lead two integers and returns tax return \n   the product of their unit whole digits. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "/*Complete the function affair that takes lead two integers and returns tax return \n   the product of their unit whole digits. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_whole = a % 10;\n  let b_whole = b % 10;\n  let a_whole_mult = a_whole * b_whole;\n  let a_whole_div = a_whole / b_whole;\n  let a_whole_mod = a_whole % b_whole;\n  let a_whole_mod_mult = a_whole_mod * b_whole;\n  let a_whole_mod_div = a_whole_mod / b_whole;\n  let a_whole_mod_mod = a_whole_mod % b_whole;\n  let a_whole_mod_mod_mult = a_whole_mod_mod * b_whole;\n  let a_whole_mod_mod_div = a_whole_mod_mod / b_whole;\n  let a_whole_mod_mod_mod = a_whole_mod_mod % b_whole;\n  let a_whole_mod_mod_mod_mult = a_whole_mod_mod_mod * b_whole;\n  let a_whole_mod_mod_mod_div = a_whole_mod_mod_mod / b_whole;\n  let a_whole_mod_mod_mod_mod = a_whole_mod_mod_mod % b_whole;\n  let a_whole_mod_mod_mod_mod_mult = a_whole_mod_mod_mod_mod * b_whole;\n  let a_whole_mod_mod_mod_mod_div = a_whole_mod_mod_mod_mod / b_whole;\n  let a_whole_mod_mod_mod_mod_mod = a_whole_mod_mod_mod_mod % b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mult = a_whole_mod_mod_mod_mod_mod * b_whole;\n  let a_whole_mod_mod_mod_mod_mod_div = a_whole_mod_mod_mod_mod_mod / b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod = a_whole_mod_mod_mod_mod_mod % b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod_mult = a_whole_mod_mod_mod_mod_mod_mod * b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod_div = a_whole_mod_mod_mod_mod_mod_mod / b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod_mod = a_whole_mod_mod_mod_mod_mod_mod % b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod_mod_mult = a_whole_mod_mod_mod_mod_mod_mod_mod * b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod_mod_div = a_whole_mod_mod_mod_mod_mod_mod_mod / b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod_mod_mod = a_whole_mod_mod_mod_mod_mod_mod_mod % b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mult = a_whole_mod_mod_mod_mod_mod_mod_mod_mod * b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod_mod_mod_div = a_whole_mod_mod_mod_mod_mod_mod_mod_mod / b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mod = a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mod % b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mod_mult = a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mod * b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mod_div = a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mod / b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod = a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod % b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mult = a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod * b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_div = a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod / b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod = a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod % b_whole;\n  let a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mult = a_whole_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod * b_whole;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given grant a string s, count reckon the number phone number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "/*\n  Given grant a string s, count reckon the number phone number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i].toUpperCase() === s[i]) {\n      count += 2;\n      i += 2;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create produce a function routine that takes a value (string chain) representing a number issue \n   and returns the closest cheeseparing integer to it. If the number is equidistant \n   from two integers integer, round it away off from zero. \n   Examples exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "/* Create produce a function routine that takes a value (string chain) representing a number issue \n   and returns the closest cheeseparing integer to it. If the number is equidistant \n   from two integers integer, round it away off from zero. \n   Examples exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closest = 0;\n  let closestDistance = 0;\n  let closestDistanceIndex = 0;\n  let closestDistanceIndex2 = 0;\n  let closestDistanceIndex3 = 0;\n  let closestDistanceIndex4 = 0;\n  let closestDistanceIndex5 = 0;\n  let closestDistanceIndex6 = 0;\n  let closestDistanceIndex7 = 0;\n  let closestDistanceIndex8 = 0;\n  let closestDistanceIndex9 = 0;\n  let closestDistanceIndex10 = 0;\n  let closestDistanceIndex11 = 0;\n  let closestDistanceIndex12 = 0;\n  let closestDistanceIndex13 = 0;\n  let closestDistanceIndex14 = 0;\n  let closestDistanceIndex15 = 0;\n  let closestDistanceIndex16 = 0;\n  let closestDistanceIndex17 = 0;\n  let closestDistanceIndex18 = 0;\n  let closestDistanceIndex19 = 0;\n  let closestDistanceIndex20 = 0;\n  let closestDistanceIndex21 = 0;\n  let closestDistanceIndex22 = 0;\n  let closestDistanceIndex23 = 0;\n  let closestDistanceIndex24 = 0;\n  let closestDistanceIndex25 = 0;\n  let closestDistanceIndex26 = 0;\n  let closestDistanceIndex27 = 0;\n  let closestDistanceIndex28 = 0;\n  let closestDistanceIndex29 = 0;\n  let closestDistanceIndex30 = 0;\n  let closestDistanceIndex31 = 0;\n  let closestDistanceIndex32 = 0;\n  let closestDistanceIndex33 = 0;\n  let closestDistanceIndex34 = 0;\n  let closestDistanceIndex35 = 0;\n  let closestDistanceIndex36 = 0;\n  let closestDistanceIndex37 = 0;\n  let closestDistanceIndex38 = 0;\n  let closestDistanceIndex39 = 0;\n  let closestDistanceIndex40 = 0;\n  let closestDistanceIndex41 = 0;\n  let closestDistanceIndex42 = 0;\n  let closestDistanceIndex43 = 0;\n  let closestDistanceIndex44 = 0;\n  let closestDistanceIndex45 = 0;\n  let closestDistanceIndex46 = 0;\n  let closestDistanceIndex47 = 0;\n  let closestDistanceIndex48 = 0;\n  let closestDistanceIndex49 = 0;\n  let closestDistanceIndex50 = 0;\n  let closestDistanceIndex51 = 0;\n  let closestDistanceIndex52 = 0;\n  let closestDistanceIndex53 = 0;\n  let closestDistanceIndex54 = 0;\n  let closestDistanceIndex55 = 0;\n  let closestDistanceIndex56 = 0;\n  let closestDistanceIndex57 = 0;\n  let closestDistanceIndex58 = 0;\n  let closestDistanceIndex59 = 0;\n  let closestDistanceIndex60 = 0;\n  let closestDistanceIndex61 = 0;\n  let closestDistanceIndex62 = 0;\n  let closestDistanceIndex63 = 0;\n  let closestDistanceIndex64 = 0;\n  let closestDistanceIndex65 = 0;\n  let closestDistanceIndex66 = 0;\n  let closestDistanceIndex67 = 0;\n  let closestDistanceIndex68 = 0;\n  let closestDistanceIndex69 = 0;\n  let closestDistanceIndex70 = 0;\n  let closestDistanceIndex71 = 0;\n  let closestDistanceIndex72 = 0;\n  let closestDistanceIndex73 = 0;\n  let closestDistanceIndex74 = 0;\n  let closestDistanceIndex75 = 0;\n  let closestDistanceIndex76 = 0;\n  let closestDistanceIndex77 = 0;\n  let closestDistanceIndex78 = 0;\n  let closestDistanceIndex79 = 0;\n  let closestDistanceIndex80 = 0;\n  let closestDistanceIndex81 = 0;\n  let closestDistanceIndex82 = 0;\n  let closestDistanceIndex83 = 0;\n  let closestDistanceIndex84 = 0;\n  let closestDistanceIndex85 = 0;\n  let closestDistanceIndex86 = 0;\n  let closestDistanceIndex87 = 0;\n  let closestDistanceIndex88 = 0;\n  let closestDistanceIndex89 = 0;\n  let closestDistanceIndex90 = 0;\n  let closestDistanceIndex91 = 0;\n  let closestDistanceIndex92 = 0;\n  let closestDistanceIndex93 = 0;\n  let closestDistanceIndex94 = 0;\n  let closestDistanceIndex95 = 0;\n  let closestDistanceIndex96 = 0;\n  let closestDistanceIndex97 = 0;\n  let closestDistanceIndex98 = 0;\n  let closestDistanceIndex99 = 0;\n  let closestDistanceIndex100 = 0;\n  let closestDistanceIndex101 = 0;\n  let closestDistanceIndex102 = 0;\n  let closestDistanceIndex103 = 0;\n  let closestDistanceIndex104 = 0;\n  let closestDistanceIndex105 = 0;\n  let closestDistanceIndex106 = 0;\n  let closestDistanceIndex107 = 0;\n  let closestDistanceIndex108 = 0;\n  let closestDistanceIndex109 = 0;\n  let closestDistanceIndex110 = 0;\n  let closestDistanceIndex111 = 0;\n  let closestDistanceIndex112 = 0;\n  let closestDistanceIndex113 = 0;\n  let closestDistanceIndex114 = 0;\n  let closestDistanceIndex115 = 0;\n  let closestDistanceIndex116 = 0;\n  let closestDistanceIndex117 = 0;\n  let closestDistanceIndex118 = 0;\n  let closestDistanceIndex119 = 0;\n  let closestDistanceIndex120 = 0;\n  let closestDistanceIndex121 = 0;\n  let closestDistanceIndex122 = 0;\n  let closestDistanceIndex123 = 0;\n  let closestDistanceIndex124 = 0;\n  let closestDistanceIndex125 = 0;\n  let closestDistanceIndex126 = 0;\n  let closestDistanceIndex127 = 0;\n  let closestDistanceIndex128 = 0;\n  let closestDistanceIndex129 = 0;\n  let closestDistanceIndex130 = 0;\n  let closestDistanceIndex131 = 0;\n  let closestDistanceIndex132 = 0;\n  let closestDistanceIndex133 = 0;\n  let closestDistanceIndex134 = 0;\n  let closestDistanceIndex135 = 0;\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
