{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer cheeseparing to each other than \n   given render threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer cheeseparing to each other than \n   given render threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let i = 0\n  let j = 0\n  let minDistance = Infinity\n  while (i < numbers.length && j < numbers.length) {\n    if (numbers[i] < numbers[j]) {\n      i++\n    } else if (numbers[i] > numbers[j]) {\n      j++\n    } else {\n      let distance = Math.abs(numbers[i] - numbers[j])\n      if (distance < minDistance) {\n        minDistance = distance\n      }\n      i++\n      j++\n    }\n  }\n  return minDistance <= threshold\n}\n\n/*\n  Check if in given list of numbers, are any two numbers closer than given render threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  let i = 0\n  let j = 0\n  let minDistance = Infinity\n  while (i < numbers.length && j < numbers.length) {\n    if (numbers[i] < numbers[j]) {\n      i++\n    } else if (numbers[i] > numbers[j]) {\n      j++\n    } else {\n      let distance = Math.abs(numbers[i] - numbers[j])\n      if (distance < minDistance) {\n        minDistance = distance\n      }\n      i++\n      j++\n    }\n  }\n  return minDistance <= threshold\n}\n\n/*\n  Check if in given list of numbers, are any two numbers closer than given render threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  let i = 0\n  let j = 0\n  let minDistance = Infinity\n  while (i < numbers.length && j < numbers.length) {\n    if (numbers[i] < numbers[j]) {\n      i++\n    } else if (numbers[i] > numbers[j]) {\n      j++\n    } else {\n      let distance = Math.abs(numbers[i] - numbers[j])\n      if (distance < minDistance) {\n        minDistance = distance\n      }\n      i++\n      j++\n    }\n  }\n  return minDistance <= threshold\n}\n\n/*\n  Check if in given list of numbers, are any two numbers closer than given render threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  let i = 0\n  let j = 0\n  let minDistance = Infinity\n  while (i < numbers.length && j < numbers.length) {\n    if (numbers[i] < numbers[j]) {\n      i++\n    } else if (numbers[i] > numbers[j]) {\n      j++\n    } else {\n      let distance = Math.abs(numbers[i] - numbers[j])\n      if (distance < minDistance) {\n        minDistance = distance\n      }\n      i++\n      j++\n    }\n  }\n  return minDistance <= threshold\n}\n\n/*\n  Check if in given list of numbers, are any two numbers closer than given render threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  let i = 0\n  let j = 0\n  let minDistance = Infinity\n  while (i < numbers.length && j < numbers.length) {\n    if (numbers[i] < numbers[j]) {\n      i++\n    } else if (numbers[i] > numbers[j]) {\n      j++\n    } else {\n      let distance = Math.abs(numbers[i] - numbers[j])\n      if (distance < minDistance) {\n        minDistance = distance\n      }\n      i++\n      j++\n    }\n  }\n  return minDistance <= threshold\n}\n\n/*\n  Check if in given list of numbers, are any two numbers closer than given render threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  let i = 0\n  let j = 0\n  let minDistance = Infinity\n  while (i < numbers.length && j < numbers.length) {\n    if (numbers[i] < numbers[j]) {\n      i++\n    } else if (numbers[i] > numbers[j]) {\n      j++\n    } else {\n      let distance = Math.abs(numbers[i] - numbers[j])\n      if (distance < minDistance) {\n        minDistance = distance\n      }\n      i++\n      j++\n    }\n  }\n  return minDistance <= threshold\n}\n\n/*\n  Check if in given list of numbers, are any two numbers closer than given render threshold.\n  >>> hasCloseElements([1"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string bowed stringed instrument containing control multiple groups of nested parentheses parenthesis. Your goal is to \n   separate those group into separate disjoined strings and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested within each other \n   Ignore dismiss any spaces in the input input signal string bowed stringed instrument.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string bowed stringed instrument containing control multiple groups of nested parentheses parenthesis. Your goal is to \n   separate those group into separate disjoined strings and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested within each other \n   Ignore dismiss any spaces in the input input signal string bowed stringed instrument.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let paren_string_arr = paren_string.split('');\n  let paren_string_arr_length = paren_string_arr.length;\n  let paren_string_arr_index = 0;\n  let paren_string_arr_index_end = 0;\n  let paren_string_arr_index_end_end = 0;\n  let paren_string_arr_index_end_end_end = 0;\n  let paren_string_arr_index_end_end_end_end = 0;\n  let paren_string_arr_index_end_end_end_end_end = 0;\n  let paren_string_arr_index_end_end_end_end_end_end = 0;\n  let paren_string_arr_index_end_end_end_end_end_end_end = 0;\n  let paren_string_arr_index_end_end_end_end_end_end_end_end = 0;\n  let paren_string_arr_index_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_arr_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_arr_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_arr_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_arr_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_arr_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_arr_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_arr_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_arr_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimals = number - integerPart;\n  if (decimals < 0.5) {\n    return '0';\n  }\n  if (decimals < 1) {\n    return '0';\n  }\n  return decimals.toString();\n};\n\nmodule.exports = truncateNumber;\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history falls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero2 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history falls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero3 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history falls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero4 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history falls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero5 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history falls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero6 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history falls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero7 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history falls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero8 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history falls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero9 = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history falls below zero, and"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const mad = medianAbsoluteDeviation(numbers, mean);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   Median Absolute Deviation is the average median absolute difference between each \n   element and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   Median Absolute Deviation is the average median absolute difference between each \n   element and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   Median Absolute Deviation is the average median absolute difference between each \n   element and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   Median Absolute Deviation is the average median absolute difference between each \n   element and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   Median Absolute Deviation is the average median absolute difference between each \n   element and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   Median Absolute Deviation is the average median absolute difference between each \n   element and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   Median Absolute Deviation is the average median absolute difference between each \n   element and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   Median Absolute Deviation is the average median absolute difference between each \n   element and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   Median Absolute Deviation is the average median absolute difference between each \n   element and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   Median Absolute Deviation is the average median absolute difference between each "}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  let result = [];\n  let current = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    if (i % delimeter === 0) {\n      result.push(current);\n      current = numbers[i];\n    } else {\n      current = current + numbers[i];\n    }\n    i++;\n  }\n  result.push(current);\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string bowed stringed instrument represented exemplify multiple groups for nested parentheses separated separate by spaces outer space. \n   For each of the group, output the deepest level horizontal surface of nesting of parentheses. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string bowed stringed instrument represented exemplify multiple groups for nested parentheses separated separate by spaces outer space. \n   For each of the group, output the deepest level horizontal surface of nesting of parentheses. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let nested_paren_count = 0;\n  let nested_paren_max_level = 0;\n  let nested_paren_level = 0;\n  let nested_paren_string = paren_string;\n  let nested_paren_string_length = nested_paren_string.length;\n  let nested_paren_string_index = 0;\n  let nested_paren_string_index_end = 0;\n  let nested_paren_string_index_end_end = 0;\n  let nested_paren_string_index_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain check given render substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain check given render substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain check given render substring\n * @param {string[]} strings - list of strings to filter\n * @param {string} substring - substring to filter on\n * @returns {string[]} - list of strings that contain substring\n */\nconst filterBySubstringWithRegex = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(new RegExp(substring, 'i'))) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain check given render substring\n * @param {string[]} strings - list of strings to filter\n * @param {string} substring - substring to filter on\n * @returns {string[]} - list of strings that contain substring\n */\nconst filterBySubstringWithRegexAndCaseSensitive = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(new RegExp(substring, 'i'))) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain check given render substring\n * @param {string[]} strings - list of strings to filter\n * @param {string} substring - substring to filter on\n * @returns {string[]} - list of strings that contain substring\n */\nconst filterBySubstringWithRegexAndCaseSensitiveAndIgnoreCase = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(new RegExp(substring, 'i'))) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain check given render substring\n * @param {string[]} strings - list of strings to filter\n * @param {string} substring - substring to filter on\n * @returns {string[]} - list of strings that contain substring\n */\nconst filterBySubstringWithRegexAndIgnoreCase = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(new RegExp(substring, 'i'))) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain check given render substring\n * @param {string[]} strings - list of strings to filter\n * @param {string} substring - substring to filter on\n * @returns {string[]} - list of strings that contain substring\n */\nconst filterBySubstringWithRegexAndIgnoreCaseAndCaseSensitive = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(new RegExp(substring, 'i'))) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\nmodule.exports = {\n  filterBySubstring,\n  filterBySubstringWithRegex,\n  filterBySubstringWithRegexAndCaseSensitive,\n  filterBySubstringWithRegexAndCaseSensitiveAndIgnoreCase,\n  filterBySubstringWithRegexAndIgnoreCase,\n  filterBySubstringWithRegexAndIgnoreCaseAndCaseSensitive\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct2 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct3 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct4 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct5 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct6 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct7 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct8 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct9 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct10 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct11 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct12 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct13 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct14 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct15 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct16 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct17 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct18 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct19 = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  "}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate beget a list of rolling roll out maximum element found rule until given give moment \n   in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "/* From a given list of integers, generate beget a list of rolling roll out maximum element found rule until given give moment \n   in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = 0; i < maxIndex; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins begin with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins begin with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string === '') {\n    return string;\n  }\n  let suffix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  let result = suffix.length > prefix.length? suffix : prefix;\n  return result;\n}\n\n/* Find the shortest brusque palindrome that begins begin with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome2 = (string) => {\n  if (string === '') {\n    return string;\n  }\n  let suffix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  let result = suffix.length > prefix.length? suffix : prefix;\n  return result;\n}\n\n/* Find the shortest brusque palindrome that begins begin with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome3 = (string) => {\n  if (string === '') {\n    return string;\n  }\n  let suffix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  let result = suffix.length > prefix.length? suffix : prefix;\n  return result;\n}\n\n/* Find the shortest brusque palindrome that begins begin with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome4 = (string) => {\n  if (string === '') {\n    return string;\n  }\n  let suffix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  let result = suffix.length > prefix.length? suffix : prefix;\n  return result;\n}\n\n/* Find the shortest brusque palindrome that begins begin with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome5 = (string) => {\n  if (string === '') {\n    return string;\n  }\n  let suffix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  let result = suffix.length > prefix.length? suffix : prefix;\n  return result;\n}\n\n/* Find the shortest brusque palindrome that begins begin with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome6 = (string) => {\n  if (string === '') {\n    return string;\n  }\n  let suffix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');\n  let result = suffix.length > prefix.length? suffix : prefix;\n  return result;\n}\n\n/* Find the shortest brusque palindrome that begins begin with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome7 = (string) => {\n  if (string === '') {\n    return string;\n  }\n  let suffix = string.split('').reverse().join('');\n  let prefix = string.split('').reverse().join('');"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = a.split('').reduce((acc, c, i) => {\n    if (c === '1') {\n      return acc ^ b[i];\n    } else {\n      return acc;\n    }\n  }, 0);\n  return result;\n};\n\n/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  const result = a.split('').reduce((acc, c, i) => {\n    if (c === '1') {\n      return acc ^ b[i];\n    } else {\n      return acc;\n    }\n  }, 0);\n  return result;\n};\n\n/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  const result = a.split('').reduce((acc, c, i) => {\n    if (c === '1') {\n      return acc ^ b[i];\n    } else {\n      return acc;\n    }\n  }, 0);\n  return result;\n};\n\n/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  const result = a.split('').reduce((acc, c, i) => {\n    if (c === '1') {\n      return acc ^ b[i];\n    } else {\n      return acc;\n    }\n  }, 0);\n  return result;\n};\n\n/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  const result = a.split('').reduce((acc, c, i) => {\n    if (c === '1') {\n      return acc ^ b[i];\n    } else {\n      return acc;\n    }\n  }, 0);\n  return result;\n};\n\n/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  const result = a.split('').reduce((acc, c, i) => {\n    if (c === '1') {\n      return acc ^ b[i];\n    } else {\n      return acc;\n    }\n  }, 0);\n  return result;\n};\n\n/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  const result = a.split('').reduce((acc, c, i) => {\n    if (c === '1') {\n      return acc ^ b[i];\n    } else {\n      return acc;\n    }\n  }, 0);\n  return result;\n};\n\n/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  const result = a.split('').reduce((acc, c, i) => {\n    if (c === '1') {\n      return acc ^ b[i];\n    } else {\n      return acc;\n    }\n  }, 0);\n  return result;\n};\n\n/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  const result = a.split('').reduce((acc, c, i) => {\n    if (c === '1') {\n      return acc ^ b[i];\n    } else {\n      return acc;\n    }\n  }, 0);\n  return result;\n};\n\n/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  const result = a.split('').reduce((acc, c, i) => {\n    if (c === '1') {\n      return acc ^ b[i];\n    } else {\n      return acc;\n    }\n  }, 0);\n  return result;\n};\n\n/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  const result = a.split('').reduce((acc, c, i) => {\n    if (c === '1') {\n      return acc ^ b[i];\n    "}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case character of multiple \n   strings of the same length duration. Return null in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case character of multiple \n   strings of the same length duration. Return null in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  const longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common coarse divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "/* Return a greatest common coarse divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  let d = a;\n  while (a!== b) {\n    if (a % b === 0) {\n      a = b;\n    } else {\n      b = a % b;\n    }\n  }\n  return a;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest long of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest long of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let currentPrefix = '';\n  let currentLength = 0;\n  let currentIndex = 0;\n  while (currentIndex < string.length) {\n    currentPrefix = string.substr(currentIndex, currentLength);\n    if (currentPrefix === '') {\n      prefixes.push('');\n    } else {\n      prefixes.push(currentPrefix);\n    }\n    currentIndex += currentLength;\n    currentLength = 0;\n    while (currentIndex < string.length && string[currentIndex]!=='') {\n      currentLength++;\n      currentIndex++;\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prefixes from shortest to longest long of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes2 = (string) => {\n  let prefixes = [];\n  let currentPrefix = '';\n  let currentLength = 0;\n  let currentIndex = 0;\n  while (currentIndex < string.length) {\n    currentPrefix = string.substr(currentIndex, currentLength);\n    if (currentPrefix === '') {\n      prefixes.push('');\n    } else {\n      prefixes.push(currentPrefix);\n    }\n    currentIndex += currentLength;\n    currentLength = 0;\n    while (currentIndex < string.length && string[currentIndex]!=='') {\n      currentLength++;\n      currentIndex++;\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prefixes from shortest to longest long of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes3 = (string) => {\n  let prefixes = [];\n  let currentPrefix = '';\n  let currentLength = 0;\n  let currentIndex = 0;\n  while (currentIndex < string.length) {\n    currentPrefix = string.substr(currentIndex, currentLength);\n    if (currentPrefix === '') {\n      prefixes.push('');\n    } else {\n      prefixes.push(currentPrefix);\n    }\n    currentIndex += currentLength;\n    currentLength = 0;\n    while (currentIndex < string.length && string[currentIndex]!=='') {\n      currentLength++;\n      currentIndex++;\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prefixes from shortest to longest long of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes4 = (string) => {\n  let prefixes = [];\n  let currentPrefix = '';\n  let currentLength = 0;\n  let currentIndex = 0;\n  while (currentIndex < string.length) {\n    currentPrefix = string.substr(currentIndex, currentLength);\n    if (currentPrefix === '') {\n      prefixes.push('');\n    } else {\n      prefixes.push(currentPrefix);\n    }\n    currentIndex += currentLength;\n    currentLength = 0;\n    while (currentIndex < string.length && string[currentIndex]!=='') {\n      currentLength++;\n      currentIndex++;\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prefixes from shortest to longest long of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes5 = (string) => {\n  let prefixes = [];\n  let currentPrefix = '';\n  let currentLength = 0;\n  let currentIndex = 0;\n  while (currentIndex < string.length) {\n    currentPrefix = string.substr(currentIndex, currentLength);\n    if (currentPrefix === '') {\n      prefixes.push('');\n    } else {\n      prefixes.push(currentPrefix);\n    }\n    currentIndex += currentLength;\n    currentLength = 0;\n    while (currentIndex < string.length && string[currentIndex]!=='') {\n      currentLength++;\n      currentIndex++;\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prefixes from shortest to longest long of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes6 = (string) => {\n  let prefixes = [];\n  let currentPrefix = '';\n  let currentLength = 0;\n  let currentIndex = 0;\n  while (currentIndex < string.length) {\n    currentPrefix = string.substr(currentIndex, currentLength);\n    if (currentPrefix === '') {\n      prefixes.push('');\n    } else {\n      prefixes.push(currentPrefix);\n    }\n    currentIndex += currentLength;\n    currentLength = 0;\n    while (currentIndex < string.length && string[currentIndex]!=='') {\n      currentLength++;\n      currentIndex++;\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prefixes from shortest to longest long of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes7 = (string) => {\n  let prefixes = [];\n  let currentPrefix = '';\n  let currentLength = 0;\n  let currentIndex = 0;\n  while (currentIndex < string.length) {\n    currentPrefix = string.substr(currentIndex, currentLength);\n    if (currentPrefix === '') {\n      prefixes.push('');\n    } else {\n      prefixes.push(currentPrefix);\n    }\n    currentIndex += currentLength;\n    currentLength = 0;\n    while (currentIndex < string.length && string[currentIndex]!=='') {\n      currentLength++;\n      currentIndex++;\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prefixes from shortest to longest long of the input stimulation string\n"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/*\n  Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/*\n  Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/*\n  Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/*\n  Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/*\n  Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/*\n  Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/*\n  Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/*\n  Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/*\n  Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/*\n  Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/*\n  Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/*\n  Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/*\n  Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let character = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === character) {\n      count++;\n    } else {\n      character = string[i];\n      count = 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string bowed stringed instrument representing exemplify musical notes in a special particular ASCII format. \n   Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole note, lasts four beats meter \n  ' o|' - half note bill, lasts two beats pulse \n  ' .|' - quater note bill, lasts survive one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string bowed stringed instrument representing exemplify musical notes in a special particular ASCII format. \n   Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole note, lasts four beats meter \n 'o|' - half note bill, lasts two beats pulse \n  '.|' - quater note bill, lasts survive one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_string_array = music_string.split('|');\n  let music_string_array_length = music_string_array.length;\n  let music_string_array_index = 0;\n  let music_string_array_length_minus_one = music_string_array_length - 1;\n  let music_string_array_last_index = music_string_array_length - 1;\n  let music_string_array_last_element = music_string_array[music_string_array_last_index];\n  let music_string_array_last_element_length = music_string_array_last_element.length;\n  let music_string_array_last_element_index = music_string_array_last_element.indexOf('|');\n  let music_string_array_last_element_index_minus_one = music_string_array_last_element_index - 1;\n  let music_string_array_last_element_index_minus_one_length = music_string_array_last_element_index_minus_one.length;\n  let music_string_array_last_element_index_minus_one_index = music_string_array_last_element_index_minus_one.indexOf('|');\n  let music_string_array_last_element_index_minus_one_index_minus_one = music_string_array_last_element_index_minus_one_index - 1;\n  let music_string_array_last_element_index_minus_one_index_minus_one_length = music_string_array_last_element_index_minus_one_index_minus_one.length;\n  let music_string_array_last_element_index_minus_one_index_minus_one_index = music_string_array_last_element_index_minus_one_index - 1;\n  let music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one = music_string_array_last_element_index_minus_one_index_minus_one.indexOf('|');\n  let music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_length = music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one.length;\n  let music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_index = music_string_array_last_element_index_minus_one_index_minus_one_index - 1;\n  let music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_index_minus_one = music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_index - 1;\n  let music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index = music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_index - 1;\n  let music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one = music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index - 1;\n  let music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one = music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index - 1;\n  let music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one = music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index - 1;\n  let music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one = music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index - 1;\n  let music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one = music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index - 1;\n  let music_string_array_last_element_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one = music_string"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++\n      i += substring.length\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let drawstring = '';\n  let number = 0;\n  let numberString = '';\n  let numberStringLength = 0;\n  let numberStringLengths = [];\n  let numberStringLengthsLength = 0;\n  let numberStringLengthsLengths = [];\n  let numberStringLengthsLengthsLength = 0;\n  let numberStringLengthsLengthsLengths = [];\n  let numberStringLengthsLengthsLengthsLength = 0;\n  let numberStringLengthsLengthsLengthsLengths = [];\n  let numberStringLengthsLengthsLengthsLengthsLength = 0;\n  let numberStringLengthsLengthsLengthsLengthsLengths = [];\n  let numberStringLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let numberStringLengthsLengthsLengthsLengthsLengthsLengths = [];\n  let numberStringLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let numberStringLengthsLengthsLengthsLengthsLengthsLengthsLengths = [];\n  let numberStringLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let numberStringLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengths = [];\n  let numberStringLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let numberStringLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let numberStringLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let numberStringLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let numberStringLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let numberStringLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let numberStringLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let numberStringLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let numberStringLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = 0;\n  let numberStringLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select choice and return two that are the closest close to each \n   other and return them in order (smaller number phone number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select choice and return two that are the closest close to each \n   other and return them in order (smaller number phone number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let closest = numbers[0];\n  let closestDistance = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 1; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[0]);\n    if (distance < closestDistance) {\n      closest = numbers[i];\n      closestDistance = distance;\n    }\n  }\n  return [closest, closestDistance];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  */\nconst findClosestElements2 = (numbers) => {\n  let closest = numbers[0];\n  let closestDistance = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 1; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[0]);\n    if (distance < closestDistance) {\n      closest = numbers[i];\n      closestDistance = distance;\n    }\n  }\n  return [closest, closestDistance];\n};\n\n/*\n  >>> findClosestElements2([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  */\nconst findClosestElements3 = (numbers) => {\n  let closest = numbers[0];\n  let closestDistance = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 1; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[0]);\n    if (distance < closestDistance) {\n      closest = numbers[i];\n      closestDistance = distance;\n    }\n  }\n  return [closest, closestDistance];\n};\n\n/*\n  >>> findClosestElements3([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  */\nconst findClosestElements4 = (numbers) => {\n  let closest = numbers[0];\n  let closestDistance = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 1; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[0]);\n    if (distance < closestDistance) {\n      closest = numbers[i];\n      closestDistance = distance;\n    }\n  }\n  return [closest, closestDistance];\n};\n\n/*\n  >>> findClosestElements4([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  */\nconst findClosestElements5 = (numbers) => {\n  let closest = numbers[0];\n  let closestDistance = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 1; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[0]);\n    if (distance < closestDistance) {\n      closest = numbers[i];\n      closestDistance = distance;\n    }\n  }\n  return [closest, closestDistance];\n};\n\n/*\n  >>> findClosestElements5([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  */\nconst findClosestElements6 = (numbers) => {\n  let closest = numbers[0];\n  let closestDistance = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 1; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[0]);\n    if (distance < closestDistance) {\n      closest = numbers[i];\n      closestDistance = distance;\n    }\n  }\n  return [closest, closestDistance];\n};\n\n/*\n  >>> findClosestElements6([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  */\nconst findClosestElements7 = (numbers) => {\n  let closest = numbers[0];\n  let closestDistance = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 1; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[0]);\n    if (distance < closestDistance) {\n      closest = numbers[i];\n      closestDistance = distance;\n    }\n  }\n  return [closest, closestDistance];\n};\n\n/*\n  >>> findClosestElements7([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  */\nconst findClosestElements8 = (numbers) => {\n  let closest = numbers[0];\n  let closestDistance = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 1; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[0]);\n    if (distance < closestDistance) {\n      closest = numbers[i];\n      closestDistance = distance;\n    }\n  }\n  return [closest, closest"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply give a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply give a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale)\n  }\n  return result\n}\n\n/*\n  Given list of numbers, apply a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale)\n  }\n  return result\n}\n\n/*\n  Given list of numbers, apply a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale)\n  }\n  return result\n}\n\n/*\n  Given list of numbers, apply a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale)\n  }\n  return result\n}\n\n/*\n  Given list of numbers, apply a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale)\n  }\n  return result\n}\n\n/*\n  Given list of numbers, apply a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale)\n  }\n  return result\n}\n\n/*\n  Given list of numbers, apply a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale)\n  }\n  return result\n}\n\n/*\n  Given list of numbers, apply a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit8 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isFinite(value);\n  });\n};\n\n/*\n  Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/*\n  Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/*\n  Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isFinite(value);\n  });\n};\n\n/*\n  Filter given list of any python values only for complex numbers\n  >>> filterComplex(['a', 3.14, 5])\n  [5]\n  >>> filterComplex([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterComplex = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isFinite(value) && value.constructor === Complex;\n  });\n};\n\n/*\n  Filter given list of any python values only for complex numbers\n  >>> filterComplex(['a', 3.14, 5])\n  [5]\n  >>> filterComplex([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterComplexNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isFinite(value) && value.constructor === Complex;\n  });\n};\n\n/*\n  Filter given list of any python values only for complex numbers\n  >>> filterComplex(['a', 3.14, 5])\n  [5]\n  >>> filterComplex([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterComplexNumbersAndFloats = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isFinite(value) && value.constructor === Complex || typeof value === 'number' && isFinite(value) && value.constructor === Complex;\n  });\n};\n\n/*\n  Filter given list of any python values only for complex numbers\n  >>> filterComplex(['a', 3.14, 5])\n  [5]\n  >>> filterComplex([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterComplexNumbersAndStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isFinite(value) && value.constructor === Complex || typeof value ==='string';\n  });\n};\n\n/*\n  Filter given list of any python values only for complex numbers\n  >>> filterComplex(['a', 3.14, 5])\n  [5]\n  >>> filterComplex([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterComplexNumbersAndBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isFinite(value) && value.constructor === Complex || typeof value === 'boolean';\n  });\n};\n\n/*\n  Filter given list of any python values only for complex numbers\n  >>> filterComplex(['a', 3.14, 5])\n  [5]\n  >>> filterComplex([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterComplexNumbersAndIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isFinite(value) && value.constructor === Complex || typeof value === 'number' && isFinite(value);\n  });\n};\n\n/*\n  Filter given list of any python values only for complex numbers\n  >>> filterComplex(['a', 3.14, 5])\n  [5]\n  >>> filterComplex([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterComplexNumbersAndFloatsAndStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isFinite(value) && value.constructor === Complex || typeof value === 'number' && isFinite(value) && value.constructor === Complex || typeof value ==='string';\n  });\n};\n\n/*\n  Filter given list of any python values only for complex numbers\n  >>> filterComplex(['a', 3.14, 5])\n  [5]\n  >>> filterComplex([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterComplexNumbersAndFloatsAndBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isFinite(value) && value.constructor === Complex || typeof value === 'boolean';\n  });\n};\n\n/*\n"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given yield string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "/* Return length of given yield string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the index of the first occurrence of a substring in a string.\n  Returns -1 if the substring is not found.\n  @param {string} string The string to search in\n  @param {string} substring The substring to search for\n  @return {number} The index of the first occurrence of the substring, or -1 if not found\n  @example\n  >>> strpos('abcdef', 'c')\n  3\n  */\nconst strpos = (string, substring) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.indexOf(substring);\n};\n\n/**\n  Returns the index of the last occurrence of a substring in a string.\n  Returns -1 if the substring is not found.\n  @param {string} string The string to search in\n  @param {string} substring The substring to search for\n  @return {number} The index of the last occurrence of the substring, or -1 if not found\n  @example\n  >>> strrpos('abcdef', 'c')\n  3\n  */\nconst strrpos = (string, substring) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.lastIndexOf(substring);\n};\n\n/**\n  Returns the index of the first occurrence of a substring in a string, starting at a given index.\n  Returns -1 if the substring is not found.\n  @param {string} string The string to search in\n  @param {string} substring The substring to search for\n  @param {number} start The index to start the search\n  @return {number} The index of the first occurrence of the substring, or -1 if not found\n  @example\n  >>> strpos('abcdef', 'c', 1)\n  3\n  */\nconst strpos = (string, substring, start) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.indexOf(substring, start);\n};\n\n/**\n  Returns the index of the last occurrence of a substring in a string, starting at a given index.\n  Returns -1 if the substring is not found.\n  @param {string} string The string to search in\n  @param {string} substring The substring to search for\n  @param {number} start The index to start the search\n  @return {number} The index of the last occurrence of the substring, or -1 if not found\n  @example\n  >>> strrpos('abcdef', 'c', 1)\n  3\n  */\nconst strrpos = (string, substring, start) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.lastIndexOf(substring, start);\n};\n\n/**\n  Returns the index of the first occurrence of a substring in a string, starting at a given index.\n  Returns -1 if the substring is not found.\n  @param {string} string The string to search in\n  @param {string} substring The substring to search for\n  @param {number} start The index to start the search\n  @return {number} The index of the first occurrence of the substring, or -1 if not found\n  @example\n  >>> strpos('abcdef', 'c', 1)\n  3\n  */\nconst strpos = (string, substring, start) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.indexOf(substring, start);\n};\n\n/**\n  Returns the index of the last occurrence of a substring in a string, starting at a given index.\n  Returns -1 if the substring is not found.\n  @param {string} string The string to search in\n  @param {string} substring The substring to search for\n  @param {number} start The index to start the search\n  @return {number} The index of the last occurrence of the substring, or -1 if not found\n  @example\n  >>> strrpos('abcdef', 'c', 1)\n  3\n  */\nconst strrpos = (string, substring, start) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.lastIndexOf(substring, start);\n};\n\n/**\n  Returns the index of the first occurrence of a substring in a string, starting at a given index.\n  Returns -1 if the substring is not found.\n  @param {string} string The string to search in\n  @param {string} substring The substring to search for\n  @param {number} start The index to start the search\n  @return {number} The index of the first occurrence of the substring, or -1 if not found\n  @example\n  >>> strpos('abcdef', 'c', 1)\n  3\n  */\nconst strpos = (string, substring, start) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.indexOf(substring, start);\n};\n\n/**\n  Returns the index of the last occurrence of a substring in a string, starting at a given index.\n  Returns -1 if the substring is not found.\n  @param {string} string The string to search in\n  @param {string} substring The substring to search for\n  @param {number} start The index to start the search\n  @return {number} The index of the last occurrence of the substring, or -1 if not found\n  @example\n  >>> strrpos('abcdef', 'c', 1)\n  3\n  */\nconst strrpos = (string, substring, start) => {\n  if (string === '') {\n    return -1;\n  }\n  return string.lastIndexOf(substring, start);\n};\n\n/**\n  Returns the index of the first occurrence of a substring in a string, starting at a given index.\n  Returns -1 if the substring is not found.\n  @param {string} string The string to search in\n  @param {string} substring The substring to search for\n  @param {number} start The index to start the search\n  @return {number} The index of the"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find receive the largest bombastic number that divides n evenly, smaller modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "/* For a given number n, find receive the largest bombastic number that divides n evenly, smaller modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let max = 0;\n  let maxDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    let divisor = Math.floor(n / i);\n    if (divisor > maxDivisor) {\n      maxDivisor = divisor;\n      max = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = largestDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let result = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = {\n  factorize\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates2 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates3 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates4 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates5 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates6 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates7 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates8 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates9 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates10 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates11 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates12 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let result = string.toLowerCase();\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 'a' && result[i] <= 'z') {\n      result[i] = result[i].toUpperCase();\n    } else if (result[i] >= 'A' && result[i] <= 'Z') {\n      result[i] = result[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\n/**\n  For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase2 = (string) => {\n  let result = string.toLowerCase();\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 'a' && result[i] <= 'z') {\n      result[i] = result[i].toUpperCase();\n    } else if (result[i] >= 'A' && result[i] <= 'Z') {\n      result[i] = result[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\n/**\n  For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase3 = (string) => {\n  let result = string.toLowerCase();\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 'a' && result[i] <= 'z') {\n      result[i] = result[i].toUpperCase();\n    } else if (result[i] >= 'A' && result[i] <= 'Z') {\n      result[i] = result[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\n/**\n  For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase4 = (string) => {\n  let result = string.toLowerCase();\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 'a' && result[i] <= 'z') {\n      result[i] = result[i].toUpperCase();\n    } else if (result[i] >= 'A' && result[i] <= 'Z') {\n      result[i] = result[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\n/**\n  For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase5 = (string) => {\n  let result = string.toLowerCase();\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 'a' && result[i] <= 'z') {\n      result[i] = result[i].toUpperCase();\n    } else if (result[i] >= 'A' && result[i] <= 'Z') {\n      result[i] = result[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\n/**\n  For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase6 = (string) => {\n  let result = string.toLowerCase();\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 'a' && result[i] <= 'z') {\n      result[i] = result[i].toUpperCase();\n    } else if (result[i] >= 'A' && result[i] <= 'Z') {\n      result[i] = result[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\n/**\n  For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase7 = (string) => {\n  let result = string.toLowerCase();\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 'a' && result[i] <= 'z') {\n      result[i] = result[i].toUpperCase();\n    } else if (result[i] >= 'A' && result[i] <= 'Z') {\n      result[i] = result[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\n/**\n  For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase8 = (string) => {\n  let result = string.toLowerCase();\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 'a' && result[i] <= 'z') {\n      result[i] = result[i].toUpperCase();\n    } else if (result[i] >= 'A' && result[i] <= 'Z') {\n      result[i] = result[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\n/**\n  For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase9 = (string) => {\n  let result = string.toLowerCase();\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] >= 'a' && result[i] <= 'z') {\n      result[i] = result[i].toUpperCase();\n    } else if (result"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\nmodule.exports = concatenate;\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start originate with a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start originate with a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that end with a given render prefix.\n  * @param {string[]} strings\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given render prefix.\n  * @param {string[]} strings\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByContains = (strings, prefix) => {\n  return strings.filter(s => s.includes(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given render prefix.\n  * @param {string[]} strings\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByStartsWith = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given render prefix.\n  * @param {string[]} strings\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByEndsWith = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given render prefix.\n  * @param {string[]} strings\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByContainsAny = (strings, prefix) => {\n  return strings.filter(s => s.includes(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given render prefix.\n  * @param {string[]} strings\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByStartsWithAny = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given render prefix.\n  * @param {string[]} strings\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByEndsWithAny = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given render prefix.\n  * @param {string[]} strings\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByContainsAll = (strings, prefix) => {\n  return strings.filter(s => s.includes(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given render prefix.\n  * @param {string[]} strings\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByStartsWithAll = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given render prefix.\n  * @param {string[]} strings\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByEndsWithAll = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given render prefix.\n  * @param {string[]} strings\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByContainsAllAny = (strings, prefix) => {\n  return strings.filter(s => s.includes(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given render prefix.\n  * @param {string[]} strings\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByStartsWithAllAny = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given render prefix.\n  * @param {string[]} strings\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByEndsWithAllAny = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given render prefix.\n  * @param {string[]} strings\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByContainsAllStartsWith = (strings, prefix) => {\n  return strings.filter(s => s.includes(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given render prefix.\n  * @param {string[]} strings\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByStartsWithAllStartsWith = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given render prefix.\n  * @param {string[]} strings\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByEndsWithAllStartsWith = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n  * Filter an input list of strings only for"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((v) => v > 0);\n};\n\n/**\n  * Returns a list of numbers that are not negative.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * getNonNegative([-1, 2, -4, 5, 6])\n  * // [2, 5, 6]\n  * getNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // [5, 3, 9, 123, 1]\n  */\nconst getNonNegative = (l) => {\n  return l.filter((v) => v >= 0);\n};\n\n/**\n  * Returns a list of numbers that are not negative or zero.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * getNonNegativeZero([-1, 2, -4, 5, 6])\n  * // [2, 5, 6]\n  * getNonNegativeZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // [5, 3, 9, 123, 1]\n  */\nconst getNonNegativeZero = (l) => {\n  return l.filter((v) => v > 0 && v < 1);\n};\n\n/**\n  * Returns a list of numbers that are not negative or zero or NaN.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * getNonNegativeZeroNaN([-1, 2, -4, 5, 6])\n  * // [2, 5, 6]\n  * getNonNegativeZeroNaN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // [5, 3, 9, 123, 1]\n  */\nconst getNonNegativeZeroNaN = (l) => {\n  return l.filter((v) => v > 0 && v < 1 && isNaN(v));\n};\n\n/**\n  * Returns a list of numbers that are not negative or zero or NaN.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * getNonNegativeZeroNaN([-1, 2, -4, 5, 6])\n  * // [2, 5, 6]\n  * getNonNegativeZeroNaN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // [5, 3, 9, 123, 1]\n  */\nconst getNonNegativeZeroNaNOrInfinity = (l) => {\n  return l.filter((v) => v > 0 && v < 1 && isNaN(v) || isInfinity(v));\n};\n\n/**\n  * Returns a list of numbers that are not negative or zero or NaN or Infinity.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * getNonNegativeZeroNaNOrInfinity([-1, 2, -4, 5, 6])\n  * // [2, 5, 6]\n  * getNonNegativeZeroNaNOrInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // [5, 3, 9, 123, 1]\n  */\nconst getNonNegativeZeroNaNOrInfinity = (l) => {\n  return l.filter((v) => v > 0 && v < 1 && isNaN(v) || isInfinity(v));\n};\n\n/**\n  * Returns a list of numbers that are not negative or zero or NaN or Infinity.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * getNonNegativeZeroNaNOrInfinity([-1, 2, -4, 5, 6])\n  * // [2, 5, 6]\n  * getNonNegativeZeroNaNOrInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // [5, 3, 9, 123, 1]\n  */\nconst getNonNegativeZeroNaNOrInfinity = (l) => {\n  return l.filter((v) => v > 0 && v < 1 && isNaN(v) || isInfinity(v));\n};\n\n/**\n  * Returns a list of numbers that are not negative or zero or NaN or Infinity.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * getNonNegativeZeroNaNOrInfinity([-1, 2, -4, 5, 6])\n  * // [2, 5, 6]\n  * getNonNegativeZeroNaNOrInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // [5, 3, 9, 123, 1]\n  */\nconst getNonNegativeZeroNaNOrInfinityOrNaN = (l) => {\n  return l.filter((v) => v > 0 && v < 1 && isNaN(v) || isInfinity(v) || isNaN(v));\n};\n\n/**\n  * Returns a list of numbers that are not negative or zero or NaN or Infinity.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * getNonNegativeZeroNaNOrInfinity([-1, 2, -4, 5, 6])\n  * // [2, 5, 6]\n  * getNonNegativeZeroNaNOrInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // [5, 3, 9, 123, 1]\n  */\nconst getNonNegativeZeroNaNOrInfinityOrNaN = (l) => {\n  return l.filter((v) => v > 0"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime2 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime3 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime4 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime5 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime6 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime7 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime8 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime9 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime10 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime11 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime12 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime13 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime14 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime15 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find recover x such that poly(x) = 0. \n   findZero returns only only zero point, even if there are many. \n   Moreover furthermore, findZero only takes list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find recover x such that poly(x) = 0. \n   findZero returns only only zero point, even if there are many. \n   Moreover furthermore, findZero only takes list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  const max = Math.max(...xs);\n  const min = Math.min(...xs);\n  const maxCoeff = Math.max(...xs.map((x) => x / max));\n  const minCoeff = Math.min(...xs.map((x) => x / min));\n  const maxCoeffSquared = Math.max(...xs.map((x) => x * x / max));\n  const minCoeffSquared = Math.min(...xs.map((x) => x * x / min));\n  const maxCoeffSquaredSquared = Math.max(...xs.map((x) => x * x * x / max));\n  const minCoeffSquaredSquared = Math.min(...xs.map((x) => x * x * x / min));\n  const maxCoeffSquaredSquaredSquared = Math.max(...xs.map((x) => x * x * x * x / max));\n  const minCoeffSquaredSquaredSquared = Math.min(...xs.map((x) => x * x * x * x / min));\n  const maxCoeffSquaredSquaredSquaredSquared = Math.max(...xs.map((x) => x * x * x * x * x / max));\n  const minCoeffSquaredSquaredSquaredSquared = Math.min(...xs.map((x) => x * x * x * x * x / min));\n  const maxCoeffSquaredSquaredSquaredSquared = Math.max(...xs.map((x) => x * x * x * x * x * x / max));\n  const minCoeffSquaredSquaredSquaredSquared = Math.min(...xs.map((x) => x * x * x * x * x * x / min));\n  const maxCoeffSquaredSquaredSquaredSquared = Math.max(...xs.map((x) => x * x * x * x * x * x * x / max));\n  const minCoeffSquaredSquaredSquaredSquared = Math.min(...xs.map((x) => x * x * x * x * x * x * x / min));\n  const maxCoeffSquaredSquaredSquaredSquared = Math.max(...xs.map((x) => x * x * x * x * x * x * x * x / max));\n  const minCoeffSquaredSquaredSquaredSquared = Math.min(...xs.map((x) => x * x * x * x * x * x * x * x / min));\n  const maxCoeffSquaredSquaredSquaredSquared = Math.max(...xs.map((x) => x * x * x * x * x * x * x * x * x / max));\n  const minCoeffSquaredSquaredSquaredSquared = Math.min(...xs.map((x) => x * x * x * x * x * x * x * x * x / min));\n  const maxCoeffSquaredSquaredSquaredSquared = Math.max(...xs.map((x) => x * x * x * x * x * x * x * x * x * x / max));\n  const minCoeffSquaredSquaredSquaredSquared = Math.min(...xs.map((x) => x * x * x * x * x * x * x * x * x * x / min));\n  const maxCoeffSquaredSquaredSquaredSquared = Math.max(...xs.map((x) => x * x * x * x * x * x * x * x * x * x * x / max));\n  const minCoeffSquaredSquaredSquaredSquared = Math.min(...xs.map((x) => x * x * x * x * x * x * x * x * x * x * x / min));\n  const maxCoeffSquaredSquaredSquaredSquared = Math.max(...xs.map((x) => x * x * x * x * x * x * x * x * x * x * x * x / max));\n  const minCoeffSquaredSquaredSquaredSquared = Math.min(...xs.map((x) => x * x * x * x * x * x * x * x * x * x * x * x / min));\n  const maxCoeffSquaredSquaredSquaredSquared = Math.max(...xs.map((x) => x * x * x * x * x * x * x * x * x * x * x * x * x / max));\n  const minCoeffSquaredSquaredSquaredSquared = Math.min(...xs.map((x) => x * x * x * x * x * x * x * x * x * x * x * x * x / min));\n  const maxCoeffSquaredSquaredSquaredSquared = Math.max(...xs.map((x) => x * x * x * x * x * x * x * x * x * x * x * x * x * x / max));\n  const minCoeffSquaredSquaredSquaredSquared = Math.min(...xs.map((x) => x * x * x * x * x"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const lprime = l.slice();\n  for (let i = 0; i < l.length; i += 3) {\n    const j = lprime.indexOf(l[i]);\n    if (j!== -1) {\n      lprime.splice(j, 1);\n      lprime.splice(i + 1, 0, l[i + 1]);\n      lprime.splice(i + 2, 0, l[i + 2]);\n    }\n  }\n  return lprime;\n};\n\n/*\n  This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird2 = (l) => {\n  const lprime = l.slice();\n  for (let i = 0; i < l.length; i += 3) {\n    const j = lprime.indexOf(l[i]);\n    if (j!== -1) {\n      lprime.splice(j, 1);\n      lprime.splice(i + 1, 0, l[i + 1]);\n      lprime.splice(i + 2, 0, l[i + 2]);\n    }\n  }\n  return lprime;\n};\n\n/*\n  This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird3 = (l) => {\n  const lprime = l.slice();\n  for (let i = 0; i < l.length; i += 3) {\n    const j = lprime.indexOf(l[i]);\n    if (j!== -1) {\n      lprime.splice(j, 1);\n      lprime.splice(i + 1, 0, l[i + 1]);\n      lprime.splice(i + 2, 0, l[i + 2]);\n    }\n  }\n  return lprime;\n};\n\n/*\n  This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird4 = (l) => {\n  const lprime = l.slice();\n  for (let i = 0; i < l.length; i += 3) {\n    const j = lprime.indexOf(l[i]);\n    if (j!== -1) {\n      lprime.splice(j, 1);\n      lprime.splice(i + 1, 0, l[i + 1]);\n      lprime.splice(i + 2, 0, l[i + 2]);\n    }\n  }\n  return lprime;\n};\n\n/*\n  This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird5 = (l) => {\n  const lprime = l.slice();\n  for (let i = 0; i < l.length; i += 3) {\n    const j = lprime.indexOf(l[i]);\n    if (j!== -1) {\n      lprime.splice(j, 1);\n      lprime.splice(i + 1, 0, l[i + 1]);\n      lprime.splice(i + 2, 0, l[i + 2]);\n    }\n  }\n  return lprime;\n};\n\n/*\n  This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird6 = (l) => {\n  const lprime = l.slice();\n  for (let i = 0; i < l.length; i += 3) {\n    const j = lprime.indexOf(l[i]);\n    if (j!== -1) {\n      lprime.splice(j, 1);\n      lprime.splice(i + 1, 0, l[i + 1]);\n      lprime.splice(i + 2, 0, l[i + 2]);\n    }\n  }\n  return lprime;\n};\n\n/*\n  This function takes a list l and"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      k++;\n    }\n    i++;\n  }\n  while (j < lst.length) {\n    if (lst.indexOf(lst[j]) === -1) {\n      lst.push(lst[j]);\n      k++;\n    }\n    j++;\n  }\n  return lst.slice(0, k);\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      k++;\n    }\n    i++;\n  }\n  while (j < lst.length) {\n    if (lst.indexOf(lst[j]) === -1) {\n      lst.push(lst[j]);\n      k++;\n    }\n    j++;\n  }\n  return lst.slice(0, k);\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      k++;\n    }\n    i++;\n  }\n  while (j < lst.length) {\n    if (lst.indexOf(lst[j]) === -1) {\n      lst.push(lst[j]);\n      k++;\n    }\n    j++;\n  }\n  return lst.slice(0, k);\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      k++;\n    }\n    i++;\n  }\n  while (j < lst.length) {\n    if (lst.indexOf(lst[j]) === -1) {\n      lst.push(lst[j]);\n      k++;\n    }\n    j++;\n  }\n  return lst.slice(0, k);\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      k++;\n    }\n    i++;\n  }\n  while (j < lst.length) {\n    if (lst.indexOf(lst[j]) === -1) {\n      lst.push(lst[j]);\n      k++;\n    }\n    j++;\n  }\n  return lst.slice(0, k);\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      k++;\n    }\n    i++;\n  }\n  while (j < lst.length) {\n    if (lst.indexOf(lst[j]) === -1) {\n      lst.push(lst[j]);\n      k++;\n    }\n    j++;\n  }\n  return lst.slice(0, k);\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      k++;\n    }\n    i++;\n  }\n  while (j < lst.length) {\n    if (lst.indexOf(lst[j]) === -1) {\n      lst.push(lst[j]);\n      k++;\n    }\n    j++;\n  }\n  return lst.slice(0, k);\n};\n\n/*\n  Return sorted unique elements in a list\n  >>>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit finger 7 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "/*Return the number of times the digit finger 7 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 11 === 0 && n % 13 === 0) {\n      count += 2;\n      n = Math.floor(n / 11);\n      n = Math.floor(n / 13);\n    } else if (n % 11 === 0) {\n      count += 1;\n      n = Math.floor(n / 11);\n    } else if (n % 13 === 0) {\n      count += 1;\n      n = Math.floor(n / 13);\n    } else {\n      count += 1;\n      n = Math.floor(n / 10);\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEvenOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEvenOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEvenOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  "}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string bowed stringed instrument by cycling motorbike groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoded string bowed stringed instrument by cycling motorbike groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number numeral and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number numeral and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1)\n  const prime = prime(fib)\n  if (prime) {\n    return fib + prime\n  }\n  return fib\n}\n\n/*\n  prime returns true if n is prime.\n  >>> prime(1)\n  false\n  >>> prime(2)\n  true\n  >>> prime(3)\n  true\n  >>> prime(4)\n  true\n  >>> prime(5)\n  true\n  >>> prime(6)\n  false\n  */\nconst prime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  const sqrt = Math.sqrt(n)\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  prime returns true if n is prime.\n  >>> prime(1)\n  false\n  >>> prime(2)\n  true\n  >>> prime(3)\n  true\n  >>> prime(4)\n  true\n  >>> prime(5)\n  true\n  >>> prime(6)\n  false\n  */\nconst prime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  const sqrt = Math.sqrt(n)\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  prime returns true if n is prime.\n  >>> prime(1)\n  false\n  >>> prime(2)\n  true\n  >>> prime(3)\n  true\n  >>> prime(4)\n  true\n  >>> prime(5)\n  true\n  >>> prime(6)\n  false\n  */\nconst prime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  const sqrt = Math.sqrt(n)\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  prime returns true if n is prime.\n  >>> prime(1)\n  false\n  >>> prime(2)\n  true\n  >>> prime(3)\n  true\n  >>> prime(4)\n  true\n  >>> prime(5)\n  true\n  >>> prime(6)\n  false\n  */\nconst prime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  const sqrt = Math.sqrt(n)\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  prime returns true if n is prime.\n  >>> prime(1)\n  false\n  >>> prime(2)\n  true\n  >>> prime(3)\n  true\n  >>> prime(4)\n  true\n  >>> prime(5)\n  true\n  >>> prime(6)\n  false\n  */\nconst prime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  const sqrt = Math.sqrt(n)\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  prime returns true if n is prime.\n  >>> prime(1)\n  false\n  >>> prime(2)\n  true\n  >>> prime(3)\n  true\n  >>> prime(4)\n  true\n  >>> prime(5)\n  true\n  >>> prime(6)\n  false\n  */\nconst prime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  const sqrt = Math.sqrt(n)\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  prime returns true if n is prime.\n  >>> prime(1)\n  false\n  >>> prime(2)\n  true\n  >>> prime(3)\n  true\n  >>> prime(4)\n  true\n  >>> prime(5)\n  true\n  >>> prime(6)\n  false\n  */\nconst prime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  const sqrt = Math.sqrt(n)\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  prime returns true if n is prime.\n  >>> prime(1)\n  false\n  >>> prime(2)\n  true\n  >>> prime(3)\n  true\n  >>> prime(4)\n  true\n  >>> prime(5)\n  true\n  >>> prime(6)\n  false\n  */\nconst prime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  const sqrt = Math.sqrt(n)\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  prime returns true if n is prime.\n  >>> prime(1)\n  false\n  >>> prime(2)\n  true\n  >>> prime(3)\n  true\n  >>> prime(4)\n  true\n  >>> prime(5)\n  true\n  >>> prime(6)\n  false\n  */\nconst prime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  const sqrt = Math.sq"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZeroTest = (l) => {\n  let result = triplesSumToZero(l);\n  console.log(result);\n};\n\ntriplesSumToZeroTest([1, 3, 5, 0]);\ntriplesSumToZeroTest([1, 3, -2, 1]);\ntriplesSumToZeroTest([1, 2, 3, 7]);\ntriplesSumToZeroTest([2, 4, -5, 3, 9, 7]);\ntriplesSumToZeroTest([1]);\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight true infinitely boundlessly long line. \n   n cars car are driving left to right correctly;   simultaneously, a different set of n cars \n   are driving right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars move motivate in the same speed amphetamine.   Two cars car are said pronounce to collide clash \n   when a car that's moving left leave to right hits a car that's moving right to left leave. \n   However, the cars cable car are infinitely sturdy hardy and strong firm; as a result, they continue moving act \n   in their trajectory as if they did not collide. \n\n   This function routine outputs output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight true infinitely boundlessly long line. \n   n cars car are driving left to right correctly;   simultaneously, a different set of n cars \n   are driving right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars move motivate in the same speed amphetamine.   Two cars car are said pronounce to collide clash \n   when a car that's moving left leave to right hits a car that's moving right to left leave. \n   However, the cars cable car are infinitely sturdy hardy and strong firm; as a result, they continue moving act \n   in their trajectory as if they did not collide. \n\n   This function routine outputs output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  "}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let n = l.length;\n  let result = [];\n  while (i < n) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let n = l.length;\n  let result = [];\n  while (i < n) {\n    result[j] = l[i];\n    i++;\n    j++;\n    if (i == n) {\n      result[j] = l[0];\n      i = 1;\n      j = 1;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let n = l.length;\n  let result = [];\n  while (i < n) {\n    result[j] = l[i];\n    i++;\n    j++;\n    if (i == n) {\n      result[j] = l[0];\n      i = 1;\n      j = 1;\n    }\n    if (i == n) {\n      result[j] = l[0];\n      i = 1;\n      j = 1;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let n = l.length;\n  let result = [];\n  while (i < n) {\n    result[j] = l[i];\n    i++;\n    j++;\n    if (i == n) {\n      result[j] = l[0];\n      i = 1;\n      j = 1;\n    }\n    if (i == n) {\n      result[j] = l[0];\n      i = 1;\n      j = 1;\n    }\n    if (i == n) {\n      result[j] = l[0];\n      i = 1;\n      j = 1;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let n = l.length;\n  let result = [];\n  while (i < n) {\n    result[j] = l[i];\n    i++;\n    j++;\n    if (i == n) {\n      result[j] = l[0];\n      i = 1;\n      j = 1;\n    }\n    if (i == n) {\n      result[j] = l[0];\n      i = 1;\n      j = 1;\n    }\n    if (i == n) {\n      result[j] = l[0];\n      i = 1;\n      j = 1;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let n = l.length;\n  let result = [];\n  while (i < n) {\n    result[j] = l[i];\n    i++;\n    j++;\n    if (i == n) {\n      result[j] = l[0];\n      i = 1;\n      j = 1;\n    }\n    if (i == n) {\n      result[j] = l[0];\n      i = 1;\n      j = 1;\n    }\n    if (i == n) {\n      result[j] = l[0];\n      i = 1;\n      j = 1;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let n = l.length;\n  let result = [];\n  while (i < n) {\n    result[j] = l[i];\n    i"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number numeral x to base.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "/*Change numerical base of input number numeral x to base.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let numeral = x;\n  let result = '';\n  let i = 0;\n  while (numeral > 0) {\n    let digit = numeral % base;\n    numeral = numeral / base;\n    result = `${digit}${result}`;\n    i++;\n  }\n  return result;\n};\n\n/*\n  Convert string to base 10 number.\n  return number after conversion.\n  */\nconst stringToNumeral = (string) => {\n  let numeral = 0;\n  let i = 0;\n  while (i < string.length) {\n    let digit = string[i];\n    numeral = numeral * 10 + digit - '0';\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Convert base 10 number to string.\n  return string after conversion.\n  */\nconst numeralToString = (numeral) => {\n  let string = '';\n  let i = 0;\n  while (i < numeral) {\n    string = `${string}${numeral % 10}`;\n    numeral = numeral / 10;\n    i++;\n  }\n  return string;\n};\n\n/*\n  Convert string to base 10 number.\n  return number after conversion.\n  */\nconst stringToNumeral = (string) => {\n  let numeral = 0;\n  let i = 0;\n  while (i < string.length) {\n    let digit = string[i];\n    numeral = numeral * 10 + digit - '0';\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Convert base 10 number to string.\n  return string after conversion.\n  */\nconst numeralToString = (numeral) => {\n  let string = '';\n  let i = 0;\n  while (i < numeral) {\n    string = `${string}${numeral % 10}`;\n    numeral = numeral / 10;\n    i++;\n  }\n  return string;\n};\n\n/*\n  Convert string to base 10 number.\n  return number after conversion.\n  */\nconst stringToNumeral = (string) => {\n  let numeral = 0;\n  let i = 0;\n  while (i < string.length) {\n    let digit = string[i];\n    numeral = numeral * 10 + digit - '0';\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Convert base 10 number to string.\n  return string after conversion.\n  */\nconst numeralToString = (numeral) => {\n  let string = '';\n  let i = 0;\n  while (i < numeral) {\n    string = `${string}${numeral % 10}`;\n    numeral = numeral / 10;\n    i++;\n  }\n  return string;\n};\n\n/*\n  Convert string to base 10 number.\n  return number after conversion.\n  */\nconst stringToNumeral = (string) => {\n  let numeral = 0;\n  let i = 0;\n  while (i < string.length) {\n    let digit = string[i];\n    numeral = numeral * 10 + digit - '0';\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Convert base 10 number to string.\n  return string after conversion.\n  */\nconst numeralToString = (numeral) => {\n  let string = '';\n  let i = 0;\n  while (i < numeral) {\n    string = `${string}${numeral % 10}`;\n    numeral = numeral / 10;\n    i++;\n  }\n  return string;\n};\n\n/*\n  Convert string to base 10 number.\n  return number after conversion.\n  */\nconst stringToNumeral = (string) => {\n  let numeral = 0;\n  let i = 0;\n  while (i < string.length) {\n    let digit = string[i];\n    numeral = numeral * 10 + digit - '0';\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Convert base 10 number to string.\n  return string after conversion.\n  */\nconst numeralToString = (numeral) => {\n  let string = '';\n  let i = 0;\n  while (i < numeral) {\n    string = `${string}${numeral % 10}`;\n    numeral = numeral / 10;\n    i++;\n  }\n  return string;\n};\n\n/*\n  Convert string to base 10 number.\n  return number after conversion.\n  */\nconst stringToNumeral = (string) => {\n  let numeral = 0;\n  let i = 0;\n  while (i < string.length) {\n    let digit = string[i];\n    numeral = numeral * 10 + digit - '0';\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Convert base 10 number to string.\n  return string after conversion.\n  */\nconst numeralToString = (numeral) => {\n  let string = '';\n  let i = 0;\n  while (i < numeral) {\n    string = `${string}${numeral % 10}`;\n    numeral = numeral / 10;\n    i++;\n  }\n  return string;\n};\n\n/*\n  Convert string to base 10 number.\n  return number after conversion.\n  */\nconst stringToNumeral = (string) => {\n  let numeral = 0;\n  let i = 0;\n  while (i < string.length) {\n    let digit = string[i];\n    numeral = numeral * 10 + digit - '0';\n    i++;\n  }\n  return numeral;\n};\n\n/*\n  Convert base 10 number to string.\n  return string after conversion.\n  */\nconst numeralToString = (numeral) => {\n  let string = '';\n  let i = 0;\n  while (i < numeral) {\n"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  "}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function affair to efficiently compute the n-th element chemical element of the fib4 number sequence.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function affair to efficiently compute the n-th element chemical element of the fib4 number sequence.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let m = l.length / 2;\n  let i = 0;\n  while (i < m) {\n    if (l[i] < l[m]) {\n      i++;\n    } else {\n      break;\n    }\n  }\n  return l[m - i];\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let first = text[0];\n  let last = text[text.length - 1];\n  let middle = text.substring(1, text.length - 1);\n  return first === last && isPalindrome(middle);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('Both arguments must be positive.');\n  }\n\n  if (n === 0) {\n    return 1;\n  }\n\n  if (n === 1) {\n    return 0;\n  }\n\n  if (n === p) {\n    return 1;\n  }\n\n  if (n % p === 0) {\n    return 1;\n  }\n\n  if (n % p === 1) {\n    return 0;\n  }\n\n  let m = 1;\n  let n2 = n;\n  while (n2 % p!== 0) {\n    m *= 2;\n    n2 = n2 * 2;\n  }\n\n  return m;\n};\n\nmodule.exports = modp;\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string bowed stringed instrument by shifting stir every character by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes accept as input stimulation string encoded encode with encode_shift function. Returns decoded string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoded string bowed stringed instrument by shifting stir every character by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes accept as input stimulation string encoded encode with encode_shift function. Returns decoded string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) + 26)% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes accept as input stimulation string encoded encode with encode_shift function. Returns decoded string. \n   * / \n const decode = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) + 26)% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n*/\n\n//const encodeShift = (s) = > { \n//   return s.split(\"\").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\" \"); \n// } \n\n//const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) + 26)% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n//const decode = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) + 26)% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n//const encodeShift = (s) = > { \n//   return s.split(\"\").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\" \"); \n// } \n\n//const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) + 26)% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n//const decode = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) + 26)% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n//const encodeShift = (s) = > { \n//   return s.split(\"\").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\" \"); \n// } \n\n//const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) + 26)% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n//const decode = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) + 26)% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n//const encodeShift = (s) = > { \n//   return s.split(\"\").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\" \"); \n// } \n\n//const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) + 26)% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n//const decode = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) + 26)% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n//const encodeShift = (s) = > { \n//   return s.split(\"\").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\" \"); \n// } \n\n//const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) + 26)% 26) + \" a\".char"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = 'aeiouAEIOU';\n  let returnText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      returnText += text[i];\n    }\n  }\n  return returnText;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold doorway t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "/*Return true if all numbers in the list l are below threshold doorway t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n/*Return true if all numbers in the list l are above threshold doorway t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(x => x > t);\n};\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold2 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold3 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold4 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold5 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold6 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold7 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold8 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold9 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold10 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold11 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold12 = (l, t, t1) => {\n  return l.every(x => x >= t && x <= t1);\n};\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 100, 5)"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len0 = s0.length;\n  const len1 = s1.length;\n  if (len0!== len1) {\n    return false;\n  }\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib15(n - 1) + fib15(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib16(n - 1) + fib16(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib("}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracket = brackets[bracketIndex];\n  while (bracketIndex < brackets.length) {\n    if (bracket === \"<\") {\n      bracketCount++;\n    } else if (bracket === \">\") {\n      if (bracketCount === 0) {\n        return false;\n      } else {\n        bracketCount--;\n      }\n    }\n    bracket = brackets[++bracketIndex];\n  }\n  return true;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing increase or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "/*Return true is list elements are monotonically increasing increase or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length < 2) return true;\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) return true;\n    if (l[i] < l[j]) return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements component for two lists tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "/*Return sorted unique common elements component for two lists tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  const commonLen = Math.min(l1Len, l2Len);\n  const common = [];\n  for (let i = 0; i < commonLen; i++) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n    }\n  }\n  return common;\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return i;\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "/*sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = sumToN\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let i = 0;\n  while (i < brackets.length) {\n    if (brackets[i] === \"(\") {\n      bracketCount++;\n    } else if (brackets[i] === \")\") {\n      bracketCount--;\n    }\n    i++;\n  }\n  return bracketCount === 0;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return return key derivative of this polynomial in the same form mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return return key derivative of this polynomial in the same form mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.slice(0);\n  const ys = [];\n  for (let i = 0; i < xs2.length; i++) {\n    ys.push(xs2[i] * (i + 1));\n  }\n  return ys;\n};\n\n/*\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1\n  x^2 + x + 1"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function affair to efficiently compute the n-th element chemical element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function affair to efficiently compute the n-th element chemical element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 1;\n  }\n  if (n === 4) {\n    return 2;\n  }\n  if (n === 5) {\n    return 3;\n  }\n  if (n === 6) {\n    return 5;\n  }\n  if (n === 7) {\n    return 8;\n  }\n  if (n === 8) {\n    return 13;\n  }\n  if (n === 9) {\n    return 21;\n  }\n  if (n === 10) {\n    return 34;\n  }\n  if (n === 11) {\n    return 55;\n  }\n  if (n === 12) {\n    return 89;\n  }\n  if (n === 13) {\n    return 144;\n  }\n  if (n === 14) {\n    return 233;\n  }\n  if (n === 15) {\n    return 377;\n  }\n  if (n === 16) {\n    return 610;\n  }\n  if (n === 17) {\n    return 987;\n  }\n  if (n === 18) {\n    return 1597;\n  }\n  if (n === 19) {\n    return 2584;\n  }\n  if (n === 20) {\n    return 4181;\n  }\n  if (n === 21) {\n    return 6765;\n  }\n  if (n === 22) {\n    return 10946;\n  }\n  if (n === 23) {\n    return 17711;\n  }\n  if (n === 24) {\n    return 28657;\n  }\n  if (n === 25) {\n    return 46368;\n  }\n  if (n === 26) {\n    return 75025;\n  }\n  if (n === 27) {\n    return 121393;\n  }\n  if (n === 28) {\n    return 196418;\n  }\n  if (n === 29) {\n    return 317811;\n  }\n  if (n === 30) {\n    return 514229;\n  }\n  if (n === 31) {\n    return 832040;\n  }\n  if (n === 32) {\n    return 1346269;\n  }\n  if (n === 33) {\n    return 2178309;\n  }\n  if (n === 34) {\n    return 3524578;\n  }\n  if (n === 35) {\n    return 5702887;\n  }\n  if (n === 36) {\n    return 9227465;\n  }\n  if (n === 37) {\n    return 14930352;\n  }\n  if (n === 38) {\n    return 24157817;\n  }\n  if (n === 39) {\n    return 39088169;\n  }\n  if (n === 40) {\n    return 63245929;\n  }\n  if (n === 41) {\n    return 102334155;\n  }\n  if (n === 42) {\n    return 165580141;\n  }\n  if (n === 43) {\n    return 267914296;\n  }\n  if (n === 44) {\n    return 433494437;\n  }\n  if (n === 45) {\n    return 701408733;\n  }\n  if (n === 46) {\n    return 1134903170;\n  }\n  if (n === 47) {\n    return 1836311903;\n  }\n  if (n === 48) {\n    return 2971215073;\n  }\n  if (n === 49) {\n    return 4875461435;\n  }\n  if (n === 50) {\n    return 7551841791;\n  }\n  if (n === 51) {\n    return 12240084987;\n  }\n  if (n === 52) {\n    return 18363119053;\n  }\n  if (n === 53) {\n    return 29754974251;\n  }\n  if (n === 54) {\n    return 4875461437;\n  }\n  if (n === 55) {\n    return 7551841793;\n  }\n  if (n === 56) {\n    return 12240084989;\n  }\n  if (n === 57) {\n    return 18363119057;\n  }\n  if (n === 58) {\n    return 29754974263;\n  }\n  if (n === 59) {\n    return 4875461439;\n  }\n  if (n === 60) {\n    return 7551841795;\n  }\n  if (n === 61) {\n    return 12240084991;\n  }\n  if (n === 62) {\n    return 18363119059;\n  }\n  if (n === 63) {\n    return 29754974265;\n  }\n  if (n === 64) {\n    return 4875461441;\n  }\n  if (n === 65) {\n    return 7551841797;\n  }\n  if (n === 66) {\n    return 12240084997;\n  }\n  if (n === 67) {\n    return 18363119061;\n  }\n  if (n === 68) {\n    return 29754974277;\n  }\n  if (n === 69) {\n    return 4875461443;\n  }\n  if (n === 70) {\n    return 755184"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word as input and returns come back the number of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word as input and returns come back the number of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let vowelsCount = 0;\n  let vowelsCount2 = 0;\n  let vowelsCount3 = 0;\n  let vowelsCount4 = 0;\n  let vowelsCount5 = 0;\n  let vowelsCount6 = 0;\n  let vowelsCount7 = 0;\n  let vowelsCount8 = 0;\n  let vowelsCount9 = 0;\n  let vowelsCount10 = 0;\n  let vowelsCount11 = 0;\n  let vowelsCount12 = 0;\n  let vowelsCount13 = 0;\n  let vowelsCount14 = 0;\n  let vowelsCount15 = 0;\n  let vowelsCount16 = 0;\n  let vowelsCount17 = 0;\n  let vowelsCount18 = 0;\n  let vowelsCount19 = 0;\n  let vowelsCount20 = 0;\n  let vowelsCount21 = 0;\n  let vowelsCount22 = 0;\n  let vowelsCount23 = 0;\n  let vowelsCount24 = 0;\n  let vowelsCount25 = 0;\n  let vowelsCount26 = 0;\n  let vowelsCount27 = 0;\n  let vowelsCount28 = 0;\n  let vowelsCount29 = 0;\n  let vowelsCount30 = 0;\n  let vowelsCount31 = 0;\n  let vowelsCount32 = 0;\n  let vowelsCount33 = 0;\n  let vowelsCount34 = 0;\n  let vowelsCount35 = 0;\n  let vowelsCount36 = 0;\n  let vowelsCount37 = 0;\n  let vowelsCount38 = 0;\n  let vowelsCount39 = 0;\n  let vowelsCount40 = 0;\n  let vowelsCount41 = 0;\n  let vowelsCount42 = 0;\n  let vowelsCount43 = 0;\n  let vowelsCount44 = 0;\n  let vowelsCount45 = 0;\n  let vowelsCount46 = 0;\n  let vowelsCount47 = 0;\n  let vowelsCount48 = 0;\n  let vowelsCount49 = 0;\n  let vowelsCount50 = 0;\n  let vowelsCount51 = 0;\n  let vowelsCount52 = 0;\n  let vowelsCount53 = 0;\n  let vowelsCount54 = 0;\n  let vowelsCount55 = 0;\n  let vowelsCount56 = 0;\n  let vowelsCount57 = 0;\n  let vowelsCount58 = 0;\n  let vowelsCount59 = 0;\n  let vowelsCount60 = 0;\n  let vowelsCount61 = 0;\n  let vowelsCount62 = 0;\n  let vowelsCount63 = 0;\n  let vowelsCount64 = 0;\n  let vowelsCount65 = 0;\n  let vowelsCount66 = 0;\n  let vowelsCount67 = 0;\n  let vowelsCount68 = 0;\n  let vowelsCount69 = 0;\n  let vowelsCount70 = 0;\n  let vowelsCount71 = 0;\n  let vowelsCount72 = 0;\n  let vowelsCount73 = 0;\n  let vowelsCount74 = 0;\n  let vowelsCount75 = 0;\n  let vowelsCount76 = 0;\n  let vowelsCount77 = 0;\n  let vowelsCount78 = 0;\n  let vowelsCount79 = 0;\n  let vowelsCount80 = 0;\n  let vowelsCount81 = 0;\n  let vowelsCount82 = 0;\n  let vowelsCount83 = 0;\n  let vowelsCount84 = 0;\n  let vowelsCount85 = 0;\n  let vowelsCount86 = 0;\n  let vowelsCount87 = 0;\n  let vowelsCount88 = 0;\n  let vowelsCount89 = 0;\n  let vowelsCount90 = 0;\n  let vowelsCount91 = 0;\n  let vowelsCount92 = 0;\n  let vowelsCount93 = 0;\n  let vowelsCount94 = 0;\n  let vowelsCount95 = 0;\n  let vowelsCount96 = 0;\n  let vowelsCount97 = 0;\n  let vowelsCount98 = 0;\n  let vowelsCount99 = 0;\n  let vowelsCount100 = 0;\n  let vowelsCount101 = 0;\n  let vowelsCount102 = 0;\n  let vowelsCount103 = 0;\n  let vowelsCount104 = 0;\n  let vowelsCount105 = 0;\n  let vowelsCount106 = 0;\n  let vowelsCount107 = 0;\n  let vowelsCount108 = 0;\n  let vowelsCount109 = 0;\n  let vowelsCount110 = 0;\n  let vowelsCount111 = 0;\n  let vowelsCount112 = 0;\n  let vowelsCount113 = 0;\n  let vowelsCount114 = 0;\n  let vowelsCount115 = 0;\n  let vowelsCount116 = 0;\n  let vowelsCount117 = 0;\n  let vowelsCount118 = 0;\n  let vowelsCount119 = 0;\n  let vowelsCount120 = 0;\n  let vowelsCount121 = 0;\n  let vowelsCount122 = 0;\n  let vowelsCount123 = 0;\n  let vowelsCount124 = 0;\n  let vowelsCount125 = 0;\n  let vowelsCount126 = 0;\n  let vowelsCount127 = 0;\n  let vowelsCount128 = 0;\n  let vowelsCount129 = 0;\n  let vowelsCount130 = 0;\n  let vowelsCount131 = 0;\n  let vowelsCount132 = 0;\n  let vowelsCount133 = 0;\n  let vowelsCount134 = 0;\n  let vowelsCount135 = 0;\n  let vowelsCount136 = 0;\n  let vowelsCount137 = 0;\n  let vowelsCount138 = 0;\n  let vowelsCount139 = 0;\n  let vowels"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right veracious by shift\n   and return the result solution as a string. \n   If shift > number of digits finger, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right veracious by shift\n   and return the result solution as a string. \n   If shift > number of digits finger, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i++;\n    if (i < x.length) {\n      result += x[i];\n      i++;\n    }\n  }\n  while (i < shift) {\n    result += \"0\";\n    i++;\n  }\n  return result;\n};\n\nconst getDigit = (x, i) => {\n  let result = \"\";\n  while (i < x.length) {\n    result += x[i];\n    i++;\n  }\n  return result;\n};\n\nconst getDigitByRadix = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix2 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix3 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix4 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix5 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix6 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix7 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix8 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix9 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix10 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix11 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix12 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix13 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix14 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix15 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix16 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix17 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix18 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix19 = (x, radix) => {\n  let result = \"\";\n  while (x > 0) {\n    result += x % radix;\n    x = Math.floor(x / radix);\n  }\n  return result;\n};\n\nconst getDigitByRadix20 = (x, radix) => {\n  let result ="}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string bowed stringed instrument that represents exemplify a number of apples and oranges orange \n   that are distributed in a basket of fruit this basket contains contain \n   apples, oranges, and mango fruits. Given the string chain that represents the total number of \n   the oranges orange and apples and an integer that represent constitute the total number numeral of the fruits fruit \n   in the basket return the number issue of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "/*\n  In this task, you will be given a string bowed stringed instrument that represents exemplify a number of apples and oranges orange \n   that are distributed in a basket of fruit this basket contains contain \n   apples, oranges, and mango fruits. Given the string chain that represents the total number of \n   the oranges orange and apples and an integer that represent constitute the total number numeral of the fruits fruit \n   in the basket return the number issue of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n  let num = 0;\n  let numFruits = 0;\n  let numApples = 0;\n  let numOranges = 0;\n  let numMango = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num = 0;\n  let num"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node with the smallest small even value. \n   If multiple nodes with the same smallest even value are found detect return the node that has smallest index. \n\n   The plucked node lymph node should be returned in a list, [ smalest_value, its index exponent ], \n   If there are no even values value or the given render array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node with the smallest small even value. \n   If multiple nodes with the same smallest even value are found detect return the node that has smallest index. \n\n   The plucked node lymph node should be returned in a list, [ smalest_value, its index exponent ], \n   If there are no even values value or the given render array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const result = [];\n  const map = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (map[arr[i]]) {\n      map[arr[i]]++;\n    } else {\n      map[arr[i]] = 1;\n    }\n  }\n  for (let i in map) {\n    if (map[i] === 1) {\n      result.push([i, Math.pow(i, 2)]);\n    }\n  }\n  return result;\n};\n\nexport { pluck };\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let freq = lst[i];\n    if (freq > maxFreq) {\n      maxFreq = freq;\n      max = i;\n    }\n  }\n  return max;\n};\n\nconst test = () => {\n  let lst = [4, 1, 2, 2, 3, 1];\n  console.log(search(lst));\n};\n\nif (module === require.main) {\n  test();\n}\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === min) {\n      result.push(max);\n      max = lst[i];\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the area of \n   the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the area of \n   the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a > 0 && b > 0 && c > 0) {\n    area = Math.sqrt(a * b * c);\n    return Math.round(area * 100) / 100;\n  }\n  return -1;\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns render true on-key if the object q will fly, and false delusive otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that returns render true on-key if the object q will fly, and false delusive otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return true;\n  if (q.length === 1) return q[0] <= w;\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && isPalindromic(q);\n};\n\nconst isPalindromic = (q) => {\n  if (q.length === 0) return true;\n  if (q.length === 1) return q[0] === q[0];\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum === q[q.length - 1] && sum === q[0];\n};\n\nconsole.log(willItFly([1, 2], 5));\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3], 5));\nconsole.log(willItFly([3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\nconst test = () => {\n  let arr = [1, 2, 3, 5, 4, 7, 9, 6];\n  console.log(smallestChange(arr));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts take two lists tilt of strings and returns the list that has \n   total full number of chars in the all strings chain of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that accepts take two lists tilt of strings and returns the list that has \n   total full number of chars in the all strings chain of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let lst1Length = lst1.length;\n  let lst2Length = lst2.length;\n  if (lst1Length!== lst2Length) {\n    return lst1;\n  }\n  for (let i = 0; i < lst1Length; i++) {\n    if (lst1[i]!== lst2[i]) {\n      return lst1;\n    }\n    total += lst1[i].length;\n  }\n  return lst1.slice(0, total);\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime19 ="}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function affair that returns return true if a number x is a simple dim-witted \n   power of n and false in other cases. \n   x is a simple childlike power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "/*Your task is to write a function affair that returns return true if a number x is a simple dim-witted \n   power of n and false in other cases. \n   x is a simple childlike power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower(x, n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\nconsole.log(isSimplePower(3, 3));\nconsole.log(isSimplePower(5, 4));\nconsole.log(isSimplePower(5, 5));\nconsole.log(isSimplePower(5, 6));\nconsole.log(isSimplePower(5, 7));\nconsole.log(isSimplePower(5, 8));\nconsole.log(isSimplePower(5, 9));\nconsole.log(isSimplePower(5, 10));\nconsole.log(isSimplePower(5, 11));\nconsole.log(isSimplePower(5, 12));\nconsole.log(isSimplePower(5, 13));\nconsole.log(isSimplePower(5, 14));\nconsole.log(isSimplePower(5, 15));\nconsole.log(isSimplePower(5, 16));\nconsole.log(isSimplePower(5, 17));\nconsole.log(isSimplePower(5, 18));\nconsole.log(isSimplePower(5, 19));\nconsole.log(isSimplePower(5, 20));\nconsole.log(isSimplePower(5, 21));\nconsole.log(isSimplePower(5, 22));\nconsole.log(isSimplePower(5, 23));\nconsole.log(isSimplePower(5, 24));\nconsole.log(isSimplePower(5, 25));\nconsole.log(isSimplePower(5, 26));\nconsole.log(isSimplePower(5, 27));\nconsole.log(isSimplePower(5, 28));\nconsole.log(isSimplePower(5, 29));\nconsole.log(isSimplePower(5, 30));\nconsole.log(isSimplePower(5, 31));\nconsole.log(isSimplePower(5, 32));\nconsole.log(isSimplePower(5, 33));\nconsole.log(isSimplePower(5, 34));\nconsole.log(isSimplePower(5, 35));\nconsole.log(isSimplePower(5, 36));\nconsole.log(isSimplePower(5, 37));\nconsole.log(isSimplePower(5, 38));\nconsole.log(isSimplePower(5, 39));\nconsole.log(isSimplePower(5, 40));\nconsole.log(isSimplePower(5, 41));\nconsole.log(isSimplePower(5, 42));\nconsole.log(isSimplePower(5, 43));\nconsole.log(isSimplePower(5, 44));\nconsole.log(isSimplePower(5, 45));\nconsole.log(isSimplePower(5, 46));\nconsole.log(isSimplePower(5, 47));\nconsole.log(isSimplePower(5, 48));\nconsole.log(isSimplePower(5, 49));\nconsole.log(isSimplePower(5, 50));\nconsole.log(isSimplePower(5, 51));\nconsole.log(isSimplePower(5, 52));\nconsole.log(isSimplePower(5, 53));\nconsole.log(isSimplePower(5, 54));\nconsole.log(isSimplePower(5, 55));\nconsole.log(isSimplePower(5, 56));\nconsole.log(isSimplePower(5, 57));\nconsole.log(isSimplePower(5, 58));\nconsole.log(isSimplePower(5, 59));\nconsole.log(isSimplePower(5, 60));\nconsole.log(isSimplePower(5, 61));\nconsole.log(isSimplePower(5, 62));\nconsole.log(isSimplePower(5, 63));\nconsole.log(isSimplePower(5, 64));\nconsole.log(isSimplePower(5, 65));\nconsole.log(isSimplePower(5, 66));\nconsole.log(isSimplePower(5, 67));\nconsole.log(isSimplePower(5, 68));\nconsole.log(isSimplePower(5, 69));\nconsole.log(isSimplePower(5, 70));\nconsole.log(isSimplePower(5, 71));\nconsole.log(isSimplePower(5, 72));\nconsole.log(isSimplePower(5, 73));\nconsole.log(isSimplePower(5, 74));\nconsole.log(isSimplePower(5, 75));\nconsole.log(isSimplePower(5, 76));\nconsole.log(isSimplePower(5, 77));\nconsole.log(isSimplePower(5, 78));\nconsole.log(isSimplePower(5, 79));\nconsole.log(isSimplePower(5, 80));\nconsole.log(isSimplePower(5, 81));\nconsole.log(isSimplePower(5, 82));\nconsole.log(isSimplePower(5, 83));\nconsole.log(isSimplePower(5, 84));\nconsole.log(isSimplePower(5, 85));\nconsole.log(isSimplePower(5, 86));\nconsole.log(isSimplePower(5, 87));\nconsole.log(isSimplePower(5, 88));\nconsole.log(isSimplePower(5, 89));\nconsole.log(isSimplePower(5, 90));\nconsole.log(isSimplePower(5, 91));\nconsole.log(isSimplePower(5, 92));\nconsole.log(isSimplePower(5, 93));\nconsole.log(isSimplePower(5, 94));\nconsole.log(isSimplePower(5, 95));\nconsole.log(isSimplePower(5, 96));\nconsole.log(isSimplePower(5, 97));\nconsole.log(isSimplePower("}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes fill an integer a and returns return true \n   if this ingeger is a cube of some integer number phone number. \n   Note: you may assume the input remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes fill an integer a and returns return true \n   if this ingeger is a cube of some integer number phone number. \n   Note: you may assume the input remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  if (a % 5 == 0) {\n    return true;\n  }\n  return iscube(a / 3) && iscube(a / 5);\n};\n\nconst iscube2 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  if (a % 5 == 0) {\n    return true;\n  }\n  return iscube2(a / 3) && iscube2(a / 5);\n};\n\nconst iscube3 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  if (a % 5 == 0) {\n    return true;\n  }\n  return iscube3(a / 3) && iscube3(a / 5);\n};\n\nconst iscube4 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  if (a % 5 == 0) {\n    return true;\n  }\n  return iscube4(a / 3) && iscube4(a / 5);\n};\n\nconst iscube5 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  if (a % 5 == 0) {\n    return true;\n  }\n  return iscube5(a / 3) && iscube5(a / 5);\n};\n\nconst iscube6 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  if (a % 5 == 0) {\n    return true;\n  }\n  return iscube6(a / 3) && iscube6(a / 5);\n};\n\nconst iscube7 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  if (a % 5 == 0) {\n    return true;\n  }\n  return iscube7(a / 3) && iscube7(a / 5);\n};\n\nconst iscube8 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  if (a % 5 == 0) {\n    return true;\n  }\n  return iscube8(a / 3) && iscube8(a / 5);\n};\n\nconst iscube9 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  if (a % 5 == 0) {\n    return true;\n  }\n  return iscube9(a / 3) && iscube9(a / 5);\n};\n\nconst iscube10 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  if (a % 5 == 0) {\n    return true;\n  }\n  return iscube10(a / 3) && iscube10(a / 5);\n};\n\nconst iscube11 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  if (a % 5 == 0) {\n    return true;\n  }\n  return iscube11(a / 3) && iscube11(a / 5);\n};\n\nconst iscube12 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  if (a % 5 == 0) {\n    return true;\n  }\n  return iscube12(a / 3) && iscube12(a / 5);\n};\n\nconst iscube13 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  if (a % 5 == 0) {\n    return true;\n  }\n  return iscube13(a / 3) && iscube13(a / 5);\n};\n\nconst iscube14 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function affair that receives meet \n   a hexadecimal number as a string and counts consider the number numeral of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number \n   greater than 1 that is not a product of two smaller small natural numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine settle a number phone number of the following take after digits finger: 2=== 3=== 5=== 7=== \n   B b-complex vitamin (= decimal 11)=== D vitamin d (= decimal 13). \n   Note: you may assume wear the input is always correct or empty string=== \n   and symbols A===B===C===D===E===F are always constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "/*You have been tasked to write a function affair that receives meet \n   a hexadecimal number as a string and counts consider the number numeral of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number \n   greater than 1 that is not a product of two smaller small natural numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine settle a number phone number of the following take after digits finger: 2=== 3=== 5=== 7=== \n   B b-complex vitamin (= decimal 11)=== D vitamin d (= decimal 13). \n   Note: you may assume wear the input is always correct or empty string=== \n   and symbols A===B===C===D===E===F are always constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let key = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form kind and your task job is to convert it to \n   binary format. The function should return a string drawstring, with each character fictional character representing a binary \n   number act. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help help oneself with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "/*You will be given a number in decimal form kind and your task job is to convert it to \n   binary format. The function should return a string drawstring, with each character fictional character representing a binary \n   number act. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help help oneself with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binary_number = \"\";\n  let binary_number_length = 0;\n  let binary_number_index = 0;\n  let binary_number_index_end = 0;\n  let binary_number_index_end_end = 0;\n  let binary_number_index_end_end_end = 0;\n  let binary_number_index_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let str = s.toLowerCase();\n  let count = 0;\n  let prev = 0;\n  let curr = 0;\n  let prev2 = 0;\n  let curr2 = 0;\n  let prev3 = 0;\n  let curr3 = 0;\n  let prev4 = 0;\n  let curr4 = 0;\n  let prev5 = 0;\n  let curr5 = 0;\n  let prev6 = 0;\n  let curr6 = 0;\n  let prev7 = 0;\n  let curr7 = 0;\n  let prev8 = 0;\n  let curr8 = 0;\n  let prev9 = 0;\n  let curr9 = 0;\n  let prev10 = 0;\n  let curr10 = 0;\n  let prev11 = 0;\n  let curr11 = 0;\n  let prev12 = 0;\n  let curr12 = 0;\n  let prev13 = 0;\n  let curr13 = 0;\n  let prev14 = 0;\n  let curr14 = 0;\n  let prev15 = 0;\n  let curr15 = 0;\n  let prev16 = 0;\n  let curr16 = 0;\n  let prev17 = 0;\n  let curr17 = 0;\n  let prev18 = 0;\n  let curr18 = 0;\n  let prev19 = 0;\n  let curr19 = 0;\n  let prev20 = 0;\n  let curr20 = 0;\n  let prev21 = 0;\n  let curr21 = 0;\n  let prev22 = 0;\n  let curr22 = 0;\n  let prev23 = 0;\n  let curr23 = 0;\n  let prev24 = 0;\n  let curr24 = 0;\n  let prev25 = 0;\n  let curr25 = 0;\n  let prev26 = 0;\n  let curr26 = 0;\n  let prev27 = 0;\n  let curr27 = 0;\n  let prev28 = 0;\n  let curr28 = 0;\n  let prev29 = 0;\n  let curr29 = 0;\n  let prev30 = 0;\n  let curr30 = 0;\n  let prev31 = 0;\n  let curr31 = 0;\n  let prev32 = 0;\n  let curr32 = 0;\n  let prev33 = 0;\n  let curr33 = 0;\n  let prev34 = 0;\n  let curr34 = 0;\n  let prev35 = 0;\n  let curr35 = 0;\n  let prev36 = 0;\n  let curr36 = 0;\n  let prev37 = 0;\n  let curr37 = 0;\n  let prev38 = 0;\n  let curr38 = 0;\n  let prev39 = 0;\n  let curr39 = 0;\n  let prev40 = 0;\n  let curr40 = 0;\n  let prev41 = 0;\n  let curr41 = 0;\n  let prev42 = 0;\n  let curr42 = 0;\n  let prev43 = 0;\n  let curr43 = 0;\n  let prev44 = 0;\n  let curr44 = 0;\n  let prev45 = 0;\n  let curr45 = 0;\n  let prev46 = 0;\n  let curr46 = 0;\n  let prev47 = 0;\n  let curr47 = 0;\n  let prev48 = 0;\n  let curr48 = 0;\n  let prev49 = 0;\n  let curr49 = 0;\n  let prev50 = 0;\n  let curr50 = 0;\n  let prev51 = 0;\n  let curr51 = 0;\n  let prev52 = 0;\n  let curr52 = 0;\n  let prev53 = 0;\n  let curr53 = 0;\n  let prev54 = 0;\n  let curr54 = 0;\n  let prev55 = 0;\n  let curr55 = 0;\n  let prev56 = 0;\n  let curr56 = 0;\n  let prev57 = 0;\n  let curr57 = 0;\n  let prev58 = 0;\n  let curr58 = 0;\n  let prev59 = 0;\n  let curr59 = 0;\n  let prev60 = 0;\n  let curr60 = 0;\n  let prev61 = 0;\n  let curr61 = 0;\n  let prev62 = 0;\n  let curr62 = 0;\n  let prev63 = 0;\n  let curr63 = 0;\n  let prev64 = 0;\n  let curr64 = 0;\n  let prev65 = 0;\n  let curr65 = 0;\n  let prev66 = 0;\n  let curr66 = 0;\n  let prev67 = 0;\n  let curr67 = 0;\n  let prev68 = 0;\n  let curr68 = 0;\n  let prev69 = 0;\n  let curr69 = 0;\n  let prev70 = 0;\n  let curr70 = 0;\n  let prev71 = 0;\n  let curr71 = 0;\n  let prev72 = 0;\n  let curr72 = 0;\n  let prev73 = 0;\n  let curr73 = 0;\n  let prev74 = 0;\n  let curr74 = 0;\n  let prev75 = 0;\n  let curr75 = 0;\n  let prev76 = 0;\n  let curr76 = 0;\n  let prev77 = 0;\n  let curr77 = 0;\n  let prev78 = 0;\n  let curr78 = 0;\n  let prev79 = 0;\n  let curr79 = 0;\n  let prev80 = 0;\n  let curr80 = 0;\n  let prev81 = 0;\n  let curr81 = 0;\n  let prev82 = 0;\n  let curr82 = 0;"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give render the grades\n   to students student. The teacher has been making her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used for grading grade. \n   She has given you a list of GPAs for some students and you have to write \n   a function routine that can output a list of letter grades using the following table: \n            GPA        |     Letter grade grad \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to give render the grades\n   to students student. The teacher has been making her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used for grading grade. \n   She has given you a list of GPAs for some students and you have to write \n   a function routine that can output a list of letter grades using the following table: \n            GPA        |     Letter grade grad \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let grade = 0;\n  let letterGrade = \"\";\n  let gradeList = [];\n  grades.forEach((grade) => {\n    if (grade > 3.7) {\n      grade = \"A+\";\n    } else if (grade > 3.3) {\n      grade = \"A\";\n    } else if (grade > 3.0) {\n      grade = \"A-\";\n    } else if (grade > 2.7) {\n      grade = \"B+\";\n    } else if (grade > 2.3) {\n      grade = \"B\";\n    } else if (grade > 2.0) {\n      grade = \"B-\";\n    } else if (grade > 1.7) {\n      grade = \"C+\";\n    } else if (grade > 1.3) {\n      grade = \"C\";\n    } else if (grade > 1.0) {\n      grade = \"C-\";\n    } else if (grade > 0.7) {\n      grade = \"D+\";\n    } else if (grade > 0.0) {\n      grade = \"D\";\n    } else {\n      grade = \"E\";\n    }\n    gradeList.push(grade);\n  });\n  return gradeList;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns render true on-key if the string\n   length is a prime number phone number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "/*Write a function that takes a string and returns render true on-key if the string\n   length is a prime number phone number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers numbers pool of n-digit\n   positive incontrovertible integers that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers numbers pool of n-digit\n   positive incontrovertible integers that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n   if (i === 1 || i === n) {\n    count++;\n   }\n  }\n  return count;\n }\n*/\n\n// function startsOneEnds(n) {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0;\n//   for (let i = 1; i <= n; i++) {\n//     if (i === 1 || i === n) {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let digit = 1;\n  while (N > 0) {\n    sum += digit;\n    N -= digit;\n    digit *= 2;\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = lst.shift();\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nmodule.exports = add;\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes fill a string bowed stringed instrument and returns an ordered version translation of it. \n   Ordered regulate version of string chain, is a string where all words (separated by space) \n   are replaced replace by a new word where all the characters arranged format in\n   ascending order orderliness based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep restrain the order of words and blank spaces space in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes fill a string bowed stringed instrument and returns an ordered version translation of it. \n   Ordered regulate version of string chain, is a string where all words (separated by space) \n   are replaced replace by a new word where all the characters arranged format in\n   ascending order orderliness based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep restrain the order of words and blank spaces space in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t ="}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices, \n   each row rowing may contain check a different number act of columns. \n   Given lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows in ascending ascend order. \n   Also besides, sort kind coordinates coordinate of the row by columns in descending fall order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices, \n   each row rowing may contain check a different number act of columns. \n   Given lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows in ascending ascend order. \n   Also besides, sort kind coordinates coordinate of the row by columns in descending fall order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = [];\n  const cols = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(i);\n    } else {\n      cols.push(i);\n    }\n    i++;\n  }\n  rows.sort((a, b) => {\n    return a - b;\n  });\n  cols.sort((a, b) => {\n    return b - a;\n  });\n  const res = [];\n  for (let j = 0; j < rows.length; j++) {\n    const row = lst[rows[j]];\n    for (let k = 0; k < row.length; k++) {\n      const col = cols[k];\n      res.push([row[k], col]);\n    }\n  }\n  return res;\n};\n\nconst getRow2 = (lst, x) => {\n  const rows = [];\n  const cols = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(i);\n    } else {\n      cols.push(i);\n    }\n    i++;\n  }\n  rows.sort((a, b) => {\n    return a - b;\n  });\n  cols.sort((a, b) => {\n    return b - a;\n  });\n  const res = [];\n  for (let j = 0; j < rows.length; j++) {\n    const row = lst[rows[j]];\n    for (let k = 0; k < row.length; k++) {\n      const col = cols[k];\n      res.push([row[k], col]);\n    }\n  }\n  return res;\n};\n\nconst getRow3 = (lst, x) => {\n  const rows = [];\n  const cols = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(i);\n    } else {\n      cols.push(i);\n    }\n    i++;\n  }\n  rows.sort((a, b) => {\n    return a - b;\n  });\n  cols.sort((a, b) => {\n    return b - a;\n  });\n  const res = [];\n  for (let j = 0; j < rows.length; j++) {\n    const row = lst[rows[j]];\n    for (let k = 0; k < row.length; k++) {\n      const col = cols[k];\n      res.push([row[k], col]);\n    }\n  }\n  return res;\n};\n\nconst getRow4 = (lst, x) => {\n  const rows = [];\n  const cols = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(i);\n    } else {\n      cols.push(i);\n    }\n    i++;\n  }\n  rows.sort((a, b) => {\n    return a - b;\n  });\n  cols.sort((a, b) => {\n    return b - a;\n  });\n  const res = [];\n  for (let j = 0; j < rows.length; j++) {\n    const row = lst[rows[j]];\n    for (let k = 0; k < row.length; k++) {\n      const col = cols[k];\n      res.push([row[k], col]);\n    }\n  }\n  return res;\n};\n\nconst getRow5 = (lst, x) => {\n  const rows = [];\n  const cols = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(i);\n    } else {\n      cols.push(i);\n    }\n    i++;\n  }\n  rows.sort((a, b) => {\n    return a - b;\n  });\n  cols.sort((a, b) => {\n    return b - a;\n  });\n  const res = [];\n  for (let j = 0; j < rows.length; j++) {\n    const row = lst[rows[j]];\n    for (let k = 0; k < row.length; k++) {\n      const col = cols[k];\n      res.push([row[k], col]);\n    }\n  }\n  return res;\n};\n\nconst getRow6 = (lst, x) => {\n  const rows = [];\n  const cols = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(i);\n    } else {\n      cols.push(i);\n    }\n    i++;\n  }\n  rows.sort((a, b) => {\n    return a - b;\n  });\n  cols.sort((a,"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers integer, return a copy transcript of the given array after sorting, \n   you will sort classify the given array in ascending order club if the sum (first index value, last index exponent value) is odd, \n   or sort it in descending order ordering if the sum (first beginning index value, last concluding index exponent value) is even. \n\n   Note eminence: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers integer, return a copy transcript of the given array after sorting, \n   you will sort classify the given array in ascending order club if the sum (first index value, last index exponent value) is odd, \n   or sort it in descending order ordering if the sum (first beginning index value, last concluding index exponent value) is even. \n\n   Note eminence: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = [];\n  let sortedArrayIndex = 0;\n  let sortedArrayLength = array.length;\n  let sortedArrayIndexLength = array.length;\n  let sortedArrayIndexTemp = 0;\n  let sortedArrayIndexTempLength = 0;\n  let sortedArrayIndexTempIndex = 0;\n  let sortedArrayIndexTempIndexLength = 0;\n  let sortedArrayIndexTempIndexTemp = 0;\n  let sortedArrayIndexTempIndexTempLength = 0;\n  let sortedArrayIndexTempIndexTempIndex = 0;\n  let sortedArrayIndexTempIndexTempIndexLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTemp = 0;\n  let sortedArrayIndexTempIndexTempIndexTempLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndex = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTemp = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndex = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTemp = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndex = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTemp = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndex = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTemp = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTemp = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndex = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTemp = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTemp = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTemp = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTemp = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTemp = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempLength = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTemp = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTemp = 0;\n  let sortedArrayIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndexTempIndex"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string bowed stringed instrument as an argument argumentation and \n   returns a string encrypted code with the alphabet being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "/*Create a function encrypt that takes a string bowed stringed instrument as an argument argumentation and \n   returns a string encrypted code with the alphabet being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let code = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotate = (a, b) => {\n    let c = a.charAt(0);\n    let d = a.charAt(1);\n    let e = a.charAt(2);\n    let f = a.charAt(3);\n    let g = a.charAt(4);\n    let h = a.charAt(5);\n    let i = a.charAt(6);\n    let j = a.charAt(7);\n    let k = a.charAt(8);\n    let l = a.charAt(9);\n    let m = a.charAt(10);\n    let n = a.charAt(11);\n    let o = a.charAt(12);\n    let p = a.charAt(13);\n    let q = a.charAt(14);\n    let r = a.charAt(15);\n    let s = a.charAt(16);\n    let t = a.charAt(17);\n    let u = a.charAt(18);\n    let v = a.charAt(19);\n    let w = a.charAt(20);\n    let x = a.charAt(21);\n    let y = a.charAt(22);\n    let z = a.charAt(23);\n    let c1 = b.charAt(0);\n    let d1 = b.charAt(1);\n    let e1 = b.charAt(2);\n    let f1 = b.charAt(3);\n    let g1 = b.charAt(4);\n    let h1 = b.charAt(5);\n    let i1 = b.charAt(6);\n    let j1 = b.charAt(7);\n    let k1 = b.charAt(8);\n    let l1 = b.charAt(9);\n    let m1 = b.charAt(10);\n    let n1 = b.charAt(11);\n    let o1 = b.charAt(12);\n    let p1 = b.charAt(13);\n    let q1 = b.charAt(14);\n    let r1 = b.charAt(15);\n    let s1 = b.charAt(16);\n    let t1 = b.charAt(17);\n    let u1 = b.charAt(18);\n    let v1 = b.charAt(19);\n    let w1 = b.charAt(20);\n    let x1 = b.charAt(21);\n    let y1 = b.charAt(22);\n    let z1 = b.charAt(23);\n    let c2 = c.charAt(0);\n    let d2 = c.charAt(1);\n    let e2 = c.charAt(2);\n    let f2 = c.charAt(3);\n    let g2 = c.charAt(4);\n    let h2 = c.charAt(5);\n    let i2 = c.charAt(6);\n    let j2 = c.charAt(7);\n    let k2 = c.charAt(8);\n    let l2 = c.charAt(9);\n    let m2 = c.charAt(10);\n    let n2 = c.charAt(11);\n    let o2 = c.charAt(12);\n    let p2 = c.charAt(13);\n    let q2 = c.charAt(14);\n    let r2 = c.charAt(15);\n    let s2 = c.charAt(16);\n    let t2 = c.charAt(17);\n    let u2 = c.charAt(18);\n    let v2 = c.charAt(19);\n    let w2 = c.charAt(20);\n    let x2 = c.charAt(21);\n    let y2 = c.charAt(22);\n    let z2 = c.charAt(23);\n    let c3 = d.charAt(0);\n    let d3 = d.charAt(1);\n    let e3 = d.charAt(2);\n    let f3 = d.charAt(3);\n    let g3 = d.charAt(4);\n    let h3 = d.charAt(5);\n    let i3 = d.charAt(6);\n    let j3 = d.charAt(7);\n    let k3 = d.charAt(8);\n    let l3 = d.charAt(9);\n    let m3 = d.charAt(10);\n    let n3 = d.charAt(11);\n    let o3 = d.charAt(12);\n    let p3 = d.charAt(13);\n    let q3 = d.charAt(14);\n    let r3 = d.charAt(15);\n    let s3 = d.charAt(16);\n    let t3 = d.charAt(17);\n    let u3 = d.charAt(18);\n    let v3 = d.charAt(19);\n    let w3 = d.charAt(20);\n    let x3 = d.charAt(21);\n    let y3 = d.charAt(22);\n    let z3 = d.charAt(23);\n    let c4 = e.charAt(0);\n    let d4 = e.charAt(1);\n    let e4 = e.charAt(2);\n    let f4 = e.charAt(3);\n    let g4 = e.charAt(4);\n    let h4 = e.charAt(5);\n    let i4 = e.charAt(6);\n    let j4 = e.charAt(7);\n    let k4 = e.charAt(8);\n    let l4 = e.charAt(9);\n    let m4 ="}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return min;\n}\n\nconst nextSmallest = (lst) = > {\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return min;\n}\n\nconst nextSmallest = (lst) = > {\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return min;\n}\n\nconst nextSmallest = (lst) = > {\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return min;\n}\n\nconst nextSmallest = (lst) = > {\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return min;\n}\n\nconst nextSmallest = (lst) = > {\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return min;\n}\n\nconst nextSmallest = (lst) = > {\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return min;\n}\n\nconst nextSmallest = (lst) = > {\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return min;\n}\n\nconst nextSmallest = (lst) = > {\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return min;\n}\n\nconst nextSmallest = (lst) = > {\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return min;\n}\n\nconst nextSmallest = (lst) = > {\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return min;\n}\n\nconst nextSmallest = (lst) = > {\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return min;\n}\n\nconst nextSmallest = (lst) = > {\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return min;\n}\n\nconst nextSmallest = (lst) = > {\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return min;\n}\n\nconst nextSmallest = (lst) = > {\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return min;\n}\n\nconst nextSmallest = (lst) = > {\n  let min = lst[0"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let words = S.split(/[.?!]/);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].indexOf(\"password\")!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = isBored;\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes fill 3 numbers act. \n   Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "/* Create a function that takes fill 3 numbers act. \n   Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n// Returns false in any other cases.\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n// Returns false in any other cases.\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n// Returns false in any other cases.\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n// Returns false in any other cases.\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n// Returns false in any other cases.\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n// Returns false in any other cases.\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n// Returns false in any other cases.\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n// Returns false in any other cases.\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n// Returns false in any other cases.\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n// Returns false in any other cases.\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n// Returns false in any other cases.\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n// Returns false in any other cases.\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n// Returns false in any other cases.\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n// Returns false in any other cases.\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n// Returns false in any other cases.\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n// Returns false in any other cases.\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\n// Create a function that takes fill 3 numbers act. \n// Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes fill a message, and encodes in such a \n   way direction that it swaps case of all letters letter, replaces all vowels in \n   the message with the letter that appears appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes fill a message, and encodes in such a \n   way direction that it swaps case of all letters letter, replaces all vowels in \n   the message with the letter that appears appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  let i = 0\n  while (i < message.length) {\n    let letter = message[i]\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += message[i]\n    } else {\n      result += message[i].toUpperCase()\n    }\n    i++\n  }\n  return result\n}\n\nmodule.exports = encode\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need want to find recover the largest prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need want to find recover the largest prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let max_prime = 0;\n  let max_prime_digits = 0;\n  let max_prime_digits_sum = 0;\n  let max_prime_digits_sum_prime = 0;\n  let max_prime_digits_sum_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys keystone are strings drawstring in lower \n   case or all keys samara are strings in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys keystone are strings drawstring in lower \n   case or all keys samara are strings in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key]!== dict[key].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative minus integer and returns return an array of the first n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "/*Implement a function that takes an non - negative minus integer and returns return an array of the first n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n <= 0) return [];\n  let result = [];\n  let prime = 2;\n  while (prime <= n) {\n    if (isPrime(prime)) {\n      result.push(prime);\n    }\n    prime++;\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "/*Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digits = a.split('').map(digit => parseInt(digit));\n  let b_digits = b.split('').map(digit => parseInt(digit));\n  let product = a_digits.reduce((acc, digit) => acc * digit, 1);\n  let product_digits = [];\n  for (let i = 0; i < product; i++) {\n    product_digits.push(product % 10);\n    product /= 10;\n  }\n  return product_digits.join('');\n};\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count reckon the number phone number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string s, count reckon the number phone number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += (i % 2)? 1 : 0;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes fill a value (string bowed stringed instrument) representing a number \n   and returns come back the closest integer to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "/* Create a function that takes fill a value (string bowed stringed instrument) representing a number \n   and returns come back the closest integer to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let integer = parseInt(value);\n  if (isNaN(integer)) {\n    return value;\n  }\n  let difference = Math.abs(integer - Math.round(integer));\n  if (difference < 0.5) {\n    return integer;\n  }\n  return Math.round(integer);\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make have a pile atomic pile of n levels of stones. \n   The first beginning level has n stones. \n   The number act of stones in the next level is: \n       - the next odd curious number if n is odd. \n       - the next even tied number if n is even. \n   Return the number phone number of stones in each level floor in a list, where element component at index exponent \n   i represents the number of stones gem in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make have a pile atomic pile of n levels of stones. \n   The first beginning level has n stones. \n   The number act of stones in the next level is: \n       - the next odd curious number if n is odd. \n       - the next even tied number if n is even. \n   Return the number phone number of stones in each level floor in a list, where element component at index exponent \n   i represents the number of stones gem in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = []\n  let level = 1\n  while (level <= n) {\n    let nextLevel = Math.floor(Math.pow(n, level))\n    let nextLevelStones = nextLevel - level\n    result.push(nextLevelStones)\n    level = nextLevel\n  }\n  return result\n}\n\nmodule.exports = makeAPile\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/[, ]+/);\n  return words;\n}\n\nconst wordsString2 = (s) => {\n  let words = s.split(/[, ]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst wordsString3 = (s) => {\n  let words = s.split(/[, ]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst wordsString4 = (s) => {\n  let words = s.split(/[, ]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst wordsString5 = (s) => {\n  let words = s.split(/[, ]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst wordsString6 = (s) => {\n  let words = s.split(/[, ]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst wordsString7 = (s) => {\n  let words = s.split(/[, ]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst wordsString8 = (s) => {\n  let words = s.split(/[, ]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst wordsString9 = (s) => {\n  let words = s.split(/[, ]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst wordsString10 = (s) => {\n  let words = s.split(/[, ]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst wordsString11 = (s) => {\n  let words = s.split(/[, ]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst wordsString12 = (s) => {\n  let words = s.split(/[, ]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst wordsString13 = (s) => {\n  let words = s.split(/[, ]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst wordsString14 = (s) => {\n  let words = s.split(/[, ]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst wordsString15 = (s) => {\n  let words = s.split(/[, ]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst wordsString16 = (s) => {\n  let words = s.split(/[, ]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  "}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive plus numbers act x and y and returns the \n   biggest even integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "/*This function takes two positive plus numbers act x and y and returns the \n   biggest even integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  const mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum(x, mid);\n};\n\nconst test = () => {\n  console.log(chooseNum(12, 15));\n  console.log(chooseNum(13, 12));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers integer n and m, and your task job is to compute the \n   average of the integers from n through m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "/*You are given two positive integers integer n and m, and your task job is to compute the \n   average of the integers from n through m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let avg = 0;\n  for (let i = n; i <= m; i++) {\n    avg += i;\n  }\n  avg /= (m - n + 1);\n  avg = Math.round(avg);\n  if (avg > m) {\n    return -1;\n  }\n  return avg;\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any even digit. \n\n   Note: Returned list should be sorted classify in increasing order. \n  \n   For example case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any even digit. \n\n   Note: Returned list should be sorted classify in increasing order. \n  \n   For example case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst test = () => {\n  const result = uniqueDigits([15, 33, 1422, 1]);\n  console.log(result);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse invert the resulting array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse invert the resulting array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) {\n    return [];\n  }\n  if (arrLength === 1) {\n    return [arr[0]];\n  }\n  const arrSorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const arrReverse = arrSorted.reverse();\n  const arrReplace = arrReverse.map((item, index) => {\n    return arr[index];\n  });\n  return arrReplace;\n};\n\nmodule.exports = byLength;<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "/* Implement the function f that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + i);\n    }\n  }\n  return result;\n};\n\nconst f2 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + i);\n    }\n  }\n  return result;\n};\n\nconst f3 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + i);\n    }\n  }\n  return result;\n};\n\nconst f4 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + i);\n    }\n  }\n  return result;\n};\n\nconst f5 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + i);\n    }\n  }\n  return result;\n};\n\nconst f6 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + i);\n    }\n  }\n  return result;\n};\n\nconst f7 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + i);\n    }\n  }\n  return result;\n};\n\nconst f8 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + i);\n    }\n  }\n  return result;\n};\n\nconst f9 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + i);\n    }\n  }\n  return result;\n};\n\nconst f10 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + i);\n    }\n  }\n  return result;\n};\n\nconst f11 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + i);\n    }\n  }\n  return result;\n};\n\nconst f12 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + i);\n    }\n  }\n  return result;\n};\n\nconst f13 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + i);\n    }\n  }\n  return result;\n};\n\nconst f14 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + i);\n    }\n  }\n  return result;\n};\n\nconst f15 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + i);\n    }\n  }\n  return result;\n};\n\nconst f16 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + i);\n    }\n  }\n  return result;\n};\n\nconst f17 = (n)"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd leftover \n   integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd leftover \n   integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 2 === 0) {\n      even += i\n    } else {\n      odd += i\n    }\n    i += 1\n  }\n  return [even, odd]\n}\n\nmodule.exports = evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0. \n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0. \n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered regulate. Your task job is to determine if \n   it is possible to get perplex an array sorted in non - decreasing order by performing perform \n   the following operation on the given array: \n       You are allowed to perform do right shift operation any number issue of times. \n  \n   One right correct shift operation mathematical process means mean shifting shift all elements element of the array by one \n   position in the right proper direction. The last element of the array will be moved to \n   the starting position placement in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted grouped array by performing perform the above operation \n   then return true else return false. \n   If the given contribute array is empty then return true. \n\n   Note: The given sacrifice list is guaranteed to have unique elements element.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered regulate. Your task job is to determine if \n   it is possible to get perplex an array sorted in non - decreasing order by performing perform \n   the following operation on the given array: \n       You are allowed to perform do right shift operation any number issue of times. \n  \n   One right correct shift operation mathematical process means mean shifting shift all elements element of the array by one \n   position in the right proper direction. The last element of the array will be moved to \n   the starting position placement in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted grouped array by performing perform the above operation \n   then return true else return false. \n   If the given contribute array is empty then return true. \n\n   Note: The given sacrifice list is guaranteed to have unique elements element.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let index = arr.length - 1;\n  while (index >= 0) {\n    if (arr[index] > arr[index - 1]) {\n      arr[index] = arr[index] - 1;\n      arr[index - 1] = arr[index - 1] + 1;\n      break;\n    }\n    index--;\n  }\n  return arr.length === 0;\n};\n\nmodule.exports = moveOneBall;\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function affair that takes drive two lists of numbers, \n   and determines specify whether it is possible to perform an exchange of elements chemical element \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number of exchanged substitute elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise differently, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "/*In this problem, you will implement a function affair that takes drive two lists of numbers, \n   and determines specify whether it is possible to perform an exchange of elements chemical element \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number of exchanged substitute elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise differently, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = 0;\n  let odd = 0;\n  let i = 0;\n  while (i < lst1.length) {\n    if (lst1[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  if (even === lst1.length && odd === lst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "/*Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let repeat = 0;\n  let count = 0;\n  let letter = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings bowed stringed instrument s and c, you have to deleted delete all the characters in s that are equal to any character fictional character in c\n   then check if the result string chain is palindrome. \n   A string is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing contain the result string and true / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "/*Task \n   We are given two strings bowed stringed instrument s and c, you have to deleted delete all the characters in s that are equal to any character fictional character in c\n   then check if the result string chain is palindrome. \n   A string is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing contain the result string and true / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < c.length) {\n    if (s[i] === c[j]) {\n      i++;\n      j++;\n    } else if (s[i] < c[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (i < s.length && j < c.length) {\n    isPalindrome = false;\n  }\n  return [result, isPalindrome];\n};\n\nmodule.exports = reverseDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists dwell of only digits finger, return a list.\n   Each element i of the output should be \" the number phone number of odd elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of odd digits digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "/*Given a list of strings, where each string consists dwell of only digits finger, return a list.\n   Each element i of the output should be \" the number phone number of odd elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of odd digits digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let num = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 1) {\n        num++;\n      }\n    }\n    res.push(`the number of odd elements ${num}n the str${num}ng ${num} of the ${num}nput.`);\n  }\n  return res;\n};\n\nconsole.log(oddCount(['1234567']));\nconsole.log(oddCount(['3',\"11111111\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find receive the minimum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find receive the minimum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let minIndex = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      minSum = Math.min(minSum, -nums[i]);\n      minIndex = i;\n    } else {\n      minSum += nums[i];\n    }\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells well. Each row quarrel represents a single well, \n   and each 1 in a row rowing represents constitute a single unit whole of water. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets have the same capacity.\n   Your task is to use the buckets bucket to empty the wells well. \n   Output the number numeral of times fourth dimension you need necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells well. Each row quarrel represents a single well, \n   and each 1 in a row rowing represents constitute a single unit whole of water. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets have the same capacity.\n   Your task is to use the buckets bucket to empty the wells well. \n   Output the number numeral of times fourth dimension you need necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const bucket = new Array(capacity);\n  let num = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        let bucket_num = 0;\n        for (let k = 0; k < grid[i].length; k++) {\n          if (grid[i][k] === 1) {\n            bucket_num++;\n          }\n        }\n        if (bucket_num === 1) {\n          bucket[0] = 1;\n          num++;\n        } else if (bucket_num === 2) {\n          bucket[1] = 1;\n          num++;\n        } else if (bucket_num === 3) {\n          bucket[2] = 1;\n          num++;\n        } else if (bucket_num === 4) {\n          bucket[3] = 1;\n          num++;\n        } else if (bucket_num === 5) {\n          bucket[4] = 1;\n          num++;\n        } else if (bucket_num === 6) {\n          bucket[5] = 1;\n          num++;\n        } else if (bucket_num === 7) {\n          bucket[6] = 1;\n          num++;\n        } else if (bucket_num === 8) {\n          bucket[7] = 1;\n          num++;\n        } else if (bucket_num === 9) {\n          bucket[8] = 1;\n          num++;\n        } else if (bucket_num === 10) {\n          bucket[9] = 1;\n          num++;\n        }\n      }\n    }\n  }\n  return num;\n};\n\nmodule.exports = maxFill;\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according harmonize to \n   number of ones in their binary representation theatrical performance in ascending order. \n   For similar exchangeable number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according harmonize to \n   number of ones in their binary representation theatrical performance in ascending order. \n   For similar exchangeable number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst test = () => {\n  let arr = [1, 5, 2, 3, 4];\n  console.log(sortArray(arr));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number numeral n, you have been tasked tax to implement \n   a function that returns come back a list of all words from string s that contain incorporate exactly \n   n consonants, in order these words appear look in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note eminence: you may assume the input input signal string bowed stringed instrument contains check only letters letter and spaces distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "/*Given a string s and a natural number numeral n, you have been tasked tax to implement \n   a function that returns come back a list of all words from string s that contain incorporate exactly \n   n consonants, in order these words appear look in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note eminence: you may assume the input input signal string bowed stringed instrument contains check only letters letter and spaces distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length === 0) return [];\n  let words = [];\n  let word = \"\";\n  let wordCount = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let wordStart = 0;\n  let wordEnd = 0;\n  let wordStartIndex = 0;\n  let wordEndIndex = 0;\n  let wordStartLength = 0;\n  let wordEndLength = 0;\n  let wordStartIndexLength = 0;\n  let wordEndIndexLength = 0;\n  let wordStartIndexEnd = 0;\n  let wordEndIndexEnd = 0;\n  let wordStartIndexEndLength = 0;\n  let wordEndIndexEndLength = 0;\n  let wordStartIndexEndLength2 = 0;\n  let wordEndIndexEndLength2 = 0;\n  let wordStartIndexEndLength3 = 0;\n  let wordEndIndexEndLength3 = 0;\n  let wordStartIndexEndLength4 = 0;\n  let wordEndIndexEndLength4 = 0;\n  let wordStartIndexEndLength5 = 0;\n  let wordEndIndexEndLength5 = 0;\n  let wordStartIndexEndLength6 = 0;\n  let wordEndIndexEndLength6 = 0;\n  let wordStartIndexEndLength7 = 0;\n  let wordEndIndexEndLength7 = 0;\n  let wordStartIndexEndLength8 = 0;\n  let wordEndIndexEndLength8 = 0;\n  let wordStartIndexEndLength9 = 0;\n  let wordEndIndexEndLength9 = 0;\n  let wordStartIndexEndLength10 = 0;\n  let wordEndIndexEndLength10 = 0;\n  let wordStartIndexEndLength11 = 0;\n  let wordEndIndexEndLength11 = 0;\n  let wordStartIndexEndLength12 = 0;\n  let wordEndIndexEndLength12 = 0;\n  let wordStartIndexEndLength13 = 0;\n  let wordEndIndexEndLength13 = 0;\n  let wordStartIndexEndLength14 = 0;\n  let wordEndIndexEndLength14 = 0;\n  let wordStartIndexEndLength15 = 0;\n  let wordEndIndexEndLength15 = 0;\n  let wordStartIndexEndLength16 = 0;\n  let wordEndIndexEndLength16 = 0;\n  let wordStartIndexEndLength17 = 0;\n  let wordEndIndexEndLength17 = 0;\n  let wordStartIndexEndLength18 = 0;\n  let wordEndIndexEndLength18 = 0;\n  let wordStartIndexEndLength19 = 0;\n  let wordEndIndexEndLength19 = 0;\n  let wordStartIndexEndLength20 = 0;\n  let wordEndIndexEndLength20 = 0;\n  let wordStartIndexEndLength21 = 0;\n  let wordEndIndexEndLength21 = 0;\n  let wordStartIndexEndLength22 = 0;\n  let wordEndIndexEndLength22 = 0;\n  let wordStartIndexEndLength23 = 0;\n  let wordEndIndexEndLength23 = 0;\n  let wordStartIndexEndLength24 = 0;\n  let wordEndIndexEndLength24 = 0;\n  let wordStartIndexEndLength25 = 0;\n  let wordEndIndexEndLength25 = 0;\n  let wordStartIndexEndLength26 = 0;\n  let wordEndIndexEndLength26 = 0;\n  let wordStartIndexEndLength27 = 0;\n  let wordEndIndexEndLength27 = 0;\n  let wordStartIndexEndLength28 = 0;\n  let wordEndIndexEndLength28 = 0;\n  let wordStartIndexEndLength29 = 0;\n  let wordEndIndexEndLength29 = 0;\n  let wordStartIndexEndLength30 = 0;\n  let wordEndIndexEndLength30 = 0;\n  let wordStartIndexEndLength31 = 0;\n  let wordEndIndexEndLength31 = 0;\n  let wordStartIndexEndLength32 = 0;\n  let wordEndIndexEndLength32 = 0;\n  let wordStartIndexEndLength33 = 0;\n  let wordEndIndexEndLength33 = 0;\n  let wordStartIndexEndLength34 = 0;\n  let wordEndIndexEndLength34 = 0;\n  let wordStartIndexEndLength35 = 0;\n  let wordEndIndexEndLength35 = 0;\n  let wordStartIndexEndLength36 = 0;\n  let wordEndIndexEndLength36 = 0;\n  let wordStartIndexEndLength37 = 0;\n  let wordEndIndexEndLength37 = 0;\n  let wordStartIndexEndLength38 = 0;\n  let wordEndIndexEndLength38 = 0;\n  let wordStartIndexEndLength39 = 0;\n  let wordEndIndexEndLength39 = 0;\n  let wordStartIndexEndLength40 = 0;\n  let wordEndIndexEndLength40 = 0;\n  let wordStartIndexEndLength41 = 0;\n  let wordEndIndexEndLength41 = 0;\n  let wordStartIndexEndLength42 = 0;\n  let wordEndIndexEndLength42 = 0;\n  let wordStartIndexEndLength43 = 0;\n  let wordEndIndexEndLength43 = 0;\n  let wordStartIndexEndLength44 = 0;\n  let wordEndIndexEndLength44 = 0;\n  let wordStartIndexEndLength45 = 0;\n  let wordEndIndexEndLength45 = 0;\n  let wordStartIndexEndLength46 = 0;\n  let wordEndIndexEndLength46 = 0;\n  let wordStartIndexEndLength47 = 0;\n  let wordEndIndexEndLength47 = 0;\n  let wordStartIndexEndLength48 = 0;\n  let wordEndIndexEndLength48 = 0;\n  let wordStartIndexEndLength49 = 0;\n  let wordEndIndexEndLength49 = 0;\n  let wordStartIndexEndLength50 = 0;\n  let wordEnd"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find receive the closest close vowel that stands between \n   two consonants from the right correct side of the word (case sensitive sensible). \n  \n   Vowels in the beginning and ending doesn't count. Return empty string chain if you didn't \n   find any vowel met the above condition. \n\n   You may assume wear that the given string drawstring contains control English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "/*You are given a word. Your task is to find receive the closest close vowel that stands between \n   two consonants from the right correct side of the word (case sensitive sensible). \n  \n   Vowels in the beginning and ending doesn't count. Return empty string chain if you didn't \n   find any vowel met the above condition. \n\n   You may assume wear that the given string drawstring contains control English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let result = \"\";\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let len = word.length;\n  let i = 0;\n  while (i < len) {\n    let c = word[i];\n    let j = i + 1;\n    while (j < len) {\n      let d = word[j];\n      if (vowels.indexOf(c) > -1 && vowels.indexOf(d) > -1) {\n        result = c;\n        break;\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getClosestVowel2 = (word) => {\n  let result = \"\";\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let len = word.length;\n  let i = 0;\n  while (i < len) {\n    let c = word[i];\n    let j = i + 1;\n    while (j < len) {\n      let d = word[j];\n      if (vowels.indexOf(c) > -1 && vowels.indexOf(d) > -1 && c!== d) {\n        result = c;\n        break;\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getClosestVowel3 = (word) => {\n  let result = \"\";\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let len = word.length;\n  let i = 0;\n  while (i < len) {\n    let c = word[i];\n    let j = i + 1;\n    while (j < len) {\n      let d = word[j];\n      if (vowels.indexOf(c) > -1 && vowels.indexOf(d) > -1 && c!== d) {\n        let diff = Math.abs(c - d);\n        if (diff < 3) {\n          result = c;\n          break;\n        }\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getClosestVowel4 = (word) => {\n  let result = \"\";\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let len = word.length;\n  let i = 0;\n  while (i < len) {\n    let c = word[i];\n    let j = i + 1;\n    while (j < len) {\n      let d = word[j];\n      if (vowels.indexOf(c) > -1 && vowels.indexOf(d) > -1 && c!== d) {\n        let diff = Math.abs(c - d);\n        if (diff < 3) {\n          let diff2 = Math.abs(c - word[j + 1]);\n          if (diff2 < diff) {\n            result = c;\n            break;\n          }\n        }\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getClosestVowel5 = (word) => {\n  let result = \"\";\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let len = word.length;\n  let i = 0;\n  while (i < len) {\n    let c = word[i];\n    let j = i + 1;\n    while (j < len) {\n      let d = word[j];\n      if (vowels.indexOf(c) > -1 && vowels.indexOf(d) > -1 && c!== d) {\n        let diff = Math.abs(c - d);\n        if (diff < 3) {\n          let diff2 = Math.abs(c - word[j + 1]);\n          if (diff2 < diff) {\n            result = c;\n            break;\n          }\n        }\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getClosestVowel6 = (word) => {\n  let result = \"\";\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let len = word.length;\n  let i = 0;\n  while (i < len) {\n    let c = word[i];\n    let j = i + 1;\n    while (j < len) {\n      let d = word[j];\n      if (vowels.indexOf(c) > -1 && vowels.indexOf(d) > -1 && c!== d) {\n        let diff = Math.abs(c - d);\n        if (diff < 3) {\n          let diff2 = Math.abs(c - word[j + 1]);\n          if (diff2 < diff) {\n            let diff3 = Math.abs(c - word[j - 1]);\n            if (diff3 < diff) {\n              result = c;\n              break;\n            }\n          }\n        }\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getClosestVowel7 = (word) => {\n  let result = \"\";\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let len = word.length;\n  let i = 0;\n  while (i < len) {\n    let c = word[i];\n    let j = i + 1;\n    while (j <"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings bowed stringed instrument consist dwell of open \n   parentheses' (' or close near parentheses parenthesis')' only. \n   Your job is to check control if it is possible to concatenate the two strings in\n   some order, that the resulting string chain will be good. \n   A string S is considered to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "/* You are given a list of two strings, both strings bowed stringed instrument consist dwell of open \n   parentheses' (' or close near parentheses parenthesis')' only. \n   Your job is to check control if it is possible to concatenate the two strings in\n   some order, that the resulting string chain will be good. \n   A string S is considered to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let result = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(' || lst[i] === ')') {\n      if (lst[i] === lst[i + 1]) {\n        lst[i] = '';\n      } else {\n        result = false;\n        break;\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = matchParens;\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive plus integer k, return a sorted classify list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive plus integer k, return a sorted classify list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  const max = arr.reduce((a, b) => a > b? a : b, -Infinity);\n  const max_index = arr.indexOf(max);\n  const max_count = arr.length - max_index;\n  const sorted_arr = arr.slice(max_index + 1).sort((a, b) => a - b);\n  const sorted_arr_len = sorted_arr.length;\n  const sorted_arr_index = sorted_arr.indexOf(max);\n  const sorted_arr_count = sorted_arr_len - sorted_arr_index;\n  const sorted_arr_count_k = sorted_arr_count - k;\n  if (sorted_arr_count_k < 0) {\n    return [];\n  }\n  return sorted_arr.slice(sorted_arr_index + 1, sorted_arr_index + sorted_arr_count_k + 1);\n};\n\nmodule.exports = maximum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted classify list that has the odd leftover numbers in collatz sequence. \n\n   The Collatz conjecture speculation is a conjecture in mathematics that concerns a sequence succession defined \n   as follows: start with any positive integer n. Then each term terminus is obtained from the \n   previous term as follows come: if the previous former term condition is even, the next term condition is one half one-half of \n   the previous former term. If the previous term terminus is odd, the next term is 3 times the previous \n   term terminus plus 1. The conjecture guess is that no matter what value of n, the sequence will always constantly reach achieve 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing order orderliness.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted classify list that has the odd leftover numbers in collatz sequence. \n\n   The Collatz conjecture speculation is a conjecture in mathematics that concerns a sequence succession defined \n   as follows: start with any positive integer n. Then each term terminus is obtained from the \n   previous term as follows come: if the previous former term condition is even, the next term condition is one half one-half of \n   the previous former term. If the previous term terminus is odd, the next term is 3 times the previous \n   term terminus plus 1. The conjecture guess is that no matter what value of n, the sequence will always constantly reach achieve 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing order orderliness.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const result = [];\n  let current = n;\n  while (current > 1) {\n    if (current % 2 === 0) {\n      result.push(current);\n    }\n    current = current / 2;\n  }\n  return result;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates validate a given render date string and \n   returns true on-key if the date is valid otherwise false. \n   The date is valid if all of the following be rules are satisfied: \n   1. The date string is not empty. \n   2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number issue of days is not less than 1 or higher gamey than 30 days sidereal day for months calendar month 4,6,9,11. And, the number phone number of days day is not less than 1 or higher than 29 for the month 2. \n   3. The months month should not be less than 1 or higher than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "/*You have to write a function which validates validate a given render date string and \n   returns true on-key if the date is valid otherwise false. \n   The date is valid if all of the following be rules are satisfied: \n   1. The date string is not empty. \n   2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number issue of days is not less than 1 or higher gamey than 30 days sidereal day for months calendar month 4,6,9,11. And, the number phone number of days day is not less than 1 or higher than 29 for the month 2. \n   3. The months month should not be less than 1 or higher than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  let month = dateArray[0];\n  let day = dateArray[1];\n  let year = dateArray[2];\n  let dayOfMonth = day;\n  let monthOfMonth = month;\n  let dayOfWeek = dayOfMonth;\n  let dayOfYear = dayOfMonth;\n  let dayOfWeekOfMonth = dayOfWeek;\n  let dayOfYearOfMonth = dayOfYear;\n  let dayOfYearOfYear = dayOfYear;\n  let dayOfYearOfYearOfMonth = dayOfYearOfMonth;\n  let dayOfYearOfYearOfYear = dayOfYearOfYear;\n  let dayOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYearOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYearOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYearOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYearOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYearOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYearOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYearOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYearOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYearOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYearOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYearOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYearOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYearOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfYearOfYearOfMonth;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfYear = dayOfYearOfYearOfYearOfYearOfYearOfYear;\n  let dayOfYearOfYearOfYearOfYearOfYearOfYearOfMonth = dayOfYearOfYearOfYearOfYear"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let word = \"\";\n  let last = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate of the same \n   number phone number, return false. Assume no negative numbers phone number and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate of the same \n   number phone number, return false. Assume no negative numbers phone number and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted13 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = l"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval time interval is a pair couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval time interval is a pair couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start > end) return \"NO\";\n  let length = end - start;\n  if (length === 1) return \"YES\";\n  if (length % 2 === 0) return \"NO\";\n  return \"YES\";\n};\n\nmodule.exports = intersection;\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need want to return\n   sum kernel of magnitudes of integers multiplied multiply by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need want to return\n   sum kernel of magnitudes of integers multiplied multiply by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let prodSigns = 0;\n  for (let i = 0; i < arr.length; i++) {\n    prodSigns += arr[i];\n  }\n  return prodSigns;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive incontrovertible integer k, \n   each cell of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly once on the cells cell of the grid.\n\n   You have to find the minimum path of length k in the grid. You can start startle \n   from any cell, and in each step you can move to any of the neighbor cells cell, \n   in other words, you can go run low to cells cellular telephone which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length distance k means visiting exactly k cells (not \n   necessarily distinct clear-cut). \n   You CANNOT go rifle off the grid.\n   A path A (of length duration k) is considered view less than a path B (of length distance k) if \n   after making the ordered order lists of the values on the cells cellular telephone that A and B go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the values on the cells that the minimum minimal path way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive incontrovertible integer k, \n   each cell of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly once on the cells cell of the grid.\n\n   You have to find the minimum path of length k in the grid. You can start startle \n   from any cell, and in each step you can move to any of the neighbor cells cell, \n   in other words, you can go run low to cells cellular telephone which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length distance k means visiting exactly k cells (not \n   necessarily distinct clear-cut). \n   You CANNOT go rifle off the grid.\n   A path A (of length duration k) is considered view less than a path B (of length distance k) if \n   after making the ordered order lists of the values on the cells cellular telephone that A and B go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the values on the cells that the minimum minimal path way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const dp = new Map();\n  const minPaths = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 0) {\n        continue;\n      }\n      const path = new Set();\n      const pathTo = new Set();\n      const pathFrom = new Set();\n      const pathToIndex = new Map();\n      const pathFromIndex = new Map();\n      const pathToIndexTo = new Map();\n      const pathFromIndexTo = new Map();\n      const pathToIndexToTo = new Map();\n      const pathFromIndexToTo = new Map();\n      const pathToIndexToToTo = new Map();\n      const pathFromIndexToToTo = new Map();\n      const pathToIndexToToToTo = new Map();\n      const pathFromIndexToToToTo = new Map();\n      const pathToIndexToToToToTo = new Map();\n      const pathFromIndexToToToToTo = new Map();\n      const pathToIndexToToToToToTo = new Map();\n      const pathFromIndexToToToToToTo = new Map();\n      const pathToIndexToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToToToToToTo = new Map();\n      const pathToIndexToToToToToToToToToToToToTo = new Map();\n      const pathFromIndexToToToToToToToToToToToTo = new Map();"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied learn deeply profoundly by mathematicians in \n   the last couple centuries century. However, what people don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied learn deeply profoundly by mathematicians in \n   the last couple centuries century. However, what people don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i = i + 1;\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = i + 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = tri;\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n < 1) {\n    return 0\n  }\n  const d = n % 10\n  return d === 0? 0 : d * digits(n - 1)\n}\n\nmodule.exports = digits\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes fill a string as input stimulation which contains only square brackets bracket. \n   The function should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true dependable \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "/*\n  Create a function that takes fill a string as input stimulation which contains only square brackets bracket. \n   The function should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true dependable \n   * / \n const isNested = (string) = > {\n    let brackets = 0;\n    let index = 0;\n    while (index < string.length) {\n      if (string[index] === '[') {\n        brackets++;\n      } else if (string[index] === ']') {\n        brackets--;\n      }\n      index++;\n    }\n    return brackets === 0;\n  }\n*/\n\nconst isNested = (string) => {\n  let brackets = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string[index] === '[') {\n      brackets++;\n    } else if (string[index] === ']') {\n      brackets--;\n    }\n    index++;\n  }\n  return brackets === 0;\n};\n\nmodule.exports = isNested;<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need want to return the sum kernel of squared numbers in the given list,\n   round each element component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need want to return the sum kernel of squared numbers in the given list,\n   round each element component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns render true on-key if the last character \n   of a given sacrifice string bowed stringed instrument is an alphabetical character quality and is not \n   a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "/* Create a function that returns render true on-key if the last character \n   of a given sacrifice string bowed stringed instrument is an alphabetical character quality and is not \n   a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = false;\n  if (lastChar.match(/[a-zA-Z]/)) {\n    lastCharIsALetter = true;\n  }\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns render true on-key if the last character of a given sacrifice string \n   is an alphabetical character quality and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = false;\n  if (lastChar.match(/[a-zA-Z]/)) {\n    lastCharIsALetter = true;\n  }\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns render true on-key if the last character of a given sacrifice string \n   is an alphabetical character quality and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = false;\n  if (lastChar.match(/[a-zA-Z]/)) {\n    lastCharIsALetter = true;\n  }\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns render true on-key if the last character of a given sacrifice string \n   is an alphabetical character quality and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = false;\n  if (lastChar.match(/[a-zA-Z]/)) {\n    lastCharIsALetter = true;\n  }\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns render true on-key if the last character of a given sacrifice string \n   is an alphabetical character quality and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = false;\n  if (lastChar.match(/[a-zA-Z]/)) {\n    lastCharIsALetter = true;\n  }\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns render true on-key if the last character of a given sacrifice string \n   is an alphabetical character quality and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = false;\n  if (lastChar.match(/[a-zA-Z]/)) {\n    lastCharIsALetter = true;\n  }\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns render true on-key if the last character of a given sacrifice string \n   is an alphabetical character quality and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = false;\n  if (lastChar.match"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxExp = -1;\n  let i = 0;\n  while (i < arr.length) {\n    let exp = arr[i];\n    let j = i + 1;\n    while (j < arr.length) {\n      if (arr[j] > exp) {\n        break;\n      }\n      j++;\n    }\n    if (j < arr.length) {\n      if (maxExp < j - i) {\n        maxExp = j - i;\n        max = exp;\n      }\n    } else {\n      break;\n    }\n    i = j;\n  }\n  return max;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers, and 'b' is the smallest modest \n   of positive plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "/* Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers, and 'b' is the smallest modest \n   of positive plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = null\n  let min = null\n  if (lst.length === 0) {\n    return [max, min]\n  }\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i]\n    if (curr < 0) {\n      if (max === null) {\n        max = curr\n      } else if (curr > max) {\n        max = curr\n      }\n    } else if (curr > 0) {\n      if (min === null) {\n        min = curr\n      } else if (curr < min) {\n        min = curr\n      }\n    }\n  }\n  return [max, min]\n}\n\nmodule.exports = largestSmallestIntegers\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes fill integers integer, floats, or strings representing map \n   real numbers, and returns reelect the larger variable in its given variable type character. \n   Return null if the values are equal. \n   Note eminence: If a real number phone number is represented as a string bowed stringed instrument, the floating float point decimal point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null nothing \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "/*\n  Create a function that takes fill integers integer, floats, or strings representing map \n   real numbers, and returns reelect the larger variable in its given variable type character. \n   Return null if the values are equal. \n   Note eminence: If a real number phone number is represented as a string bowed stringed instrument, the floating float point decimal point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null nothing \n   * / \n const compareOne = (a, b) = > {\n   if (a === b) {\n     return a;\n   }\n   else {\n     return null;\n   }\n }\n */\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// const compareOne = (a, b) = > {\n//   if (a === b) {\n//     return a;\n//   }\n//   else {\n//     return null;\n//   }"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace supplant all spaces quad in it with underscores, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string text, replace supplant all spaces quad in it with underscores, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s{2,}/g, '_')\n}\n\nmodule.exports = {\n  fixSpaces\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string bowed stringed instrument representing exemplify a file's name, and returns \n  ' Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "/*Create a function which takes a string bowed stringed instrument representing exemplify a file's name, and returns \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = file_name.split('.');\n  let file_name_check_length = file_name_check.length;\n  let file_name_check_first_letter = file_name_check[0];\n  let file_name_check_last_letter = file_name_check[file_name_check_length - 1];\n  let file_name_check_last_letter_length = file_name_check_last_letter.length;\n  let file_name_check_first_letter_length = file_name_check_first_letter.length;\n  let file_name_check_first_letter_is_letter = file_name_check_first_letter.match(/^[a-zA-Z]$/);\n  let file_name_check_last_letter_is_letter = file_name_check_last_letter.match(/^[a-zA-Z]$/);\n  let file_name_check_first_letter_is_number = file_name_check_first_letter.match(/^[0-9]$/);\n  let file_name_check_last_letter_is_number = file_name_check_last_letter.match(/^[0-9]$/);\n  let file_name_check_first_letter_is_letter_or_number = file_name_check_first_letter.match(/^[a-zA-Z0-9]$/);\n  let file_name_check_last_letter_is_letter_or_number = file_name_check_last_letter.match(/^[a-zA-Z0-9]$/);\n  let file_name_check_first_letter_is_letter_or_number_or_number = file_name_check_first_letter.match(/^[a-zA-Z0-9]{0,2}$/);\n  let file_name_check_last_letter_is_letter_or_number_or_number = file_name_check_last_letter.match(/^[a-zA-Z0-9]{0,2}$/);\n  let file_name_check_first_letter_is_letter_or_number_or_number = file_name_check_first_letter.match(/^[a-zA-Z0-9]{0,3}$/);\n  let file_name_check_last_letter_is_letter_or_number_or_number = file_name_check_last_letter.match(/^[a-zA-Z0-9]{0,3}$/);\n  let file_name_check_first_letter_is_letter_or_number_or_number_or_number = file_name_check_first_letter.match(/^[a-zA-Z0-9]{0,4}$/);\n  let file_name_check_last_letter_is_letter_or_number_or_number_or_number = file_name_check_last_letter.match(/^[a-zA-Z0-9]{0,4}$/);\n  let file_name_check_first_letter_is_letter_or_number_or_number_or_number_or_number = file_name_check_first_letter.match(/^[a-zA-Z0-9]{0,5}$/);\n  let file_name_check_last_letter_is_letter_or_number_or_number_or_number_or_number = file_name_check_last_letter.match(/^[a-zA-Z0-9]{0,5}$/);\n  let file_name_check_first_letter_is_letter_or_number_or_number_or_number_or_number_or_number = file_name_check_first_letter.match(/^[a-zA-Z0-9]{0,6}$/);\n  let file_name_check_last_letter_is_letter_or_number_or_number_or_number_or_number_or_number = file_name_check_last_letter.match(/^[a-zA-Z0-9]{0,6}$/);\n  let file_name_check_first_letter_is_letter_or_number_or_number_or_number_or_number_or_number_or_number = file_name_check_first_letter.match(/^[a-zA-Z0-9]{0,7}$/);\n  let file_name_check_last_letter_is_letter_or_number_or_number_or_number_or_number_or_number_or_number = file_name_check_last_letter.match(/^[a-zA-Z0-9]{0,7}$/);\n  let file_name_check_first_letter_is_letter_or_number_or_number_or_number_or_number_or_number_or_number_or_number = file_name_check_first_letter.match(/^[a-zA-Z0-9]{0,8}$/);\n  let file_name_check_last_letter_is_letter_or_number_or_number_or_number"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers integer. For all entries entry in the list, the function shall square the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers integer. For all entries entry in the list, the function shall square the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    else {\n      sum += lst[i];\n    }\n  }\n  return sum;"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing typify a sentence,\n   the sentence contains control some words separated by a space distance, \n   and you have to return a string bowed stringed instrument that contains the words password from the original sentence,\n   whose lengths are prime numbers, \n   the order of the words lyric in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a string representing typify a sentence,\n   the sentence contains control some words separated by a space distance, \n   and you have to return a string bowed stringed instrument that contains the words password from the original sentence,\n   whose lengths are prime numbers, \n   the order of the words lyric in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(' ');\n  let result = [];\n  let i = 0;\n  while (i < words.length) {\n    let word = words[i];\n    let index = Math.floor(Math.random() * (words.length - i));\n    result.push(word);\n    i = i + 1;\n    while (i < index) {\n      i = i + 1;\n    }\n  }\n  return result.join(' ');\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function affair that will simplify the expression formula \n   x * n. The function returns true on-key if x * n evaluates to a whole number act and false \n   otherwise. Both x and n, are string representation of a fraction, and have the following come format, \n   < numerator>/<denominator > where both numerator and denominator are positive cocksure whole numbers. \n\n   You can assume wear that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true on-key \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false fake \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "/*Your task is to implement a function affair that will simplify the expression formula \n   x * n. The function returns true on-key if x * n evaluates to a whole number act and false \n   otherwise. Both x and n, are string representation of a fraction, and have the following come format, \n   < numerator>/<denominator > where both numerator and denominator are positive cocksure whole numbers. \n\n   You can assume wear that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true on-key \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false fake \n   * / \n const simplify = (x, n) = > {\n   if (x.length === n.length) {\n     let i = 0;\n     let j = 0;\n     while (i < x.length && j < n.length) {\n       if (x[i] === n[j]) {\n         i++;\n         j++;\n       } else if (x[i] === \".\") {\n         i++;\n       } else if (n[j] === \".\") {\n         j++;\n       } else {\n         return false;\n       }\n     }\n     return true;\n   } else {\n     return false;\n   }\n }\n\n*/\n\nconst simplify = (x, n) => {\n  if (x.length === n.length) {\n    let i = 0;\n    let j = 0;\n    while (i < x.length && j < n.length) {\n      if (x[i] === n[j]) {\n        i++;\n        j++;\n      } else if (x[i] === \".\") {\n        i++;\n      } else if (n[j] === \".\") {\n        j++;\n      } else {\n        return false;\n      }\n    }\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst test = [\n  [\"1/5\", \" 5/1 \"],\n  [\"1/6\", \" 2/1 \"],\n  [\"7/10\", \" 10/2 \"],\n  [\"1/2\", \" 1/2 \"],\n  [\"1/3\", \" 1/3 \"],\n  [\"1/4\", \" 1/4 \"],\n  [\"1/5\", \" 5/1 \"],\n  [\"1/6\", \" 2/1 \"],\n  [\"1/7\", \" 1/7 \"],\n  [\"1/8\", \" 1/8 \"],\n  [\"1/9\", \" 1/9 \"],\n  [\"1/10\", \" 1/10 \"],\n  [\"1/11\", \" 1/11 \"],\n  [\"1/12\", \" 1/12 \"],\n  [\"1/13\", \" 1/13 \"],\n  [\"1/14\", \" 1/14 \"],\n  [\"1/15\", \" 1/15 \"],\n  [\"1/16\", \" 1/16 \"],\n  [\"1/17\", \" 1/17 \"],\n  [\"1/18\", \" 1/18 \"],\n  [\"1/19\", \" 1/19 \"],\n  [\"1/20\", \" 1/20 \"],\n  [\"1/21\", \" 1/21 \"],\n  [\"1/22\", \" 1/22 \"],\n  [\"1/23\", \" 1/23 \"],\n  [\"1/24\", \" 1/24 \"],\n  [\"1/25\", \" 1/25 \"],\n  [\"1/26\", \" 1/26 \"],\n  [\"1/27\", \" 1/27 \"],\n  [\"1/28\", \" 1/28 \"],\n  [\"1/29\", \" 1/29 \"],\n  [\"1/30\", \" 1/30 \"],\n  [\"1/31\", \" 1/31 \"],\n  [\"1/32\", \" 1/32 \"],\n  [\"1/33\", \" 1/33 \"],\n  [\"1/34\", \" 1/34 \"],\n  [\"1/35\", \" 1/35 \"],\n  [\"1/36\", \" 1/36 \"],\n  [\"1/37\", \" 1/37 \"],\n  [\"1/38\", \" 1/38 \"],\n  [\"1/39\", \" 1/39 \"],\n  [\"1/40\", \" 1/40 \"],\n  [\"1/41\", \" 1/41 \"],\n  [\"1/42\", \" 1/42 \"],\n  [\"1/43\", \" 1/43 \"],\n  [\"1/44\", \" 1/44 \"],\n  [\"1/45\", \" 1/45 \"],\n  [\"1/46\", \" 1/46 \"],\n  [\"1/47\", \" 1/47 \"],\n  [\"1/48\", \" 1/48 \"],\n  [\"1/49\", \" 1/49 \"],\n  [\"1/50\", \" 1/50 \"],\n  [\"1/51\", \" 1/51 \"],\n  [\"1/52\", \" 1/52 \"],\n  [\"1/53\", \" 1/53 \"],\n  [\"1/54\", \" 1/54 \"],\n  [\"1/55\", \" 1/55 \"],\n  [\"1/56\", \" 1/56 \"],\n  [\"1/57\", \" 1/57 \"],\n  [\"1/58\", \" 1/58 \"],\n  [\"1/59\", \" 1/59 \"],\n  [\"1/60\", \" 1/60 \"],\n  [\"1/61\", \" 1/61 \"],\n  [\"1/62\", \" 1/62 \"],\n  [\"1/63\", \" 1/63 \"],\n  [\"1/64\", \" 1/64 \"],\n  [\"1/65\", \" 1/65 \"],\n  [\"1/66\", \" 1/66 \"],\n  [\"1/67\", \" 1/67 \"],\n  [\"1/68\", \" 1/68 \"],\n  [\"1/69\", \" 1/69 \"],\n  [\"1/70\", \" 1/70 \"],\n  [\"1/71\", \" 1/71 \"],\n  [\"1/72\", \" 1/72 \"],\n  [\"1/73\", \" 1/73 \"],\n  [\"1/74\", \" 1/74 \"],\n  [\"1/75\", \" 1/75 \"],\n  [\"1/76\", \" 1/76 \"],\n  [\"1/77\", \" 1/77 \"],\n  [\"1/78\", \" 1/78 \"],\n"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts classify the given render list of integers \n   in ascending order orderliness according harmonize to the sum of their digits digit. \n   Note: if there are several items with similar sum union of their digits, \n   order them based on their index exponent in original list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function which sorts classify the given render list of integers \n   in ascending order orderliness according harmonize to the sum of their digits digit. \n   Note: if there are several items with similar sum union of their digits, \n   order them based on their index exponent in original list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n\n  const sorted = nums.sort((a, b) => {\n    const aDigit = a.digit;\n    const bDigit = b.digit;\n    if (aDigit === bDigit) {\n      return a.index - b.index;\n    }\n    return aDigit - bDigit;\n  });\n\n  return sorted;\n};\n\nmodule.exports = orderByPoints;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater capital than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater capital than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let counter = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i].toString().length % 2 === 1 && nums[i].toString().charAt(0)!== nums[i].toString().charAt(nums[i].toString().length - 1)) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create make an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create make an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] === 3 * i) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write spell a function that takes two planet satellite names as strings planet1 and planet2.\n   The function routine should return a tuple containing all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function routine should return an empty tuple if planet1 or planet2\n   are not correct planet satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write spell a function that takes two planet satellite names as strings planet1 and planet2.\n   The function routine should return a tuple containing all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function routine should return an empty tuple if planet1 or planet2\n   are not correct planet satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n  const planet1Index = planets.indexOf(planet1)\n  const planet2Index = planets.indexOf(planet2)\n  const result = []\n  if (planet1Index < 0 || planet2Index < 0) {\n    return result\n  }\n  const distance = planets.slice(planet1Index + 1, planet2Index + 1).reduce((a, b) => {\n    return a + b\n  }, 0)\n  const distanceToSun = distance / (Math.PI * 6378.14)\n  const planet1Orbit = planets.slice(planet1Index + 1, planet1Index + 1).reduce((a, b) => {\n    return a + b\n  }, 0)\n  const planet2Orbit = planets.slice(planet2Index + 1, planet2Index + 1).reduce((a, b) => {\n    return a + b\n  }, 0)\n  const planet1OrbitToSun = planet1Orbit / (Math.PI * 6378.14)\n  const planet2OrbitToSun = planet2Orbit / (Math.PI * 6378.14)\n  if (planet1OrbitToSun < distanceToSun) {\n    result.push(planet1)\n  }\n  if (planet2OrbitToSun < distanceToSun) {\n    result.push(planet2)\n  }\n  return result\n}\n\nmodule.exports = bf\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings bowed stringed instrument as a parameter argument, \n   deletes the strings that have odd leftover lengths from it, \n   and returns the resulted result list with a sorted order, \n   The list is always a list of strings and never an array of numbers phone number, \n   and it may contain duplicates. \n   The order of the list should be ascending rise by length of each word news, and you \n   should return the list sorted classify by that rule principle. \n   If two words son have the same length distance, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order. \n   You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "/*Write a function that accepts a list of strings bowed stringed instrument as a parameter argument, \n   deletes the strings that have odd leftover lengths from it, \n   and returns the resulted result list with a sorted order, \n   The list is always a list of strings and never an array of numbers phone number, \n   and it may contain duplicates. \n   The order of the list should be ascending rise by length of each word news, and you \n   should return the list sorted classify by that rule principle. \n   If two words son have the same length distance, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order. \n   You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let result = [];\n  let length = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > length) {\n      length = lst[i].length;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === length) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum2 = (lst) => {\n  let result = [];\n  let length = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > length) {\n      length = lst[i].length;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === length) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum3 = (lst) => {\n  let result = [];\n  let length = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > length) {\n      length = lst[i].length;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === length) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum4 = (lst) => {\n  let result = [];\n  let length = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > length) {\n      length = lst[i].length;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === length) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum5 = (lst) => {\n  let result = [];\n  let length = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > length) {\n      length = lst[i].length;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === length) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum6 = (lst) => {\n  let result = [];\n  let length = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > length) {\n      length = lst[i].length;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === length) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum7 = (lst) => {\n  let result = [];\n  let length = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > length) {\n      length = lst[i].length;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === length) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum8 = (lst) => {\n  let result = [];\n  let length = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > length) {\n      length = lst[i].length;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === length) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum9 = (lst) => {\n  let result = [];\n  let length = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > length) {\n      length = lst[i].length;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === length) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedListSum10 = (lst) => {\n  let result = [];\n  let length = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > length) {\n      length = lst[i].length;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === length) {\n      result"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst test = () => {\n  console.log(xOrY(7, 34, 12));\n  console.log(xOrY(15, 8, 5));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   if (lst.length == 0) {\n     return 0;\n   }\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 == 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n }\n * @author: Akash Meher\n */\n\npublic class DoubleTheDifference {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n        sc.close();\n        double sum = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] % 2 == 1) {\n                sum += arr[i] * arr[i];\n            }\n        }\n        System.out.println(sum);\n    }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling spirit when the result solution of some long - awaited \n   event is finally ultimately known. The feelings and thoughts thinking you have at that moment are \n   definitely worth noting down and comparing compare. \n   Your task is to determine if a person correctly guessed the results result of a number of matches match. \n   You are given two arrays array of scores grudge and guesses guess of equal length, where each index exponent shows a match. \n   Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference dispute between the guess and the score mark.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "/*I think we all remember that feeling spirit when the result solution of some long - awaited \n   event is finally ultimately known. The feelings and thoughts thinking you have at that moment are \n   definitely worth noting down and comparing compare. \n   Your task is to determine if a person correctly guessed the results result of a number of matches match. \n   You are given two arrays array of scores grudge and guesses guess of equal length, where each index exponent shows a match. \n   Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference dispute between the guess and the score mark.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < game.length && j < guess.length) {\n    if (game[i] === guess[j]) {\n      result[i] = result[i] || 0;\n      result[i] += 1;\n      i += 1;\n      j += 1;\n    } else if (game[i] < guess[j]) {\n      result[i] = result[i] || 0;\n      result[i] += 1;\n      i += 1;\n    } else {\n      result[j] = result[j] || 0;\n      result[j] += 1;\n      j += 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used practice to load additional classes to the class course. The \n   strength of the extension is as follows be: Let CAP be the number of the uppercase \n   letters in the extension propagation's name, and let SM be the number of lowercase letters letter \n   in the extension's name, the strength persuasiveness is given render by the fraction CAP - SM. \n   You should find witness the strongest solid extension elongation and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes arrive first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used practice to load additional classes to the class course. The \n   strength of the extension is as follows be: Let CAP be the number of the uppercase \n   letters in the extension propagation's name, and let SM be the number of lowercase letters letter \n   in the extension's name, the strength persuasiveness is given render by the fraction CAP - SM. \n   You should find witness the strongest solid extension elongation and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes arrive first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = 0;\n  let extension_name = '';\n  let extension_index = 0;\n  let extension_index_max = extensions.length;\n  let extension_index_min = 0;\n  let extension_index_max_min = extension_index_max - extension_index_min;\n  let extension_index_min_max = extension_index_max - extension_index_min;\n  let extension_index_min_max_max = extension_index_max_min - extension_index_min_max;\n  let extension_index_min_max_min = extension_index_max_min - extension_index_min_max;\n  let extension_index_min_max_min_max = extension_index_max_min_max - extension_index_min_max_min;\n  let extension_index_min_max_min_min = extension_index_max_min_max - extension_index_min_max_min;\n  let extension_index_min_max_min_min_max = extension_index_max_min_max_min - extension_index_min_max_min_min;\n  let extension_index_min_max_min_min_min_max = extension_index_max_min_max_min_min - extension_index_min_max_min_min_min_max;\n  let extension_index_min_max_min_min_min_min_max = extension_index_max_min_max_min_min - extension_index_min_max_min_min_min_min_max;\n  let extension_index_min_max_min_min_min_min_min_max = extension_index_max_min_max_min_min - extension_index_min_max_min_min_min_min_min_max;\n  let extension_index_min_max_min_min_min_min_min_min_max = extension_index_max_min_max_min_min - extension_index_min_max_min_min_min_min_min_min_max;\n  let extension_index_min_max_min_min_min_min_min_min_min_max = extension_index_max_min_max_min_min - extension_index_min_max_min_min_min_min_min_min_min_max;\n  let extension_index_min_max_min_min_min_min_min_min_min_min_max = extension_index_max_min_max_min_min - extension_index_min_max_min_min_min_min_min_min_min_min_max;\n  let extension_index_min_max_min_min_min_min_min_min_min_min_min_max = extension_index_max_min_max_min_min - extension_index_min_max_min_min_min_min_min_min_min_min_max;\n  let extension_index_min_max_min_min_min_min_min_min_min_min_min_min_max = extension_index_max_min_max_min_min - extension_index_min_max_min_min_min_min_min_min_min_min_min_max;\n  let extension_index_min_max_min_min_min_min_min_min_min_min_min_min_min_max = extension_index_max_min_max_min_min - extension_index_min_max_min_min_min_min_min_min_min_min_min_min_max;\n  let extension_index_min_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_max = extension_index_max_min_max_min_min - extension_index_min_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_max;\n  let extension_index_min_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need want to return true on-key if the second word or any of its rotations is a substring in the first beginning word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "/*You are given 2 words. You need want to return true on-key if the second word or any of its rotations is a substring in the first beginning word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg ="}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  let digit = num;\n  while (digit > 0) {\n    digit = digit / 10;\n    if (digit % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let num = number;\n  let i = 0;\n  while (num > 0) {\n    let digit = num % 10;\n    result = (digit > 1)? (digit + ',') : digit;\n    num = num / 10;\n    i++;\n  }\n  result = result.slice(0, i);\n  return result.toLowerCase();\n};\n\nconst miniRomanToInt = (roman) => {\n  let result = 0;\n  let roman = roman.toLowerCase();\n  for (let i = 0; i < roman.length; i++) {\n    let char = roman[i];\n    if (char === ',') {\n      result += 10;\n    } else if (char === 'i') {\n      result += 4;\n    } else if (char === 'x') {\n      result += 9;\n    } else if (char === 'v') {\n      result += 5;\n    } else if (char === 'l') {\n      result += 50;\n    } else if (char === 'c') {\n      result += 100;\n    } else if (char === 'd') {\n      result += 500;\n    } else {\n      throw new Error('Invalid roman numeral:'+ roman);\n    }\n  }\n  return result;\n};\n\nconst miniRomanToInt = (roman) => {\n  let result = 0;\n  let roman = roman.toLowerCase();\n  for (let i = 0; i < roman.length; i++) {\n    let char = roman[i];\n    if (char === ',') {\n      result += 10;\n    } else if (char === 'i') {\n      result += 4;\n    } else if (char === 'x') {\n      result += 9;\n    } else if (char === 'v') {\n      result += 5;\n    } else if (char === 'l') {\n      result += 50;\n    } else if (char === 'c') {\n      result += 100;\n    } else if (char === 'd') {\n      result += 500;\n    } else {\n      throw new Error('Invalid roman numeral:'+ roman);\n    }\n  }\n  return result;\n};\n\nconst miniRomanToInt = (roman) => {\n  let result = 0;\n  let roman = roman.toLowerCase();\n  for (let i = 0; i < roman.length; i++) {\n    let char = roman[i];\n    if (char === ',') {\n      result += 10;\n    } else if (char === 'i') {\n      result += 4;\n    } else if (char === 'x') {\n      result += 9;\n    } else if (char === 'v') {\n      result += 5;\n    } else if (char === 'l') {\n      result += 50;\n    } else if (char === 'c') {\n      result += 100;\n    } else if (char === 'd') {\n      result += 500;\n    } else {\n      throw new Error('Invalid roman numeral:'+ roman);\n    }\n  }\n  return result;\n};\n\nconst miniRomanToInt = (roman) => {\n  let result = 0;\n  let roman = roman.toLowerCase();\n  for (let i = 0; i < roman.length; i++) {\n    let char = roman[i];\n    if (char === ',') {\n      result += 10;\n    } else if (char === 'i') {\n      result += 4;\n    } else if (char === 'x') {\n      result += 9;\n    } else if (char === 'v') {\n      result += 5;\n    } else if (char === 'l') {\n      result += 50;\n    } else if (char === 'c') {\n      result += 100;\n    } else if (char === 'd') {\n      result += 500;\n    } else {\n      throw new Error('Invalid roman numeral:'+ roman);\n    }\n  }\n  return result;\n};\n\nconst miniRomanToInt = (roman) => {\n  let result = 0;\n  let roman = roman.toLowerCase();\n  for (let i = 0; i < roman.length; i++) {\n    let char = roman[i];\n    if (char === ',') {\n      result += 10;\n    } else if (char === 'i') {\n      result += 4;\n    } else if (char === 'x') {\n      result += 9;\n    } else if (char === 'v') {\n      result += 5;\n    } else if (char === 'l') {\n      result += 50;\n    } else if (char === 'c') {\n      result += 100;\n    } else if (char === 'd') {\n      result += 500;\n    } else {\n      throw new Error('Invalid roman numeral:'+ roman);\n    }\n  }\n  return result;\n};\n\nconst miniRomanToInt = (roman) => {\n  let result = 0;\n  let roman = roman.toLowerCase();\n  for (let i = 0; i < roman.length; i++) {\n    let char = roman[i];\n    if (char === ',') {\n      result += 10;\n    } else if (char === 'i') {\n      result += 4;\n    } else if (char === 'x') {\n      result += 9;\n    } else if (char === 'v') {\n      result += 5;\n    } else if (char === 'l') {\n      result += 50;\n    } else if (char === 'c') {\n      result += 100;\n    } else if (char === 'd') {\n      result += 500;\n    } else {\n      throw new Error('Invalid roman numeral:'+ roman);\n    }\n  }\n  return result;\n"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c;\n};\n\nmodule.exports = rightAngleTriangle;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings bowed stringed instrument. \n   The list contains control different words. Return the word with maximum maximal number \n   of unique characters quality. If multiple strings have maximum number of unique \n   characters quality, return the one which comes first in lexicographical order ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string drawstring \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "/*Write a function that accepts a list of strings bowed stringed instrument. \n   The list contains control different words. Return the word with maximum maximal number \n   of unique characters quality. If multiple strings have maximum number of unique \n   characters quality, return the one which comes first in lexicographical order ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string drawstring \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   var max = 0;\n   var maxIndex = 0;\n   for (var i = 0; i < words.length; i++) {\n     var word = words[i];\n     var wordLength = word.length;\n     var wordQuality = 0;\n     for (var j = 0; j < wordLength; j++) {\n       var char = word[j];\n       if (char.match(/[a-zA-Z]/)) {\n         wordQuality++;\n       }\n     }\n     if (wordQuality > max) {\n       max = wordQuality;\n       maxIndex = i;\n     }\n   }\n   return words[maxIndex];\n }\n * / \n * var bow = [\"name\", \" of \", \" string \"];\n * var enam = [\"name\", \" enam \", \" game plot \"];\n * var aaaaaaa = [\"aaaaaaa\", \" bb \", \" cc milliliter \"];\n * var max = findMax(bow);\n * var max = findMax(enam);\n * var max = findMax(aaaaaa);\n * * /\n * var bow = [\"name\", \" of \", \" string \"];\n * var enam = [\"name\", \" enam \", \" game plot \"];\n * var aaaaaaa = [\"aaaaaaa\", \" bb \", \" cc milliliter \"];\n * var max = findMax(bow);\n * var max = findMax(enam);\n * var max = findMax(aaaaaa);\n * * /\n * var bow = [\"name\", \" of \", \" string \"];\n * var enam = [\"name\", \" enam \", \" game plot \"];\n * var aaaaaaa = [\"aaaaaaa\", \" bb \", \" cc milliliter \"];\n * var max = findMax(bow);\n * var max = findMax(enam);\n * var max = findMax(aaaaaa);\n * * /\n * var bow = [\"name\", \" of \", \" string \"];\n * var enam = [\"name\", \" enam \", \" game plot \"];\n * var aaaaaaa = [\"aaaaaaa\", \" bb \", \" cc milliliter \"];\n * var max = findMax(bow);\n * var max = findMax(enam);\n * var max = findMax(aaaaaa);\n * * /\n * var bow = [\"name\", \" of \", \" string \"];\n * var enam = [\"name\", \" enam \", \" game plot \"];\n * var aaaaaaa = [\"aaaaaaa\", \" bb \", \" cc milliliter \"];\n * var max = findMax(bow);\n * var max = findMax(enam);\n * var max = findMax(aaaaaa);\n * * /\n * var bow = [\"name\", \" of \", \" string \"];\n * var enam = [\"name\", \" enam \", \" game plot \"];\n * var aaaaaaa = [\"aaaaaaa\", \" bb \", \" cc milliliter \"];\n * var max = findMax(bow);\n * var max = findMax(enam);\n * var max = findMax(aaaaaa);\n * * /\n * var bow = [\"name\", \" of \", \" string \"];\n * var enam = [\"name\", \" enam \", \" game plot \"];\n * var aaaaaaa = [\"aaaaaaa\", \" bb \", \" cc milliliter \"];\n * var max = findMax(bow);\n * var max = findMax(enam);\n * var max = findMax(aaaaaa);\n * * /\n * var bow = [\"name\", \" of \", \" string \"];\n * var enam = [\"name\", \" enam \", \" game plot \"];\n * var aaaaaaa = [\"aaaaaaa\", \" bb \", \" cc milliliter \"];\n * var max = findMax(bow);\n * var max = findMax(enam);\n * var max = findMax(aaaaaa);\n * * /\n * var bow = [\"name\", \" of \", \" string \"];\n * var enam = [\"name\", \" enam \", \" game plot \"];\n * var aaaaaaa = [\"aaaaaaa\", \" bb \", \" cc milliliter \"];\n * var max = findMax(bow);\n * var max = findMax(enam);\n * var max = findMax(aaaaaa);\n * * /\n * var bow = [\"name\", \" of \", \" string \"];\n * var enam = [\"name\", \" enam \", \" game plot \"];\n * var aaaaaaa = [\"aaaaaaa\", \" bb \", \" cc milliliter \"];\n * var max = findMax(bow);\n * var max = findMax(enam);\n * var max = findMax(aaaaaa);\n * * /\n * var bow = [\"name\", \" of \", \" string \"];\n * var enam = [\"name\", \" enam \", \" game plot \"];\n * var aaaaaaa = [\"aaaaaaa\", \" bb \", \" cc milliliter \"];\n * var max = findMax(bow);\n * var max = findMax(enam);\n * var max = findMax(aaaaaa);\n * * /\n * var bow = [\"name\", \" of \", \" string \"];\n * var enam = [\"name\", \" enam \", \" game plot \"];\n * var aaaaaaa = [\"aaaaaaa\", \" bb \", \" cc milliliter \"];\n * var max = findMax(bow);\n * var max = findMax(enam);\n * var max = findMax(aaaaaa);\n * * /\n * var bow = [\"name\", \" of \", \" string \"];\n * var enam = [\"name\", \" enam \", \" game plot \"];\n * var aaaaaaa = [\"aaaaaaa\", \" bb \", \" cc milliliter \"];\n * var max = findMax(bow);\n * var max = findMax(enam);\n * var max = findMax(aaaaaa);\n * * /\n * var bow = [\"name\", \" of \", \" string \"];\n * var enam = [\"name\", \" enam \","}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain sealed number of carrots, \n   but now you need to eat more carrots to complete dispatch the day's meals. \n   you should return an array of [ total number of eaten eat carrots after your meals, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still however be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain sealed number of carrots, \n   but now you need to eat more carrots to complete dispatch the day's meals. \n   you should return an array of [ total number of eaten eat carrots after your meals, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still however be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || number < 0 || need > 1000 || need < 0 || remaining > 1000 || remaining < 0) {\n    throw new Error('Invalid input');\n  }\n\n  const result = [];\n  let total = 0;\n  let left = remaining;\n  let i = 0;\n  while (i < number) {\n    if (left < need) {\n      total += need - left;\n      left = 0;\n    } else {\n      total += left;\n      left -= need;\n    }\n    result.push([total, left]);\n    i++;\n  }\n  return result;\n};\n\nexport default eat;\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations mathematical process, and \n   the second list is a list of integers. Use the two given sacrifice lists tilt to build the algebric \n   expression saying and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations mathematical process, and \n   the second list is a list of integers. Use the two given sacrifice lists tilt to build the algebric \n   expression saying and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  for (let i = 0; i < operand.length; i++) {\n    for (let j = 0; j < operator.length; j++) {\n      if (operator[j] === '+') {\n        result.push(operand[i] + operand[i + 1]);\n      } else if (operator[j] === '-') {\n        result.push(operand[i] - operand[i + 1]);\n      } else if (operator[j] === '*') {\n        result.push(operand[i] * operand[i + 1]);\n      } else if (operator[j] === '/') {\n        result.push(operand[i] / operand[i + 1]);\n      } else if (operator[j] === '//') {\n        result.push(operand[i] // operand[i + 1]);\n      } else if (operator[j] === '^') {\n        result.push(Math.pow(operand[i], operand[i + 1]));\n      }\n    }\n  }\n  return result;\n};\n\nconst test = [\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4,"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case casing from lower to upper or vise versa, \n   otherwise keep keep open it as it is. \n   If the string contains no letters letter, reverse the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case casing from lower to upper or vise versa, \n   otherwise keep keep open it as it is. \n   If the string contains no letters letter, reverse the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = s.split('').map(x => {\n    return x.toUpperCase() === x.toLowerCase()? x.toUpperCase() : x.toLowerCase();\n  }).join('');\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers integer a and b, return the even tied digits between a\n   and b, in ascending order orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "/*\n  Given two positive integers integer a and b, return the even tied digits between a\n   and b, in ascending order orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  const aLength = a.toString().length;\n  const bLength = b.toString().length;\n  if (aLength === bLength) {\n    for (let i = 0; i < aLength; i++) {\n      if (a.toString()[i] === b.toString()[i]) {\n        result.push(parseInt(a.toString()[i]));\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
