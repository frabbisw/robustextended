{"task_id": "JavaScript/0", "prompt": "/* cHeCK if in giVeN list OF numbers, Are anY Two numbers clOser To Each Other than\n  GIvEN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* cHeCK if in giVeN list OF numbers, Are anY Two numbers clOser To Each Other than\n  GIvEN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const isClose = (a, b) => {\n    return Math.abs(a - b) < threshold;\n  };\n\n  return numbers.some(a => numbers.some(b => isClose(a, b)));\n};\n\nexport default hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* iNpUT to thIs FUNCtion IS a strIng cOnTainIng multipLE gROuPs oF nEsTeD paRenTHEseS. yOuR goal iS To\n  separATe ThoSE GRouP IntO SEPaRAtE sTrings AnD return tHe list of THOSE.\n  SEParate grouPS are Balanced (EacH opeN bRacE Is proPErLy Closed) AnD not nESted wIthiN eaCh otHEr\n  IGNore any SpACes in tHe INpUt stRIng.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* iNpUT to thIs FUNCtion IS a strIng cOnTainIng multipLE gROuPs oF nEsTeD paRenTHEseS. yOuR goal iS To\n  separATe ThoSE GRouP IntO SEPaRAtE sTrings AnD return tHe list of THOSE.\n  SEParate grouPS are Balanced (EacH opeN bRacE Is proPErLy Closed) AnD not nESted wIthiN eaCh otHEr\n  IGNore any SpACes in tHe INpUt stRIng.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let result = [];\n  let current_group = [];\n  let current_group_start = 0;\n  let current_group_end = 0;\n  let current_group_length = 0;\n  let current_group_string = '';\n  let current_group_string_length = 0;\n  let current_group_string_start = 0;\n  let current_group_string_end = 0;\n  let current_group_string_length_end = 0;\n  let current_group_string_length_end_end = 0;\n  let current_group_string_length_end_end_end = 0;\n  let current_group_string_length_end_end_end_end = 0;\n  let current_group_string_length_end_end_end_end_end = 0;\n  let current_group_string_length_end_end_end_end_end_end = 0;\n  let current_group_string_length_end_end_end_end_end_end_end = 0;\n  let current_group_string_length_end_end_end_end_end_end_end_end = 0;\n  let current_group_string_length_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_group_string_length_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_group_string_length_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_group_string_length_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_group_string_length_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_group_string_length_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* tEsT If gniVeN STRig is A PalinDromE */\ncOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shORtESt PalInDrOmE thAt bEGIns WITh A supplIEd string.\n  AlgorIThM idEA IS siMPle:\n  - fIND tHE lOnGest poStFiX of sUPPLIeD string That is a palINdroMe.\n  - Append To tHe enD oF thE string ReverSE oF a string Prefix ThAt comES befoRe thE paLindROmiC Suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* tEsT If gniVeN STRig is A PalinDromE */\ncOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shORtESt PalInDrOmE thAt bEGIns WITh A supplIEd string.\n  AlgorIThM idEA IS siMPle:\n  - fIND tHE lOnGest poStFiX of sUPPLIeD string That is a palINdroMe.\n  - Append To tHe enD oF thE string ReverSE oF a string Prefix ThAt comES befoRe thE paLindROmiC Suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '') {\n    return '';\n  }\n  const stringLength = string.length;\n  let left = 0;\n  let right = stringLength - 1;\n  while (left < right) {\n    if (isPalindrome(string.substring(left, right))) {\n      return string.substring(0, left + 1) + string.substring(right, stringLength);\n    }\n    left++;\n    right--;\n  }\n  return string;\n}\n\n/* tEsT If gniVeN STRig is A PalindromE */\ncOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shORtESt PalInDrOmE thAt bEGIns WITh A supplIEd string.\n  AlgorIThM idEA IS siMPle:\n  - fIND tHE lOnGest poStFiX of sUPPLIeD string That is a palINdroMe.\n  - Append To tHe enD oF thE string ReverSE oF a string Prefix ThAt comES befoRe thE paLindROmiC Suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '') {\n    return '';\n  }\n  const stringLength = string.length;\n  let left = 0;\n  let right = stringLength - 1;\n  while (left < right) {\n    if (isPalindrome(string.substring(left, right))) {\n      return string.substring(0, left + 1) + string.substring(right, stringLength);\n    }\n    left++;\n    right--;\n  }\n  return string;\n}\n\n/* tEsT If gniVeN STRig is A PalindromE */\ncOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shORtESt PalInDrOmE thAt bEGIns WITh A supplIEd string.\n  AlgorIThM idEA IS siMPle:\n  - fIND tHE lOnGest poStFiX of sUPPLIeD string That is a palINdroMe.\n  - Append To tHe enD oF thE string ReverSE oF a string Prefix ThAt comES befoRe thE paLindROmiC Suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '') {\n    return '';\n  }\n  const stringLength = string.length;\n  let left = 0;\n  let right = stringLength - 1;\n  while (left < right) {\n    if (isPalindrome(string.substring(left, right))) {\n      return string.substring(0, left + 1) + string.substring(right, stringLength);\n    }\n    left++;\n    right--;\n  }\n  return string;\n}\n\n/* tEsT If gniVeN STRig is A PalindromE */\ncOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shORtESt PalInDrOmE thAt bEGIns WITh A supplIEd string.\n  AlgorIThM idEA IS siMPle:\n  - fIND tHE lOnGest poStFiX of sUPPLIeD string That is a palINdroMe.\n  - Append To tHe enD oF thE string ReverSE oF a string Prefix ThAt comES befoRe thE paLindROmiC Suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '') {\n    return '';\n  }\n  const stringLength = string.length;\n  let left = 0;\n  let right = stringLength - 1;\n  while (left < right) {\n    if (isPalindrome(string.substring(left, right))) {\n      return string.substring(0, left + 1) + string.substring(right, stringLength);\n    }\n    left++;\n    right--;\n  }\n  return string;\n}\n\n/* tEsT If gniVeN STRig is A PalindromE */\ncOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shORtESt PalInDrOmE thAt bEGIns WITh A supplIEd string.\n  AlgorIThM idEA IS siMPle:\n  - fIND tHE lOnGest poStFiX of sUPPLIeD string That is a palINdroMe.\n  - Append To tHe enD oF thE string ReverSE o", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe NExt even numBEr if n Is even.\n  ReTurN the NuMbeR Of stoNEs in EaCh leveL in a list, Where ELemenT at iNdeX\n  i repREseNTs the nuMbER of sToNEs in The lEVel (i+1).\n\n  ExAMples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe NExt even numBEr if n Is even.\n  ReTurN the NuMbeR Of stoNEs in EaCh leveL in a list, Where ELemenT at iNdeX\n  i repREseNTs the nuMbER of sToNEs in The lEVel (i+1).\n\n  ExAMples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile2 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile3 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile4 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile5 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile6 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile7 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile8 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile9 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile10 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile11 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile12 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile13 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile14 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile15 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile16 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile17 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile18 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile19 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile20 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile21 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile22 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile23 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    i++;\n  }\n  return pile;\n};\n\nconst makeAPile24 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString2 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString3 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString4 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString5 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString6 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString7 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString8 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*THIs FUnctiOn TAKEs two POsitiVe nuMbErs x aNd y and retuRNs THe\n  BigGeSt EvEn iNteGER nuMBEr That is in THe range [x, y] INcLusIVE. if \n  tHEre'S NO SuCH nUmBer, theN tHe FuncTION ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*THIs FUnctiOn TAKEs two POsitiVe nuMbErs x aNd y and retuRNs THe\n  BigGeSt EvEn iNteGER nuMBEr That is in THe range [x, y] INcLusIVE. if \n  tHEre'S NO SuCH nUmBer, theN tHe FuncTION ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  const range = x - y + 1\n  const mid = Math.floor(range / 2)\n  const left = x - mid\n  const right = y + mid\n  if (left < right) {\n    return left + chooseNum(left, right)\n  }\n  return -1\n}\n\nmodule.exports = chooseNum\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*YOU aRE giveN tWO POsitiVE inteGers n AnD m, and Your task iS To COmPutE tHe\n  AvEraGe oF THe iNTEgErs froM n Through m (INcLudING n And m). \n  rOunD THE aNSwEr To the nEaReSt inTEGER aND convert thAT to bInary.\n  If n iS grEateR tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*YOU aRE giveN tWO POsitiVE inteGers n AnD m, and Your task iS To COmPutE tHe\n  AvEraGe oF THe iNTEgErs froM n Through m (INcLudING n And m). \n  rOunD THE aNSwEr To the nEaReSt inTEGER aND convert thAT to bInary.\n  If n iS grEateR tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n === 0) return \"0b\" + m;\n  if (n < 0) return \"-1\";\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*GIVeN A list of poSiTIVE inteGErs x. return a sOrteD list oF all \n  Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*GIVeN A list of poSiTIVE inteGErs x. return a sOrteD list oF all \n  Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let digits = [];\n  let i = 0;\n  while (i < x) {\n    if (x % i === 0) {\n      digits.push(i);\n    }\n    i++;\n  }\n  return digits;\n};\n\n/*\n  GIVeN a list of poSiTIVE inteGErs x return a sOrteD list oF all \n  Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits2 = (x) => {\n  let digits = [];\n  let i = 0;\n  while (i < x) {\n    if (x % i === 0) {\n      digits.push(i);\n    }\n    i++;\n  }\n  return digits;\n};\n\n/*\n  GIVeN a list of poSiTIVE inteGErs x return a sOrteD list oF all \n  Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits3 = (x) => {\n  let digits = [];\n  let i = 0;\n  while (i < x) {\n    if (x % i === 0) {\n      digits.push(i);\n    }\n    i++;\n  }\n  return digits;\n};\n\n/*\n  GIVeN a list of poSiTIVE inteGErs x return a sOrteD list oF all \n  Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits4 = (x) => {\n  let digits = [];\n  let i = 0;\n  while (i < x) {\n    if (x % i === 0) {\n      digits.push(i);\n    }\n    i++;\n  }\n  return digits;\n};\n\n/*\n  GIVeN a list of poSiTIVE inteGErs x return a sOrteD list oF all \n  Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits5 = (x) => {\n  let digits = [];\n  let i = 0;\n  while (i < x) {\n    if (x % i === 0) {\n      digits.push(i);\n    }\n    i++;\n  }\n  return digits;\n};\n\n/*\n  GIVeN a list of poSiTIVE inteGErs x return a sOrteD list oF all \n  Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits6 = (x) => {\n  let digits = [];\n  let i = 0;\n  while (i < x) {\n    if (x % i === 0) {\n      digits.push(i);\n    }\n    i++;\n  }\n  return digits;\n};\n\n/*\n  GIVeN a list of poSiTIVE inteGErs x return a sOrteD list oF all \n  Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits7 = (x) => {\n  let digits = [];\n  let i = 0;\n  while (i < x) {\n    if (x % i === 0) {\n      digits.push(i);\n    }\n    i++;\n  }\n  return digits;\n};\n\n/*\n  GIVeN a list of poSiTIVE inteGErs x return a sOrteD list oF all \n  Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  gIvEN an arRaY OF IntegERs, sorT the InTegeRs that are BEtWEeN 1 anD 9 iNcLuSivE,\n  reVERse THE rEsultiNG array, aND tHen REPLacE EacH DIGiT By ItS correSpOnDing NAME FrOM\n  \"One\", \"Two\", \"ThrEE\", \"FouR\", \"Five\", \"Six\", \"sevEn\", \"EiGhT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN an arRaY OF IntegERs, sorT the InTegeRs that are BEtWEeN 1 anD 9 iNcLuSivE,\n  reVERse THE rEsultiNG array, aND tHen REPLacE EacH DIGiT By ItS correSpOnDing NAME FrOM\n  \"One\", \"Two\", \"ThrEE\", \"FouR\", \"Five\", \"Six\", \"sevEn\", \"EiGhT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  if (arr.length === 2) {\n    return [arr[0], arr[1]];\n  }\n  let result = [];\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] === arr[j]) {\n      result.push(arr[i]);\n      i++;\n      j--;\n    } else if (arr[i] < arr[j]) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[j]);\n      j--;\n    }\n  }\n  if (arr[i] === arr[j]) {\n    result.push(arr[i]);\n  } else if (arr[i] < arr[j]) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nmodule.exports = byLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/106", "prompt": "/* iMpLEment ThE FUNctioN f That tAkes n As A parAmeter,\n  and REtURnS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* iMpLEment ThE FUNctioN f That tAkes n As A parAmeter,\n  and REtURnS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f2 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f3 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f4 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f5 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f6 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f7 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f8 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f9 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f10 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f11 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f12 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f13 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f14 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f15 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f16 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f17 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f18 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f19 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f20 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f21 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f22 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f23 = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [...new Set(Array(n).fill(0).map((_, i) => i + 1))];\n};\n\nconst f24", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  gIvEN a posItIVE IntegER n, return a tuple thaT has ThE numBer of even ANd ODd\n  IntEgEr PaLinDroMES thAT FaLl withIN the ranGE(1, n), iNclUSIVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a posItIVE IntegER n, return a tuple thaT has ThE numBer of even ANd ODd\n  IntEgEr PaLinDroMES thAT FaLl withIN the ranGE(1, n), iNclUSIVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = () => {\n    const evens = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evens.push(i);\n      }\n    }\n    return evens;\n  };\n  const odd = () => {\n    const odds = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2!== 0) {\n        odds.push(i);\n      }\n    }\n    return odds;\n  };\n  return [...even(),...odd()];\n};\n\nmodule.exports = evenOddPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  wRiTE a funCtION countNums Which TAkes aN arrAy Of inTegers and REtURnS\n  thE nUmBeR of EleMENts WHIcH has a sUM of digiTS > 0.\n  IF a nUMBEr iS NegATIVe, THeN iTs firsT sIgNed dIGIT WiLL be negativE:\n  E.g. -123 haS signed dIgiTs -1, 2, anD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  wRiTE a funCtION countNums Which TAkes aN arrAy Of inTegers and REtURnS\n  thE nUmBeR of EleMENts WHIcH has a sUM of digiTS > 0.\n  IF a nUMBEr iS NegATIVe, THeN iTs firsT sIgNed dIGIT WiLL be negativE:\n  E.g. -123 haS signed dIgiTs -1, 2, anD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst test = () => {\n  console.log(countNums([-1, 11, -11]));\n  console.log(countNums([1, 1, 2]));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*WE HaVE an arRaY 'arr' OF n inteGErs arr[1], arr[2], ..., arr[N].The\n  nuMberS in tHe arRay will be RAnDOmLy oRdErEd. youR taSK Is tO DEtErmine IF\n  it is poSSiBle TO GEt aN ArrAY SOrTEd in NoN-decreAsInG ordER BY PeRForming \n  the FOlloWing operAtiOn on ThE giVEn arrAY:\n      YOu Are allOwEd to pERform RighT shIft oPEraTIon any nUmBEr of TiMEs.\n  \n  one rIGht shIFt operatIon mEans sHiftING aLl elemEntS oF THE array By one\n  poSition in The rigHT DirectiOn. tHe last eLEment OF THe arRAY wIll be MoVED TO\n  ThE starting posiTioN in ThE arrAy i.e. 0tH iNdEX. \n\n  If It is Possible to ObtAin tHe SorTed Array by perfOrminG THe abOve oPeraTiOn\n  Then return tRue Else return fAlse.\n  IF The Given ArRaY IS eMpTy THEn return truE.\n\n  notE: thE gIven list Is GuArANTEEd to hAVe uniQue elEMEnts.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*WE HaVE an arRaY 'arr' OF n inteGErs arr[1], arr[2],..., arr[N].The\n  nuMberS in tHe arRay will be RAnDOmLy oRdErEd. youR taSK Is tO DEtErmine IF\n  it is poSSiBle TO GEt aN ArrAY SOrTEd in NoN-decreAsInG ordER BY PeRForming \n  the FOlloWing operAtiOn on ThE giVEn arrAY:\n      YOu Are allOwEd to pERform RighT shIft oPEraTIon any nUmBEr of TiMEs.\n  \n  one rIGht shIFt operatIon mEans sHiftING aLl elemEntS oF THE array By one\n  poSition in The rigHT DirectiOn. tHe last eLEment OF THe arRAY wIll be MoVED TO\n  ThE starting posiTioN in ThE arrAy i.e. 0tH iNdEX. \n\n  If It is Possible to ObtAin tHe SorTed Array by perfOrminG THe abOve oPeraTiOn\n  Then return tRue Else return fAlse.\n  IF The Given ArRaY IS eMpTy THEn return truE.\n\n  notE: thE gIven list Is GuArANTEEd to hAVe uniQue elEMEnts.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let isMove = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      isMove = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n\n  if (isMove) {\n    arr[k] = arr[j];\n    arr[j] = arr[i];\n    arr[i] = arr[k];\n  }\n\n  return isMove;\n};\n\nmodule.exports = moveOneBall;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* iNpUT are tWo STRIngs a aND b consIstiNg Only Of 1s and 0s.\n  PeRFoRM bInaRy xOr oN thEse INPutS ANd return Result ALso as a stRInG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* iNpUT are tWo STRIngs a aND b consIstiNg Only Of 1s and 0s.\n  PeRFoRM bInaRy xOr oN thEse INPutS ANd return Result ALso as a stRInG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i] === b[i]) {\n      result += a[i];\n    } else {\n      result += '0';\n    }\n    i++;\n  }\n  while (i < a.length) {\n    result += a[i];\n    i++;\n  }\n  while (i < b.length) {\n    result += '0';\n    i++;\n  }\n  return result;\n};\n\n/*\n  iNpUT are tWo STRIngs a aND b consIstiNg Only Of 1s and 0s.\n  PeRFoRM bInaRy xOr oN thEse INPutS ANd return Result ALso as a stRInG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length) {\n    if (a[i] === b[i]) {\n      result += a[i];\n    } else {\n      result += '0';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  iNpUT are tWo STRIngs a aND b consIstiNg Only Of 1s and 0s.\n  PeRFoRM bInaRy xOr oN thEse INPutS ANd return Result ALso as a stRInG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length) {\n    if (a[i] === b[i]) {\n      result += a[i];\n    } else {\n      result += '0';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  iNpUT are tWo STRIngs a aND b consIstiNg Only Of 1s and 0s.\n  PeRFoRM bInaRy xOr oN thEse INPutS ANd return Result ALso as a stRInG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length) {\n    if (a[i] === b[i]) {\n      result += a[i];\n    } else {\n      result += '0';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  iNpUT are tWo STRIngs a aND b consIstiNg Only Of 1s and 0s.\n  PeRFoRM bInaRy xOr oN thEse INPutS ANd return Result ALso as a stRInG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length) {\n    if (a[i] === b[i]) {\n      result += a[i];\n    } else {\n      result += '0';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  iNpUT are tWo STRIngs a aND b consIstiNg Only Of 1s and 0s.\n  PeRFoRM bInaRy xOr oN thEse INPutS ANd return Result ALso as a stRInG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length) {\n    if (a[i] === b[i]) {\n      result += a[i];\n    } else {\n      result += '0';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  iNpUT are tWo STRIngs a aND b consIstiNg Only Of 1s and 0s.\n  PeRFoRM bInaRy xOr oN thEse INPutS ANd return Result ALso as a stRInG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length) {\n    if (a[i] === b[i]) {\n      result += a[i];\n    } else {\n      result += '0';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  iNpUT are tWo STRIngs a aND b consIstiNg Only Of 1s and 0s.\n  PeRFoRM bInaRy xOr oN thEse INPutS ANd return Result ALso as a stRInG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length) {\n    if (a[i] === b[i]) {\n      result += a[i];\n    } else {\n      result += '0';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  iNpUT are tWo STRIngs a aND b consIstiNg Only Of 1s and 0s.\n  PeRFoRM bInaRy xOr oN thEse INPutS ANd return Result ALso as a stRInG.\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*IN ThIS probLeM, YOU will IMplemEnt a FuNctiOn that takES tWO lIstS oF nUmBerS,\n  anD DEteRMInEs whetHEr it is pOSsIblE TO PerFOrm AN exchange OF eLEmEnTs\n  betwEeN tHem tO MAKE lst1 a list OF only even nUMberS.\n  There is No lImit On The NUmber OF eXcHanged ElEmentS BetweEn lst1 anD lst2.\n  If It is POssIBle to exchange elEmENts bEtWEeN the lst1 ANd lst2 to mAKe\n  all the ElemEnts oF lst1 to bE EVeN, return \"YES\".\n  OtHerWiSE, return \"no\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*IN ThIS probLeM, YOU will IMplemEnt a FuNctiOn that takES tWO lIstS oF nUmBerS,\n  anD DEteRMInEs whetHEr it is pOSsIblE TO PerFOrm AN exchange OF eLEmEnTs\n  betwEeN tHem tO MAKE lst1 a list OF only even nUMberS.\n  There is No lImit On The NUmber OF eXcHanged ElEmentS BetweEn lst1 anD lst2.\n  If It is POssIBle to exchange elEmENts bEtWEeN the lst1 ANd lst2 to mAKe\n  all the ElemEnts oF lst1 to bE EVeN, return \"YES\".\n  OtHerWiSE, return \"no\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i1 = 0;\n  let i2 = 0;\n  let i3 = 0;\n  let i4 = 0;\n  let i5 = 0;\n  let i6 = 0;\n  let i7 = 0;\n  let i8 = 0;\n  let i9 = 0;\n  let i10 = 0;\n  let i11 = 0;\n  let i12 = 0;\n  let i13 = 0;\n  let i14 = 0;\n  let i15 = 0;\n  let i16 = 0;\n  let i17 = 0;\n  let i18 = 0;\n  let i19 = 0;\n  let i20 = 0;\n  let i21 = 0;\n  let i22 = 0;\n  let i23 = 0;\n  let i24 = 0;\n  let i25 = 0;\n  let i26 = 0;\n  let i27 = 0;\n  let i28 = 0;\n  let i29 = 0;\n  let i30 = 0;\n  let i31 = 0;\n  let i32 = 0;\n  let i33 = 0;\n  let i34 = 0;\n  let i35 = 0;\n  let i36 = 0;\n  let i37 = 0;\n  let i38 = 0;\n  let i39 = 0;\n  let i40 = 0;\n  let i41 = 0;\n  let i42 = 0;\n  let i43 = 0;\n  let i44 = 0;\n  let i45 = 0;\n  let i46 = 0;\n  let i47 = 0;\n  let i48 = 0;\n  let i49 = 0;\n  let i50 = 0;\n  let i51 = 0;\n  let i52 = 0;\n  let i53 = 0;\n  let i54 = 0;\n  let i55 = 0;\n  let i56 = 0;\n  let i57 = 0;\n  let i58 = 0;\n  let i59 = 0;\n  let i60 = 0;\n  let i61 = 0;\n  let i62 = 0;\n  let i63 = 0;\n  let i64 = 0;\n  let i65 = 0;\n  let i66 = 0;\n  let i67 = 0;\n  let i68 = 0;\n  let i69 = 0;\n  let i70 = 0;\n  let i71 = 0;\n  let i72 = 0;\n  let i73 = 0;\n  let i74 = 0;\n  let i75 = 0;\n  let i76 = 0;\n  let i77 = 0;\n  let i78 = 0;\n  let i79 = 0;\n  let i80 = 0;\n  let i81 = 0;\n  let i82 = 0;\n  let i83 = 0;\n  let i84 = 0;\n  let i85 = 0;\n  let i86 = 0;\n  let i87 = 0;\n  let i88 = 0;\n  let i89 = 0;\n  let i90 = 0;\n  let i91 = 0;\n  let i92 = 0;\n  let i93 = 0;\n  let i94 = 0;\n  let i95 = 0;\n  let i96 = 0;\n  let i97 = 0;\n  let i98 = 0;\n  let i99 = 0;\n  let i100 = 0;\n  let i101 = 0;\n  let i102 = 0;\n  let i103 = 0;\n  let i104 = 0;\n  let i105 = 0;\n  let i106 = 0;\n  let i107 = 0;\n  let i108 = 0;\n  let i109 = 0;\n  let i110 = 0;\n  let i111 = 0;\n  let i112 = 0;\n  let i113 = 0;\n  let i114 = 0;\n  let i115 = 0;\n  let i116 = 0;\n  let i117 = 0;\n  let i118 = 0;\n  let i119 = 0;\n  let i120 = 0;\n  let i121 = 0;\n  let i122 = 0;\n  let i123 = 0;\n  let i124 = 0;\n  let i125 = 0;\n  let i126 = 0;\n  let i127 = 0;\n  let i128 = 0;\n  let i129 = 0;\n  let i130 = 0;\n  let i131 = 0;\n  let i132 = 0;\n  let i133", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*GIVeN a StrinG rEPREsentINg a spaCe sePaRateD lowercasE LeTTeRs, return a dIcTiOnAry\n  Of tHE LetTER wIth the MOst repeTItIon AND ConTAinING ThE CoRrEspondInG cOunt.\n  iF SEVeRAl letters hAVe thE same occUrrEnce, return AlL of THem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*GIVeN a StrinG rEPREsentINg a spaCe sePaRateD lowercasE LeTTeRs, return a dIcTiOnAry\n  Of tHE LetTER wIth the MOst repeTItIon AND ConTAinING ThE CoRrEspondInG cOunt.\n  iF SEVeRAl letters hAVe thE same occUrrEnce, return AlL of THem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let temp = '';\n  let i = 0;\n  while (i < test.length) {\n    temp = test.substr(i, 1);\n    if (histogram[temp] === undefined) {\n      histogram[temp] = 1;\n    } else {\n      histogram[temp]++;\n    }\n    i++;\n  }\n  return histogram;\n};\n\nmodule.exports = histogram;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*TASk\n  wE are gIvEN TWo strINgs s anD c, you HaVe to Deleted alL ThE ChAraCtErS in s tHat Are EQUal TO AnY charaCTer in c\n  then CHeCk iF THE reSUlt STRInG Is PaLindroMe.\n  a sTrinG IS CAlLEd palindroME if iT reads thE saMe baCkWarD As forWArD.\n  YOu shouLd return A tuple contAIning The rEsuLt stRIng ANd true/fAlSE for ThE ChEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*TASk\n  wE are gIvEN TWo strINgs s anD c, you HaVe to Deleted alL ThE ChAraCtErS in s tHat Are EQUal TO AnY charaCTer in c\n  then CHeCk iF THE reSUlt STRInG Is PaLindroMe.\n  a sTrinG IS CAlLEd palindroME if iT reads thE saMe baCkWarD As forWArD.\n  YOu shouLd return A tuple contAIning The rEsuLt stRIng ANd true/fAlSE for ThE ChEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let i = 0;\n  let j = s.length - 1;\n  let result = [];\n  let isEqual = true;\n  while (i < j) {\n    if (s[i] === c) {\n      isEqual = false;\n      break;\n    }\n    result.push(s[i]);\n    i++;\n  }\n  if (isEqual) {\n    result.push(c);\n  }\n  return result;\n};\n\nconst reverseInsert = (s, c) => {\n  let i = 0;\n  let j = s.length - 1;\n  let result = [];\n  let isEqual = true;\n  while (i < j) {\n    if (s[i] === c) {\n      isEqual = false;\n      break;\n    }\n    result.push(s[i]);\n    i++;\n  }\n  if (isEqual) {\n    result.push(c);\n  }\n  return result;\n};\n\nconst reverse = (s) => {\n  let result = [];\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    result.push(s[i]);\n    i++;\n  }\n  return result;\n};\n\nconst isPalindrome = (s) => {\n  let result = [];\n  let i = 0;\n  let j = s.length - 1;\n  let isEqual = true;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      isEqual = false;\n      break;\n    }\n    result.push(s[i]);\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome2 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = s.length - 1;\n  let isEqual = true;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      isEqual = false;\n      break;\n    }\n    result.push(s[i]);\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome3 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = s.length - 1;\n  let isEqual = true;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      isEqual = false;\n      break;\n    }\n    result.push(s[i]);\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome4 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = s.length - 1;\n  let isEqual = true;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      isEqual = false;\n      break;\n    }\n    result.push(s[i]);\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome5 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = s.length - 1;\n  let isEqual = true;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      isEqual = false;\n      break;\n    }\n    result.push(s[i]);\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome6 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = s.length - 1;\n  let isEqual = true;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      isEqual = false;\n      break;\n    }\n    result.push(s[i]);\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome7 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = s.length - 1;\n  let isEqual = true;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      isEqual = false;\n      break;\n    }\n    result.push(s[i]);\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome8 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = s.length - 1;\n  let isEqual = true;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      isEqual = false;\n      break;\n    }\n    result.push(s[i]);\n    i++;\n    j--;\n  }\n  return result;\n};\n\nconst isPalindrome9 = (s) => {\n  let result = [];\n  let i = 0;\n  let j = s.length - 1;\n  let isEqual = true;\n  while (i < j) {\n    if (s[i]!== s[j])", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*GIVeN A list of stRiNGS, Where EAch stRing CoNsisTs of only dIGiTS, return a list.\n  eacH eLeMeNt i oF thE OUtpUT ShOuld be \"THe numbeR Of Odd ELEMenTS in thE\n  STRiNG i oF tHe inpuT.\" wHeRe alL THE i's ShOUld be replaCEd by The numbeR\n  of Odd dIgIts in THe i'th strINg Of The inpUt.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*GIVeN A list of stRiNGS, Where EAch stRing CoNsisTs of only dIGiTS, return a list.\n  eacH eLeMeNt i oF thE OUtpUT ShOuld be \"THe numbeR Of Odd ELEMenTS in thE\n  STRiNG i oF tHe inpuT.\" wHeRe alL THE i's ShOUld be replaCEd by The numbeR\n  of Odd dIgIts in THe i'th strINg Of The inpUt.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let count = 0;\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length % 2 === 1) {\n      count++;\n    }\n    i++;\n  }\n  if (count % 2 === 0) {\n    res.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n  } else {\n    res.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n  }\n  return res;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  gIvEN an arRaY OF IntegERs nums, finD the MiNimuM sum of any NOn-EMpTy sUb-ArRaY\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN an arRaY OF IntegERs nums, finD the MiNimuM sum of any NOn-EMpTy sUb-ArRaY\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = Infinity;\n  let minSumIndex = 0;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n      minSumIndex = i;\n    }\n    if (sum > minSum) {\n      break;\n    }\n  }\n  return minSumIndex;\n};\n\nmodule.exports = minSubArraySum;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  yOu ARe givEn A RECtangULar grid of WellS. EAch rOw represeNTs A SiNglE wElL,\n  aNd eAch 1 in A ROw rEPReSents a SIngle unIT oF waTER.\n  eacH WelL HAS a COrReSpondiNg BuCket THAT CaN Be used to exTRact Water froM it, \n  And aLl BucKEts haVE tHe Same capacity.\n  YoUr Task iS To use The bUckEts tO EmpTY the welLs.\n  oUtpuT tHE nUmbeR Of timES you need To loWer thE bucKETs.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  yOu ARe givEn A RECtangULar grid of WellS. EAch rOw represeNTs A SiNglE wElL,\n  aNd eAch 1 in A ROw rEPReSents a SIngle unIT oF waTER.\n  eacH WelL HAS a COrReSpondiNg BuCket THAT CaN Be used to exTRact Water froM it, \n  And aLl BucKEts haVE tHe Same capacity.\n  YoUr Task iS To use The bUckEts tO EmpTY the welLs.\n  oUtpuT tHE nUmbeR Of timES you need To loWer thE bucKETs.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const grid_length = grid.length;\n  const grid_width = grid[0].length;\n  const buckets = [];\n  for (let i = 0; i < grid_length; i++) {\n    for (let j = 0; j < grid_width; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push(i * grid_width + j);\n      }\n    }\n  }\n  return buckets.length * capacity;\n};\n\nmodule.exports = maxFill;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  iN tHIs KatA, yOU HAve to SOrt an ArraY oF non-Negative iNTeGErS acCoRdInG to\n  NumBER of ONEs in Their bINary repREsEntATIOn in aSCenDING oRDeR.\n  FOr simiLaR nUmbeR OF ONeS, Sort based oN DeciMal value.\n\n  it mUst bE iMplEMenteD LiKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  iN tHIs KatA, yOU HAve to SOrt an ArraY oF non-Negative iNTeGErS acCoRdInG to\n  NumBER of ONEs in Their bINary repREsEntATIOn in aSCenDING oRDeR.\n  FOr simiLaR nUmbeR OF ONeS, Sort based oN DeciMal value.\n\n  it mUst bE iMplEMenteD LiKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let temp = arr.slice(0);\n  let sorted = [];\n  let i = 0;\n  let j = 0;\n  while (i < temp.length) {\n    let min = temp[i];\n    let minIndex = i;\n    let minValue = min;\n    let minIndexValue = min;\n    while (i < temp.length && temp[i] === minValue) {\n      i++;\n    }\n    while (j < temp.length && temp[j] === minValue) {\n      j++;\n    }\n    if (i < j) {\n      let tempIndex = i;\n      let tempValue = temp[i];\n      temp[i] = temp[j];\n      temp[j] = tempValue;\n      tempIndex = j;\n      tempValue = temp[j];\n      temp[j] = tempValue;\n      temp[i] = tempValue;\n      tempIndex = i;\n      tempValue = temp[i];\n      temp[i] = tempValue;\n      temp[j] = tempValue;\n      temp[tempIndex] = minValue;\n      temp[tempIndex] = minValue;\n    }\n    sorted.push(minValue);\n  }\n  return sorted;\n};\n\nconst sortArray2 = (arr) => {\n  let temp = arr.slice(0);\n  let sorted = [];\n  let i = 0;\n  let j = 0;\n  while (i < temp.length) {\n    let min = temp[i];\n    let minIndex = i;\n    let minValue = min;\n    let minIndexValue = min;\n    while (i < temp.length && temp[i] === minValue) {\n      i++;\n    }\n    while (j < temp.length && temp[j] === minValue) {\n      j++;\n    }\n    if (i < j) {\n      let tempIndex = i;\n      let tempValue = temp[i];\n      temp[i] = temp[j];\n      temp[j] = tempValue;\n      tempIndex = j;\n      tempValue = temp[j];\n      temp[j] = tempValue;\n      temp[i] = tempValue;\n      temp[tempIndex] = minValue;\n      temp[tempIndex] = minValue;\n    }\n    sorted.push(minValue);\n  }\n  return sorted;\n};\n\nconst sortArray3 = (arr) => {\n  let temp = arr.slice(0);\n  let sorted = [];\n  let i = 0;\n  let j = 0;\n  while (i < temp.length) {\n    let min = temp[i];\n    let minIndex = i;\n    let minValue = min;\n    let minIndexValue = min;\n    while (i < temp.length && temp[i] === minValue) {\n      i++;\n    }\n    while (j < temp.length && temp[j] === minValue) {\n      j++;\n    }\n    if (i < j) {\n      let tempIndex = i;\n      let tempValue = temp[i];\n      temp[i] = temp[j];\n      temp[j] = tempValue;\n      tempIndex = j;\n      tempValue = temp[j];\n      temp[j] = tempValue;\n      temp[i] = tempValue;\n      temp[tempIndex] = minValue;\n      temp[tempIndex] = minValue;\n    }\n    sorted.push(minValue);\n  }\n  return sorted;\n};\n\nconst sortArray4 = (arr) => {\n  let temp = arr.slice(0);\n  let sorted = [];\n  let i = 0;\n  let j = 0;\n  while (i < temp.length) {\n    let min = temp[i];\n    let minIndex = i;\n    let minValue = min;\n    let minIndexValue = min;\n    while (i < temp.length && temp[i] === minValue) {\n      i++;\n    }\n    while (j < temp.length && temp[j] === minValue) {\n      j++;\n    }\n    if (i < j) {\n      let tempIndex = i;\n      let tempValue = temp[i];\n      temp[i] = temp[j];\n      temp[j] = tempValue;\n      tempIndex = j;\n      tempValue = temp[j];\n      temp[j] = tempValue;\n      temp[i] = tempValue;\n      temp[tempIndex] = minValue;\n      temp[tempIndex] = minValue;\n    }\n    sorted.push(minValue);\n  }\n  return sorted;\n};\n\nconst sortArray5 = (arr) => {\n  let temp = arr.slice(0);\n  let sorted = [];\n  let i = 0;\n  let j = 0;\n  while (i < temp.length) {\n    let min = temp[i];\n    let minIndex = i;\n    let minValue = min;\n    let minIndexValue = min;\n    while (i < temp.length && temp[i] === minValue) {\n      i++;\n    }\n    while (j < temp.length && temp[j] === minValue) {\n      j++;\n    }\n    if (i < j) {\n      let tempIndex = i;\n      let tempValue = temp[i];\n      temp[i] = temp[j];\n      temp[j] = tempValue;\n      tempIndex = j;\n      tempValue = temp[j];\n      temp[j] = tempValue;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*GIVeN A striNg s AND A natuRAl numBer n, yOu Have Been taskeD To IMpLemEnT \n  a FuNctIon THAt rETUrNs a list of aLL words fROm StrING s ThaT ConTAIN eXAcTlY \n  n consoNaNtS, in ordER THEsE Words appeaR in The sTring s.\n  If tHe sTrinG s iS emPTy theN ThE fUnctioN sHould return AN emptY list.\n  NotE: yoU may ASsuME the inpUt STrinG cONtAins ONly leTTers and sPaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*GIVeN A striNg s AND A natuRAl numBer n, yOu Have Been taskeD To IMpLemEnT \n  a FuNctIon THAt rETUrNs a list of aLL words fROm StrING s ThaT ConTAIN eXAcTlY \n  n consoNaNtS, in ordER THEsE Words appeaR in The sTring s.\n  If tHe sTrinG s iS emPTy theN ThE fUnctioN sHould return AN emptY list.\n  NotE: yoU may ASsuME the inpUt STrinG cONtAins ONly leTTers and sPaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    let c = s.charAt(i);\n    if (c ==='') {\n      if (word!== '') {\n        words.push(word);\n        word = '';\n      }\n    } else {\n      word += c;\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  if (words.length < n) {\n    return [];\n  }\n  return words.slice(0, n);\n};\n\nmodule.exports = {\n  selectWords\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*YOU aRE giveN a word. yOUR task IS to fiNd thE cLoseSt vowel thAT sTAnDs bEtWeEn \n  Two ConSONanTS FrOm the rIGht side OF tHe word (cASE SenSItiVE).\n  \n  vOwELs in ThE beginNiNg And eNDING dOEsn't count. RETurn Empty strIng If yoU dIdn'T\n  Find aNY vOwEl met tHe Above COnditIon. \n\n  YOu mAy asSUme THat the gIvEN strInG CoNtaiNS EnglISh letter Only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*YOU aRE giveN a word. yOUR task IS to fiNd thE cLoseSt vowel thAT sTAnDs bEtWeEn \n  Two ConSONanTS FrOm the rIGht side OF tHe word (cASE SenSItiVE).\n  \n  vOwELs in ThE beginNiNg And eNDING dOEsn't count. RETurn Empty strIng If yoU dIdn'T\n  Find aNY vOwEl met tHe Above COnditIon. \n\n  YOu mAy asSUme THat the gIvEN strInG CoNtaiNS EnglISh letter Only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  if (word.length === 0) {\n    return \"\";\n  }\n\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const vowelIndex = vowels.indexOf(word[0]);\n  const vowelIndex2 = vowels.indexOf(word[word.length - 1]);\n\n  if (vowelIndex === -1 || vowelIndex2 === -1) {\n    return \"\";\n  }\n\n  if (vowelIndex === vowelIndex2) {\n    return word[vowelIndex];\n  }\n\n  if (vowelIndex < vowelIndex2) {\n    return word[vowelIndex];\n  }\n\n  return word[vowelIndex2];\n};\n\nexport default getClosestVowel;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* yOu ARe givEn A list OF Two stRIngs, bOth sTrIngs Consist of OPeN\n  PaRenThEsEs '(' Or cLosE PAreNTHeSes ')' onlY.\n  your job IS tO chECK If iT Is pOSSIbLE tO cOncateNaTe The tWO STRiNGs in\n  some ordeR, That The resulTinG strInG wiLL be goOD.\n  A StRing S iS cOnsidERed to Be goOd iF and ONly IF all parEnTHeseS in S\n  ARe BalaNCed. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* yOu ARe givEn A list OF Two stRIngs, bOth sTrIngs Consist of OPeN\n  PaRenThEsEs '(' Or cLosE PAreNTHeSes ')' onlY.\n  your job IS tO chECK If iT Is pOSSIbLE tO cOncateNaTe The tWO STRiNGs in\n  some ordeR, That The resulTinG strInG wiLL be goOD.\n  A StRing S iS cOnsidERed to Be goOd iF and ONly IF all parEnTHeseS in S\n  ARe BalaNCed. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  if (lst.length < 2) return false;\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] === '(' && lst[j] === ')') {\n      return true;\n    }\n    if (lst[i] === ')' && lst[j] === '(') {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return false;\n};\n\nmodule.exports = matchParens;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* oUt OF list of strings, return thE longest oNE. rEturn THe firSt onE in cAse oF multiple\n  strings OF tHE sAme LeNgTh. retUrn NULl in cASE tHe inpuT list Is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* oUt OF list of strings, return thE longest oNE. rEturn THe firSt onE in cAse oF multiple\n  strings OF tHE sAme LeNgTh. retUrn NULl in cASE tHe inpuT list Is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  let max = '';\n  let maxLen = 0;\n  for (let i = 0; i < strings.length; i++) {\n    let curr = strings[i];\n    if (curr.length > maxLen) {\n      max = curr;\n      maxLen = curr.length;\n    }\n  }\n  return max;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  gIvEN an arRaY arr OF IntegERs and A posItIve iNteger k, return a soRTeD list \n  Of LenGtH k wItH thE maximum k nuMBErs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN an arRaY arr OF IntegERs and A posItIve iNteger k, return a soRTeD list \n  Of LenGtH k wItH thE maximum k nuMBErs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  const max = arr[0];\n  for (let i = 1; i < len; i++) {\n    max = Math.max(max, arr[i]);\n  }\n  return arr.slice(0, k).concat(max);\n};\n\nmodule.exports = maximum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*GIVeN A non-eMpTY list OF inteGErs, return thE sum Of All oF the odd elEMeNTs ThaT aRe in EvEn pOsiTIOns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*GIVeN A non-eMpTY list OF inteGErs, return thE sum Of All oF the odd elEMeNTs ThaT aRe in EvEn pOsiTIOns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOst TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOst TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  gIvEN a posItIVE IntegER n, return a sorTed list tHaT has The odd numBErS in CoLlaTz SeQuEncE.\n\n  ThE cOllATZ cOnjectURe is a coNJeCtuRE in MAthEMatICS ThAT cOnCerns a SeQuEnce DEFINeD\n  As follows: sTArt wIth any poSitIve iNtEgeR n. then eACh TeRm is obTaIned fROm the \n  PrevIouS terM As fOLlows: if ThE PrevIoUS tErm iS Even, tHE next terM is oNe halF of \n  tHE PrEvious TerM. IF THE previOus term Is odd, tHe next TERm is 3 timEs THe previOUs\n  terM PLUs 1. ThE COnJectuRe IS THAT nO matter what vaLue OF n, tHe seQueNcE wILl aLwayS reach 1.\n\n  Note: \n      1. colLatz(1) Is [1].\n      2. RetUrnEd list sorted in incReasiNG OrdeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a posItIVE IntegER n, return a sorTed list tHaT has The odd numBErS in CoLlaTz SeQuEncE.\n\n  ThE cOllATZ cOnjectURe is a coNJeCtuRE in MAthEMatICS ThAT cOnCerns a SeQuEnce DEFINeD\n  As follows: sTArt wIth any poSitIve iNtEgeR n. then eACh TeRm is obTaIned fROm the \n  PrevIouS terM As fOLlows: if ThE PrevIoUS tErm iS Even, tHE next terM is oNe halF of \n  tHE PrEvious TerM. IF THE previOus term Is odd, tHe next TERm is 3 timEs THe previOUs\n  terM PLUs 1. ThE COnJectuRe IS THAT nO matter what vaLue OF n, tHe seQueNcE wILl aLwayS reach 1.\n\n  Note: \n      1. colLatz(1) Is [1].\n      2. RetUrnEd list sorted in incReasiNG OrdeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  let res = [];\n  let curr = n;\n  while (curr > 1) {\n    res.push(curr);\n    curr = curr / 2;\n  }\n  res.push(curr);\n  return res;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*YOU hAVe to wRiTE A FunctIOn whiCh vaLiDateS a given date stRInG AnD\n  reTuRnS tRue If tHE date Is vALId OtherwISe false.\n  tHe date Is vALID if ALl oF THE fOLlOwIng rulEs ArE satISFIEd:\n  1. tHe date string is NOt emPty.\n  2. The nuMbeR of dAyS is NOt lesS ThAn 1 Or highEr Than 31 dAYs for MontHs 1,3,5,7,8,10,12. ANd thE NumBEr of dayS iS Not lEsS ThAn 1 or HIgher THan 30 days fOr moNths 4,6,9,11. ANd, thE NUmBer of dAys Is NOT Less thAn 1 or higHer thaN 29 for thE MOnth 2.\n  3. The MoNThs shouLD not bE LESs thAN 1 Or HigheR tHAN 12.\n  4. tHE date sHould be in the forMat: MM-dD-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*YOU hAVe to wRiTE A FunctIOn whiCh vaLiDateS a given date stRInG AnD\n  reTuRnS tRue If tHE date Is vALId OtherwISe false.\n  tHe date Is vALID if ALl oF THE fOLlOwIng rulEs ArE satISFIEd:\n  1. tHe date string is NOt emPty.\n  2. The nuMbeR of dAyS is NOt lesS ThAn 1 Or highEr Than 31 dAYs for MontHs 1,3,5,7,8,10,12. ANd thE NumBEr of dayS iS Not lEsS ThAn 1 or HIgher THan 30 days fOr moNths 4,6,9,11. ANd, thE NUmBer of dAys Is NOT Less thAn 1 or higHer thaN 29 for thE MOnth 2.\n  3. The MoNThs shouLD not bE LESs thAN 1 Or HigheR tHAN 12.\n  4. tHE date sHould be in the forMat: MM-dD-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const day = dateArray[0];\n  const month = dateArray[1];\n  const year = dateArray[2];\n\n  const dayOfMonth = parseInt(day);\n  const monthOfMonth = parseInt(month);\n  const yearOfYear = parseInt(year);\n\n  const monthOfMonthIsNotLessThan1 = monthOfMonth > 0 && monthOfMonth <= 12;\n  const dayOfMonthIsNotLessThan1 = dayOfMonth > 0 && dayOfMonth <= 31;\n  const dayOfMonthIsNotLessThan30 = dayOfMonth > 0 && dayOfMonth <= 29;\n  const monthOfMonthIsNotLessThan4 = monthOfMonth > 0 && monthOfMonth <= 12;\n  const dayOfMonthIsNotLessThan12 = dayOfMonth > 0 && dayOfMonth <= 31;\n  const dayOfMonthIsNotLessThan30 = dayOfMonth > 0 && dayOfMonth <= 29;\n  const yearIsNotLessThan2040 = year > 0 && year <= 2040;\n  const yearIsNotLessThan2040 = year > 0 && year <= 2040;\n\n  const monthIsNotLessThan4 = monthOfMonthIsNotLessThan4;\n  const dayIsNotLessThan12 = dayOfMonthIsNotLessThan12;\n  const dayIsNotLessThan30 = dayOfMonthIsNotLessThan30;\n  const yearIsNotLessThan2040 = yearIsNotLessThan2040;\n\n  const isMonthValid = monthOfMonthIsNotLessThan1 && monthOfMonthIsNotLessThan4 && monthOfMonthIsNotLessThan12;\n  const isDayValid = dayOfMonthIsNotLessThan1 && dayOfMonthIsNotLessThan30 && dayOfMonthIsNotLessThan12;\n  const isYearValid = yearIsNotLessThan2040 && yearIsNotLessThan2040;\n\n  return isMonthValid && isDayValid && isYearValid;\n};\n\nexport default validDate;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* gIvEN a strInG OF Words, return A list Of worDs spLiT on wHitespace, IF nO WhIteSpAcEs ExiSts in THE teXT YoU\n  shoulD Split on COmMas ',' IF NO coMMas EXIStS YoU sHould return tHe NuMber OF LOWeR-Case letterS With Odd order in The\n  AlphAbEt, oRD('a') = 0, ord('B') = 1, ... OrD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* gIvEN a strInG OF Words, return A list Of worDs spLiT on wHitespace, IF nO WhIteSpAcEs ExiSts in THE teXT YoU\n  shoulD Split on COmMas ',' IF NO coMMas EXIStS YoU sHould return tHe NuMber OF LOWeR-Case letterS With Odd order in The\n  AlphAbEt, oRD('a') = 0, ord('B') = 1,... OrD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let word = \"\";\n  let wordCount = 0;\n  let wordStart = 0;\n  let wordEnd = 0;\n  let wordLength = 0;\n  let wordChar = \"\";\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n  let wordCharLength = 0;\n  let wordCharCount = 0;\n  let wordCharLength = 0;\n  let wordCharStart = 0;\n  let wordCharEnd = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* gIvEN a list of nUmBERS, return whetHEr or nOt thEy Are sOrted\n  in asceNDiNG oRdeR. IF list hAs MorE thAN 1 DupLICaTe of thE Same\n  numBEr, return FalSE. aSsuME no NEGAtIVe NuMbers aNd OnLy inTEGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* gIvEN a list of nUmBERS, return whetHEr or nOt thEy Are sOrted\n  in asceNDiNG oRdeR. IF list hAs MorE thAN 1 DupLICaTe of thE Same\n  numBEr, return FalSE. aSsuME no NEGAtIVe NuMbers aNd OnLy inTEGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nmodule.exports = {\n  isSorted,\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*YOU aRE giveN tWO INtervALs,\n  wheRe eaCh InteRval is a paIR oF InTegErS. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*YOU aRE giveN tWO INtervALs,\n  wheRe eaCh InteRval is a paIR oF InTegErS. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start >= interval2.start && interval1.end <= interval2.end) {\n    return \"YES\"\n  }\n  if (interval1.start <= interval2.start && interval1.end >= interval2.end) {\n    return \"NO\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  yOu ARe givEn AN ARray arr oF IntegErs aNd You nEed to return\n  sum oF MaGNiTudEs Of InTegErs MULtiPLIeD by proDUct of alL SiGns\n  OF EAch NUmbER in THe ARrAy, RepresEnTeD by 1, -1 oR 0.\n  nOTE: return nULl for empty arr.\n\n  eXampLe:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  yOu ARe givEn AN ARray arr oF IntegErs aNd You nEed to return\n  sum oF MaGNiTudEs Of InTegErs MULtiPLIeD by proDUct of alL SiGns\n  OF EAch NUmbER in THe ARrAy, RepresEnTeD by 1, -1 oR 0.\n  nOTE: return nULl for empty arr.\n\n  eXampLe:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  const sign = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    sign = sign * arr[i];\n  }\n  return sign;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  gIvEN a grid witH N ROWS and N COlumnS (N >= 2) anD a PosiTive integER k, \n  eACh CelL oF tHe grid ConTaiNS A vaLUE. EVery inTEger in the RAnGe [1, N * n]\n  INCluSIve APPEaRS eXaCtly onCe On The cELLS Of THe grid.\n\n  You have tO Find The minimUm pAth oF lEngTH k in the grid. YOU cAn Start\n  fRoM any cELl, and in Each SteP you CAn mOVe to any Of THe neIgHBoR celLS,\n  in otheR Words, you Can gO to ceLls wHICh Share aN edGe WITH you cuRrent\n  ceLl.\n  PleaSe note THAt a path Of LEngth k meANs visITINg exACTlY k cellS (nOT\n  NECEsSarily distincT).\n  YoU cAnNOT Go oFf ThE grid.\n  a paTh A (oF length k) is cOnsIderEd LesS thAn a path B (of lEngth k) IF\n  AfteR makIng tHe OrDered LisTs of tHe valUEs oN the cElLs THAt a aNd b GO\n  throUGh (lET's CaLl thEm LsT_A AND LSt_B), lsT_a is leXicogRAPhically LESS\n  tHaN lst_b, in OtHER wordS, TheRe exiST an iNTeger iNdex i (1 <= i <= k)\n  sUch THAT lSt_a[I] < lst_B[I] And foR aNy j (1 <= j < i) we HavE\n  lsT_A[j] = lsT_b[j].\n  IT iS guaRaNteeD tHat The aNsweR IS unIque.\n  RetUrN An ORDeReD list oF the ValueS oN the ceLls thaT THE MInImuM paTh GO tHRoUgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a grid witH N ROWS and N COlumnS (N >= 2) anD a PosiTive integER k, \n  eACh CelL oF tHe grid ConTaiNS A vaLUE. EVery inTEger in the RAnGe [1, N * n]\n  INCluSIve APPEaRS eXaCtly onCe On The cELLS Of THe grid.\n\n  You have tO Find The minimUm pAth oF lEngTH k in the grid. YOU cAn Start\n  fRoM any cELl, and in Each SteP you CAn mOVe to any Of THe neIgHBoR celLS,\n  in otheR Words, you Can gO to ceLls wHICh Share aN edGe WITH you cuRrent\n  ceLl.\n  PleaSe note THAt a path Of LEngth k meANs visITINg exACTlY k cellS (nOT\n  NECEsSarily distincT).\n  YoU cAnNOT Go oFf ThE grid.\n  a paTh A (oF length k) is cOnsIderEd LesS thAn a path B (of lEngth k) IF\n  AfteR makIng tHe OrDered LisTs of tHe valUEs oN the cElLs THAt a aNd b GO\n  throUGh (lET's CaLl thEm LsT_A AND LSt_B), lsT_a is leXicogRAPhically LESS\n  tHaN lst_b, in OtHER wordS, TheRe exiST an iNTeger iNdex i (1 <= i <= k)\n  sUch THAT lSt_a[I] < lst_B[I] And foR aNy j (1 <= j < i) we HavE\n  lsT_A[j] = lsT_b[j].\n  IT iS guaRaNteeD tHat The aNsweR IS unIque.\n  RetUrN An ORDeReD list oF the ValueS oN the ceLls thaT THE MInImuM paTh GO tHRoUgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const len = grid.length;\n  const res = [];\n  for (let i = 1; i <= len; i++) {\n    res.push([]);\n  }\n  for (let i = 1; i <= len; i++) {\n    for (let j = 1; j <= len; j++) {\n      if (i === 1 || grid[i - 1][j] > grid[i][j]) {\n        res[i][j] = i;\n      } else {\n        res[i][j] = res[i - 1][j];\n      }\n    }\n  }\n  for (let i = 1; i <= k; i++) {\n    res[i][1] = 1;\n  }\n  return res;\n};\n\nmodule.exports = minPath;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* rEtURn a greAtEST CommoN DivisOr of TwO intEgers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "/* rEtURn a greAtEST CommoN DivisOr of TwO intEgers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === 2) {\n    return b;\n  }\n  if (b === 2) {\n    return a;\n  }\n  if (a === 3) {\n    return b;\n  }\n  if (b === 3) {\n    return a;\n  }\n  if (a === 4) {\n    return b;\n  }\n  if (b === 4) {\n    return a;\n  }\n  if (a === 5) {\n    return b;\n  }\n  if (b === 5) {\n    return a;\n  }\n  if (a === 6) {\n    return b;\n  }\n  if (b === 6) {\n    return a;\n  }\n  if (a === 7) {\n    return b;\n  }\n  if (b === 7) {\n    return a;\n  }\n  if (a === 8) {\n    return b;\n  }\n  if (b === 8) {\n    return a;\n  }\n  if (a === 9) {\n    return b;\n  }\n  if (b === 9) {\n    return a;\n  }\n  if (a === 10) {\n    return b;\n  }\n  if (b === 10) {\n    return a;\n  }\n  if (a === 11) {\n    return b;\n  }\n  if (b === 11) {\n    return a;\n  }\n  if (a === 12) {\n    return b;\n  }\n  if (b === 12) {\n    return a;\n  }\n  if (a === 13) {\n    return b;\n  }\n  if (b === 13) {\n    return a;\n  }\n  if (a === 14) {\n    return b;\n  }\n  if (b === 14) {\n    return a;\n  }\n  if (a === 15) {\n    return b;\n  }\n  if (b === 15) {\n    return a;\n  }\n  if (a === 16) {\n    return b;\n  }\n  if (b === 16) {\n    return a;\n  }\n  if (a === 17) {\n    return b;\n  }\n  if (b === 17) {\n    return a;\n  }\n  if (a === 18) {\n    return b;\n  }\n  if (b === 18) {\n    return a;\n  }\n  if (a === 19) {\n    return b;\n  }\n  if (b === 19) {\n    return a;\n  }\n  if (a === 20) {\n    return b;\n  }\n  if (b === 20) {\n    return a;\n  }\n  if (a === 21) {\n    return b;\n  }\n  if (b === 21) {\n    return a;\n  }\n  if (a === 22) {\n    return b;\n  }\n  if (b === 22) {\n    return a;\n  }\n  if (a === 23) {\n    return b;\n  }\n  if (b === 23) {\n    return a;\n  }\n  if (a === 24) {\n    return b;\n  }\n  if (b === 24) {\n    return a;\n  }\n  if (a === 25) {\n    return b;\n  }\n  if (b === 25) {\n    return a;\n  }\n  if (a === 26) {\n    return b;\n  }\n  if (b === 26) {\n    return a;\n  }\n  if (a === 27) {\n    return b;\n  }\n  if (b === 27) {\n    return a;\n  }\n  if (a === 28) {\n    return b;\n  }\n  if (b === 28) {\n    return a;\n  }\n  if (a === 29) {\n    return b;\n  }\n  if (b === 29) {\n    return a;\n  }\n  if (a === 30) {\n    return b;\n  }\n  if (b === 30) {\n    return a;\n  }\n  if (a === 31) {\n    return b;\n  }\n  if (b === 31) {\n    return a;\n  }\n  if (a === 32) {\n    return b;\n  }\n  if (b === 32) {\n    return a;\n  }\n  if (a === 33) {\n    return b;\n  }\n  if (b === 33) {\n    return a;\n  }\n  if (a === 34) {\n    return b;\n  }\n  if (b === 34) {\n    return a;\n  }\n  if (a === 35) {\n    return b;\n  }\n  if (b === 35) {\n    return a;\n  }\n  if (a === 36) {\n    return b;\n  }\n  if (b === 36) {\n    return a;\n  }\n  if (a === 37) {\n    return b;\n  }\n  if (b === 37) {\n    return a;\n  }\n  if (a === 38) {\n    return b;\n  }\n  if (b === 38) {\n    return a;\n  }\n  if (a === 39) {\n    return b;\n  }\n  if (b === 39) {\n    return a;\n  }\n  if (a === 40) {\n    return b;\n  }\n  if (b === 40) {\n    return a;\n  }\n  if (a === 41) {\n    return b;\n  }\n  if (b === 41)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*EVErYOne knOwS fIBonacCI sequEnce, It Was sTudied deePLy BY mAthEmAtIcIanS in \n  thE LAst COUpLe centURies. HowEVeR, whAT PEopLE doN'T KNoW Is trIbonacCi SeQuenCE.\n  tRIbONacci sequeNCe is Defined bY thE recUrRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is EVeN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), iF n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*EVErYOne knOwS fIBonacCI sequEnce, It Was sTudied deePLy BY mAthEmAtIcIanS in \n  thE LAst COUpLe centURies. HowEVeR, whAT PEopLE doN'T KNoW Is trIbonacCi SeQuenCE.\n  tRIbONacci sequeNCe is Defined bY thE recUrRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is EVeN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), iF n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let [a, b, c] = [1, 1, 1];\n  let i = 2;\n  while (i < n) {\n    [a, b, c] = [b, a + b, c + a + b];\n    i++;\n  }\n  return [a, b, c];\n};\n\nconst test = (n) => {\n  let [a, b, c] = tri(n);\n  console.log(`tri(${n}) = ${a} ${b} ${c}`);\n};\n\ntest(1);\ntest(2);\ntest(3);\ntest(4);\ntest(5);\ntest(6);\ntest(7);\ntest(8);\ntest(9);\ntest(10);\ntest(11);\ntest(12);\ntest(13);\ntest(14);\ntest(15);\ntest(16);\ntest(17);\ntest(18);\ntest(19);\ntest(20);\ntest(21);\ntest(22);\ntest(23);\ntest(24);\ntest(25);\ntest(26);\ntest(27);\ntest(28);\ntest(29);\ntest(30);\ntest(31);\ntest(32);\ntest(33);\ntest(34);\ntest(35);\ntest(36);\ntest(37);\ntest(38);\ntest(39);\ntest(40);\ntest(41);\ntest(42);\ntest(43);\ntest(44);\ntest(45);\ntest(46);\ntest(47);\ntest(48);\ntest(49);\ntest(50);\ntest(51);\ntest(52);\ntest(53);\ntest(54);\ntest(55);\ntest(56);\ntest(57);\ntest(58);\ntest(59);\ntest(60);\ntest(61);\ntest(62);\ntest(63);\ntest(64);\ntest(65);\ntest(66);\ntest(67);\ntest(68);\ntest(69);\ntest(70);\ntest(71);\ntest(72);\ntest(73);\ntest(74);\ntest(75);\ntest(76);\ntest(77);\ntest(78);\ntest(79);\ntest(80);\ntest(81);\ntest(82);\ntest(83);\ntest(84);\ntest(85);\ntest(86);\ntest(87);\ntest(88);\ntest(89);\ntest(90);\ntest(91);\ntest(92);\ntest(93);\ntest(94);\ntest(95);\ntest(96);\ntest(97);\ntest(98);\ntest(99);\ntest(100);\ntest(101);\ntest(102);\ntest(103);\ntest(104);\ntest(105);\ntest(106);\ntest(107);\ntest(108);\ntest(109);\ntest(110);\ntest(111);\ntest(112);\ntest(113);\ntest(114);\ntest(115);\ntest(116);\ntest(117);\ntest(118);\ntest(119);\ntest(120);\ntest(121);\ntest(122);\ntest(123);\ntest(124);\ntest(125);\ntest(126);\ntest(127);\ntest(128);\ntest(129);\ntest(130);\ntest(131);\ntest(132);\ntest(133);\ntest(134);\ntest(135);\ntest(136);\ntest(137);\ntest(138);\ntest(139);\ntest(140);\ntest(141);\ntest(142);\ntest(143);\ntest(144);\ntest(145);\ntest(146);\ntest(147);\ntest(148);\ntest(149);\ntest(150);\ntest(151);\ntest(152);\ntest(153);\ntest(154);\ntest(155);\ntest(156);\ntest(157);\ntest(158);\ntest(159);\ntest(160);\ntest(161);\ntest(162);\ntest(163);\ntest(164);\ntest(165);\ntest(166);\ntest(167);\ntest(168);\ntest(169);\ntest(170);\ntest(171);\ntest(172);\ntest(173);\ntest(174);\ntest(175);\ntest(176);\ntest(177);\ntest(178);\ntest(179);\ntest(180);\ntest(181);\ntest(182);\ntest(183);\ntest(184);\ntest(185);\ntest(186);\ntest(187);\ntest(188);\ntest(189);\ntest(190);\ntest(191);\ntest(192);\ntest(193);\ntest(194);\ntest(195);\ntest(196);\ntest(197);\ntest(198);\ntest(199);\ntest(200);\ntest(201);\ntest(202);\ntest(203);\ntest(204);\ntest(205);\ntest(206);\ntest(207);\ntest(208);\ntest(209);\ntest(210);\ntest(211);\ntest(212);\ntest(213);\ntest(214);\ntest(215);\ntest(216);\ntest(217);\ntest(218);\ntest(219);\ntest(220);\ntest(221);\ntest(222", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Odd digits.\n  Return 0 IF aLL digits aRe eVeN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Odd digits.\n  Return 0 IF aLL digits aRe eVeN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let i = 0\n  while (n > 0) {\n    n = n / 10\n    i++\n  }\n  return i\n}\n\nmodule.exports = digits\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  cReATe a fuNcTION that TAkes a string As inPuT whiCh containS OnLY sQuaRe BrAcKetS.\n  ThE FUncTIOn Should return TRue if anD OnLy iF THEre IS a vALID sUBsEqUence oF bRaCketS\n  WHERe AT least one bRAckeT in the subsEquEnce Is NesTEd.\n  isNested('[[]]') ➞ truE\n  isNested('[]]]]]]][[[[[]') ➞ FaLsE\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ FaLse\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\nConsT isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  cReATe a fuNcTION that TAkes a string As inPuT whiCh containS OnLY sQuaRe BrAcKetS.\n  ThE FUncTIOn Should return TRue if anD OnLy iF THEre IS a vALID sUBsEqUence oF bRaCketS\n  WHERe AT least one bRAckeT in the subsEquEnce Is NesTEd.\n  isNested('[[]]') ➞ truE\n  isNested('[]]]]]]][[[[[]') ➞ FaLsE\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ FaLse\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\nConsT isNested = (string) => {\n  let isNested = false;\n  let isNestedCount = 0;\n  let isNestedIndex = 0;\n  let isNestedIndex2 = 0;\n  let isNestedIndex3 = 0;\n  let isNestedIndex4 = 0;\n  let isNestedIndex5 = 0;\n  let isNestedIndex6 = 0;\n  let isNestedIndex7 = 0;\n  let isNestedIndex8 = 0;\n  let isNestedIndex9 = 0;\n  let isNestedIndex10 = 0;\n  let isNestedIndex11 = 0;\n  let isNestedIndex12 = 0;\n  let isNestedIndex13 = 0;\n  let isNestedIndex14 = 0;\n  let isNestedIndex15 = 0;\n  let isNestedIndex16 = 0;\n  let isNestedIndex17 = 0;\n  let isNestedIndex18 = 0;\n  let isNestedIndex19 = 0;\n  let isNestedIndex20 = 0;\n  let isNestedIndex21 = 0;\n  let isNestedIndex22 = 0;\n  let isNestedIndex23 = 0;\n  let isNestedIndex24 = 0;\n  let isNestedIndex25 = 0;\n  let isNestedIndex26 = 0;\n  let isNestedIndex27 = 0;\n  let isNestedIndex28 = 0;\n  let isNestedIndex29 = 0;\n  let isNestedIndex30 = 0;\n  let isNestedIndex31 = 0;\n  let isNestedIndex32 = 0;\n  let isNestedIndex33 = 0;\n  let isNestedIndex34 = 0;\n  let isNestedIndex35 = 0;\n  let isNestedIndex36 = 0;\n  let isNestedIndex37 = 0;\n  let isNestedIndex38 = 0;\n  let isNestedIndex39 = 0;\n  let isNestedIndex40 = 0;\n  let isNestedIndex41 = 0;\n  let isNestedIndex42 = 0;\n  let isNestedIndex43 = 0;\n  let isNestedIndex44 = 0;\n  let isNestedIndex45 = 0;\n  let isNestedIndex46 = 0;\n  let isNestedIndex47 = 0;\n  let isNestedIndex48 = 0;\n  let isNestedIndex49 = 0;\n  let isNestedIndex50 = 0;\n  let isNestedIndex51 = 0;\n  let isNestedIndex52 = 0;\n  let isNestedIndex53 = 0;\n  let isNestedIndex54 = 0;\n  let isNestedIndex55 = 0;\n  let isNestedIndex56 = 0;\n  let isNestedIndex57 = 0;\n  let isNestedIndex58 = 0;\n  let isNestedIndex59 = 0;\n  let isNestedIndex60 = 0;\n  let isNestedIndex61 = 0;\n  let isNestedIndex62 = 0;\n  let isNestedIndex63 = 0;\n  let isNestedIndex64 = 0;\n  let isNestedIndex65 = 0;\n  let isNestedIndex66 = 0;\n  let isNestedIndex67 = 0;\n  let isNestedIndex68 = 0;\n  let isNestedIndex69 = 0;\n  let isNestedIndex70 = 0;\n  let isNestedIndex71 = 0;\n  let isNestedIndex72 = 0;\n  let isNestedIndex73 = 0;\n  let isNestedIndex74 = 0;\n  let isNestedIndex75 = 0;\n  let isNestedIndex76 = 0;\n  let isNestedIndex77 = 0;\n  let isNestedIndex78 = 0;\n  let isNestedIndex79 = 0;\n  let isNestedIndex80 = 0;\n  let isNestedIndex81 = 0;\n  let isNestedIndex82 = 0;\n  let isNestedIndex83 = 0;\n  let isNestedIndex84 = 0;\n  let isNestedIndex85 = 0;\n  let isNestedIndex86 = 0;\n  let isNestedIndex87 = 0;\n  let isNestedIndex88 = 0;\n  let isNestedIndex89 = 0;\n  let isNestedIndex90 = 0;\n  let isNestedIndex91 = 0;\n  let isNestedIndex92 = 0;\n  let isNestedIndex93 = 0;\n  let isNestedIndex94 = 0;\n  let isNestedIndex95 = 0;\n  let isNestedIndex96 = 0;\n  let isNestedIndex97 = 0;\n  let isNestedIndex98 = 0;\n  let isNestedIndex99 = 0;\n  let isNestedIndex100 = 0;\n  let isNestedIndex101 = 0;\n  let isNestedIndex102 = 0;\n  let isNestedIndex103 = 0;\n  let isNestedIndex104 = 0;\n  let isNestedIndex105 = 0;\n  let isNestedIndex106 = 0;\n  let isNestedIndex107 = 0;\n  let isNestedIndex108 = 0;\n  let isNestedIndex109 = 0;\n  let isNestedIndex110 = 0;\n  let isNestedIndex111 = 0;\n  let isNestedIndex112 = 0;\n  let isNestedIndex113 = 0;\n  let isNestedIndex114 = 0;\n  let isNestedIndex115 = 0;\n  let isNestedIndex116 = 0;\n  let isNestedIndex117 = 0;\n  let isNestedIndex118 = 0;\n  let isNested", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*YOU aRE giveN a list OF NUmberS.\n  you neEd to return ThE sum Of squared NUmBErS in thE gIvEn list,\n  RouNd eACH elEMEnT in the list to THe upper int(Ceiling) FIrSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*YOU aRE giveN a list OF NUmberS.\n  you neEd to return ThE sum Of squared NUmBErS in thE gIvEn list,\n  RouNd eACH elEMEnT in the list to THe upper int(Ceiling) FIrSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* cReATe a fuNcTION that REturnS truE iF the Last charaCTeR\n  Of A giVeN sTrIng Is aN ALphABEtIcal chARacter aND iS noT\n  A PArt OF a wORD, AnD FaLsE otherWiSe.\n  note: \"WORD\" Is A Group of chaRActeRs separaTed By spAcE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* cReATe a fuNcTION that REturnS truE iF the Last charaCTeR\n  Of A giVeN sTrIng Is aN ALphABEtIcal chARacter aND iS noT\n  A PArt OF a wORD, AnD FaLsE otherWiSe.\n  note: \"WORD\" Is A Group of chaRActeRs separaTed By spAcE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n  let lastChar = txt[txt.length - 1];\n  let isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter;\n};\n\nmodule.exports = checkIfLastCharIsALetter;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*CREaTE a funCtION Which REturnS the LaRgesT index of aN ElEMeNt wHiCh\n  Is Not GreATEr tHAN oR equal TO the eleMEnT imMEDIatELy pRECEdINg It. if\n  no suCh ElEmenT EXIStS Then return -1. The givEN arrAy will noT coNtaiN\n  dUplICate vALuEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*CREaTE a funCtION Which REturnS the LaRgesT index of aN ElEMeNt wHiCh\n  Is Not GreATEr tHAN oR equal TO the eleMEnT imMEDIatELy pRECEdINg It. if\n  no suCh ElEmenT EXIStS Then return -1. The givEN arrAy will noT coNtaiN\n  dUplICate vALuEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let arrLen = arr.length;\n  let arrIndex = 0;\n  let arrIndexes = [];\n  let arrIndexesLen = 0;\n  let arrIndexesMax = 0;\n  let arrIndexesMaxLen = 0;\n  let arrIndexesMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLen = 0;\n  let arrIndexesMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLen = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLen = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLen = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax = 0;\n  let arrIndexesMaxLenMaxLenMaxLenMaxLenMaxLenMax", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* cReATe a funCtION That rETurns a tuple (a, b), WherE 'a' iS\n  the Largest of NEgATiVe iNtEgErS, anD 'b' is THE smALLeSt\n  of poSItive inTEgErs in a list.\n  iF THerE Is nO NEGaTIvE oR positIvE iNtegERS, return THeM As null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* cReATe a funCtION That rETurns a tuple (a, b), WherE 'a' iS\n  the Largest of NEgATiVe iNtEgErS, anD 'b' is THE smALLeSt\n  of poSItive inTEgErs in a list.\n  iF THerE Is nO NEGaTIvE oR positIvE iNtegERS, return THeM As null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = null;\n  let b = null;\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      a = lst[i];\n      b = lst[j];\n      i++;\n    } else {\n      b = lst[i];\n      a = lst[j];\n      j--;\n    }\n  }\n  return [a, b];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  cReATe a funCtION That tAKes inTegeRs, FloaTs, or strinGS rEPrEseNtInG\n  rEal NumBERs, aND ReTurns tHE larger VArIabLE in ITs gIVen VARIaBLe TyPe.\n  RetuRn NuLl if THE VAlUEs are equal.\n  nOte: IF a real numBer Is rePrEseNTed as a STrInG, the flOaTing pOInt miGht bE . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ Null\n  */\nCOnsT compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  cReATe a funCtION That tAKes inTegeRs, FloaTs, or strinGS rEPrEseNtInG\n  rEal NumBERs, aND ReTurns tHE larger VArIabLE in ITs gIVen VARIaBLe TyPe.\n  RetuRn NuLl if THE VAlUEs are equal.\n  nOte: IF a real numBer Is rePrEseNTed as a STrInG, the flOaTing pOInt miGht bE. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ Null\n  */\nCOnsT compareOne = (a, b) => {\n  if (a === b) {\n    return a;\n  }\n  if (typeof a!== \"number\") {\n    return null;\n  }\n  if (typeof b!== \"number\") {\n    return null;\n  }\n  return a > b? a : b;\n};\n\nconst compareTwo = (a, b) => {\n  if (a === b) {\n    return a;\n  }\n  if (typeof a!== \"number\") {\n    return null;\n  }\n  if (typeof b!== \"number\") {\n    return null;\n  }\n  return a > b? a : b;\n};\n\nconst compareThree = (a, b, c) => {\n  if (a === b) {\n    return a;\n  }\n  if (typeof a!== \"number\") {\n    return null;\n  }\n  if (typeof b!== \"number\") {\n    return null;\n  }\n  if (typeof c!== \"number\") {\n    return null;\n  }\n  return a > b? a : b;\n};\n\nconst compareFour = (a, b, c, d) => {\n  if (a === b) {\n    return a;\n  }\n  if (typeof a!== \"number\") {\n    return null;\n  }\n  if (typeof b!== \"number\") {\n    return null;\n  }\n  if (typeof c!== \"number\") {\n    return null;\n  }\n  if (typeof d!== \"number\") {\n    return null;\n  }\n  return a > b? a : b;\n};\n\nconst compareFive = (a, b, c, d, e) => {\n  if (a === b) {\n    return a;\n  }\n  if (typeof a!== \"number\") {\n    return null;\n  }\n  if (typeof b!== \"number\") {\n    return null;\n  }\n  if (typeof c!== \"number\") {\n    return null;\n  }\n  if (typeof d!== \"number\") {\n    return null;\n  }\n  if (typeof e!== \"number\") {\n    return null;\n  }\n  return a > b? a : b;\n};\n\nconst compareSix = (a, b, c, d, e, f) => {\n  if (a === b) {\n    return a;\n  }\n  if (typeof a!== \"number\") {\n    return null;\n  }\n  if (typeof b!== \"number\") {\n    return null;\n  }\n  if (typeof c!== \"number\") {\n    return null;\n  }\n  if (typeof d!== \"number\") {\n    return null;\n  }\n  if (typeof e!== \"number\") {\n    return null;\n  }\n  if (typeof f!== \"number\") {\n    return null;\n  }\n  return a > b? a : b;\n};\n\nconst compareSeven = (a, b, c, d, e, f, g) => {\n  if (a === b) {\n    return a;\n  }\n  if (typeof a!== \"number\") {\n    return null;\n  }\n  if (typeof b!== \"number\") {\n    return null;\n  }\n  if (typeof c!== \"number\") {\n    return null;\n  }\n  if (typeof d!== \"number\") {\n    return null;\n  }\n  if (typeof e!== \"number\") {\n    return null;\n  }\n  if (typeof f!== \"number\") {\n    return null;\n  }\n  if (typeof g!== \"number\") {\n    return null;\n  }\n  return a > b? a : b;\n};\n\nconst compareEight = (a, b, c, d, e, f, g, h) => {\n  if (a === b) {\n    return a;\n  }\n  if (typeof a!== \"number\") {\n    return null;\n  }\n  if (typeof b!== \"number\") {\n    return null;\n  }\n  if (typeof c!== \"number\") {\n    return null;\n  }\n  if (typeof d!== \"number\") {\n    return null;\n  }\n  if (typeof e!== \"number\") {\n    return null;\n  }\n  if (typeof f!== \"number\") {\n    return null;\n  }\n  if (typeof g!== \"number\") {\n    return null;\n  }\n  if (typeof h!== \"number\") {\n    return null;\n  }\n  return a > b? a : b;\n};\n\nconst compareNine = (a, b, c, d, e, f, g, h, i) => {\n  if (a === b) {\n    return a;\n  }\n  if (typeof a!== \"number\") {\n    return null;\n  }\n  if (typeof b!== \"number\") {\n    return null;\n  }\n  if (typeof c!== \"number\") {\n    return null;\n  }\n  if (typeof d!== \"number\") {\n    return null;\n  }\n  if (typeof e!== \"number\") {\n    return null;\n  }\n  if (typeof f!== \"number\") {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*EVAlUAte whEtHER The giVEn numBer n cAn Be wrItten as thE SuM Of ExaCtLy 4 PoSitIve EVEn nUMBeRs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*EVAlUAte whEtHER The giVEn numBer n cAn Be wrItten as thE SuM Of ExaCtLy 4 PoSitIve EVEn nUMBeRs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*THE BRAziliAn FACToriaL Is defIned As:\n  BrazIlian_factORiAL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  WheRe n > 0\n\n  foR eXamPle:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*THE BRAziliAn FACToriaL Is defIned As:\n  BrazIlian_factORiAL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  WheRe n > 0\n\n  foR eXamPle:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error('specialFactorial: n must be a positive integer');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* rEtURn list of aLl PREFixes FRom shOrteSt To loNgest of thE InPUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "/* rEtURn list of aLl PREFixes FRom shOrteSt To loNgest of thE InPUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.substr(0, i + 1));\n  }\n  return prefixes;\n};\n\n/* rEtURn list of aLl PREFixes FRom shOrteSt To loNgest of thE InPUt string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  for (let i = 1; i < string.length; i++) {\n    suffixes.push(string.substr(i));\n  }\n  return suffixes;\n};\n\n/* rEtURn list of aLl PREFixes FRom shOrteSt To loNgest of thE InPUt string\n  >>> allSubstrings('abc')\n  ['abc', 'bcd', 'cde', 'de']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j < string.length; j++) {\n      substrings.push(string.substr(i, j - i + 1));\n    }\n  }\n  return substrings;\n};\n\n/* rEtURn list of aLl PREFixes FRom shOrteSt To loNgest of thE InPUt string\n  >>> allSubstrings('abc')\n  ['abc', 'bcd', 'cde', 'de']\n  */\nconst allSubstrings2 = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j < string.length; j++) {\n      substrings.push(string.substr(i, j - i + 1));\n    }\n  }\n  return substrings;\n};\n\n/* rEtURn list of aLl PREFixes FRom shOrteSt To loNgest of thE InPUt string\n  >>> allSubstrings('abc')\n  ['abc', 'bcd', 'cde', 'de']\n  */\nconst allSubstrings3 = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j < string.length; j++) {\n      substrings.push(string.substr(i, j - i + 1));\n    }\n  }\n  return substrings;\n};\n\n/* rEtURn list of aLl PREFixes FRom shOrteSt To loNgest of thE InPUt string\n  >>> allSubstrings('abc')\n  ['abc', 'bcd', 'cde', 'de']\n  */\nconst allSubstrings4 = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j < string.length; j++) {\n      substrings.push(string.substr(i, j - i + 1));\n    }\n  }\n  return substrings;\n};\n\n/* rEtURn list of aLl PREFixes FRom shOrteSt To loNgest of thE InPUt string\n  >>> allSubstrings('abc')\n  ['abc', 'bcd', 'cde', 'de']\n  */\nconst allSubstrings5 = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j < string.length; j++) {\n      substrings.push(string.substr(i, j - i + 1));\n    }\n  }\n  return substrings;\n};\n\n/* rEtURn list of aLl PREFixes FRom shOrteSt To loNgest of thE InPUt string\n  >>> allSubstrings('abc')\n  ['abc', 'bcd', 'cde', 'de']\n  */\nconst allSubstrings6 = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j < string.length; j++) {\n      substrings.push(string.substr(i, j - i + 1));\n    }\n  }\n  return substrings;\n};\n\n/* rEtURn list of aLl PREFixes FRom shOrteSt To loNgest of thE InPUt string\n  >>> allSubstrings('abc')\n  ['abc', 'bcd', 'cde', 'de']\n  */\nconst allSubstrings7 = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j < string.length; j++) {\n      substrings.push(string.substr(i, j - i + 1));\n    }\n  }\n  return substrings;\n};\n\n/* rEtURn list of aLl PREFixes FRom shOrteSt To loNgest of thE InPUt string\n  >>> allSubstrings('abc')\n  ['abc', 'bcd', 'cde', 'de']\n  */\nconst allSubstrings8 = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j < string.length; j++) {\n      substrings.push(string.substr(i, j - i + 1));\n    }\n  }\n  return substrings;\n};\n\n/* rEtURn list of aLl PREFixes FRom shOrteSt To loNgest of thE InPUt string\n  >>> allSubstrings('abc')\n  ['abc', 'bcd', 'cde', 'de']\n  */\nconst allSubstrings9 = (string) => {\n  const sub", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  gIvEN a strInG text, REPlace ALl spaCes in iT wIth uNderscoreS, \n  AnD If A stRiNg HaS moRe tHAN 2 coNSEcUtive sPAces, \n  theN RePlaCE ALl cONseCUTIvE SpAcEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a strInG text, REPlace ALl spaCes in iT wIth uNderscoreS, \n  AnD If A stRiNg HaS moRe tHAN 2 coNSEcUtive sPAces, \n  theN RePlaCE ALl cONseCUTIvE SpAcEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\nconst fixSpaces2 = (text) => {\n  return text.replace(/\\s+/g, \"-\");\n};\n\nconst fixSpaces3 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces4 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces5 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces6 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces7 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces8 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces9 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces10 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces11 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces12 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces13 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces14 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces15 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces16 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces17 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces18 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces19 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces20 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces21 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces22 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces23 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces24 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces25 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces26 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces27 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces28 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces29 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces30 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces31 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces32 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces33 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces34 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces35 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces36 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces37 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces38 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces39 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces40 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces41 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces42 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces43 = (text) => {\n  return text.replace(/\\s+/g, \" \");\n};\n\nconst fixSpaces44 = (text) => {\n  return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*CREaTE a funcTiON WHich tAKes a stRing RePresEnting a filE'S nAMe, And ReTuRnS\n  'YeS' if THE thE FIlE's name IS valid, aND rEtuRNS 'no' oTHerWISE.\n  A FIlE's Name is CoNsIderED TO Be VAlid if and oNLy if All the foLloWing CoNdiTIons \n  aRE mEt:\n  - there sHoUld noT Be morE thaN thRee dIGitS ('0'-'9') in The file'S nAMe.\n  - ThE fILe'S namE ContaINs exactlY one Dot '.'\n  - ThE subSTRiNg befoRe tHe DOT Should Not be emPty, and It starTS With a letTeR From \n  the LAtin aLPHApet ('a'-'z' AND 'A'-'z').\n  - The sUbSTRING aFter the dot shoUld BE oNe of TheSe: ['TxT', 'Exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*CREaTE a funcTiON WHich tAKes a stRing RePresEnting a filE'S nAMe, And ReTuRnS\n  'YeS' if THE thE FIlE's name IS valid, aND rEtuRNS 'no' oTHerWISE.\n  A FIlE's Name is CoNsIderED TO Be VAlid if and oNLy if All the foLloWing CoNdiTIons \n  aRE mEt:\n  - there sHoUld noT Be morE thaN thRee dIGitS ('0'-'9') in The file'S nAMe.\n  - ThE fILe'S namE ContaINs exactlY one Dot '.'\n  - ThE subSTRiNg befoRe tHe DOT Should Not be emPty, and It starTS With a letTeR From \n  the LAtin aLPHApet ('a'-'z' AND 'A'-'z').\n  - The sUbSTRING aFter the dot shoUld BE oNe of TheSe: ['TxT', 'Exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nconst fileNameCheck2 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nconst fileNameCheck3 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nconst fileNameCheck4 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nconst fileNameCheck5 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nconst fileNameCheck6 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nconst fileNameCheck7 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nconst fileNameCheck8 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nconst fileNameCheck9 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nconst fileNameCheck10 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nconst fileNameCheck11 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nconst fileNameCheck12 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nconst fileNameCheck13 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nconst fileNameCheck14 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nconst fileNameCheck15 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nconst fileNameCheck16 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nconst fileNameCheck17 = (file_name) => {\n  const regex = /^[a-zA-Z0-9_]+$/;\n  if (regex.test(file_name))", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  tHiS FunctIoN WILl takE A list of inTegeRs. for aLl entries in THe list, THe FunCtIoN sHalL sqUARe tHE InTeger eNTry if itS InDex IS A \n  MulTIplE OF 3 AnD WiLl Cube thE iNtEger ENTRY iF Its index is A MultIple of 4 anD noT a muLtIplE Of 3. The FUnCtIon wilL nOt \n  chaNGe the EntrIes in The list wHOse INdexes aRe NOt a mUlTIpLe of 3 OR 4. The fUNction shAll tHen return thE sum OF AlL entriEs. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  tHiS FunctIoN WILl takE A list of inTegeRs. for aLl entries in THe list, THe FunCtIoN sHalL sqUARe tHE InTeger eNTry if itS InDex IS A \n  MulTIplE OF 3 AnD WiLl Cube thE iNtEger ENTRY iF Its index is A MultIple of 4 anD noT a muLtIplE Of 3. The FUnCtIon wilL nOt \n  chaNGe the EntrIes in The list wHOse INdexes aRe NOt a mUlTIpLe of 3 OR 4. The fUNction shAll tHen return thE sum OF AlL entriEs. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares9 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares10 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares11 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  yOu ARe givEn A STRing rEPreseNtinG a sentence,\n  The sentence cOntains soME wORdS sePaRaTeD by A spACE,\n  anD YOu Have to return A String tHAt ConTAINs tHE woRDS FrOM tHe OriginAl sentence,\n  WhOse lENGTHs ARe prime numBErs,\n  tHe order oF thE worDs in The NEw strINg ShOuld be ThE same AS the oRigiNal One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  yOu ARe givEn A STRing rEPreseNtinG a sentence,\n  The sentence cOntains soME wORdS sePaRaTeD by A spACE,\n  anD YOu Have to return A String tHAt ConTAINs tHE woRDS FrOM tHe OriginAl sentence,\n  WhOse lENGTHs ARe prime numBErs,\n  tHe order oF thE worDs in The NEw strINg ShOuld be ThE same AS the oRigiNal One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*YOUr TAsk is To IMPLemenT a FunctIon tHaT wilL simplify the expreSSiON\n  x * n. THe fUnCtIoN reTurNS TruE IF x * n eValuatES to a wholE NuMbeR AND faLSe\n  oTHERwISe. boTh x and n, aRe StRing REPREsENtation of a fRActiOn, and havE thE folLoWinG FormaT,\n  <NuMeRator>/<dEnOminaTOr> wheRe boTh nUmerATor ANd denomInATor aRe POsItivE Whole NUmbers.\n\n  YoU can AssumE thaT x, ANd n Are valId fRaCTIOns, and Do not haVe zero As denoMINator.\n\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*YOUr TAsk is To IMPLemenT a FunctIon tHaT wilL simplify the expreSSiON\n  x * n. THe fUnCtIoN reTurNS TruE IF x * n eValuatES to a wholE NuMbeR AND faLSe\n  oTHERwISe. boTh x and n, aRe StRing REPREsENtation of a fRActiOn, and havE thE folLoWinG FormaT,\n  <NuMeRator>/<dEnOminaTOr> wheRe boTh nUmerATor ANd denomInATor aRe POsItivE Whole NUmbers.\n\n  YoU can AssumE thaT x, ANd n Are valId fRaCTIOns, and Do not haVe zero As denoMINator.\n\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconsT simplify = (x, n) => {\n  if (x == 0) {\n    return x;\n  }\n  if (n == 0) {\n    return x;\n  }\n  if (x < 0) {\n    return simplify(-x, n);\n  }\n  if (n < 0) {\n    return simplify(x, -n);\n  }\n  if (x == 1) {\n    return n;\n  }\n  if (n == 1) {\n    return x;\n  }\n  if (x == n) {\n    return 1;\n  }\n  if (x < n) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 2) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 2) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 3) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 3) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 4) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 4) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 5) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 5) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 6) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 6) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 7) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 7) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 8) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 8) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 9) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 9) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 10) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 10) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 11) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 11) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 12) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 12) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 13) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 13) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 14) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 14) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 15) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 15) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 16) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 16) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 17) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 17) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 18) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 18) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 19) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 19) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 20) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 20) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 21) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 21) {\n    return simplify(x, n * x);\n  }\n  if (x < n / 22) {\n    return simplify(x * n, n - x);\n  }\n  if (n < x / 22) {\n    return simplify(x, n * x);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  wRiTE a funCtION Which SOrts tHe giVeN list of iNtegers\n  in asCEnDInG orDeR aCcOrdIng TO The SUM oF their DIgits.\n  NoTE: iF thERE Are SEveRAL ItEMs WiTh simiLaR sUm of THEIR dIGits,\n  order tHEm baSed on theIr iNdex in OrIgiNAl list.\n\n  For EXaMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  wRiTE a funCtION Which SOrts tHe giVeN list of iNtegers\n  in asCEnDInG orDeR aCcOrdIng TO The SUM oF their DIgits.\n  NoTE: iF thERE Are SEveRAL ItEMs WiTh simiLaR sUm of THEIR dIGits,\n  order tHEm baSed on theIr iNdex in OrIgiNAl list.\n\n  For EXaMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints2 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints3 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints4 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints5 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints6 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints7 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints8 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints9 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints10 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints11 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints12 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints13 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints14 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*WRItE A funcTiON THat taKEs an aRray Of NumbErs as inpuT AnD ReTurNs \n  ThE nUmbEr oF ELemENTs in The arrAY that arE GrEatER THan 10 ANd bOTH \n  FiRSt AnD last dIgItS of a NUMBEr ARe odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*WRItE A funcTiON THat taKEs an aRray Of NumbErs as inpuT AnD ReTurNs \n  ThE nUmbEr oF ELemENTs in The arrAY that arE GrEatER THan 10 ANd bOTH \n  FiRSt AnD last dIgItS of a NUMBEr ARe odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let arr = [];\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num % 2 === 0) {\n      arr.push(num);\n    }\n  }\n  return arr.length;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  yOu ARe givEn A POSitivE IntegEr n. YoU hAve tO create an INtEGeR arRaY a Of LenGth n.\n      fOR eaCH i (1 ≤ i ≤ n), ThE value OF a[i] = i * i - i + 1.\n      RetuRN tHe nUMBEr oF TriPLES (a[I], A[j], A[k]) Of a wheRe i < j < k, \n  AnD a[i] + a[J] + A[K] IS a MUltiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  yOu ARe givEn A POSitivE IntegEr n. YoU hAve tO create an INtEGeR arRaY a Of LenGth n.\n      fOR eaCH i (1 ≤ i ≤ n), ThE value OF a[i] = i * i - i + 1.\n      RetuRN tHe nUMBEr oF TriPLES (a[I], A[j], A[k]) Of a wheRe i < j < k, \n  AnD a[i] + a[J] + A[K] IS a MUltiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n).keys()].map((i) => i * i - i + 1);\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    for (let j = i; j < n; j++) {\n      for (let k = j; k < n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          res.push([i, j, k]);\n        }\n      }\n    }\n  }\n  return res;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* tHeRE are eIgHT PLanetS in Our soLar sYsTem: tHe closersT To THe sun\n  Is meRcUry, The NEXt oNE Is venus, tHEn Earth, mArS, JuPITEr, SATurN,\n  uRAnUS, NEpTune.\n  WrItE a FuncTION ThAT takes two pLAnet Names as sTriNgs planet1 aNd planet2.\n  the FUnctiON sHoUld return a tuple coNtAininG All plAnetS whOse oRBitS Are\n  locaTeD BetwEeN ThE orbIT of planet1 anD The orbit Of planet2, soRted bY\n  the PROxImity tO thE sUN.\n  tHe funcTion shoUld return an eMpty tuple if planet1 OR planet2\n  Are not cOrREct planET nameS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* tHeRE are eIgHT PLanetS in Our soLar sYsTem: tHe closersT To THe sun\n  Is meRcUry, The NEXt oNE Is venus, tHEn Earth, mArS, JuPITEr, SATurN,\n  uRAnUS, NEpTune.\n  WrItE a FuncTION ThAT takes two pLAnet Names as sTriNgs planet1 aNd planet2.\n  the FUnctiON sHoUld return a tuple coNtAininG All plAnetS whOse oRBitS Are\n  locaTeD BetwEeN ThE orbIT of planet1 anD The orbit Of planet2, soRted bY\n  the PROxImity tO thE sUN.\n  tHe funcTion shoUld return an eMpty tuple if planet1 OR planet2\n  Are not cOrREct planET nameS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let result = []\n  if (planet1 === planet2) {\n    return result\n  }\n  if (planet1.length === planet2.length) {\n    for (let i = 0; i < planet1.length; i++) {\n      result.push(planet1[i], planet2[i])\n    }\n  } else {\n    result.push(planet1, planet2)\n  }\n  return result\n}\n\nmodule.exports = bf\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/149", "prompt": "/*WRItE A funcTiON THat acCEpts a list Of stRiNgs aS a parametER,\n  dELeTes ThE sTrIngS thAT HavE ODd LengthS From it,\n  aND rEtuRNS The REsuLTED list wITh A sOrted oRdEr,\n  the list iS ALWAyS A list of strings ANd neVer an arrAy oF numBeRs,\n  aND it maY CoNtAin dupLiCates.\n  tHe ordEr of The list ShouLD be AScendinG bY LengTh OF eAch wORd, and YOu\n  should return The list sOrted By thAT RuLe.\n  If twO woRdS HAVe the sAme lengTh, sort The list alpHABeticalLy.\n  tHe functIOn shoULD return A list of sTRInGs in sorTeD ORDER.\n  YOu may assume thAt aLL wOrds WilL hAvE The Same Length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*WRItE A funcTiON THat acCEpts a list Of stRiNgs aS a parametER,\n  dELeTes ThE sTrIngS thAT HavE ODd LengthS From it,\n  aND rEtuRNS The REsuLTED list wITh A sOrted oRdEr,\n  the list iS ALWAyS A list of strings ANd neVer an arrAy oF numBeRs,\n  aND it maY CoNtAin dupLiCates.\n  tHe ordEr of The list ShouLD be AScendinG bY LengTh OF eAch wORd, and YOu\n  should return The list sOrted By thAT RuLe.\n  If twO woRdS HAVe the sAme lengTh, sort The list alpHABeticalLy.\n  tHe functIOn shoULD return A list of sTRInGs in sorTeD ORDER.\n  YOu may assume thAt aLL wOrds WilL hAvE The Same Length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sortedLst.length; i++) {\n    sum += sortedLst[i];\n  }\n  return sum;\n};\n\nconst sortedListSum2 = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sortedLst.length; i++) {\n    sum += sortedLst[i];\n  }\n  return sum;\n};\n\nconst sortedListSum3 = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sortedLst.length; i++) {\n    sum += sortedLst[i];\n  }\n  return sum;\n};\n\nconst sortedListSum4 = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sortedLst.length; i++) {\n    sum += sortedLst[i];\n  }\n  return sum;\n};\n\nconst sortedListSum5 = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sortedLst.length; i++) {\n    sum += sortedLst[i];\n  }\n  return sum;\n};\n\nconst sortedListSum6 = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sortedLst.length; i++) {\n    sum += sortedLst[i];\n  }\n  return sum;\n};\n\nconst sortedListSum7 = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sortedLst.length; i++) {\n    sum += sortedLst[i];\n  }\n  return sum;\n};\n\nconst sortedListSum8 = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sortedLst.length; i++) {\n    sum += sortedLst[i];\n  }\n  return sum;\n};\n\nconst sortedListSum9 = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sortedLst.length; i++) {\n    sum += sortedLst[i];\n  }\n  return sum;\n};\n\nconst sortedListSum10 = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sortedLst.length; i++) {\n    sum += sortedLst[i];\n  }\n  return sum;\n};\n\nconst sortedListSum11 = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sortedLst.length; i++) {\n    sum += sortedLst[i];\n  }\n  return sum;\n};\n\nconst sortedListSum12 = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sortedLst.length; i++) {\n    sum += sortedLst[i];\n  }\n  return sum;\n};\n\nconst sortedListSum13 = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sortedLst.length; i++) {\n    sum += sortedLst[i];\n  }\n  return sum;\n};\n\nconst sortedListSum14 = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sortedLst.length; i++) {\n    sum += sortedLst[i];\n  }\n  return sum;\n};\n\nconst sortedListSum15 = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sortedLst.length; i++) {\n    sum += sortedLst[i];\n  }\n  return sum;\n};\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* rEtURn a stRiNG COntaiNIng spAce-dElImitEd numbers STaRTiNg fRoM 0 uPtO n inCluSIVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* rEtURn a stRiNG COntaiNIng spAce-dElImitEd numbers STaRTiNg fRoM 0 uPtO n inCluSIVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence15 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence16 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A SImPLe proGrAM WHich sHOuld return tHe vaLuE of x iF n is \n  a prime NUmBEr And ShOuLd return The ValUE Of y oTHErWise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A SImPLe proGrAM WHich sHOuld return tHe vaLuE of x iF n is \n  a prime NUmBEr And ShOuLd return The ValUE Of y oTHErWise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 0) {\n    throw new Error('n must be a positive number');\n  }\n  if (x < 0 || y < 0) {\n    throw new Error('x and y must be non-negative');\n  }\n  if (x === 0 || y === 0) {\n    throw new Error('x and y must be different from 0');\n  }\n  if (x === y) {\n    throw new Error('x and y must be different from each other');\n  }\n  if (x === n || y === n) {\n    throw new Error('x and y must be different from n');\n  }\n  if (x === 1 || y === 1) {\n    throw new Error('x and y must be different from 1');\n  }\n  if (x === n / 2 || y === n / 2) {\n    throw new Error('x and y must be different from n/2');\n  }\n  if (x === n - 1 || y === n - 1) {\n    throw new Error('x and y must be different from n-1');\n  }\n  if (x === n / 3 || y === n / 3) {\n    throw new Error('x and y must be different from n/3');\n  }\n  if (x === n - 2 || y === n - 2) {\n    throw new Error('x and y must be different from n-2');\n  }\n  if (x === n - 3 || y === n - 3) {\n    throw new Error('x and y must be different from n-3');\n  }\n  if (x === n / 4 || y === n / 4) {\n    throw new Error('x and y must be different from n/4');\n  }\n  if (x === n - 4 || y === n - 4) {\n    throw new Error('x and y must be different from n-4');\n  }\n  if (x === n / 5 || y === n / 5) {\n    throw new Error('x and y must be different from n/5');\n  }\n  if (x === n - 5 || y === n - 5) {\n    throw new Error('x and y must be different from n-5');\n  }\n  if (x === n / 6 || y === n / 6) {\n    throw new Error('x and y must be different from n/6');\n  }\n  if (x === n - 6 || y === n - 6) {\n    throw new Error('x and y must be different from n-6');\n  }\n  if (x === n / 7 || y === n / 7) {\n    throw new Error('x and y must be different from n/7');\n  }\n  if (x === n - 7 || y === n - 7) {\n    throw new Error('x and y must be different from n-7');\n  }\n  if (x === n / 8 || y === n / 8) {\n    throw new Error('x and y must be different from n/8');\n  }\n  if (x === n - 8 || y === n - 8) {\n    throw new Error('x and y must be different from n-8');\n  }\n  if (x === n / 9 || y === n / 9) {\n    throw new Error('x and y must be different from n/9');\n  }\n  if (x === n - 9 || y === n - 9) {\n    throw new Error('x and y must be different from n-9');\n  }\n  if (x === n / 10 || y === n / 10) {\n    throw new Error('x and y must be different from n/10');\n  }\n  if (x === n - 10 || y === n - 10) {\n    throw new Error('x and y must be different from n-10');\n  }\n  if (x === n / 11 || y === n / 11) {\n    throw new Error('x and y must be different from n/11');\n  }\n  if (x === n - 11 || y === n - 11) {\n    throw new Error('x and y must be different from n-11');\n  }\n  if (x === n / 12 || y === n / 12) {\n    throw new Error('x and y must be different from n/12');\n  }\n  if (x === n - 12 || y === n - 12) {\n    throw new Error('x and y must be different from n-12');\n  }\n  if (x === n / 13 || y === n / 13) {\n    throw new Error('x and y must be different from n/13');\n  }\n  if (x === n - 13 || y === n - 13) {\n    throw new Error('x and y must be different from n-13');\n  }\n  if (x === n / 14 || y === n / 14) {\n    throw new Error('x and y must be different from n/14');\n  }\n  if (x === n - 14 || y === n - 14) {\n    throw new Error('x and y must be different from n-14');\n  }\n  if (x === n / 15 || y === n / 15) {\n    throw new Error('x and y must be different from n/15');\n  }\n  if (x === n - 15 || y === n - 15) {\n    throw new Error('x and y must be different from n-15');\n  }\n  if (x === n / 16 || y === n / 16) {\n    throw new Error('x and y must be different from n/16');\n  }\n  if (x === n - 16 || y === n - 16) {\n    throw new Error('x and y must be different from n-16');\n  }\n  if (x === n / 17 || y === n / 17) {\n    throw new Error('x and y must be different from n/17');\n  }\n  if (x === n - 17 || y === n - 17) {\n    throw new Error('x and y must be different from n-17');\n  }\n  if (x === n / 18 || y === n / 18) {\n    throw new Error('x and y must be different from n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n// gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n// in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n// doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// doubleTheDifference([-1, -2, 0]) == 0\n// doubleTheDifference([9, -2]) == 81\n// doubleTheDifference([0]) == 0\n// iF thE InpUT list IS eMPtY, return 0.\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I THiNK we alL rEMEMber tHAt feeLing WhEn thE result of SOmE LoNg-aWaItEd\n  EveNt iS FInaLLY kNown. ThE FeelingS AnD thOUGHts YOu hAVE At THaT mOment aRe\n  DeFiniTELY WoRTh noting doWN and ComparinG.\n  YoUr taSk Is tO DeterMInE iF a persOn CorreCTly guEsseD thE resULts OF a numbeR oF MatcHeS.\n  yoU are GIven tWO arrays oF scoRes anD gueSSEs Of equaL leNgTH, WHere eaCh index Shows a Match. \n  RETUrn an arRaY Of the saME lengTH DEnotING hOw far OfF EACH guess WaS. If they have guEssED cOrreCtlY,\n  tHe VAluE is 0, aNd if not, the ValUe is ThE abSolUte differenCe betWEEn thE guess and The sCoRe.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I THiNK we alL rEMEMber tHAt feeLing WhEn thE result of SOmE LoNg-aWaItEd\n  EveNt iS FInaLLY kNown. ThE FeelingS AnD thOUGHts YOu hAVE At THaT mOment aRe\n  DeFiniTELY WoRTh noting doWN and ComparinG.\n  YoUr taSk Is tO DeterMInE iF a persOn CorreCTly guEsseD thE resULts OF a numbeR oF MatcHeS.\n  yoU are GIven tWO arrays oF scoRes anD gueSSEs Of equaL leNgTH, WHere eaCh index Shows a Match. \n  RETUrn an arRaY Of the saME lengTH DEnotING hOw far OfF EACH guess WaS. If they have guEssED cOrreCtlY,\n  tHe VAluE is 0, aNd if not, the ValUe is ThE abSolUte differenCe betWEEn thE guess and The sCoRe.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  // console.log(game);\n  // console.log(guess);\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*YOU wILl be gIvEN THe namE Of a clAss (a StRing) And a list of extensions.\n  The extensions ARe TO bE usEd To LoAd aDdiTIOnaL CLaSses to THe class. tHe\n  StrENGTh oF The EXTEnSIoN iS as folLoWs: let Cap BE ThE Number of thE UppeRcase\n  letTerS in the ExTenSIon's nAMe, AnD let SM Be The nuMBer of LoweRcaSe leTTerS\n  in The exteNsIOn's nAmE, ThE strENgth iS Given by tHe frActioN CAP - sm.\n  yoU shoulD fiNd THE StrongEst exteNsion aNd return a strING in this\n  foRmAT: ClassNAMe.StrONGEstEXTEnSionNAmE.\n  iF THErE are two or more extensions WitH ThE samE stReNgTH, yoU shoUld\n  choose tHe oNe thAt ComEs fIrst in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*YOU wILl be gIvEN THe namE Of a clAss (a StRing) And a list of extensions.\n  The extensions ARe TO bE usEd To LoAd aDdiTIOnaL CLaSses to THe class. tHe\n  StrENGTh oF The EXTEnSIoN iS as folLoWs: let Cap BE ThE Number of thE UppeRcase\n  letTerS in the ExTenSIon's nAMe, AnD let SM Be The nuMBer of LoweRcaSe leTTerS\n  in The exteNsIOn's nAmE, ThE strENgth iS Given by tHe frActioN CAP - sm.\n  yoU shoulD fiNd THE StrongEst exteNsion aNd return a strING in this\n  foRmAT: ClassNAMe.StrONGEstEXTEnSionNAmE.\n  iF THErE are two or more extensions WitH ThE samE stReNgTH, yoU shoUld\n  choose tHe oNe thAt ComEs fIrst in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const class_name_lower = class_name.toLowerCase();\n  const extensions_lower = extensions.map(extension => extension.toLowerCase());\n  const extension_count = extensions_lower.length;\n  let extension_index = 0;\n  let extension_strength = 0;\n  let extension_name = '';\n  let extension_name_lower = '';\n  while (extension_index < extension_count) {\n    extension_name = extensions_lower[extension_index];\n    extension_name_lower = extension_name.toLowerCase();\n    extension_strength = class_name_lower.indexOf(extension_name_lower);\n    if (extension_strength!== -1) {\n      extension_index++;\n    } else {\n      break;\n    }\n  }\n  return class_name_lower.substring(0, extension_strength) +\n    extension_name;\n};\n\nmodule.exports = {\n  strongestExtension\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*YOU aRE giveN 2 wORDS. You nEEd to return tRue iF tHe seCond word oR AnY Of Its RoTaTiOns Is a sUBStrING in tHe firsT Word\n  cycpatternCheck(\"abcd\",\"abd\") => falSE\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => FALSe\n  cycpatternCheck(\"abab\",\"baa\") => tRUe\n  cycpatternCheck(\"efef\",\"eeff\") => fALSE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nCoNst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*YOU aRE giveN 2 wORDS. You nEEd to return tRue iF tHe seCond word oR AnY Of Its RoTaTiOns Is a sUBStrING in tHe firsT Word\n  cycpatternCheck(\"abcd\",\"abd\") => falSE\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => FALSe\n  cycpatternCheck(\"abab\",\"baa\") => tRUe\n  cycpatternCheck(\"efef\",\"eeff\") => fALSE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nCoNst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    if (aa[i] === bb[i]) {\n      c++;\n    }\n  }\n  return c === aa.length;\n};\n\n//console.log(cycpatternCheck(\"abcd\",\"abd\"));\n//console.log(cycpatternCheck(\"hello\",\"ell\"));\n//console.log(cycpatternCheck(\"whassup\",\"psus\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"efef\",\"eeff\"));\n//console.log(cycpatternCheck(\"himenss\",\"simen\"));\n\n//console.log(cycpatternCheck(\"abcd\",\"abd\"));\n//console.log(cycpatternCheck(\"hello\",\"ell\"));\n//console.log(cycpatternCheck(\"whassup\",\"psus\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"efef\",\"eeff\"));\n//console.log(cycpatternCheck(\"himenss\",\"simen\"));\n\n//console.log(cycpatternCheck(\"abcd\",\"abd\"));\n//console.log(cycpatternCheck(\"hello\",\"ell\"));\n//console.log(cycpatternCheck(\"whassup\",\"psus\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"efef\",\"eeff\"));\n//console.log(cycpatternCheck(\"himenss\",\"simen\"));\n\n//console.log(cycpatternCheck(\"abcd\",\"abd\"));\n//console.log(cycpatternCheck(\"hello\",\"ell\"));\n//console.log(cycpatternCheck(\"whassup\",\"psus\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"efef\",\"eeff\"));\n//console.log(cycpatternCheck(\"himenss\",\"simen\"));\n\n//console.log(cycpatternCheck(\"abcd\",\"abd\"));\n//console.log(cycpatternCheck(\"hello\",\"ell\"));\n//console.log(cycpatternCheck(\"whassup\",\"psus\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"efef\",\"eeff\"));\n//console.log(cycpatternCheck(\"himenss\",\"simen\"));\n\n//console.log(cycpatternCheck(\"abcd\",\"abd\"));\n//console.log(cycpatternCheck(\"hello\",\"ell\"));\n//console.log(cycpatternCheck(\"whassup\",\"psus\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"efef\",\"eeff\"));\n//console.log(cycpatternCheck(\"himenss\",\"simen\"));\n\n//console.log(cycpatternCheck(\"abcd\",\"abd\"));\n//console.log(cycpatternCheck(\"hello\",\"ell\"));\n//console.log(cycpatternCheck(\"whassup\",\"psus\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"efef\",\"eeff\"));\n//console.log(cycpatternCheck(\"himenss\",\"simen\"));\n\n//console.log(cycpatternCheck(\"abcd\",\"abd\"));\n//console.log(cycpatternCheck(\"hello\",\"ell\"));\n//console.log(cycpatternCheck(\"whassup\",\"psus\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"efef\",\"eeff\"));\n//console.log(cycpatternCheck(\"himenss\",\"simen\"));\n\n//console.log(cycpatternCheck(\"abcd\",\"abd\"));\n//console.log(cycpatternCheck(\"hello\",\"ell\"));\n//console.log(cycpatternCheck(\"whassup\",\"psus\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"efef\",\"eeff\"));\n//console.log(cycpatternCheck(\"himenss\",\"simen\"));\n\n//console.log(cycpatternCheck(\"abcd\",\"abd\"));\n//console.log(cycpatternCheck(\"hello\",\"ell\"));\n//console.log(cycpatternCheck(\"whassup\",\"psus\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"efef\",\"eeff\"));\n//console.log(cycpatternCheck(\"himenss\",\"simen\"));\n\n//console.log(cycpatternCheck(\"abcd\",\"abd\"));\n//console.log(cycpatternCheck(\"hello\",\"ell\"));\n//console.log(cycpatternCheck(\"whassup\",\"psus\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"efef\",\"eeff\"));\n//console.log(cycpatternCheck(\"himenss\",\"simen\"));\n\n//console.log(cycpatternCheck(\"abcd\",\"abd\"));\n//console.log(cycpatternCheck(\"hello\",\"ell\"));\n//console.log(cycpatternCheck(\"whassup\",\"psus\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cyc", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*GIVeN An intEgER. return A tuple That hAS the nUmbeR oF eveN and odd diGItS ReSpeCtIvElY.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*GIVeN An intEgER. return A tuple That hAS the nUmbeR oF eveN and odd diGItS ReSpeCtIvElY.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  if (num < 0) {\n    return (0, 0);\n  }\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nexport default evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  gIvEN a posItIVE IntegER, obtaIn itS rOman Numeral eqUIvALeNt aS a StRiNg,\n  aNd return iT in LOweRCAsE.\n  RestrICtions: 1 <= num <= 1000\n\n  EXAmPleS:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a posItIVE IntegER, obtaIn itS rOman Numeral eqUIvALeNt aS a StRiNg,\n  aNd return iT in LOweRCAsE.\n  RestrICtions: 1 <= num <= 1000\n\n  EXAmPleS:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid number');\n  }\n  let result = '';\n  let num = number;\n  while (num > 0) {\n    let digit = num % 10;\n    result = (digit < 4)? 'iv' : (digit < 9)? 'v' : 'x';\n    num = Math.floor(num / 10);\n  }\n  return result;\n};\n\nmodule.exports = {\n  intToMiniRoman\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThReE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThReE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b + c) % 2 === 0;\n};\n\n/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\n/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\n/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\n/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\n/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\n/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\n/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\n/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*WRItE A funcTiON THat acCEpts a list Of stRiNgs.\n  THe list containS DiFFeRenT words. REtUrN thE woRD WitH MAxImum nuMBer\n  of unIQuE chARACteRS. If MULTiPLe StRings hAvE mAximUM NUMbER of unique\n  cHAracTers, return the oNe wHich CoMes FIrst in lEXiCoGraphiCaL ordeR.\n\n  findMax([\"name\", \"Of\", \"strIng\"]) === \"sTriNg\"\n  findMax([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"Cc\"]) === \"\"AAaaaAa\"\n  */\nCOnSt findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*WRItE A funcTiON THat acCEpts a list Of stRiNgs.\n  THe list containS DiFFeRenT words. REtUrN thE woRD WitH MAxImum nuMBer\n  of unIQuE chARACteRS. If MULTiPLe StRings hAvE mAximUM NUMbER of unique\n  cHAracTers, return the oNe wHich CoMes FIrst in lEXiCoGraphiCaL ordeR.\n\n  findMax([\"name\", \"Of\", \"strIng\"]) === \"sTriNg\"\n  findMax([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"Cc\"]) === \"\"AAaaaAa\"\n  */\nCOnSt findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i] > max) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  findMin([\"name\", \"Of\", \"strIng\"]) === \"name\"\n  findMin([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMin([\"aaaaaaa\", \"bb\",\"Cc\"]) === \"aaaaaaa\"\n  */\nCOnSt findMin = (words) => {\n  let min = words[0];\n  let minIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i] < min) {\n      min = words[i];\n      minIndex = i;\n    }\n  }\n  return min;\n};\n\n/*\n  findMedian([\"name\", \"Of\", \"strIng\"]) === \"name\"\n  findMedian([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMedian([\"aaaaaaa\", \"bb\",\"Cc\"]) === \"aaaaaaa\"\n  */\nCOnSt findMedian = (words) => {\n  let median = words[Math.floor(words.length / 2)];\n  return median;\n};\n\n/*\n  findMedian([\"name\", \"Of\", \"strIng\"]) === \"name\"\n  findMedian([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMedian([\"aaaaaaa\", \"bb\",\"Cc\"]) === \"aaaaaaa\"\n  */\nCOnSt findMedian = (words) => {\n  let median = words[Math.floor(words.length / 2)];\n  return median;\n};\n\n/*\n  findMedian([\"name\", \"Of\", \"strIng\"]) === \"name\"\n  findMedian([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMedian([\"aaaaaaa\", \"bb\",\"Cc\"]) === \"aaaaaaa\"\n  */\nCOnSt findMedian = (words) => {\n  let median = words[Math.floor(words.length / 2)];\n  return median;\n};\n\n/*\n  findMedian([\"name\", \"Of\", \"strIng\"]) === \"name\"\n  findMedian([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMedian([\"aaaaaaa\", \"bb\",\"Cc\"]) === \"aaaaaaa\"\n  */\nCOnSt findMedian = (words) => {\n  let median = words[Math.floor(words.length / 2)];\n  return median;\n};\n\n/*\n  findMedian([\"name\", \"Of\", \"strIng\"]) === \"name\"\n  findMedian([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMedian([\"aaaaaaa\", \"bb\",\"Cc\"]) === \"aaaaaaa\"\n  */\nCOnSt findMedian = (words) => {\n  let median = words[Math.floor(words.length / 2)];\n  return median;\n};\n\n/*\n  findMedian([\"name\", \"Of\", \"strIng\"]) === \"name\"\n  findMedian([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMedian([\"aaaaaaa\", \"bb\",\"Cc\"]) === \"aaaaaaa\"\n  */\nCOnSt findMedian = (words) => {\n  let median = words[Math.floor(words.length / 2)];\n  return median;\n};\n\n/*\n  findMedian([\"name\", \"Of\", \"strIng\"]) === \"name\"\n  findMedian([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMedian([\"aaaaaaa\", \"bb\",\"Cc\"]) === \"aaaaaaa\"\n  */\nCOnSt findMedian = (words) => {\n  let median = words[Math.floor(words.length / 2)];\n  return median;\n};\n\n/*\n  findMedian([\"name\", \"Of\", \"strIng\"]) === \"name\"\n  findMedian([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMedian([\"aaaaaaa\", \"bb\",\"Cc\"]) === \"aaaaaaa\"\n  */\nCOnSt findMedian = (words) => {\n  let median = words[Math.floor(words.length / 2)];\n  return median;\n};\n\n/*\n  findMedian([\"name\", \"Of\", \"strIng\"]) === \"name\"\n  findMedian([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMedian([\"aaaaaaa\", \"bb\",\"Cc\"]) === \"aaaaaaa\"\n  */\nCOnSt findMedian = (words) => {\n  let median = words[Math.floor(words.length / 2)];\n  return median;\n};\n\n/*\n  findMedian([\"name\", \"Of\", \"strIng\"]) === \"name\"\n  findMedian([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMedian([\"aaaaaaa\", \"bb\",\"Cc\"]) === \"aaaaaaa\"\n  */\nCOnSt findMedian = (words) => {\n  let median = words[Math.floor(words", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  yOu'RE a hunGrY RABbit, aND you aLreaDy Have Eaten a cerTAiN number Of CarRoTs,\n  BuT noW yoU need TO eat moRE CaRrots tO CompletE ThE daY'S MEalS.\n  You SHOUlD return An ArRay of [ tOtAl number Of eaTEN CArROts after yoUR meaLs,\n                                  the number of cArrOts lEfT afTEr youR MeAlS ]\n  if theRe Are noT EnougH remaining carRotS, you WIll eat ALl remaining carroTs, BUt wiLl STiLl be HUngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  yOu'RE a hunGrY RABbit, aND you aLreaDy Have Eaten a cerTAiN number Of CarRoTs,\n  BuT noW yoU need TO eat moRE CaRrots tO CompletE ThE daY'S MEalS.\n  You SHOUlD return An ArRay of [ tOtAl number Of eaTEN CArROts after yoUR meaLs,\n                                  the number of cArrOts lEfT afTEr youR MeAlS ]\n  if theRe Are noT EnougH remaining carRotS, you WIll eat ALl remaining carroTs, BUt wiLl STiLl be HUngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining > 1000) {\n    throw new Error('Invalid input');\n  }\n  let result = [];\n  let i = 0;\n  while (i < number) {\n    result.push(i);\n    i++;\n  }\n  i = 0;\n  while (i < need) {\n    result.push(i);\n    i++;\n  }\n  i = 0;\n  while (i < remaining) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = eat;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* gIvEN a string, finD oUT HOw manY DistiNct cHaRactErs (regardLEsS Of CasE) dOeS iT coNsiST Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* gIvEN a string, finD oUT HOw manY DistiNct cHaRactErs (regardLEsS Of CasE) dOeS iT coNsiST Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char = '';\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char!=='') {\n      if (char!== char.toUpperCase()) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  gIvEN two lIsTS operator, ANd operand. The FIrst list hAs baSiC algEbra operaTIoNS, aNd \n  tHe SeCoNd list iS a list oF INteGERs. use the TWo given LIsTs tO BUIld THe aLGEBrIC \n  eXpRessioN aNd return The eVALUAtIOn of this exPRessIon.\n\n  The baSic AlgeBrA opERatioNS:\n  ADdItion ( + ) \n  SUbTractIOn ( - ) \n  MulTiplIcaTion ( * ) \n  fLooR DivisioN ( // ) \n  EXPoneNtIAtIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN two lIsTS operator, ANd operand. The FIrst list hAs baSiC algEbra operaTIoNS, aNd \n  tHe SeCoNd list iS a list oF INteGERs. use the TWo given LIsTs tO BUIld THe aLGEBrIC \n  eXpRessioN aNd return The eVALUAtIOn of this exPRessIon.\n\n  The baSic AlgeBrA opERatioNS:\n  ADdItion ( + ) \n  SUbTractIOn ( - ) \n  MulTiplIcaTion ( * ) \n  fLooR DivisioN ( // ) \n  EXPoneNtIAtIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  if (operator.length!== operand.length - 1) {\n    throw new Error('The length of operator list is not equal to the length of operand list minus one.');\n  }\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operator[i] * operand[i + 1];\n  }\n  return result;\n};\n\nexport default doAlgebra;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*YOU aRE giveN a STRIng s.\n  if s[i] IS a letTer, rEvErse Its case frOM lOWeR to UpPeR oR viSe vERSa, \n  oTHErWise keEP it as it IS.\n  IF thE STRinG ConTAINs NO lEtTers, reVeRsE the STRINg.\n  tHe function SHoulD return the resuLteD strInG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*YOU aRE giveN a STRIng s.\n  if s[i] IS a letTer, rEvErse Its case frOM lOWeR to UpPeR oR viSe vERSa, \n  oTHErWise keEP it as it IS.\n  IF thE STRinG ConTAINs NO lEtTers, reVeRsE the STRINg.\n  tHe function SHoulD return the resuLteD strInG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.toString();\n  let strs = str.split('');\n  let strs2 = strs.map((s, i) => {\n    if (s === '#') {\n      return '#';\n    }\n    if (s === '@') {\n      return '@';\n    }\n    if (s === 'a') {\n      return 'A';\n    }\n    if (s === 'A') {\n      return 'a';\n    }\n    if (s === 'c') {\n      return 'C';\n    }\n    if (s === 'C') {\n      return 'c';\n    }\n    return s;\n  });\n  let strs3 = strs2.map((s, i) => {\n    if (s === '#') {\n      return '#';\n    }\n    if (s === '@') {\n      return '@';\n    }\n    if (s === 'a') {\n      return 'A';\n    }\n    if (s === 'A') {\n      return 'a';\n    }\n    if (s === 'c') {\n      return 'C';\n    }\n    if (s === 'C') {\n      return 'c';\n    }\n    return s;\n  });\n  let strs4 = strs3.map((s, i) => {\n    if (s === '#') {\n      return '#';\n    }\n    if (s === '@') {\n      return '@';\n    }\n    if (s === 'a') {\n      return 'A';\n    }\n    if (s === 'A') {\n      return 'a';\n    }\n    if (s === 'c') {\n      return 'C';\n    }\n    if (s === 'C') {\n      return 'c';\n    }\n    return s;\n  });\n  let strs5 = strs4.map((s, i) => {\n    if (s === '#') {\n      return '#';\n    }\n    if (s === '@') {\n      return '@';\n    }\n    if (s === 'a') {\n      return 'A';\n    }\n    if (s === 'A') {\n      return 'a';\n    }\n    if (s === 'c') {\n      return 'C';\n    }\n    if (s === 'C') {\n      return 'c';\n    }\n    return s;\n  });\n  let strs6 = strs5.map((s, i) => {\n    if (s === '#') {\n      return '#';\n    }\n    if (s === '@') {\n      return '@';\n    }\n    if (s === 'a') {\n      return 'A';\n    }\n    if (s === 'A') {\n      return 'a';\n    }\n    if (s === 'c') {\n      return 'C';\n    }\n    if (s === 'C') {\n      return 'c';\n    }\n    return s;\n  });\n  let strs7 = strs6.map((s, i) => {\n    if (s === '#') {\n      return '#';\n    }\n    if (s === '@') {\n      return '@';\n    }\n    if (s === 'a') {\n      return 'A';\n    }\n    if (s === 'A') {\n      return 'a';\n    }\n    if (s === 'c') {\n      return 'C';\n    }\n    if (s === 'C') {\n      return 'c';\n    }\n    return s;\n  });\n  let strs8 = strs7.map((s, i) => {\n    if (s === '#') {\n      return '#';\n    }\n    if (s === '@') {\n      return '@';\n    }\n    if (s === 'a') {\n      return 'A';\n    }\n    if (s === 'A') {\n      return 'a';\n    }\n    if (s === 'c') {\n      return 'C';\n    }\n    if (s === 'C') {\n      return 'c';\n    }\n    return s;\n  });\n  let strs9 = strs8.map((s, i) => {\n    if (s === '#') {\n      return '#';\n    }\n    if (s === '@') {\n      return '@';\n    }\n    if (s === 'a') {\n      return 'A';\n    }\n    if (s === 'A') {\n      return 'a';\n    }\n    if (s === 'c') {\n      return 'C';\n    }\n    if (s === 'C') {\n      return 'c';\n    }\n    return s;\n  });\n  let strs10 = strs9.map((s, i) => {\n    if (s === '#') {\n      return '#';\n    }\n    if (s === '@') {\n      return '@';\n    }\n    if (s === 'a') {\n      return 'A';\n    }\n    if (s === 'A') {\n      return 'a';\n    }\n    if (s === 'c') {\n      return 'C';\n    }\n    if (s === 'C') {\n      return 'c';\n    }\n    return s;\n  });\n  let strs11 = strs10.map((s, i) => {\n    if (s === '#') {\n      return '#';\n    }\n    if (s === '@') {\n      return '@';\n    }\n    if (s === 'a') {\n      return 'A';\n    }\n    if (s ===", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (typeof text!=='string') {\n    return text;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/**\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  if (typeof text!=='string') {\n    return text;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/**\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha1 = (text) => {\n  if (typeof text!=='string') {\n    return text;\n  }\n  const sha1 = crypto.createHash('sha1');\n  sha1.update(text);\n  return sha1.digest('hex');\n};\n\n/**\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha256 = (text) => {\n  if (typeof text!=='string') {\n    return text;\n  }\n  const sha256 = crypto.createHash('sha256');\n  sha256.update(text);\n  return sha256.digest('hex');\n};\n\n/**\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha512 = (text) => {\n  if (typeof text!=='string') {\n    return text;\n  }\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  return sha512.digest('hex');\n};\n\n/**\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha3_224 = (text) => {\n  if (typeof text!=='string') {\n    return text;\n  }\n  const sha3_224 = crypto.createHash('sha3_224');\n  sha3_224.update(text);\n  return sha3_224.digest('hex');\n};\n\n/**\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha3_256 = (text) => {\n  if (typeof text!=='string') {\n    return text;\n  }\n  const sha3_256 = crypto.createHash('sha3_256');\n  sha3_256.update(text);\n  return sha3_256.digest('hex');\n};\n\n/**\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha3_384 = (text) => {\n  if (typeof text!=='string') {\n    return text;\n  }\n  const sha3_384 = crypto.createHash('sha3_384');\n  sha3_384.update(text);\n  return sha3_384.digest('hex');\n};\n\n/**\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha3_512 = (text) => {\n  if (typeof text!=='string') {\n    return text;\n  }\n  const sha3_512 = crypto.createHash('sha3_512');\n  sha3_512.update(text);\n  return sha3_512.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n  md5,\n  sha1,\n  sha256,\n  sha512,\n  sha3_224,\n  sha3_256,\n  sha3_384,\n  sha3_512,\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  gIvEN two pOsITIVe intEGers a aNd b, return thE eVen dIgits betwEEn a\n  ANd b, in AscEnDiNg OrdEr.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN two pOsITIVe intEGers a aNd b, return thE eVen dIgits betwEEn a\n  ANd b, in AscEnDiNg OrdEr.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    return generateIntegers(b, a)\n  }\n  const result = []\n  for (let i = a; i <= b; i++) {\n    result.push(i)\n  }\n  return result\n}\n\nmodule.exports = generateIntegers\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* iNpUT to thIs FUNCtion IS a strIng rEpReseNting musiCAl NOtEs in a SpEcIaL AScII FORmaT.\n  yOuR task iS To parse THiS stRING anD return list Of iNTEGeRS cOrResponDiNg To hoW MANY bEAts does eacH\n  Not lAst.\n\n  Here iS a lEgenD:\n  'o' - WhoLE note, LAsTs Four beAtS\n  'o|' - halF Note, lAsts Two BeatS\n  '.|' - QuaTEr note, lAsTS one BeAT\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* iNpUT to thIs FUNCtion IS a strIng rEpReseNting musiCAl NOtEs in a SpEcIaL AScII FORmaT.\n  yOuR task iS To parse THiS stRING anD return list Of iNTEGeRS cOrResponDiNg To hoW MANY bEAts does eacH\n  Not lAst.\n\n  Here iS a lEgenD:\n  'o' - WhoLE note, LAsTs Four beAtS\n  'o|' - halF Note, lAsts Two BeatS\n  '.|' - QuaTEr note, lAsTS one BeAT\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = [];\n  let music_string_array = music_string.split(\" \");\n  for (let i = 0; i < music_string_array.length; i++) {\n    let music_string_array_i = music_string_array[i].split(\"|\");\n    let music_string_array_i_length = music_string_array_i.length;\n    if (music_string_array_i_length === 1) {\n      music_list.push(music_string_array_i[0]);\n    } else if (music_string_array_i_length === 2) {\n      music_list.push(music_string_array_i[0]);\n      music_list.push(music_string_array_i[1]);\n    } else if (music_string_array_i_length === 4) {\n      music_list.push(music_string_array_i[0]);\n      music_list.push(music_string_array_i[1]);\n      music_list.push(music_string_array_i[2]);\n      music_list.push(music_string_array_i[3]);\n    } else if (music_string_array_i_length === 6) {\n      music_list.push(music_string_array_i[0]);\n      music_list.push(music_string_array_i[1]);\n      music_list.push(music_string_array_i[2]);\n      music_list.push(music_string_array_i[3]);\n      music_list.push(music_string_array_i[4]);\n      music_list.push(music_string_array_i[5]);\n    } else if (music_string_array_i_length === 8) {\n      music_list.push(music_string_array_i[0]);\n      music_list.push(music_string_array_i[1]);\n      music_list.push(music_string_array_i[2]);\n      music_list.push(music_string_array_i[3]);\n      music_list.push(music_string_array_i[4]);\n      music_list.push(music_string_array_i[5]);\n      music_list.push(music_string_array_i[6]);\n      music_list.push(music_string_array_i[7]);\n    } else if (music_string_array_i_length === 10) {\n      music_list.push(music_string_array_i[0]);\n      music_list.push(music_string_array_i[1]);\n      music_list.push(music_string_array_i[2]);\n      music_list.push(music_string_array_i[3]);\n      music_list.push(music_string_array_i[4]);\n      music_list.push(music_string_array_i[5]);\n      music_list.push(music_string_array_i[6]);\n      music_list.push(music_string_array_i[7]);\n      music_list.push(music_string_array_i[8]);\n      music_list.push(music_string_array_i[9]);\n    } else if (music_string_array_i_length === 12) {\n      music_list.push(music_string_array_i[0]);\n      music_list.push(music_string_array_i[1]);\n      music_list.push(music_string_array_i[2]);\n      music_list.push(music_string_array_i[3]);\n      music_list.push(music_string_array_i[4]);\n      music_list.push(music_string_array_i[5]);\n      music_list.push(music_string_array_i[6]);\n      music_list.push(music_string_array_i[7]);\n      music_list.push(music_string_array_i[8]);\n      music_list.push(music_string_array_i[9]);\n      music_list.push(music_string_array_i[10]);\n      music_list.push(music_string_array_i[11]);\n    } else if (music_string_array_i_length === 14) {\n      music_list.push(music_string_array_i[0]);\n      music_list.push(music_string_array_i[1]);\n      music_list.push(music_string_array_i[2]);\n      music_list.push(music_string_array_i[3]);\n      music_list.push(music_string_array_i[4]);\n      music_list.push(music_string_array_i[5]);\n      music_list.push(music_string_array_i[6]);\n      music_list.push(music_string_array_i[7]);\n      music_list.push(music_string_array_i[8]);\n      music_list.push(music_string_array_i[9]);\n      music_list.push(music_string_array_i[10]);\n      music_list.push(music_string_array_i[11]);\n      music_list.push(music_string_array_i[12]);\n      music_list.push(music_string_array_i[13]);\n    } else if (music_string_array_i_length === 16) {\n      music_list.push(music_string_array_i[0]);\n      music_list.push", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* fInD How maNy times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* fInD How maNy times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/19", "prompt": "/* iNpUT is a spAcE-DELimitED striNg of NuMberAls from 'zeRO' tO 'NiNe'.\n  VAlId ChOicEs aRE 'ZerO', 'ONe', 'Two', 'thrEE', 'four', 'fiVE', 'sIx', 'sEVEN', 'eiGHt' aND 'NInE'.\n  reTuRn the sTrInG witH numbers SORTeD From smalleST to lArgest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* iNpUT is a spAcE-DELimitED striNg of NuMberAls from 'zeRO' tO 'NiNe'.\n  VAlId ChOicEs aRE 'ZerO', 'ONe', 'Two', 'thrEE', 'four', 'fiVE','sIx','sEVEN', 'eiGHt' aND 'NInE'.\n  reTuRn the sTrInG witH numbers SORTeD From smalleST to lArgest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numberArray = numbers.split('').sort();\n  let result = '';\n  for (let i = 0; i < numberArray.length; i++) {\n    result += numberArray[i];\n  }\n  return result;\n};\n\nexport default sortNumbers;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* gIvEN a posItIVE FloatINg poiNt number, it CaN be dEcomposed INtO\n  AnD inTeGeR pArt (LarGESt iNTEgEr smalLEr than gIVeN number) anD DECimALs\n  (lEFTOvER pArT alwayS sMaLler THAN 1).\n\n  reTUrn the deciMAl paRt of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* gIvEN a posItIVE FloatINg poiNt number, it CaN be dEcomposed INtO\n  AnD inTeGeR pArt (LarGESt iNTEgEr smalLEr than gIVeN number) anD DECimALs\n  (lEFTOvER pArT alwayS sMaLler THAN 1).\n\n  reTUrn the deciMAl paRt of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (number < 0) {\n    return Math.ceil(number);\n  }\n  return Math.floor(number);\n};\n\n/**\n  * gIvEN a posItIVE FloatINg poiNt number, it CaN be dEcomposed INtO\n  AnD inTeGeR pArt (LarGESt iNTEgEr smalLEr than gIVeN number) anD DECimALs\n  (lEFTOvER pArT alwayS sMaLler THAN 1).\n\n  reTUrn the deciMAl paRt of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber2 = (number) => {\n  if (number < 0) {\n    return Math.ceil(number);\n  }\n  return Math.floor(number);\n};\n\n/**\n  * gIvEN a posItIVE FloatINg poiNt number, it CaN be dEcomposed INtO\n  AnD inTeGeR pArt (LarGESt iNTEgEr smalLEr than gIVeN number) anD DECimALs\n  (lEFTOvER pArT alwayS sMaLler THAN 1).\n\n  reTUrn the deciMAl paRt of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber3 = (number) => {\n  if (number < 0) {\n    return Math.ceil(number);\n  }\n  return Math.floor(number);\n};\n\n/**\n  * gIvEN a posItIVE FloatINg poiNt number, it CaN be dEcomposed INtO\n  AnD inTeGeR pArt (LarGESt iNTEgEr smalLEr than gIVeN number) anD DECimALs\n  (lEFTOvER pArT alwayS sMaLler THAN 1).\n\n  reTUrn the deciMAl paRt of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber4 = (number) => {\n  if (number < 0) {\n    return Math.ceil(number);\n  }\n  return Math.floor(number);\n};\n\n/**\n  * gIvEN a posItIVE FloatINg poiNt number, it CaN be dEcomposed INtO\n  AnD inTeGeR pArt (LarGESt iNTEgEr smalLEr than gIVeN number) anD DECimALs\n  (lEFTOvER pArT alwayS sMaLler THAN 1).\n\n  reTUrn the deciMAl paRt of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber5 = (number) => {\n  if (number < 0) {\n    return Math.ceil(number);\n  }\n  return Math.floor(number);\n};\n\n/**\n  * gIvEN a posItIVE FloatINg poiNt number, it CaN be dEcomposed INtO\n  AnD inTeGeR pArt (LarGESt iNTEgEr smalLEr than gIVeN number) anD DECimALs\n  (lEFTOvER pArT alwayS sMaLler THAN 1).\n\n  reTUrn the deciMAl paRt of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber6 = (number) => {\n  if (number < 0) {\n    return Math.ceil(number);\n  }\n  return Math.floor(number);\n};\n\n/**\n  * gIvEN a posItIVE FloatINg poiNt number, it CaN be dEcomposed INtO\n  AnD inTeGeR pArt (LarGESt iNTEgEr smalLEr than gIVeN number) anD DECimALs\n  (lEFTOvER pArT alwayS sMaLler THAN 1).\n\n  reTUrn the deciMAl paRt of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber7 = (number) => {\n  if (number < 0) {\n    return Math.ceil(number);\n  }\n  return Math.floor(number);\n};\n\n/**\n  * gIvEN a posItIVE FloatINg poiNt number, it CaN be dEcomposed INtO\n  AnD inTeGeR pArt (LarGESt iNTEgEr smalLEr than gIVeN number) anD DECimALs\n  (lEFTOvER pArT alwayS sMaLler THAN 1).\n\n  reTUrn the deciMAl paRt of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber8 = (number) => {\n  if (number < 0) {\n    return Math.ceil(number);\n  }\n  return Math.floor(number);\n};\n\n/**\n  * gIvEN a posItIVE FloatINg poiNt number, it CaN be dEcomposed INtO\n  AnD inTeGeR pArt (LarGESt iNTEgEr smalLEr than gIVeN number) anD DECimALs\n  (lEFTOvER pArT alwayS sMaLler THAN 1).\n\n  reTUrn the deciMAl paRt of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber9 = (number) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* fRoM a SupplIeD list OF numbers (Of lenGTh at lEast TwO) selEct and return two THaT ArE thE cLoSeSt tO eaCH\n  OthER AnD return them in oRDer (smalLEr NumBER, LarGEr nUMBEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* fRoM a SupplIeD list OF numbers (Of lenGTh at lEast TwO) selEct and return two THaT ArE thE cLoSeSt tO eaCH\n  OthER AnD return them in oRDer (smalLEr NumBER, LarGEr nUMBEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[numbers.length - 1];\n  const mid = (min + max) / 2;\n  const mid2 = (min + max) / 2;\n  const mid3 = (min + max) / 2;\n  const mid4 = (min + max) / 2;\n  const mid5 = (min + max) / 2;\n  const mid6 = (min + max) / 2;\n  const mid7 = (min + max) / 2;\n  const mid8 = (min + max) / 2;\n  const mid9 = (min + max) / 2;\n  const mid10 = (min + max) / 2;\n  const mid11 = (min + max) / 2;\n  const mid12 = (min + max) / 2;\n  const mid13 = (min + max) / 2;\n  const mid14 = (min + max) / 2;\n  const mid15 = (min + max) / 2;\n  const mid16 = (min + max) / 2;\n  const mid17 = (min + max) / 2;\n  const mid18 = (min + max) / 2;\n  const mid19 = (min + max) / 2;\n  const mid20 = (min + max) / 2;\n  const mid21 = (min + max) / 2;\n  const mid22 = (min + max) / 2;\n  const mid23 = (min + max) / 2;\n  const mid24 = (min + max) / 2;\n  const mid25 = (min + max) / 2;\n  const mid26 = (min + max) / 2;\n  const mid27 = (min + max) / 2;\n  const mid28 = (min + max) / 2;\n  const mid29 = (min + max) / 2;\n  const mid30 = (min + max) / 2;\n  const mid31 = (min + max) / 2;\n  const mid32 = (min + max) / 2;\n  const mid33 = (min + max) / 2;\n  const mid34 = (min + max) / 2;\n  const mid35 = (min + max) / 2;\n  const mid36 = (min + max) / 2;\n  const mid37 = (min + max) / 2;\n  const mid38 = (min + max) / 2;\n  const mid39 = (min + max) / 2;\n  const mid40 = (min + max) / 2;\n  const mid41 = (min + max) / 2;\n  const mid42 = (min + max) / 2;\n  const mid43 = (min + max) / 2;\n  const mid44 = (min + max) / 2;\n  const mid45 = (min + max) / 2;\n  const mid46 = (min + max) / 2;\n  const mid47 = (min + max) / 2;\n  const mid48 = (min + max) / 2;\n  const mid49 = (min + max) / 2;\n  const mid50 = (min + max) / 2;\n  const mid51 = (min + max) / 2;\n  const mid52 = (min + max) / 2;\n  const mid53 = (min + max) / 2;\n  const mid54 = (min + max) / 2;\n  const mid55 = (min + max) / 2;\n  const mid56 = (min + max) / 2;\n  const mid57 = (min + max) / 2;\n  const mid58 = (min + max) / 2;\n  const mid59 = (min + max) / 2;\n  const mid60 = (min + max) / 2;\n  const mid61 = (min + max) / 2;\n  const mid62 = (min + max) / 2;\n  const mid63 = (min + max) / 2;\n  const mid64 = (min + max) / 2;\n  const mid65 = (min + max) / 2;\n  const mid66 = (min + max) / 2;\n  const mid67 = (min + max) / 2;\n  const mid68 = (min + max) / 2;\n  const mid69 = (min + max) / 2;\n  const mid70 = (min + max) / 2;\n  const mid71 = (min + max) / 2;\n  const mid72 = (min + max) / 2;\n  const mid73 = (min + max) / 2;\n  const mid74 = (min + max) / 2;\n  const mid75 = (min + max) / 2;\n  const mid76 = (min + max) / 2;\n  const mid77 = (min + max) / 2;\n  const mid78 = (min + max) / 2;\n  const mid79 = (min + max) / 2;\n  const mid80 = (min + max) / 2;\n  const mid81 = (min + max) / 2;\n  const mid82 = (min + max) / 2;\n  const mid83 = (min + max) / 2;\n  const mid84 = (min + max) / 2;\n  const mid85 = (min + max) / 2;\n  const mid86 = (min + max) / 2;\n  const mid87 = (min + max) / 2;\n  const mid88 = (min + max) / 2;\n  const mid89 = (min + max) / 2;\n  const mid90 = (min + max) / 2;\n  const mid91 = (min + max) / 2;\n  const mid92 = (min + max) / 2;\n  const mid93 = (min + max) / 2;\n  const mid94 = (min + max) / 2;\n  const mid95 = (min + max) / 2;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* gIvEN list of numbers (of At LEASt two ELemenTs), apPlY a liNear transFOrM To ThaT list,\n  sUcH tHat The SMAllEST nUmber wILl becomE 0 AnD thE LARgeST wiLL BEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* gIvEN list of numbers (of At LEASt two ELemenTs), apPlY a liNear transFOrM To ThaT list,\n  sUcH tHat The SMAllEST nUmber wILl becomE 0 AnD thE LARgeST wiLL BEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  let scale = 1 / sum;\n  return numbers.map((number) => {\n    return number * scale;\n  });\n};\n\nconst getRandom = (min, max) => {\n  return Math.random() * (max - min) + min;\n};\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomFloat = (min, max) => {\n  return Math.random() * (max - min) + min;\n};\n\nconst getRandomFloatBetween = (min, max) => {\n  return Math.random() * (max - min) + min;\n};\n\nconst getRandomColor = () => {\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += getRandomInt(0, 255).toString(16);\n  }\n  return color;\n};\n\nconst getRandomString = () => {\n  let string = '';\n  for (let i = 0; i < 10; i++) {\n    string += getRandomInt(0, 9).toString(10);\n  }\n  return string;\n};\n\nconst getRandomNumber = () => {\n  let number = getRandomInt(0, 100);\n  return number;\n};\n\nconst getRandomNumberBetween = (min, max) => {\n  return getRandomInt(min, max);\n};\n\nconst getRandomColor = () => {\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += getRandomInt(0, 255).toString(16);\n  }\n  return color;\n};\n\nconst getRandomString = () => {\n  let string = '';\n  for (let i = 0; i < 10; i++) {\n    string += getRandomInt(0, 9).toString(10);\n  }\n  return string;\n};\n\nconst getRandomNumber = () => {\n  let number = getRandomInt(0, 100);\n  return number;\n};\n\nconst getRandomNumberBetween = (min, max) => {\n  return getRandomInt(min, max);\n};\n\nconst getRandomColor = () => {\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += getRandomInt(0, 255).toString(16);\n  }\n  return color;\n};\n\nconst getRandomString = () => {\n  let string = '';\n  for (let i = 0; i < 10; i++) {\n    string += getRandomInt(0, 9).toString(10);\n  }\n  return string;\n};\n\nconst getRandomNumber = () => {\n  let number = getRandomInt(0, 100);\n  return number;\n};\n\nconst getRandomNumberBetween = (min, max) => {\n  return getRandomInt(min, max);\n};\n\nconst getRandomColor = () => {\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += getRandomInt(0, 255).toString(16);\n  }\n  return color;\n};\n\nconst getRandomString = () => {\n  let string = '';\n  for (let i = 0; i < 10; i++) {\n    string += getRandomInt(0, 9).toString(10);\n  }\n  return string;\n};\n\nconst getRandomNumber = () => {\n  let number = getRandomInt(0, 100);\n  return number;\n};\n\nconst getRandomNumberBetween = (min, max) => {\n  return getRandomInt(min, max);\n};\n\nconst getRandomColor = () => {\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += getRandomInt(0, 255).toString(16);\n  }\n  return color;\n};\n\nconst getRandomString = () => {\n  let string = '';\n  for (let i = 0; i < 10; i++) {\n    string += getRandomInt(0, 9).toString(10);\n  }\n  return string;\n};\n\nconst getRandomNumber = () => {\n  let number = getRandomInt(0, 100);\n  return number;\n};\n\nconst getRandomNumberBetween = (min, max) => {\n  return getRandomInt(min, max);\n};\n\nconst getRandomColor = () => {\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += getRandomInt(0, 255).toString(16);\n  }\n  return color;\n};\n\nconst getRandomString = () => {\n  let string = '';\n  for (let i = 0; i < 10; i++) {\n    string += getRandomInt(0, 9).toString(10);\n  }\n  return string;\n};\n\nconst getRandomNumber = () => {\n  let number = getRandomInt(0, 100);\n  return number;\n};\n\nconst getRandomNumberBetween = (min, max) => {\n  return getRandomInt(min, max);\n};\n\nconst getRandomColor = () => {\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += getRandomInt(0, 255).toString(16);\n  }\n  return color;\n};\n\nconst getRandomString = () => {\n  let string = '';\n  for (let i = 0; i < 10; i++) {\n    string += getRandomInt(0, 9).toString(10);\n  }\n  return string;\n};\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "/* fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefined = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersInRange = (values, min, max) => {\n  return values.filter((value) => {\n    return value >= min && value <= max;\n  });\n};\n\n/**\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersInRangeWithStep = (values, min, max, step) => {\n  return values.filter((value) => {\n    return value >= min && value <= max && value % step === 0;\n  });\n};\n\n/**\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersInRangeWithStepAndMin = (values, min, max, step) => {\n  return values.filter((value) => {\n    return value >= min && value <= max && value % step === 0;\n  });\n};\n\n/**\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersInRangeWithStepAndMax = (values, min, max, step) => {\n  return values.filter((value) => {\n    return value >= min && value <= max && value % step === 0;\n  });\n};\n\n/**\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersInRangeWithStepAndMinAndMax = (values, min, max, step) => {\n  return values.filter((value) => {\n    return value >= min && value <= max && value % step === 0;\n  });\n};\n\n/**\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersInRangeWithStepAndMinAndMaxAndStep = (values, min, max, step) => {\n  return values.filter((value) => {\n    return value >= min && value <= max && value % step === 0;\n  });\n};\n\n/**\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersInRangeWithStepAndMinAndMaxAndStepAndStep = (values, min, max, step, step) => {\n  return values.filter((value) => {\n    return value >= min && value <= max && value % step === 0;\n  });\n};\n\n/**\n  * fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbersInRangeWithStepAndMinAndMaxAndStepAndStepAndStep = (values, min, max, step, step) => {\n  return values.filter((value) => {\n    return value >= min && value <= max && value % step === 0;\n  });\n};\n\nmodule.exports = {\n  filterIntegers,\n  filterStrings,\n  filterObjects,\n  filterBooleans,\n  filterNulls,\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* rEtURn lenGtH OF Given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "/* rEtURn lenGtH OF Given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\nmodule.exports = strlen;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* fOr A Given NuMBER n, find THe larGest NuMber That dividES n eVEnLy, sMaLlEr ThaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* fOr A Given NuMBER n, find THe larGest NuMber That dividES n eVEnLy, sMaLlEr ThaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 0) {\n    return 0;\n  }\n  const divisors = [];\n  let divisor = 2;\n  while (n % divisor === 0) {\n    divisors.push(divisor);\n    divisor++;\n  }\n  if (divisors.length === 0) {\n    return 1;\n  }\n  return divisors[divisors.length - 1];\n};\n\nmodule.exports = largestDivisor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* rEtURn list of pRiME FActorS Of givEn inTeGer in tHe order frOM sMAlLesT tO lArGesT.\n  EaCH Of tHE FaCtors sHOuld be lIStEd nUMBEr oF TimES COrREsPoNding tO hOw Many TIMES iT Appeares in faCToriZation.\n  InPut NumbEr ShoULd be eQUaL tO the prOdUct of ALl facTors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* rEtURn list of pRiME FActorS Of givEn inTeGer in tHe order frOM sMAlLesT tO lArGesT.\n  EaCH Of tHE FaCtors sHOuld be lIStEd nUMBEr oF TimES COrREsPoNding tO hOw Many TIMES iT Appeares in faCToriZation.\n  InPut NumbEr ShoULd be eQUaL tO the prOdUct of ALl facTors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let c = b;\n    while (c % b === 0) {\n      a = a * b;\n      c = c / b;\n    }\n    b = b / a;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\n\nconst factorize2 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let c = b;\n    while (c % b === 0) {\n      a = a * b;\n      c = c / b;\n    }\n    b = b / a;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize2(8)\n  [2, 2, 2]\n  >>> factorize2(25)\n  [5, 5]\n  >>> factorize2(70)\n  [2, 5, 7]\n  */\n\nconst factorize3 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let c = b;\n    while (c % b === 0) {\n      a = a * b;\n      c = c / b;\n    }\n    b = b / a;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize3(8)\n  [2, 2, 2]\n  >>> factorize3(25)\n  [5, 5]\n  >>> factorize3(70)\n  [2, 5, 7]\n  */\n\nconst factorize4 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let c = b;\n    while (c % b === 0) {\n      a = a * b;\n      c = c / b;\n    }\n    b = b / a;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize4(8)\n  [2, 2, 2]\n  >>> factorize4(25)\n  [5, 5]\n  >>> factorize4(70)\n  [2, 5, 7]\n  */\n\nconst factorize5 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let c = b;\n    while (c % b === 0) {\n      a = a * b;\n      c = c / b;\n    }\n    b = b / a;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize5(8)\n  [2, 2, 2]\n  >>> factorize5(25)\n  [5, 5]\n  >>> factorize5(70)\n  [2, 5, 7]\n  */\n\nconst factorize6 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let c = b;\n    while (c % b === 0) {\n      a = a * b;\n      c = c / b;\n    }\n    b = b / a;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize6(8)\n  [2, 2, 2]\n  >>> factorize6(25)\n  [5, 5]\n  >>> factorize6(70)\n  [2, 5, 7]\n  */\n\nconst factorize7 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let c = b;\n    while (c % b === 0) {\n      a = a * b;\n      c = c / b;\n    }\n    b = b / a;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize7(8)\n  [2, 2, 2]\n  >>> factorize7(25)\n  [5, 5]\n  >>> factorize7(70)\n  [2, 5, 7]\n  */\n\nconst factorize8 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let c = b;\n    while (c % b === 0) {\n      a = a * b;\n      c = c / b;\n    }\n    b = b / a;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize8(8)\n  [2, 2, 2]\n  >>> factorize8(25)\n  [5, 5]\n  >>> factorize8(70)\n  [2, 5, 7]\n  */\n\nconst factorize9 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let c = b;\n    while (c % b === 0) {\n      a = a * b;\n      c = c / b;\n    }\n    b = b / a;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize9(8)\n  [2, 2, 2]\n  >>> factorize9(25)\n  [5, 5]\n  >>> factorize9(70)\n  [2, 5, 7]\n  */\n\nconst factorize10 =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* fRoM A list of inTeGERS, remoVE all eLemeNtS thaT occur morE ThAN oNce.\n  keEp OrDer Of eLEMenTS LeFt the sAMe as in the INpUt.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* fRoM A list of inTeGERS, remoVE all eLemeNtS thaT occur morE ThAN oNce.\n  keEp OrDer Of eLEMenTS LeFt the sAMe as in the INpUt.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates2 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates3 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates4 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates5 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates6 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates7 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates8 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates9 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates10 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates11 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates12 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates13 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates14 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates15 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* fOr A Given string, FlIP LOwercASe chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "/* fOr A Given string, FlIP LOwercASe chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\nmodule.exports = {\n  flipCase\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\nmodule.exports = concatenate;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* fIlTEr an iNpUT list OF strings only FOr oneS thaT sTart With a giveN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "/* fIlTEr an iNpUT list OF strings only FOr oneS thaT sTart With a giveN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(prefix) === 0? [strings[0]] : [];\n  }\n  const prefixLength = prefix.length;\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst contains = (str, pattern) => {\n  return str.indexOf(pattern)!== -1;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst endsWith = (str, pattern) => {\n  return str.indexOf(pattern, str.length - pattern.length)!== -1;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst startsWith = (str, pattern) => {\n  return str.indexOf(pattern) === 0;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst containsIgnoreCase = (str, pattern) => {\n  return str.toLowerCase().indexOf(pattern.toLowerCase())!== -1;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst endsWithIgnoreCase = (str, pattern) => {\n  return str.toLowerCase().indexOf(pattern.toLowerCase(), str.length - pattern.length)!== -1;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst startsWithIgnoreCase = (str, pattern) => {\n  return str.toLowerCase().indexOf(pattern.toLowerCase()) === 0;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst containsIgnoreCaseWithPrefix = (str, prefix) => {\n  return str.toLowerCase().indexOf(prefix.toLowerCase())!== -1;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst endsWithIgnoreCaseWithPrefix = (str, prefix) => {\n  return str.toLowerCase().indexOf(prefix.toLowerCase(), str.length - prefix.length)!== -1;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst startsWithIgnoreCaseWithPrefix = (str, prefix) => {\n  return str.toLowerCase().indexOf(prefix.toLowerCase()) === 0;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst containsIgnoreCaseWithPrefix = (str, prefix) => {\n  return str.toLowerCase().indexOf(prefix.toLowerCase())!== -1;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst endsWithIgnoreCaseWithPrefix = (str, prefix) => {\n  return str.toLowerCase().indexOf(prefix.toLowerCase(), str.length - prefix.length)!== -1;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst startsWithIgnoreCaseWithPrefix = (str, prefix) => {\n  return str.toLowerCase().indexOf(prefix.toLowerCase()) === 0;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst containsIgnoreCaseWithPrefix = (str, prefix) => {\n  return str.toLowerCase().indexOf(prefix.toLowerCase())!== -1;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst endsWithIgnoreCaseWithPrefix = (str, prefix) => {\n  return str.toLowerCase().indexOf(prefix.toLowerCase(), str.length - prefix.length)!== -1;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst startsWithIgnoreCaseWithPrefix = (str, prefix) => {\n  return str.toLowerCase().indexOf(prefix.toLowerCase()) === 0;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst containsIgnoreCaseWithPrefix = (str, prefix) => {\n  return str.toLowerCase().indexOf(prefix.toLowerCase())!== -1;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst endsWithIgnoreCaseWithPrefix = (str, prefix) => {\n  return str.toLowerCase().indexOf(prefix.toLowerCase(), str.length - prefix.length)!== -1;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n * @returns {boolean}\n */\nconst startsWithIgnoreCaseWithPrefix = (str, prefix) => {\n  return str.toLowerCase().indexOf(prefix.toLowerCase()) === 0;\n};\n\n/**\n * @param {string} str\n * @param {string} pattern\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* yOu'RE giveN a list OF DEposiT And wiThdrAwAl operations on A bank accoUNt THaT stArTs WiTh\n  zEro balance. yOUr tASK iS to detECt if at aNY pOinT THE balance of ACcoUNT FaLLlS bElow zeRo, AnD\n  at tHAT POiNT function sHOuld return True. OtheRwiSe it ShOulD return False.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* yOu'RE giveN a list OF DEposiT And wiThdrAwAl operations on A bank accoUNt THaT stArTs WiTh\n  zEro balance. yOUr tASK iS to detECt if at aNY pOinT THE balance of ACcoUNT FaLLlS bElow zeRo, AnD\n  at tHAT POiNT function sHOuld return True. OtheRwiSe it ShOulD return False.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const result = operations.reduce((accumulator, current) => {\n    if (current < 0) {\n      return accumulator;\n    }\n    return accumulator && current;\n  }, true);\n  return result;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*RETuRN only PoSITIve nuMBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": true, "gc": "/*RETuRN only PoSITIve nuMBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getPositiveAndZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndPositiveAndZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndZeroAndPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndZeroAndPositiveAndZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndZeroAndPositiveAndZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndZeroAndPositiveAndZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndZeroAndPositiveAndZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndZeroAndPositiveAndZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n    if (l[i] === 0) {\n      result.push(l[i]);\n    }\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nconst getNegativeAndZeroAndPositiveAndZero = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/31", "prompt": "/*RETuRN true If A GIVen nuMBer is PrimE, aNd faLse otherwISe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*RETuRN true If A GIVen nuMBer is PrimE, aNd faLse otherwISe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 6; i <= sqrt; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  isPrime\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  eVaLUates PoLYNOmial WIth coEffiCiEnts xs At point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncoNSt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs ARe CoeFfIcIeNts Of a POLynOMIaL.\n  findZero find x sUCh that poly(x) = 0.\n  findZero rETuRns ONLY onLY zeRO POiNT, eVeN if theRe ArE manY.\n  mOREoVEr, findZero only takeS list xs HaviNg even nuMbeR of cOeFfiCIents\n  ANd LaRgest nOn Zero cOEfficIent As iT guaRAntEEs\n  a soluTiON.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  eVaLUates PoLYNOmial WIth coEffiCiEnts xs At point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncoNSt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs ARe CoeFfIcIeNts Of a POLynOMIaL.\n  findZero find x sUCh that poly(x) = 0.\n  findZero rETuRns ONLY onLY zeRO POiNT, eVeN if theRe ArE manY.\n  mOREoVEr, findZero only takeS list xs HaviNg even nuMbeR of cOeFfiCIents\n  ANd LaRgest nOn Zero cOEfficIent As iT guaRAntEEs\n  a soluTiON.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const x = xs[0];\n  const xs = xs.slice(1);\n  const xs = xs.map((item, index) => {\n    return item * Math.pow(x, index);\n  });\n  const poly = poly(xs, x);\n  if (poly === 0) {\n    return x;\n  }\n  return findZero(xs);\n}\n\n/*\n  findZero rETuRns ONLY onLY zeRO POiNT, eVeN if theRe ArE manY.\n  mOREoVEr, findZero only takeS list xs HaviNg even nuMbeR of cOeFfiCIents\n  ANd LaRgest nOn Zero cOEfficIent As iT guaRAntEEs\n  a soluTiON.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  const x = xs[0];\n  const xs = xs.slice(1);\n  const xs = xs.map((item, index) => {\n    return item * Math.pow(x, index);\n  });\n  const poly = poly(xs, x);\n  if (poly === 0) {\n    return x;\n  }\n  return findZero2(xs);\n}\n\n/*\n  findZero rETuRns ONLY onLY zeRO POiNT, eVeN if theRe ArE manY.\n  mOREoVEr, findZero only takeS list xs HaviNg even nuMbeR of cOeFfiCIents\n  ANd LaRgest nOn Zero cOEfficIent As iT guaRAntEEs\n  a soluTiON.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero3 = (xs) => {\n  const x = xs[0];\n  const xs = xs.slice(1);\n  const xs = xs.map((item, index) => {\n    return item * Math.pow(x, index);\n  });\n  const poly = poly(xs, x);\n  if (poly === 0) {\n    return x;\n  }\n  return findZero3(xs);\n}\n\n/*\n  findZero rETuRns ONLY onLY zeRO POiNT, eVeN if theRe ArE manY.\n  mOREoVEr, findZero only takeS list xs HaviNg even nuMbeR of cOeFfiCIents\n  ANd LaRgest nOn Zero cOEfficIent As iT guaRAntEEs\n  a soluTiON.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero4 = (xs) => {\n  const x = xs[0];\n  const xs = xs.slice(1);\n  const xs = xs.map((item, index) => {\n    return item * Math.pow(x, index);\n  });\n  const poly = poly(xs, x);\n  if (poly === 0) {\n    return x;\n  }\n  return findZero4(xs);\n}\n\n/*\n  findZero rETuRns ONLY onLY zeRO POiNT, eVeN if theRe ArE manY.\n  mOREoVEr, findZero only takeS list xs HaviNg even nuMbeR of cOeFfiCIents\n  ANd LaRgest nOn Zero cOEfficIent As iT guaRAntEEs\n  a soluTiON.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero5 = (xs) => {\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*THIs FUnctiOn TAKEs a list l and REturnS a list l' sucH tHat\n  l' iS identicaL To l in THe IndIcIeS tHat Are NOT diVISiBle by three, wHIle its vALuEs aT THE inDIciES THaT ArE dIvisibLe By three Are eQUAL\n  To THe values of THe coRrespondIng IndiCiEs oF l, But soRTeD.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*THIs FUnctiOn TAKEs a list l and REturnS a list l' sucH tHat\n  l' iS identicaL To l in THe IndIcIeS tHat Are NOT diVISiBle by three, wHIle its vALuEs aT THE inDIciES THaT ArE dIvisibLe By three Are eQUAL\n  To THe values of THe coRrespondIng IndiCiEs oF l, But soRTeD.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] = l[i++];\n      l[k++] = l[j--];\n    }\n  }\n  if (i < l.length) {\n    l[k++] = l[i];\n  }\n  return l.slice(0, k);\n};\n\nconst sortFourth = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] = l[i++];\n      l[k++] = l[j--];\n    }\n  }\n  if (i < l.length) {\n    l[k++] = l[i];\n  }\n  return l.slice(0, k);\n};\n\nconst sortFifth = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] = l[i++];\n      l[k++] = l[j--];\n    }\n  }\n  if (i < l.length) {\n    l[k++] = l[i];\n  }\n  return l.slice(0, k);\n};\n\nconst sortSixth = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] = l[i++];\n      l[k++] = l[j--];\n    }\n  }\n  if (i < l.length) {\n    l[k++] = l[i];\n  }\n  return l.slice(0, k);\n};\n\nconst sortSeventh = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] = l[i++];\n      l[k++] = l[j--];\n    }\n  }\n  if (i < l.length) {\n    l[k++] = l[i];\n  }\n  return l.slice(0, k);\n};\n\nconst sortEigth = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] = l[i++];\n      l[k++] = l[j--];\n    }\n  }\n  if (i < l.length) {\n    l[k++] = l[i];\n  }\n  return l.slice(0, k);\n};\n\nconst sortNinth = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] = l[i++];\n      l[k++] = l[j--];\n    }\n  }\n  if (i < l.length) {\n    l[k++] = l[i];\n  }\n  return l.slice(0, k);\n};\n\nconst sortTenth = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*RETuRN sortEd unique ELEMents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "/*RETuRN sortEd unique ELEMents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0,\n    j = 0,\n    k = 0,\n    res = [],\n    tmp = [];\n\n  while (i < l.length) {\n    if (j === k) {\n      tmp.push(l[i]);\n      k++;\n    } else {\n      if (l[i] === l[j]) {\n        j++;\n      } else {\n        res.push(l[i]);\n        i++;\n      }\n    }\n  }\n\n  return res.concat(tmp);\n};\n\nexport default unique;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*RETuRN maxiMuM ELEment in THe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "/*RETuRN maxiMuM ELEment in THe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return 0;\n  }\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*RETuRN the nUmBER Of timES the dIgit 7 ApPearS in integers LEsS ThAn n wHiCh ArE diVisIBLe bY 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*RETuRN the nUmBER Of timES the dIgit 7 ApPearS in integers LEsS ThAn n wHiCh ArE diVisIBLe bY 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i = 0;\n  while (i < n) {\n    if (i % 15 === 0) {\n      console.log(`${i}`);\n    } else if (i % 3 === 0) {\n      console.log(`fizz`);\n    } else if (i % 5 === 0) {\n      console.log(`buzz`);\n    } else {\n      console.log(`${i}`);\n    }\n    i++;\n  }\n};\n\nfizzBuzz(50);\nfizzBuzz(78);\nfizzBuzz(79);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*THIs FUnctiOn TAKEs a list l and REturnS a list l' sucH tHat\n  l' iS identicaL To l in THe Odd InDiCiEs, wHilE ITs vALUeS at the even INdicies ARe EquAL\n  TO thE ValUES Of THe even InDicies Of l, BuT sorTED.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*THIs FUnctiOn TAKEs a list l and REturnS a list l' sucH tHat\n  l' iS identicaL To l in THe Odd InDiCiEs, wHilE ITs vALUeS at the even INdicies ARe EquAL\n  TO thE ValUES Of THe even InDicies Of l, BuT sorTED.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  if (l.length < 2) {\n    return l;\n  }\n  let evens = [];\n  let odds = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  return evens.concat(odds);\n};\n\nexport default sortEven;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  REtURns enCoDED StrinG By cycLing groups Of ThreE characteRS.\n  */\ncONsT encodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD WitH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  REtURns enCoDED StrinG By cycLing groups Of ThreE characteRS.\n  */\ncONsT encodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD WitH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (coNST group of groups) {\n    IF (group.length == 3)\n      groups.push(group.slice(0, 1) + group[2]);\n    ElSe\n      groups.push(group);\n  }\n  return groups.join('');\n}\n\n/*\n  REtURns enCoDED StrinG By cycLing groups Of ThreE characteRS.\n  */\ncONsT encodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD witH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (coNST group of groups) {\n    IF (group.length == 3)\n      groups.push(group.slice(0, 1) + group[2]);\n    ElSe\n      groups.push(group);\n  }\n  return groups.join('');\n}\n\n/*\n  REtURns enCoDED StrinG By cycLing groups Of ThreE characteRS.\n  */\ncONsT encodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD witH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (coNST group of groups) {\n    IF (group.length == 3)\n      groups.push(group.slice(0, 1) + group[2]);\n    ElSe\n      groups.push(group);\n  }\n  return groups.join('');\n}\n\n/*\n  REtURns enCoDED StrinG By cycLing groups Of ThreE characteRS.\n  */\ncONsT encodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD witH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (coNST group of groups) {\n    IF (group.length == 3)\n      groups.push(group.slice(0, 1) + group[2]);\n    ElSe\n      groups.push(group);\n  }\n  return groups.join('');\n}\n\n/*\n  REtURns enCoDED StrinG By cycLing groups Of ThreE characteRS.\n  */\ncONsT encodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD witH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      i++;\n    } else {\n      i++;\n      i++;\n    }\n  }\n  return i - 1;\n};\n\n/*\n  isPrime REtURns a boolean value that is true if the number is prime.\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  isPrime REtURns a boolean value that is true if the number is prime.\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  isPrime REtURns a boolean value that is true if the number is prime.\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  isPrime REtURns a boolean value that is true if the number is prime.\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  isPrime REtURns a boolean value that is true if the number is prime.\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  isPrime REtURns a boolean value that is true if the number is prime.\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  isPrime REtURns a boolean value that is true if the number is prime.\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  isPrime REtURns a boolean value that is true if the number is prime.\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  isPrime REtURns a boolean value that is true if the number is prime.\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  isPrime REtURns a boolean value that is true if the number is prime.\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return Math.abs(mean - mean(numbers));\n};\n\nexport default meanAbsoluteDeviation;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZeroTAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZeroTAkES([1, 3, 5, 0])\n  false\n  >>> triplesSumToZeroTAkES([1, 3, -2, 1])\n  true\n  >>> triplesSumToZeroTAkES([1, 2, 3, 7])\n  false\n  >>> triplesSumToZeroTAkES([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZeroTAkES([1])\n  false\n  */\nconst triplesSumToZeroTAkES = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZeroTAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZeroTAkES([1, 3, 5, 0])\n  false\n  >>> triplesSumToZeroTAkES([1, 3, -2, 1])\n  true\n  >>> triplesSumToZeroTAkES([1, 2, 3, 7])\n  false\n  >>> triplesSumToZeroTAkES([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZeroTAkES([1])\n  false\n  */\nconst triplesSumToZeroTAkES = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZeroTAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZeroTAkES([1, 3, 5, 0])\n  false\n  >>> triplesSumToZeroTAkES([1, 3, -2, 1])\n  true\n  >>> triplesSumToZeroTAkES([1, 2, 3, 7])\n  false\n  >>> triplesSumToZeroTAkES([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZeroTAkES([1])\n  false\n  */\nconst triplesSumToZeroTAkES = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZeroTAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZeroTAkES([1, 3, 5, 0])\n  false\n  >>> triplesSumToZeroTAkES([1, 3, -2, 1])\n  true\n  >>> triplesSumToZeroTAkES([1, 2, 3, 7])\n  false\n  >>> triplesSumToZeroTAkES([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZeroTAkES([1])\n  false\n  */\nconst triplesSumToZeroTAkES = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZeroTAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZeroTAkES([1, 3, 5, 0])\n  false\n  >>> triplesSumToZeroTAkES([1, 3, -2, 1])\n  true\n  >>> triplesSumToZeroTAkES([1, 2, 3, 7])\n  false\n  >>> triplesSumToZeroTAkES([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZeroTAkES([1])\n  false\n  */\nconst triplesSumToZeroTAkES = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZeroTAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZeroTAkES([1, 3, 5, 0])\n  false\n  >>> triplesSumToZeroTAkES([1, 3, -", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  iMaGIne a rOaD THAt's a pERfectLy stRaIght InfinitelY LoNG lIne.\n  n CaRs ArE drIviNG LefT TO rIght;  siMUltaneoUSlY, a dIFFEreNT seT OF n CaRS\n  aRe DrivinG rIgHt to LEFT.   thE Two sets of cARs stArt out beIng Very FaR frOM\n  each OThEr.  all carS mOve in thE Same sPeed.  two Cars ARe sAId to colLiDE\n  wheN a CAr That'S MovinG Left to riGht hIts a cAr thAT'S mOving rIghT tO LEFt.\n  HoweVer, the cArs are InfiniTELy sturdY aND strong; AS a resULT, They CONtInue mOvING\n  in THEiR trajectory as If tHEy Did nOt cOlLiDE.\n\n  ThIs fuNction outpUts The nUmBer Of sUch collisioNs.\n  */\nconST carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  iMaGIne a rOaD THAt's a pERfectLy stRaIght InfinitelY LoNG lIne.\n  n CaRs ArE drIviNG LefT TO rIght;  siMUltaneoUSlY, a dIFFEreNT seT OF n CaRS\n  aRe DrivinG rIgHt to LEFT.   thE Two sets of cARs stArt out beIng Very FaR frOM\n  each OThEr.  all carS mOve in thE Same sPeed.  two Cars ARe sAId to colLiDE\n  wheN a CAr That'S MovinG Left to riGht hIts a cAr thAT'S mOving rIghT tO LEFt.\n  HoweVer, the cArs are InfiniTELy sturdY aND strong; AS a resULT, They CONtInue mOvING\n  in THEiR trajectory as If tHEy Did nOt cOlLiDE.\n\n  ThIs fuNction outpUts The nUmBer Of sUch collisioNs.\n  */\nconST carRaceCollision = (n) => {\n  const collision = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) continue;\n      if (i < j) {\n        collision.push(i);\n        collision.push(j);\n      } else {\n        collision.push(j);\n        collision.push(i);\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision2 = (n) => {\n  const collision = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) continue;\n      if (i < j) {\n        collision.push(i);\n        collision.push(j);\n      } else {\n        collision.push(j);\n        collision.push(i);\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision3 = (n) => {\n  const collision = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) continue;\n      if (i < j) {\n        collision.push(i);\n        collision.push(j);\n      } else {\n        collision.push(j);\n        collision.push(i);\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision4 = (n) => {\n  const collision = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) continue;\n      if (i < j) {\n        collision.push(i);\n        collision.push(j);\n      } else {\n        collision.push(j);\n        collision.push(i);\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision5 = (n) => {\n  const collision = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) continue;\n      if (i < j) {\n        collision.push(i);\n        collision.push(j);\n      } else {\n        collision.push(j);\n        collision.push(i);\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision6 = (n) => {\n  const collision = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) continue;\n      if (i < j) {\n        collision.push(i);\n        collision.push(j);\n      } else {\n        collision.push(j);\n        collision.push(i);\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision7 = (n) => {\n  const collision = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) continue;\n      if (i < j) {\n        collision.push(i);\n        collision.push(j);\n      } else {\n        collision.push(j);\n        collision.push(i);\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision8 = (n) => {\n  const collision = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) continue;\n      if (i < j) {\n        collision.push(i);\n        collision.push(j);\n      } else {\n        collision.push(j);\n        collision.push(i);\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision9 = (n) => {\n  const collision = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) continue;\n      if (i < j) {\n        collision.push(i);\n        collision.push(j);\n      } else {\n        collision.push(j);\n        collision.push(i);\n      }\n    }\n  }\n  return collision;\n};\n\nconst carRaceCollision10 = (n) => {\n  const collision = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) continue;\n      if (i < j) {\n        collision.push(i);\n        collision.push(j);\n      } else {\n        collision.push(j);\n        collision.push(i);\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*RETuRN list with ElEMENts inCRemenTed bY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "/*RETuRN list with ElEMENts inCRemenTed bY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\nconst printList = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList2 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList3 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList4 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList5 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList6 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList7 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList8 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList9 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList10 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList11 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList12 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList13 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList14 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList15 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList16 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList17 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList18 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList19 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList20 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList21 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList22 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList23 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList24 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList25 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList26 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList27 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList28 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList29 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList30 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList31 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diStInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diStInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\nmodule.exports = {\n  pairsSumToZero\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*CHAnGE numeRiCAL base Of inpUT numbEr x to base.\n  return StRing RepresentATiON aFteR tHe CoNveRsiON.\n  base NumBERs Are lesS Than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*CHAnGE numeRiCAL base Of inpUT numbEr x to base.\n  return StRing RepresentATiON aFteR tHe CoNveRsiON.\n  base NumBERs Are lesS Than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (x < 0 || base < 2) {\n    return ''\n  }\n  const digits = x.toString(base)\n  const digitsLen = digits.length\n  if (digitsLen < base) {\n    return ''\n  }\n  const result = []\n  for (let i = 0; i < digitsLen; i++) {\n    result.push(digits.charAt(i))\n  }\n  return result.reverse().join('')\n}\n\nexport default changeBase\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments, return the area of the triangle.\n  >>> triangleArea(5, 3, 7)\n  7.5\n  */\nconst triangleArea = (a, h, t) => {\n  return Math.sqrt(a * h - t * t);\n};\n\n/*\n  GIVeN a, h and tRianGle as arguments,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*THE FIB4 numbEr SEQUence IS a seqUencE sImilAr to the FiBBoNAcCi sEqUnEcE thAt's DEFinED As FollowS:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  please wRItE a fUNCTioN To eFFICiENtLy ComputE tHe n-th ElemENT OF tHE fib4 number seqUEnce.  do not use RecUrsiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*THE FIB4 numbEr SEQUence IS a seqUencE sImilAr to the FiBBoNAcCi sEqUnEcE thAt's DEFinED As FollowS:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  please wRItE a fUNCTioN To eFFICiENtLy ComputE tHe n-th ElemENT OF tHE fib4 number seqUEnce.  do not use RecUrsiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*RETuRN median of elEmENTS in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": true, "gc": "/*RETuRN median of elEmENTS in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length;\n  if (n === 0) {\n    return NaN;\n  }\n  if (n === 1) {\n    return l[0];\n  }\n  let m = Math.floor(n / 2);\n  let i = 0;\n  while (i < m) {\n    if (l[i] < l[m]) {\n      i++;\n    } else {\n      break;\n    }\n  }\n  if (i === 0) {\n    return l[0];\n  }\n  if (i === n) {\n    return l[n - 1];\n  }\n  return (l[i] + l[m]) / 2;\n};\n\n/*RETuRN the median of elEmENTS in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median_ = (l) => {\n  let n = l.length;\n  if (n === 0) {\n    return NaN;\n  }\n  if (n === 1) {\n    return l[0];\n  }\n  let m = Math.floor(n / 2);\n  let i = 0;\n  while (i < m) {\n    if (l[i] < l[m]) {\n      i++;\n    } else {\n      break;\n    }\n  }\n  if (i === 0) {\n    return l[0];\n  }\n  if (i === n) {\n    return l[n - 1];\n  }\n  return l[i];\n};\n\n/*RETuRN the median of elEmENTS in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median_ = (l) => {\n  let n = l.length;\n  if (n === 0) {\n    return NaN;\n  }\n  if (n === 1) {\n    return l[0];\n  }\n  let m = Math.floor(n / 2);\n  let i = 0;\n  while (i < m) {\n    if (l[i] < l[m]) {\n      i++;\n    } else {\n      break;\n    }\n  }\n  if (i === 0) {\n    return l[0];\n  }\n  if (i === n) {\n    return l[n - 1];\n  }\n  return l[i];\n};\n\n/*RETuRN the median of elEmENTS in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median_ = (l) => {\n  let n = l.length;\n  if (n === 0) {\n    return NaN;\n  }\n  if (n === 1) {\n    return l[0];\n  }\n  let m = Math.floor(n / 2);\n  let i = 0;\n  while (i < m) {\n    if (l[i] < l[m]) {\n      i++;\n    } else {\n      break;\n    }\n  }\n  if (i === 0) {\n    return l[0];\n  }\n  if (i === n) {\n    return l[n - 1];\n  }\n  return l[i];\n};\n\n/*RETuRN the median of elEmENTS in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median_ = (l) => {\n  let n = l.length;\n  if (n === 0) {\n    return NaN;\n  }\n  if (n === 1) {\n    return l[0];\n  }\n  let m = Math.floor(n / 2);\n  let i = 0;\n  while (i < m) {\n    if (l[i] < l[m]) {\n      i++;\n    } else {\n      break;\n    }\n  }\n  if (i === 0) {\n    return l[0];\n  }\n  if (i === n) {\n    return l[n - 1];\n  }\n  return l[i];\n};\n\n/*RETuRN the median of elEmENTS in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median_ = (l) => {\n  let n = l.length;\n  if (n === 0) {\n    return NaN;\n  }\n  if (n === 1) {\n    return l[0];\n  }\n  let m = Math.floor(n / 2);\n  let i = 0;\n  while (i < m) {\n    if (l[i] < l[m]) {\n      i++;\n    } else {\n      break;\n    }\n  }\n  if (i === 0) {\n    return l[0];\n  }\n  if (i === n) {\n    return l[n - 1];\n  }\n  return l[i];\n};\n\n/*RETuRN the median of elEmENTS in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median_ = (l) => {\n  let n = l.length;\n  if (n === 0) {\n    return NaN;\n  }\n  if (n === 1) {\n    return l[0];\n  }\n  let m = Math.floor(n / 2);\n  let i = 0;\n  while (i < m) {\n    if (l[i] < l[m]) {\n      i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  cHeCKs if gIvEN STring IS a palIndrOmE\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  cHeCKs if gIvEN STring IS a palIndrOmE\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let str = text.split('');\n  let len = str.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*RETuRN 2^n modUlO p (BE Aware OF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "/*RETuRN 2^n modUlO p (BE Aware OF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('n and p must be non-negative');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return p;\n  }\n  if (n === 2) {\n    return p % 2;\n  }\n  if (n % 2 === 0) {\n    return modp(n / 2, p);\n  }\n  return modp(n - 1, p);\n};\n\nmodule.exports = modp;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* iNsERt a nuMbER 'delimeter' BEtweeN Every Two cOnSecuTive elemeNTs OF iNpuT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "/* iNsERt a nuMbER 'delimeter' BEtweeN Every Two cOnSecuTive elemeNTs OF iNpuT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let current = numbers[0]\n  let i = 1\n  while (i < numbers.length) {\n    if (i % 2 === 0) {\n      result.push(current)\n    }\n    current = numbers[i]\n    i += 1\n  }\n  result.push(current)\n  return result\n}\n\nmodule.exports = intersperse\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"a\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  TAkEs aS INPut STriNG ENcODeD wIth encOdE_sHift FUNCTiON. Returns deCOded String.\n  */\ncoNst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"a\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  TAkEs aS INPut STriNG ENcODeD wIth encOdE_sHift FUNCTiON. Returns deCOded String.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverse = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString2 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString3 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString4 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString5 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString6 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString7 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString8 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString9 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString10 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString11 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString12 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString13 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString14 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString15 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString16 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString17 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STriNG BY sHIFT FUNCTiON. Returns deCOded String.\n  */\ncoNst reverseString18 = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\n/*\n  REtURns aS INPut STri", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels IS a FUnctiOn THAT takeS StrinG and ReTurnS string wiTHoUT vOweLs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels IS a FUnctiOn THAT takeS StrinG and ReTurnS string wiTHoUT vOweLs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = 'aeiouy';\n  const vowelsRegex = new RegExp(`[${vowels.split('').join('')}]`, 'g');\n  return text.replace(vowelsRegex, '');\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*RETuRN true If ALL NumbeRS in the list l aRe beLoW thrEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "/*RETuRN true If ALL NumbeRS in the list l aRe beLoW thrEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  RETuRN true If ALL NumbeRS in the list l aRe beLoW than the thEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  RETuRN true If ALL NumbeRS in the list l aRe beLoW than the thEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] <= t) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  RETuRN true If ALL NumbeRS in the list l aRe beLoW than the thEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= t) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  RETuRN true If ALL NumbeRS in the list l aRe beLoW than the thEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  RETuRN true If ALL NumbeRS in the list l aRe beLoW than the thEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  RETuRN true If ALL NumbeRS in the list l aRe beLoW than the thEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  RETuRN true If ALL NumbeRS in the list l aRe beLoW than the thEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] <= t) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  RETuRN true If ALL NumbeRS in the list l aRe beLoW than the thEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= t) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  RETuRN true If ALL NumbeRS in the list l aRe beLoW than the thEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold10 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  RETuRN true If ALL NumbeRS in the list l aRe beLoW than the thEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold11 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  *ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  cHeCK if twO wORDS have THe samE chaRaCterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "/*\n  cHeCK if twO wORDS have THe samE chaRaCterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const s0s = s0.split('');\n  const s1s = s1.split('');\n  for (let i = 0; i < s0s.length; i++) {\n    if (s0s[i]!== s1s[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars2 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const s0s = s0.split('');\n  const s1s = s1.split('');\n  for (let i = 0; i < s0s.length; i++) {\n    if (s0s[i]!== s1s[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars3 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const s0s = s0.split('');\n  const s1s = s1.split('');\n  for (let i = 0; i < s0s.length; i++) {\n    if (s0s[i]!== s1s[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars4 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const s0s = s0.split('');\n  const s1s = s1.split('');\n  for (let i = 0; i < s0s.length; i++) {\n    if (s0s[i]!== s1s[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars5 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const s0s = s0.split('');\n  const s1s = s1.split('');\n  for (let i = 0; i < s0s.length; i++) {\n    if (s0s[i]!== s1s[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars6 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const s0s = s0.split('');\n  const s1s = s1.split('');\n  for (let i = 0; i < s0s.length; i++) {\n    if (s0s[i]!== s1s[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars7 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const s0s = s0.split('');\n  const s1s = s1.split('');\n  for (let i = 0; i < s0s.length; i++) {\n    if (s0s[i]!== s1s[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars8 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const s0s = s0.split('');\n  const s1s = s1.split('');\n  for (let i = 0; i < s0s.length; i++) {\n    if (s0s[i]!== s1s[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars9 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const s0s = s0.split('');\n  const s1s = s1.split('');\n  for (let i = 0; i < s0s.length; i++) {\n    if (s0s[i]!== s1s[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars10 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const s0s = s0.split('');\n  const s1s = s1.split('');\n  for (let i = 0; i < s0s.length; i++) {\n    if (s0s[i]!== s1s[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars11 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const s0s = s0.split('');\n  const s1s = s1.split('');\n  for (let i = 0; i < s0s.length; i++) {\n    if (s0s[i]!== s1s[i]) {\n      return false;\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*RETuRN n-th FiboNaCCI NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": true, "gc": "/*RETuRN n-th FiboNaCCI NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  RETuRN n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  RETuRN n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2);\n};\n\n/*\n  RETuRN n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  RETuRN n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  RETuRN n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  RETuRN n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  RETuRN n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  RETuRN n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  RETuRN n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  RETuRN n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  RETuRN n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  RETuRN n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets IS a STring Of \"<\" AND \">\".\n  return False IF everY opeNiNg brAcket has a COrREsPonDiNg ClOsiNg bRACkeT.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets IS a STring Of \"<\" AND \">\".\n  return False IF everY opeNiNg brAcket has a COrREsPonDiNg ClOsiNg bRACkeT.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketing = brackets.split(/<>|<<><>>/);\n  const bracketsCount = bracketing.length;\n  let bracketingCount = 0;\n  for (let i = 0; i < bracketsCount; i++) {\n    if (bracketing[i].match(/^[^<]*$/)) {\n      bracketingCount++;\n    }\n  }\n  return bracketingCount === bracketsCount;\n};\n\n/**\n  Returns a list of all the valid bracketing strings.\n\n  >>> validBracketings()\n  ['<', '>', '<<>', '>>', '<<<', '>>>']\n*/\nconst validBracketings = () => {\n  const validBracketings = [];\n  for (let i = 0; i < validBrackets.length; i++) {\n    validBracketings.push(validBrackets[i]);\n  }\n  return validBracketings;\n};\n\n/**\n  Returns a list of all the valid bracketing strings.\n\n  >>> validBracketings()\n  ['<', '>', '<<>', '>>', '<<<', '>>>']\n*/\nconst validBracketings = () => {\n  const validBracketings = [];\n  for (let i = 0; i < validBrackets.length; i++) {\n    validBracketings.push(validBrackets[i]);\n  }\n  return validBracketings;\n};\n\n/**\n  Returns a list of all the valid bracketing strings.\n\n  >>> validBracketings()\n  ['<', '>', '<<>', '>>', '<<<', '>>>']\n*/\nconst validBracketings = () => {\n  const validBracketings = [];\n  for (let i = 0; i < validBrackets.length; i++) {\n    validBracketings.push(validBrackets[i]);\n  }\n  return validBracketings;\n};\n\n/**\n  Returns a list of all the valid bracketing strings.\n\n  >>> validBracketings()\n  ['<', '>', '<<>', '>>', '<<<', '>>>']\n*/\nconst validBracketings = () => {\n  const validBracketings = [];\n  for (let i = 0; i < validBrackets.length; i++) {\n    validBracketings.push(validBrackets[i]);\n  }\n  return validBracketings;\n};\n\n/**\n  Returns a list of all the valid bracketing strings.\n\n  >>> validBracketings()\n  ['<', '>', '<<>', '>>', '<<<', '>>>']\n*/\nconst validBracketings = () => {\n  const validBracketings = [];\n  for (let i = 0; i < validBrackets.length; i++) {\n    validBracketings.push(validBrackets[i]);\n  }\n  return validBracketings;\n};\n\n/**\n  Returns a list of all the valid bracketing strings.\n\n  >>> validBracketings()\n  ['<', '>', '<<>', '>>', '<<<', '>>>']\n*/\nconst validBracketings = () => {\n  const validBracketings = [];\n  for (let i = 0; i < validBrackets.length; i++) {\n    validBracketings.push(validBrackets[i]);\n  }\n  return validBracketings;\n};\n\n/**\n  Returns a list of all the valid bracketing strings.\n\n  >>> validBracketings()\n  ['<', '>', '<<>', '>>', '<<<', '>>>']\n*/\nconst validBracketings = () => {\n  const validBracketings = [];\n  for (let i = 0; i < validBrackets.length; i++) {\n    validBracketings.push(validBrackets[i]);\n  }\n  return validBracketings;\n};\n\n/**\n  Returns a list of all the valid bracketing strings.\n\n  >>> validBracketings()\n  ['<', '>', '<<>', '>>', '<<<', '>>>']\n*/\nconst validBracketings = () => {\n  const validBracketings = [];\n  for (let i = 0; i < validBrackets.length; i++) {\n    validBracketings.push(validBrackets[i]);\n  }\n  return validBracketings;\n};\n\n/**\n  Returns a list of all the valid bracketing strings.\n\n  >>> validBracketings()\n  ['<', '>', '<<>', '>>', '<<<', '>>>']\n*/\nconst validBracketings = () => {\n  const validBracketings = [];\n  for (let i = 0; i < validBrackets.length; i++) {\n    validBracketings.push(validBrackets[i]);\n  }\n  return validBracketings;\n};\n\n/**\n  Returns a list of all the valid bracketing strings.\n\n  >>> validBracketings()\n  ['<', '>', '<<>', '>>', '<<<', '>>>']\n*/\nconst validBracketings = () => {\n  const validBracketings = [];\n  for (let i = 0; i < validBrackets.length; i++) {\n    validBracketings.push(validBrackets[i]);\n  }\n  return validBracketings;\n};\n\n/**\n  Returns a list of all the valid bracketing strings.\n\n  >>> validBracketings()\n  ['<', '>', '<<>', '>>', '<<<', '>>>']\n*/\nconst validBracketings = () => {\n  const validBracketings = [];\n  for (let i = 0; i < validBrackets.length; i++) {\n    validBracketings.push(validBrackets[i]);\n  }\n  return validBracketings;\n};\n\n/**\n  Returns a list of all the valid bracketing strings.\n\n  >>> validBracketings()\n  ['<', '>', '<<>', '>>', '<<<',", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*RETuRN true Is list ELEMents ARe monOtonIcAlly IncreasinG Or DEcReaSiNg.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*RETuRN true Is list ELEMents ARe monOtonIcAlly IncreasinG Or DEcReaSiNg.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return true;\n    }\n    if (l[i] < l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return l[i] > l[j];\n};\n\nmodule.exports = monotonic;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*RETuRN sortEd UNIQue common elEMents For tWo ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "/*RETuRN sortEd UNIQue common elEMents For tWo ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  if (l1Len === 0 || l2Len === 0) {\n    return [];\n  }\n  if (l1Len === 1 || l2Len === 1) {\n    return [l1[0]];\n  }\n  if (l1Len === l2Len) {\n    return l1.slice();\n  }\n  const common = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common;\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*RETuRN the largest pRiME FActor OF n. AssuMe n > 1 anD iS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "/*RETuRN the largest pRiME FActor OF n. AssuMe n > 1 anD iS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return 0;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return i;\n};\n\nexport default largestPrimeFactor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/6", "prompt": "/* iNpUT to thIs FUNCtion IS a strIng rEpReseNted multiPLe GRoUps FoR nEsTed ParENTheSES sEparatED by spacES.\n  FOr eACH Of tHE grOUP, OuTPuT tHe deepEsT lEvel OF NEStINg of parentHEses.\n  e.g. (()()) has maxImuM two LeVelS Of nesTInG wHile ((())) haS tHree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* iNpUT to thIs FUNCtion IS a strIng rEpReseNted multiPLe GRoUps FoR nEsTed ParENTheSES sEparatED by spacES.\n  FOr eACH Of tHE grOUP, OuTPuT tHe deepEsT lEvel OF NEStINg of parentHEses.\n  e.g. (()()) has maxImuM two LeVelS Of nesTInG wHile ((())) haS tHree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_count = 0;\n  let paren_string_length = paren_string.length;\n  let paren_string_index = 0;\n  let paren_string_end_index = 0;\n  let paren_string_end_index_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_end_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sUMTOn is a fUnCTIOn thaT Sums nUmbeRs From 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "/*sUMTOn is a fUnCTIOn thaT Sums nUmbeRs From 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = sumToN\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets IS a STring Of \"(\" AND \")\".\n  return True iF Every OpenInG braCket has a cORrESpOndInG cLoSinG brACKet.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets IS a STring Of \"(\" AND \")\".\n  return True iF Every OpenInG braCket has a cORrESpOndInG cLoSinG brACKet.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openBrackets = brackets.split(/[()]/);\n  const closedBrackets = openBrackets.map((bracket) => bracket.replace(/[()]/g, ''));\n  return openBrackets.every((openBracket) => closedBrackets.includes(openBracket));\n};\n\nconst isBracketing = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2 === 0;\n};\n\nconst isBracketingOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets = (brackets) => {\n  return brackets.length > 1 && brackets.length % 2!== 0;\n};\n\nconst isBracketingOrBracketsOrBracketsOrBracketsOrBracketsOrBrackets =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs REpREsent CoEFFIcienTS of a pOlynOmIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative of thIS pOLyNomIaL in tHe SamE foRM.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs REpREsent CoEFFIcienTS of a pOlynOmIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thIS pOLyNomIaL in tHe SamE foRM.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  if (len === 0) {\n    return [0, 0];\n  }\n  const x = xs[0];\n  const y = xs[1];\n  const z = xs[2];\n  const coeff = (x + y * x + z * x * x) / len;\n  const deriv = [coeff, coeff * x, coeff * x * x];\n  return deriv;\n};\n\nconst derivative2 = (xs) => {\n  const len = xs.length;\n  if (len === 0) {\n    return [0, 0];\n  }\n  const x = xs[0];\n  const y = xs[1];\n  const z = xs[2];\n  const coeff = (x + y * x + z * x * x) / len;\n  const deriv = [coeff, coeff * x, coeff * x * x];\n  return deriv;\n};\n\nconst derivative3 = (xs) => {\n  const len = xs.length;\n  if (len === 0) {\n    return [0, 0];\n  }\n  const x = xs[0];\n  const y = xs[1];\n  const z = xs[2];\n  const coeff = (x + y * x + z * x * x) / len;\n  const deriv = [coeff, coeff * x, coeff * x * x];\n  return deriv;\n};\n\nconst derivative4 = (xs) => {\n  const len = xs.length;\n  if (len === 0) {\n    return [0, 0];\n  }\n  const x = xs[0];\n  const y = xs[1];\n  const z = xs[2];\n  const coeff = (x + y * x + z * x * x) / len;\n  const deriv = [coeff, coeff * x, coeff * x * x];\n  return deriv;\n};\n\nconst derivative5 = (xs) => {\n  const len = xs.length;\n  if (len === 0) {\n    return [0, 0];\n  }\n  const x = xs[0];\n  const y = xs[1];\n  const z = xs[2];\n  const coeff = (x + y * x + z * x * x) / len;\n  const deriv = [coeff, coeff * x, coeff * x * x];\n  return deriv;\n};\n\nconst derivative6 = (xs) => {\n  const len = xs.length;\n  if (len === 0) {\n    return [0, 0];\n  }\n  const x = xs[0];\n  const y = xs[1];\n  const z = xs[2];\n  const coeff = (x + y * x + z * x * x) / len;\n  const deriv = [coeff, coeff * x, coeff * x * x];\n  return deriv;\n};\n\nconst derivative7 = (xs) => {\n  const len = xs.length;\n  if (len === 0) {\n    return [0, 0];\n  }\n  const x = xs[0];\n  const y = xs[1];\n  const z = xs[2];\n  const coeff = (x + y * x + z * x * x) / len;\n  const deriv = [coeff, coeff * x, coeff * x * x];\n  return deriv;\n};\n\nconst derivative8 = (xs) => {\n  const len = xs.length;\n  if (len === 0) {\n    return [0, 0];\n  }\n  const x = xs[0];\n  const y = xs[1];\n  const z = xs[2];\n  const coeff = (x + y * x + z * x * x) / len;\n  const deriv = [coeff, coeff * x, coeff * x * x];\n  return deriv;\n};\n\nconst derivative9 = (xs) => {\n  const len = xs.length;\n  if (len === 0) {\n    return [0, 0];\n  }\n  const x = xs[0];\n  const y = xs[1];\n  const z = xs[2];\n  const coeff = (x + y * x + z * x * x) / len;\n  const deriv = [coeff, coeff * x, coeff * x * x];\n  return deriv;\n};\n\nconst derivative10 = (xs) => {\n  const len = xs.length;\n  if (len === 0) {\n    return [0, 0];\n  }\n  const x = xs[0];\n  const y = xs[1];\n  const z = xs[2];\n  const coeff = (x + y * x + z * x * x) / len;\n  const deriv = [coeff, coeff * x, coeff * x * x];\n  return deriv;\n};\n\nconst derivative11 = (xs) => {\n  const len = xs.length;\n  if (len === 0) {\n    return [0, 0];\n  }\n  const x = xs[0];\n  const y = xs[1];\n  const z = xs[2];\n  const coeff = (x + y * x + z * x * x) / len;\n  const deriv = [coeff, coeff * x, coeff * x * x];\n  return deriv;\n};\n\nconst derivative12 = (xs) => {\n  const len = xs.length;\n  if (len === 0) {\n    return [0, 0];\n  }\n  const x = xs[0];\n  const y = xs[1];\n  const z = xs[2];\n  const coeff = (x + y * x + z * x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*THE FIBFib nUmBER SequeNCe is a SequEnCe siMilar to thE fiBBoNacCi SeQuNecE thAT'S deFINeD as folLOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSE wRitE A FUncTIon TO EFfICiEnTly comPuTe The n-th eLEMENt OF the fibfib number SEqueNce.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*THE FIBFib nUmBER SequeNCe is a SequEnCe siMilar to thE fiBBoNacCi SeQuNecE thAT'S deFINeD as folLOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSE wRitE A FUncTIon TO EFfICiEnTly comPuTe The n-th eLEMENt OF the fibfib number SEqueNce.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib_test = (n) => {\n  console.log(fibfib(n));\n};\n\nfibfib_test(1);\nfibfib_test(5);\nfibfib_test(8);\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*WRItE A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U'. hErE, 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*WRItE A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U'. hErE, 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n    i++;\n  }\n  return vowels;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*CIRcULar shift thE dIGITs of tHE inteGer x, shift tHe DigiTs right by shift\n  ANd return THe ResUlT aS a StrIng.\n  iF shift > NumBER oF digitS, return Digits rEVeRseD.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*CIRcULar shift thE dIGITs of tHE inteGer x, shift tHe DigiTs right by shift\n  ANd return THe ResUlT aS a StrIng.\n  iF shift > NumBER oF digitS, return Digits rEVeRseD.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift === 0) {\n    return x;\n  }\n  let x2 = 0;\n  let i = 0;\n  while (i < shift) {\n    x2 = x2 + x;\n    x = x & 0x1;\n    x = x << 1;\n    i++;\n  }\n  return x2 + x;\n};\n\nconst getDigit = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigits = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits2 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits3 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits4 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits5 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits6 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits7 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits8 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits9 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits10 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits11 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits12 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits13 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits14 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits15 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits16 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits17 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits18 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits19 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits20 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >> 1;\n  }\n  return digits;\n};\n\nconst getDigits21 = (x, shift) => {\n  let digits = [];\n  while (x > 0) {\n    digits.push(getDigit(x, shift));\n    x = x >>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*TASk\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*TASk\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\nmodule.exports = digitSum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  iN tHIs tasK, yOU WIll be GIven a StriNg That RepresentS A nUMbEr oF aPpLeS anD orANGes\n  THAt Are disTRibuted in A BaSkeT OF FruIT thIS BAsKEt CoNtains\n  ApPlEs, orANGES, aND mango fruiTS. GivEn the strIng That RePreSEnts tHE tOtAl numbEr Of\n  the ORangeS and AppLes aND an INteger tHaT ReprEsENt The tOTal nuMBer of the FruiTs\n  in the BaskET return ThE numbeR of ThE MANgo fruIts in the bAsket.\n  fOr examBLE:\n  fruitDistribution(\"5 apples AnD 6 Oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 APples AND 1 OranGES\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 aPples AnD 3 ORANGeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oraNgeS\",120) -> 120 - 100 - 1 = 19\n  */\nCoNst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  iN tHIs tasK, yOU WIll be GIven a StriNg That RepresentS A nUMbEr oF aPpLeS anD orANGes\n  THAt Are disTRibuted in A BaSkeT OF FruIT thIS BAsKEt CoNtains\n  ApPlEs, orANGES, aND mango fruiTS. GivEn the strIng That RePreSEnts tHE tOtAl numbEr Of\n  the ORangeS and AppLes aND an INteger tHaT ReprEsENt The tOTal nuMBer of the FruiTs\n  in the BaskET return ThE numbeR of ThE MANgo fruIts in the bAsket.\n  fOr examBLE:\n  fruitDistribution(\"5 apples AnD 6 Oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 APples AND 1 OranGES\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 aPples AnD 3 ORANGeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oraNgeS\",120) -> 120 - 100 - 1 = 19\n  */\nCoNst fruitDistribution = (s, n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aaa = 0;\n  let bbb = 0;\n  let ccc = 0;\n  let ddd = 0;\n  let eee = 0;\n  let fff = 0;\n  let ggg = 0;\n  let hhh = 0;\n  let iii = 0;\n  let jjj = 0;\n  let kkk = 0;\n  let lll = 0;\n  let mmm = 0;\n  let nnn = 0;\n  let ooo = 0;\n  let ppp = 0;\n  let qqq = 0;\n  let rrr = 0;\n  let sss = 0;\n  let ttt = 0;\n  let uuu = 0;\n  let vvv = 0;\n  let wwww = 0;\n  let xxx = 0;\n  let yyy = 0;\n  let zzz = 0;\n  let aaaa = 0;\n  let bbbb = 0;\n  let cccc = 0;\n  let dddd = 0;\n  let eeee = 0;\n  let ffff = 0;\n  let gggg = 0;\n  let hhhh = 0;\n  let iiiii = 0;\n  let jjjj = 0;\n  let kkkk = 0;\n  let llll = 0;\n  let mmmm = 0;\n  let nnnn = 0;\n  let oooo = 0;\n  let pppp = 0;\n  let qqqq = 0;\n  let rrrr = 0;\n  let ssss = 0;\n  let tttt = 0;\n  let uuuu = 0;\n  let vvvv = 0;\n  let wwwww = 0;\n  let xxxx = 0;\n  let yyyy = 0;\n  let zzzz = 0;\n  let aaaa = 0;\n  let bbbb = 0;\n  let cccc = 0;\n  let dddd = 0;\n  let eeee = 0;\n  let ffff = 0;\n  let gggg = 0;\n  let hhhh = 0;\n  let iiiii = 0;\n  let jjjj = 0;\n  let kkkk = 0;\n  let llll = 0;\n  let mmmm = 0;\n  let nnnn = 0;\n  let oooo = 0;\n  let pppp = 0;\n  let qqqq = 0;\n  let rrrr = 0;\n  let ssss = 0;\n  let tttt = 0;\n  let uuuu = 0;\n  let vvvv = 0;\n  let wwwww = 0;\n  let xxxx = 0;\n  let yyyy = 0;\n  let zzzz = 0;\n  let aaaa = 0;\n  let bbbb = 0;\n  let cccc = 0;\n  let dddd = 0;\n  let eeee = 0;\n  let ffff = 0;\n  let gggg = 0;\n  let hhhh = 0;\n  let iiiii = 0;\n  let jjjj = 0;\n  let kkkk = 0;\n  let llll = 0;\n  let mmmm = 0;\n  let nnnn = 0;\n  let oooo = 0;\n  let pppp = 0;\n  let qqqq = 0;\n  let rrrr = 0;\n  let ssss = 0;\n  let tttt = 0;\n  let uuuu = 0;\n  let vvvv = 0;\n  let w", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"gIvEN an arRaY REPreseNTing a BranCh Of a tRee that haS NoN-NeGatIvE iNtEgeR noDES\n  yoUR TaSk is to pluck ONe of the NOdEs aND return IT.\n  ThE PluCKED nODe ShOuld be ThE nOde wITH THe SMallest eveN ValuE.\n  If multiPle NodeS wIth THe samE SmAlLest evEn Value ARe fouNd return thE noDe thAT haS SmallesT iNDex.\n\n  THe PLuCked NOde shOUld be retUrneD in a list, [ smaLest_VALuE, its inDex ],\n  if THERe are nO even vaLues or The givEN Array is EmPTy, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \"gIvEN an arRaY REPreseNTing a BranCh Of a tRee that haS NoN-NeGatIvE iNtEgeR noDES\n  yoUR TaSk is to pluck ONe of the NOdEs aND return IT.\n  ThE PluCKED nODe ShOuld be ThE nOde wITH THe SMallest eveN ValuE.\n  If multiPle NodeS wIth THe samE SmAlLest evEn Value ARe fouNd return thE noDe thAT haS SmallesT iNDex.\n\n  THe PLuCked NOde shOUld be retUrneD in a list, [ smaLest_VALuE, its inDex ],\n  if THERe are nO even vaLues or The givEN Array is EmPTy, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const res = [];\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      res.push(arr[i]);\n    }\n  }\n  return res;\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  yOu ARe givEn A NON-emptY list Of posItivE iNtegErs. Return THe GReAteSt InTeGer ThaT IS grEATeR than\n  zERo, and haS A fReqUENCy gREatER THaN Or EqUal to tHe VaLue oF THE InTEger itself.\n  tHe frEquency oF an InteGeR is THe numBEr Of Times iT aPpearS in The list.\n  If No suCh a ValuE ExiST, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  yOu ARe givEn A NON-emptY list Of posItivE iNtegErs. Return THe GReAteSt InTeGer ThaT IS grEATeR than\n  zERo, and haS A fReqUENCy gREatER THaN Or EqUal to tHe VaLue oF THE InTEger itself.\n  tHe frEquency oF an InteGeR is THe numBEr Of Times iT aPpearS in The list.\n  If No suCh a ValuE ExiST, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  if (lst.length === 0) {\n    return -1\n  }\n  let low = 0\n  let high = lst.length - 1\n  let mid = 0\n  let midValue = lst[mid]\n  while (low <= high) {\n    mid = low + Math.floor((high - low) / 2)\n    if (lst[mid] < midValue) {\n      low = mid + 1\n    } else if (lst[mid] > midValue) {\n      high = mid - 1\n    } else {\n      return mid\n    }\n  }\n  return -1\n}\n\nmodule.exports = search\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* fIlTEr an iNpUT list OF strings only FOr oneS thaT cOntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "/* fIlTEr an iNpUT list OF strings only FOr oneS thaT cOntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = filterBySubstring;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  gIvEN list of inTeGERS, return list in straNGe ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUm vALUe,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN list of inTeGERS, return list in straNGe ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUm vALUe,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let lst2 = lst.sort((a, b) => a - b);\n  let lst3 = lst2.sort((a, b) => b - a);\n  return lst3;\n};\n\n/*\n  gIvEN list of inTeGERS, return list in straNge ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUm vALUe,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList2 = (lst) => {\n  let lst2 = lst.sort((a, b) => a - b);\n  let lst3 = lst2.sort((a, b) => b - a);\n  return lst3;\n};\n\n/*\n  gIvEN list of inTeGERS, return list in straNge ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUm vALUe,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList3 = (lst) => {\n  let lst2 = lst.sort((a, b) => a - b);\n  let lst3 = lst2.sort((a, b) => b - a);\n  return lst3;\n};\n\n/*\n  gIvEN list of inTeGERS, return list in straNge ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUm vALUe,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList4 = (lst) => {\n  let lst2 = lst.sort((a, b) => a - b);\n  let lst3 = lst2.sort((a, b) => b - a);\n  return lst3;\n};\n\n/*\n  gIvEN list of inTeGERS, return list in straNge ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUm vALUe,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList5 = (lst) => {\n  let lst2 = lst.sort((a, b) => a - b);\n  let lst3 = lst2.sort((a, b) => b - a);\n  return lst3;\n};\n\n/*\n  gIvEN list of inTeGERS, return list in straNge ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUm vALUe,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList6 = (lst) => {\n  let lst2 = lst.sort((a, b) => a - b);\n  let lst3 = lst2.sort((a, b) => b - a);\n  return lst3;\n};\n\n/*\n  gIvEN list of inTeGERS, return list in straNge ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUm vALUe,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList7 = (lst) => {\n  let lst2 = lst.sort((a, b) => a - b);\n  let lst3 = lst2.sort((a, b) => b - a);\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tHE area oF\n  thE tRiAnGle RouNDEd tO 2 DEcImal poINts if thE ThRee SIDEs fORm a vALID tRIaNgLe.\n  OtheRwIsE return -1\n  ThrEE SIDeS Make a valid tRIangLe when thE suM of aNy Two SIdes iS GrEaTer\n  thaN tHe thiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tHE area oF\n  thE tRiAnGle RouNDEd tO 2 DEcImal poINts if thE ThRee SIDEs fORm a vALID tRIaNgLe.\n  OtheRwIsE return -1\n  ThrEE SIDeS Make a valid tRIangLe when thE suM of aNy Two SIdes iS GrEaTer\n  thaN tHe thiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let p1 = a;\n  let p2 = b;\n  let p3 = c;\n  let p4 = p1;\n  let p5 = p2;\n  let p6 = p3;\n  let p7 = p4;\n  let p8 = p5;\n  let p9 = p6;\n  let p10 = p7;\n  let p11 = p8;\n  let p12 = p9;\n  let p13 = p10;\n  let p14 = p11;\n  let p15 = p12;\n  let p16 = p13;\n  let p17 = p14;\n  let p18 = p15;\n  let p19 = p16;\n  let p20 = p17;\n  let p21 = p18;\n  let p22 = p19;\n  let p23 = p20;\n  let p24 = p21;\n  let p25 = p22;\n  let p26 = p23;\n  let p27 = p24;\n  let p28 = p25;\n  let p29 = p26;\n  let p30 = p27;\n  let p31 = p28;\n  let p32 = p29;\n  let p33 = p30;\n  let p34 = p31;\n  let p35 = p32;\n  let p36 = p33;\n  let p37 = p34;\n  let p38 = p35;\n  let p39 = p36;\n  let p40 = p37;\n  let p41 = p38;\n  let p42 = p39;\n  let p43 = p40;\n  let p44 = p41;\n  let p45 = p42;\n  let p46 = p43;\n  let p47 = p44;\n  let p48 = p45;\n  let p49 = p46;\n  let p50 = p47;\n  let p51 = p48;\n  let p52 = p49;\n  let p53 = p50;\n  let p54 = p51;\n  let p55 = p52;\n  let p56 = p53;\n  let p57 = p54;\n  let p58 = p55;\n  let p59 = p56;\n  let p60 = p57;\n  let p61 = p58;\n  let p62 = p59;\n  let p63 = p60;\n  let p64 = p61;\n  let p65 = p62;\n  let p66 = p63;\n  let p67 = p64;\n  let p68 = p65;\n  let p69 = p66;\n  let p70 = p67;\n  let p71 = p68;\n  let p72 = p69;\n  let p73 = p70;\n  let p74 = p71;\n  let p75 = p72;\n  let p76 = p73;\n  let p77 = p74;\n  let p78 = p75;\n  let p79 = p76;\n  let p80 = p77;\n  let p81 = p78;\n  let p82 = p79;\n  let p83 = p80;\n  let p84 = p81;\n  let p85 = p82;\n  let p86 = p83;\n  let p87 = p84;\n  let p88 = p85;\n  let p89 = p86;\n  let p90 = p87;\n  let p91 = p88;\n  let p92 = p89;\n  let p93 = p90;\n  let p94 = p91;\n  let p95 = p92;\n  let p96 = p93;\n  let p97 = p94;\n  let p98 = p95;\n  let p99 = p96;\n  let p100 = p97;\n  let p101 = p98;\n  let p102 = p99;\n  let p103 = p100;\n  let p104 = p101;\n  let p105 = p102;\n  let p106 = p103;\n  let p107 = p104;\n  let p108 = p105;\n  let p109 = p106;\n  let p110 = p107;\n  let p111 = p108;\n  let p112 = p109;\n  let p113 = p110;\n  let p114 = p111;\n  let p115 = p112;\n  let p116 = p113;\n  let p117 = p114;\n  let p118 = p115;\n  let p119 = p116;\n  let p120 = p117;\n  let p121 = p118;\n  let p122 = p119;\n  let p123 = p120;\n  let p124 = p122;\n  let p125 = p123;\n  let p126 = p124;\n  let p127 = p125;\n  let p128 = p126;\n  let p129 = p127;\n  let p130 = p128;\n  let p131 = p129;\n  let p132 = p130;\n  let p133 = p131;\n  let p134 = p132;\n  let p135 = p133;\n  let p136 = p134;\n  let p137 = p135;\n  let p138 = p136;\n  let p139 = p137;\n  let p140 = p138;\n  let p141 = p139;\n  let p142 = p140;\n  let p143 = p141;\n  let p144 = p142;\n  let p145 = p143;\n  let p146 = p144;\n  let p147 = p145;\n  let p148 = p146;\n  let p149 = p147;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  wRiTE a funCtION That rETurns True If The oBject q will FLy, ANd FalSe OtHeRwiSe.\n  THE ObjECT q wIll fly IF it's balANcEd (iT IS A paLIndROMIc list) ANd ThE sum of ItS eLemeNTS IS lESs than or eqUAl thE maximum PosSiblE wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  wRiTE a funCtION That rETurns True If The oBject q will FLy, ANd FalSe OtHeRwiSe.\n  THE ObjECT q wIll fly IF it's balANcEd (iT IS A paLIndROMIc list) ANd ThE sum of ItS eLemeNTS IS lESs than or eqUAl thE maximum PosSiblE wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return true;\n  }\n  let sum = 0;\n  let max = q[0];\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return sum <= w && max <= w;\n};\n\nmodule.exports = willItFly;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  gIvEN an arRaY arr OF IntegERs, finD the MiNimuM number of ELeMEnTs tHaT\n  nEeD to Be cHANgeD TO mAke the ARray palINdRomIC. a PalINdrOMIC aRRaY iS an arrAy ThAt\n  is READ ThE Same backwaRDs anD forwardS. In One cHaNge, YOu can CHaNgE one elEmEnt to ANy othEr elEmeNt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN an arRaY arr OF IntegERs, finD the MiNimuM number of ELeMEnTs tHaT\n  nEeD to Be cHANgeD TO mAke the ARray palINdRomIC. a PalINdrOMIC aRRaY iS an arrAy ThAt\n  is READ ThE Same backwaRDs anD forwardS. In One cHaNge, YOu can CHaNgE one elEmEnt to ANy othEr elEmeNt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  wRiTE a funCtION That aCCepts Two lIsTs of Strings anD ReTUrNs tHe list ThAt Has\n  TotAL NumBER oF chars in THe all stRInGs oF THE list leSS thAN THe OThEr list.\n\n  If the tWo LiSts hAVE THe SAme number oF CharS, return the firsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  wRiTE a funCtION That aCCepts Two lIsTs of Strings anD ReTUrNs tHe list ThAt Has\n  TotAL NumBER oF chars in THe all stRInGs oF THE list leSS thAN THe OThEr list.\n\n  If the tWo LiSts hAVE THe SAme number oF CharS, return the firsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) return [];\n  const res = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] === lst2[i]) {\n      res.push(lst1[i]);\n    }\n  }\n  return res;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*WRItE a FunctIoN THAt retURns trUe if ThE givEn number iS ThE MuLtiPlIcAtIon Of 3 pRIMe nUMBeRs\n  and fALse otheRWiSe.\n  KNOWIng THat (a) IS LEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*WRItE a FunctIoN THAt retURns trUe if ThE givEn number iS ThE MuLtiPlIcAtIon Of 3 pRIMe nUMBeRs\n  and fALse otheRWiSe.\n  KNOWIng THat (a) IS LEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    return false;\n  }\n  if (a % 5 === 0) {\n    return false;\n  }\n  if (a % 7 === 0) {\n    return false;\n  }\n  if (a % 11 === 0) {\n    return false;\n  }\n  if (a % 13 === 0) {\n    return false;\n  }\n  if (a % 17 === 0) {\n    return false;\n  }\n  if (a % 19 === 0) {\n    return false;\n  }\n  if (a % 23 === 0) {\n    return false;\n  }\n  if (a % 29 === 0) {\n    return false;\n  }\n  if (a % 31 === 0) {\n    return false;\n  }\n  if (a % 37 === 0) {\n    return false;\n  }\n  if (a % 41 === 0) {\n    return false;\n  }\n  if (a % 43 === 0) {\n    return false;\n  }\n  if (a % 47 === 0) {\n    return false;\n  }\n  if (a % 53 === 0) {\n    return false;\n  }\n  if (a % 59 === 0) {\n    return false;\n  }\n  if (a % 61 === 0) {\n    return false;\n  }\n  if (a % 67 === 0) {\n    return false;\n  }\n  if (a % 71 === 0) {\n    return false;\n  }\n  if (a % 73 === 0) {\n    return false;\n  }\n  if (a % 79 === 0) {\n    return false;\n  }\n  if (a % 83 === 0) {\n    return false;\n  }\n  if (a % 89 === 0) {\n    return false;\n  }\n  if (a % 97 === 0) {\n    return false;\n  }\n  if (a % 101 === 0) {\n    return false;\n  }\n  if (a % 103 === 0) {\n    return false;\n  }\n  if (a % 107 === 0) {\n    return false;\n  }\n  if (a % 109 === 0) {\n    return false;\n  }\n  if (a % 113 === 0) {\n    return false;\n  }\n  if (a % 127 === 0) {\n    return false;\n  }\n  if (a % 131 === 0) {\n    return false;\n  }\n  if (a % 137 === 0) {\n    return false;\n  }\n  if (a % 139 === 0) {\n    return false;\n  }\n  if (a % 149 === 0) {\n    return false;\n  }\n  if (a % 151 === 0) {\n    return false;\n  }\n  if (a % 157 === 0) {\n    return false;\n  }\n  if (a % 163 === 0) {\n    return false;\n  }\n  if (a % 167 === 0) {\n    return false;\n  }\n  if (a % 173 === 0) {\n    return false;\n  }\n  if (a % 179 === 0) {\n    return false;\n  }\n  if (a % 181 === 0) {\n    return false;\n  }\n  if (a % 191 === 0) {\n    return false;\n  }\n  if (a % 193 === 0) {\n    return false;\n  }\n  if (a % 197 === 0) {\n    return false;\n  }\n  if (a % 199 === 0) {\n    return false;\n  }\n  if (a % 211 === 0) {\n    return false;\n  }\n  if (a % 223 === 0) {\n    return false;\n  }\n  if (a % 227 === 0) {\n    return false;\n  }\n  if (a % 229 === 0) {\n    return false;\n  }\n  if (a % 233 === 0) {\n    return false;\n  }\n  if (a % 239 === 0) {\n    return false;\n  }\n  if (a % 241 === 0) {\n    return false;\n  }\n  if (a % 251 === 0) {\n    return false;\n  }\n  if (a % 257 === 0) {\n    return false;\n  }\n  if (a % 263 === 0) {\n    return false;\n  }\n  if (a % 269 === 0) {\n    return false;\n  }\n  if (a % 271 === 0) {\n    return false;\n  }\n  if (a % 277 === 0) {\n    return false;\n  }\n  if (a % 281 === 0) {\n    return false;\n  }\n  if (a % 283 === 0) {\n    return false;\n  }\n  if (a % 293 === 0) {\n    return false;\n  }\n  if (a % 307 === 0) {\n    return false;\n  }\n  if (a % 311 === 0) {\n    return false;\n  }\n  if (a % 313 === 0) {\n    return false;\n  }\n  if (a % 317 === 0) {\n    return false;\n  }\n  if (a % 331 === 0) {\n    return false;\n  }\n  if (a % 337 === 0) {\n    return false;\n  }\n  if (a % 347 === 0) {\n    return false;\n  }\n  if (a % 349 === 0) {\n    return false;\n  }\n  if (a % 353 === 0) {\n    return false;\n  }\n  if (a % 359 === 0) {\n    return false;\n  }\n  if (a % 367 === 0) {\n    return false;\n  }\n  if (a % 373 === 0) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*YOUr TAsk is To WRITe a fuNCtion That ReTurnS true if a nUMbER x iS a sImPlE\n  power oF n anD faLSE in otHER cAses.\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*YOUr TAsk is To WRITe a fuNCtion That ReTurnS true if a nUMbER x iS a sImPlE\n  power oF n anD faLSE in otHER cAses.\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 0) {\n    return false;\n  }\n  return isSimplePower(x, n / 2);\n};\n\nconst isPowerOfTwo = (x) => {\n  return isSimplePower(x, Math.floor(Math.log(x) / Math.log(2)));\n};\n\nconst isPrime = (x) => {\n  if (x < 2) {\n    return false;\n  }\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x < Math.sqrt(x)) {\n    return false;\n  }\n  let i = 3;\n  while (i <= x) {\n    if (x % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber = (x) => {\n  if (x < 2) {\n    return false;\n  }\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x < Math.sqrt(x)) {\n    return false;\n  }\n  let i = 3;\n  while (i <= x) {\n    if (x % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber2 = (x) => {\n  if (x < 2) {\n    return false;\n  }\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x < Math.sqrt(x)) {\n    return false;\n  }\n  let i = 3;\n  while (i <= x) {\n    if (x % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber3 = (x) => {\n  if (x < 2) {\n    return false;\n  }\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x < Math.sqrt(x)) {\n    return false;\n  }\n  let i = 3;\n  while (i <= x) {\n    if (x % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber4 = (x) => {\n  if (x < 2) {\n    return false;\n  }\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x < Math.sqrt(x)) {\n    return false;\n  }\n  let i = 3;\n  while (i <= x) {\n    if (x % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber5 = (x) => {\n  if (x < 2) {\n    return false;\n  }\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x < Math.sqrt(x)) {\n    return false;\n  }\n  let i = 3;\n  while (i <= x) {\n    if (x % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber6 = (x) => {\n  if (x < 2) {\n    return false;\n  }\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x < Math.sqrt(x)) {\n    return false;\n  }\n  let i = 3;\n  while (i <= x) {\n    if (x % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber7 = (x) => {\n  if (x < 2) {\n    return false;\n  }\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x < Math.sqrt(x)) {\n    return false;\n  }\n  let i = 3;\n  while (i <= x) {\n    if (x % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber8 = (x) => {\n  if (x < 2) {\n    return false;\n  }\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x < Math.sqrt(x)) {\n    return false;\n  }\n  let i = 3;\n  while (i <= x) {\n    if (x % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber9 = (x) => {\n  if (x < 2) {\n    return false;\n  }\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x < Math.sqrt(x)) {\n    return false;\n  }\n  let i = 3;\n  while (i <= x) {\n    if (x % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber10 = (x) => {\n  if (x < 2) {\n    return false;\n  }\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x < Math.sqrt(x)) {\n    return false;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a >= 0 && a < 256;\n};\n\n/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a >= 0 && a < 256;\n};\n\n/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a >= 0 && a < 256;\n};\n\n/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a >= 0 && a < 256;\n};\n\n/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a >= 0 && a < 256;\n};\n\n/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a >= 0 && a < 256;\n};\n\n/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a >= 0 && a < 256;\n};\n\n/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a >= 0 && a < 256;\n};\n\n/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a >= 0 && a < 256;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*YOU hAVe beeN tASKEd to wRIte a fUnctIoN thaT receives\n  A HeXAdEciMaL nUmBer As a STRinG ANd Counts THe numbeR Of HexADECimAL\n  diGITS tHAt ArE primes (prime NuMbEr=== or A PRIMe=== IS a natural nUMber\n  Greater tHan 1 That Is Not A ProduCT oF tWo smalLeR natuRAl numBers).\n  hexAdecIMal DIgits arE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== c=== D=== E=== F.\n  prIMe NumbERs are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO you have To deTermiNe a nUMBeR of the FolLoWING digitS: 2=== 3=== 5=== 7===\n  B (=decimAl 11)=== D (=decImal 13).\n  NoTE: You may aSsUMe the inPUt is aLWAYs coRREcT or emPtY STRINg===\n  And symbols A===B===C===d===E===F ARe AlwaYs uPpErCAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*YOU hAVe beeN tASKEd to wRIte a fUnctIoN thaT receives\n  A HeXAdEciMaL nUmBer As a STRinG ANd Counts THe numbeR Of HexADECimAL\n  diGITS tHAt ArE primes (prime NuMbEr=== or A PRIMe=== IS a natural nUMber\n  Greater tHan 1 That Is Not A ProduCT oF tWo smalLeR natuRAl numBers).\n  hexAdecIMal DIgits arE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== c=== D=== E=== F.\n  prIMe NumbERs are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO you have To deTermiNe a nUMBeR of the FolLoWING digitS: 2=== 3=== 5=== 7===\n  B (=decimAl 11)=== D (=decImal 13).\n  NoTE: You may aSsUMe the inPUt is aLWAYs coRREcT or emPtY STRINg===\n  And symbols A===B===C===d===E===F ARe AlwaYs uPpErCAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let numKey = 0;\n  let numKey2 = 0;\n  let numKey3 = 0;\n  let numKey4 = 0;\n  let numKey5 = 0;\n  let numKey6 = 0;\n  let numKey7 = 0;\n  let numKey8 = 0;\n  let numKey9 = 0;\n  let numKey10 = 0;\n  let numKey11 = 0;\n  let numKey12 = 0;\n  let numKey13 = 0;\n  let numKey14 = 0;\n  let numKey15 = 0;\n  let numKey16 = 0;\n  let numKey17 = 0;\n  let numKey18 = 0;\n  let numKey19 = 0;\n  let numKey20 = 0;\n  let numKey21 = 0;\n  let numKey22 = 0;\n  let numKey23 = 0;\n  let numKey24 = 0;\n  let numKey25 = 0;\n  let numKey26 = 0;\n  let numKey27 = 0;\n  let numKey28 = 0;\n  let numKey29 = 0;\n  let numKey30 = 0;\n  let numKey31 = 0;\n  let numKey32 = 0;\n  let numKey33 = 0;\n  let numKey34 = 0;\n  let numKey35 = 0;\n  let numKey36 = 0;\n  let numKey37 = 0;\n  let numKey38 = 0;\n  let numKey39 = 0;\n  let numKey40 = 0;\n  let numKey41 = 0;\n  let numKey42 = 0;\n  let numKey43 = 0;\n  let numKey44 = 0;\n  let numKey45 = 0;\n  let numKey46 = 0;\n  let numKey47 = 0;\n  let numKey48 = 0;\n  let numKey49 = 0;\n  let numKey50 = 0;\n  let numKey51 = 0;\n  let numKey52 = 0;\n  let numKey53 = 0;\n  let numKey54 = 0;\n  let numKey55 = 0;\n  let numKey56 = 0;\n  let numKey57 = 0;\n  let numKey58 = 0;\n  let numKey59 = 0;\n  let numKey60 = 0;\n  let numKey61 = 0;\n  let numKey62 = 0;\n  let numKey63 = 0;\n  let numKey64 = 0;\n  let numKey65 = 0;\n  let numKey66 = 0;\n  let numKey67 = 0;\n  let numKey68 = 0;\n  let numKey69 = 0;\n  let numKey70 = 0;\n  let numKey71 = 0;\n  let numKey72 = 0;\n  let numKey73 = 0;\n  let numKey74 = 0;\n  let numKey75 = 0;\n  let numKey76 = 0;\n  let numKey77 = 0;\n  let numKey78 = 0;\n  let numKey79 = 0;\n  let numKey80 = 0;\n  let numKey81 = 0;\n  let numKey82 = 0;\n  let numKey83 = 0;\n  let numKey84 = 0;\n  let numKey85 = 0;\n  let numKey86 = 0;\n  let numKey87 = 0;\n  let numKey88 = 0;\n  let numKey89 = 0;\n  let numKey90 = 0;\n  let numKey91 = 0;\n  let numKey92 = 0;\n  let numKey93 = 0;\n  let numKey94 = 0;\n  let numKey95 = 0;\n  let numKey96 = 0;\n  let numKey97 = 0;\n  let numKey98 = 0;\n  let numKey99 = 0;\n  let numKey100 = 0;\n  let numKey101 = 0;\n  let numKey102 = 0;\n  let numKey103 = 0;\n  let numKey104 = 0;\n  let numKey105 = 0;\n  let numKey106 = 0;\n  let numKey107 = 0;\n  let numKey108 = 0;\n  let numKey109 = 0;\n  let numKey110 = 0;\n  let numKey111 = 0;\n  let numKey112 = 0;\n  let numKey113 = 0;\n  let numKey114 = 0;\n  let numKey115 = 0;\n  let numKey116 = 0;\n  let numKey117 = 0;\n  let numKey118 = 0;\n  let numKey119 = 0;\n  let numKey120 = 0;\n  let numKey121 = 0;\n  let numKey122 = 0;\n  let numKey123 = 0;\n  let numKey124 = 0;\n  let numKey125 = 0;\n  let numKey126 = 0;\n  let num", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*YOU wILl be gIvEN A NumbeR in decimal Form aNd yoUr Task Is to conveRT iT To\n  BinArY fOrMat. the FUNctION sHould return a STring, wiTH eAch CHARacTEr rEPREsENtInG a binaRy\n  NuMber. eACH ChARacter in the sTRing Will be '0' or '1'.\n\n  theRe wiLl Be aN Extra COuPlE of chaRaCters 'DB' at thE begInnIng aND at THe end of ThE StriNg.\n  tHe ExtrA CharaCTers are tHere To helP witH THe Format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*YOU wILl be gIvEN A NumbeR in decimal Form aNd yoUr Task Is to conveRT iT To\n  BinArY fOrMat. the FUNctION sHould return a STring, wiTH eAch CHARacTEr rEPREsENtInG a binaRy\n  NuMber. eACH ChARacter in the sTRing Will be '0' or '1'.\n\n  theRe wiLl Be aN Extra COuPlE of chaRaCters 'DB' at thE begInnIng aND at THe end of ThE StriNg.\n  tHe ExtrA CharaCTers are tHere To helP witH THe Format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  let binaryString = '';\n  let binaryNumber = '';\n  let binaryDigit = '';\n  let binaryDigitCount = 0;\n  let binaryDigitIndex = 0;\n  let binaryDigitIndex2 = 0;\n  let binaryDigitIndex3 = 0;\n  let binaryDigitIndex4 = 0;\n  let binaryDigitIndex5 = 0;\n  let binaryDigitIndex6 = 0;\n  let binaryDigitIndex7 = 0;\n  let binaryDigitIndex8 = 0;\n  let binaryDigitIndex9 = 0;\n  let binaryDigitIndex10 = 0;\n  let binaryDigitIndex11 = 0;\n  let binaryDigitIndex12 = 0;\n  let binaryDigitIndex13 = 0;\n  let binaryDigitIndex14 = 0;\n  let binaryDigitIndex15 = 0;\n  let binaryDigitIndex16 = 0;\n  let binaryDigitIndex17 = 0;\n  let binaryDigitIndex18 = 0;\n  let binaryDigitIndex19 = 0;\n  let binaryDigitIndex20 = 0;\n  let binaryDigitIndex21 = 0;\n  let binaryDigitIndex22 = 0;\n  let binaryDigitIndex23 = 0;\n  let binaryDigitIndex24 = 0;\n  let binaryDigitIndex25 = 0;\n  let binaryDigitIndex26 = 0;\n  let binaryDigitIndex27 = 0;\n  let binaryDigitIndex28 = 0;\n  let binaryDigitIndex29 = 0;\n  let binaryDigitIndex30 = 0;\n  let binaryDigitIndex31 = 0;\n  let binaryDigitIndex32 = 0;\n  let binaryDigitIndex33 = 0;\n  let binaryDigitIndex34 = 0;\n  let binaryDigitIndex35 = 0;\n  let binaryDigitIndex36 = 0;\n  let binaryDigitIndex37 = 0;\n  let binaryDigitIndex38 = 0;\n  let binaryDigitIndex39 = 0;\n  let binaryDigitIndex40 = 0;\n  let binaryDigitIndex41 = 0;\n  let binaryDigitIndex42 = 0;\n  let binaryDigitIndex43 = 0;\n  let binaryDigitIndex44 = 0;\n  let binaryDigitIndex45 = 0;\n  let binaryDigitIndex46 = 0;\n  let binaryDigitIndex47 = 0;\n  let binaryDigitIndex48 = 0;\n  let binaryDigitIndex49 = 0;\n  let binaryDigitIndex50 = 0;\n  let binaryDigitIndex51 = 0;\n  let binaryDigitIndex52 = 0;\n  let binaryDigitIndex53 = 0;\n  let binaryDigitIndex54 = 0;\n  let binaryDigitIndex55 = 0;\n  let binaryDigitIndex56 = 0;\n  let binaryDigitIndex57 = 0;\n  let binaryDigitIndex58 = 0;\n  let binaryDigitIndex59 = 0;\n  let binaryDigitIndex60 = 0;\n  let binaryDigitIndex61 = 0;\n  let binaryDigitIndex62 = 0;\n  let binaryDigitIndex63 = 0;\n  let binaryDigitIndex64 = 0;\n  let binaryDigitIndex65 = 0;\n  let binaryDigitIndex66 = 0;\n  let binaryDigitIndex67 = 0;\n  let binaryDigitIndex68 = 0;\n  let binaryDigitIndex69 = 0;\n  let binaryDigitIndex70 = 0;\n  let binaryDigitIndex71 = 0;\n  let binaryDigitIndex72 = 0;\n  let binaryDigitIndex73 = 0;\n  let binaryDigitIndex74 = 0;\n  let binaryDigitIndex75 = 0;\n  let binaryDigitIndex76 = 0;\n  let binaryDigitIndex77 = 0;\n  let binaryDigitIndex78 = 0;\n  let binaryDigitIndex79 = 0;\n  let binaryDigitIndex80 = 0;\n  let binaryDigitIndex81 = 0;\n  let binaryDigitIndex82 = 0;\n  let binaryDigitIndex83 = 0;\n  let binaryDigitIndex84 = 0;\n  let binaryDigitIndex85 = 0;\n  let binaryDigitIndex86 = 0;\n  let binaryDigitIndex87 = 0;\n  let binaryDigitIndex88 = 0;\n  let binaryDigitIndex89 = 0;\n  let binaryDigitIndex90 = 0;\n  let binaryDigitIndex91 = 0;\n  let binaryDigitIndex92 = 0;\n  let binaryDigitIndex93 = 0;\n  let binaryDigitIndex94 = 0;\n  let binaryDigitIndex95 = 0;\n  let binaryDigitIndex96 = 0;\n  let binaryDigitIndex97 = 0;\n  let binaryDigitIndex98 = 0;\n  let binaryDigitIndex99 = 0;\n  let binaryDigitIndex100 = 0;\n  let binaryDigitIndex101 = 0;\n  let binaryDigitIndex102 = 0;\n  let binaryDigitIndex103 = 0;\n  let binaryDigitIndex104 = 0;\n  let binaryDigitIndex105 = 0;\n  let binaryDigitIndex106 = 0;\n  let binaryDigitIndex107 = 0;\n  let binaryDigitIndex108 = 0;\n  let binaryDigitIndex109 = 0;\n  let binaryDigitIndex110 = 0;\n  let binaryDigitIndex111 = 0;\n  let binaryDigitIndex112 = 0;\n  let binaryDigitIndex113 = 0;\n  let binaryDigitIndex114 = 0;\n  let binaryDigitIndex115 = 0;\n  let binaryDigitIndex116 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  result.push(sum);\n  return result;\n};\n\nconst testSumProduct = () => {\n  const result = sumProduct([1, 2, 3, 4], 2);\n  console.log(result);\n};\n\ntestSumProduct();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*YOU aRE giveN a STRIng s.\n  YoUR task Is to ChEck iF the strinG Is HApPy oR nOt.\n  a sTriNg iS HAppY IF iTs lengTH is at leASt 3 And EVERy 3 cONseCUTIvE LeTtErs are DiStInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*YOU aRE giveN a STRIng s.\n  YoUR task Is to ChEck iF the strinG Is HApPy oR nOt.\n  a sTriNg iS HAppY IF iTs lengTH is at leASt 3 And EVERy 3 cONseCUTIvE LeTtErs are DiStInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let n = s.length;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += s[i] - '0';\n  }\n  return sum % 10 === 0;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*IT Is THe lasT wEEK Of the SEmestEr anD tHe teAcher has tO GiVE tHe grades\n  tO sTuDeNts. the TEAchER HaS been mAKing her OWn AlgORIThm FOr gRADInG.\n  thE oNly proBlEm Is, shE HAS LoST the code shE Used For gradiNg.\n  SHe haS gIveN You a list oF gPas For somE sTudenTS and yOu haVe tO wriTE\n  a fUNction tHaT Can oUtPUt A list of lETter grades uSIng the foLlowIng taBle:\n           Gpa       |    leTter grAde\n            4.0                a+\n          > 3.7                A\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                b\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*IT Is THe lasT wEEK Of the SEmestEr anD tHe teAcher has tO GiVE tHe grades\n  tO sTuDeNts. the TEAchER HaS been mAKing her OWn AlgORIThm FOr gRADInG.\n  thE oNly proBlEm Is, shE HAS LoST the code shE Used For gradiNg.\n  SHe haS gIveN You a list oF gPas For somE sTudenTS and yOu haVe tO wriTE\n  a fUNction tHaT Can oUtPUt A list of lETter grades uSIng the foLlowIng taBle:\n           Gpa       |    leTter grAde\n            4.0                a+\n          > 3.7                A\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                b\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = [];\n  grades.forEach((grade) => {\n    if (grade > 3.0) {\n      gradesArray.push('A+');\n    } else if (grade > 2.7) {\n      gradesArray.push('A');\n    } else if (grade > 2.3) {\n      gradesArray.push('A-');\n    } else if (grade > 2.0) {\n      gradesArray.push('B+');\n    } else if (grade > 1.7) {\n      gradesArray.push('B');\n    } else if (grade > 1.3) {\n      gradesArray.push('B-');\n    } else if (grade > 1.0) {\n      gradesArray.push('C+');\n    } else if (grade > 0.7) {\n      gradesArray.push('C');\n    } else if (grade > 0.3) {\n      gradesArray.push('C-');\n    } else if (grade > 0.0) {\n      gradesArray.push('D+');\n    } else {\n      gradesArray.push('D');\n    }\n  });\n  return gradesArray;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*WRItE A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*WRItE A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length === 0) {\n    return false;\n  }\n  const isPrime = (number) => {\n    if (number < 2) {\n      return false;\n    }\n    if (number === 2) {\n      return true;\n    }\n    for (let i = 2; i < Math.sqrt(number); i++) {\n      if (number % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return isPrime(string.length);\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  gIvEN a posItIVE IntegER n, return the cOunt Of The nUmbers of n-digit\n  pOSiTIvE inTeGeRs ThaT stART or END wIth 1.\n  */\nconST startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a posItIVE IntegER n, return the cOunt Of The nUmbers of n-digit\n  pOSiTIvE inTeGeRs ThaT stART or END wIth 1.\n  */\nconST startsOneEnds = (n) => {\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIVeN A posiTiVE INtegeR N, return The toTal sUm Of itS digits in biNArY.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*GIVeN A posiTiVE INtegeR N, return The toTal sUm Of itS digits in biNArY.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(2, i);\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add(lst.slice(1));\n};\n\nconst add2 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add2(lst.slice(1));\n};\n\nconst add3 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add3(lst.slice(1));\n};\n\nconst add4 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add4(lst.slice(1));\n};\n\nconst add5 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add5(lst.slice(1));\n};\n\nconst add6 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add6(lst.slice(1));\n};\n\nconst add7 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add7(lst.slice(1));\n};\n\nconst add8 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add8(lst.slice(1));\n};\n\nconst add9 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add9(lst.slice(1));\n};\n\nconst add10 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add10(lst.slice(1));\n};\n\nconst add11 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add11(lst.slice(1));\n};\n\nconst add12 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add12(lst.slice(1));\n};\n\nconst add13 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add13(lst.slice(1));\n};\n\nconst add14 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add14(lst.slice(1));\n};\n\nconst add15 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add15(lst.slice(1));\n};\n\nconst add16 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add16(lst.slice(1));\n};\n\nconst add17 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add17(lst.slice(1));\n};\n\nconst add18 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add18(lst.slice(1));\n};\n\nconst add19 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add19(lst.slice(1));\n};\n\nconst add20 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add20(lst.slice(1));\n};\n\nconst add21 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add21(lst.slice(1));\n};\n\nconst add22 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add22(lst.slice(1));\n};\n\nconst add23 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add23(lst.slice(1));\n};\n\nconst add24 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add24(lst.slice(1));\n};\n\nconst add25 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add25(lst.slice(1));\n};\n\nconst add26 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add26(lst.slice(1));\n};\n\nconst add27 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add27(lst.slice(1));\n};\n\nconst add28 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst[0] + add28", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  wRiTE a funCtION That tAKes a sTrinG aNd reTurns an orDErED vErsIoN oF iT.\n  OrDerED VerSIOn Of striNG, is a strINg WheRE ALl wORds (SEPArATeD bY space)\n  ArE rEplaCED BY a NEw word wherE All tHe characTerS arrAnGed in\n  AScendINg OrDer basEd On ascII valuE.\n  NotE: YoU shoULd kEEp the orDeR Of woRdS AnD blaNK spacES in the sentEnce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  wRiTE a funCtION That tAKes a sTrinG aNd reTurns an orDErED vErsIoN oF iT.\n  OrDerED VerSIOn Of striNG, is a strINg WheRE ALl wORds (SEPArATeD bY space)\n  ArE rEplaCED BY a NEw word wherE All tHe characTerS arrAnGed in\n  AScendINg OrDer basEd On ascII valuE.\n  NotE: YoU shoULd kEEp the orDeR Of woRdS AnD blaNK spacES in the sentEnce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let str = s;\n  let len = str.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 0;\n  let temp = '';\n  let temp2 = '';\n  let temp3 = '';\n  let temp4 = '';\n  let temp5 = '';\n  let temp6 = '';\n  let temp7 = '';\n  let temp8 = '';\n  let temp9 = '';\n  let temp10 = '';\n  let temp11 = '';\n  let temp12 = '';\n  let temp13 = '';\n  let temp14 = '';\n  let temp15 = '';\n  let temp16 = '';\n  let temp17 = '';\n  let temp18 = '';\n  let temp19 = '';\n  let temp20 = '';\n  let temp21 = '';\n  let temp22 = '';\n  let temp23 = '';\n  let temp24 = '';\n  let temp25 = '';\n  let temp26 = '';\n  let temp27 = '';\n  let temp28 = '';\n  let temp29 = '';\n  let temp30 = '';\n  let temp31 = '';\n  let temp32 = '';\n  let temp33 = '';\n  let temp34 = '';\n  let temp35 = '';\n  let temp36 = '';\n  let temp37 = '';\n  let temp38 = '';\n  let temp39 = '';\n  let temp40 = '';\n  let temp41 = '';\n  let temp42 = '';\n  let temp43 = '';\n  let temp44 = '';\n  let temp45 = '';\n  let temp46 = '';\n  let temp47 = '';\n  let temp48 = '';\n  let temp49 = '';\n  let temp50 = '';\n  let temp51 = '';\n  let temp52 = '';\n  let temp53 = '';\n  let temp54 = '';\n  let temp55 = '';\n  let temp56 = '';\n  let temp57 = '';\n  let temp58 = '';\n  let temp59 = '';\n  let temp60 = '';\n  let temp61 = '';\n  let temp62 = '';\n  let temp63 = '';\n  let temp64 = '';\n  let temp65 = '';\n  let temp66 = '';\n  let temp67 = '';\n  let temp68 = '';\n  let temp69 = '';\n  let temp70 = '';\n  let temp71 = '';\n  let temp72 = '';\n  let temp73 = '';\n  let temp74 = '';\n  let temp75 = '';\n  let temp76 = '';\n  let temp77 = '';\n  let temp78 = '';\n  let temp79 = '';\n  let temp80 = '';\n  let temp81 = '';\n  let temp82 = '';\n  let temp83 = '';\n  let temp84 = '';\n  let temp85 = '';\n  let temp86 = '';\n  let temp87 = '';\n  let temp88 = '';\n  let temp89 = '';\n  let temp90 = '';\n  let temp91 = '';\n  let temp92 = '';\n  let temp93 = '';\n  let temp94 = '';\n  let temp95 = '';\n  let temp96 = '';\n  let temp97 = '';\n  let temp98 = '';\n  let temp99 = '';\n  let temp100 = '';\n  let temp101 = '';\n  let temp102 = '';\n  let temp103 = '';\n  let temp104 = '';\n  let temp105 = '';\n  let temp106 = '';\n  let temp107 = '';\n  let temp108 = '';\n  let temp109 = '';\n  let temp110 = '';\n  let temp111 = '';\n  let temp112 = '';\n  let temp113 = '';\n  let temp114 = '';\n  let temp115 = '';\n  let temp116 = '';\n  let temp117 = '';\n  let temp118 = '';\n  let temp119 = '';\n  let temp120 = '';\n  let temp121 = '';\n  let temp122 = '';\n  let temp123 = '';\n  let temp124 = '';\n  let temp125 = '';\n  let temp126 = '';\n  let temp127 = '';\n  let temp128 = '';\n  let temp129 = '';\n  let temp130 = '';\n  let temp131 = '';\n  let temp132 = '';\n  let temp133 = '';\n  let temp134 = '';\n  let temp135 = '';\n  let temp136 = '';\n  let temp137 = '';\n  let temp138 = '';\n  let temp139 = '';\n  let temp140 = '';\n  let temp141 = '';\n  let temp142 = '';\n  let temp143 = '';\n  let temp144 = '';\n  let temp145 = '';\n  let temp146 = '';\n  let temp147 = '';\n  let temp148 = '';\n  let temp149 = '';\n  let temp150 = '';\n  let temp151 = '';\n  let temp152 = '';\n  let temp153 = '';\n  let temp154 = '';\n  let temp155 = '';\n  let temp156 = '';\n  let temp157 = '';\n  let temp158 = '';\n  let temp159 = '';", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  yOu ARe givEn A 2 DIMensiONal daTa, as A nEsteD lists,\n  whiCH iS SiMilAr To MaTriX, hoWEVer, UNLiKe matrICes,\n  each ROw May CONTaiN A diFFEReNT nUmBer of cOlUmNs.\n  GiVEN lst, ANd INteger x, find INtegErs x in the list,\n  anD return list of TuplEs, [(X1, y1), (x2, Y2) ...] Such tHAt\n  EaCh tuple is a cOoRdinaTE - (row, cOlumNs), sTartINg wITh 0.\n  Sort cOoRDinaTeS InItiaLLy by rOWs in ascendIng oRder.\n  ALso, sORT cOordinAteS oF THE row by Columns in DescenDing orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  yOu ARe givEn A 2 DIMensiONal daTa, as A nEsteD lists,\n  whiCH iS SiMilAr To MaTriX, hoWEVer, UNLiKe matrICes,\n  each ROw May CONTaiN A diFFEReNT nUmBer of cOlUmNs.\n  GiVEN lst, ANd INteger x, find INtegErs x in the list,\n  anD return list of TuplEs, [(X1, y1), (x2, Y2)...] Such tHAt\n  EaCh tuple is a cOoRdinaTE - (row, cOlumNs), sTartINg wITh 0.\n  Sort cOoRDinaTeS InItiaLLy by rOWs in ascendIng oRder.\n  ALso, sORT cOordinAteS oF THE row by Columns in DescenDing orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let i = 0\n  let j = 0\n  let row = []\n  while (i < lst.length) {\n    while (j < lst[i].length && lst[i][j] < x) {\n      j++\n    }\n    if (j < lst[i].length) {\n      row.push(lst[i][j])\n      j++\n    }\n    i++\n  }\n  return row\n}\n\nconst getColumn = (lst, x) => {\n  let i = 0\n  let j = 0\n  let column = []\n  while (i < lst.length) {\n    while (j < lst[i].length && lst[i][j] < x) {\n      j++\n    }\n    if (j < lst[i].length) {\n      column.push(lst[i][j])\n      j++\n    }\n    i++\n  }\n  return column\n}\n\nconst getMatrix = (lst) => {\n  let rows = []\n  let columns = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    while (j < lst[i].length) {\n      rows.push(lst[i][j])\n      j++\n    }\n    j = 0\n    i++\n  }\n  return {rows, columns}\n}\n\nconst getMatrixByRow = (lst) => {\n  let rows = []\n  let columns = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    while (j < lst[i].length) {\n      columns.push(lst[i][j])\n      j++\n    }\n    j = 0\n    i++\n  }\n  return {rows, columns}\n}\n\nconst getMatrixByColumn = (lst) => {\n  let rows = []\n  let columns = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    while (j < lst[i].length) {\n      rows.push(lst[i][j])\n      j++\n    }\n    j = 0\n    i++\n  }\n  return {rows, columns}\n}\n\nconst getMatrixByRowAndColumn = (lst) => {\n  let rows = []\n  let columns = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    while (j < lst[i].length) {\n      columns.push(lst[i][j])\n      j++\n    }\n    j = 0\n    i++\n  }\n  return {rows, columns}\n}\n\nconst getMatrixByRowAndColumns = (lst) => {\n  let rows = []\n  let columns = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    while (j < lst[i].length) {\n      columns.push(lst[i][j])\n      j++\n    }\n    j = 0\n    i++\n  }\n  return {rows, columns}\n}\n\nconst getMatrixByColumnsAndRows = (lst) => {\n  let rows = []\n  let columns = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    while (j < lst[i].length) {\n      rows.push(lst[i][j])\n      j++\n    }\n    j = 0\n    i++\n  }\n  return {rows, columns}\n}\n\nconst getMatrixByColumnsAndRowsAndColumns = (lst) => {\n  let rows = []\n  let columns = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    while (j < lst[i].length) {\n      columns.push(lst[i][j])\n      j++\n    }\n    j = 0\n    i++\n  }\n  return {rows, columns}\n}\n\nconst getMatrixByColumnsAndRowsAndColumnsAndRows = (lst) => {\n  let rows = []\n  let columns = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    while (j < lst[i].length) {\n      columns.push(lst[i][j])\n      j++\n    }\n    j = 0\n    i++\n  }\n  return {rows, columns}\n}\n\nconst getMatrixByColumnsAndRowsAndColumnsAndRowsAndColumns = (lst) => {\n  let rows = []\n  let columns = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  gIvEN an array of NoN-NEGativE IntegErs, return a CoPy of The given array aFTeR SoRtiNg,\n  YoU wIll SorT THe gIVEn array in AscendINg order IF tHe sUM( FIrsT IndEX VAlUE, lAsT index VaLuE) is oDD,\n  OR SoRT it in descendINg orDer if the Sum( FirsT iNdeX Value, LAsT iNdex vaLuE) is evEN.\n\n  Note:\n  * Don't ChaNge tHE giVEn array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN an array of NoN-NEGativE IntegErs, return a CoPy of The given array aFTeR SoRtiNg,\n  YoU wIll SorT THe gIVEn array in AscendINg order IF tHe sUM( FIrsT IndEX VAlUE, lAsT index VaLuE) is oDD,\n  OR SoRT it in descendINg orDer if the Sum( FirsT iNdeX Value, LAsT iNdex vaLuE) is evEN.\n\n  Note:\n  * Don't ChaNge tHE giVEn array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*CREaTE a funCtION encrypt That tAKes a sTrinG aS an aRgument anD\n  ReTUrNs a StRiNg EncRypTED wiTH ThE alphaBEt being ROtAteD. \n  tHE alPHabET SHoULd Be RotateD in a MaNner SUCH ThAT the letterS \n  ShifT down by tWo mUltiPlIed TO two pLAcEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*CREaTE a funCtION encrypt That tAKes a sTrinG aS an aRgument anD\n  ReTUrNs a StRiNg EncRypTED wiTH ThE alphaBEt being ROtAteD. \n  tHE alPHabET SHoULd Be RotateD in a MaNner SUCH ThAT the letterS \n  ShifT down by tWo mUltiPlIed TO two pLAcEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.toLowerCase();\n  let arr = str.split('');\n  let ret = '';\n  for (let i = 0; i < arr.length; i++) {\n    let c = arr[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      c = c.toUpperCase();\n    }\n    ret += c;\n  }\n  return ret;\n};\n\nconst decrypt = (s) => {\n  let str = s.toLowerCase();\n  let arr = str.split('');\n  let ret = '';\n  for (let i = 0; i < arr.length; i++) {\n    let c = arr[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      c = c.toLowerCase();\n    }\n    ret += c;\n  }\n  return ret;\n};\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomString = (length) => {\n  let chars = 'abcdefghijklmnopqrstuvwxyz';\n  let randomString = '';\n  for (let i = 0; i < length; i++) {\n    randomString += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return randomString;\n};\n\nconst getRandomAlpha = () => {\n  let chars = 'abcdefghijklmnopqrstuvwxyz';\n  return chars[getRandomInt(0, chars.length - 1)];\n};\n\nconst getRandomAlphaNum = () => {\n  let chars = '0123456789';\n  return chars[getRandomInt(0, chars.length - 1)];\n};\n\nconst getRandomAlphaNumString = (length) => {\n  let chars = '0123456789';\n  let randomString = '';\n  for (let i = 0; i < length; i++) {\n    randomString += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return randomString;\n};\n\nconst getRandomAlphaNumString2 = (length) => {\n  let chars = '0123456789';\n  let randomString = '';\n  for (let i = 0; i < length; i++) {\n    randomString += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return randomString;\n};\n\nconst getRandomAlphaNumString3 = (length) => {\n  let chars = '0123456789';\n  let randomString = '';\n  for (let i = 0; i < length; i++) {\n    randomString += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return randomString;\n};\n\nconst getRandomAlphaNumString4 = (length) => {\n  let chars = '0123456789';\n  let randomString = '';\n  for (let i = 0; i < length; i++) {\n    randomString += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return randomString;\n};\n\nconst getRandomAlphaNumString5 = (length) => {\n  let chars = '0123456789';\n  let randomString = '';\n  for (let i = 0; i < length; i++) {\n    randomString += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return randomString;\n};\n\nconst getRandomAlphaNumString6 = (length) => {\n  let chars = '0123456789';\n  let randomString = '';\n  for (let i = 0; i < length; i++) {\n    randomString += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return randomString;\n};\n\nconst getRandomAlphaNumString7 = (length) => {\n  let chars = '0123456789';\n  let randomString = '';\n  for (let i = 0; i < length; i++) {\n    randomString += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return randomString;\n};\n\nconst getRandomAlphaNumString8 = (length) => {\n  let chars = '0123456789';\n  let randomString = '';\n  for (let i = 0; i < length; i++) {\n    randomString += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return randomString;\n};\n\nconst getRandomAlphaNumString9 = (length) => {\n  let chars = '0123456789';\n  let randomString = '';\n  for (let i = 0; i < length; i++) {\n    randomString += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return randomString;\n};\n\nconst getRandomAlphaNumString10 = (length) => {\n  let chars = '0123456789';\n  let randomString = '';\n  for (let i = 0; i < length; i++) {\n    randomString += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return randomString;\n};\n\nconst getRandomAlphaNumString11 = (length) => {\n  let chars = '0123456789';\n  let randomString = '';\n  for (let i = 0; i < length; i++) {\n    randomString += chars[getRandomInt(0, chars.length", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* fRoM A giveN list oF INTegerS, GenerAte a list Of RollIng maximuM ElEMeNt fOuNd UnTil GivEN MomENT\n  in tHe sequENce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* fRoM A giveN list oF INTegerS, GenerAte a list Of RollIng maximuM ElEMeNt fOuNd UnTil GivEN MomENT\n  in tHe sequENce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    i++;\n  }\n  return [max];\n};\n\n/*\n  fRoM A giveN list oF INTegerS, GenerAte a list Of RollIng maximuM ElEMeNt fOuNd UnTil GivEN MomENT\n  in tHe sequENce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax2 = (numbers) => {\n  const max = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n/*\n  fRoM A giveN list oF INTegerS, GenerAte a list Of RollIng maximuM ElEMeNt fOuNd UnTil GivEN MomENT\n  in tHe sequENce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax3 = (numbers) => {\n  const max = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n/*\n  fRoM A giveN list oF INTegerS, GenerAte a list Of RollIng maximuM ElEMeNt fOuNd UnTil GivEN MomENT\n  in tHe sequENce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax4 = (numbers) => {\n  const max = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n/*\n  fRoM A giveN list oF INTegerS, GenerAte a list Of RollIng maximuM ElEMeNt fOuNd UnTil GivEN MomENT\n  in tHe sequENce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax5 = (numbers) => {\n  const max = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n/*\n  fRoM A giveN list oF INTegerS, GenerAte a list Of RollIng maximuM ElEMeNt fOuNd UnTil GivEN MomENT\n  in tHe sequENce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax6 = (numbers) => {\n  const max = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n/*\n  fRoM A giveN list oF INTegerS, GenerAte a list Of RollIng maximuM ElEMeNt fOuNd UnTil GivEN MomENT\n  in tHe sequENce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax7 = (numbers) => {\n  const max = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n/*\n  fRoM A giveN list oF INTegerS, GenerAte a list Of RollIng maximuM ElEMeNt fOuNd UnTil GivEN MomENT\n  in tHe sequENce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax8 = (numbers) => {\n  const max = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n/*\n  fRoM A giveN list oF INTegerS, GenerAte a list Of RollIng maximuM ElEMeNt fOuNd UnTil GivEN MomENT\n  in tHe sequENce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax9 = (numbers) => {\n  const max = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    if (numbers[i] > max)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  yOu ARe givEn A list OF IntegERs.\n  WriTe a fUnCtioN nextSmallest() that retuRNs THe 2Nd smallest eLeMeNt Of tHe list.\n  RETUrn NULl If therE Is no sucH ElEmeNT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == NUll\n  nextSmallest([1, 1]) == NUll\n  */\nCONSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  yOu ARe givEn A list OF IntegERs.\n  WriTe a fUnCtioN nextSmallest() that retuRNs THe 2Nd smallest eLeMeNt Of tHe list.\n  RETUrn NULl If therE Is no sucH ElEmeNT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == NUll\n  nextSmallest([1, 1]) == NUll\n  */\nCONSt nextSmallest = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return lst[minIndex];\n};\n\n/*\n  yOu ARe givEn A list OF IntegERs.\n  WriTe a fUnCtioN nextSmallest() that retuRNs THe 2Nd smallest eLeMeNt Of tHe list.\n  RETUrn NULl If therE Is no sucH ElEmeNT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == NUll\n  nextSmallest([1, 1]) == NUll\n  */\nCONSt nextSmallest2 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  yOu ARe givEn A list OF IntegERs.\n  WriTe a fUnCtioN nextSmallest() that retuRNs THe 2Nd smallest eLeMeNt Of tHe list.\n  RETUrn NULl If therE Is no sucH ElEmeNT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == NUll\n  nextSmallest([1, 1]) == NUll\n  */\nCONSt nextSmallest3 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  yOu ARe givEn A list OF IntegERs.\n  WriTe a fUnCtioN nextSmallest() that retuRNs THe 2Nd smallest eLeMeNt Of tHe list.\n  RETUrn NULl If therE Is no sucH ElEmeNT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == NUll\n  nextSmallest([1, 1]) == NUll\n  */\nCONSt nextSmallest4 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  yOu ARe givEn A list OF IntegERs.\n  WriTe a fUnCtioN nextSmallest() that retuRNs THe 2Nd smallest eLeMeNt Of tHe list.\n  RETUrn NULl If therE Is no sucH ElEmeNT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == NUll\n  nextSmallest([1, 1]) == NUll\n  */\nCONSt nextSmallest5 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  yOu ARe givEn A list OF IntegERs.\n  WriTe a fUnCtioN nextSmallest() that retuRNs THe 2Nd smallest eLeMeNt Of tHe list.\n  RETUrn NULl If therE Is no sucH ElEmeNT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == NUll\n  nextSmallest([1, 1]) == NUll\n  */\nCONSt nextSmallest6 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  yOu'LL be giVeN A STring OF wordS, and YoUr taSk is to couNT tHE nUmbEr\n  Of BoRedOms. a BOreDOM iS a sentENce that STaRts WITH thE WorD \"i\".\n  sEnTEnCeS are deLiMiTed bY '.', '?' OR '!'.\n \n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  yOu'LL be giVeN A STring OF wordS, and YoUr taSk is to couNT tHE nUmbEr\n  Of BoRedOms. a BOreDOM iS a sentENce that STaRts WITH thE WorD \"i\".\n  sEnTEnCeS are deLiMiTed bY '.', '?' OR '!'.\n \n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = (S) => {\n    const isBored = (S) => {\n      const isBored = (S) => {\n        const isBored = (S) => {\n          const isBored = (S) => {\n            const isBored = (S) => {\n              const isBored = (S) => {\n                const isBored = (S) => {\n                  const isBored = (S) => {\n                    const isBored = (S) => {\n                      const isBored = (S) => {\n                        const isBored = (S) => {\n                          const isBored = (S) => {\n                            const isBored = (S) => {\n                              const isBored = (S) => {\n                                const isBored = (S) => {\n                                  const isBored = (S) => {\n                                    const isBored = (S) => {\n                                      const isBored = (S) => {\n                                        const isBored = (S) => {\n                                          const isBored = (S) => {\n                                            const isBored = (S) => {\n                                              const isBored = (S) => {\n                                                const isBored = (S) => {\n                                                  const isBored = (S) => {\n                                                    const isBored = (S) => {\n                                                      const isBored = (S) => {\n                                                        const isBored = (S) => {\n                                                          const isBored = (S) => {\n                                                            const isBored = (S) => {\n                                                              const isBored = (S) => {\n                                                                const isBored = (S) => {\n                                                                  const isBored = (S) => {\n                                                                    const isBored = (S) => {\n                                                                      const isBored = (S) => {\n                                                                        const isBored = (S) => {\n                                                                          const isBored = (S) => {\n                                                                            const isBored = (S) => {\n                                                                              const isBored = (S) => {\n                                                                                const isBored = (S) => {\n                                                                                  const isBored = (S) => {\n                                                                                    const isBored = (S) => {\n                                                                                      const isBored = (S) => {\n                                                                                        const isBored = (S) => {\n                                                                                          const isBored = (S) => {\n                                                                                            const isBored = (S) => {\n                                                                                              const isBored = (S) => {\n                                                                                                const isBored = (S) => {\n                                                                                                  const isBored = (S) => {\n                                                                                                    const isBored = (S) => {\n                                                                                                      const isBored = (S) => {\n                                                                                                        const isBored = (S) => {\n                                                                                                          const isBored = (S) => {\n                                                                                                            const isBored = (S) => {\n                                                                                                              const isBored = (S) => {\n                                                                                                                  const isBored = (S) => {\n                                                                                                                    const isBored = (S) => {\n                                                                                                                      const isBored = (S) => {\n                                                                                                                        const isBored = (S) => {\n                                                                                                                          const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored = (S) => {\n                                                                                                                            const isBored", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* cReATe a fuNcTION that TAkes 3 nUmbeRs.\n  retuRns true if ONe OF tHe nUmBeRs Is eQuaL TO thE SUm Of the oTHer two, aND aLl nUMBErs ARe iNTEGeRS.\n  REtUrns faLsE in aNy otHER CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* cReATe a fuNcTION that TAkes 3 nUmbeRs.\n  retuRns true if ONe OF tHe nUmBeRs Is eQuaL TO thE SUm Of the oTHer two, aND aLl nUMBErs ARe iNTEGeRS.\n  REtUrns faLsE in aNy otHER CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x > y && x > z && y > z;\n};\n\n/* cReATe a fuNcTION that TAkes 4 nUmbeRs.\n  retuRns true if ONe OF tHe nUmBeRs Is eQuaL TO thE SUm Of the oTHer two, aND aLl nUMBErs ARe iNTEGeRS.\n  REtUrns faLsE in aNy otHER CAsES.\n  Examples\n  anyInt(5, 2, 7, 9) ➞ true\n  anyInt(3, 2, 2, 1) ➞ false\n  anyInt(3, -2, 1, 2) ➞ true\n  anyInt(3.6, -2.2, 2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z, w) => {\n  return x > y && x > z && x > w && y > z && y > w && z > w;\n};\n\n/* cReATe a fuNcTION that TAkes 5 nUmbeRs.\n  retuRns true if ONe OF tHe nUmBeRs Is eQuaL TO thE SUm Of the oTHer two, aND aLl nUMBErs ARe iNTEGeRS.\n  REtUrns faLsE in aNy otHER CAsES.\n  Examples\n  anyInt(5, 2, 7, 9, 11) ➞ true\n  anyInt(3, 2, 2, 1, 2) ➞ false\n  anyInt(3, -2, 1, 2, 3) ➞ true\n  anyInt(3.6, -2.2, 2, 2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z, w, v) => {\n  return x > y && x > z && x > w && x > v && y > z && y > w && z > w && z > v;\n};\n\n/* cReATe a fuNcTION that TAkes 6 nUmbeRs.\n  retuRns true if ONe OF tHe nUmBeRs Is eQuaL TO thE SUm Of the oTHer two, aND aLl nUMBErs ARe iNTEGeRS.\n  REtUrns faLsE in aNy otHER CAsES.\n  Examples\n  anyInt(5, 2, 7, 9, 11, 13) ➞ true\n  anyInt(3, 2, 2, 1, 2, 3) ➞ false\n  anyInt(3, -2, 1, 2, 3, 4) ➞ true\n  anyInt(3.6, -2.2, 2, 2, 2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z, w, v, u) => {\n  return x > y && x > z && x > w && x > v && x > u && y > z && y > w && z > w && z > v && z > u;\n};\n\n/* cReATe a fuNcTION that TAkes 7 nUmbeRs.\n  retuRns true if ONe OF tHe nUmBeRs Is eQuaL TO thE SUm Of the oTHer two, aND aLl nUMBErs ARe iNTEGeRS.\n  REtUrns faLsE in aNy otHER CAsES.\n  Examples\n  anyInt(5, 2, 7, 9, 11, 13, 15) ➞ true\n  anyInt(3, 2, 2, 1, 2, 3, 4) ➞ false\n  anyInt(3, -2, 1, 2, 3, 4, 5) ➞ true\n  anyInt(3.6, -2.2, 2, 2, 2, 2, 2) ➞ false\n  */\nconst anyInt7 = (x, y, z, w, v, u, vv) => {\n  return x > y && x > z && x > w && x > v && x > u && y > z && y > w && z > w && z > v && z > u && z > vv;\n};\n\n/* cReATe a fuNcTION that TAkes 8 nUmbeRs.\n  retuRns true if ONe OF tHe nUmBeRs Is eQuaL TO thE SUm Of the oTHer two, aND aLl nUMBErs ARe iNTEGeRS.\n  REtUrns faLsE in aNy otHER CAsES.\n  Examples\n  anyInt(5, 2, 7, 9, 11, 13, 15, 17) ➞ true\n  anyInt(3, 2, 2, 1, 2, 3, 4, 5) ➞ false\n  anyInt(3, -2, 1, 2, 3, 4, 5, 6) ➞ true\n  anyInt(3.6, -2.2, 2, 2, 2, 2, 2, 2) ➞ false\n  */\nconst anyInt8 = (x, y, z, w, v, u, vv, ww) => {\n  return x > y && x > z && x > w && x > v && x > u && y > z && y > w && z > w && z > v && z > u && z > vv && z > ww;\n};\n\n/* cReATe a fuNcTION that TAkes 9 nUmbeRs.\n  retuRns true if ONe OF tHe nUmBeRs Is eQuaL TO thE SUm Of the oTHer two, aND aLl nUMBErs ARe iNTEGeRS.\n  REtUrns fa", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LetTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LEttER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LetTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LEttER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*YOU aRE giveN a list OF INtegeRS.\n  You nEed tO fInd tHe largest PRiME vAluE aNd return ThE suM of ITS diGITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*YOU aRE giveN a list OF INtegeRS.\n  You nEed tO fInd tHe largest PRiME vAluE aNd return ThE suM of ITS diGITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let i = 0;\n  for (i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (sum > max) {\n      max = sum;\n    }\n    sum = 0;\n  }\n  return max;\n};\n\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  gIvEN a dicTiONARy, return truE If all Keys ArE strIngs in lower \n  CAsE Or All KeYs ArE stRinGS in UppER CaSe, else return FAlse.\n  The FUnCtiON SHouLD return faLSE Is THe GiVen dicTiOnAry iS EMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a dicTiONARy, return truE If all Keys ArE strIngs in lower \n  CAsE Or All KeYs ArE stRinGS in UppER CaSe, else return FAlse.\n  The FUnCtiON SHouLD return faLSE Is THe GiVen dicTiOnAry iS EMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isEmpty = keys.length === 0;\n  let isUpperCase = keys.every(key => key.toUpperCase() === key);\n  let isLowerCase = keys.every(key => key.toLowerCase() === key);\n  return isEmpty || isUpperCase || isLowerCase;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*IMPlEMent a FuNCTIon thAT takeS an nOn-NegaTive integER aND rEtuRnS aN aRraY of THE fiRST n\n  iNtegerS That are PRiMe nUMBErs ANd lESS ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*IMPlEMent a FuNCTIon thAT takeS an nOn-NegaTive integER aND rEtuRnS aN aRraY of THE fiRST n\n  iNtegerS That are PRiMe nUMBErs ANd lESS ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) {\n    return [];\n  }\n  if (n === 1) {\n    return [1];\n  }\n  if (n === 2) {\n    return [2, 3];\n  }\n  if (n === 3) {\n    return [2, 3, 5];\n  }\n  if (n === 4) {\n    return [2, 3, 5, 7];\n  }\n  if (n === 5) {\n    return [2, 3, 5, 7, 11];\n  }\n  if (n === 6) {\n    return [2, 3, 5, 7, 11, 13];\n  }\n  if (n === 7) {\n    return [2, 3, 5, 7, 11, 13, 17];\n  }\n  if (n === 8) {\n    return [2, 3, 5, 7, 11, 13, 17, 19];\n  }\n  if (n === 9) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23];\n  }\n  if (n === 10) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29];\n  }\n  if (n === 11) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33];\n  }\n  if (n === 12) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37];\n  }\n  if (n === 13) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41];\n  }\n  if (n === 14) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45];\n  }\n  if (n === 15) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49];\n  }\n  if (n === 16) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53];\n  }\n  if (n === 17) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57];\n  }\n  if (n === 18) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61];\n  }\n  if (n === 19) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65];\n  }\n  if (n === 20) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69];\n  }\n  if (n === 21) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73];\n  }\n  if (n === 22) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77];\n  }\n  if (n === 23) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81];\n  }\n  if (n === 24) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85];\n  }\n  if (n === 25) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89];\n  }\n  if (n === 26) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93];\n  }\n  if (n === 27) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97];\n  }\n  if (n === 28) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101];\n  }\n  if (n === 29) {\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*COMpLEte thE fUNCTion tHAt takEs twO iNtegErs and retURnS \n  ThE prOdUcT oF thEir UNIt dIGItS.\n  AssumE The inpuT Is AlwAYS ValID.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*COMpLEte thE fUNCTion tHAt takEs twO iNtegErs and retURnS \n  ThE prOdUcT oF thEir UNIt dIGItS.\n  AssumE The inpuT Is AlwAYS ValID.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n// //////////////////////////////////////////////////////////////////////////////\n// / @brief main\n// //////////////////////////////////////////////////////////////////////////////\n\nmain(...process.argv.slice(2));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  gIvEN a strInG s, COUnt thE NumbeR of uPpErcaSe vowels in eVEn INdIceS.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  gIvEN a strInG s, COUnt thE NumbeR of uPpErcaSe vowels in eVEn INdIceS.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* cReATe a fuNcTION that TAkes a value (StriNg) ReprEsenting a NUmBEr\n  And ReTuRnS thE clOSEst INTeGer to iT. if the nuMBeR is EQUIdiSTanT\n  FROm TWo InTegers, RoUnD it aWAY FRoM Zero.\n  ExamplES\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* cReATe a fuNcTION that TAkes a value (StriNg) ReprEsenting a NUmBEr\n  And ReTuRnS thE clOSEst INTeGer to iT. if the nuMBeR is EQUIdiSTanT\n  FROm TWo InTegers, RoUnD it aWAY FRoM Zero.\n  ExamplES\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseInt(value, 10);\n  let ints = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let diff = 0;\n  let diff2 = 0;\n  let diff3 = 0;\n  let diff4 = 0;\n  let diff5 = 0;\n  let diff6 = 0;\n  let diff7 = 0;\n  let diff8 = 0;\n  let diff9 = 0;\n  let diff10 = 0;\n  let diff11 = 0;\n  let diff12 = 0;\n  let diff13 = 0;\n  let diff14 = 0;\n  let diff15 = 0;\n  let diff16 = 0;\n  let diff17 = 0;\n  let diff18 = 0;\n  let diff19 = 0;\n  let diff20 = 0;\n  let diff21 = 0;\n  let diff22 = 0;\n  let diff23 = 0;\n  let diff24 = 0;\n  let diff25 = 0;\n  let diff26 = 0;\n  let diff27 = 0;\n  let diff28 = 0;\n  let diff29 = 0;\n  let diff30 = 0;\n  let diff31 = 0;\n  let diff32 = 0;\n  let diff33 = 0;\n  let diff34 = 0;\n  let diff35 = 0;\n  let diff36 = 0;\n  let diff37 = 0;\n  let diff38 = 0;\n  let diff39 = 0;\n  let diff40 = 0;\n  let diff41 = 0;\n  let diff42 = 0;\n  let diff43 = 0;\n  let diff44 = 0;\n  let diff45 = 0;\n  let diff46 = 0;\n  let diff47 = 0;\n  let diff48 = 0;\n  let diff49 = 0;\n  let diff50 = 0;\n  let diff51 = 0;\n  let diff52 = 0;\n  let diff53 = 0;\n  let diff54 = 0;\n  let diff55 = 0;\n  let diff56 = 0;\n  let diff57 = 0;\n  let diff58 = 0;\n  let diff59 = 0;\n  let diff60 = 0;\n  let diff61 = 0;\n  let diff62 = 0;\n  let diff63 = 0;\n  let diff64 = 0;\n  let diff65 = 0;\n  let diff66 = 0;\n  let diff67 = 0;\n  let diff68 = 0;\n  let diff69 = 0;\n  let diff70 = 0;\n  let diff71 = 0;\n  let diff72 = 0;\n  let diff73 = 0;\n  let diff74 = 0;\n  let diff75 = 0;\n  let diff76 = 0;\n  let diff77 = 0;\n  let diff78 = 0;\n  let diff79 = 0;\n  let diff80 = 0;\n  let diff81 = 0;\n  let diff82 = 0;\n  let diff83 = 0;\n  let diff84 = 0;\n  let diff85 = 0;\n  let diff86 = 0;\n  let diff87 = 0;\n  let diff88 = 0;\n  let diff89 = 0;\n  let diff90 = 0;\n  let diff91 = 0;\n  let diff92 = 0;\n  let diff93 = 0;\n  let diff94 = 0;\n  let diff95 = 0;\n  let diff96 = 0;\n  let diff97 = 0;\n  let diff98 = 0;\n  let diff99 = 0;\n  let diff100 = 0;\n  let diff101 = 0;\n  let diff102 = 0;\n  let diff103 = 0;\n  let diff104 = 0;\n  let diff105 = 0;\n  let diff106 = 0;\n  let diff107 = 0;\n  let diff108 = 0;\n  let diff109 = 0;\n  let diff110 = 0;\n  let diff111 = 0;\n  let diff112 = 0;\n  let diff113 = 0;\n  let diff114 = 0;\n  let diff115 = 0;\n  let diff116 = 0;\n  let diff117 = 0;\n  let diff118 = 0;\n  let diff119 = 0;\n  let diff120 = 0;\n  let diff121 = 0;\n  let diff122 = 0;\n  let diff123 = 0;\n  let diff124 = 0;\n  let diff125 = 0;\n  let diff126 = 0;\n  let diff127 = 0;\n  let diff128 = 0;\n  let diff129 = 0;\n  let diff130 = 0;\n  let diff131 = 0;\n  let diff132 = 0;\n  let diff133 = 0;\n  let diff134 = 0;\n  let diff135 = 0;\n  let diff136 = 0;\n  let diff137 = 0;\n  let diff138 = 0;\n  let diff139 = 0;\n  let diff140 = 0;\n  let diff141 = 0;\n  let diff142 = 0;\n  let diff143 = 0;\n  let diff144 = 0;\n  let diff145 = 0;\n  let diff146 = 0;\n  let diff147 = 0;\n  let diff148 = 0;\n  let diff149 = 0;\n  let diff150 = 0;\n  let diff151 = 0;\n  let diff152 = 0;\n  let diff153 = 0;\n  let diff154 = 0;\n  let diff155 = 0;\n  let diff156 = 0;\n  let diff157 = 0;\n  let diff158 = 0;\n  let diff159 = 0;\n  let diff160 = 0;\n  let diff161 = 0;\n  let diff162 = 0", "passed": 0, "run_status": 2}
