{"task_id": "JavaScript/0", "prompt": "/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const closeElements = numbers.filter(number => {\n    const distance = Math.abs(number - threshold);\n    return distance < threshold;\n  });\n  return closeElements.length > 0;\n};\n\nmodule.exports = hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* inpUt to tHIs fuNctIon IS a stRiNG coNTAiNIng mUltIPle grouPs of neSTed Parentheses. yOur goAl is to\n  SeparAte Those grouP inTo seParatE STrings And return THE list oF ThOSE.\n  SEParAtE grOUps Are BALaNced (Each Open BrACe iS pRopeRLy ClosEd) and nOT neSTeD wIthIN EacH OtheR\n  IgnoRe ANy SpaceS in The inPuT STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "/* inpUt to tHIs fuNctIon IS a stRiNG coNTAiNIng mUltIPle grouPs of neSTed Parentheses. yOur goAl is to\n  SeparAte Those grouP inTo seParatE STrings And return THE list oF ThOSE.\n  SEParAtE grOUps Are BALaNced (Each Open BrACe iS pRopeRLy ClosEd) and nOT neSTeD wIthIN EacH OtheR\n  IgnoRe ANy SpaceS in The inPuT STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split(/\\s+/);\n  const paren_groups = [];\n  for (let i = 0; i < paren_list.length; i++) {\n    if (paren_list[i].match(/^\\(/)) {\n      paren_groups.push(paren_list[i]);\n    } else if (paren_list[i].match(/^\\)/)) {\n      paren_groups.push(paren_list[i]);\n    } else {\n      paren_groups.push(paren_list[i]);\n    }\n  }\n  return paren_groups;\n};\n\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #############################################################################\n// #################################", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* tesT if gnIVen sTriG is A PaliNdROme */\nCONsT isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find The SHortest PalindROme That begins wITh a suPplied string.\n  algorIthM idea is siMplE:\n  - FinD the lONGest poStfIX Of SUpPLIeD string ThaT iS a pALinDroME.\n  - apPend To thE end Of THe string rEvErse OF a string PrefIx that COmeS BeFoRe tHE PalINdroMic suFfIX.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/* tesT if gnIVen sTriG is A PaliNdROme */\nCONsT isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find The SHortest PalindROme That begins wITh a suPplied string.\n  algorIthM idea is siMplE:\n  - FinD the lONGest poStfIX Of SUpPLIeD string ThaT iS a pALinDroME.\n  - apPend To thE end Of THe string rEvErse OF a string PrefIx that COmeS BeFoRe tHE PalINdroMic suFfIX.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  let result = '';\n  while (i < j) {\n    if (isPalindrome(string.substring(i, j + 1))) {\n      result += string.substring(i, j + 1);\n      i += 1;\n    } else {\n      j -= 1;\n    }\n  }\n  return result;\n}\n\n/* tesT if gnIVen sTriG is A PaliNdROme */\nCONsT isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find The SHortest PalindROme That begins wITh a suPplied string.\n  algorIthM idea is siMplE:\n  - FinD the lONGest poStfIX Of SUpPLIeD string ThaT iS a pALinDroME.\n  - apPend To thE end Of THe string rEvErse OF a string PrefIx that COmeS BeFoRe tHE PalINdroMic suFfIX.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  let result = '';\n  while (i < j) {\n    if (isPalindrome(string.substring(i, j + 1))) {\n      result += string.substring(i, j + 1);\n      i += 1;\n    } else {\n      j -= 1;\n    }\n  }\n  return result;\n}\n\n/* tesT if gnIVen sTriG is A PaliNdROme */\nCONsT isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find The SHortest PalindROme That begins wITh a suPplied string.\n  algorIthM idea is siMplE:\n  - FinD the lONGest poStfIX Of SUpPLIeD string ThaT iS a pALinDroME.\n  - apPend To thE end Of THe string rEvErse OF a string PrefIx that COmeS BeFoRe tHE PalINdroMic suFfIX.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  let result = '';\n  while (i < j) {\n    if (isPalindrome(string.substring(i, j + 1))) {\n      result += string.substring(i, j + 1);\n      i += 1;\n    } else {\n      j -= 1;\n    }\n  }\n  return result;\n}\n\n/* tesT if gnIVen sTriG is A PaliNdROme */\nCONsT isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find The SHortest PalindROme That begins wITh a suPplied string.\n  algorIthM idea is siMplE:\n  - FinD the lONGest poStfIX Of SUpPLIeD string ThaT iS a pALinDroME.\n  - apPend To thE end Of THe string rEvErse OF a string PrefIx that COmeS BeFoRe tHE PalINdroMic suFfIX.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  let result = '';\n  while (i < j) {\n    if (isPalindrome(string.substring(i, j + 1))) {\n      result += string.substring(i, j + 1);\n      i += 1;\n    } else {\n      j -= 1;\n    }\n  }\n  return result;\n}\n\n/* tesT if gnIVen sTriG is A PaliNdROme */\nCONsT isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find The SHortest PalindROme That begins wITh a suPplied string.\n  algorIthM idea is siMplE:\n  - FinD the lONGest poStfIX Of SUpPLIeD string ThaT iS a pALinDroME.\n  - apPend To thE end Of THe string rEvErse OF a string PrefIx that COmeS BeFoRe tHE PalINdroMic suFfIX.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [...Array(n).keys()];\n  let pileIndex = 0;\n  let pileSize = pile.length;\n  let pileIndexNext = pileIndex + 1;\n  let pileSizeNext = pileSize + 1;\n  let pileIndexEven = pileIndex;\n  let pileSizeEven = pileSize;\n  let pileIndexOdd = pileIndex;\n  let pileSizeOdd = pileSize;\n  while (pileIndex < pileSize) {\n    if (pileIndexEven % 2 === 0) {\n      pileIndexEven = pileIndexEven + 1;\n      pileSizeEven = pileSizeEven + 1;\n    } else {\n      pileIndexOdd = pileIndexOdd + 1;\n      pileSizeOdd = pileSizeOdd + 1;\n    }\n    pileIndex = pileIndexNext;\n    pileSize = pileSizeNext;\n    pileIndexNext = pileIndex + 1;\n    pileSizeNext = pileSize + 1;\n  }\n  return pile;\n};\n\nconst makeAPile2 = (n) => {\n  let pile = [...Array(n).keys()];\n  let pileIndex = 0;\n  let pileSize = pile.length;\n  let pileIndexNext = pileIndex + 1;\n  let pileSizeNext = pileSize + 1;\n  while (pileIndex < pileSize) {\n    pileIndex = pileIndexNext;\n    pileSize = pileSizeNext;\n    pileIndexNext = pileIndex + 1;\n    pileSizeNext = pileSize + 1;\n  }\n  return pile;\n};\n\nconst makeAPile3 = (n) => {\n  let pile = [...Array(n).keys()];\n  let pileIndex = 0;\n  let pileSize = pile.length;\n  let pileIndexNext = pileIndex + 1;\n  let pileSizeNext = pileSize + 1;\n  while (pileIndex < pileSize) {\n    pileIndex = pileIndexNext;\n    pileSize = pileSizeNext;\n    pileIndexNext = pileIndex + 1;\n    pileSizeNext = pileSize + 1;\n  }\n  return pile;\n};\n\nconst makeAPile4 = (n) => {\n  let pile = [...Array(n).keys()];\n  let pileIndex = 0;\n  let pileSize = pile.length;\n  let pileIndexNext = pileIndex + 1;\n  let pileSizeNext = pileSize + 1;\n  while (pileIndex < pileSize) {\n    pileIndex = pileIndexNext;\n    pileSize = pileSizeNext;\n    pileIndexNext = pileIndex + 1;\n    pileSizeNext = pileSize + 1;\n  }\n  return pile;\n};\n\nconst makeAPile5 = (n) => {\n  let pile = [...Array(n).keys()];\n  let pileIndex = 0;\n  let pileSize = pile.length;\n  let pileIndexNext = pileIndex + 1;\n  let pileSizeNext = pileSize + 1;\n  while (pileIndex < pileSize) {\n    pileIndex = pileIndexNext;\n    pileSize = pileSizeNext;\n    pileIndexNext = pileIndex + 1;\n    pileSizeNext = pileSize + 1;\n  }\n  return pile;\n};\n\nconst makeAPile6 = (n) => {\n  let pile = [...Array(n).keys()];\n  let pileIndex = 0;\n  let pileSize = pile.length;\n  let pileIndexNext = pileIndex + 1;\n  let pileSizeNext = pileSize + 1;\n  while (pileIndex < pileSize) {\n    pileIndex = pileIndexNext;\n    pileSize = pileSizeNext;\n    pileIndexNext = pileIndex + 1;\n    pileSizeNext = pileSize + 1;\n  }\n  return pile;\n};\n\nconst makeAPile7 = (n) => {\n  let pile = [...Array(n).keys()];\n  let pileIndex = 0;\n  let pileSize = pile.length;\n  let pileIndexNext = pileIndex + 1;\n  let pileSizeNext = pileSize + 1;\n  while (pileIndex < pileSize) {\n    pileIndex = pileIndexNext;\n    pileSize = pileSizeNext;\n    pileIndexNext = pileIndex + 1;\n    pileSizeNext = pileSize + 1;\n  }\n  return pile;\n};\n\nconst makeAPile8 = (n) => {\n  let pile = [...Array(n).keys()];\n  let pileIndex = 0;\n  let pileSize = pile.length;\n  let pileIndexNext = pileIndex + 1;\n  let pileSizeNext = pileSize + 1;\n  while (pileIndex < pileSize) {\n    pileIndex = pileIndexNext;\n    pileSize = pileSizeNext;\n    pileIndexNext = pileIndex + 1;\n    pileSizeNext = pileSize + 1;\n  }\n  return pile;\n};\n\nconst makeAPile9 = (n) => {\n  let pile = [...Array(n).keys()];\n  let pileIndex = 0;\n  let pileSize = pile.length;\n  let pileIndexNext = pileIndex + 1;\n  let pileSizeNext = pileSize + 1;\n  while (pileIndex < pileSize) {\n    pileIndex = pileIndexNext;\n    pileSize = pileSizeNext;\n    pileIndexNext = pileIndex + 1;\n    pileSizeNext = pileSize + 1;\n  }\n  return pile;\n};\n\nconst makeAPile10", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString2 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString3 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString4 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString5 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString6 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString7 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString8 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString9 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString10 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString11 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString12 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString13 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString14 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString15 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString16 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString17 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString18 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString19 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString20 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString21 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString22 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString23 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString24 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString25 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString26 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString27 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString28 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString29 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString30 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString31 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString32 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString33 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString34 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString35 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst wordsString36 = (s) => {\n  const words = s.split(/[,;.!?:;]/);\n  return words;\n}\n\nconst words", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "/*THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  const range = y - x + 1\n  const num = Math.floor(Math.random() * range) + x\n  return num\n}\n\nmodule.exports = {\n  chooseNum\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*YOu aRe givEN two PosItiVE intEgERs n aND m, AnD Your TasK Is to comPute thE\n  AveRage of the inTEgers From n thRough m (IncLuding n and m). \n  rouNd thE answER To the nEarEST iNTeGER aND coNvErt THat To bINArY.\n  If n iS greAter ThAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "/*YOu aRe givEN two PosItiVE intEgERs n aND m, AnD Your TasK Is to comPute thE\n  AveRage of the inTEgers From n thRough m (IncLuding n and m). \n  rouNd thE answER To the nEarEST iNTeGER aND coNvErt THat To bINArY.\n  If n iS greAter ThAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let result = 0\n  let i = 0\n  let j = 0\n  while (i < n) {\n    result += Math.floor(n / Math.pow(10, j))\n    j++\n    i++\n  }\n  return result\n}\n\nconst test = () => {\n  console.log(roundedAvg(1, 5))\n  console.log(roundedAvg(7, 5))\n  console.log(roundedAvg(10, 20))\n  console.log(roundedAvg(20, 33))\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*GIveN a list of pOSitiVe iNteGErs x. return a SoRTed list OF AlL \n  ElemEntS That hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "/*GIveN a list of pOSitiVe iNteGErs x. return a SoRTed list OF AlL \n  ElemEntS That hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  let digits = [];\n  let i = 0;\n  while (i < x.length) {\n    if (x[i] === 0) {\n      digits.push(x[i]);\n    } else {\n      let j = 0;\n      while (j < digits.length) {\n        if (digits[j] === x[i]) {\n          break;\n        }\n        j++;\n      }\n      if (j === digits.length) {\n        digits.push(x[i]);\n      }\n    }\n    i++;\n  }\n  result = digits;\n  return result;\n};\n\nconst printDigits = (x) => {\n  let digits = uniqueDigits(x);\n  let result = \"\";\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + \" \";\n  }\n  console.log(result);\n};\n\nprintDigits(15);\nprintDigits(33);\nprintDigits(1422);\nprintDigits(10);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  givEn an aRRay oF inTegERs, soRt THe iNTEgERs thAt aRE betweeN 1 and 9 inCLusIve,\n  reverse tHE resuLting aRray, aNd tHen replacE eaCh diGit by ITS correSpoNDInG NaME FrOM\n  \"OnE\", \"TWo\", \"THRee\", \"fouR\", \"fIvE\", \"Six\", \"seveN\", \"EigHt\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "/*\n  givEn an aRRay oF inTegERs, soRt THe iNTEgERs thAt aRE betweeN 1 and 9 inCLusIve,\n  reverse tHE resuLting aRray, aNd tHen replacE eaCh diGit by ITS correSpoNDInG NaME FrOM\n  \"OnE\", \"TWo\", \"THRee\", \"fouR\", \"fIvE\", \"Six\", \"seveN\", \"EigHt\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n\n  const arrLength = arr.length;\n  const arrReverse = arr.slice().reverse();\n  const arrLengthReverse = arrReverse.length;\n\n  if (arrLength === arrLengthReverse) {\n    return arrReverse;\n  }\n\n  const arrLengthMinusOne = arrLength - 1;\n  const arrLengthMinusOneReverse = arrLengthMinusOne.reverse();\n  const arrLengthMinusOneReverseLength = arrLengthMinusOneReverse.length;\n\n  if (arrLengthMinusOneLength === arrLengthMinusOneReverseLength) {\n    return arrLengthMinusOneReverse;\n  }\n\n  const arrLengthMinusOneMinusOne = arrLengthMinusOne - 1;\n  const arrLengthMinusOneMinusOneReverse = arrLengthMinusOneMinusOne.reverse();\n  const arrLengthMinusOneMinusOneReverseLength = arrLengthMinusOneMinusOneReverse.length;\n\n  if (arrLengthMinusOneMinusOneLength === arrLengthMinusOneMinusOneReverseLength) {\n    return arrLengthMinusOneMinusOneReverse;\n  }\n\n  const arrLengthMinusOneMinusOneMinusOne = arrLengthMinusOneMinusOne - 1;\n  const arrLengthMinusOneMinusOneMinusOneReverse = arrLengthMinusOneMinusOneMinusOne.reverse();\n  const arrLengthMinusOneMinusOneMinusOneReverseLength = arrLengthMinusOneMinusOneMinusOneReverse.length;\n\n  if (arrLengthMinusOneMinusOneMinusOneLength === arrLengthMinusOneMinusOneMinusOneReverseLength) {\n    return arrLengthMinusOneMinusOneMinusOneReverse;\n  }\n\n  const arrLengthMinusOneMinusOneMinusOneMinusOne = arrLengthMinusOneMinusOneMinusOne - 1;\n  const arrLengthMinusOneMinusOneMinusOneMinusOneReverse = arrLengthMinusOneMinusOneMinusOneMinusOne.reverse();\n  const arrLengthMinusOneMinusOneMinusOneMinusOneReverseLength = arrLengthMinusOneMinusOneMinusOneMinusOneReverse.length;\n\n  if (arrLengthMinusOneMinusOneMinusOneMinusOneLength === arrLengthMinusOneMinusOneMinusOneMinusOneReverseLength) {\n    return arrLengthMinusOneMinusOneMinusOneMinusOneReverse;\n  }\n\n  return arr;\n};\n\nmodule.exports = byLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/106", "prompt": "/* impLemenT The fUncTioN f That TaKEs n aS A PaRAmetEr,\n  aND returnS a list of siZE n, suCh that the vaLUe of tHe elemEnt at IndEx i is the faCtoRial Of i if i iS EVen\n  or tHe sUM Of NUmBERs FRom 1 To i OthERwiSe.\n  i sTARtS froM 1.\n  the FactOrIAl oF i iS the MUlTiplIcatioN Of tHE nUmBerS FRom 1 TO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "/* impLemenT The fUncTioN f That TaKEs n aS A PaRAmetEr,\n  aND returnS a list of siZE n, suCh that the vaLUe of tHe elemEnt at IndEx i is the faCtoRial Of i if i iS EVen\n  or tHe sUM Of NUmBERs FRom 1 To i OthERwiSe.\n  i sTARtS froM 1.\n  the FactOrIAl oF i iS the MUlTiplIcatioN Of tHE nUmBerS FRom 1 TO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  if (n === 0) {\n    return [];\n  }\n  const fUncTioN = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const fUncTioN_i = (n) => {\n      if (n === 1) {\n        return [1];\n      }\n      const fUncTioN_i_i = (n) => {\n        if (n === 1) {\n          return [1];\n        }\n        const fUncTioN_i_i_i = (n) => {\n          if (n === 1) {\n            return [1];\n          }\n          const fUncTioN_i_i_i_i = (n) => {\n            if (n === 1) {\n              return [1];\n            }\n            const fUncTioN_i_i_i_i_i = (n) => {\n              if (n === 1) {\n                return [1];\n              }\n              const fUncTioN_i_i_i_i_i_i = (n) => {\n                if (n === 1) {\n                  return [1];\n                }\n                const fUncTioN_i_i_i_i_i_i_i = (n) => {\n                  if (n === 1) {\n                    return [1];\n                  }\n                  const fUncTioN_i_i_i_i_i_i_i_i = (n) => {\n                    if (n === 1) {\n                      return [1];\n                    }\n                    const fUncTioN_i_i_i_i_i_i_i_i_i = (n) => {\n                      if (n === 1) {\n                        return [1];\n                      }\n                      const fUncTioN_i_i_i_i_i_i_i_i_i_i = (n) => {\n                        if (n === 1) {\n                          return [1];\n                        }\n                        const fUncTioN_i_i_i_i_i_i_i_i_i_i_i = (n) => {\n                          if (n === 1) {\n                            return [1];\n                          }\n                          const fUncTioN_i_i_i_i_i_i_i_i_i_i_i_i = (n) => {\n                            if (n === 1) {\n                              return [1];\n                            }\n                            const fUncTioN_i_i_i_i_i_i_i_i_i_i_i_i_i = (n) => {\n                              if (n === 1) {\n                                return [1];\n                              }\n                              const fUncTioN_i_i_i_i_i_i_i_i_i_i_i_i_i_i = (n) => {\n                                if (n === 1) {\n                                  return [1];\n                                }\n                                const fUncTioN_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i = (n) => {\n                                  if (n === 1) {\n                                    return [1];\n                                  }\n                                  const fUncTioN_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i = (n) => {\n                                    if (n === 1) {\n                                      return [1];\n                                    }\n                                    const fUncTioN_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i = (n) => {\n                                      if (n === 1) {\n                                        return [1];\n                                      }\n                                      const fUncTioN_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = () => {\n    const evens = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evens.push(i);\n      }\n    }\n    return evens;\n  };\n  const odd = () => {\n    const odds = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2!== 0) {\n        odds.push(i);\n      }\n    }\n    return odds;\n  };\n  return { even, odd };\n};\n\nmodule.exports = evenOddPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  wriTe a fuNCtioN countNums whIch TAkes An ARraY OF iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a sum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "/*\n  wriTe a fuNCtioN countNums whIch TAkes An ARraY OF iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a sum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums12 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums13 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums14 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums15 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums16 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums17 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums18 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums19 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums20 = (arr) => {\n  let sum = 0;\n  for (let i =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*WE haVe an aRRay 'arr' oF N iNteGErs arr[1], arr[2], ..., arr[N].The\n  nUmBErs in THE aRRay wIll BE randomLy ordeREd. YOur task is to DEtermIne if\n  iT is poSsiBle to get aN arRay sOrted in NON-decreAsiNG OrDEr BY PeRForMiNg \n  tHE foLloWINg OperAtioN on tHe GIveN aRray:\n      yOu Are aLlowed TO peRFoRm RigHT ShiFT opeRatioN aNY nUmber OF timeS.\n  \n  ONE RighT shifT OPeratIon MeANs SHifTINg All elEMeNtS Of The ARray BY one\n  poSiTION in the rigHT DirECtioN. tHE lASt ElemEnt Of The aRRay WiLl BE moved tO\n  tHe sTArting poSITion in ThE ARray i.e. 0tH Index. \n\n  If It iS possIbLE to ObtAin the sorteD ARraY by PeRfOrmiNg tHe above operATIon\n  TheN return TRuE ElSe return faLSe.\n  if The given arrAY iS empty TheN return truE.\n\n  NoTe: The giVEN list is guaranteED to hAve unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "/*WE haVe an aRRay 'arr' oF N iNteGErs arr[1], arr[2],..., arr[N].The\n  nUmBErs in THE aRRay wIll BE randomLy ordeREd. YOur task is to DEtermIne if\n  iT is poSsiBle to get aN arRay sOrted in NON-decreAsiNG OrDEr BY PeRForMiNg \n  tHE foLloWINg OperAtioN on tHe GIveN aRray:\n      yOu Are aLlowed TO peRFoRm RigHT ShiFT opeRatioN aNY nUmber OF timeS.\n  \n  ONE RighT shifT OPeratIon MeANs SHifTINg All elEMeNtS Of The ARray BY one\n  poSiTION in the rigHT DirECtioN. tHE lASt ElemEnt Of The aRRay WiLl BE moved tO\n  tHe sTArting poSITion in ThE ARray i.e. 0tH Index. \n\n  If It iS possIbLE to ObtAin the sorteD ARraY by PeRfOrmiNg tHe above operATIon\n  TheN return TRuE ElSe return faLSe.\n  if The given arrAY iS empty TheN return truE.\n\n  NoTe: The giVEN list is guaranteED to hAve unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let arrLen = arr.length;\n  let arrIndex = 0;\n  let arrTemp = arr.slice();\n  let arrTempLen = arrTemp.length;\n  let arrTempIndex = 0;\n  let arrTempTemp = arrTemp.slice();\n  let arrTempTempLen = arrTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = arrTempTemp.slice();\n  let arrTempTempTempLen = arrTempTempTemp.length;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempTemp = arrTempTempTemp.slice();\n  let arrTempTempTempTempLen = arrTempTempTempTemp.length;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempTemp = arrTempTempTempTemp.slice();\n  let arrTempTempTempTempTempLen = arrTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempIndex = 0;\n  let arrTempTempTempTempTempTemp = arrTempTempTempTempTemp.slice();\n  let arrTempTempTempTempTempTempLen = arrTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempIndex = 0;\n  let arrTempTempTempTempTempTempTemp = arrTempTempTempTempTempTemp.slice();\n  let arrTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempIndex = 0;\n  let arrTempTempTempTempTempTempTempTemp = arrTempTempTempTempTempTempTemp.slice();\n  let arrTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempIndex = 0;\n  let arrTempTempTempTempTempTempTempTempTemp = arrTempTempTempTempTempTempTempTemp.slice();\n  let arrTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempIndex = 0;\n  let arrTempTempTempTempTempTempTempTempTempTemp = arrTempTempTempTempTempTempTempTempTemp.slice();\n  let arrTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempIndex = 0;\n  let arrTempTempTempTempTempTempTempTempTempTempTemp = arrTempTempTempTempTempTempTempTempTempTemp.slice();\n  let arrTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempIndex = 0;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTemp = arrTempTempTempTempTempTempTempTempTempTempTemp.slice();\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempIndex = 0;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrTempTempTempTempTempTempTempTempTempTempTempTemp.slice();\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempIndex = 0;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.slice();\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "/* inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/*\n  inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*IN thIs proBLem, yOu wIll IMpleMeNT a fUNCtIOn thAt tAKes two lIsts of NUmbErs,\n  and deterMInes wHether It is pOssIble to perForM an exchange oF elemENTs\n  betwEen THEm TO mAKE lst1 a list OF onLy EveN NumBerS.\n  tHeRe is No liMit oN tHE nuMbEr of EXcHangEd elemENts BEtWeEn lst1 aND lst2.\n  if iT Is poSsiblE tO exchange ElEmentS BetweEn THE lst1 and lst2 To makE\n  ALl the EleMeNTs OF lst1 to BE EvEn, return \"YES\".\n  oThErWIsE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "/*IN thIs proBLem, yOu wIll IMpleMeNT a fUNCtIOn thAt tAKes two lIsts of NUmbErs,\n  and deterMInes wHether It is pOssIble to perForM an exchange oF elemENTs\n  betwEen THEm TO mAKE lst1 a list OF onLy EveN NumBerS.\n  tHeRe is No liMit oN tHE nuMbEr of EXcHangEd elemENts BEtWeEn lst1 aND lst2.\n  if iT Is poSsiblE tO exchange ElEmentS BetweEn THE lst1 and lst2 To makE\n  ALl the EleMeNTs OF lst1 to BE EvEn, return \"YES\".\n  oThErWIsE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  if (lst1Len!== lst2Len) {\n    return \"NO\";\n  }\n  const lst1Index = 0;\n  const lst2Index = 0;\n  while (lst1Index < lst1Len && lst2Index < lst2Len) {\n    if (lst1[lst1Index] === lst2[lst2Index]) {\n      lst1Index++;\n      lst2Index++;\n    } else {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n};\n\nconst test = () => {\n  console.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n  console.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\n  console.log(exchange([1, 2, 3, 4], [1, 2, 3, 5]));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*GIveN a striNG repResEntINg a spAcE SepARAtED lowErcASe letteRs, return a dictIOnaRy\n  of the lettER with The mosT repeTitIon and conTaiNing The coRREspondIng COUnT.\n  if SEVeRAl lEtTerS HavE thE SAmE occUrreNce, return aLl OF thEm.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "/*GIveN a striNG repResEntINg a spAcE SepARAtED lowErcASe letteRs, return a dictIOnaRy\n  of the lettER with The mosT repeTitIon and conTaiNing The coRREspondIng COUnT.\n  if SEVeRAl lEtTerS HavE thE SAmE occUrreNce, return aLl OF thEm.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let res = {};\n  let count = 0;\n  let i = 0;\n  let len = test.length;\n  while (i < len) {\n    if (test[i]!== '') {\n      res[test[i]] = res[test[i]] || 0;\n      res[test[i]]++;\n      count++;\n    }\n    i++;\n  }\n  return res;\n};\n\nmodule.exports = histogram;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*TAsk\n  we are GIven Two StrINgs s aNd c, YOu hAVE tO DeleTed ALl the chAracteRS in s thAt are equal tO Any chAracteR in c\n  then CheCk if the reSulT strIng is PALindroMe.\n  A STRiNG iS CAlLEd pAlIndROme If iT REaDs thE samE bacKwARd aS fOrwaRD.\n  YOu shOuld return a tuple cONtaINiNg The RESulT StriNg and TrUE/fAlse fOR the cHeCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "/*TAsk\n  we are GIven Two StrINgs s aNd c, YOu hAVE tO DeleTed ALl the chAracteRS in s thAt are equal tO Any chAracteR in c\n  then CheCk if the reSulT strIng is PALindroMe.\n  A STRiNG iS CAlLEd pAlIndROme If iT REaDs thE samE bacKwARd aS fOrwaRD.\n  YOu shOuld return a tuple cONtaINiNg The RESulT StriNg and TrUE/fAlse fOR the cHeCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  if (s.length === 0 || c.length === 0) {\n    return [s, false];\n  }\n  const result = reverseDelete(s.slice(1), c.slice(1));\n  if (result[0].length === 0) {\n    return [s.slice(0, -1), true];\n  }\n  return [result[0] + s[0], result[1]];\n};\n\nconst reverseDelete2 = (s, c) => {\n  if (s.length === 0 || c.length === 0) {\n    return [s, false];\n  }\n  const result = reverseDelete2(s.slice(1), c.slice(1));\n  if (result[0].length === 0) {\n    return [s.slice(0, -1), true];\n  }\n  return [result[0] + s[0], result[1]];\n};\n\nconst reverseDelete3 = (s, c) => {\n  if (s.length === 0 || c.length === 0) {\n    return [s, false];\n  }\n  const result = reverseDelete3(s.slice(1), c.slice(1));\n  if (result[0].length === 0) {\n    return [s.slice(0, -1), true];\n  }\n  return [result[0] + s[0], result[1]];\n};\n\nconst reverseDelete4 = (s, c) => {\n  if (s.length === 0 || c.length === 0) {\n    return [s, false];\n  }\n  const result = reverseDelete4(s.slice(1), c.slice(1));\n  if (result[0].length === 0) {\n    return [s.slice(0, -1), true];\n  }\n  return [result[0] + s[0], result[1]];\n};\n\nconst reverseDelete5 = (s, c) => {\n  if (s.length === 0 || c.length === 0) {\n    return [s, false];\n  }\n  const result = reverseDelete5(s.slice(1), c.slice(1));\n  if (result[0].length === 0) {\n    return [s.slice(0, -1), true];\n  }\n  return [result[0] + s[0], result[1]];\n};\n\nconst reverseDelete6 = (s, c) => {\n  if (s.length === 0 || c.length === 0) {\n    return [s, false];\n  }\n  const result = reverseDelete6(s.slice(1), c.slice(1));\n  if (result[0].length === 0) {\n    return [s.slice(0, -1), true];\n  }\n  return [result[0] + s[0], result[1]];\n};\n\nconst reverseDelete7 = (s, c) => {\n  if (s.length === 0 || c.length === 0) {\n    return [s, false];\n  }\n  const result = reverseDelete7(s.slice(1), c.slice(1));\n  if (result[0].length === 0) {\n    return [s.slice(0, -1), true];\n  }\n  return [result[0] + s[0], result[1]];\n};\n\nconst reverseDelete8 = (s, c) => {\n  if (s.length === 0 || c.length === 0) {\n    return [s, false];\n  }\n  const result = reverseDelete8(s.slice(1), c.slice(1));\n  if (result[0].length === 0) {\n    return [s.slice(0, -1), true];\n  }\n  return [result[0] + s[0], result[1]];\n};\n\nconst reverseDelete9 = (s, c) => {\n  if (s.length === 0 || c.length === 0) {\n    return [s, false];\n  }\n  const result = reverseDelete9(s.slice(1), c.slice(1));\n  if (result[0].length === 0) {\n    return [s.slice(0, -1), true];\n  }\n  return [result[0] + s[0], result[1]];\n};\n\nconst reverseDelete10 = (s, c) => {\n  if (s.length === 0 || c.length === 0) {\n    return [s, false];\n  }\n  const result = reverseDelete10(s.slice(1), c.slice(1));\n  if (result[0].length === 0) {\n    return [s.slice(0, -1), true];\n  }\n  return [result[0] + s[0], result[1]];\n};\n\nconst reverseDelete11 = (s, c) => {\n  if (s.length === 0 || c.length === 0) {\n    return [s, false];\n  }\n  const result = reverseDelete11(s.slice(1), c.slice(1));\n  if (result[0].length === 0) {\n    return [s.slice(0, -1), true];\n  }\n  return [result[0] + s[0], result[1]];\n};\n\nconst reverseDelete12 = (s, c) => {\n  if (s.length === 0 || c.length === 0) {\n    return [s, false];\n  }\n  const result = reverseDelete12(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let count = 0;\n  let i = 0;\n  while (i < lst.length) {\n    if (isOdd(lst[i])) {\n      count++;\n    }\n    i++;\n  }\n  res.push(`the number of odd elements ${count}n the str${count}ng ${count}\n  of the ${count}nput.`);\n  return res;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = 0;\n  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      sum = 0;\n    }\n    if (sum === 0) {\n      minSum = 0;\n      minSumIndex = i;\n    } else if (sum < minSum) {\n      minSum = sum;\n      minSumIndex = i;\n    }\n  }\n  return minSumIndex;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  you Are giVEn a rEctAngULar grid oF wELls. eACh ROw rePreSEnts a siNgle weLL,\n  anD each 1 in a row rePResenTs a sinGle unIt oF water.\n  EacH weLl haS a corRESpondiNg bUCKeT ThAT CaN Be uSeD to EXtrAct WATeR froM it, \n  aNd alL bUCkeTs Have THe Same capacity.\n  your taSK is TO uSe The BUCkeTS to eMpty tHe WElLs.\n  OutPUt the NuMBEr of Times YOU need To lOwER tHE buCKEtS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "/*\n  you Are giVEn a rEctAngULar grid oF wELls. eACh ROw rePreSEnts a siNgle weLL,\n  anD each 1 in a row rePResenTs a sinGle unIt oF water.\n  EacH weLl haS a corRESpondiNg bUCKeT ThAT CaN Be uSeD to EXtrAct WATeR froM it, \n  aNd alL bUCkeTs Have THe Same capacity.\n  your taSK is TO uSe The BUCkeTS to eMpty tHe WElLs.\n  OutPUt the NuMBEr of Times YOU need To lOwER tHE buCKEtS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const bucket_capacity = capacity;\n\n  const bucket_size = Math.pow(bucket_capacity, rows);\n  const bucket_size_cols = Math.pow(bucket_capacity, cols);\n\n  const bucket_size_rows = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows = Math.pow(bucket_capacity, cols - 1);\n\n  const bucket_size_rows_cols = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows_rows = Math.pow(bucket_capacity, cols - 1);\n\n  const bucket_size_rows_cols_rows = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows_rows = Math.pow(bucket_capacity, cols - 1);\n\n  const bucket_size_rows_cols_rows_rows = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows_rows_rows = Math.pow(bucket_capacity, cols - 1);\n\n  const bucket_size_rows_cols_rows_rows_rows = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows_rows_rows_rows = Math.pow(bucket_capacity, cols - 1);\n\n  const bucket_size_rows_cols_rows_rows_rows = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows_rows_rows_rows = Math.pow(bucket_capacity, cols - 1);\n\n  const bucket_size_rows_cols_rows_rows_rows = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows_rows_rows_rows = Math.pow(bucket_capacity, cols - 1);\n\n  const bucket_size_rows_cols_rows_rows_rows = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows_rows_rows_rows = Math.pow(bucket_capacity, cols - 1);\n\n  const bucket_size_rows_cols_rows_rows_rows = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows_rows_rows_rows = Math.pow(bucket_capacity, cols - 1);\n\n  const bucket_size_rows_cols_rows_rows_rows = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows_rows_rows_rows = Math.pow(bucket_capacity, cols - 1);\n\n  const bucket_size_rows_cols_rows_rows_rows = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows_rows_rows_rows = Math.pow(bucket_capacity, cols - 1);\n\n  const bucket_size_rows_cols_rows_rows_rows = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows_rows_rows_rows = Math.pow(bucket_capacity, cols - 1);\n\n  const bucket_size_rows_cols_rows_rows_rows = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows_rows_rows_rows = Math.pow(bucket_capacity, cols - 1);\n\n  const bucket_size_rows_cols_rows_rows_rows = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows_rows_rows_rows = Math.pow(bucket_capacity, cols - 1);\n\n  const bucket_size_rows_cols_rows_rows_rows = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows_rows_rows_rows = Math.pow(bucket_capacity, cols - 1);\n\n  const bucket_size_rows_cols_rows_rows_rows = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows_rows_rows_rows = Math.pow(bucket_capacity, cols - 1);\n\n  const bucket_size_rows_cols_rows_rows_rows = Math.pow(bucket_capacity, rows - 1);\n  const bucket_size_cols_rows_rows_rows", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  in tHis KaTA, you HavE to SOrt aN aRRay OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRy repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  in tHis KaTA, you HavE to SOrt aN aRRay OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRy repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let temp;\n  while (i < j) {\n    while (i < j && arr[i] < 0) {\n      i++;\n    }\n    while (i < j && arr[j] > 0) {\n      j--;\n    }\n    if (i < j) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n  }\n  return arr;\n};\n\nconst sortArray2 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let temp;\n  while (i < j) {\n    while (i < j && arr[i] < 0) {\n      i++;\n    }\n    while (i < j && arr[j] > 0) {\n      j--;\n    }\n    if (i < j) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n  }\n  return arr;\n};\n\nconst sortArray3 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let temp;\n  while (i < j) {\n    while (i < j && arr[i] < 0) {\n      i++;\n    }\n    while (i < j && arr[j] > 0) {\n      j--;\n    }\n    if (i < j) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n  }\n  return arr;\n};\n\nconst sortArray4 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let temp;\n  while (i < j) {\n    while (i < j && arr[i] < 0) {\n      i++;\n    }\n    while (i < j && arr[j] > 0) {\n      j--;\n    }\n    if (i < j) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n  }\n  return arr;\n};\n\nconst sortArray5 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let temp;\n  while (i < j) {\n    while (i < j && arr[i] < 0) {\n      i++;\n    }\n    while (i < j && arr[j] > 0) {\n      j--;\n    }\n    if (i < j) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n  }\n  return arr;\n};\n\nconst sortArray6 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let temp;\n  while (i < j) {\n    while (i < j && arr[i] < 0) {\n      i++;\n    }\n    while (i < j && arr[j] > 0) {\n      j--;\n    }\n    if (i < j) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n  }\n  return arr;\n};\n\nconst sortArray7 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let temp;\n  while (i < j) {\n    while (i < j && arr[i] < 0) {\n      i++;\n    }\n    while (i < j && arr[j] > 0) {\n      j--;\n    }\n    if (i < j) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n  }\n  return arr;\n};\n\nconst sortArray8 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let temp;\n  while (i < j) {\n    while (i < j && arr[i] < 0) {\n      i++;\n    }\n    while (i < j && arr[j] > 0) {\n      j--;\n    }\n    if (i < j) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n  }\n  return arr;\n};\n\nconst sortArray9 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let temp;\n  while (i < j) {\n    while (i < j && arr[i] < 0) {\n      i++;\n    }\n    while (i < j && arr[j] > 0) {\n      j--;\n    }\n    if (i < j) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n  }\n  return arr;\n};\n\nconst sortArray10 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let temp;\n  while (i < j) {\n    while (i < j && arr[i] < 0) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*GIveN a strINg s anD a nAtuRAl nuMbER n, yoU HAvE Been TasKEd to impLement \n  A FunCtion that reTUrns a list Of all wOrds fRom String s thaT coNtaiN exacTLY \n  n consoNanTS, in OrDEr THEsE WorDs AppEAr in tHe sTRInG s.\n  If tHe stRing s Is EMptY tHen tHE fUnctIon shoULd return aN EmPtY list.\n  NoTE: You MAy asSume tHe INpUt strINg conTaINS onlY lettERS and sPacEs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "/*GIveN a strINg s anD a nAtuRAl nuMbER n, yoU HAvE Been TasKEd to impLement \n  A FunCtion that reTUrns a list Of all wOrds fRom String s thaT coNtaiN exacTLY \n  n consoNanTS, in OrDEr THEsE WorDs AppEAr in tHe sTRInG s.\n  If tHe stRing s Is EMptY tHen tHE fUnctIon shoULd return aN EmPtY list.\n  NoTE: You MAy asSume tHe INpUt strINg conTaINS onlY lettERS and sPacEs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*YOu aRe givEN a word. YoUr tAsk IS to fInD The CLOsESt voWel THat stanDs betwEEn \n  tWo consonantS From tHe righT side Of tHe word (case senSitIve).\n  \n  VOwels in THE beginNinG ANd ENdING dOEsn'T cOunT. retUrn EMPtY strIng iF you DiDN't\n  fInD any VOwEl meT the abOVe cONdItIon. \n\n  yOU maY AssuMe thaT tHE gIven sTRing cOnTAIns ENglisH LEtter OnlY.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "/*YOu aRe givEN a word. YoUr tAsk IS to fInD The CLOsESt voWel THat stanDs betwEEn \n  tWo consonantS From tHe righT side Of tHe word (case senSitIve).\n  \n  VOwels in THE beginNinG ANd ENdING dOEsn'T cOunT. retUrn EMPtY strIng iF you DiDN't\n  fInD any VOwEl meT the abOVe cONdItIon. \n\n  yOU maY AssuMe thaT tHE gIven sTRing cOnTAIns ENglisH LEtter OnlY.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelIndex = 0;\n  let vowel = \"\";\n  let vowelDistance = 0;\n  let wordLength = word.length;\n  let vowelIndexInWord = 0;\n  let vowelIndexInWord2 = 0;\n  let vowelIndexInWord3 = 0;\n  let vowelIndexInWord4 = 0;\n  let vowelIndexInWord5 = 0;\n  let vowelIndexInWord6 = 0;\n  let vowelIndexInWord7 = 0;\n  let vowelIndexInWord8 = 0;\n  let vowelIndexInWord9 = 0;\n  let vowelIndexInWord10 = 0;\n  let vowelIndexInWord11 = 0;\n  let vowelIndexInWord12 = 0;\n  let vowelIndexInWord13 = 0;\n  let vowelIndexInWord14 = 0;\n  let vowelIndexInWord15 = 0;\n  let vowelIndexInWord16 = 0;\n  let vowelIndexInWord17 = 0;\n  let vowelIndexInWord18 = 0;\n  let vowelIndexInWord19 = 0;\n  let vowelIndexInWord20 = 0;\n  let vowelIndexInWord21 = 0;\n  let vowelIndexInWord22 = 0;\n  let vowelIndexInWord23 = 0;\n  let vowelIndexInWord24 = 0;\n  let vowelIndexInWord25 = 0;\n  let vowelIndexInWord26 = 0;\n  let vowelIndexInWord27 = 0;\n  let vowelIndexInWord28 = 0;\n  let vowelIndexInWord29 = 0;\n  let vowelIndexInWord30 = 0;\n  let vowelIndexInWord31 = 0;\n  let vowelIndexInWord32 = 0;\n  let vowelIndexInWord33 = 0;\n  let vowelIndexInWord34 = 0;\n  let vowelIndexInWord35 = 0;\n  let vowelIndexInWord36 = 0;\n  let vowelIndexInWord37 = 0;\n  let vowelIndexInWord38 = 0;\n  let vowelIndexInWord39 = 0;\n  let vowelIndexInWord40 = 0;\n  let vowelIndexInWord41 = 0;\n  let vowelIndexInWord42 = 0;\n  let vowelIndexInWord43 = 0;\n  let vowelIndexInWord44 = 0;\n  let vowelIndexInWord45 = 0;\n  let vowelIndexInWord46 = 0;\n  let vowelIndexInWord47 = 0;\n  let vowelIndexInWord48 = 0;\n  let vowelIndexInWord49 = 0;\n  let vowelIndexInWord50 = 0;\n  let vowelIndexInWord51 = 0;\n  let vowelIndexInWord52 = 0;\n  let vowelIndexInWord53 = 0;\n  let vowelIndexInWord54 = 0;\n  let vowelIndexInWord55 = 0;\n  let vowelIndexInWord56 = 0;\n  let vowelIndexInWord57 = 0;\n  let vowelIndexInWord58 = 0;\n  let vowelIndexInWord59 = 0;\n  let vowelIndexInWord60 = 0;\n  let vowelIndexInWord61 = 0;\n  let vowelIndexInWord62 = 0;\n  let vowelIndexInWord63 = 0;\n  let vowelIndexInWord64 = 0;\n  let vowelIndexInWord65 = 0;\n  let vowelIndexInWord66 = 0;\n  let vowelIndexInWord67 = 0;\n  let vowelIndexInWord68 = 0;\n  let vowelIndexInWord69 = 0;\n  let vowelIndexInWord70 = 0;\n  let vowelIndexInWord71 = 0;\n  let vowelIndexInWord72 = 0;\n  let vowelIndexInWord73 = 0;\n  let vowelIndexInWord74 = 0;\n  let vowelIndexInWord75 = 0;\n  let vowelIndexInWord76 = 0;\n  let vowelIndexInWord77 = 0;\n  let vowelIndexInWord78 = 0;\n  let vowelIndexInWord79 = 0;\n  let vowelIndexInWord80 = 0;\n  let vowelIndexInWord81 = 0;\n  let vowelIndexInWord82 = 0;\n  let vowelIndexInWord83 = 0;\n  let vowelIndexInWord84 = 0;\n  let vowelIndexInWord85 = 0;\n  let vowelIndexInWord86 = 0;\n  let vowelIndexInWord87 = 0;\n  let vowelIndexInWord88 = 0;\n  let vowelIndexInWord89 = 0;\n  let vowelIndexInWord90 = 0;\n  let vowelIndexInWord91 = 0;\n  let vowelIndexInWord92 = 0;\n  let vowelIndexInWord93 = 0;\n  let vowelIndexInWord94 = 0;\n  let vowelIndexInWord95 = 0;\n  let vowelIndexInWord96 = 0;\n  let vowelIndexInWord97 = 0;\n  let vowelIndexInWord98 = 0;\n  let vowelIndexInWord99 = 0;\n  let vowelIndexInWord100 = 0;\n  let vowelIndexInWord101 = 0;\n  let vowelIndexInWord102 = 0;\n  let vowelIndexInWord103 = 0;\n  let vowelIndexInWord104 = 0;\n  let vowelIndexInWord105 = 0;\n  let vowelIndexInWord106 = 0;\n  let vowelIndexInWord107 = 0;\n  let vowelIndexInWord108 = 0;\n  let vowelIndexInWord109 = 0;\n  let vowelIndexInWord110 = 0;\n  let vowelIndexInWord111 = 0;\n  let vowelIndexInWord112 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* you Are giVEn a list oF twO stRIngs, BoTH stRINgS ConsIst OF open\n  paRentheSEs '(' oR close parenTHeses ')' Only.\n  YoUr job Is tO check if iT is PossIble tO COncateNatE THe TWo STRiNGs in\n  sOmE orDEr, tHat THE rEsulTing StriNg WIll Be Good.\n  a StRing s is conSIdeREd To Be gOOD if ANd onLy if aLl PArEntheSEs in S\n  arE bALAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "/* you Are giVEn a list oF twO stRIngs, BoTH stRINgS ConsIst OF open\n  paRentheSEs '(' oR close parenTHeses ')' Only.\n  YoUr job Is tO check if iT is PossIble tO COncateNatE THe TWo STRiNGs in\n  sOmE orDEr, tHat THE rEsulTing StriNg WIll Be Good.\n  a StRing s is conSIdeREd To Be gOOD if ANd onLy if aLl PArEntheSEs in S\n  arE bALAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== '(' && lst[i]!== ')') {\n      res = false;\n      break;\n    }\n  }\n  return res;\n};\n\nmodule.exports = matchParens;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* out Of list of strings, return tHE longest one. retUrn THe fiRsT One in CASe OF mulTipLE\n  strings of the sAme lenGTh. REturn null in caSE the iNput list is Empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "/* out Of list of strings, return tHE longest one. retUrn THe fiRsT One in CASe OF mulTipLE\n  strings of the sAme lenGTh. REturn null in caSE the iNput list is Empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  const longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nexport default longest;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  givEn an aRRay arr oF inTegERs anD a POsiTIVe INtegEr k, return a SOrted list \n  of Length k WIth The maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "/*\n  givEn an aRRay arr oF inTegERs anD a POsiTIVe INtegEr k, return a SOrted list \n  of Length k WIth The maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (k === 0) {\n    return arr;\n  }\n\n  const sorted = arr.sort((a, b) => a - b);\n  const max = sorted[k - 1];\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    if (sorted[i] === max) {\n      result.push(sorted[i]);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nmodule.exports = maximum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nmodule.exports = solution;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nmodule.exports = addElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  givEn a poSItivE inTegER n, return a soRtED list thAT HaS The oDd nUMbers in coLlatz sEQueNce.\n\n  The CollaTZ conjEcture Is a coNjeCture in mathEmaTics That cONCerns a SeqUENcE DeFINeD\n  As fOlLowS: StaRt wITH aNy poSitiVe inTeGEr n. THeN eacH TeRm is ObtainED frOM tHe \n  PreVIOus TErm aS follOwS: If The prEVious TeRM Is evEn, the NEXt terM is OnE HaLF of \n  THE pRevioUS tErM. if The PReviOUs term Is ODD, The next TERm iS 3 TimeS THE pREvIous\n  TerM pLus 1. THE coNjEcTUre is thAt No mATter what VALue oF n, tHE SequeNCe will aLwaYs reaCh 1.\n\n  nOte: \n      1. colLatz(1) is [1].\n      2. returNED list soRteD in iNcReasIng Order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a poSItivE inTegER n, return a soRtED list thAT HaS The oDd nUMbers in coLlatz sEQueNce.\n\n  The CollaTZ conjEcture Is a coNjeCture in mathEmaTics That cONCerns a SeqUENcE DeFINeD\n  As fOlLowS: StaRt wITH aNy poSitiVe inTeGEr n. THeN eacH TeRm is ObtainED frOM tHe \n  PreVIOus TErm aS follOwS: If The prEVious TeRM Is evEn, the NEXt terM is OnE HaLF of \n  THE pRevioUS tErM. if The PReviOUs term Is ODD, The next TERm iS 3 TimeS THE pREvIous\n  TerM pLus 1. THE coNjEcTUre is thAt No mATter what VALue oF n, tHE SequeNCe will aLwaYs reaCh 1.\n\n  nOte: \n      1. colLatz(1) is [1].\n      2. returNED list soRteD in iNcReasIng Order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1];\n  let odd = true;\n  while (odd) {\n    odd = false;\n    for (let i = 0; i < collatz.length; i++) {\n      if (collatz[i] % 2 === 1) {\n        odd = true;\n        collatz.push(collatz[i] + 1);\n      }\n    }\n  }\n  return collatz;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/124", "prompt": "/*YOu hAve to WRite A fuNctIOn whIcH ValIDAtES a giVen date STring anD\n  returNS trUe if the date is vaLId othErwise False.\n  the date Is valid if All Of thE follOWIng rulEs aRE SaTIsFIEd:\n  1. tHe date sTrIng IS noT emPTY.\n  2. THe nuMber Of daYs IS noT lEss tHAn 1 Or hiGher thAN 31 daYS fOr MonTHS 1,3,5,7,8,10,12. AnD The nUmber Of DAyS is noT Less tHaN 1 OR higHer thAN 30 Days fOr mOnTHs 4,6,9,11. aNd, tHE NuMber oF DaYs IS nOt lESs thAN 1 or higHeR THAn 29 for thE MOntH 2.\n  3. the mONTHs SHoUld nOt bE lEss tHAn 1 oR hIgHEr than 12.\n  4. THe date ShoULd be in the fORMat: mM-dD-YYyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "/*YOu hAve to WRite A fuNctIOn whIcH ValIDAtES a giVen date STring anD\n  returNS trUe if the date is vaLId othErwise False.\n  the date Is valid if All Of thE follOWIng rulEs aRE SaTIsFIEd:\n  1. tHe date sTrIng IS noT emPTY.\n  2. THe nuMber Of daYs IS noT lEss tHAn 1 Or hiGher thAN 31 daYS fOr MonTHS 1,3,5,7,8,10,12. AnD The nUmber Of DAyS is noT Less tHaN 1 OR higHer thAN 30 Days fOr mOnTHs 4,6,9,11. aNd, tHE NuMber oF DaYs IS nOt lESs thAN 1 or higHeR THAn 29 for thE MOntH 2.\n  3. the mONTHs SHoUld nOt bE lEss tHAn 1 oR hIgHEr than 12.\n  4. THe date ShoULd be in the fORMat: mM-dD-YYyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  let day = dateArray[0];\n  let month = dateArray[1];\n  let year = dateArray[2];\n\n  if (day.length!== 2) {\n    return false;\n  }\n\n  if (month.length!== 2) {\n    return false;\n  }\n\n  if (year.length!== 4) {\n    return false;\n  }\n\n  let dayOfMonth = parseInt(day, 10);\n  let monthOfYear = parseInt(month, 10);\n  let yearOfDate = parseInt(year, 10);\n\n  if (dayOfMonth < 1 || dayOfMonth > 31) {\n    return false;\n  }\n\n  if (monthOfYear < 1 || monthOfYear > 12) {\n    return false;\n  }\n\n  if (yearOfDate < 1900 || yearOfDate > 2100) {\n    return false;\n  }\n\n  let dayOfMonthOfYear = dayOfMonth + (monthOfYear - 1) * 31;\n  let dayOfMonthOfYearPlusOne = dayOfMonthOfYear + 1;\n  let dayOfMonthOfYearPlusTwo = dayOfMonthOfYearPlusOne + 2;\n\n  if (dayOfMonthOfYearPlusTwo > 29) {\n    return false;\n  }\n\n  let dayOfMonthOfYearPlusThree = dayOfMonthOfYearPlusTwo + 1;\n  let dayOfMonthOfYearPlusFour = dayOfMonthOfYearPlusThree + 1;\n  let dayOfMonthOfYearPlusFive = dayOfMonthOfYearPlusFour + 1;\n\n  if (dayOfMonthOfYearPlusFive > 30) {\n    return false;\n  }\n\n  let dayOfMonthOfYearPlusSix = dayOfMonthOfYearPlusFive + 1;\n  let dayOfMonthOfYearPlusSeven = dayOfMonthOfYearPlusSix + 1;\n  let dayOfMonthOfYearPlusEight = dayOfMonthOfYearPlusSeven + 1;\n\n  if (dayOfMonthOfYearPlusEight > 31) {\n    return false;\n  }\n\n  let dayOfMonthOfYearPlusNine = dayOfMonthOfYearPlusEight + 1;\n  let dayOfMonthOfYearPlusTen = dayOfMonthOfYearPlusNine + 1;\n  let dayOfMonthOfYearPlusEleven = dayOfMonthOfYearPlusTen + 1;\n\n  if (dayOfMonthOfYearPlusEleven > 30) {\n    return false;\n  }\n\n  let dayOfMonthOfYearPlusTwelve = dayOfMonthOfYearPlusEleven + 1;\n  let dayOfMonthOfYearPlusThirteen = dayOfMonthOfYearPlusTwelve + 1;\n  let dayOfMonthOfYearPlusFourteen = dayOfMonthOfYearPlusThirteen + 1;\n\n  if (dayOfMonthOfYearPlusFourteen > 31) {\n    return false;\n  }\n\n  let dayOfMonthOfYearPlusFifteen = dayOfMonthOfYearPlusFourteen + 1;\n  let dayOfMonthOfYearPlusSixteen = dayOfMonthOfYearPlusFifteen + 1;\n  let dayOfMonthOfYearPlusSeventeen = dayOfMonthOfYearPlusSixteen + 1;\n\n  if (dayOfMonthOfYearPlusSeventeen > 30) {\n    return false;\n  }\n\n  let dayOfMonthOfYearPlusEighteen = dayOfMonthOfYearPlusSeventeen + 1;\n  let dayOfMonthOfYearPlusNineteen = dayOfMonthOfYearPlusEighteen + 1;\n  let dayOfMonthOfYearPlusTwenty = dayOfMonthOfYearPlusNineteen + 1;\n\n  if (dayOfMonthOfYearPlusTwenty > 31) {\n    return false;\n  }\n\n  let dayOfMonthOfYearPlusTwentyOne = dayOfMonthOfYearPlusTwenty + 1;\n  let dayOfMonthOfYearPlusTwentyTwo = dayOfMonthOfYearPlusTwentyOne + 1;\n  let dayOfMonthOfYearPlusTwentyThree = dayOfMonthOfYearPlusTwentyTwo + 1;\n\n  if (dayOfMonthOfYearPlusTwentyThree > 30) {\n    return false;\n  }\n\n  let dayOfMonthOfYearPlusTwentyFour = dayOfMonthOfYearPlusTwentyThree + 1;\n  let dayOfMonthOfYearPlusTwentyFive = dayOfMonthOfYearPlusTwentyFour + 1;\n  let dayOfMonthOfYearPlusTwentySix = dayOfMonthOfYearPlusTwentyFive + 1;\n\n  if (dayOfMonthOfYearPlusTwentySix > 31) {\n    return false;\n  }\n\n  let dayOfMonthOfYearPlusTwentySeven = dayOfMonthOfYearPlusTwentySix + 1;\n  let dayOfMonthOfYearPlusTwentyEight = dayOfMonthOfYearPlusTwentySeven + 1;\n  let dayOfMonthOfYearPlusTwentyNine = dayOfMonthOfYearPlusTwentyEight + 1;\n\n  if (dayOfMonthOfYearPlusTwentyNine > 30) {\n    return false;\n  }\n\n  let dayOfMonthOfYearPlusTwentyTen = dayOfMonthOfYearPlusTwentyNine + 1;\n  let dayOfMonthOfYearPlusTwentyEleven = dayOfMonthOfYearPlusTwentyTen + 1;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* givEn a stRIng oF woRds, return A list Of woRdS SplIT On WHiteSpaCE, if no whItespaCEs eXists in the texT You\n  shOuld spLit on ComMas ',' if no coMmaS exiSts yoU SHould return tHe nUMBeR Of LOWeR-CasE lEttERs wIth ODD oRder in The\n  aLphaBeT, Ord('A') = 0, oRd('b') = 1, ... oRD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "/* givEn a stRIng oF woRds, return A list Of woRdS SplIT On WHiteSpaCE, if no whItespaCEs eXists in the texT You\n  shOuld spLit on ComMas ',' if no coMmaS exiSts yoU SHould return tHe nUMBeR Of LOWeR-CasE lEttERs wIth ODD oRder in The\n  aLphaBeT, Ord('A') = 0, oRd('b') = 1,... oRD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  while (i < len) {\n    let c = txt.charAt(i);\n    if (c === \" \") {\n      if (word!== \"\") {\n        words.push(word);\n        word = \"\";\n      }\n    } else {\n      word += c;\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  return words;\n};\n\nmodule.exports = splitWords;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* givEn a list of NUmbeRs, return wHetHEr or NoT TheY ARe SOrteD\n  in asCEnding oRder. If list HAs mOre than 1 duplICate oF the saMe\n  numBer, return False. AssuMe nO negAtive NUMbers aNd oNLY iNTeGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "/* givEn a list of NUmbeRs, return wHetHEr or NoT TheY ARe SOrteD\n  in asCEnding oRder. If list HAs mOre than 1 duplICate oF the saMe\n  numBer, return False. AssuMe nO negAtive NUMbers aNd oNLY iNTeGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length < 2) {\n    return true;\n  }\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  isSorted,\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*YOu aRe givEN two IntErvALs,\n  whErE EacH INtERval Is a PAir of inTegers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "/*YOu aRe givEN two IntErvALs,\n  whErE EacH INtERval Is a PAir of inTegers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start <= interval2.start && interval2.end <= interval1.end) {\n    return \"YES\"\n  }\n  if (interval1.start <= interval2.start && interval1.end <= interval2.end) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n\n  const sign = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]!== sign) {\n      return null;\n    }\n  }\n  return sign;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  givEn a grid wiTH N roWs aNd N COlumNs (n >= 2) And A POsITive IntEGer k, \n  each Cell of THe grid cOntains a valUE. EverY integEr in the RanGe [1, N * N]\n  incluSivE appEars eXACtly onCe oN THe CElLS Of THe grid.\n\n  YOu HavE To fInd THE mInimUm paTh of LeNGth k in ThE grid. You CAn StarT\n  from aNY ceLL, aNd in EacH STep YOu caN move To ANy Of the NEighbOr CELls,\n  in oTher wORDs, you Can Go TO cELls WHIcH sharE An EdGE wIth YOu cuRRent\n  ceLl.\n  pLEAse note THAt a PAth oF LENgTH k mEans VisItIng eXActLy k CeLLs (not\n  neCeSsaRIly distiNCT).\n  You cAnnoT go oFF the grid.\n  A paTh A (Of lenGtH k) Is cOnsIdered less tHAN a pAth b (oF lEngtH k) if\n  After making THE orDerED LiSTs Of thE VaLuEs on the cellS ThAt A and b go\n  ThroUgh (Let's calL THem lst_A and lST_B), lsT_A is lexicographically leSS\n  thaN lst_b, in other Words, thERe EXist an InteGeR iNdeX i (1 <= i <= k)\n  Such ThaT lst_a[i] < Lst_B[i] aNd FOr anY j (1 <= j < i) we HAve\n  LST_A[j] = LSt_B[j].\n  IT iS gUaraNTeed ThAt thE anSwer is uNiQUe.\n  reTurn AN oRDEREd list of the valUEs oN the CelLs that thE mInimUM path Go tHrouGh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a grid wiTH N roWs aNd N COlumNs (n >= 2) And A POsITive IntEGer k, \n  each Cell of THe grid cOntains a valUE. EverY integEr in the RanGe [1, N * N]\n  incluSivE appEars eXACtly onCe oN THe CElLS Of THe grid.\n\n  YOu HavE To fInd THE mInimUm paTh of LeNGth k in ThE grid. You CAn StarT\n  from aNY ceLL, aNd in EacH STep YOu caN move To ANy Of the NEighbOr CELls,\n  in oTher wORDs, you Can Go TO cELls WHIcH sharE An EdGE wIth YOu cuRRent\n  ceLl.\n  pLEAse note THAt a PAth oF LENgTH k mEans VisItIng eXActLy k CeLLs (not\n  neCeSsaRIly distiNCT).\n  You cAnnoT go oFF the grid.\n  A paTh A (Of lenGtH k) Is cOnsIdered less tHAN a pAth b (oF lEngtH k) if\n  After making THE orDerED LiSTs Of thE VaLuEs on the cellS ThAt A and b go\n  ThroUgh (Let's calL THem lst_A and lST_B), lsT_A is lexicographically leSS\n  thaN lst_b, in other Words, thERe EXist an InteGeR iNdeX i (1 <= i <= k)\n  Such ThaT lst_a[i] < Lst_B[i] aNd FOr anY j (1 <= j < i) we HAve\n  LST_A[j] = LSt_B[j].\n  IT iS gUaraNTeed ThAt thE anSwer is uNiQUe.\n  reTurn AN oRDEREd list of the valUEs oN the CelLs that thE mInimUM path Go tHrouGh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  if (grid.length < 2) return [];\n  const len = grid.length;\n  const visited = new Array(len);\n  for (let i = 0; i < len; i++) visited[i] = [];\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const curr = grid[i];\n    const currLen = curr.length;\n    for (let j = 0; j < currLen; j++) {\n      const currVal = curr[j];\n      if (visited[i][j]) continue;\n      if (currVal === k) {\n        result.push(curr);\n        continue;\n      }\n      visited[i][j] = true;\n      const next = findPath(grid, visited, curr, k, i, j);\n      if (next.length > 0) result.push(next);\n    }\n  }\n  return result;\n};\n\nconst findPath = (grid, visited, curr, k, i, j) => {\n  const next = [];\n  for (let ii = 0; ii < grid.length; ii++) {\n    if (ii === i) continue;\n    if (grid[ii][j] === k) {\n      next.push(grid[ii]);\n    }\n  }\n  return next;\n};\n\nmodule.exports = minPath;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* retUrn a grEAtesT coMmoN DiviSoR Of tWO InTEgerS a anD b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "/* retUrn a grEAtesT coMmoN DiviSoR Of tWO InTEgerS a anD b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === 0) {\n    return a;\n  }\n  if (b === 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === 2) {\n    return b;\n  }\n  if (b === 2) {\n    return a;\n  }\n  if (a % 2 === 0) {\n    return greatestCommonDivisor(a / 2, b);\n  }\n  if (b % 2 === 0) {\n    return greatestCommonDivisor(a, b / 2);\n  }\n  return greatestCommonDivisor(a, b);\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*EVerYone kNOws FIboNacCI seqUeNCe, iT WAs STudiEd dEEply by mAthemaTIciAns in \n  the last cOUple cEnturiEs. HowEveR, what peopLe dOn't kNow is tRIbonacCi sEQUeNCe.\n  tRIbONacCi SeqUEncE is DEFiNed bY the RecuRrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, If n Is evEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), iF n is oDd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "/*EVerYone kNOws FIboNacCI seqUeNCe, iT WAs STudiEd dEEply by mAthemaTIciAns in \n  the last cOUple cEnturiEs. HowEveR, what peopLe dOn't kNow is tRIbonacCi sEQUeNCe.\n  tRIbONacCi SeqUEncE is DEFiNed bY the RecuRrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, If n Is evEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), iF n is oDd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n < 1) {\n    return []\n  }\n  const [prev, curr] = [1, 1]\n  const result = []\n  for (let i = 2; i <= n; i++) {\n    result.push(curr)\n    const curr = prev + curr\n    prev = curr\n  }\n  return result\n}\n\nmodule.exports = tri\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*GIveN a posITive IntEgeR n, return The pRoDUct OF ThE Odd digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "/*GIveN a posITive IntEgeR n, return The pRoDUct OF ThE Odd digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits2 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits3 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits4 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits5 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits6 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits7 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits8 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits9 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits10 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits11 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits12 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits13 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits14 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits15 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits16 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits17 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math.floor(n / 10);\n    if (d % 2!== 0) {\n      return 0;\n    }\n  }\n  return d;\n};\n\nconst getDigits18 = (n) => {\n  let d = 0;\n  while (n > 0) {\n    d = n % 10;\n    n = Math", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  creAte a fUNctiOn tHat TAkes A string aS InpUT WhICh coNtaINs only sQuare bRAckEts.\n  The functIOn shoUld return truE if anD onLy if there Is a ValiD subsEQUence oF brACKeTS\n  wHERe AT leAsT onE BraCkeT in THe SubsEqueNce iS nESteD.\n  isNested('[[]]') ➞ tRue\n  isNested('[]]]]]]][[[[[]') ➞ fALsE\n  isNested('[][]') ➞ falSe\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ TruE\n  isNested('[[]][[') ➞ TrUe\n  */\nConST isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "/*\n  creAte a fUNctiOn tHat TAkes A string aS InpUT WhICh coNtaINs only sQuare bRAckEts.\n  The functIOn shoUld return truE if anD onLy if there Is a ValiD subsEQUence oF brACKeTS\n  wHERe AT leAsT onE BraCkeT in THe SubsEqueNce iS nESteD.\n  isNested('[[]]') ➞ tRue\n  isNested('[]]]]]]][[[[[]') ➞ fALsE\n  isNested('[][]') ➞ falSe\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ TruE\n  isNested('[[]][[') ➞ TrUe\n  */\nConST isNested = (string) => {\n  let stack = [];\n  let isNested = false;\n  let current = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares22 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares23 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is an alphaBEticaL charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is an alphaBEticaL charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter;\n};\n\n/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is an alphabetic charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsAlpha(\"apple pie\") ➞ false\n  checkIfLastCharIsAlpha(\"apple pi e\") ➞ true\n  checkIfLastCharIsAlpha(\"apple pi e \") ➞ false\n  checkIfLastCharIsAlpha(\"\") ➞ false\n  */\nconst checkIfLastCharIsAlpha = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlpha = /[a-zA-Z]/.test(lastChar);\n  return isAlpha;\n};\n\n/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is a digit charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsDigit = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isDigit = /[0-9]/.test(lastChar);\n  return isDigit;\n};\n\n/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is a special charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsSpecial(\"apple pie\") ➞ false\n  checkIfLastCharIsSpecial(\"apple pi e\") ➞ true\n  checkIfLastCharIsSpecial(\"apple pi e \") ➞ false\n  checkIfLastCharIsSpecial(\"\") ➞ false\n  */\nconst checkIfLastCharIsSpecial = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isSpecial = /[!@#$%^&*()_+=-]/.test(lastChar);\n  return isSpecial;\n};\n\n/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is a space charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsSpace(\"apple pie\") ➞ false\n  checkIfLastCharIsSpace(\"apple pi e\") ➞ true\n  checkIfLastCharIsSpace(\"apple pi e \") ➞ false\n  checkIfLastCharIsSpace(\"\") ➞ false\n  */\nconst checkIfLastCharIsSpace = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isSpace = /\\s/.test(lastChar);\n  return isSpace;\n};\n\n/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is a non-alpha-numeric charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsNonAlphaNumeric(\"apple pie\") ➞ false\n  checkIfLastCharIsNonAlphaNumeric(\"apple pi e\") ➞ true\n  checkIfLastCharIsNonAlphaNumeric(\"apple pi e \") ➞ false\n  checkIfLastCharIsNonAlphaNumeric(\"\") ➞ false\n  */\nconst checkIfLastCharIsNonAlphaNumeric = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isNonAlphaNumeric = /[^a-zA-Z0-9]/.test(lastChar);\n  return isNonAlphaNumeric;\n};\n\nmodule.exports = {\n  checkIfFirstCharIsAlpha,\n  checkIfFirstCharIsDigit,\n  checkIfFirstCharIsSpecial,\n  checkIfFirstCharIsALetter,\n  checkIfFirstCharIsAlphaNumeric,\n  checkIfFirstCharIsNonAlphaNumeric,\n  checkIfLastCharIsAlpha,\n  checkIfLastCharIsDigit,\n  checkIfLastCharIsAlphaNumeric,\n  checkIfLastCharIsNonAlphaNumeric,\n  checkIfLastCharIsALetter,\n  checkIfLastCharIsAlpha,\n  checkIfLastChar", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*CReaTe a fuNCtioN whIch REturNs THe lARGeST indEx oF An elemeNt whicH\n  Is nOt greater thAN or eqUal to tHe eleMenT immediatEly PrecEding IT. if\n  no suCh eLEMeNT eXIStS TheN return -1. THe gIVen ArrAY WiLl noT conTain\n  DuPLicAtE valUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "/*CReaTe a fuNCtioN whIch REturNs THe lARGeST indEx oF An elemeNt whicH\n  Is nOt greater thAN or eqUal to tHe eleMenT immediatEly PrecEding IT. if\n  no suCh eLEMeNT eXIStS TheN return -1. THe gIVen ArrAY WiLl noT conTain\n  DuPLicAtE valUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length < 2) {\n    return -1;\n  }\n  let arrLen = arr.length;\n  let arrTemp = arr.slice();\n  arrTemp.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  let arrLenTemp = arrTemp.length;\n  let arrLenTemp2 = arrLenTemp - 1;\n  let arrLenTemp3 = arrLenTemp2 - 1;\n  let arrLenTemp4 = arrLenTemp3 - 1;\n  let arrLenTemp5 = arrLenTemp4 - 1;\n  let arrLenTemp6 = arrLenTemp5 - 1;\n  let arrLenTemp7 = arrLenTemp6 - 1;\n  let arrLenTemp8 = arrLenTemp7 - 1;\n  let arrLenTemp9 = arrLenTemp8 - 1;\n  let arrLenTemp10 = arrLenTemp9 - 1;\n  let arrLenTemp11 = arrLenTemp10 - 1;\n  let arrLenTemp12 = arrLenTemp11 - 1;\n  let arrLenTemp13 = arrLenTemp12 - 1;\n  let arrLenTemp14 = arrLenTemp13 - 1;\n  let arrLenTemp15 = arrLenTemp14 - 1;\n  let arrLenTemp16 = arrLenTemp15 - 1;\n  let arrLenTemp17 = arrLenTemp16 - 1;\n  let arrLenTemp18 = arrLenTemp17 - 1;\n  let arrLenTemp19 = arrLenTemp18 - 1;\n  let arrLenTemp20 = arrLenTemp19 - 1;\n  let arrLenTemp21 = arrLenTemp20 - 1;\n  let arrLenTemp22 = arrLenTemp21 - 1;\n  let arrLenTemp23 = arrLenTemp22 - 1;\n  let arrLenTemp24 = arrLenTemp23 - 1;\n  let arrLenTemp25 = arrLenTemp24 - 1;\n  let arrLenTemp26 = arrLenTemp25 - 1;\n  let arrLenTemp27 = arrLenTemp26 - 1;\n  let arrLenTemp28 = arrLenTemp27 - 1;\n  let arrLenTemp29 = arrLenTemp28 - 1;\n  let arrLenTemp30 = arrLenTemp29 - 1;\n  let arrLenTemp31 = arrLenTemp30 - 1;\n  let arrLenTemp32 = arrLenTemp31 - 1;\n  let arrLenTemp33 = arrLenTemp32 - 1;\n  let arrLenTemp34 = arrLenTemp33 - 1;\n  let arrLenTemp35 = arrLenTemp34 - 1;\n  let arrLenTemp36 = arrLenTemp35 - 1;\n  let arrLenTemp37 = arrLenTemp36 - 1;\n  let arrLenTemp38 = arrLenTemp37 - 1;\n  let arrLenTemp39 = arrLenTemp38 - 1;\n  let arrLenTemp40 = arrLenTemp39 - 1;\n  let arrLenTemp41 = arrLenTemp40 - 1;\n  let arrLenTemp42 = arrLenTemp41 - 1;\n  let arrLenTemp43 = arrLenTemp42 - 1;\n  let arrLenTemp44 = arrLenTemp43 - 1;\n  let arrLenTemp45 = arrLenTemp44 - 1;\n  let arrLenTemp46 = arrLenTemp45 - 1;\n  let arrLenTemp47 = arrLenTemp46 - 1;\n  let arrLenTemp48 = arrLenTemp47 - 1;\n  let arrLenTemp49 = arrLenTemp48 - 1;\n  let arrLenTemp50 = arrLenTemp49 - 1;\n  let arrLenTemp51 = arrLenTemp50 - 1;\n  let arrLenTemp52 = arrLenTemp51 - 1;\n  let arrLenTemp53 = arrLenTemp52 - 1;\n  let arrLenTemp54 = arrLenTemp53 - 1;\n  let arrLenTemp55 = arrLenTemp54 - 1;\n  let arrLenTemp56 = arrLenTemp55 - 1;\n  let arrLenTemp57 = arrLenTemp56 - 1;\n  let arrLenTemp58 = arrLenTemp57 - 1;\n  let arrLenTemp59 = arrLenTemp58 - 1;\n  let arrLenTemp60 = arrLenTemp59 - 1;\n  let arrLenTemp61 = arrLenTemp60 - 1;\n  let arrLenTemp62 = arrLenTemp61 - 1;\n  let arrLenTemp63 = arrLenTemp62 - 1;\n  let arrLenTemp64 = arrLenTemp63 - 1;\n  let arrLenTemp65 = arrLenTemp64 - 1;\n  let arrLenTemp66 = arrLenTemp65 - 1;\n  let arrLenTemp67 = arrLenTemp66 - 1;\n  let arrLenTemp68 = arrLenTemp67 - 1;\n  let arrLenTemp69 = arrLenTemp68 - 1;\n  let arrLenTemp70 = arrLenTemp69 - 1;\n  let arrLenTemp71 = arrLenTemp70 - 1;\n  let arrLenTemp72 = arrLenTemp71 - 1;\n  let arrLenTemp73 = arrLenTemp72 - 1;\n  let arrLenTemp74 = arrLenTemp73 - 1;\n  let arrLenTemp75 = arrLenTemp74 - 1;\n  let arrLenTemp76 = arrLenTemp75 - 1;\n  let arrLenTemp77 = arrLenTemp76 - 1;\n  let arrLenTemp78 = arrLenTemp77 - 1;\n  let arrLenTemp79 = arrLenTemp78 - 1;\n  let arrLenTemp80 = arrLenTemp79 - 1;\n  let arrLenTemp81 = arrLenTemp80 - 1;\n  let arrLenTemp82 = arrLenTemp81 - 1;\n  let arrLenTemp83 = arrLenTemp82 - 1;\n  let arrLenTemp84 = arrLenTemp83 - 1;\n  let arrLenTemp85 = arrLenTemp84 - 1;\n  let arrLenTemp86", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* creAte a fuNCtioN thAt rETurnS a tuple (a, b), wHEre 'a' IS\n  ThE LargEst OF negatiVe inteGErs, And 'b' is the smaLLest\n  oF positIve inTegErs in a list.\n  If therE is No neGativE OR positIve INTeGErS, return THeM As nUlL.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "/* creAte a fuNCtioN thAt rETurnS a tuple (a, b), wHEre 'a' IS\n  ThE LargEst OF negatiVe inteGErs, And 'b' is the smaLLest\n  oF positIve inTegErs in a list.\n  If therE is No neGativE OR positIve INTeGErS, return THeM As nUlL.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const max = lst.reduce((a, b) => a > b? a : b, -Infinity);\n  const min = lst.reduce((a, b) => a < b? a : b, Infinity);\n  const result = lst.reduce((a, b) => {\n    if (a === null || a > b) {\n      return a;\n    }\n    if (b === null || b > a) {\n      return b;\n    }\n    return null;\n  }, null);\n  return result === null? null : [result, max, min];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  creAte a fuNCtioN thAt tAKes iNtEGerS, FLoATs, or StrINgs reprEsentiNG\n  reAl numbers, anD ReturNs the lArger VarIable in its gIveN varIable TYPe.\n  RetuRn nULL iF ThE VAlUEs aRe EquAL.\n  NoTe: IF a REaL numBer iS repReSEntEd As a stRInG, the FloatiNG poINt MiGht BE . Or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nULl\n  */\ncoNst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "/*\n  creAte a fuNCtioN thAt tAKes iNtEGerS, FLoATs, or StrINgs reprEsentiNG\n  reAl numbers, anD ReturNs the lArger VarIable in its gIveN varIable TYPe.\n  RetuRn nULL iF ThE VAlUEs aRe EquAL.\n  NoTe: IF a REaL numBer iS repReSEntEd As a stRInG, the FloatiNG poINt MiGht BE. Or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nULl\n  */\ncoNst compareOne = (a, b) => {\n  if (a === b) {\n    return 0;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return -1;\n};\n\n/*\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"6\"\n  compareTwo(\"1\", 1) ➞ nULl\n  */\ncoNst compareTwo = (a, b) => {\n  if (a === b) {\n    return 0;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return -1;\n};\n\n/*\n  compareThree(1, 2.5) ➞ 2.5\n  compareThree(1, \"2,3\") ➞ \"2,3\"\n  compareThree(\"5,1\", \"6\") ➞ \"6\"\n  compareThree(\"1\", 1) ➞ nULl\n  */\ncoNst compareThree = (a, b) => {\n  if (a === b) {\n    return 0;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return -1;\n};\n\n/*\n  compareFour(1, 2.5) ➞ 2.5\n  compareFour(1, \"2,3\") ➞ \"2,3\"\n  compareFour(\"5,1\", \"6\") ➞ \"6\"\n  compareFour(\"1\", 1) ➞ nULl\n  */\ncoNst compareFour = (a, b) => {\n  if (a === b) {\n    return 0;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return -1;\n};\n\n/*\n  compareFive(1, 2.5) ➞ 2.5\n  compareFive(1, \"2,3\") ➞ \"2,3\"\n  compareFive(\"5,1\", \"6\") ➞ \"6\"\n  compareFive(\"1\", 1) ➞ nULl\n  */\ncoNst compareFive = (a, b) => {\n  if (a === b) {\n    return 0;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return -1;\n};\n\n/*\n  compareSix(1, 2.5) ➞ 2.5\n  compareSix(1, \"2,3\") ➞ \"2,3\"\n  compareSix(\"5,1\", \"6\") ➞ \"6\"\n  compareSix(\"1\", 1) ➞ nULl\n  */\ncoNst compareSix = (a, b) => {\n  if (a === b) {\n    return 0;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return -1;\n};\n\n/*\n  compareSeven(1, 2.5) ➞ 2.5\n  compareSeven(1, \"2,3\") ➞ \"2,3\"\n  compareSeven(\"5,1\", \"6\") ➞ \"6\"\n  compareSeven(\"1\", 1) ➞ nULl\n  */\ncoNst compareSeven = (a, b) => {\n  if (a === b) {\n    return 0;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return -1;\n};\n\n/*\n  compareEight(1, 2.5) ➞ 2.5\n  compareEight(1, \"2,3\") ➞ \"2,3\"\n  compareEight(\"5,1\", \"6\") ➞ \"6\"\n  compareEight(\"1\", 1) ➞ nULl\n  */\ncoNst compareEight = (a, b) => {\n  if (a === b) {\n    return 0;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return -1;\n};\n\n/*\n  compareNine(1, 2.5) ➞ 2.5\n  compareNine(1, \"2,3\") ➞ \"2,3\"\n  compareNine(\"5,1\", \"6\") ➞ \"6\"\n  compareNine(\"1\", 1) ➞ nULl\n  */\ncoNst compareNine = (a, b) => {\n  if (a === b) {\n    return 0;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return -1;\n};\n\n/*\n  compareTen(1, 2.5) ➞ 2.5\n  compareTen(1, \"2,3\") ➞ \"2,3\"\n  compareTen(\"5,1\", \"6\") ➞ \"6\"\n  compareTen(\"1\", 1) ➞ nULl\n  */\ncoNst compareTen = (a, b) => {\n  if (a === b) {\n    return 0;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return -1;\n};\n\n/*\n  compareEleven(1, 2.5) ➞ 2.5\n  compareEleven(1, \"2,3\") ➞ \"2,3\"\n  compareEleven", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0;\n};\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven2 = (n) => {\n  return n % 2 === 0 && n % 4 === 0;\n};\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven3 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven4 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0;\n};\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven5 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0;\n};\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven6 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0;\n};\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven7 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0;\n};\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven8 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0;\n};\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven9 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0;\n};\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven10 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0 && n % 1024 === 0;\n};\n\n/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*THe BRazilIAn faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCTorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "/*THe BRazilIAn faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* retUrn list of ALl prEfiXes FRom sHoRTesT TO lONgesT of THe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "/* retUrn list of ALl prEfiXes FRom sHoRTesT TO lONgesT of THe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes2 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes3 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes4 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes5 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes6 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes7 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes8 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes9 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes10 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes11 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes12 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes13 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes14 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes15 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  if (text.length < 2) {\n    return text;\n  }\n  return text.replace(/\\s+/g, '-');\n};\n\nmodule.exports = {\n  fixSpaces\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*CReaTe a funCTion WhiCh tAKes a sTrINg rEPReSEntiNg a fILe's name, And retURns\n  'yes' if the the FIle's nAme is vAlid, aNd rEturns 'No' oTheRwisE.\n  A filE'S Name is ConSIDeREd TO Be VAliD iF anD OnlY if ALL tHe foLlowIng cOnDItiOnS \n  are MEt:\n  - therE shoulD Not BE mOrE thAN ThrEE digIts ('0'-'9') in thE fILe'S name.\n  - tHe filE's NAMe coNtainS EXactlY onE dOT '.'\n  - THE suBSTrIng beFOrE tHE dOt sHOuld NOt be emPtY, AND it starTS WitH a LettER FRoM \n  ThE latIn aLpHapeT ('a'-'z' And 'a'-'Z').\n  - thE SubstriNg AftER the dot sHOUld bE oNE Of theSE: ['txt', 'exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "/*CReaTe a funCTion WhiCh tAKes a sTrINg rEPReSEntiNg a fILe's name, And retURns\n  'yes' if the the FIle's nAme is vAlid, aNd rEturns 'No' oTheRwisE.\n  A filE'S Name is ConSIDeREd TO Be VAliD iF anD OnlY if ALL tHe foLlowIng cOnDItiOnS \n  are MEt:\n  - therE shoulD Not BE mOrE thAN ThrEE digIts ('0'-'9') in thE fILe'S name.\n  - tHe filE's NAMe coNtainS EXactlY onE dOT '.'\n  - THE suBSTrIng beFOrE tHE dOt sHOuld NOt be emPtY, AND it starTS WitH a LettER FRoM \n  ThE latIn aLpHapeT ('a'-'z' And 'a'-'Z').\n  - thE SubstriNg AftER the dot sHOUld bE oNE Of theSE: ['txt', 'exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_lower = file_name.toLowerCase()\n  let file_name_substr = file_name_lower.substr(file_name_lower.lastIndexOf('.') + 1)\n  let file_name_substr_lower = file_name_substr.toLowerCase()\n  let file_name_substr_match = /^[a-z0-9]+$/i.test(file_name_substr)\n  let file_name_substr_match_lower = file_name_substr_lower.match(/^[a-z0-9]+$/i)\n  let file_name_substr_match_lower_match = file_name_substr_match_lower && file_name_substr_lower.match(/^[a-z0-9]+$/i)\n  let file_name_substr_match_lower_match_match = file_name_substr_match_lower && file_name_substr_match_lower.match(/^[a-z0-9]+$/i)\n  let file_name_substr_match_lower_match_match_match = file_name_substr_match_lower_match && file_name_substr_match_lower_match.match(/^[a-z0-9]+$/i)\n  let file_name_substr_match_lower_match_match_match_match = file_name_substr_match_lower_match_match && file_name_substr_match_lower_match_match.match(/^[a-z0-9]+$/i)\n  let file_name_substr_match_lower_match_match_match_match_match = file_name_substr_match_lower_match_match_match && file_name_substr_match_lower_match_match_match.match(/^[a-z0-9]+$/i)\n  let file_name_substr_match_lower_match_match_match_match_match_match = file_name_substr_match_lower_match_match_match_match && file_name_substr_match_lower_match_match_match_match.match(/^[a-z0-9]+$/i)\n  let file_name_substr_match_lower_match_match_match_match_match_match_match = file_name_substr_match_lower_match_match_match_match_match && file_name_substr_match_lower_match_match_match_match_match.match(/^[a-z0-9]+$/i)\n  let file_name_substr_match_lower_match_match_match_match_match_match_match_match = file_name_substr_match_lower_match_match_match_match_match_match_match && file_name_substr_match_lower_match_match_match_match_match_match.match(/^[a-z0-9]+$/i)\n  let file_name_substr_match_lower_match_match_match_match_match_match_match_match_match = file_name_substr_match_lower_match_match_match_match_match_match_match_match && file_name_substr_match_lower_match_match_match_match_match_match_match.match(/^[a-z0-9]+$/i)\n  let file_name_substr_match_lower_match_match_match_match_match_match_match_match_match_match_match = file_name_substr_match_lower_match_match_match_match_match_match_match_match && file_name_substr_match_lower_match_match_match_match_match_match_match.match(/^[a-z0-9]+$/i)\n  let file_name_substr_match_lower_match_match_match_match_match_match_match_match_match_match_match_match_match = file_name_substr_match_lower_match_match_match_match_match_match_match_match && file_name_substr_match_lower_match_match_match_match_match_match_match.match(/^[a-z0-9]+$/i)\n  let file_name_substr_match_lower_match_match_match_match_match_match_match_match_match_match_match_match_match_match = file_name_substr_match_lower_match_match_match_match_match_match_match_match && file_name_substr_match_lower_match_match_match_match_match_match_match.match(/^[a-z0-9]+$/i)\n  let file_name_substr_match_lower_match_match_match_match_match_match_match_match_match_match_match_match_match_match", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  thiS funcTIon wIll TakE A list of iNtEGerS. fOr ALl enTriES in the list, the FunctiON shAll square thE IntegEr entrY if itS inDex is a \n  mulTipLe of 3 And wiLL Cube thE inTEGeR EnTRY iF Its InDex IS a mUltIPLe Of 4 anD not A mulTiPLe oF 3. THe fuNCtIon wIll not \n  CHanGE tHe EntRIEs in tHE list whoSe indExES aRe not A MultiPlE OF 3 or 4. THe funCTIon shAll ThEN return tHE suM OF aLl entRIeS. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*\"\n  thiS funcTIon wIll TakE A list of iNtEGerS. fOr ALl enTriES in the list, the FunctiON shAll square thE IntegEr entrY if itS inDex is a \n  mulTipLe of 3 And wiLL Cube thE inTEGeR EnTRY iF Its InDex IS a mUltIPLe Of 4 anD not A mulTiPLe oF 3. THe fuNCtIon wIll not \n  CHanGE tHe EntRIEs in tHE list whoSe indExES aRe not A MultiPlE OF 3 or 4. THe funCTIon shAll ThEN return tHE suM OF aLl entRIeS. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sum", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  you Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "/*\n  you Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = [];\n  let currentWord = '';\n  let currentIndex = 0;\n  let currentWordLength = 0;\n  let lastIndex = 0;\n  let lastWordLength = 0;\n  let lastWord = '';\n  let lastWordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*YOur Task iS To imPleMenT a FuncTiON thAT WiLL simplify the ExpREssion\n  x * n. THe funcTIon Returns true IF x * n evalUates tO a wholE nuMber and faLse\n  OtheRwise. bOTh x and n, aRe sTRInG RePREsENtaTiOn oF a FraCtiON, AnD havE the FollOwINg fOrMat,\n  <nUMeRatoR>/<denomINatOR> wHeRe bOTH nuMEratOr and DeNOmInatoR Are poSiTIVe whOle nuMBErs.\n\n  YoU caN aSSuME thAT x, AnD n are vALiD fRAcTioNS, and DO not haVe ZERO as denoMINatOR.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = FALsE\n  simplify(\"7/10\", \"10/2\") = FaLse\n  */\ncOnsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "/*YOur Task iS To imPleMenT a FuncTiON thAT WiLL simplify the ExpREssion\n  x * n. THe funcTIon Returns true IF x * n evalUates tO a wholE nuMber and faLse\n  OtheRwise. bOTh x and n, aRe sTRInG RePREsENtaTiOn oF a FraCtiON, AnD havE the FollOwINg fOrMat,\n  <nUMeRatoR>/<denomINatOR> wHeRe bOTH nuMEratOr and DeNOmInatoR Are poSiTIVe whOle nuMBErs.\n\n  YoU caN aSSuME thAT x, AnD n are vALiD fRAcTioNS, and DO not haVe ZERO as denoMINatOR.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = FALsE\n  simplify(\"7/10\", \"10/2\") = FaLse\n  */\ncOnsT simplify = (x, n) => {\n  if (x.length!== n.length) return false;\n  let res = true;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i]!== n[i]) {\n      res = false;\n      break;\n    }\n  }\n  return res;\n};\n\npassed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted;\n};\n\nexport default orderByPoints;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*WRitE a funCTion ThaT taKEs an ArRAy oF NUmBErs aS inPUt and reTurns \n  tHE nuMber of elemeNTs in the Array tHat arE grEater than 10 And Both \n  First AND last dIgiTS Of A NuMBEr ARe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "/*WRitE a funCTion ThaT taKEs an ArRAy oF NUmBErs aS inPUt and reTurns \n  tHE nuMber of elemeNTs in the Array tHat arE grEater than 10 And Both \n  First AND last dIgiTS Of A NuMBEr ARe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  let i = 0;\n  while (i < nums.length) {\n    if (nums[i] > 10) {\n      result = 1;\n      break;\n    }\n    if (nums[i] < 0) {\n      result = 2;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  you Are giVEn a pOsiTivE InteGeR n. you HAVe TO creAte AN integeR array A Of lEngth n.\n      For eacH i (1 ≤ i ≤ n), The vaLue of a[I] = i * i - i + 1.\n      RetuRn tHe number oF trIpleS (a[i], a[j], A[K]) Of a wheRe i < j < k, \n  aND A[i] + A[J] + a[K] IS a MUltIpLe oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "/*\n  you Are giVEn a pOsiTivE InteGeR n. you HAVe TO creAte AN integeR array A Of lEngth n.\n      For eacH i (1 ≤ i ≤ n), The vaLue of a[I] = i * i - i + 1.\n      RetuRn tHe number oF trIpleS (a[i], a[j], A[K]) Of a wheRe i < j < k, \n  aND A[i] + A[J] + a[K] IS a MUltIpLe oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n).keys()].map((i) => i * i - i + 1);\n  const A = a.map((i) => i + 1);\n  return A.reduce((acc, curr) => acc + curr, 0);\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* theRe are EIght PlaNetS in Our sOlAR sySTEm: THe clOseRSt to the sun\n  is MERcuRy, the next onE Is VenUs, then earth, marS, Jupiter, SAtuRn,\n  UrAnus, NEPTune.\n  WrIte A FUnCTiON ThAT taKeS twO PlaNet NAMeS as sTrinGs planet1 anD planet2.\n  THE fuNcTion SHoUld return a tuple ContaiNIng ALl PlAneTS WhoSE orbIts arE\n  lOCaTed beTWeen tHe ORBit oF planet1 and tHE Orbit Of planet2, sOrTEd BY\n  thE PRoXimitY To ThE SuN.\n  ThE FuncTIon shoUlD return AN Empty tuple if planet1 OR planet2\n  Are NOt coRRECt PLaNet nAmeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "/* theRe are EIght PlaNetS in Our sOlAR sySTEm: THe clOseRSt to the sun\n  is MERcuRy, the next onE Is VenUs, then earth, marS, Jupiter, SAtuRn,\n  UrAnus, NEPTune.\n  WrIte A FUnCTiON ThAT taKeS twO PlaNet NAMeS as sTrinGs planet1 anD planet2.\n  THE fuNcTion SHoUld return a tuple ContaiNIng ALl PlAneTS WhoSE orbIts arE\n  lOCaTed beTWeen tHe ORBit oF planet1 and tHE Orbit Of planet2, sOrTEd BY\n  thE PRoXimitY To ThE SuN.\n  ThE FuncTIon shoUlD return AN Empty tuple if planet1 OR planet2\n  Are NOt coRRECt PLaNet nAmeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  if (planet1 === planet2) {\n    return [];\n  }\n  const planet1Name = planet1.toUpperCase();\n  const planet2Name = planet2.toUpperCase();\n  const planet1NameLength = planet1Name.length;\n  const planet2NameLength = planet2Name.length;\n  const planet1NameIndex = planet1Name.indexOf(\" \");\n  const planet2NameIndex = planet2Name.indexOf(\" \");\n  const planet1NameIndexLength = planet1NameIndex.length;\n  const planet2NameIndexLength = planet2NameIndex.length;\n  const planet1NameIndexStart = planet1NameIndex > 0? planet1NameIndex : 0;\n  const planet2NameIndexStart = planet2NameIndex > 0? planet2NameIndex : 0;\n  const planet1NameIndexEnd = planet1NameIndex > 0? planet1NameIndex + 1 : planet1NameLength;\n  const planet2NameIndexEnd = planet2NameIndex > 0? planet2NameIndex + 1 : planet2NameLength;\n  const planet1NameIndexEndLength = planet1NameIndexEnd - planet1NameIndexStart;\n  const planet2NameIndexEndLength = planet2NameIndexEnd - planet2NameIndexStart;\n  const planet1NameIndexEndLength = planet1NameIndexEndLength > planet1NameIndexLength? planet1NameIndexEndLength : planet1NameIndexLength;\n  const planet2NameIndexEndLength = planet2NameIndexEndLength > planet2NameIndexLength? planet2NameIndexEndLength : planet2NameIndexLength;\n  const planet1NameIndexEndLength = planet1NameIndexEndLength > planet1NameIndexLength? planet1NameIndexEndLength : planet1NameIndexLength;\n  const planet2NameIndexEndLength = planet2NameIndexEndLength > planet2NameIndexLength? planet2NameIndexEndLength : planet2NameIndexLength;\n  const planet1NameIndexEndLength = planet1NameIndexEndLength > planet1NameIndexLength? planet1NameIndexEndLength : planet1NameIndexLength;\n  const planet2NameIndexEndLength = planet2NameIndexEndLength > planet2NameIndexLength? planet2NameIndexEndLength : planet2NameIndexLength;\n  const planet1NameIndexEndLength = planet1NameIndexEndLength > planet1NameIndexLength? planet1NameIndexEndLength : planet1NameIndexLength;\n  const planet2NameIndexEndLength = planet2NameIndexEndLength > planet2NameIndexLength? planet2NameIndexEndLength : planet2NameIndexLength;\n  const planet1NameIndexEndLength = planet1NameIndexEndLength > planet1NameIndexLength? planet1NameIndexEndLength : planet1NameIndexLength;\n  const planet2NameIndexEndLength = planet2NameIndexEndLength > planet2NameIndexLength? planet2NameIndexEndLength : planet2NameIndexLength;\n  const planet1NameIndexEndLength = planet1NameIndexEndLength > planet1NameIndexLength? planet1NameIndexEndLength : planet1NameIndexLength;\n  const planet2NameIndexEndLength = planet2NameIndexEndLength > planet2NameIndexLength? planet2NameIndexEndLength : planet2NameIndexLength;\n  const planet1NameIndexEndLength = planet1NameIndexEndLength > planet1NameIndexLength? planet1NameIndexEndLength : planet1NameIndexLength;\n  const planet2NameIndexEndLength = planet2NameIndexEndLength > planet2NameIndexLength? planet2NameIndexEndLength : planet2NameIndexLength;\n  const planet1NameIndexEndLength = planet1NameIndexEndLength > planet1NameIndexLength? planet1NameIndexEndLength : planet1NameIndexLength;\n  const planet2NameIndexEndLength = planet2NameIndexEndLength > planet2NameIndexLength? planet2NameIndexEndLength : planet2NameIndexLength;\n  const planet1NameIndexEndLength = planet1NameIndexEndLength > planet1NameIndexLength? planet1NameIndexEndLength : planet1NameIndexLength;\n  const planet2NameIndexEndLength = planet2NameIndexEndLength > planet2NameIndexLength? planet2NameIndexEndLength : planet2NameIndexLength;\n  const planet1NameIndexEndLength = planet1NameIndexEndLength > planet1NameIndexLength? planet1NameIndexEndLength : planet1NameIndexLength;\n  const planet2NameIndexEndLength = planet2NameIndexEndLength > planet2NameIndexLength? planet2NameIndexEndLength : planet2NameIndexLength;\n  const planet1NameIndexEndLength = planet1NameIndexEndLength > planet1NameIndexLength? planet1NameIndexEndLength : planet1NameIndexLength;\n  const planet2NameIndexEndLength = planet2NameIndexEndLength > planet2NameIndexLength? planet2NameIndexEndLength : planet2NameIndexLength;\n  const planet1NameIndexEndLength = planet1NameIndexEndLength > planet1NameIndexLength? planet1NameIndexEndLength : planet1NameIndexLength;\n  const planet2NameIndexEndLength = planet2NameIndexEndLength > planet2NameIndexLength? planet2NameIndexEndLength : planet2NameIndexLength;\n  const planet1NameIndexEndLength = planet1NameIndexEndLength > planet1NameIndexLength? planet1NameIndexEndLength : planet1NameIndexLength;\n  const planet2NameIndexEndLength = planet2NameIndexEndLength > planet2NameIndexLength? planet2NameIndexEndLength : planet2Name", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*WRitE a funCTion ThaT acCEpts A list oF StrINGs AS a paRamETer,\n  deleTes the STriNgs that have ODd lenGths frOm it,\n  aNd rEturns the ResUlteD list with A SOrted oRdeR,\n  tHe list IS aLWAyS A list of StRinGS anD neVER aN arrAy of NumbErS,\n  And It May cONtAin dUplicaTEs.\n  THE oRdEr oF THe list sHOuld Be ascEnDInG by leNGth of EaCH Word, And yoU\n  SHould return The list SoRTeD By tHAT rUle.\n  If TWo WoRDs HavE The sAMe lengTh, SORT the list alpHABetICallY.\n  tHE fUNcTion ShoUlD return a list of STriNgS in sORted ordEr.\n  you MAy assume THAt alL wORDs wilL Have the SamE lengTh.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "/*WRitE a funCTion ThaT acCEpts A list oF StrINGs AS a paRamETer,\n  deleTes the STriNgs that have ODd lenGths frOm it,\n  aNd rEturns the ResUlteD list with A SOrted oRdeR,\n  tHe list IS aLWAyS A list of StRinGS anD neVER aN arrAy of NumbErS,\n  And It May cONtAin dUplicaTEs.\n  THE oRdEr oF THe list sHOuld Be ascEnDInG by leNGth of EaCH Word, And yoU\n  SHould return The list SoRTeD By tHAT rUle.\n  If TWo WoRDs HavE The sAMe lengTh, SORT the list alpHABetICallY.\n  tHE fUNcTion ShoUlD return a list of STriNgS in sORted ordEr.\n  you MAy assume THAt alL wORDs wilL Have the SamE lengTh.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum2 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum3 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum4 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum5 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum6 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum7 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum8 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum9 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum10 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum11 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum12 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum13 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum14 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum15 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum16 = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence15 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence16 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += '0';\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence17 =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  } else if (n === 1) {\n    return y;\n  } else {\n    return xOrY(n - 1, x, y);\n  }\n};\n\n// Test Cases\nconst testCases = [\n  [0, 0, 0],\n  [1, 0, 1],\n  [2, 1, 1],\n  [3, 2, 2],\n  [4, 3, 3],\n  [5, 4, 4],\n  [6, 5, 5],\n  [7, 6, 6],\n  [8, 7, 7],\n  [9, 8, 8],\n  [10, 9, 9],\n  [11, 10, 10],\n  [12, 11, 11],\n  [13, 12, 12],\n  [14, 13, 13],\n  [15, 14, 14],\n  [16, 15, 15],\n  [17, 16, 16],\n  [18, 17, 17],\n  [19, 18, 18],\n  [20, 19, 19],\n  [21, 20, 20],\n  [22, 21, 21],\n  [23, 22, 22],\n  [24, 23, 23],\n  [25, 24, 24],\n  [26, 25, 25],\n  [27, 26, 26],\n  [28, 27, 27],\n  [29, 28, 28],\n  [30, 29, 29],\n  [31, 30, 30],\n  [32, 31, 31],\n  [33, 32, 32],\n  [34, 33, 33],\n  [35, 34, 34],\n  [36, 35, 35],\n  [37, 36, 36],\n  [38, 37, 37],\n  [39, 38, 38],\n  [40, 39, 39],\n  [41, 40, 40],\n  [42, 41, 41],\n  [43, 42, 42],\n  [44, 43, 43],\n  [45, 44, 44],\n  [46, 45, 45],\n  [47, 46, 46],\n  [48, 47, 47],\n  [49, 48, 48],\n  [50, 49, 49],\n  [51, 50, 50],\n  [52, 51, 51],\n  [53, 52, 52],\n  [54, 53, 53],\n  [55, 54, 54],\n  [56, 55, 55],\n  [57, 56, 56],\n  [58, 57, 57],\n  [59, 58, 58],\n  [60, 59, 59],\n  [61, 60, 60],\n  [62, 61, 61],\n  [63, 62, 62],\n  [64, 63, 63],\n  [65, 64, 64],\n  [66, 65, 65],\n  [67, 66, 66],\n  [68, 67, 67],\n  [69, 68, 68],\n  [70, 69, 69],\n  [71, 70, 70],\n  [72, 71, 71],\n  [73, 72, 72],\n  [74, 73, 73],\n  [75, 74, 74],\n  [76, 75, 75],\n  [77, 76, 76],\n  [78, 77, 77],\n  [79, 78, 78],\n  [80, 79, 79],\n  [81, 80, 80],\n  [82, 81, 81],\n  [83, 82, 82],\n  [84, 83, 83],\n  [85, 84, 84],\n  [86, 85, 85],\n  [87, 86, 86],\n  [88, 87, 87],\n  [89, 88, 88],\n  [90, 89, 89],\n  [91, 90, 90],\n  [92, 91, 91],\n  [93, 92, 92],\n  [94, 93, 93],\n  [95, 94, 94],\n  [96, 95, 95],\n  [97, 96, 96],\n  [98, 97, 97],\n  [99, 98, 98],\n  [100, 99, 99],\n  [101, 100, 100],\n  [102, 101, 101],\n  [103, 102, 102],\n  [104, 103, 103],\n  [105, 104, 104],\n  [106, 105, 105],\n  [107, 106, 106],\n  [108, 107, 107],\n  [109, 108, 108],\n  [110, 109, 109],\n  [111, 110, 110],\n  [112, 111, 111],\n  [113, 112, 112],\n  [114, 113, 113],\n  [115, 114, 114],\n  [116, 115, 115],\n  [117, 116, 116],\n  [118, 117, 117],\n  [119, 118, 118],\n  [120, 119, 119],\n  [121, 120, 120],\n  [122, 121, 121],\n  [123, 122, 122],\n  [124, 123, 123],\n  [125, 124, 124],\n  [126, 125, 125],\n  [127, 126, 126],\n  [128, 127, 127],\n  [129, 128, 128],\n  [130, 129, 129],\n  [131, 130, 130],\n  [132, 131, 131],\n  [133, 132, 132],\n  [134, 133, 133],\n  [135, 134, 134],\n  [136, 135, 135],\n  [137, 136, 136],\n  [138, 137, 137],\n  [139, 138, 138],\n  [140, 139, 139],\n  [141, 140, 140],\n  [142, 141, 141],\n  [143, 142, 142],\n  [144, 143, 143],\n  [145, 144, 144],\n  [146, 145, 145],\n  [147, 146, 146],\n  [148, 147, 147],\n  [149, 148, 148],\n  [150, 149, 150],\n  [151, 150, 151", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]));\nconsole.log(doubleTheDifference([-1, -2, 0]));\nconsole.log(doubleTheDifference([9, -2]));\nconsole.log(doubleTheDifference([0]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I ThiNk we aLL remEmbEr tHAt feElINg wHEN tHE resUlt OF some loNg-awaiTEd\n  eVent is finalLY knowN. The feElingS anD thoughts You Have At thaT MOment aRe\n  dEFInITeLY WoRTh nOtIng DOwn And COMpArinG.\n  YouR tasK iS To dEtErmiNE iF a peRson coRRecTLy GuEssED The REsulTs of a NuMBeR of maTChes.\n  YOu ARE givEn two ARRays oF scOrES aND guESSeS of eqUAl LeNGtH, whERe eaCH index ShOWS A match. \n  RETUrn AN arrAY OF tHE sAme lEngTh DenoTIng HoW fAR off eacH guess wAs. IF They have GUEsseD cORRectlY,\n  The valuE is 0, And if NoT, The ValUe is the absoLUTe dIffErEnCe beTweEn the guess and the SCOre.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "/*I ThiNk we aLL remEmbEr tHAt feElINg wHEN tHE resUlt OF some loNg-awaiTEd\n  eVent is finalLY knowN. The feElingS anD thoughts You Have At thaT MOment aRe\n  dEFInITeLY WoRTh nOtIng DOwn And COMpArinG.\n  YouR tasK iS To dEtErmiNE iF a peRson coRRecTLy GuEssED The REsulTs of a NuMBeR of maTChes.\n  YOu ARE givEn two ARRays oF scOrES aND guESSeS of eqUAl LeNGtH, whERe eaCH index ShOWS A match. \n  RETUrn AN arrAY OF tHE sAme lEngTh DenoTIng HoW fAR off eacH guess wAs. IF They have GUEsseD cORRectlY,\n  The valuE is 0, And if NoT, The ValUe is the absoLUTe dIffErEnCe beTweEn the guess and the SCOre.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = 0;\n  let guess_arr = guess.split('');\n  let game_arr = game.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*YOu wIll be GIven The NamE Of a cLaSS (a sTRInG) And a list Of extensions.\n  THE extensions are to bE used tO LoaD additional CLasseS to the Class. the\n  Strength oF thE extEnsioN IS as folLowS: lEt caP BE ThE NumBeR of THe uPpeRCAsE\n  letTers in The eXtENsiOn'S namE, AnD let sM be thE NumBEr Of LowERCasE LettErs\n  in thE eXTeNsion'S Name, tHe STRengTh is gIVEn by tHe fRaCTiON CAp - sm.\n  YOu shoULd FiND tHe sTRongESt exteNsION And return a strING in thIS\n  forMAT: clASsname.strOnGesteXteNsIoNname.\n  If tHeRe aRE two or moRE extensions With ThE SAme stREngth, yoU shOuld\n  cHoOSe tHe oNe that comes FIRst in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "/*YOu wIll be GIven The NamE Of a cLaSS (a sTRInG) And a list Of extensions.\n  THE extensions are to bE used tO LoaD additional CLasseS to the Class. the\n  Strength oF thE extEnsioN IS as folLowS: lEt caP BE ThE NumBeR of THe uPpeRCAsE\n  letTers in The eXtENsiOn'S namE, AnD let sM be thE NumBEr Of LowERCasE LettErs\n  in thE eXTeNsion'S Name, tHe STRengTh is gIVEn by tHe fRaCTiON CAp - sm.\n  YOu shoULd FiND tHe sTRongESt exteNsION And return a strING in thIS\n  forMAT: clASsname.strOnGesteXteNsIoNname.\n  If tHeRe aRE two or moRE extensions With ThE SAme stREngth, yoU shOuld\n  cHoOSe tHe oNe that comes FIRst in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const class_name_parts = class_name.split('.');\n  const class_name_last = class_name_parts[class_name_parts.length - 1];\n  const class_name_last_parts = class_name_last.split('_');\n  const class_name_last_last = class_name_last_parts[class_name_last_parts.length - 1];\n  const class_name_last_last_parts = class_name_last_last.split('_');\n  const class_name_last_last_last = class_name_last_last_parts[class_name_last_last_parts.length - 1];\n  const class_name_last_last_last_parts = class_name_last_last_last.split('_');\n  const class_name_last_last_last_last = class_name_last_last_last_parts[class_name_last_last_last_parts.length - 1];\n  const class_name_last_last_last_last_parts = class_name_last_last_last_last.split('_');\n  const class_name_last_last_last_last_last = class_name_last_last_last_last_parts[class_name_last_last_last_last_parts.length - 1];\n  const class_name_last_last_last_last_last_parts = class_name_last_last_last_last_last.split('_');\n  const class_name_last_last_last_last_last_last = class_name_last_last_last_last_last_parts[class_name_last_last_last_last_last_parts.length - 1];\n  const class_name_last_last_last_last_last_last_parts = class_name_last_last_last_last_last_last.split('_');\n  const class_name_last_last_last_last_last_last_last = class_name_last_last_last_last_last_last_parts[class_name_last_last_last_last_last_last_parts.length - 1];\n  const class_name_last_last_last_last_last_last_last_parts = class_name_last_last_last_last_last_last_last.split('_');\n  const class_name_last_last_last_last_last_last_last_last = class_name_last_last_last_last_last_last_last_last_parts[class_name_last_last_last_last_last_last_last_parts.length - 1];\n  const class_name_last_last_last_last_last_last_last_last_last = class_name_last_last_last_last_last_last_last_last_last_parts[class_name_last_last_last_last_last_last_last_last_parts.length - 1];\n  const class_name_last_last_last_last_last_last_last_last_last = class_name_last_last_last_last_last_last_last_last_last_parts[class_name_last_last_last_last_last_last_last_last_parts.length - 1];\n  const class_name_last_last_last_last_last_last_last_last_last = class_name_last_last_last_last_last_last_last_last_last_parts[class_name_last_last_last_last_last_last_last_last_parts.length - 1];\n  const class_name_last_last_last_last_last_last_last_last_last = class_name_last_last_last_last_last_last_last_last_last_parts[class_name_last_last_last_last_last_last_last_last_parts.length - 1];\n  const class_name_last_last_last_last_last_last_last_last_last = class_name_last_last_last_last_last_last_last_last_last_parts[class_name_last_last_last_last_last_last_last_last_parts.length - 1];\n  const class_name_last_last_last_last_last_last_last_last_last = class_name_last_last_last_last_last_last_last_last_last_parts[class_name_last_last_last_last_last_last_last_last_parts.length - 1];\n  const class_name_last_last_last_last_last_last_last_last_last = class_name_last_last_last_last_last_last_last_last_last_parts[class_name_last_last_last_last_last_last", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*YOu aRe givEN 2 worDs. YOu nEEd to return TrUE if THE sECond WorD Or any of Its rotATioNs is a substriNG in the fIrst woRd\n  cycpatternCheck(\"abcd\",\"abd\") => falSe\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => FalsE\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nCONst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "/*YOu aRe givEN 2 worDs. YOu nEEd to return TrUE if THE sECond WorD Or any of Its rotATioNs is a substriNG in the fIrst woRd\n  cycpatternCheck(\"abcd\",\"abd\") => falSe\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => FalsE\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nCONst cycpatternCheck = (a, b) => {\n  if (a.length!== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i]!== b[i]) return false;\n  }\n  return true;\n};\n\n//TODO:\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for the same word in different words\n//  - test for", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num = num / 2;\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in lowerCAse.\n  ReStrictIons: 1 <= num <= 1000\n\n  EXamPles:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in lowerCAse.\n  ReStrictIons: 1 <= num <= 1000\n\n  EXamPles:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Number must be between 1 and 1000');\n  }\n\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    let digit = number % 10;\n    if (digit < 4) {\n      result += 'iv';\n    } else {\n      result += 'v';\n    }\n    number = number / 10;\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = {\n  intToRoman,\n  intToMiniRoman\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b + c) % 2 === 0;\n};\n\n/**\n  givEn the LengtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b + c) % 2 === 0;\n};\n\n/**\n  givEn the LengtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b + c) % 2 === 0;\n};\n\n/**\n  givEn the LengtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b + c) % 2 === 0;\n};\n\n/**\n  givEn the LengtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b + c) % 2 === 0;\n};\n\n/**\n  givEn the LengtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b + c) % 2 === 0;\n};\n\n/**\n  givEn the LengtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b + c) % 2 === 0;\n};\n\n/**\n  givEn the LengtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b + c) % 2 === 0;\n};\n\n/**\n  givEn the LengtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRi", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*WRitE a funCTion ThaT acCEpts A list oF StrINGs.\n  tHe list coNtaINs diffeRent words. ReTUrn The word with MAximuM numbeR\n  of unIquE characteRs. IF mulTiple STRings hAve MAXiMUm NUMbER of UnIquE\n  ChaRacTERs, return The oNe whIch cOmES fiRsT in lexICoGrapHical oRDer.\n\n  findMax([\"name\", \"OF\", \"sTrIng\"]) === \"STRinG\"\n  findMax([\"name\", \"Enam\", \"Game\"]) === \"eNaM\"\n  findMax([\"aaaaaaa\", \"Bb\" ,\"Cc\"]) === \"\"aaaAAaa\"\n  */\ncoNsT findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "/*WRitE a funCTion ThaT acCEpts A list oF StrINGs.\n  tHe list coNtaINs diffeRent words. ReTUrn The word with MAximuM numbeR\n  of unIquE characteRs. IF mulTiple STRings hAve MAXiMUm NUMbER of UnIquE\n  ChaRacTERs, return The oNe whIch cOmES fiRsT in lexICoGrapHical oRDer.\n\n  findMax([\"name\", \"OF\", \"sTrIng\"]) === \"STRinG\"\n  findMax([\"name\", \"Enam\", \"Game\"]) === \"eNaM\"\n  findMax([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"\"aaaAAaa\"\n  */\ncoNsT findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n//  findMax([\"name\", \"OF\", \"sTrIng\"]) === \"STRinG\"\n//  findMax([\"name\", \"Enam\", \"Game\"]) === \"eNaM\"\n//  findMax([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"\"aaaAAaa\"\n\nconsole.log(findMax([\"name\", \"OF\", \"sTrIng\"]));\nconsole.log(findMax([\"name\", \"Enam\", \"Game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"Bb\",\"Cc\"]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  you'Re a huNGry rAbbIt, aND you AlREadY HAvE EateN a cERtain number of CarrotS,\n  But Now you need to eat morE CarroTs to coMpletE thE day's mealS.\n  yoU shoUld return an ARRay of [ tOtaL number OF eATeN CArROts AfTer YOur MeaLS,\n                                  ThE number of cArroTs leFt AFteR yOur mEAlS ]\n  if tHere arE Not ENoUgH remaining caRROts, YOu wiLl eat all remaining CaRRoTs, but WIll stIlL BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "/*\n  you'Re a huNGry rAbbIt, aND you AlREadY HAvE EateN a cERtain number of CarrotS,\n  But Now you need to eat morE CarroTs to coMpletE thE day's mealS.\n  yoU shoUld return an ARRay of [ tOtaL number OF eATeN CArROts AfTer YOur MeaLS,\n                                  ThE number of cArroTs leFt AFteR yOur mEAlS ]\n  if tHere arE Not ENoUgH remaining caRROts, YOu wiLl eat all remaining CaRRoTs, but WIll stIlL BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < 0 || number > 1000) {\n    throw new Error('number must be between 0 and 1000');\n  }\n  if (need < 0 || need > 1000) {\n    throw new Error('need must be between 0 and 1000');\n  }\n  if (remaining < 0 || remaining > 1000) {\n    throw new Error('remaining must be between 0 and 1000');\n  }\n\n  let result = [];\n  let i = 0;\n  while (i < number) {\n    result.push(i);\n    i++;\n  }\n  i = 0;\n  while (i < need) {\n    result.push(i);\n    i++;\n  }\n  i = 0;\n  while (i < remaining) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nexport default eat;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* givEn a string, fiND out How ManY DistInCT chARAcTErs (rEgaRDless of Case) doES it Consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "/* givEn a string, fiND out How ManY DistInCT chARAcTErs (rEgaRDless of Case) doES it Consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char = '';\n  let i = 0;\n  while (i < string.length) {\n    char = string[i];\n    if (char!=='') {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  givEn two LIsts operator, And operand. the FIrst list HaS BasIC AlGEbra OpeRAtions, aNd \n  the sEConD list is a list of integERs. Use The two Given LisTs to build The AlgeBric \n  eXPRessioN anD return THe EVaLUAtIOn oF tHis EXprEssION.\n\n  THe baSic aLgebRa OPerAtIons:\n  aDdItioN ( + ) \n  SubtrACtiON ( - ) \n  MUlTipLICatIOn ( * ) \n  FlOor diViSIoN ( // ) \n  ExpoNEntiaTiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "/*\n  givEn two LIsts operator, And operand. the FIrst list HaS BasIC AlGEbra OpeRAtions, aNd \n  the sEConD list is a list of integERs. Use The two Given LisTs to build The AlgeBric \n  eXPRessioN anD return THe EVaLUAtIOn oF tHis EXprEssION.\n\n  THe baSic aLgebRa OPerAtIons:\n  aDdItioN ( + ) \n  SubtrACtiON ( - ) \n  MUlTipLICatIOn ( * ) \n  FlOor diViSIoN ( // ) \n  ExpoNEntiaTiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('');\n  const operandList = operand.split('');\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < operatorList.length && j < operandList.length) {\n    if (operatorList[i] === operandList[j]) {\n      result.push(operatorList[i]);\n      i++;\n      j++;\n    } else if (operatorList[i] === '+') {\n      result.push(operandList[j] + operandList[j + 1]);\n      j++;\n    } else if (operatorList[i] === '-') {\n      result.push(operandList[j] - operandList[j + 1]);\n      j++;\n    } else if (operatorList[i] === '*') {\n      result.push(operandList[j] * operandList[j + 1]);\n      j++;\n    } else if (operatorList[i] === '/') {\n      result.push(operandList[j] / operandList[j + 1]);\n      j++;\n    } else if (operatorList[i] === '//') {\n      result.push(operandList[j] // operandList[j + 1]);\n      j++;\n    } else if (operatorList[i] === '*') {\n      result.push(operandList[j] * operandList[j + 1]);\n      j++;\n    } else if (operatorList[i] === '+') {\n      result.push(operandList[j] + operandList[j + 1]);\n      j++;\n    } else if (operatorList[i] === '-') {\n      result.push(operandList[j] - operandList[j + 1]);\n      j++;\n    } else if (operatorList[i] === '*') {\n      result.push(operandList[j] * operandList[j + 1]);\n      j++;\n    } else if (operatorList[i] === '/') {\n      result.push(operandList[j] / operandList[j + 1]);\n      j++;\n    } else if (operatorList[i] === '//') {\n      result.push(operandList[j] // operandList[j + 1]);\n      j++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = doAlgebra;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*YOu aRe givEN a stRinG s.\n  if s[i] IS a leTtER, reVERsE Its cAse FRom loweR to uppER or Vise versa, \n  otHErwisE keep iT as it Is.\n  IF the strinG coNtaiNs no lETTers, reVerSE ThE StRINg.\n  tHe fUnCtiON shOulD return THe ResuLted StriNg.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*YOu aRe givEN a stRinG s.\n  if s[i] IS a leTtER, reVERsE Its cAse FRom loweR to uppER or Vise versa, \n  otHErwisE keep iT as it Is.\n  IF the strinG coNtaiNs no lETTers, reVerSE ThE StRINg.\n  tHe fUnCtiON shOulD return THe ResuLted StriNg.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let i = 0;\n  let j = 0;\n  let s_length = s.length;\n  let result = \"\";\n  while (i < s_length) {\n    if (s[i] === \" \") {\n      result += s[i];\n      i++;\n    } else if (s[i] === \"a\" && s[i + 1] === \"A\") {\n      result += \"A\";\n      i += 2;\n    } else if (s[i] === \"a\" && s[i + 1] === \"c\") {\n      result += \"C\";\n      i += 2;\n    } else if (s[i] === \"a\" && s[i + 1] === \"e\") {\n      result += \"E\";\n      i += 2;\n    } else if (s[i] === \"a\" && s[i + 1] === \"@\") {\n      result += \"@\";\n      i += 2;\n    } else if (s[i] === \"c\" && s[i + 1] === \"a\") {\n      result += \"A\";\n      i += 2;\n    } else if (s[i] === \"c\" && s[i + 1] === \"c\") {\n      result += \"C\";\n      i += 2;\n    } else if (s[i] === \"c\" && s[i + 1] === \"e\") {\n      result += \"E\";\n      i += 2;\n    } else if (s[i] === \"c\" && s[i + 1] === \"@\") {\n      result += \"@\";\n      i += 2;\n    } else if (s[i] === \"e\" && s[i + 1] === \"a\") {\n      result += \"A\";\n      i += 2;\n    } else if (s[i] === \"e\" && s[i + 1] === \"c\") {\n      result += \"C\";\n      i += 2;\n    } else if (s[i] === \"e\" && s[i + 1] === \"e\") {\n      result += \"E\";\n      i += 2;\n    } else if (s[i] === \"e\" && s[i + 1] === \"@\") {\n      result += \"@\";\n      i += 2;\n    } else if (s[i] === \"@\" && s[i + 1] === \"a\") {\n      result += \"A\";\n      i += 2;\n    } else if (s[i] === \"@\" && s[i + 1] === \"c\") {\n      result += \"C\";\n      i += 2;\n    } else if (s[i] === \"@\" && s[i + 1] === \"e\") {\n      result += \"E\";\n      i += 2;\n    } else if (s[i] === \"@\" && s[i + 1] === \"@\") {\n      result += \"@\";\n      i += 2;\n    } else if (s[i] === \" \") {\n      result += s[i];\n      i++;\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha1 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  const hash = crypto.createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha256 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  const hash = crypto.createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha512 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha384 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  const hash = crypto.createHash('sha384');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha3_224 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  const hash = crypto.createHash('sha3-224');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha3_256 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  const hash = crypto.createHash('sha3-256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha3_384 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  const hash = crypto.createHash('sha3-384');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha3_512 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  const hash = crypto.createHash('sha3-512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nexport default {\n  sha1,\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  let ai = a;\n  let bi = b;\n  while (ai <= b) {\n    result.push(ai);\n    ai += a;\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* inpUt to tHIs fuNctIon IS a stRiNG rePREsENtinG muSIcal notEs in a speCIal aSCII format.\n  yOur taSk is to Parse ThiS string anD return list of InteGers cORResponDinG TO hOW mANY bEAts DoEs eACh\n  nOt lAST.\n\n  HEre iS a leGend:\n  'O' - wHOle NoTe, laSTs Four Beats\n  'o|' - HAlf NOtE, lAstS TWo bEAts\n  '.|' - qUater NoTE, lAsts oNE beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "/* inpUt to tHIs fuNctIon IS a stRiNG rePREsENtinG muSIcal notEs in a speCIal aSCII format.\n  yOur taSk is to Parse ThiS string anD return list of InteGers cORResponDinG TO hOW mANY bEAts DoEs eACh\n  nOt lAST.\n\n  HEre iS a leGend:\n  'O' - wHOle NoTe, laSTs Four Beats\n  'o|' - HAlf NOtE, lAstS TWo bEAts\n  '.|' - qUater NoTE, lAsts oNE beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = [];\n  let music_string_arr = music_string.split(' ');\n  for (let i = 0; i < music_string_arr.length; i++) {\n    let music_arr = music_string_arr[i].split('|');\n    for (let j = 0; j < music_arr.length; j++) {\n      let music_int = parseInt(music_arr[j]);\n      if (music_int > 0) {\n        music_list.push(music_int);\n      }\n    }\n  }\n  return music_list;\n};\n\n// inpUt to tHIs fuNctIon IS a stRiNG rePREsENtinG muSIcal notEs in a speCIal aSCII format.\n// yOur taSk is to Parse ThiS string anD return list of InteGers cORResponDinG TO hOW mANY bEAts DoEs eACh\n// nOt lAST.\n//\n// HEre iS a leGend:\n// 'O' - wHOle NoTe, laSTs Four Beats\n// 'o|' - HAlf NOtE, lAstS TWo bEAts\n// '.|' - qUater NoTE, lAsts oNE beat\nconst parseMusic = (music_string) => {\n  let music_list = [];\n  let music_string_arr = music_string.split(' ');\n  for (let i = 0; i < music_string_arr.length; i++) {\n    let music_arr = music_string_arr[i].split('|');\n    for (let j = 0; j < music_arr.length; j++) {\n      let music_int = parseInt(music_arr[j]);\n      if (music_int > 0) {\n        music_list.push(music_int);\n      }\n    }\n  }\n  return music_list;\n};\n\n// inpUt to tHIs fuNctIon IS a stRiNG rePREsENtinG muSIcal notEs in a speCIal aSCII format.\n// yOur taSk is to Parse ThiS string anD return list of InteGers cORResponDinG TO hOW mANY bEAts DoEs eACh\n// nOt lAST.\n//\n// HEre iS a leGend:\n// 'O' - wHOle NoTe, laSTs Four Beats\n// 'o|' - HAlf NOtE, lAstS TWo bEAts\n// '.|' - qUater NoTE, lAsts oNE beat\nconst parseMusic = (music_string) => {\n  let music_list = [];\n  let music_string_arr = music_string.split(' ');\n  for (let i = 0; i < music_string_arr.length; i++) {\n    let music_arr = music_string_arr[i].split('|');\n    for (let j = 0; j < music_arr.length; j++) {\n      let music_int = parseInt(music_arr[j]);\n      if (music_int > 0) {\n        music_list.push(music_int);\n      }\n    }\n  }\n  return music_list;\n};\n\n// inpUt to tHIs fuNctIon IS a stRiNG rePREsENtinG muSIcal notEs in a speCIal aSCII format.\n// yOur taSk is to Parse ThiS string anD return list of InteGers cORResponDinG TO hOW mANY bEAts DoEs eACh\n// nOt lAST.\n//\n// HEre iS a leGend:\n// 'O' - wHOle NoTe, laSTs Four Beats\n// 'o|' - HAlf NOtE, lAstS TWo bEAts\n// '.|' - qUater NoTE, lAsts oNE beat\nconst parseMusic = (music_string) => {\n  let music_list = [];\n  let music_string_arr = music_string.split(' ');\n  for (let i = 0; i < music_string_arr.length; i++) {\n    let music_arr = music_string_arr[i].split('|');\n    for (let j = 0; j < music_arr.length; j++) {\n      let music_int = parseInt(music_arr[j]);\n      if (music_int > 0) {\n        music_list.push(music_int);\n      }\n    }\n  }\n  return music_list;\n};\n\n// inpUt to tHIs fuNctIon IS a stRiNG rePREsENtinG muSIcal notEs in a speCIal aSCII format.\n// yOur taSk is to Parse ThiS string anD return list of InteGers cORResponDinG TO hOW mANY bEAts DoEs eACh\n// nOt lAST.\n//\n// HEre iS a leGend:\n// 'O' - wHOle NoTe, laSTs Four Beats\n// 'o|' - HAlf NOtE, lAstS TWo bEAts\n// '.|' - qUater NoTE, lAsts oNE beat\nconst parseMusic = (music_string) => {\n  let music_list = [];\n  let music_string_arr = music_string.split(' ');\n  for (let i = 0; i < music_string_arr.length;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* finD how mANy times a gIveN substring caN Be foUnD in The ORIgINal string. COunT OverlapIng casES.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "/* finD how mANy times a gIveN substring caN Be foUnD in The ORIgINal string. COunT OverlapIng casES.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substr(i, substring.length) === substring) {\n      count++\n      i += substring.length\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe', 'sIx', 'seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "/* inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sorted = numbers.split('').sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted.join('');\n};\n\n/*\n  inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n  let sorted = numbers.split('').sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted.join('');\n};\n\n/*\n  inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n  let sorted = numbers.split('').sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted.join('');\n};\n\n/*\n  inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n  let sorted = numbers.split('').sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted.join('');\n};\n\n/*\n  inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n  let sorted = numbers.split('').sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted.join('');\n};\n\n/*\n  inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers6 = (numbers) => {\n  let sorted = numbers.split('').sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted.join('');\n};\n\n/*\n  inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers7 = (numbers) => {\n  let sorted = numbers.split('').sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* givEn a poSItivE flOatINg poInT number, It cAN Be DEcomPosED into\n  anD integER paRt (largest inTEger sMaller Than gIveN number) and decimAls\n  (LeftOver pART alwayS smALLeR ThAN 1).\n\n  reTUrn ThE deCImaL paRT Of The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "/* givEn a poSItivE flOatINg poInT number, It cAN Be DEcomPosED into\n  anD integER paRt (largest inTEger sMaller Than gIveN number) and decimAls\n  (LeftOver pART alwayS smALLeR ThAN 1).\n\n  reTUrn ThE deCImaL paRT Of The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimals = Math.floor(Math.log10(number)) + 1;\n  const rounded = Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n  return rounded;\n};\n\nexport default truncateNumber;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* froM a suppLIed list oF numbers (of LenGTh at LeASt tWO) SeLEct aNd return tWO that arE the clOSesT to each\n  otheR And return thEm in ordeR (smalLer Number, larGer NumbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "/* froM a suppLIed list oF numbers (of LenGTh at LeASt tWO) SeLEct aNd return tWO that arE the clOSesT to each\n  otheR And return thEm in ordeR (smalLer Number, larGer NumbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let min = numbers[0];\n  let minIndex = 0;\n  let minDist = Infinity;\n  let minDistIndex = 0;\n  let minDistIndex2 = 0;\n  let minDistIndex3 = 0;\n  let minDistIndex4 = 0;\n  let minDistIndex5 = 0;\n  let minDistIndex6 = 0;\n  let minDistIndex7 = 0;\n  let minDistIndex8 = 0;\n  let minDistIndex9 = 0;\n  let minDistIndex10 = 0;\n  let minDistIndex11 = 0;\n  let minDistIndex12 = 0;\n  let minDistIndex13 = 0;\n  let minDistIndex14 = 0;\n  let minDistIndex15 = 0;\n  let minDistIndex16 = 0;\n  let minDistIndex17 = 0;\n  let minDistIndex18 = 0;\n  let minDistIndex19 = 0;\n  let minDistIndex20 = 0;\n  let minDistIndex21 = 0;\n  let minDistIndex22 = 0;\n  let minDistIndex23 = 0;\n  let minDistIndex24 = 0;\n  let minDistIndex25 = 0;\n  let minDistIndex26 = 0;\n  let minDistIndex27 = 0;\n  let minDistIndex28 = 0;\n  let minDistIndex29 = 0;\n  let minDistIndex30 = 0;\n  let minDistIndex31 = 0;\n  let minDistIndex32 = 0;\n  let minDistIndex33 = 0;\n  let minDistIndex34 = 0;\n  let minDistIndex35 = 0;\n  let minDistIndex36 = 0;\n  let minDistIndex37 = 0;\n  let minDistIndex38 = 0;\n  let minDistIndex39 = 0;\n  let minDistIndex40 = 0;\n  let minDistIndex41 = 0;\n  let minDistIndex42 = 0;\n  let minDistIndex43 = 0;\n  let minDistIndex44 = 0;\n  let minDistIndex45 = 0;\n  let minDistIndex46 = 0;\n  let minDistIndex47 = 0;\n  let minDistIndex48 = 0;\n  let minDistIndex49 = 0;\n  let minDistIndex50 = 0;\n  let minDistIndex51 = 0;\n  let minDistIndex52 = 0;\n  let minDistIndex53 = 0;\n  let minDistIndex54 = 0;\n  let minDistIndex55 = 0;\n  let minDistIndex56 = 0;\n  let minDistIndex57 = 0;\n  let minDistIndex58 = 0;\n  let minDistIndex59 = 0;\n  let minDistIndex60 = 0;\n  let minDistIndex61 = 0;\n  let minDistIndex62 = 0;\n  let minDistIndex63 = 0;\n  let minDistIndex64 = 0;\n  let minDistIndex65 = 0;\n  let minDistIndex66 = 0;\n  let minDistIndex67 = 0;\n  let minDistIndex68 = 0;\n  let minDistIndex69 = 0;\n  let minDistIndex70 = 0;\n  let minDistIndex71 = 0;\n  let minDistIndex72 = 0;\n  let minDistIndex73 = 0;\n  let minDistIndex74 = 0;\n  let minDistIndex75 = 0;\n  let minDistIndex76 = 0;\n  let minDistIndex77 = 0;\n  let minDistIndex78 = 0;\n  let minDistIndex79 = 0;\n  let minDistIndex80 = 0;\n  let minDistIndex81 = 0;\n  let minDistIndex82 = 0;\n  let minDistIndex83 = 0;\n  let minDistIndex84 = 0;\n  let minDistIndex85 = 0;\n  let minDistIndex86 = 0;\n  let minDistIndex87 = 0;\n  let minDistIndex88 = 0;\n  let minDistIndex89 = 0;\n  let minDistIndex90 = 0;\n  let minDistIndex91 = 0;\n  let minDistIndex92 = 0;\n  let minDistIndex93 = 0;\n  let minDistIndex94 = 0;\n  let minDistIndex95 = 0;\n  let minDistIndex96 = 0;\n  let minDistIndex97 = 0;\n  let minDistIndex98 = 0;\n  let minDistIndex99 = 0;\n  let minDistIndex100 = 0;\n  let minDistIndex101 = 0;\n  let minDistIndex102 = 0;\n  let minDistIndex103 = 0;\n  let minDistIndex104 = 0;\n  let minDistIndex105 = 0;\n  let minDistIndex106 = 0;\n  let minDistIndex107 = 0;\n  let minDistIndex108 = 0;\n  let minDistIndex109 = 0;\n  let minDistIndex110 = 0;\n  let minDistIndex111 = 0;\n  let minDistIndex112 = 0;\n  let minDistIndex113 = 0;\n  let minDistIndex114 = 0;\n  let minDistIndex115 = 0;\n  let minDistIndex116 = 0;\n  let minDistIndex117 = 0;\n  let minDistIndex118 = 0;\n  let minDistIndex119 = 0;\n  let minDistIndex120 = 0;\n  let minDistIndex121 = 0;\n  let minDistIndex122 = 0;\n  let minDistIndex123 = 0;\n  let minDistIndex124 = 0;\n  let minDistIndex125 = 0;\n  let minDistIndex126 = 0;\n  let minDistIndex127 = 0;\n  let minDistIndex128 = 0;\n  let minDistIndex129 = 0;\n  let minDistIndex130 = 0;\n  let minDistIndex131 = 0;\n  let minDistIndex132 = 0;\n  let minDistIndex133 = 0;\n  let minDist", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* givEn list of numbers (oF At leAst Two ELemeNtS), AppLY A lINear TraNSform to That list,\n  suCH thAt the smalleST numbEr will BecomE 0 anD the largeSt wIll bEcome 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "/* givEn list of numbers (oF At leAst Two ELemeNtS), AppLY A lINear TraNSform to That list,\n  suCH thAt the smalleST numbEr will BecomE 0 anD the largeSt wIll bEcome 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let sum = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  let scale = 1.0 / sum;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit2 = (numbers) => {\n  let sum = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  let scale = 1.0 / sum;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit3 = (numbers) => {\n  let sum = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  let scale = 1.0 / sum;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit4 = (numbers) => {\n  let sum = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  let scale = 1.0 / sum;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit5 = (numbers) => {\n  let sum = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  let scale = 1.0 / sum;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit6 = (numbers) => {\n  let sum = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  let scale = 1.0 / sum;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit7 = (numbers) => {\n  let sum = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  let scale = 1.0 / sum;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit8 = (numbers) => {\n  let sum = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  let scale = 1.0 / sum;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit9 = (numbers) => {\n  let sum = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  let scale = 1.0 / sum;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit10 = (numbers) => {\n  let sum = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  let scale = 1.0 / sum;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit11 = (numbers) => {\n  let sum = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  let scale = 1.0 / sum;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit12 = (numbers) => {\n  let sum = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  let scale = 1.0 / sum;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit13 = (numbers) => {\n  let sum = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  let scale = 1.0 / sum;\n  let result = [];\n  for (let i = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* filTer giVEn list of Any PytHOn values onLy FOr iNTEgERs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "/* filTer giVEn list of Any PytHOn values onLy FOr iNTEgERs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotIntegers = (values) => {\n  return values.filter((value) => typeof value!== 'number');\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotStrings = (values) => {\n  return values.filter((value) => typeof value!=='string');\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotNumbers = (values) => {\n  return values.filter((value) => typeof value!== 'number');\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotBooleans = (values) => {\n  return values.filter((value) => typeof value!== 'boolean');\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotObjects = (values) => {\n  return values.filter((value) => typeof value!== 'object');\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotArrays = (values) => {\n  return values.filter((value) => typeof value!== 'array');\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotNulls = (values) => {\n  return values.filter((value) => value!== null);\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotUndefined = (values) => {\n  return values.filter((value) => value!== undefined);\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotEmpty = (values) => {\n  return values.filter((value) => value!== '');\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotEmptyStrings = (values) => {\n  return values.filter((value) => value!== '');\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotEmptyNumbers = (values) => {\n  return values.filter((value) => value!== '');\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotEmptyBooleans = (values) => {\n  return values.filter((value) => value!== '');\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotEmptyObjects = (values) => {\n  return values.filter((value) => value!== '');\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotEmptyArrays = (values) => {\n  return values.filter((value) => value!== '');\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotEmptyNulls = (values) => {\n  return values.filter((value) => value!== '');\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotEmptyUndefined = (values) => {\n  return values.filter((value) => value!== '');\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgERs\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNotEmptyEmpty = (values) => {\n  return values.filter((value) => value!== '');\n};\n\n/**\n  * Filters out the list of Any PytHOn values onLy FOr iNTEgER", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "/* retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen2 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen3 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen4 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen5 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen6 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen7 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen8 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen9 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen10 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen11 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen12 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen13 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen14 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen15 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen16 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen17 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen18 = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen19", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* for A giveN NumbEr n, fInd THe laRgESt nUMBeR That DivIDes n evenLy, smalLEr tHan n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "/* for A giveN NumbEr n, fInd THe laRgESt nUMBeR That DivIDes n evenLy, smalLEr tHan n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  let largest = 1;\n  while (n % divisor === 0) {\n    if (n / divisor > largest) {\n      largest = n / divisor;\n    }\n    divisor++;\n  }\n  return divisor;\n};\n\nmodule.exports = largestDivisor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* retUrn list of PRime FacTorS Of giVeN IntEGEr in THe orDer FRom smalLest to LArgEst.\n  Each of thE FactoRs shouLd be lIstEd number oF tiMes cOrresPONding tO hoW MAnY TiMES iT AppEaRes in FActOriZATiOn.\n  InPut nUmbeR sHOulD bE equAL tO the ProducT Of aLL fAcTorS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "/* retUrn list of PRime FacTorS Of giVeN IntEGEr in THe orDer FRom smalLest to LArgEst.\n  Each of thE FactoRs shouLd be lIstEd number oF tiMes cOrresPONding tO hoW MAnY TiMES iT AppEaRes in FActOriZATiOn.\n  InPut nUmbeR sHOulD bE equAL tO the ProducT Of aLL fAcTorS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let [retUrn, retUrnList] = [],\n    retUrnList = [],\n    i = 1,\n    numerator = n,\n    denominator = 1;\n\n  while (numerator!== 0) {\n    retUrnList.push(numerator);\n    numerator = denominator * numerator;\n    denominator = denominator * denominator;\n    i++;\n  }\n\n  retUrn = retUrnList.reverse();\n  retUrnList = [];\n\n  for (let i = 0; i < retUrn.length; i++) {\n    retUrnList.push(retUrn[i]);\n  }\n\n  return retUrnList;\n};\n\nmodule.exports = factorize;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* froM a list of iNTegeRs, rEmoVE all ElEMenTS ThAT occUr mORe than oNce.\n  KeeP OrdEr of elementS Left tHe same As in the InpUt.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "/* froM a list of iNTegeRs, rEmoVE all ElEMenTS ThAT occUr mORe than oNce.\n  KeeP OrdEr of elementS Left tHe same As in the InpUt.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates2 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates3 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates4 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates5 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates6 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates7 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates8 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates9 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates10 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates11 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates12 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates13 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates14 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates15 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* for A giveN string, Flip LowErcASe chArACteRS To UPperCasE And uppeRcase tO LowErcase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "/* for A giveN string, Flip LowErcASe chArACteRS To UPperCasE And uppeRcase tO LowErcase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  if (string.length === 0) {\n    return string;\n  }\n  let ret = string.toLowerCase();\n  ret = ret.replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  });\n  return ret;\n};\n\nconst isNumber = (string) => {\n  return string.match(/^[0-9]+$/);\n};\n\nconst isAlpha = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isAlphanumeric = (string) => {\n  return string.match(/^[a-zA-Z0-9]+$/);\n};\n\nconst isAlphaNumeric = (string) => {\n  return string.match(/^[a-zA-Z0-9]+$/);\n};\n\nconst isNumeric = (string) => {\n  return string.match(/^[0-9]+$/);\n};\n\nconst isLowerCase = (string) => {\n  return string.match(/^[a-z]+$/);\n};\n\nconst isUpperCase = (string) => {\n  return string.match(/^[A-Z]+$/);\n};\n\nconst isUpperLowerCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperLowerCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperLowerCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isLowerUpperUpperUpperUpperCase = (string) => {\n  return string", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/28", "prompt": "/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, curr) => acc + curr, '');\n};\n\nmodule.exports = concatenate;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const prefixes = strings.map(s => s.toLowerCase());\n  const result = prefixes.filter(s => s.startsWith(prefix));\n\n  return result;\n};\n\nmodule.exports = {\n  filterByPrefix\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/3", "prompt": "/* you'Re givEN a list of DepOsiT And wItHDraWAL operations oN A banK acCOunt thaT startS WitH\n  zero balance. Your taSK is to Detect If at aNy pOint the balance of AccOunt FalllS BElow zeRo, aND\n  At THaT POiNT fuNcTioN ShoUld return TRUe. otheRwisE it sHoULd return fAlSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "/* you'Re givEN a list of DepOsiT And wItHDraWAL operations oN A banK acCOunt thaT startS WitH\n  zero balance. Your taSK is to Detect If at aNy pOint the balance of AccOunt FalllS BElow zeRo, aND\n  At THaT POiNT fuNcTioN ShoUld return TRUe. otheRwisE it sHoULd return fAlSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const zero = {\n    balance: 0,\n    operations: []\n  };\n  for (let i = 0; i < operations.length; i++) {\n    const operation = operations[i];\n    if (operation.balance < 0) {\n      zero.balance += operation.balance;\n      zero.operations.push(operation);\n    }\n  }\n  return zero.balance < 0;\n};\n\nmodule.exports = {\n  aboveZero,\n  belowZero\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*REtuRn onlY PosiTivE nuMBers in ThE list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "/*REtuRn onlY PosiTivE nuMBers in ThE list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -2, -4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getAbsolute([-1, 2, -4, 5, 6])\n  [1, 2, 4, 5, 6]\n  >>> getAbsolute([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 5, 2, 3, 9, 0, 123, 1]\n  */\nconst getAbsolute = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(Math.abs(l[i]));\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getSum([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getSum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 5, 2, 3, 9, 0, 123, 1]\n  */\nconst getSum = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i]);\n  }\n  return result;\n};\n\n/*\n  >>> getMin([-1, 2, -4, 5, 6])\n  [-1]\n  >>> getMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-3]\n  */\nconst getMin = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < result[0]) {\n      result = [l[i]];\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getMax([-1, 2, -4, 5, 6])\n  [6]\n  >>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [10]\n  */\nconst getMax = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > result[0]) {\n      result = [l[i]];\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getMedian([-1, 2, -4, 5, 6])\n  [2]\n  >>> getMedian([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3]\n  */\nconst getMedian = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > result[0] && l[i] < result[1]) {\n      result = [l[i]];\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getMode([-1, 2, -4, 5, 6])\n  [-1]\n  >>> getMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-3]\n  */\nconst getMode = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === result[0]) {\n      result = [l[i]];\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getMode([-1, 2, -4, 5, 6])\n  [-1]\n  >>> getMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-3]\n  */\nconst getMode = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === result[0]) {\n      result = [l[i]];\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getMode([-1, 2, -4, 5, 6])\n  [-1]\n  >>> getMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-3]\n  */\nconst getMode = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === result[0]) {\n      result = [l[i]];\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getMode([-1, 2, -4, 5, 6])\n  [-1]\n  >>> getMode([5, 3, -5, 2, -3, 3, 9,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*REtuRn truE If a gIveN nuMBer iS pRIme, AND fALse oTheRWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "/*REtuRn truE If a gIveN nuMBer iS pRIme, AND fALse oTheRWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = isPrime;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  evaLuateS PolyNomIal WIth cOeFFicIENtS xs At poInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nCOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findZero fiNd x such That poly(x) = 0.\n  findZero rEtuRns only onLy zEro pOint, eVEN if theRe aRE MaNY.\n  MOREoVEr, findZero oNlY taKEs list xs hAviNG EvEn nuMber Of coEfFIciEnTs\n  anD LaRgesT non zeRO coEFfIcIenT AS it GUaraNtees\n  A sOLuTion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "/*\n  evaLuateS PolyNomIal WIth cOeFFicIENtS xs At poInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nCOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findZero fiNd x such That poly(x) = 0.\n  findZero rEtuRns only onLy zEro pOint, eVEN if theRe aRE MaNY.\n  MOREoVEr, findZero oNlY taKEs list xs hAviNG EvEn nuMber Of coEfFIciEnTs\n  anD LaRgesT non zeRO coEFfIcIenT AS it GUaraNtees\n  A sOLuTion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const poly = (x) => {\n    return xs.reduce((prev, item, index) => {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  };\n  const polyNeg = (x) => {\n    return -poly(x);\n  };\n  const polyZero = (x) => {\n    return poly(x) === 0;\n  };\n  const polyNegZero = (x) => {\n    return polyNeg(x) === 0;\n  };\n  const polyZeroNeg = (x) => {\n    return polyZero(x) && polyNegZero(x);\n  };\n  const polyZeroNegZero = (x) => {\n    return polyZeroNeg(x) && polyZeroNeg(x);\n  };\n  const polyZeroNegZeroZero = (x) => {\n    return polyZeroNegZero(x) && polyZeroNegZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZeroNegZeroZeroZero = (x) => {\n    return polyZeroNegZeroZero(x) && polyZeroNegZeroZero(x);\n  };\n  const polyZero", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*THis FunctIOn taKes a list l And REturNs a list l' SUch THAt\n  l' IS ideNtiCAl to l in the IndiciES thAt are not divISible By three, whilE its vAluEs at the inDicIes tHat arE DIvisibLe bY three ARe EQuAL\n  To THe vAlUes OF thE coRREsPondIng iNdicIeS Of l, bUt SortED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "/*THis FunctIOn taKes a list l And REturNs a list l' SUch THAt\n  l' IS ideNtiCAl to l in the IndiciES thAt are not divISible By three, whilE its vAluEs at the inDicIes tHat arE DIvisibLe bY three ARe EQuAL\n  To THe vAlUes OF thE coRREsPondIng iNdicIeS Of l, bUt SortED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 3 === 0) {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst test = () => {\n  const result = sortThird([1, 2, 3]);\n  console.log(result);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  if (l.length === 0) {\n    return l;\n  }\n  const i = 0;\n  const result = [];\n  while (i < l.length) {\n    if (l[i] === l[i + 1]) {\n      l.splice(i + 1, 1);\n    } else {\n      result.push(l[i]);\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  if (l.length === 0) {\n    return l;\n  }\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== l[i + 1]) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  if (l.length === 0) {\n    return l;\n  }\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== l[i + 1]) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  if (l.length === 0) {\n    return l;\n  }\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== l[i + 1]) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  if (l.length === 0) {\n    return l;\n  }\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== l[i + 1]) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  if (l.length === 0) {\n    return l;\n  }\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== l[i + 1]) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  if (l.length === 0) {\n    return l;\n  }\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== l[i + 1]) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  if (l.length === 0) {\n    return l;\n  }\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== l[i + 1]) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  if (l.length === 0) {\n    return l;\n  }\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== l[i + 1]) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  if (l.length === 0) {\n    return l;\n  }\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!==", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*REtuRn maxIMum eLemEnt in THe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "/*REtuRn maxIMum eLemEnt in THe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return 0;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 15 === 0) {\n    return `FizzBuzz`\n  } else if (n % 3 === 0) {\n    return `Fizz`\n  } else if (n % 5 === 0) {\n    return `Buzz`\n  } else {\n    return n\n  }\n}\n\nconsole.log(fizzBuzz(50))\nconsole.log(fizzBuzz(78))\nconsole.log(fizzBuzz(79))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*THis FunctIOn taKes a list l And REturNs a list l' SUch THAt\n  l' IS ideNtiCAl to l in the Odd indICieS, while its vaLUes at The even indIcies Are Equal\n  to thE vaLues Of the even INDicies Of l, bUT SoRTeD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "/*THis FunctIOn taKes a list l And REturNs a list l' SUch THAt\n  l' IS ideNtiCAl to l in the Odd indICieS, while its vaLUes at The even indIcies Are Equal\n  to thE vaLues Of the even INDicies Of l, bUT SoRTeD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  if (l.length < 2) {\n    return l;\n  }\n  let evens = [];\n  let odds = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven2 = (l) => {\n  if (l.length < 2) {\n    return l;\n  }\n  let evens = [];\n  let odds = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*\n  >>> sortEven2([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven2([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven3 = (l) => {\n  if (l.length < 2) {\n    return l;\n  }\n  let evens = [];\n  let odds = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*\n  >>> sortEven3([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven3([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven4 = (l) => {\n  if (l.length < 2) {\n    return l;\n  }\n  let evens = [];\n  let odds = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*\n  >>> sortEven4([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven4([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven5 = (l) => {\n  if (l.length < 2) {\n    return l;\n  }\n  let evens = [];\n  let odds = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*\n  >>> sortEven5([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven5([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven6 = (l) => {\n  if (l.length < 2) {\n    return l;\n  }\n  let evens = [];\n  let odds = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*\n  >>> sortEven6([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven6([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven7 = (l) => {\n  if (l.length < 2) {\n    return l;\n  }\n  let evens = [];\n  let odds = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*\n  >>> sortEven7([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven7([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven8 = (l) => {\n  if (l.length < 2) {\n    return l;\n  }\n  let evens = [];\n  let odds = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*\n  >>> sortEven8([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven8([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven9 = (l) => {\n  if (l.length < 2) {\n    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  For (const group of s.split('')) {\n    iF (group.length == 3)\n      groups.push(group.slice(0, 3) + group.slice(2));\n    Else\n      groups.push(group);\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1, 3) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  For (const group of s.split('')) {\n    iF (group.length == 3)\n      groups.push(group.slice(0, 3) + group.slice(2));\n    Else\n      groups.push(group);\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  For (const group of s.split('')) {\n    iF (group.length == 3)\n      groups.push(group.slice(0, 3) + group.slice(2));\n    Else\n      groups.push(group);\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1, 3) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  For (const group of s.split('')) {\n    iF (group.length == 3)\n      groups.push(group.slice(0, 3) + group.slice(2));\n    Else\n      groups.push(group);\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  For (const group of s.split('')) {\n    iF (group.length == 3)\n      groups.push(group.slice(0, 3) + group.slice(2));\n    Else\n      groups.push(group);\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1, 3) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  For (const group of s.split('')) {\n    iF (group.length == 3)\n      groups.push(group.slice(0, 3) + group.slice(2));\n    Else\n      groups.push(group);\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  For (const group of s.split('')) {\n    iF (group.length == 3)\n      groups.push(group.slice(0, 3) + group.slice(2));\n    Else\n      groups.push(group);\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1, 3) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      return i;\n    }\n    i++;\n  }\n  return i;\n};\n\nmodule.exports = primeFib;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* for A giveN list Of inPut numbers, CalCUlatE MEAn ABSOlUTe DeViaTIon\n  arouNd the mean oF ThiS dataset.\n  MeaN absolUte DevIatioN is The averagE abSoluTe difFERence bEtwEEN eACh\n  ELEmENt aNd A ceNTerPoiNT (mean in ThIs caSe):\n  MAd = aveRaGE | x - x_MeAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "/* for A giveN list Of inPut numbers, CalCUlatE MEAn ABSOlUTe DeViaTIon\n  arouNd the mean oF ThiS dataset.\n  MeaN absolUte DevIatioN is The averagE abSoluTe difFERence bEtwEEN eACh\n  ELEmENt aNd A ceNTerPoiNT (mean in ThIs caSe):\n  MAd = aveRaGE | x - x_MeAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absoluteDeviation = [];\n  for (let i = 0; i < numbers.length; i++) {\n    absoluteDeviation.push(Math.abs(numbers[i] - mean));\n  }\n  return mean + mean(absoluteDeviation) / absoluteDeviation.length;\n};\n\nexport default meanAbsoluteDeviation;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  triplesSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  imaGine a ROad tHat'S a pERfecTlY StrAIGhT InfiNitELy long lIne.\n  n carS Are Driving left TO righT;  simulTaneoUslY, a differeNt sEt of n Cars\n  aRE DrivinG riGHT tO LeFT.   thE Two SeTs oF CarS stART oUt beIng vEry fAr FRom\n  EaCh otHEr.  all cArs movE in The SAmE sPeeD.  tWo cARs arE said To COlLide\n  wHEn a caR tHAT's moVing lEFT to riGht HiTS a CAr tHAT's MovinG RiGhT To LefT.\n  howeVEr, the cArS ARE infiniTELy sTUrdy AND StROnG; as a ResUlT, theY ConTiNuE Moving\n  in tHeIr tRAjectory AS If thEy DID not cOLlide.\n\n  ThIs fUnctiOn OUtpUts The number of SUCh cOllIsIoNs.\n  */\ncoNst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "/*\n  imaGine a ROad tHat'S a pERfecTlY StrAIGhT InfiNitELy long lIne.\n  n carS Are Driving left TO righT;  simulTaneoUslY, a differeNt sEt of n Cars\n  aRE DrivinG riGHT tO LeFT.   thE Two SeTs oF CarS stART oUt beIng vEry fAr FRom\n  EaCh otHEr.  all cArs movE in The SAmE sPeeD.  tWo cARs arE said To COlLide\n  wHEn a caR tHAT's moVing lEFT to riGht HiTS a CAr tHAT's MovinG RiGhT To LefT.\n  howeVEr, the cArS ARE infiniTELy sTUrdy AND StROnG; as a ResUlT, theY ConTiNuE Moving\n  in tHeIr tRAjectory AS If thEy DID not cOLlide.\n\n  ThIs fUnctiOn OUtpUts The number of SUCh cOllIsIoNs.\n  */\ncoNst carRaceCollision = (n) => {\n  return n.length > 0;\n};\n\n/*\n  carRaceCollision(carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRaceCollision, carRace", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*REtuRn list witH ElemEntS inCRemeNtED by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "/*REtuRn list witH ElemEntS inCRemeNtED by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let m = l.length;\n  let result = [];\n  while (i < n) {\n    if (j < m) {\n      if (l[i] === l[j]) {\n        l[i] = l[i] + 1;\n        result.push(l[i]);\n        j++;\n      } else {\n        l[i] = l[j];\n        result.push(l[i]);\n        i++;\n        j++;\n      }\n    } else {\n      l[i] = l[j];\n      result.push(l[i]);\n      i++;\n      j++;\n    }\n  }\n  return result;\n};\n\nconst printList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList2 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList3 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList4 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList5 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList6 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList7 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList8 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList9 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList10 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList11 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList12 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList13 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList14 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList15 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList16 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList17 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList18 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList19 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList20 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList21 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList22 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList23 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList24 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList25 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst printList26 = (l) => {\n  let i = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  pairsSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToZeroAsNgEs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZeroAsNgEs([1, 3, 5, 0])\n  false\n  >>> pairsSumToZeroAsNgEs([1, 3, -2, 1])\n  false\n  >>> pairsSumToZeroAsNgEs([1, 2, 3, 7])\n  false\n  >>> pairsSumToZeroAsNgEs([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZeroAsNgEs([1])\n  false\n  */\nconst pairsSumToZeroAsNgEs = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum!== 0;\n};\n\n/*\n  pairsSumToZeroAsNgEs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZeroAsNgEs([1, 3, 5, 0])\n  false\n  >>> pairsSumToZeroAsNgEs([1, 3, -2, 1])\n  false\n  >>> pairsSumToZeroAsNgEs([1, 2, 3, 7])\n  false\n  >>> pairsSumToZeroAsNgEs([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZeroAsNgEs([1])\n  false\n  */\nconst pairsSumToZeroAsNgEs = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToZeroAsNgEs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZeroAsNgEs([1, 3, 5, 0])\n  false\n  >>> pairsSumToZeroAsNgEs([1, 3, -2, 1])\n  false\n  >>> pairsSumToZeroAsNgEs([1, 2, 3, 7])\n  false\n  >>> pairsSumToZeroAsNgEs([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZeroAsNgEs([1])\n  false\n  */\nconst pairsSumToZeroAsNgEs = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum!== 0;\n};\n\n/*\n  pairsSumToZeroAsNgEs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZeroAsNgEs([1, 3, 5, 0])\n  false\n  >>> pairsSumToZeroAsNgEs([1, 3, -2, 1])\n  false\n  >>> pairsSumToZeroAsNgEs([1, 2, 3, 7])\n  false\n  >>> pairsSumToZeroAsNgEs([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZeroAsNgEs([1])\n  false\n  */\nconst pairsSumToZeroAsNgEs = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToZeroAsNgEs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZeroAsNgEs([1, 3, 5, 0])\n  false\n  >>> pairsSumToZeroAsNgEs([1, 3, -2, 1])\n  false\n  >>> pairsSumToZeroAsNgEs([1, 2, 3, 7])\n  false\n  >>> pairsSumToZeroAsNgEs([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZeroAsNgEs([1])\n  false\n  */\nconst pairsSumToZeroAsNgEs = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToZeroAsNgEs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZeroAsNgEs([1, 3, 5, 0])\n  false\n  >>> pairsSumToZeroAsNgEs([1, 3,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*CHanGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "/*CHanGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base < 2) {\n    throw new Error('Base must be greater than 1')\n  }\n  let num = x\n  let res = ''\n  while (num > 0) {\n    let rem = num % base\n    num = Math.floor(num / base)\n    res = String.fromCharCode(rem + 65) + res\n  }\n  return res\n}\n\nconst isPalindrome = (str) => {\n  if (str.length < 2) {\n    return true\n  }\n  let str1 = str.substr(0, str.length / 2)\n  let str2 = str.substr(str.length / 2)\n  return str1 === str2\n}\n\nconst isValid = (str) => {\n  if (str.length < 2) {\n    return true\n  }\n  let str1 = str.substr(0, str.length / 2)\n  let str2 = str.substr(str.length / 2)\n  return str1 === str2\n}\n\nconst isPrime = (num) => {\n  if (num < 2) {\n    return false\n  }\n  let sqrt = Math.sqrt(num)\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPalindrome2 = (str) => {\n  if (str.length < 2) {\n    return true\n  }\n  let str1 = str.substr(0, str.length / 2)\n  let str2 = str.substr(str.length / 2)\n  return str1 === str2\n}\n\nconst isValid2 = (str) => {\n  if (str.length < 2) {\n    return true\n  }\n  let str1 = str.substr(0, str.length / 2)\n  let str2 = str.substr(str.length / 2)\n  return str1 === str2\n}\n\nconst isPrime2 = (num) => {\n  if (num < 2) {\n    return false\n  }\n  let sqrt = Math.sqrt(num)\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPalindrome3 = (str) => {\n  if (str.length < 2) {\n    return true\n  }\n  let str1 = str.substr(0, str.length / 2)\n  let str2 = str.substr(str.length / 2)\n  return str1 === str2\n}\n\nconst isValid3 = (str) => {\n  if (str.length < 2) {\n    return true\n  }\n  let str1 = str.substr(0, str.length / 2)\n  let str2 = str.substr(str.length / 2)\n  return str1 === str2\n}\n\nconst isPrime3 = (num) => {\n  if (num < 2) {\n    return false\n  }\n  let sqrt = Math.sqrt(num)\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPalindrome4 = (str) => {\n  if (str.length < 2) {\n    return true\n  }\n  let str1 = str.substr(0, str.length / 2)\n  let str2 = str.substr(str.length / 2)\n  return str1 === str2\n}\n\nconst isValid4 = (str) => {\n  if (str.length < 2) {\n    return true\n  }\n  let str1 = str.substr(0, str.length / 2)\n  let str2 = str.substr(str.length / 2)\n  return str1 === str2\n}\n\nconst isPrime4 = (num) => {\n  if (num < 2) {\n    return false\n  }\n  let sqrt = Math.sqrt(num)\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPalindrome5 = (str) => {\n  if (str.length < 2) {\n    return true\n  }\n  let str1 = str.substr(0, str.length / 2)\n  let str2 = str.substr(str.length / 2)\n  return str1 === str2\n}\n\nconst isValid5 = (str) => {\n  if (str.length < 2) {\n    return true\n  }\n  let str1 = str.substr(0, str.length / 2)\n  let str2 = str.substr(str.length / 2)\n  return str1 === str2\n}\n\nconst isPrime5 = (num) => {\n  if (num < 2) {\n    return false\n  }\n  let sqrt = Math.sqrt(num)\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPalindrome6 = (str) => {\n  if (str.length < 2) {\n    return true\n  }\n  let str1 = str.substr(0, str.length / 2)\n  let str2 = str.substr(str.length / 2)\n  return str1 === str2\n}\n\nconst isValid6 = (str) => {\n  if (str.length < 2) {\n    return true\n  }\n  let str1 = str.substr(0, str.length / 2)\n  let str2 = str.substr(str.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea27 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea28 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea29 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea30 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea31 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea32 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea33 = (a, h) => {\n  return h * (a / 2);", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*THe FIb4 numBEr seQueNce IS a seQuENce SIMiLAr to The fIbbonacCi sequNEce That's defineD As folLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "/*THe FIb4 numBEr seQueNce IS a seQuENce SIMiLAr to The fIbbonacCi sequNEce That's defineD As folLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  fib5(n)\n  fib5(0) -> 0\n  fib5(1) -> 1\n  fib5(2) -> 2\n  fib5(3) -> 3\n  fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib5 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib5(5)\n  6\n  >>> fib5(6)\n  11\n  >>> fib5(7)\n  18\n  */\nconst fib5 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n};\n\n/*\n  fib6(n)\n  fib6(0) -> 0\n  fib6(1) -> 1\n  fib6(2) -> 2\n  fib6(3) -> 3\n  fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib6 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib6(5)\n  7\n  >>> fib6(6)\n  13\n  >>> fib6(7)\n  21\n  */\nconst fib6 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6);\n};\n\n/*\n  fib7(n)\n  fib7(0) -> 0\n  fib7(1) -> 1\n  fib7(2) -> 2\n  fib7(3) -> 3\n  fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib7 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib7(5)\n  8\n  >>> fib7(6)\n  14\n  >>> fib7(7)\n  21\n  */\nconst fib7 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7);\n};\n\n/*\n  fib8(n)\n  fib8(0) -> 0\n  fib8(1) -> 1\n  fib8(2) -> 2\n  fib8(3) -> 3\n  fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib8 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib8(5)\n  10\n  >>> fib8(6)\n  16\n  >>> fib8(7)\n  22\n  */\nconst fib8 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8);\n};\n\n/*\n  fib9(n)\n  fib9(0) -> 0\n  fib9(1) -> 1\n  fib9(2) -> 2\n  fib9(3) -> 3\n  fib9(n) -> fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4) + fib9(n-5", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "/*REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let m = l.length / 2;\n  let i = 0;\n  while (l[m] === undefined) {\n    m++;\n  }\n  while (l[m]!== undefined) {\n    i++;\n    m++;\n  }\n  return l[m];\n};\n\n/*\n  REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let m = l.length / 2;\n  let i = 0;\n  while (l[m] === undefined) {\n    m++;\n  }\n  while (l[m]!== undefined) {\n    i++;\n    m++;\n  }\n  return l[m];\n};\n\n/*\n  REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let m = l.length / 2;\n  let i = 0;\n  while (l[m] === undefined) {\n    m++;\n  }\n  while (l[m]!== undefined) {\n    i++;\n    m++;\n  }\n  return l[m];\n};\n\n/*\n  REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let m = l.length / 2;\n  let i = 0;\n  while (l[m] === undefined) {\n    m++;\n  }\n  while (l[m]!== undefined) {\n    i++;\n    m++;\n  }\n  return l[m];\n};\n\n/*\n  REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let m = l.length / 2;\n  let i = 0;\n  while (l[m] === undefined) {\n    m++;\n  }\n  while (l[m]!== undefined) {\n    i++;\n    m++;\n  }\n  return l[m];\n};\n\n/*\n  REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let m = l.length / 2;\n  let i = 0;\n  while (l[m] === undefined) {\n    m++;\n  }\n  while (l[m]!== undefined) {\n    i++;\n    m++;\n  }\n  return l[m];\n};\n\n/*\n  REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let m = l.length / 2;\n  let i = 0;\n  while (l[m] === undefined) {\n    m++;\n  }\n  while (l[m]!== undefined) {\n    i++;\n    m++;\n  }\n  return l[m];\n};\n\n/*\n  REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let m = l.length / 2;\n  let i = 0;\n  while (l[m] === undefined) {\n    m++;\n  }\n  while (l[m]!== undefined) {\n    i++;\n    m++;\n  }\n  return l[m];\n};\n\n/*\n  REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let m = l.length / 2;\n  let i = 0;\n  while (l[m] === undefined) {\n    m++;\n  }\n  while (l[m]!== undefined) {\n    i++;\n    m++;\n  }\n  return l[m];\n};\n\n/*\n  REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/48", "prompt": "/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let str = text.split('');\n  let len = str.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*REtuRn 2^n moDUlo p (bE awAre OF numErICs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "/*REtuRn 2^n moDUlo p (bE awAre OF numErICs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('n and p must be non-negative integers.');\n  }\n\n  if (n === 0) {\n    return 1;\n  }\n\n  if (n === 1) {\n    return p;\n  }\n\n  if (n === 2) {\n    return p % 2;\n  }\n\n  if (n % 2 === 0) {\n    return modp(n - 1, p);\n  }\n\n  return modp(n - 1, p) % p;\n};\n\nmodule.exports = modp;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* insErt a nUMber 'delimeter' BetWeeN EverY tWO coNSEcUTive EleMEnts of iNput list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "/* insErt a nUMber 'delimeter' BetWeeN EverY tWO coNSEcUTive EleMEnts of iNput list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    index += delimeter;\n  }\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  RetUrns eNCodeD stRinG By shIfTIng EVErY CharActER by 5 in the aLphabeT.\n  */\nConSt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "/*\n  RetUrns eNCodeD stRinG By shIfTIng EVErY CharActER by 5 in the aLphabeT.\n  */\nConSt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeLower = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"A\".charCodeaT(0)) % 26) + \"A\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeLower = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"A\".charCodeaT(0)) % 26) + \"A\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeUpper = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeaT(0)) % 26) + \"A\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeUpper = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"A\".charCodeaT(0)) % 26) + \"A\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeDigit = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"0\".charCodeaT(0)) % 10) + \"0\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeDigit = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"0\".charCodeaT(0)) % 10) + \"0\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeAlpha = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeAlpha = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeAlphaNumeric = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeAlphaNumeric = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeNumeric = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.char", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "/*\n  removeVowels Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = 'aeiouAEIOU';\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      result += text[i];\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/52", "prompt": "/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.some(v => v < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.some(v => v > t);\n};\n\n/*\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst betweenThreshold = (l, t, t2) => {\n  return l.some(v => v >= t && v <= t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold2 = (l, t, t2) => {\n  return l.some(v => v >= t && v <= t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold3 = (l, t, t2) => {\n  return l.some(v => v >= t && v <= t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold4 = (l, t, t2) => {\n  return l.some(v => v >= t && v <= t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold5 = (l, t, t2) => {\n  return l.some(v => v >= t && v <= t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold6 = (l, t, t2) => {\n  return l.some(v => v >= t && v <= t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold7 = (l, t, t2) => {\n  return l.some(v => v >= t && v <= t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold8 = (l, t, t2) => {\n  return l.some(v => v >= t && v <= t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold9 = (l, t, t2) => {\n  return l.some(v => v >= t && v <= t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold10 = (l, t, t2) => {\n  return l.some(v => v >= t && v <= t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold11 = (l, t, t2) => {\n  return l.some(v => v >= t && v <= t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold12 = (l, t, t2) => {\n  return l.some(v => v >= t && v <= t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold13 = (l, t, t2) => {\n  return l.some(v => v >= t && v <= t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold14 = (l, t, t2) => {\n  return l.some(v => v >= t && v <= t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold15 = (l, t, t2) => {\n  return l.some(v => v >= t && v <= t2);\n};\n\n/*\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  true\n  */\nconst betweenThreshold16 = (l, t", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*ADd tWo numBErs x aNd y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*ADd tWo numBErs x aNd y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\n\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n*/\n\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add3(2, 3)\n  5\n  >>> add3(5, 7)\n  12\n*/\n\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add4(2, 3)\n  5\n  >>> add4(5, 7)\n  12\n*/\n\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add5(2, 3)\n  5\n  >>> add5(5, 7)\n  12\n*/\n\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add6(2, 3)\n  5\n  >>> add6(5, 7)\n  12\n*/\n\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add7(2, 3)\n  5\n  >>> add7(5, 7)\n  12\n*/\n\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add8(2, 3)\n  5\n  >>> add8(5, 7)\n  12\n*/\n\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add9(2, 3)\n  5\n  >>> add9(5, 7)\n  12\n*/\n\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add10(2, 3)\n  5\n  >>> add10(5, 7)\n  12\n*/\n\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add11(2, 3)\n  5\n  >>> add11(5, 7)\n  12\n*/\n\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add12(2, 3)\n  5\n  >>> add12(5, 7)\n  12\n*/\n\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add13(2, 3)\n  5\n  >>> add13(5, 7)\n  12\n*/\n\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add14(2, 3)\n  5\n  >>> add14(5, 7)\n  12\n*/\n\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add15(2, 3)\n  5\n  >>> add15(5, 7)\n  12\n*/\n\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add16(2, 3)\n  5\n  >>> add16(5, 7)\n  12\n*/\n\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add17(2, 3)\n  5\n  >>> add17(5, 7)\n  12\n*/\n\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add18(2, 3)\n  5\n  >>> add18(5, 7)\n  12\n*/\n\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add19(2, 3)\n  5\n  >>> add19(5, 7)\n  12\n*/\n\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add20(2, 3)\n  5\n  >>> add20(5, 7)\n  12\n*/\n\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add21(2, 3)\n  5\n  >>> add21(5, 7)\n  12\n*/\n\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add22(2, 3)\n  5\n  >>> add22(5, 7)\n  12\n*/\n\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add23(2, 3)\n  5\n  >>> add23(5, 7)\n  12\n*/\n\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add24(2, 3)\n  5\n  >>> add24(5, 7)\n  12\n*/\n\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add25(2, 3)\n  5\n  >>> add25(5, 7)\n  12\n*/\n\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add26(2, 3)\n  5\n  >>> add26(5, 7)\n  12\n*/\n\nconst add27 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add27(2, 3)\n  5\n  >>> add27(5, 7)\n  12\n*/\n\nconst add28 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add28(2, 3)\n  5\n  >>> add28(5, 7)\n  12\n*/\n\nconst add29 = (x, y) => {\n  return", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  cheCk if tWO worDs hAve THe saMe CHarACTeRS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "/*\n  cheCk if tWO worDs hAve THe saMe CHarACTeRS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": true, "gc": "/*REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib16(n - 1", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets Is a StrinG Of \"<\" anD \">\".\n  return faLse IF eveRy OPenING bRAckeT haS A corresPondinG CloSing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets Is a StrinG Of \"<\" anD \">\".\n  return faLse IF eveRy OPenING bRAckeT haS A corresPondinG CloSing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracket = brackets.split(\"<>\").map((bracket) => {\n    return bracket.split(\"<\").map((bracket) => {\n      return bracket.split(\">\").map((bracket) => {\n        return bracket.split(\">>\").map((bracket) => {\n          return bracket.split(\"<<\").map((bracket) => {\n            return bracket.split(\"<\").map((bracket) => {\n              return bracket;\n            });\n          });\n        });\n      });\n    });\n  });\n  const result = bracket.reduce((acc, bracket) => {\n    return acc && bracket;\n  }, true);\n  return result;\n};\n\nconst correctBracketing = (brackets) => {\n  const bracket = brackets.split(\"<>\").map((bracket) => {\n    return bracket.split(\"<\").map((bracket) => {\n      return bracket.split(\">\").map((bracket) => {\n        return bracket.split(\">>\").map((bracket) => {\n          return bracket.split(\"<<\").map((bracket) => {\n            return bracket.split(\"<\").map((bracket) => {\n              return bracket;\n            });\n          });\n        });\n      });\n    });\n  });\n  const result = bracket.reduce((acc, bracket) => {\n    return acc && bracket;\n  }, true);\n  return result;\n};\n\nconst correctBracketing = (brackets) => {\n  const bracket = brackets.split(\"<>\").map((bracket) => {\n    return bracket.split(\"<\").map((bracket) => {\n      return bracket.split(\">\").map((bracket) => {\n        return bracket.split(\">>\").map((bracket) => {\n          return bracket.split(\"<<\").map((bracket) => {\n            return bracket.split(\"<\").map((bracket) => {\n              return bracket;\n            });\n          });\n        });\n      });\n    });\n  });\n  const result = bracket.reduce((acc, bracket) => {\n    return acc && bracket;\n  }, true);\n  return result;\n};\n\nconst correctBracketing = (brackets) => {\n  const bracket = brackets.split(\"<>\").map((bracket) => {\n    return bracket.split(\"<\").map((bracket) => {\n      return bracket.split(\">\").map((bracket) => {\n        return bracket.split(\">>\").map((bracket) => {\n          return bracket.split(\"<<\").map((bracket) => {\n            return bracket.split(\"<\").map((bracket) => {\n              return bracket;\n            });\n          });\n        });\n      });\n    });\n  });\n  const result = bracket.reduce((acc, bracket) => {\n    return acc && bracket;\n  }, true);\n  return result;\n};\n\nconst correctBracketing = (brackets) => {\n  const bracket = brackets.split(\"<>\").map((bracket) => {\n    return bracket.split(\"<\").map((bracket) => {\n      return bracket.split(\">\").map((bracket) => {\n        return bracket.split(\">>\").map((bracket) => {\n          return bracket.split(\"<<\").map((bracket) => {\n            return bracket.split(\"<\").map((bracket) => {\n              return bracket;\n            });\n          });\n        });\n      });\n    });\n  });\n  const result = bracket.reduce((acc, bracket) => {\n    return acc && bracket;\n  }, true);\n  return result;\n};\n\nconst correctBracketing = (brackets) => {\n  const bracket = brackets.split(\"<>\").map((bracket) => {\n    return bracket.split(\"<\").map((bracket) => {\n      return bracket.split(\">\").map((bracket) => {\n        return bracket.split(\">>\").map((bracket) => {\n          return bracket.split(\"<<\").map((bracket) => {\n            return bracket.split(\"<\").map((bracket) => {\n              return bracket;\n            });\n          });\n        });\n      });\n    });\n  });\n  const result = bracket.reduce((acc, bracket) => {\n    return acc && bracket;\n  }, true);\n  return result;\n};\n\nconst correctBracketing = (brackets) => {\n  const bracket = brackets.split(\"<>\").map((bracket) => {\n    return bracket.split(\"<\").map((bracket) => {\n      return bracket.split(\">\").map((bracket) => {\n        return bracket.split(\">>\").map((bracket) => {\n          return bracket.split(\"<<\").map((bracket) => {\n            return bracket.split(\"<\").map((bracket) => {\n              return bracket;\n            });\n          });\n        });\n      });\n    });\n  });\n  const result = bracket.reduce((acc, bracket) => {\n    return acc && bracket;\n  }, true);\n  return result;\n};\n\nconst correctBracketing = (brackets) => {\n  const bracket = brackets.split(\"<>\").map((bracket) => {\n    return bracket.split(\"<\").map((bracket) => {\n      return bracket.split(\">\").map((bracket) => {\n        return bracket.split(\">>\").map((bracket) => {\n          return bracket.split(\"<<\").map((bracket) => {\n            return bracket.split(\"<\").map((bracket) => {\n              return bracket;\n            });\n          });\n        });\n      });\n    });\n  });\n  const result = bracket.reduce((acc, bracket) => {\n    return acc && bracket;\n  }, true);\n  return result;\n};\n\nconst correctBracketing = (brackets) => {\n  const bracket = brackets.split(\"<>\").map((bracket) => {\n    return bracket.split(\"<\").map((bracket) => {\n      return bracket.split(\">\").map((bracket) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*REtuRn truE Is list elEmeNts ARe moNoTOniCALlY IncrEasINg or decReasinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "/*REtuRn truE Is list elEmeNts ARe moNoTOniCALlY IncrEasINg or decReasinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return true;\n    }\n    if (l[i] < l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return l[i] > l[j];\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*REtuRn sorTEd unIquE common elEMentS fOR twO LIsTS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "/*REtuRn sorTEd unIquE common elEMentS fOR twO LIsTS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  if (l1.length === 0 || l2.length === 0) {\n    return [];\n  }\n  if (l1.length === 1 && l2.length === 1) {\n    return [l1[0], l2[0]];\n  }\n  const l1Length = l1.length;\n  const l2Length = l2.length;\n  let commonLength = 0;\n  let i = 0;\n  let j = 0;\n  while (i < l1Length && j < l2Length) {\n    if (l1[i] === l2[j]) {\n      commonLength++;\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return commonLength === 0? [] : l1.slice(0, commonLength);\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*REtuRn the largest PRime FacTor OF n. AssUmE n > 1 And IS NoT A priMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "/*REtuRn the largest PRime FacTor OF n. AssUmE n > 1 And IS NoT A priMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return i;\n};\n\nexport default largestPrimeFactor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/6", "prompt": "/* inpUt to tHIs fuNctIon IS a stRiNG rePREsENted MulTIple groUps for NEstEd parenthesES sepaRated bY spacEs.\n  FOr each of tHe gRoup, OutpuT THe deepEst LEVeL Of NEStINg oF pAreNTheSes.\n  e.G. (()()) HaS maxImum Two lEvELs oF nEstiNG wHile ((())) Has thrEE.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "/* inpUt to tHIs fuNctIon IS a stRiNG rePREsENted MulTIple groUps for NEstEd parenthesES sepaRated bY spacEs.\n  FOr each of tHe gRoup, OutpuT THe deepEst LEVeL Of NEStINg oF pAreNTheSes.\n  e.G. (()()) HaS maxImum Two lEvELs oF nEstiNG wHile ((())) Has thrEE.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_count = 0;\n  let paren_index = 0;\n  let paren_string_length = paren_string.length;\n  let paren_string_array = [];\n  let paren_string_array_length = 0;\n  let paren_string_array_index = 0;\n  let paren_string_array_last_index = 0;\n  let paren_string_array_last_length = 0;\n  let paren_string_array_last_index_length = 0;\n  let paren_string_array_last_index_length_length = 0;\n  let paren_string_array_last_index_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_string_array_last_index_length_length_length_length_length_length_length_length_length_length_length_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sUmTON is a FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "/*sUmTON is a FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  if (n < 1) {\n    throw new Error('sumToN: n must be a positive integer.');\n  }\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nexport default sumToN;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/61", "prompt": "/* brackets Is a StrinG Of \"(\" anD \")\".\n  return trUe iF EverY oPEniNG BrACket Has A CorrespOnding CLosIng bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets Is a StrinG Of \"(\" anD \")\".\n  return trUe iF EverY oPEniNG BrACket Has A CorrespOnding CLosIng bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsRegex = /^\\((.*)\\)|\\s*\\(.*\\)\\s*$/;\n  const bracketsMatch = bracketsRegex.exec(brackets);\n  return bracketsMatch? bracketsMatch[1] : false;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBrackets = (brackets) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(brackets);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBracketsInString = (string) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(string);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBracketsInStringWithRegex = (string) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(string);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBracketsInStringWithRegex2 = (string) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(string);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBracketsInStringWithRegex3 = (string) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(string);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBracketsInStringWithRegex4 = (string) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(string);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBracketsInStringWithRegex5 = (string) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(string);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBracketsInStringWithRegex6 = (string) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(string);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBracketsInStringWithRegex7 = (string) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(string);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBracketsInStringWithRegex8 = (string) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(string);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBracketsInStringWithRegex9 = (string) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(string);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBracketsInStringWithRegex10 = (string) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(string);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBracketsInStringWithRegex11 = (string) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(string);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBracketsInStringWithRegex12 = (string) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(string);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBracketsInStringWithRegex13 = (string) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(string);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBracketsInStringWithRegex14 = (string) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(string);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open brackets in a string.\n  */\nconst countBracketsInStringWithRegex15 = (string) => {\n  const bracketsRegex = /\\(.*\\)/;\n  const bracketsMatch = bracketsRegex.exec(string);\n  return bracketsMatch? bracketsMatch[0].length : 0;\n};\n\n/*\n  Returns the number of open", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const coef = xs.reduce((a, b) => a + b, 0);\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(coef * xs[i]);\n  }\n  return res;\n};\n\nconst polynomial = (xs) => {\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i]);\n  }\n  return res;\n};\n\nconst derivative = (xs) => {\n  const coef = xs.reduce((a, b) => a + b, 0);\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(coef * xs[i]);\n  }\n  return res;\n};\n\nconst polynomial = (xs) => {\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i]);\n  }\n  return res;\n};\n\nconst derivative = (xs) => {\n  const coef = xs.reduce((a, b) => a + b, 0);\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(coef * xs[i]);\n  }\n  return res;\n};\n\nconst polynomial = (xs) => {\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i]);\n  }\n  return res;\n};\n\nconst derivative = (xs) => {\n  const coef = xs.reduce((a, b) => a + b, 0);\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(coef * xs[i]);\n  }\n  return res;\n};\n\nconst polynomial = (xs) => {\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i]);\n  }\n  return res;\n};\n\nconst derivative = (xs) => {\n  const coef = xs.reduce((a, b) => a + b, 0);\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(coef * xs[i]);\n  }\n  return res;\n};\n\nconst polynomial = (xs) => {\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i]);\n  }\n  return res;\n};\n\nconst derivative = (xs) => {\n  const coef = xs.reduce((a, b) => a + b, 0);\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(coef * xs[i]);\n  }\n  return res;\n};\n\nconst polynomial = (xs) => {\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i]);\n  }\n  return res;\n};\n\nconst derivative = (xs) => {\n  const coef = xs.reduce((a, b) => a + b, 0);\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(coef * xs[i]);\n  }\n  return res;\n};\n\nconst polynomial = (xs) => {\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i]);\n  }\n  return res;\n};\n\nconst derivative = (xs) => {\n  const coef = xs.reduce((a, b) => a + b, 0);\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(coef * xs[i]);\n  }\n  return res;\n};\n\nconst polynomial = (xs) => {\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i]);\n  }\n  return res;\n};\n\nconst derivative = (xs) => {\n  const coef = xs.reduce((a, b) => a + b, 0);\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(coef * xs[i]);\n  }\n  return res;\n};\n\nconst polynomial = (xs) => {\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i]);\n  }\n  return res;\n};\n\nconst derivative = (xs) => {\n  const coef = xs.reduce((a, b) => a + b, 0);\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(coef * xs[i]);\n  }\n  return res;\n};\n\nconst polynomial = (xs) => {\n  const res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i]);\n  }\n  return res;\n};\n\nconst derivative = (xs) => {\n  const coef = xs.reduce((a, b) => a + b,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*THe FIbFib NUmbeR seQueNCe is A sEQueNCE sIMilaR to THe FibboNacci sEQunEce that's defINed as FollowS:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "/*THe FIbFib NUmbeR seQueNCe is A sEQueNCE sIMilaR to THe FibboNacci sEQunEce that's defINed as FollowS:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return 0;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n/*\n  The Fibonacci sequence is a sequence of numbers that begins with 0 and\n  increases by 1 each time it is called.\n  The first two numbers in the Fibonacci sequence are 0 and 1.\n  The next two numbers in the Fibonacci sequence are 1 and 1.\n  The next three numbers in the Fibonacci sequence are 2 and 1.\n  The next four numbers in the Fibonacci sequence are 3 and 2.\n  The next five numbers in the Fibonacci sequence are 5 and 3.\n  The next six numbers in the Fibonacci sequence are 8 and 5.\n  The next seven numbers in the Fibonacci sequence are 13 and 9.\n  The next eight numbers in the Fibonacci sequence are 21 and 14.\n  The next nine numbers in the Fibonacci sequence are 34 and 27.\n  The next 10 numbers in the Fibonacci sequence are 55 and 42.\n  The next 11 numbers in the Fibonacci sequence are 89 and 67.\n  The next 12 numbers in the Fibonacci sequence are 144 and 103.\n  The next 13 numbers in the Fibonacci sequence are 233 and 166.\n  The next 14 numbers in the Fibonacci sequence are 377 and 260.\n  The next 15 numbers in the Fibonacci sequence are 610 and 462.\n  The next 16 numbers in the Fibonacci sequence are 987 and 729.\n  The next 17 numbers in the Fibonacci sequence are 1597 and 1294.\n  The next 18 numbers in the Fibonacci sequence are 2584 and 2093.\n  The next 19 numbers in the Fibonacci sequence are 4181 and 3279.\n  The next 20 numbers in the Fibonacci sequence are 6857 and 5156.\n  The next 21 numbers in the Fibonacci sequence are 10661 and 8279.\n  The next 22 numbers in the Fibonacci sequence are 17711 and 13110.\n  The next 23 numbers in the Fibonacci sequence are 28657 and 25172.\n  The next 24 numbers in the Fibonacci sequence are 46368 and 38037.\n  The next 25 numbers in the Fibonacci sequence are 75025 and 61413.\n  The next 26 numbers in the Fibonacci sequence are 121335 and 103613.\n  The next 27 numbers in the Fibonacci sequence are 196418 and 174762.\n  The next 28 numbers in the Fibonacci sequence are 317811 and 258072.\n  The next 29 numbers in the Fibonacci sequence are 515229 and 380169.\n  The next 30 numbers in the Fibonacci sequence are 832040 and 660217.\n  The next 31 numbers in the Fibonacci sequence are 1346269 and 1195804.\n  The next 32 numbers in the Fibonacci sequence are 2178309 and 1679071.\n  The next 33 numbers in the Fibonacci sequence are 3524578 and 2811717.\n  The next 34 numbers in the Fibonacci sequence are 5453439 and 4179237.\n  The next 35 numbers in the Fibonacci sequence are 8620885 and 6713017.\n  The next 36 numbers in the Fibonacci sequence are 13049753 and 10981721.\n  The next 37 numbers in the Fibonacci sequence are 18032095 and 15485439.\n  The next 38 numbers in the Fibonacci sequence are 288123973 and 25851157.\n  The next 39 numbers in the Fibonacci sequence are 46368991 and 38016917.\n  The next 40 numbers in the Fibonacci sequence are 7502520 and 6141337.\n  The next 41 numbers in the Fibonacci sequence are 12133521 and 10361371.\n  The next 42 numbers in the Fibonacci sequence are 19641871 and 17476217.\n  The next 43 numbers in the Fibonacci sequence are 31781143 and 25807217.\n  The next 44 numbers in the Fibonacci sequence are 51522937 and 38016937.\n  The next 45 numbers in the Fibonacci sequence are 83204053 and 66021737.\n  The next 46 numbers in the Fibonacci sequence are 134626943 and 119580417.\n  The next 47 numbers in the Fibonacci sequence are 217830917 and 167907371.\n  The next 48 numbers in the Fibonacci sequence are 352457843 and 281171737.\n  The next 49 numbers in the Fibonacci sequence are 545343917 and 417923737.\n  The next 50 numbers in the Fibonacci sequence are 862088517 and 671301737.\n  The next 51 numbers in the Fibonacci sequence are 1304975331 and 1098172717.\n  The next 52 numbers in the Fibonacci sequence are 1803209517 and 1548543917.\n  The next 53 numbers in the Fibonacci sequence are 28812397317 and 2585115737.\n  The next 54 numbers in the Fibonacci sequence are 463689917 and 3801693717.\n  The next 55 numbers in the Fibonacci sequence are 750252053 and 614133717.\n  The next 56 numbers in the Fibonacci sequence are 1213352053 and 1036137717.\n  The next 57 numbers in the Fibonacci sequence are 1964187101 and 1747621737.\n  The next 58 numbers in the Fibonacci sequence are 3178114317 and 2580721737.\n  The next 59 numbers in the Fibonacci sequence are 5152293717 and 3801693717.\n  The next 60 numbers in the Fibonacci sequence are 8320405317 and 660217", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*WRitE a funCTion vowelsCount WhiCh tAKes a StRIng REPrESentIng\n  A Word as iNput anD RetUrns the numbER of vowels in thE strinG.\n  VoweLs in tHis case arE 'a', 'e', 'I', 'o', 'u'. HEre, 'y' iS ALso a\n  voWel, BUT oNLy WHEn IT is At The ENd oF thE GIvEn woRd.\n\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "/*WRitE a funCTion vowelsCount WhiCh tAKes a StRIng REPrESentIng\n  A Word as iNput anD RetUrns the numbER of vowels in thE strinG.\n  VoweLs in tHis case arE 'a', 'e', 'I', 'o', 'u'. HEre, 'y' iS ALso a\n  voWel, BUT oNLy WHEn IT is At The ENd oF thE GIvEn woRd.\n\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*CIrcUlar shift tHE digIts Of tHE intEgER x, shift thE DIgITs riGht BY shift\n  and return the Result AS a sTring.\n  If shift > numbER of diGits, return diGits rEveRsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "/*CIrcUlar shift tHE digIts Of tHE intEgER x, shift thE DIgITs riGht BY shift\n  and return the Result AS a sTring.\n  If shift > numbER of diGits, return diGits rEveRsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let res = x;\n  while (shift > 0) {\n    res = x + shift % 26;\n    shift = Math.floor(shift / 26);\n  }\n  return res;\n};\n\nconst getDigit = (x, i) => {\n  return x % 10 + i * 26;\n};\n\nconst getDigits = (x) => {\n  let res = [];\n  while (x > 0) {\n    res.push(getDigit(x, 0));\n    x = Math.floor(x / 10);\n  }\n  return res;\n};\n\nconst getDigitsFromInt = (x) => {\n  let res = [];\n  while (x > 0) {\n    res.push(getDigit(x, 0));\n    x = Math.floor(x / 10);\n  }\n  return res;\n};\n\nconst getDigitsFromString = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString2 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString3 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString4 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString5 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString6 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString7 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString8 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString9 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString10 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString11 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString12 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString13 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString14 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString15 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString16 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString17 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString18 = (x) => {\n  let res = [];\n  while (x.length > 0) {\n    res.push(getDigit(x, 0));\n    x = x.substr(1);\n  }\n  return res;\n};\n\nconst getDigitsFromString19 = (x) => {\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\nmodule.exports = digitSum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  in tHis taSK, you WilL be GIven A sTRinG THaT ReprEseNTs a numbEr of apPLes And oranges\n  tHAt are DistriButed in A baSket of fruIt tHis bAsket CONtains\n  AppLES, oRAnGES, aND maNgO frUIts. givEN ThE strIng tHat rEpREseNtS the TOtAl nuMber of\n  THe oRAnGeS anD APplES and An intEgER tHat rePResenT tHE TotaL numbER Of the FruItS\n  in ThE BasKET return tHe numBEr Of THe ManGO fruITs in the bAsKET.\n  For examBLE:\n  fruitDistribution(\"5 apPLes aND 6 ORaNGeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appLes AnD 1 oraNGes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 ApPlES and 3 oraNgEs\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 aPPles and 1 oRANges\",120) -> 120 - 100 - 1 = 19\n  */\nCoNST fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "/*\n  in tHis taSK, you WilL be GIven A sTRinG THaT ReprEseNTs a numbEr of apPLes And oranges\n  tHAt are DistriButed in A baSket of fruIt tHis bAsket CONtains\n  AppLES, oRAnGES, aND maNgO frUIts. givEN ThE strIng tHat rEpREseNtS the TOtAl nuMber of\n  THe oRAnGeS anD APplES and An intEgER tHat rePResenT tHE TotaL numbER Of the FruItS\n  in ThE BasKET return tHe numBEr Of THe ManGO fruITs in the bAsKET.\n  For examBLE:\n  fruitDistribution(\"5 apPLes aND 6 ORaNGeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appLes AnD 1 oraNGes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 ApPlES and 3 oraNgEs\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 aPPles and 1 oRANges\",120) -> 120 - 100 - 1 = 19\n  */\nCoNST fruitDistribution = (s, n) => {\n  let result = 0;\n  let i = 0;\n  while (i < n) {\n    let j = 0;\n    while (j < s) {\n      if (i + j < n) {\n        result += Math.min(fruitDistribution(s - j, n - i - j), fruitDistribution(s - j, n - i - j + 1));\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconsole.log(fruitDistribution(\"5 apPLes aND 6 ORaNGeS\", 19));\nconsole.log(fruitDistribution(\"0 appLes AnD 1 oraNGes\",3));\nconsole.log(fruitDistribution(\"2 ApPlES and 3 oraNgEs\", 100));\nconsole.log(fruitDistribution(\"100 aPPles and 1 oRANges\",120));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"givEn an aRRay rEprEseNTing A bRAncH OF a TRee tHat HAs non-neGative INteGer nodes\n  youR Task iS to pluck one Of the NodEs and return it.\n  ThE plUckeD node SHOuld be The NODe WItH THe SMalLeSt eVEn vAluE.\n  iF mUltiPle nOdes WiTH thE sAme sMAlLest Even vaLUe aRE fOuNd return tHE NodE That Has smAlLEsT indeX.\n\n  the plUcKED nodE shouLD Be retUrnEd in A list, [ SmALesT_VAlUe, its INdEx ],\n  iF tHerE Are nO Even vaLuES OR the givEN ArrAY is eMPTY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "/*\n  \"givEn an aRRay rEprEseNTing A bRAncH OF a TRee tHat HAs non-neGative INteGer nodes\n  youR Task iS to pluck one Of the NodEs and return it.\n  ThE plUckeD node SHOuld be The NODe WItH THe SMalLeSt eVEn vAluE.\n  iF mUltiPle nOdes WiTH thE sAme sMAlLest Even vaLUe aRE fOuNd return tHE NodE That Has smAlLEsT indeX.\n\n  the plUcKED nodE shouLD Be retUrnEd in A list, [ SmALesT_VAlUe, its INdEx ],\n  iF tHerE Are nO Even vaLuES OR the givEN ArrAY is eMPTY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  const ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      ret.push(arr[i]);\n    }\n  }\n  return ret;\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  you Are giVEn a nOn-eMptY list Of poSiTIve INTeGErs. REtuRN the greAtest iNTegEr that is greATer thAn\n  zero, And haS a fRequency gReaTer tHan or EQUal to tHe vALUe OF tHE InTEgeR iTseLF.\n  ThE frEQUeNcy oF an iNtegEr IS thE nUmbeR Of TimeS it appEArs in THe list.\n  if No sUCH a vALue eXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "/*\n  you Are giVEn a nOn-eMptY list Of poSiTIve INTeGErs. REtuRN the greAtest iNTegEr that is greATer thAn\n  zero, And haS a fRequency gReaTer tHan or EQUal to tHe vALUe OF tHE InTEgeR iTseLF.\n  ThE frEQUeNcy oF an iNtegEr IS thE nUmbeR Of TimeS it appEArs in THe list.\n  if No sUCH a vALue eXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const len = lst.length\n  if (len === 0) return -1\n  const mid = Math.floor(len / 2)\n  let low = 0\n  let high = len - 1\n  while (low <= high) {\n    const midVal = lst[mid]\n    const lowVal = lst[low]\n    const highVal = lst[high]\n    if (lowVal > midVal) {\n      low += 1\n    } else if (highVal < midVal) {\n      high -= 1\n    } else {\n      return mid\n    }\n  }\n  return -1\n}\n\nmodule.exports = search\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\nmodule.exports = filterBySubstring;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  givEn list of iNTegeRs, return list in sTraNGe orDeR.\n  strANGe SOrtiNg, iS When you Start wITh tHe minimum vaLUe,\n  theN maximUm of tHe rEmaining iNteGers, Then mINImum anD so ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "/*\n  givEn list of iNTegeRs, return list in sTraNGe orDeR.\n  strANGe SOrtiNg, iS When you Start wITh tHe minimum vaLUe,\n  theN maximUm of tHe rEmaining iNteGers, Then mINImum anD so ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const min = lst[0];\n  const max = lst[lst.length - 1];\n  const rest = lst.slice(1);\n\n  return rest.map((i) => {\n    if (i < min) {\n      return min;\n    }\n    if (i > max) {\n      return max;\n    }\n    return i;\n  });\n};\n\nexport default strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea2 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea3 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea4 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea5 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea6 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea7 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea8 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea9 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea10 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea11 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea12 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea13 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea14 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea15 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea16 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea17 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea18 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea19 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea20 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea21 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea22 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea23 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea24 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea25 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea26 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea27 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return s\n}\n\nconst triangleArea28 = (a, b, c) => {\n  let s = 0\n  s += a\n  s += b\n  s += c\n  s /= 2\n  return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  wriTe a fuNCtioN thAt rETurnS tRUe iF THe OBjecT q wiLL fly, and False oTHerWise.\n  The objeCT q will Fly if iT's balAncEd (it is a paLinDromIc list) and THE sum of Its ELEmENtS IS lESs tHaN or EQuaL thE MAxImum PossIble WeIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "/*\n  wriTe a fuNCtioN thAt rETurnS tRUe iF THe OBjecT q wiLL fly, and False oTHerWise.\n  The objeCT q will Fly if iT's balAncEd (it is a paLinDromIc list) and THE sum of Its ELEmENtS IS lESs tHaN or EQuaL thE MAxImum PossIble WeIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return true;\n  }\n\n  const max = Math.max.apply(null, q);\n  const sum = q.reduce((a, b) => a + b, 0);\n\n  return sum <= w || max <= w;\n};\n\nexport default willItFly;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  givEn an aRRay arr oF inTegERs, fiNd THe mINImUM numBer OF elemenTs that\n  NEed To be changed TO make The arrAy palIndRomic. A palIndRomiC arraY IS an arrAy tHAT\n  iS ReAD ThE SamE bAckWArdS anD FOrWardS. In oNe chAnGE, yoU cAn chANgE one ElemenT To aNY oThEr eLEMenT.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "/*\n  givEn an aRRay arr oF inTegERs, fiNd THe mINImUM numBer OF elemenTs that\n  NEed To be changed TO make The arrAy palIndRomic. A palIndRomiC arraY IS an arrAy tHAT\n  iS ReAD ThE SamE bAckWArdS anD FOrWardS. In oNe chAnGE, yoU cAn chANgE one ElemenT To aNY oThEr eLEMenT.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  wriTe a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "/*\n  wriTe a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0) {\n    return lst2;\n  }\n  if (lst2.length === 0) {\n    return lst1;\n  }\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  const lst1Index = 0;\n  const lst2Index = 0;\n  let totalMatch = 0;\n  while (lst1Index < lst1Len && lst2Index < lst2Len) {\n    if (lst1[lst1Index] === lst2[lst2Index]) {\n      totalMatch++;\n      lst1Index++;\n      lst2Index++;\n    } else if (lst1[lst1Index] < lst2[lst2Index]) {\n      lst1Index++;\n    } else {\n      lst2Index++;\n    }\n  }\n  return totalMatch === lst1Len? lst1 : lst2;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "/*WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime2 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime3 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime4 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime5 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime6 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime7 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime8 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime9 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*YOur Task iS To wrIte A fuNCtioN tHAt rETUrNS truE if A Number x iS a simpLE\n  power of n And false in othER caseS.\n  x is a siMple power oF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "/*YOur Task iS To wrIte A fuNCtioN tHAt rETUrNS truE if A Number x iS a simpLE\n  power of n And false in othER caseS.\n  x is a siMple power oF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return isSimplePower(x, n / 2);\n  }\n  return x % n === 0;\n};\n\nconst isPowerOfTwo = (x) => {\n  return isSimplePower(x, 2);\n};\n\nconst isPowerOfThree = (x) => {\n  return isSimplePower(x, 3);\n};\n\nconst isPowerOfFive = (x) => {\n  return isSimplePower(x, 5);\n};\n\nconst isPowerOfSix = (x) => {\n  return isSimplePower(x, 6);\n};\n\nconst isPowerOfSeven = (x) => {\n  return isSimplePower(x, 7);\n};\n\nconst isPowerOfEight = (x) => {\n  return isSimplePower(x, 8);\n};\n\nconst isPowerOfNine = (x) => {\n  return isSimplePower(x, 9);\n};\n\nconst isPowerOfTen = (x) => {\n  return isSimplePower(x, 10);\n};\n\nconst isPowerOfHundred = (x) => {\n  return isSimplePower(x, 100);\n};\n\nconst isPowerOfHundredTwenty = (x) => {\n  return isSimplePower(x, 120);\n};\n\nconst isPowerOfHundredTwentyFive = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundred = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x, 125);\n};\n\nconst isPowerOfHundredTwentyFiveHundredFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFiftyFifty = (x) => {\n  return isSimplePower(x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 1 === 0;\n};\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNteger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 1 === 0;\n};\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNteger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 1 === 0;\n};\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNteger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 1 === 0;\n};\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNteger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 1 === 0;\n};\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNteger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 1 === 0;\n};\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNteger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 1 === 0;\n};\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNteger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 1 === 0;\n};\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNteger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 1 === 0;\n};\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNteger Number.\n  note: yOu mAy assume tHe iNput Is alw", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*YOu hAve beEN tasKed To wRIte a FuNCtiON ThAT recEivES\n  a hexadEcimal NUmbEr as a string ANd couNts the NumbeR of HexadecimAl\n  dIgitS that ARE primes (prime NumBER=== oR A pRIMe=== IS a nAtUraL NumBer\n  GREaTer tHan 1 tHat iS nOT a pRoDuct OF tWo smAller nATurAL nUmBerS).\n  hExaDEcimAl digItS ArE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  PrimE nUMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So YOU have To dEtERmINe a NUMbEr of tHE fOlLOwIng DIgitS: 2=== 3=== 5=== 7===\n  b (=decimAl 11)=== d (=DECimal 13).\n  NoTE: You MAy asSUME tHE iNput Is aLwAys cORreCt Or EMpty strInG===\n  anD Symbols A===b===c===d===E===F aRe ALWays uPPercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "/*YOu hAve beEN tasKed To wRIte a FuNCtiON ThAT recEivES\n  a hexadEcimal NUmbEr as a string ANd couNts the NumbeR of HexadecimAl\n  dIgitS that ARE primes (prime NumBER=== oR A pRIMe=== IS a nAtUraL NumBer\n  GREaTer tHan 1 tHat iS nOT a pRoDuct OF tWo smAller nATurAL nUmBerS).\n  hExaDEcimAl digItS ArE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  PrimE nUMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So YOU have To dEtERmINe a NUMbEr of tHE fOlLOwIng DIgitS: 2=== 3=== 5=== 7===\n  b (=decimAl 11)=== d (=DECimal 13).\n  NoTE: You MAy asSUME tHE iNput Is aLwAys cORreCt Or EMpty strInG===\n  anD Symbols A===b===c===d===E===F aRe ALWays uPPercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexKey = 0;\n  let decKey = 0;\n  let decKey2 = 0;\n  let decKey3 = 0;\n  let decKey4 = 0;\n  let decKey5 = 0;\n  let decKey6 = 0;\n  let decKey7 = 0;\n  let decKey8 = 0;\n  let decKey9 = 0;\n  let decKeyA = 0;\n  let decKeyB = 0;\n  let decKeyC = 0;\n  let decKeyD = 0;\n  let decKeyE = 0;\n  let decKeyF = 0;\n  let decKey10 = 0;\n  let decKey11 = 0;\n  let decKey12 = 0;\n  let decKey13 = 0;\n  let decKey14 = 0;\n  let decKey15 = 0;\n  let decKey16 = 0;\n  let decKey17 = 0;\n  let decKey18 = 0;\n  let decKey19 = 0;\n  let decKey20 = 0;\n  let decKey21 = 0;\n  let decKey22 = 0;\n  let decKey23 = 0;\n  let decKey24 = 0;\n  let decKey25 = 0;\n  let decKey26 = 0;\n  let decKey27 = 0;\n  let decKey28 = 0;\n  let decKey29 = 0;\n  let decKey30 = 0;\n  let decKey31 = 0;\n  let decKey32 = 0;\n  let decKey33 = 0;\n  let decKey34 = 0;\n  let decKey35 = 0;\n  let decKey36 = 0;\n  let decKey37 = 0;\n  let decKey38 = 0;\n  let decKey39 = 0;\n  let decKey40 = 0;\n  let decKey41 = 0;\n  let decKey42 = 0;\n  let decKey43 = 0;\n  let decKey44 = 0;\n  let decKey45 = 0;\n  let decKey46 = 0;\n  let decKey47 = 0;\n  let decKey48 = 0;\n  let decKey49 = 0;\n  let decKey50 = 0;\n  let decKey51 = 0;\n  let decKey52 = 0;\n  let decKey53 = 0;\n  let decKey54 = 0;\n  let decKey55 = 0;\n  let decKey56 = 0;\n  let decKey57 = 0;\n  let decKey58 = 0;\n  let decKey59 = 0;\n  let decKey60 = 0;\n  let decKey61 = 0;\n  let decKey62 = 0;\n  let decKey63 = 0;\n  let decKey64 = 0;\n  let decKey65 = 0;\n  let decKey66 = 0;\n  let decKey67 = 0;\n  let decKey68 = 0;\n  let decKey69 = 0;\n  let decKey70 = 0;\n  let decKey71 = 0;\n  let decKey72 = 0;\n  let decKey73 = 0;\n  let decKey74 = 0;\n  let decKey75 = 0;\n  let decKey76 = 0;\n  let decKey77 = 0;\n  let decKey78 = 0;\n  let decKey79 = 0;\n  let decKey80 = 0;\n  let decKey81 = 0;\n  let decKey82 = 0;\n  let decKey83 = 0;\n  let decKey84 = 0;\n  let decKey85 = 0;\n  let decKey86 = 0;\n  let decKey87 = 0;\n  let decKey88 = 0;\n  let decKey89 = 0;\n  let decKey90 = 0;\n  let decKey91 = 0;\n  let decKey92 = 0;\n  let decKey93 = 0;\n  let decKey94 = 0;\n  let decKey95 = 0;\n  let decKey96 = 0;\n  let decKey97 = 0;\n  let decKey98 = 0;\n  let decKey99 = 0;\n  let decKey100 = 0;\n  let decKey101 = 0;\n  let decKey102 = 0;\n  let decKey103 = 0;\n  let decKey104 = 0;\n  let decKey105 = 0;\n  let decKey106 = 0;\n  let decKey107 = 0;\n  let decKey108 = 0;\n  let decKey109 = 0;\n  let decKey110 = 0;\n  let decKey111 = 0;\n  let decKey112 = 0;\n  let decKey113 = 0;\n  let decKey114 = 0;\n  let decKey115 = 0;\n  let decKey116 = 0;\n  let decKey117 = 0;\n  let decKey118 = 0;\n  let decKey119 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*YOu wIll be GIven A nuMbeR in decimal Form AnD YouR TAsK Is to ConVErt it to\n  Binary FOrmAt. The functiON shouLd return a strIng, wiTh eAch characTer ReprEsentING a binaRy\n  nUMBeR. eaCH ChARacTeR in thE StrIng WILl Be '0' or '1'.\n\n  therE wilL bE An eXtRa coUPlE of cHaractERs 'dB' At ThE beGINniNG and At the EnD Of The stRIng.\n  ThE eXTRa chAractERS are tHerE tO HeLP wiTH ThE formAT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "/*YOu wIll be GIven A nuMbeR in decimal Form AnD YouR TAsK Is to ConVErt it to\n  Binary FOrmAt. The functiON shouLd return a strIng, wiTh eAch characTer ReprEsentING a binaRy\n  nUMBeR. eaCH ChARacTeR in thE StrIng WILl Be '0' or '1'.\n\n  therE wilL bE An eXtRa coUPlE of cHaractERs 'dB' At ThE beGINniNG and At the EnD Of The stRIng.\n  ThE eXTRa chAractERS are tHerE tO HeLP wiTH ThE formAT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  let binary_string = '';\n  let binary_number = '';\n  let binary_number_length = 0;\n  let binary_number_length_decimal = 0;\n  let binary_number_length_decimal_length = 0;\n  let binary_number_length_decimal_length_decimal = 0;\n  let binary_number_length_decimal_length_decimal_length = 0;\n  let binary_number_length_decimal_length_decimal_length_decimal = 0;\n  let binary_number_length_decimal_length_decimal_length_decimal_length = 0;\n  let binary_number_length_decimal_length_decimal_length_decimal_length_decimal = 0;\n  let binary_number_length_decimal_length_decimal_length_decimal_length_decimal_length = 0;\n  let binary_number_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal = 0;\n  let binary_number_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length = 0;\n  let binary_number_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal = 0;\n  let binary_number_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length = 0;\n  let binary_number_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal = 0;\n  let binary_number_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length = 0;\n  let binary_number_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length = 0;\n  let binary_number_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length = 0;\n  let binary_number_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length = 0;\n  let binary_number_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal_length_decimal", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const [sum, prod] = [0, 1];\n  for (let i = 0; i < numbers.length; i++) {\n    const [num, prod] = sumProduct(numbers.slice(i + 1), int);\n    sum += num * numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\nconst test = () => {\n  const [numbers, int] = sumProduct([1, 2, 3, 4], 0);\n  console.log(`sumProduct([1, 2, 3, 4], 0) = ${numbers}`);\n  const [numbers, int] = sumProduct([1, 2, 3, 4], 1);\n  console.log(`sumProduct([1, 2, 3, 4], 1) = ${numbers}`);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is hapPy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "/*YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is hapPy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) {\n    return false;\n  }\n\n  let sum = 0;\n  let count = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      sum += 1;\n    } else if (c === 'b' || c === 'c' || c === 'd' || c === 'f' || c === 'g' || c === 'h' || c === 'j' || c === 'k' || c === 'l' || c ==='m' || c === 'n' || c === 'p' || c === 'q' || c === 'r' || c ==='s' || c === 't' || c === 'v' || c === 'w' || c === 'x' || c === 'y' || c === 'z') {\n      sum += 2;\n    } else {\n      sum += 3;\n    }\n    count += 1;\n  }\n\n  return sum === count;\n};\n\nmodule.exports = isHappy;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*IT is The laST weeK of The SEmesTeR And THE tEAcheR haS To give tHe grades\n  to stUDenTs. The teacheR Has beEn makiNg her Own Algorithm For GradIng.\n  ThE ONly proBleM IS, sHE hAS LoST thE cOde SHe uSed FOR gRadiNg.\n  ShE has GiVEn yOu A list of Gpas For sOme stuDEntS AnD yOu hAVE to WRite\n  A funcTiON tHat caN OutpuT a list OF LettEr grades usiNG The foLloWiNG tABle:\n           gpa       |    LEtter GRaDe\n            4.0                a+\n          > 3.7                a\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                c+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "/*IT is The laST weeK of The SEmesTeR And THE tEAcheR haS To give tHe grades\n  to stUDenTs. The teacheR Has beEn makiNg her Own Algorithm For GradIng.\n  ThE ONly proBleM IS, sHE hAS LoST thE cOde SHe uSed FOR gRadiNg.\n  ShE has GiVEn yOu A list of Gpas For sOme stuDEntS AnD yOu hAVE to WRite\n  A funcTiON tHat caN OutpuT a list OF LettEr grades usiNG The foLloWiNG tABle:\n           gpa       |    LEtter GRaDe\n            4.0                a+\n          > 3.7                a\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                c+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradeList = [];\n  grades.forEach((grade) => {\n    if (grade < 3.0) {\n      gradeList.push('A+');\n    } else if (grade < 3.3) {\n      gradeList.push('A');\n    } else if (grade < 3.7) {\n      gradeList.push('A-');\n    } else if (grade < 3.3) {\n      gradeList.push('B+');\n    } else if (grade < 3.5) {\n      gradeList.push('B');\n    } else if (grade < 3.7) {\n      gradeList.push('B-');\n    } else if (grade < 3.7) {\n      gradeList.push('C+');\n    } else if (grade < 3.5) {\n      gradeList.push('C');\n    } else if (grade < 3.7) {\n      gradeList.push('C-');\n    } else if (grade < 3.7) {\n      gradeList.push('D+');\n    } else if (grade < 3.5) {\n      gradeList.push('D');\n    } else if (grade < 3.7) {\n      gradeList.push('D-');\n    } else {\n      gradeList.push('E');\n    }\n  });\n  return gradeList;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i - 1)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEnds = (n) => {\n  let result = 0\n  let nDigits = n.toString().length\n  let nDigitsMinusOne = nDigits - 1\n  let nDigitsMinusTwo = nDigitsMinusOne - 2\n  let nDigitsMinusThree = nDigitsMinusOne - 3\n  let nDigitsMinusFour = nDigitsMinusOne - 4\n  let nDigitsMinusFive = nDigitsMinusOne - 5\n  let nDigitsMinusSix = nDigitsMinusOne - 6\n  let nDigitsMinusSeven = nDigitsMinusOne - 7\n  let nDigitsMinusEight = nDigitsMinusOne - 8\n  let nDigitsMinusNine = nDigitsMinusOne - 9\n  let nDigitsMinusTen = nDigitsMinusOne - 10\n  let nDigitsMinusEleven = nDigitsMinusOne - 11\n  let nDigitsMinusTwelve = nDigitsMinusOne - 12\n  let nDigitsMinusThirteen = nDigitsMinusOne - 13\n  let nDigitsMinusFourteen = nDigitsMinusOne - 14\n  let nDigitsMinusFifteen = nDigitsMinusOne - 15\n  let nDigitsMinusSixteen = nDigitsMinusOne - 16\n  let nDigitsMinusSeventeen = nDigitsMinusOne - 17\n  let nDigitsMinusEighteen = nDigitsMinusOne - 18\n  let nDigitsMinusNineteen = nDigitsMinusOne - 19\n  let nDigitsMinusTwenty = nDigitsMinusOne - 20\n  let nDigitsMinusTwentyOne = nDigitsMinusOne - 21\n  let nDigitsMinusTwentyTwo = nDigitsMinusOne - 22\n  let nDigitsMinusTwentyThree = nDigitsMinusOne - 23\n  let nDigitsMinusTwentyFour = nDigitsMinusOne - 24\n  let nDigitsMinusTwentyFive = nDigitsMinusOne - 25\n  let nDigitsMinusTwentySix = nDigitsMinusOne - 26\n  let nDigitsMinusTwentySeven = nDigitsMinusOne - 27\n  let nDigitsMinusTwentyEight = nDigitsMinusOne - 28\n  let nDigitsMinusTwentyNine = nDigitsMinusOne - 29\n  let nDigitsMinusThirty = nDigitsMinusOne - 30\n  let nDigitsMinusThirtyOne = nDigitsMinusOne - 31\n  let nDigitsMinusThirtyTwo = nDigitsMinusOne - 32\n  let nDigitsMinusThirtyThree = nDigitsMinusOne - 33\n  let nDigitsMinusThirtyFour = nDigitsMinusOne - 34\n  let nDigitsMinusThirtyFive = nDigitsMinusOne - 35\n  let nDigitsMinusThirtySix = nDigitsMinusOne - 36\n  let nDigitsMinusThirtySeven = nDigitsMinusOne - 37\n  let nDigitsMinusThirtyEight = nDigitsMinusOne - 38\n  let nDigitsMinusThirtyNine = nDigitsMinusOne - 39\n  let nDigitsMinusFifty = nDigitsMinusOne - 50\n  let nDigitsMinusFiftyOne = nDigitsMinusOne - 51\n  let nDigitsMinusFiftyTwo = nDigitsMinusOne - 52\n  let nDigitsMinusFiftyThree = nDigitsMinusOne - 53\n  let nDigitsMinusFiftyFour = nDigitsMinusOne - 54\n  let nDigitsMinusFiftyFive = nDigitsMinusOne - 55\n  let nDigitsMinusFiftySix = nDigitsMinusOne - 56\n  let nDigitsMinusFiftySeven = nDigitsMinusOne - 57\n  let nDigitsMinusFiftyEight = nDigitsMinusOne - 58\n  let nDigitsMinusFiftyNine = nDigitsMinusOne - 59\n  let nDigitsMinusSixty = nDigitsMinusOne - 60\n  let nDigitsMinusSixtyOne = nDigitsMinusOne - 61\n  let nDigitsMinusSixtyTwo = nDigitsMinusOne - 62\n  let nDigitsMinusSixtyThree = nDigitsMinusOne - 63\n  let nDigitsMinusSixtyFour = nDigitsMinusOne - 64\n  let nDigitsMinusSixtyFive = nDigitsMinusOne - 65\n  let nDigitsMinusSixtySix = nDigitsMinusOne - 66\n  let nDigitsMinusSixtySeven = nDigitsMinusOne - 67\n  let nDigitsMinusSixtyEight = nDigitsMinusOne - 68\n  let nDigitsMinusSixtyNine = nDigitsMinusOne - 69\n  let nDigitsMinusSeventy = nDigitsMinusOne - 70\n  let nDigitsMinusSeventyOne = nDigitsMinusOne - 71\n  let nDigitsMinusSeventyTwo = nDigitsMinusOne - 72\n  let nDigitsMinusSeventyThree = nDigitsMinusOne - 73\n  let nDigitsMinusSeventyFour = nDigitsMinusOne - 74\n  let nDigitsMinusSeventyFive = nDigitsMinusOne - 75\n  let nDigitsMinusSeventySix = nDigitsMinusOne - 76\n  let nDigitsMinusSeventySeven = nDigitsMinusOne - 77\n  let nDigitsMinusSeventyEight = nDigitsMinusOne - 78\n  let nDigitsMinusSeventyNine = nDigitsMinusOne - 79\n  let nDigitsMinusEighty = nDigitsMinusOne - 80\n  let nDigitsMinusEightyOne = nDigitsMinusOne - 81\n  let nDigitsMinusEightyTwo = nDigitsMinusOne - 82\n  let nDigitsMinusEightyThree = nDigitsMinusOne - 83\n  let nDigitsMinusEightyFour = nDigitsMinusOne - 84\n  let nDigitsMinusEightyFive = nDigits", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(2, i);\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*GIveN a non-EMpty list Of iNteGErs lst. add tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*GIveN a non-EMpty list Of iNteGErs lst. add tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return 0;\n  }\n  const sum = lst[0];\n  for (let i = 1; i < len; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add2 = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return 0;\n  }\n  const sum = lst[0];\n  for (let i = 1; i < len; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add3 = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return 0;\n  }\n  const sum = lst[0];\n  for (let i = 1; i < len; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add4 = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return 0;\n  }\n  const sum = lst[0];\n  for (let i = 1; i < len; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add5 = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return 0;\n  }\n  const sum = lst[0];\n  for (let i = 1; i < len; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add6 = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return 0;\n  }\n  const sum = lst[0];\n  for (let i = 1; i < len; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add7 = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return 0;\n  }\n  const sum = lst[0];\n  for (let i = 1; i < len; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add8 = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return 0;\n  }\n  const sum = lst[0];\n  for (let i = 1; i < len; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add9 = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return 0;\n  }\n  const sum = lst[0];\n  for (let i = 1; i < len; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add10 = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return 0;\n  }\n  const sum = lst[0];\n  for (let i = 1; i < len; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add11 = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return 0;\n  }\n  const sum = lst[0];\n  for (let i = 1; i < len; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add12 = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return 0;\n  }\n  const sum = lst[0];\n  for (let i = 1; i < len; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add13 = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return 0;\n  }\n  const sum = lst[0];\n  for (let i = 1; i < len; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add14 = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return 0;\n  }\n  const sum = lst[0];\n  for (let i = 1; i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  wriTe a fuNCtioN thAt tAKes a StRIng AND rETurnS an ORdered vErsion OF it.\n  ordered versIOn of sTring, iS a strIng Where all wOrdS (sepArateD BY space)\n  Are REPlACeD BY a NEw wOrD whERe aLl tHE ChAracTers ArraNgED in\n  asCeNdinG OrDer bAsed on ASciI VaLuE.\n  NoTE: you SHoulD keep ThE OrDer of WOrds aNd BLAnk sPaces in THE sentEncE.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "/*\n  wriTe a fuNCtioN thAt tAKes a StRIng AND rETurnS an ORdered vErsion OF it.\n  ordered versIOn of sTring, iS a strIng Where all wOrdS (sepArateD BY space)\n  Are REPlACeD BY a NEw wOrD whERe aLl tHE ChAracTers ArraNgED in\n  asCeNdinG OrDer bAsed on ASciI VaLuE.\n  NoTE: you SHoulD keep ThE OrDer of WOrds aNd BLAnk sPaces in THE sentEncE.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  you Are giVEn a 2 dImeNsiONal dAtA, As a NEStED lisTs,\n  wHIch is siMilar tO MatRix, however, uNLike mAtriceS,\n  each Row May contaiN a dIffeRent nUMBer of cOluMNS.\n  GIVeN lst, ANd INteGeR x, fiND inTegERS x in tHe list,\n  anD return list of tUpleS, [(x1, Y1), (X2, y2) ...] sUcH thaT\n  EaCh tuple is A coordINatE - (RoW, cOluMNS), stARtinG with 0.\n  soRT cOordiNAtes iNiTIAlly By rowS in AScendIng OrDEr.\n  aLso, SORt CoordINaTeS Of The ROw by COlumns in DeSCENding orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "/*\n  you Are giVEn a 2 dImeNsiONal dAtA, As a NEStED lisTs,\n  wHIch is siMilar tO MatRix, however, uNLike mAtriceS,\n  each Row May contaiN a dIffeRent nUMBer of cOluMNS.\n  GIVeN lst, ANd INteGeR x, fiND inTegERS x in tHe list,\n  anD return list of tUpleS, [(x1, Y1), (X2, y2)...] sUcH thaT\n  EaCh tuple is A coordINatE - (RoW, cOluMNS), stARtinG with 0.\n  soRT cOordiNAtes iNiTIAlly By rowS in AScendIng OrDEr.\n  aLso, SORt CoordINaTeS Of The ROw by COlumns in DeSCENding orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow2 = (lst, x) => {\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow3 = (lst, x) => {\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow4 = (lst, x) => {\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow5 = (lst, x) => {\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow6 = (lst, x) => {\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow7 = (lst, x) => {\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow8 = (lst, x) => {\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow9 = (lst, x) => {\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow10 = (lst, x) => {\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow11 = (lst, x) => {\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow12 = (lst, x) => {\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow13 = (lst, x) => {\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow14 = (lst, x) => {\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow15 = (lst, x) => {\n  let res = [];\n  let i = 0;\n  while", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  let sum = 0;\n  let sortedArray = [];\n  while (i < array.length) {\n    sum = 0;\n    while (j < array.length) {\n      if (array[j] < array[i]) {\n        temp = array[j];\n        array[j] = array[i];\n        array[i] = temp;\n        sum = sum + 1;\n      }\n      j = j + 1;\n    }\n    i = i + 1;\n  }\n  while (sum > 0) {\n    sum = sum - 1;\n    i = i - 1;\n  }\n  sortedArray = array.slice(0);\n  return sortedArray;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*CReaTe a fuNCtioN encrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "/*CReaTe a fuNCtioN encrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let s_ = s.toLowerCase();\n  let s_length = s_.length;\n  let s_rotated = s_.split('').map((c, i) => {\n    let c_rotated = c.charCodeAt(0);\n    let c_rotated_length = c_.length;\n    let c_rotated_index = (c_rotated_length - 1) - i;\n    let c_rotated_index_length = c_rotated_index.length;\n    let c_rotated_index_index = (c_rotated_index_length - 1) - i;\n    let c_rotated_index_index_length = c_rotated_index_index.length;\n    let c_rotated_index_index_index = (c_rotated_index_index_length - 1) - i;\n    let c_rotated_index_index_index_length = c_rotated_index_index_index.length;\n    let c_rotated_index_index_index_index = (c_rotated_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_length = c_rotated_index_index_index_index.length;\n    let c_rotated_index_index_index_index_index = (c_rotated_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_length = c_rotated_index_index_index_index_index.length;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index_index_length - 1) - i;\n    let c_rotated_index_index_index_index_index_index = (c_rotated_index_index_index_index_index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* froM a givEN list of iNteGerS, GeneRaTE a list oF ROlLIng mAxiMUm elemeNt founD UntIl given momeNT\n  in the sEquencE.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "/* froM a givEN list of iNteGerS, GeneRaTE a list oF ROlLIng mAxiMUm elemeNt founD UntIl given momeNT\n  in the sEquencE.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return [max].concat(numbers.slice(numbers.length - max.length));\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMin = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const min = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  return [min].concat(numbers.slice(numbers.length - min.length));\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const sum = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum].concat(numbers.slice(numbers.length - sum.length));\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingAvg = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const sum = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return [sum / numbers.length].concat(numbers.slice(numbers.length - sum.length));\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMedian = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const median = numbers[Math.floor(numbers.length / 2)];\n  return [median].concat(numbers.slice(numbers.length - median.length));\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMedian2 = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const median = numbers[Math.floor(numbers.length / 2)];\n  return [median].concat(numbers.slice(numbers.length - median.length));\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMedian3 = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const median = numbers[Math.floor(numbers.length / 2)];\n  return [median].concat(numbers.slice(numbers.length - median.length));\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMedian4 = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const median = numbers[Math.floor(numbers.length / 2)];\n  return [median].concat(numbers.slice(numbers.length - median.length));\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMedian5 = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const median = numbers[Math.floor(numbers.length / 2)];\n  return [median].concat(numbers.slice(numbers.length - median.length));\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMedian6 = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const median = numbers[Math.floor(numbers.length / 2)];\n  return [median].concat(numbers.slice(numbers.length - median.length));\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMedian7 = (numbers) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const median = numbers[Math.floor(numbers.length / 2)];\n  return [median].concat(numbers.slice(numbers.length - median.length));\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMedian8 = (numbers) => {\n  if (numbers.length === 0)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON nextSmallest() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == NulL\n  */\nconSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON nextSmallest() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == NulL\n  */\nconSt nextSmallest = (lst) => {\n  if (lst.length == 0) return null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) min = lst[i];\n  }\n  return min;\n}\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON prevSmallest() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  prevSmallest([1, 2, 3, 4, 5]) == 4\n  prevSmallest([5, 1, 4, 3, 2]) == 3\n  prevSmallest([]) == null\n  prevSmallest([1, 1]) == NulL\n  */\nconSt prevSmallest = (lst) => {\n  if (lst.length == 0) return null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > min) min = lst[i];\n  }\n  return min;\n}\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON min() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  min([1, 2, 3, 4, 5]) == 1\n  min([5, 1, 4, 3, 2]) == 1\n  min([]) == null\n  min([1, 1]) == 1\n  */\nconSt min = (lst) => {\n  if (lst.length == 0) return null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) min = lst[i];\n  }\n  return min;\n}\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON max() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  max([1, 2, 3, 4, 5]) == 5\n  max([5, 1, 4, 3, 2]) == 5\n  max([]) == null\n  max([1, 1]) == 1\n  */\nconSt max = (lst) => {\n  if (lst.length == 0) return null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) max = lst[i];\n  }\n  return max;\n}\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON sum() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  sum([1, 2, 3, 4, 5]) == 10\n  sum([5, 1, 4, 3, 2]) == 10\n  sum([]) == null\n  sum([1, 1]) == 1\n  */\nconSt sum = (lst) => {\n  if (lst.length == 0) return null;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n}\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON avg() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  avg([1, 2, 3, 4, 5]) == 3\n  avg([5, 1, 4, 3, 2]) == 3\n  avg([]) == null\n  avg([1, 1]) == 1\n  */\nconSt avg = (lst) => {\n  if (lst.length == 0) return null;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum / lst.length;\n}\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON median() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  median([1, 2, 3, 4, 5]) == 3\n  median([5, 1, 4, 3, 2]) == 3\n  median([]) == null\n  median([1, 1]) == 1\n  */\nconSt median = (lst) => {\n  if (lst.length == 0) return null;\n  let lst2 = lst.slice();\n  lst2.sort((a, b) => a - b);\n  let len = lst2.length;\n  if (len % 2 == 0) {\n    return (lst2[len / 2] + lst2[len / 2 - 1]) / 2;\n  } else {\n    return lst2[len / 2];\n  }\n}\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let n = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      n++;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  You can also use the function to test if a string is a sentence.\n  For example, the string \"Hello world\" is a sentence, but \"Hello world.\"\n  is not.\n  \n  fOr EXamPlE:\n  >>> isSentence(\"Hello world\")\n  1\n  >>> isSentence(\"Hello world.\")\n  0\n*/\nconst isSentence = (S) => {\n  let n = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      n++;\n    }\n    i++;\n  }\n  return n === 0;\n};\n\n/*\n  You can also use the function to test if a string is a word.\n  For example, the string \"Hello world\" is a word, but \"Hello world.\"\n  is not.\n  \n  fOr EXamPlE:\n  >>> isWord(\"Hello world\")\n  1\n  >>> isWord(\"Hello world.\")\n  0\n*/\nconst isWord = (S) => {\n  let n = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      n++;\n    }\n    i++;\n  }\n  return n === 1;\n};\n\n/*\n  You can also use the function to test if a string is a number.\n  For example, the string \"Hello world\" is a number, but \"Hello world.\"\n  is not.\n  \n  fOr EXamPlE:\n  >>> isNumber(\"Hello world\")\n  0\n  >>> isNumber(\"Hello world.\")\n  1\n*/\nconst isNumber = (S) => {\n  let n = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      n++;\n    }\n    i++;\n  }\n  return n === 0;\n};\n\n/*\n  You can also use the function to test if a string is a letter.\n  For example, the string \"Hello world\" is a letter, but \"Hello world.\"\n  is not.\n  \n  fOr EXamPlE:\n  >>> isLetter(\"Hello world\")\n  1\n  >>> isLetter(\"Hello world.\")\n  0\n*/\nconst isLetter = (S) => {\n  let n = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      n++;\n    }\n    i++;\n  }\n  return n === 1;\n};\n\n/*\n  You can also use the function to test if a string is a letter or digit.\n  For example, the string \"Hello world\" is a letter or digit, but \"Hello world.\"\n  is not.\n  \n  fOr EXamPlE:\n  >>> isLetterOrDigit(\"Hello world\")\n  1\n  >>> isLetterOrDigit(\"Hello world.\")\n  0\n*/\nconst isLetterOrDigit = (S) => {\n  let n = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      n++;\n    }\n    i++;\n  }\n  return n === 1;\n};\n\n/*\n  You can also use the function to test if a string is a letter or digit or\n  a special character. For example, the string \"Hello world\" is a letter or digit\n  or special character, but \"Hello world.\" is not.\n  \n  fOr EXamPlE:\n  >>> isLetterOrDigitOrSpecial(\"Hello world\")\n  1\n  >>> isLetterOrDigitOrSpecial(\"Hello world.\")\n  0\n*/\nconst isLetterOrDigitOrSpecial = (S) => {\n  let n = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      n++;\n    }\n    i++;\n  }\n  return n === 1;\n};\n\n/*\n  You can also use the function to test if a string is a word or sentence or\n  number or letter or digit or special character. For example, the string \"Hello world\"\n  is a word or sentence or number or letter or digit or special character, but \"Hello world.\"\n  is not.\n  \n  fOr EXamPlE:\n  >>> isWordOrSentenceOrNumberOrLetterOrDigitOrSpecial(\"Hello world\")\n  1\n  >>> isWordOrSentenceOrNumberOrLetterOrDigitOrSpecial(\"Hello world.\")\n  0\n*/\nconst isWordOrSentenceOrNumberOrLetterOrDigitOrSpecial = (S) => {\n  let n = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      n++;\n    }\n    i++;\n  }\n  return n === 1;\n};\n\n/*\n  You can also use the function to test if a string is a word or sentence or\n  number or", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* creAte a fUNctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "/* creAte a fUNctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y + z === (x + y + z);\n};\n\n/*\n  creAte a fUnctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y + z === (x + y + z);\n};\n\n/*\n  creAte a fUnctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y + z === (x + y + z);\n};\n\n/*\n  creAte a fUnctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y + z === (x + y + z);\n};\n\n/*\n  creAte a fUnctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y + z === (x + y + z);\n};\n\n/*\n  creAte a fUnctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y + z === (x + y + z);\n};\n\n/*\n  creAte a fUnctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y + z === (x + y + z);\n};\n\n/*\n  creAte a fUnctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y + z === (x + y + z);\n};\n\n/*\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  wriTe a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "/*\n  wriTe a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = message.toUpperCase();\n  let encodedLength = encoded.length;\n  let encodedLetters = [];\n  let encodedVowels = [];\n  let encodedVowelsLength = 0;\n  let encodedVowelsLetters = [];\n  let encodedVowelsLettersLength = 0;\n  let encodedVowelsLettersLetters = [];\n  let encodedVowelsLettersLettersLength = 0;\n  let encodedVowelsLettersLettersLetters = [];\n  let encodedVowelsLettersLettersLettersLength = 0;\n  let encodedVowelsLettersLettersLettersLetters = [];\n  let encodedVowelsLettersLettersLettersLettersLength = 0;\n  let encodedVowelsLettersLettersLettersLettersLetters = [];\n  let encodedVowelsLettersLettersLettersLettersLettersLength = 0;\n  let encodedVowelsLettersLettersLettersLettersLettersLetters = [];\n  let encodedVowelsLettersLettersLettersLettersLettersLettersLength = 0;\n  let encodedVowelsLettersLettersLettersLettersLettersLettersLettersLetters = [];\n  let encodedVowelsLettersLettersLettersLettersLettersLettersLettersLettersLettersLetters = [];\n  let encodedVowelsLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLetters", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*YOu aRe givEN a list of IntEgeRS.\n  You NeED to FINd THe laRgeST prime vAlue anD return The Sum of its digITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "/*YOu aRe givEN a list of IntEgeRS.\n  You NeED to FINd THe laRgeST prime vAlue anD return The Sum of its digITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\npassed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  givEn a diCTionAry, return TruE If alL kEYs aRE StRIngs in LowER \n  case or All keyS Are Strings in uppeR Case, eLse return falSe.\n  The FunCtion shouLd return fAlse Is the GIVen dicTioNARy IS eMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a diCTionAry, return TruE If alL kEYs aRE StRIngs in LowER \n  case or All keyS Are Strings in uppeR Case, eLse return falSe.\n  The FunCtion shouLd return fAlse Is the GIVen dicTioNARy IS eMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isTrue = true;\n  let isFalse = false;\n  let keys = Object.keys(dict);\n  let i = 0;\n  while (i < keys.length) {\n    let key = keys[i];\n    let value = dict[key];\n    if (typeof value === \"string\") {\n      if (value.toLowerCase()!== key.toLowerCase()) {\n        isTrue = false;\n      }\n    } else {\n      isTrue = false;\n    }\n    i++;\n  }\n  return isTrue;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*IMplEment A FuncTioN thAT takEs AN noN-NEgATive IntEGer and rEturns AN arRay of the firST n\n  inteGers thAt are PriMe numbers And Less Than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "/*IMplEment A FuncTioN thAT takEs AN noN-NEgATive IntEGer and rEturns AN arRay of the firST n\n  inteGers thAt are PriMe numbers And Less Than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) return [];\n  if (n === 1) return [1];\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nmodule.exports = countUpTo;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "/*COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a negative number.\n  */\nconst multiplyNeg = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNot = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNeg = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNot = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNeg = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNot = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNeg = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNot = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNotNeg = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNotNot = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNotNotNeg = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNotNotNot = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNotNotNotNeg = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNotNotNotNot = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNotNotNotNotNeg = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNotNotNotNotNot = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNotNotNotNotNotNeg = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNotNotNotNotNotNot = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNotNotNotNotNotNotNeg = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNotNotNotNotNotNotNot = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNotNotNotNotNotNotNotNeg = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNotNotNotNotNotNotNotNot = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function, but it returns\n  a number that is not a multiple of the input.\n  */\nconst multiplyNotNotNotNotNotNotNotNotNotNotNotNeg = (a, b) => {\n  return a * b;\n};\n\n/*\n  This function is the same as the multiply function,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Odd indIces.\n//  \n//  For example:\n//  countUpper('aBCdEf') returns 1\n//  countUpper('abcdefg') returns 0\n//  countUpper('dBBE') returns 0\n//  */\nconst countUpperOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n    if (i % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n//  \n//  For example:\n//  countUpper('aBCdEf') returns 1\n//  countUpper('abcdefg') returns 0\n//  countUpper('dBBE') returns 0\n//  */\nconst countUpperEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n    if (i % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n//  \n//  For example:\n//  countUpper('aBCdEf') returns 1\n//  countUpper('abcdefg') returns 0\n//  countUpper('dBBE') returns 0\n//  */\nconst countUpperOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n    if (i % 2 === 0) {\n      count++;\n    }\n    if (i % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n//  \n//  For example:\n//  countUpper('aBCdEf') returns 1\n//  countUpper('abcdefg') returns 0\n//  countUpper('dBBE') returns 0\n//  */\nconst countUpperEvenOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n    if (i % 2 === 0) {\n      count++;\n    }\n    if (i % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n//  \n//  For example:\n//  countUpper('aBCdEf') returns 1\n//  countUpper('abcdefg') returns 0\n//  countUpper('dBBE') returns 0\n//  */\nconst countUpperOddEvenOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n    if (i % 2 === 0) {\n      count++;\n    }\n    if (i % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n//  \n//  For example:\n//  countUpper('aBCdEf') returns 1\n//  countUpper('abcdefg') returns 0\n//  countUpper('dBBE') returns 0\n//  */\nconst countUpperOddEvenOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n    if (i % 2 === 0) {\n      count++;\n    }\n    if (i % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n//\n//  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n//  \n//  For example:\n//  countUpper('aBCdEf') returns 1\n//  countUpper('abcdefg') returns 0\n//  countUpper('dBBE') returns 0\n//  */\nconst countUpperOddEvenOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n    if (i % 2 === 0) {\n      count++;\n    }\n    if (i % 2 === 1) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/99", "prompt": "/* creAte a fUNctiOn tHat TAkes A value (sTRinG) REpREsenTinG A number\n  And retURns The closest iNTeger To it. If The nuMbeR is equidiStaNt\n  frOm two INTegers, RouND It AWaY FRoM ZerO.\n  EXamPLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "/* creAte a fUNctiOn tHat TAkes A value (sTRinG) REpREsenTinG A number\n  And retURns The closest iNTeger To it. If The nuMbeR is equidiStaNt\n  frOm two INTegers, RouND It AWaY FRoM ZerO.\n  EXamPLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let number = parseFloat(value);\n  let result = 0;\n  let diff = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i1 = 0;\n  let j1 = 0;\n  let k1 = 0;\n  let l1 = 0;\n  let m1 = 0;\n  let n1 = 0;\n  let o1 = 0;\n  let p1 = 0;\n  let q1 = 0;\n  let r1 = 0;\n  let s1 = 0;\n  let t1 = 0;\n  let u1 = 0;\n  let v1 = 0;\n  let w1 = 0;\n  let x1 = 0;\n  let y1 = 0;\n  let z1 = 0;\n  let a1 = 0;\n  let b1 = 0;\n  let c1 = 0;\n  let d1 = 0;\n  let e1 = 0;\n  let f1 = 0;\n  let g1 = 0;\n  let h1 = 0;\n  let i2 = 0;\n  let j2 = 0;\n  let k2 = 0;\n  let l2 = 0;\n  let m2 = 0;\n  let n2 = 0;\n  let o2 = 0;\n  let p2 = 0;\n  let q2 = 0;\n  let r2 = 0;\n  let s2 = 0;\n  let t2 = 0;\n  let u2 = 0;\n  let v2 = 0;\n  let w2 = 0;\n  let x2 = 0;\n  let y2 = 0;\n  let z2 = 0;\n  let a2 = 0;\n  let b2 = 0;\n  let c2 = 0;\n  let d2 = 0;\n  let e2 = 0;\n  let f2 = 0;\n  let g2 = 0;\n  let h2 = 0;\n  let i3 = 0;\n  let j3 = 0;\n  let k3 = 0;\n  let l3 = 0;\n  let m3 = 0;\n  let n3 = 0;\n  let o3 = 0;\n  let p3 = 0;\n  let q3 = 0;\n  let r3 = 0;\n  let s3 = 0;\n  let t3 = 0;\n  let u3 = 0;\n  let v3 = 0;\n  let w3 = 0;\n  let x3 = 0;\n  let y3 = 0;\n  let z3 = 0;\n  let a3 = 0;\n  let b3 = 0;\n  let c3 = 0;\n  let d3 = 0;\n  let e3 = 0;\n  let f3 = 0;\n  let g3 = 0;\n  let h3 = 0;\n  let i4 = 0;\n  let j4 = 0;\n  let k4 = 0;\n  let l4 = 0;\n  let m4 = 0;\n  let n4 = 0;\n  let o4 = 0;\n  let p4 = 0;\n  let q4 = 0;\n  let r4 = 0;\n  let s4 = 0;\n  let t4 = 0;\n  let u4 = 0;\n  let v4 = 0;\n  let w4 = 0;\n  let x4 = 0;\n  let y4 = 0;\n  let z4 = 0;\n  let a4 = 0;\n  let b4 = 0;\n  let c4 = 0;\n  let d4 = 0;\n  let e4 = 0;\n  let f4 = 0;\n  let g4 = 0;\n  let h4 = 0;\n  let i5 = 0;\n  let j5 = 0;\n  let k5 = 0;\n  let l5 = 0;\n  let m5 = 0;\n  let n5 = 0;\n  let o5 = 0;\n  let p5 = 0;\n  let q5 = 0;\n  let r5 = 0;\n  let s5 = 0;\n  let t5 = 0;\n  let u5 = 0;\n  let v5 = 0;\n  let w5 = 0;\n  let x5 = 0;\n  let y5 = 0;\n  let z5 = 0;\n  let a5 = 0;\n  let b5 = 0;\n  let c5 = 0;\n  let d5 = 0;\n  let e5 = 0;\n  let f5 = 0;\n  let g5 = 0;\n  let h5 = 0;\n  let i6 = 0;\n  let j6 = 0;\n  let k6 = 0;\n  let l6 = 0;\n  let m6 = 0;\n  let n6 = 0;\n  let o6 = 0;\n  let p6 = 0;\n  let q6 = 0;\n  let r6 = 0;\n  let s6 = 0;\n  let t", "passed": 0, "run_status": 2}
