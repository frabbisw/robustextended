{"task_id": "JavaScript/0", "prompt": "/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const list = numbers.map(number => number);\n  const sortedList = list.sort((a, b) => a - b);\n  const thresholdedList = sortedList.filter(number => number >= threshold);\n  return thresholdedList.length === sortedList.length;\n};\n\nmodule.exports = hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* InPUt to This Function IS A sTring CONTainIng multiplE groups of nested paREnThEsEs. Your gOAl is To\n  sePaRaTE tHosE GrouP iNtO sEpARaTE stRiNGS anD return THe list of those.\n  sePAraTe grOuPs aRe BALANced (eaCh Open bRacE Is PrOPERLy cLoSed) and nOt nESted wiThiN eACh oTher\n  igNOre AnY spaceS in THe inpUt string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "/* InPUt to This Function IS A sTring CONTainIng multiplE groups of nested paREnThEsEs. Your gOAl is To\n  sePaRaTE tHosE GrouP iNtO sEpARaTE stRiNGS anD return THe list of those.\n  sePAraTe grOuPs aRe BALANced (eaCh Open bRacE Is PrOPERLy cLoSed) and nOt nESted wiThiN eACh oTher\n  igNOre AnY spaceS in THe inpUt string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let paren_string_array = paren_string.split(' ');\n  let paren_string_array_length = paren_string_array.length;\n  let paren_string_array_index = 0;\n  let paren_string_array_last_index = paren_string_array_length - 1;\n  let paren_string_array_last_char = paren_string_array[paren_string_array_last_index];\n  let paren_string_array_last_char_index = paren_string_array_last_index;\n  let paren_string_array_last_char_last_index = paren_string_array_last_index;\n  let paren_string_array_last_char_last_char = paren_string_array_last_char;\n  let paren_string_array_last_char_last_char_index = paren_string_array_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_index = paren_string_array_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char = paren_string_array_last_char_last_char;\n  let paren_string_array_last_char_last_char_last_char_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_char_last_char_last_index = paren_string_array_last_char_last_char_last_index;\n  let paren_string_array_last_char_last_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* TeST if gNiveN strig is A PAlIndroME */\nCOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/* TeST if gNiveN strig is A PAlIndroME */\nCOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '') {\n    return string;\n  }\n  const stringLength = string.length;\n  const stringReversed = string.split('').reverse().join('');\n  const stringReversedLength = stringReversed.length;\n  if (stringLength == stringReversedLength) {\n    return string;\n  }\n  const stringReversedReversed = stringReversed.split('').reverse().join('');\n  const stringReversedReversedLength = stringReversedReversed.length;\n  if (stringReversedLength == stringReversedReversedLength) {\n    return stringReversed;\n  }\n  const stringReversedReversedReversed = stringReversedReversed.split('').reverse().join('');\n  const stringReversedReversedReversedLength = stringReversedReversedReversed.length;\n  if (stringReversedReversedLength == stringReversedReversedReversedLength) {\n    return stringReversedReversed;\n  }\n  return stringReversedReversedReversed;\n}\n\n/* TeST if gNiveN strig is A PAlIndroME */\nCOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '') {\n    return string;\n  }\n  const stringLength = string.length;\n  const stringReversed = string.split('').reverse().join('');\n  const stringReversedLength = stringReversed.length;\n  if (stringLength == stringReversedLength) {\n    return string;\n  }\n  const stringReversedReversed = stringReversed.split('').reverse().join('');\n  const stringReversedReversedLength = stringReversedReversed.length;\n  if (stringReversedLength == stringReversedReversedLength) {\n    return stringReversed;\n  }\n  const stringReversedReversedReversed = stringReversedReversed.split('').reverse().join('');\n  const stringReversedReversedReversedLength = stringReversedReversedReversed.length;\n  if (stringReversedReversedLength == stringReversedReversedReversedLength) {\n    return stringReversedReversed;\n  }\n  return stringReversedReversedReversed;\n}\n\n/* TeST if gNiveN strig is A PAlIndroME */\nCOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '') {\n    return string;\n  }\n  const stringLength = string.length;\n  const stringReversed = string.split('').reverse().join('');\n  const stringReversedLength = stringReversed.length;\n  if (stringLength == stringReversedLength) {\n    return string;\n  }\n  const stringReversedReversed = stringReversed.split('').reverse().join('');\n  const stringReversedReversedLength = stringReversedReversed.length;\n  if (stringReversedLength == stringReversedReversedLength) {\n    return stringReversed;\n  }\n  const stringReversedReversedReversed = stringReversedReversed.split('').reverse().join('');\n  const stringReversedReversedReversedLength = stringReversedReversedReversed.length;\n  if (stringReversedReversedLength == stringReversedReversedReversedLength) {\n    return stringReversedReversed;\n  }\n  return stringReversedReversedReversed;\n}\n\n/* TeST", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [];\n  let numb = 1;\n  while (numb <= n) {\n    pile.push(numb);\n    numb++;\n  }\n  return pile;\n};\n\nexport default makeAPile;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString2 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString3 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString4 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString5 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString6 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString7 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString8 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString9 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString10 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString11 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString12 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst wordsString13 = (s) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest even iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, THEn tHE Function sHoULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "/*ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest even iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, THEn tHE Function sHoULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const x_ = x;\n  const y_ = y;\n  let i = 0;\n  while (x_ > 0) {\n    if (x_ % 2 === 0) {\n      x_ /= 2;\n      i++;\n    } else {\n      x_ = x_ - 1;\n    }\n  }\n  return i;\n};\n\nmodule.exports = chooseNum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You ARe giVen tWo positiVE InTegerS n AND m, and Your task is To compute the\n  averaGE oF tHe IntegerS From n ThroUgH m (iNClUdiNG n and m). \n  roUnD tHe ANsWEr tO tHE NeaRESt integer AnD ConVert ThAt tO bINARY.\n  If n is gReAter tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "/*You ARe giVen tWo positiVE InTegerS n AND m, and Your task is To compute the\n  averaGE oF tHe IntegerS From n ThroUgH m (iNClUdiNG n and m). \n  roUnD tHe ANsWEr tO tHE NeaRESt integer AnD ConVert ThAt tO bINARY.\n  If n is gReAter tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < 0 || m < 0) return -1;\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum % 10;\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*GivEN a list of PosiTive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "/*GivEN a list of PosiTive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (list.indexOf(x[i]) === -1) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  GiVEn an ArraY of integERS, sOrt thE INTegeRs that are bEtween 1 and 9 inclusivE,\n  ReVeRsE the resULtinG arrAy, AnD ThEn rEPlacE eAcH dIgIT bY Its CoRREspONDing name fRoM\n  \"one\", \"two\", \"THrEe\", \"FOuR\", \"fIVE\", \"Six\", \"SeVeN\", \"EighT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn an ArraY of integERS, sOrt thE INTegeRs that are bEtween 1 and 9 inclusivE,\n  ReVeRsE the resULtinG arrAy, AnD ThEn rEPlacE eAcH dIgIT bY Its CoRREspONDing name fRoM\n  \"one\", \"two\", \"THrEe\", \"FOuR\", \"fIVE\", \"Six\", \"SeVeN\", \"EighT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const arrLength = arr.length;\n  const arrLengthMinus1 = arrLength - 1;\n  const arrLengthMinus2 = arrLength - 2;\n  const arrLengthMinus3 = arrLength - 3;\n  const arrLengthMinus4 = arrLength - 4;\n  const arrLengthMinus5 = arrLength - 5;\n  const arrLengthMinus6 = arrLength - 6;\n  const arrLengthMinus7 = arrLength - 7;\n  const arrLengthMinus8 = arrLength - 8;\n  const arrLengthMinus9 = arrLength - 9;\n  const arrLengthMinus10 = arrLength - 10;\n  const arrLengthMinus11 = arrLength - 11;\n  const arrLengthMinus12 = arrLength - 12;\n  const arrLengthMinus13 = arrLength - 13;\n  const arrLengthMinus14 = arrLength - 14;\n  const arrLengthMinus15 = arrLength - 15;\n  const arrLengthMinus16 = arrLength - 16;\n  const arrLengthMinus17 = arrLength - 17;\n  const arrLengthMinus18 = arrLength - 18;\n  const arrLengthMinus19 = arrLength - 19;\n  const arrLengthMinus20 = arrLength - 20;\n  const arrLengthMinus21 = arrLength - 21;\n  const arrLengthMinus22 = arrLength - 22;\n  const arrLengthMinus23 = arrLength - 23;\n  const arrLengthMinus24 = arrLength - 24;\n  const arrLengthMinus25 = arrLength - 25;\n  const arrLengthMinus26 = arrLength - 26;\n  const arrLengthMinus27 = arrLength - 27;\n  const arrLengthMinus28 = arrLength - 28;\n  const arrLengthMinus29 = arrLength - 29;\n  const arrLengthMinus30 = arrLength - 30;\n  const arrLengthMinus31 = arrLength - 31;\n  const arrLengthMinus32 = arrLength - 32;\n  const arrLengthMinus33 = arrLength - 33;\n  const arrLengthMinus34 = arrLength - 34;\n  const arrLengthMinus35 = arrLength - 35;\n  const arrLengthMinus36 = arrLength - 36;\n  const arrLengthMinus37 = arrLength - 37;\n  const arrLengthMinus38 = arrLength - 38;\n  const arrLengthMinus39 = arrLength - 39;\n  const arrLengthMinus40 = arrLength - 40;\n  const arrLengthMinus41 = arrLength - 41;\n  const arrLengthMinus42 = arrLength - 42;\n  const arrLengthMinus43 = arrLength - 43;\n  const arrLengthMinus44 = arrLength - 44;\n  const arrLengthMinus45 = arrLength - 45;\n  const arrLengthMinus46 = arrLength - 46;\n  const arrLengthMinus47 = arrLength - 47;\n  const arrLengthMinus48 = arrLength - 48;\n  const arrLengthMinus49 = arrLength - 49;\n  const arrLengthMinus50 = arrLength - 50;\n  const arrLengthMinus51 = arrLength - 51;\n  const arrLengthMinus52 = arrLength - 52;\n  const arrLengthMinus53 = arrLength - 53;\n  const arrLengthMinus54 = arrLength - 54;\n  const arrLengthMinus55 = arrLength - 55;\n  const arrLengthMinus56 = arrLength - 56;\n  const arrLengthMinus57 = arrLength - 57;\n  const arrLengthMinus58 = arrLength - 58;\n  const arrLengthMinus59 = arrLength - 59;\n  const arrLengthMinus60 = arrLength - 60;\n  const arrLengthMinus61 = arrLength - 61;\n  const arrLengthMinus62 = arrLength - 62;\n  const arrLengthMinus63 = arrLength - 63;\n  const arrLengthMinus64 = arrLength - 64;\n  const arrLengthMinus65 = arrLength - 65;\n  const arrLengthMinus66 = arrLength - 66;\n  const arrLengthMinus67 = arrLength - 67;\n  const arrLengthMinus68 = arrLength - 68;\n  const arrLengthMinus69 = arrLength - 69;\n  const arrLengthMinus70 = arrLength - 70;\n  const arrLengthMinus71 = arrLength - 71;\n  const arrLengthMinus72 = arrLength - 72;\n  const arrLengthMinus73 = arrLength - 73;\n  const arrLengthMinus74 = arrLength - 74;\n  const arrLengthMinus75 = arrLength - 75;\n  const arrLengthMinus76 = arrLength - 76;\n  const arrLengthMinus77 = arrLength - 77;\n  const arrLengthMinus78 = arrLength - 78;\n  const arrLengthMinus79 = arrLength - 79;\n  const arrLengthMinus80 = arrLength - 80;\n  const arrLengthMinus81 = arrLength - 81;\n  const arrLengthMinus82 = arrLength - 82;\n  const arrLengthMinus83 = arrLength - 83;\n  const arr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* ImPLemeNt thE functioN f THaT takeS n AS A parAmeter,\n  and rEturns a list of size n, such THaT tHe Value of THe elEmenT aT iNDeX i is THe faCtOrIaL oF i If i IS evEn\n  OR The SUM of numberS fROm 1 tO i othErWisE.\n  i sTARTS from 1.\n  tHe FactoRiaL Of i Is THE MUltIpLicatioN of THe numbErs FrOM 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "/* ImPLemeNt thE functioN f THaT takeS n AS A parAmeter,\n  and rEturns a list of size n, such THaT tHe Value of THe elEmenT aT iNDeX i is THe faCtOrIaL oF i If i IS evEn\n  OR The SUM of numberS fROm 1 tO i othErWisE.\n  i sTARTS from 1.\n  tHe FactoRiaL Of i Is THE MUltIpLicatioN of THe numbErs FrOM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f2 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f3 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f4 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f5 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f6 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f7 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f8 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f9 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f10 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f11 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f12 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f13 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f14 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f15 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f16 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f17 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f18 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f19 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f20 = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f21 = (n) => {\n  if (n < 1) {\n    return [];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  GiVEn a pOsitIve integER n, return A tuple tHat haS THE numBer of even aNd odd\n  integer palinDRoMeS tHat fall WIthiN the RaNgE(1, n), InCluSIve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a pOsitIve integER n, return A tuple tHat haS THE numBer of even aNd odd\n  integer palinDRoMeS tHat fall WIthiN the RaNgE(1, n), InCluSIve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = () => {\n    let i = 1;\n    while (i <= n) {\n      if (i % 2 === 0) {\n        i += 1;\n      } else {\n        i += 2;\n      }\n    }\n    return i;\n  };\n  const odd = () => {\n    let i = 1;\n    while (i <= n) {\n      if (i % 2!== 0) {\n        i += 1;\n      } else {\n        i += 2;\n      }\n    }\n    return i;\n  };\n  return [even(), odd()];\n};\n\nexport { evenOddPalindrome };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  WrITe a fUnctIon countNums which TAKeS an arRAY Of inTegers and rEturns\n  the number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  if A nuMBer iS nEgAtIvE, ThEN itS fIRSt sIGNed digit wIlL Be nEgatIvE:\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "/*\n  WrITe a fUnctIon countNums which TAKeS an arRAY Of inTegers and rEturns\n  the number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  if A nuMBer iS nEgAtIvE, ThEN itS fIRSt sIGNed digit wIlL Be nEgatIvE:\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums12 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums13 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums14 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums15 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums16 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums17 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums18 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums19 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums20 = (arr) => {\n  let sum = 0;\n  for (let i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We hAVe an ArraY 'arr' of N inteGERs arr[1], arr[2], ..., arr[N].The\n  NumbeRS in THe arRay will be rAndomly ordered. YouR TaSk Is To deterMIne iF\n  it iS pOsSIbLe tO Get aN aRrAy SoRTeD in Non-DeCREasING order by pErFOrmIng \n  tHe FolLoWING OperatIoN on thE giVEn ArRAY:\n      yOu aRe Allowed To pERform rIghT sHIft OperAtIOn aNy Number OF Times.\n  \n  one right Shift opERaTion meAns ShIFtinG ALl eleMentS of The array By One\n  Position in tHe rigHt direCtion. THe last EleMenT oF thE arRaY Will be mOVeD To\n  The starTIng POsition in tHe arrAy i.e. 0Th indeX. \n\n  If it is POsSIbLe to OBtAiN the soRTED arraY by peRforming the aBove oPeratIoN\n  Then return true ElsE return fALsE.\n  iF ThE GIVeN arRAy is EmpTy then return trUe.\n\n  Note: The giVEn list Is guARaNTeED tO haVe UniQuE ElemenTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "/*We hAVe an ArraY 'arr' of N inteGERs arr[1], arr[2],..., arr[N].The\n  NumbeRS in THe arRay will be rAndomly ordered. YouR TaSk Is To deterMIne iF\n  it iS pOsSIbLe tO Get aN aRrAy SoRTeD in Non-DeCREasING order by pErFOrmIng \n  tHe FolLoWING OperatIoN on thE giVEn ArRAY:\n      yOu aRe Allowed To pERform rIghT sHIft OperAtIOn aNy Number OF Times.\n  \n  one right Shift opERaTion meAns ShIFtinG ALl eleMentS of The array By One\n  Position in tHe rigHt direCtion. THe last EleMenT oF thE arRaY Will be mOVeD To\n  The starTIng POsition in tHe arrAy i.e. 0Th indeX. \n\n  If it is POsSIbLe to OBtAiN the soRTED arraY by peRforming the aBove oPeratIoN\n  Then return true ElsE return fALsE.\n  iF ThE GIVeN arRAy is EmpTy then return trUe.\n\n  Note: The giVEn list Is guARaNTeED tO haVe UniQuE ElemenTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arrLen = arr.length;\n  let arrTemp = arr.slice();\n  let arrTempLen = arrTemp.length;\n  let arrTempIndex = 0;\n  let arrTempIndex2 = 0;\n  let arrTempIndex3 = 0;\n  let arrTempIndex4 = 0;\n  let arrTempIndex5 = 0;\n  let arrTempIndex6 = 0;\n  let arrTempIndex7 = 0;\n  let arrTempIndex8 = 0;\n  let arrTempIndex9 = 0;\n  let arrTempIndex10 = 0;\n  let arrTempIndex11 = 0;\n  let arrTempIndex12 = 0;\n  let arrTempIndex13 = 0;\n  let arrTempIndex14 = 0;\n  let arrTempIndex15 = 0;\n  let arrTempIndex16 = 0;\n  let arrTempIndex17 = 0;\n  let arrTempIndex18 = 0;\n  let arrTempIndex19 = 0;\n  let arrTempIndex20 = 0;\n  let arrTempIndex21 = 0;\n  let arrTempIndex22 = 0;\n  let arrTempIndex23 = 0;\n  let arrTempIndex24 = 0;\n  let arrTempIndex25 = 0;\n  let arrTempIndex26 = 0;\n  let arrTempIndex27 = 0;\n  let arrTempIndex28 = 0;\n  let arrTempIndex29 = 0;\n  let arrTempIndex30 = 0;\n  let arrTempIndex31 = 0;\n  let arrTempIndex32 = 0;\n  let arrTempIndex33 = 0;\n  let arrTempIndex34 = 0;\n  let arrTempIndex35 = 0;\n  let arrTempIndex36 = 0;\n  let arrTempIndex37 = 0;\n  let arrTempIndex38 = 0;\n  let arrTempIndex39 = 0;\n  let arrTempIndex40 = 0;\n  let arrTempIndex41 = 0;\n  let arrTempIndex42 = 0;\n  let arrTempIndex43 = 0;\n  let arrTempIndex44 = 0;\n  let arrTempIndex45 = 0;\n  let arrTempIndex46 = 0;\n  let arrTempIndex47 = 0;\n  let arrTempIndex48 = 0;\n  let arrTempIndex49 = 0;\n  let arrTempIndex50 = 0;\n  let arrTempIndex51 = 0;\n  let arrTempIndex52 = 0;\n  let arrTempIndex53 = 0;\n  let arrTempIndex54 = 0;\n  let arrTempIndex55 = 0;\n  let arrTempIndex56 = 0;\n  let arrTempIndex57 = 0;\n  let arrTempIndex58 = 0;\n  let arrTempIndex59 = 0;\n  let arrTempIndex60 = 0;\n  let arrTempIndex61 = 0;\n  let arrTempIndex62 = 0;\n  let arrTempIndex63 = 0;\n  let arrTempIndex64 = 0;\n  let arrTempIndex65 = 0;\n  let arrTempIndex66 = 0;\n  let arrTempIndex67 = 0;\n  let arrTempIndex68 = 0;\n  let arrTempIndex69 = 0;\n  let arrTempIndex70 = 0;\n  let arrTempIndex71 = 0;\n  let arrTempIndex72 = 0;\n  let arrTempIndex73 = 0;\n  let arrTempIndex74 = 0;\n  let arrTempIndex75 = 0;\n  let arrTempIndex76 = 0;\n  let arrTempIndex77 = 0;\n  let arrTempIndex78 = 0;\n  let arrTempIndex79 = 0;\n  let arrTempIndex80 = 0;\n  let arrTempIndex81 = 0;\n  let arrTempIndex82 = 0;\n  let arrTempIndex83 = 0;\n  let arrTempIndex84 = 0;\n  let arrTempIndex85 = 0;\n  let arrTempIndex86 = 0;\n  let arrTempIndex87 = 0;\n  let arrTempIndex88 = 0;\n  let arrTempIndex89 = 0;\n  let arrTempIndex90 = 0;\n  let arrTempIndex91 = 0;\n  let arrTempIndex92 = 0;\n  let arrTempIndex93 = 0;\n  let arrTempIndex94 = 0;\n  let arrTempIndex95 = 0;\n  let arrTempIndex96 = 0;\n  let arrTempIndex97 = 0;\n  let arrTempIndex98 = 0;\n  let arrTempIndex99 = 0;\n  let arrTempIndex100 = 0;\n  let arrTempIndex101 = 0;\n  let arrTempIndex102 = 0;\n  let arrTempIndex103 = 0;\n  let arrTempIndex104", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In tHIs prObleM, you will IMPlEment A FUNctiOn that takeS two lists of numberS,\n  AnD dEtErmines WHethEr it Is PoSSiBle TO perFoRm An exchange Of ELeMEntS\n  bETWeeN THem to make lst1 A list oF OnlY eveN nUmbErS.\n  tHERe is no LiMit on The NUmBeR OF EXchAnGed elemEntS BetweeN lst1 anD lst2.\n  IF It iS posSiBLe tO exchange eLementS BEtweeN the lst1 and lst2 tO make\n  alL ThE elemeNts Of lst1 TO be eVEN, return \"YES\".\n  OTherWisE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "/*In tHIs prObleM, you will IMPlEment A FUNctiOn that takeS two lists of numberS,\n  AnD dEtErmines WHethEr it Is PoSSiBle TO perFoRm An exchange Of ELeMEntS\n  bETWeeN THem to make lst1 A list oF OnlY eveN nUmbErS.\n  tHERe is no LiMit on The NUmBeR OF EXchAnGed elemEntS BetweeN lst1 anD lst2.\n  IF It iS posSiBLe tO exchange eLementS BEtweeN the lst1 and lst2 tO make\n  alL ThE elemeNts Of lst1 TO be eVEN, return \"YES\".\n  OTherWisE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let i = 0;\n  while (i < lst1.length && i < lst2.length) {\n    if (lst1[i] < lst2[i]) {\n      lst1.splice(i, 1);\n      lst2.splice(i, 1);\n    } else if (lst1[i] > lst2[i]) {\n      lst2.splice(i, 1);\n      lst1.splice(i, 1);\n    } else {\n      i++;\n    }\n  }\n  return lst1.length === lst2.length;\n};\n\nmodule.exports = exchange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*GivEN a strIng rEpresentING a sPace sEPARateD lowercase Letters, return a dictionary\n  OF tHe LeTter witH The mOst rEpEtITiOn aND conTaInInG tHE cORreSpONDinG COunt.\n  If sevErAL leTterS hAve ThE SAME occurReNce, return alL of THeM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "/*GivEN a strIng rEpresentING a sPace sEPARateD lowercase Letters, return a dictionary\n  OF tHe LeTter witH The mOst rEpEtITiOn aND conTaInInG tHE cORreSpONDinG COunt.\n  If sevErAL leTterS hAve ThE SAME occurReNce, return alL of THeM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let lowercaseLetters = test.toLowerCase();\n  let letters = lowercaseLetters.split('');\n  let counter = 0;\n  let i = 0;\n  let j = 0;\n  while (i < letters.length) {\n    if (letters[i] === letters[j]) {\n      counter++;\n      j++;\n    } else {\n      histogram[letters[i]] = counter;\n      counter = 0;\n      i++;\n    }\n  }\n  return histogram;\n};\n\nmodule.exports = histogram;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*TasK\n  we arE givEn two strINGs s And c, yoU HAVe to Deleted all The characters in s that ARe EqUaL to any cHAracTer in c\n  tHeN cHEcK if THe reSuLt StRiNG iS PalInDROme.\n  a STring is caLlED paLindRoMe iF iT READs the sAmE backWarD As FoRWARD.\n  YoU sHould return a tuple cOntAIning tHe rEsULt sTrinG aND trUe/False fOR The chEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "/*TasK\n  we arE givEn two strINGs s And c, yoU HAVe to Deleted all The characters in s that ARe EqUaL to any cHAracTer in c\n  tHeN cHEcK if THe reSuLt StRiNG iS PalInDROme.\n  a STring is caLlED paLindRoMe iF iT READs the sAmE backWarD As FoRWARD.\n  YoU sHould return a tuple cOntAIning tHe rEsULt sTrinG aND trUe/False fOR The chEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let i = s.length - 1;\n  let j = 0;\n  let result = [];\n  let isFound = false;\n  while (i >= 0 && j < c.length) {\n    if (s[i] === c[j]) {\n      isFound = true;\n      result.push(s.substring(i + 1, s.length));\n      i--;\n    } else {\n      j++;\n    }\n  }\n  if (isFound) {\n    return result;\n  } else {\n    return false;\n  }\n};\n\nconst reverseDelete2 = (s, c) => {\n  let i = s.length - 1;\n  let j = 0;\n  let result = [];\n  let isFound = false;\n  while (i >= 0 && j < c.length) {\n    if (s[i] === c[j]) {\n      isFound = true;\n      result.push(s.substring(i + 1, s.length));\n      i--;\n    } else {\n      j++;\n    }\n  }\n  if (isFound) {\n    return result;\n  } else {\n    return false;\n  }\n};\n\nconst reverseDelete3 = (s, c) => {\n  let i = s.length - 1;\n  let j = 0;\n  let result = [];\n  let isFound = false;\n  while (i >= 0 && j < c.length) {\n    if (s[i] === c[j]) {\n      isFound = true;\n      result.push(s.substring(i + 1, s.length));\n      i--;\n    } else {\n      j++;\n    }\n  }\n  if (isFound) {\n    return result;\n  } else {\n    return false;\n  }\n};\n\nconst reverseDelete4 = (s, c) => {\n  let i = s.length - 1;\n  let j = 0;\n  let result = [];\n  let isFound = false;\n  while (i >= 0 && j < c.length) {\n    if (s[i] === c[j]) {\n      isFound = true;\n      result.push(s.substring(i + 1, s.length));\n      i--;\n    } else {\n      j++;\n    }\n  }\n  if (isFound) {\n    return result;\n  } else {\n    return false;\n  }\n};\n\nconst reverseDelete5 = (s, c) => {\n  let i = s.length - 1;\n  let j = 0;\n  let result = [];\n  let isFound = false;\n  while (i >= 0 && j < c.length) {\n    if (s[i] === c[j]) {\n      isFound = true;\n      result.push(s.substring(i + 1, s.length));\n      i--;\n    } else {\n      j++;\n    }\n  }\n  if (isFound) {\n    return result;\n  } else {\n    return false;\n  }\n};\n\nconst reverseDelete6 = (s, c) => {\n  let i = s.length - 1;\n  let j = 0;\n  let result = [];\n  let isFound = false;\n  while (i >= 0 && j < c.length) {\n    if (s[i] === c[j]) {\n      isFound = true;\n      result.push(s.substring(i + 1, s.length));\n      i--;\n    } else {\n      j++;\n    }\n  }\n  if (isFound) {\n    return result;\n  } else {\n    return false;\n  }\n};\n\nconst reverseDelete7 = (s, c) => {\n  let i = s.length - 1;\n  let j = 0;\n  let result = [];\n  let isFound = false;\n  while (i >= 0 && j < c.length) {\n    if (s[i] === c[j]) {\n      isFound = true;\n      result.push(s.substring(i + 1, s.length));\n      i--;\n    } else {\n      j++;\n    }\n  }\n  if (isFound) {\n    return result;\n  } else {\n    return false;\n  }\n};\n\nconst reverseDelete8 = (s, c) => {\n  let i = s.length - 1;\n  let j = 0;\n  let result = [];\n  let isFound = false;\n  while (i >= 0 && j < c.length) {\n    if (s[i] === c[j]) {\n      isFound = true;\n      result.push(s.substring(i + 1, s.length));\n      i--;\n    } else {\n      j++;\n    }\n  }\n  if (isFound) {\n    return result;\n  } else {\n    return false;\n  }\n};\n\nconst reverseDelete9 = (s, c) => {\n  let i = s.length - 1;\n  let j = 0;\n  let result = [];\n  let isFound = false;\n  while (i >= 0 && j < c.length) {\n    if (s[i] === c[j]) {\n      isFound = true;\n      result.push(s.substring(i + 1, s.length));\n      i--;\n    } else {\n      j++;\n    }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*GivEN a list of StriNgs, where EACh StrinG CONsisTs of only diGits, return a list.\n  Each element i oF ThE oUtPut shouLD be \"tHe nuMbEr OF oDd eLEmenTs in ThE\n  sTrINg i OF thE iNPUt.\" wHERe all the i's sHoULd bE repLaCed By THE NUmber\n  oF oDd digIts in THe i'th StRING Of tHe Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "/*GivEN a list of StriNgs, where EACh StrinG CONsisTs of only diGits, return a list.\n  Each element i oF ThE oUtPut shouLD be \"tHe nuMbEr OF oDd eLEmenTs in ThE\n  sTrINg i OF thE iNPUt.\" wHERe all the i's sHoULd bE repLaCed By THE NUmber\n  oF oDd digIts in THe i'th StRING Of tHe Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      res.push(`${lst[i]} of the ${count}nput.`);\n    }\n  }\n  return res;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  GiVEn an ArraY of integERS nums, fInd thE MINimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn an ArraY of integERS nums, fInd thE MINimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n    if (sum === minSum) {\n      return minSum;\n    }\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  YoU Are gIven A rectangULAr grid Of welLS. eAch rOw represenTs a single well,\n  and eACh 1 in A rOw RepreseNTs a sInglE uNiT Of WatER.\n  EacH wElL hAs A CoRResPoNDIng BUCket that cAn BE usEd to ExTraCt WATER from iT, \n  aNd all BucKEtS hAVE THe sAmE capacity.\n  Your taSk iS To use tHe bUcKEts To emPtY The WeLls.\n  OutPUT the nUmber of tImes you NEeD to lowEr tHe BUckeTS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "/*\n  YoU Are gIven A rectangULAr grid Of welLS. eAch rOw represenTs a single well,\n  and eACh 1 in A rOw RepreseNTs a sInglE uNiT Of WatER.\n  EacH wElL hAs A CoRResPoNDIng BUCket that cAn BE usEd to ExTraCt WATER from iT, \n  aNd all BucKEtS hAVE THe sAmE capacity.\n  Your taSk iS To use tHe bUcKEts To emPtY The WeLls.\n  OutPUT the nUmber of tImes you NEeD to lowEr tHe BUckeTS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const grid_length = grid.length;\n  const grid_width = grid[0].length;\n  const bucket_capacity = capacity;\n  const bucket_length = Math.ceil(grid_length / bucket_capacity);\n  const bucket_width = Math.ceil(grid_width / bucket_capacity);\n\n  const bucket_grid = new Array(bucket_length);\n  for (let i = 0; i < bucket_length; i++) {\n    bucket_grid[i] = new Array(bucket_width);\n    for (let j = 0; j < bucket_width; j++) {\n      bucket_grid[i][j] = 0;\n    }\n  }\n\n  const bucket_count = new Array(grid_length);\n  for (let i = 0; i < grid_length; i++) {\n    bucket_count[i] = 0;\n  }\n\n  for (let i = 0; i < grid_length; i++) {\n    for (let j = 0; j < grid_width; j++) {\n      if (grid[i][j] === 1) {\n        bucket_count[i]++;\n      }\n    }\n  }\n\n  const bucket_count_sum = bucket_count.reduce((a, b) => a + b);\n\n  const bucket_count_sum_sum = bucket_count_sum.reduce((a, b) => a + b);\n\n  const bucket_count_sum_sum_sum = bucket_count_sum_sum.reduce((a, b) => a + b);\n\n  const bucket_count_sum_sum_sum_sum = bucket_count_sum_sum_sum.reduce((a, b) => a + b);\n\n  const bucket_count_sum_sum_sum_sum_sum = bucket_count_sum_sum_sum_sum.reduce((a, b) => a + b);\n\n  const bucket_count_sum_sum_sum_sum_sum_sum = bucket_count_sum_sum_sum_sum_sum.reduce((a, b) => a + b);\n\n  const bucket_count_sum_sum_sum_sum_sum_sum_sum = bucket_count_sum_sum_sum_sum_sum_sum.reduce((a, b) => a + b);\n\n  const bucket_count_sum_sum_sum_sum_sum_sum_sum_sum = bucket_count_sum_sum_sum_sum_sum_sum_sum.reduce((a, b) => a + b);\n\n  const bucket_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = bucket_count_sum_sum_sum_sum_sum_sum_sum_sum.reduce((a, b) => a + b);\n\n  const bucket_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = bucket_count_sum_sum_sum_sum_sum_sum_sum_sum_sum.reduce((a, b) => a + b);\n\n  const bucket_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = bucket_count_sum_sum_sum_sum_sum_sum_sum_sum_sum.reduce((a, b) => a + b);\n\n  const bucket_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = bucket_count_sum_sum_sum_sum_sum_sum_sum_sum_sum.reduce((a, b) => a + b);\n\n  return bucket_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum + bucket_capacity;\n};\n\nmodule.exports = maxFill;<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let tmp;\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n    }\n    i++;\n    j--;\n  }\n  return arr;\n};\n\nconst sortArray2 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let tmp;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n    }\n    i++;\n    j--;\n  }\n  return arr;\n};\n\nconst sortArray3 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let tmp;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n    }\n    i++;\n    j--;\n  }\n  return arr;\n};\n\nconst sortArray4 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let tmp;\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n    }\n    i++;\n    j--;\n  }\n  return arr;\n};\n\nconst sortArray5 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let tmp;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n    }\n    i++;\n    j--;\n  }\n  return arr;\n};\n\nconst sortArray6 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let tmp;\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n    }\n    i++;\n    j--;\n  }\n  return arr;\n};\n\nconst sortArray7 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let tmp;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n    }\n    i++;\n    j--;\n  }\n  return arr;\n};\n\nconst sortArray8 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let tmp;\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n    }\n    i++;\n    j--;\n  }\n  return arr;\n};\n\nconst sortArray9 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let tmp;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n    }\n    i++;\n    j--;\n  }\n  return arr;\n};\n\nconst sortArray10 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let tmp;\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n    }\n    i++;\n    j--;\n  }\n  return arr;\n};\n\nconst sortArray11 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let tmp;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n    }\n    i++;\n    j--;\n  }\n  return arr;\n};\n\nconst sortArray12 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let tmp;\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n    }\n    i++;\n    j--;\n  }\n  return arr;\n};\n\nconst sortArray13 = (arr) => {\n  let i = 0;\n  let j = arr.length -", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*GivEN a stRing s And a natuRAL nUmber n, YOU Have Been tasked To implement \n  a functIOn ThAt Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s iS emPTy ThEN THE fuNcTion shoUld return AN empty list.\n  notE: yOU maY assUmE The InPut strING contAins only Letters ANd Spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "/*GivEN a stRing s And a natuRAL nUmber n, YOU Have Been tasked To implement \n  a functIOn ThAt Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s iS emPTy ThEN THE fuNcTion shoUld return AN empty list.\n  notE: yOU maY assUmE The InPut strING contAins only Letters ANd Spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You ARe giVen a word. your task IS To Find tHE CLoseSt vowel thaT stands between \n  two COnSoNaNts from THe riGht sIdE oF ThE word (caSE senSiTiVe).\n  \n  voWElS in The BeGINniNG And ending DoESn't CounT. REtuRn EMPTY strinG iF you dIdn'T\n  FiNd ANY VOweL mEt the abOve COnditiOn. \n\n  YOu MAy aSsumE tHAt tHe Given sTRIng coNtains EnGlish leTTeR only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "/*You ARe giVen a word. your task IS To Find tHE CLoseSt vowel thaT stands between \n  two COnSoNaNts from THe riGht sIdE oF ThE word (caSE senSiTiVe).\n  \n  voWElS in The BeGINniNG And ending DoESn't CounT. REtuRn EMPTY strinG iF you dIdn'T\n  FiNd ANY VOweL mEt the abOve COnditiOn. \n\n  YOu MAy aSsumE tHAt tHe Given sTRIng coNtains EnGlish leTTeR only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowel = '';\n  let wordLength = word.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let vowelCount = 0;\n  let vowelCount2 = 0;\n  let vowelCount3 = 0;\n  let vowelCount4 = 0;\n  let vowelCount5 = 0;\n  let vowelCount6 = 0;\n  let vowelCount7 = 0;\n  let vowelCount8 = 0;\n  let vowelCount9 = 0;\n  let vowelCount10 = 0;\n  let vowelCount11 = 0;\n  let vowelCount12 = 0;\n  let vowelCount13 = 0;\n  let vowelCount14 = 0;\n  let vowelCount15 = 0;\n  let vowelCount16 = 0;\n  let vowelCount17 = 0;\n  let vowelCount18 = 0;\n  let vowelCount19 = 0;\n  let vowelCount20 = 0;\n  let vowelCount21 = 0;\n  let vowelCount22 = 0;\n  let vowelCount23 = 0;\n  let vowelCount24 = 0;\n  let vowelCount25 = 0;\n  let vowelCount26 = 0;\n  let vowelCount27 = 0;\n  let vowelCount28 = 0;\n  let vowelCount29 = 0;\n  let vowelCount30 = 0;\n  let vowelCount31 = 0;\n  let vowelCount32 = 0;\n  let vowelCount33 = 0;\n  let vowelCount34 = 0;\n  let vowelCount35 = 0;\n  let vowelCount36 = 0;\n  let vowelCount37 = 0;\n  let vowelCount38 = 0;\n  let vowelCount39 = 0;\n  let vowelCount40 = 0;\n  let vowelCount41 = 0;\n  let vowelCount42 = 0;\n  let vowelCount43 = 0;\n  let vowelCount44 = 0;\n  let vowelCount45 = 0;\n  let vowelCount46 = 0;\n  let vowelCount47 = 0;\n  let vowelCount48 = 0;\n  let vowelCount49 = 0;\n  let vowelCount50 = 0;\n  let vowelCount51 = 0;\n  let vowelCount52 = 0;\n  let vowelCount53 = 0;\n  let vowelCount54 = 0;\n  let vowelCount55 = 0;\n  let vowelCount56 = 0;\n  let vowelCount57 = 0;\n  let vowelCount58 = 0;\n  let vowelCount59 = 0;\n  let vowelCount60 = 0;\n  let vowelCount61 = 0;\n  let vowelCount62 = 0;\n  let vowelCount63 = 0;\n  let vowelCount64 = 0;\n  let vowelCount65 = 0;\n  let vowelCount66 = 0;\n  let vowelCount67 = 0;\n  let vowelCount68 = 0;\n  let vowelCount69 = 0;\n  let vowelCount70 = 0;\n  let vowelCount71 = 0;\n  let vowelCount72 = 0;\n  let vowelCount73 = 0;\n  let vowelCount74 = 0;\n  let vowelCount75 = 0;\n  let vowelCount76 = 0;\n  let vowelCount77 = 0;\n  let vowelCount78 = 0;\n  let vowelCount79 = 0;\n  let vowelCount80 = 0;\n  let vowelCount81 = 0;\n  let vowelCount82 = 0;\n  let vowelCount83 = 0;\n  let vowelCount84 = 0;\n  let vowelCount85 = 0;\n  let vowelCount86 = 0;\n  let vowelCount87 = 0;\n  let vowelCount88 = 0;\n  let vowelCount89 = 0;\n  let vowelCount90 = 0;\n  let vowelCount91 = 0;\n  let vowelCount92 = 0;\n  let vowelCount93 = 0;\n  let vowelCount94 = 0;\n  let vowelCount95 = 0;\n  let vowelCount96 = 0;\n  let vowelCount97 = 0;\n  let vowelCount98 = 0;\n  let vowelCount99 = 0;\n  let vowelCount100 = 0;\n  let vowelCount101 = 0;\n  let vowelCount102 = 0;\n  let vowelCount103 = 0;\n  let vowelCount104 = 0;\n  let vowelCount105 = 0;\n  let vowelCount106 = 0;\n  let vowelCount107 = 0;\n  let vowelCount108 = 0;\n  let vowelCount109 = 0;\n  let vowelCount110 = 0;\n  let vowelCount111 = 0;\n  let vowelCount112 = 0;\n  let vowelCount113 = 0;\n  let vowelCount114 = 0;\n  let vowelCount115 = 0;\n  let vowelCount116 = 0;\n  let vowelCount117 = 0;\n  let vowelCount118 = 0;\n  let vowelCount119 = 0;\n  let vowelCount120 = 0;\n  let vowelCount121 = 0;\n  let vowelCount122 = 0;\n  let vowelCount123 = 0;\n  let vowelCount124 = 0;\n  let vowelCount125 = 0;\n  let vowelCount126 = 0;\n  let vowelCount127 = 0;\n  let vowelCount128 = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* YoU Are gIven A list of two stRINgS, both STRIngs Consist of oPen\n  parentheses '(' or cLOsE pArEntheseS ')' Only.\n  your JoB iS To CheCK if iT iS pOsSiBLe TO coNcATEnaTE The two strInGS in\n  soMe orDeR, thAt THE REsultiNg StrinG wiLL bE gOOD.\n  a StrInG S is conSidERed to bE goOd IF anD onlY iF All PaRentheSES in S\n  are Balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "/* YoU Are gIven A list of two stRINgS, both STRIngs Consist of oPen\n  parentheses '(' or cLOsE pArEntheseS ')' Only.\n  your JoB iS To CheCK if iT iS pOsSiBLe TO coNcATEnaTE The two strInGS in\n  soMe orDeR, thAt THE REsultiNg StrinG wiLL bE gOOD.\n  a StrInG S is conSidERed to bE goOd IF anD onlY iF All PaRentheSES in S\n  are Balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let i = 0\n  let j = 0\n  let isBalanced = true\n  let isGood = true\n  let isBalanced2 = true\n  let isGood2 = true\n  let isBalanced3 = true\n  let isGood3 = true\n  let isBalanced4 = true\n  let isGood4 = true\n  let isBalanced5 = true\n  let isGood5 = true\n  let isBalanced6 = true\n  let isGood6 = true\n  let isBalanced7 = true\n  let isGood7 = true\n  let isBalanced8 = true\n  let isGood8 = true\n  let isBalanced9 = true\n  let isGood9 = true\n  let isBalanced10 = true\n  let isGood10 = true\n  let isBalanced11 = true\n  let isGood11 = true\n  let isBalanced12 = true\n  let isGood12 = true\n  let isBalanced13 = true\n  let isGood13 = true\n  let isBalanced14 = true\n  let isGood14 = true\n  let isBalanced15 = true\n  let isGood15 = true\n  let isBalanced16 = true\n  let isGood16 = true\n  let isBalanced17 = true\n  let isGood17 = true\n  let isBalanced18 = true\n  let isGood18 = true\n  let isBalanced19 = true\n  let isGood19 = true\n  let isBalanced20 = true\n  let isGood20 = true\n  let isBalanced21 = true\n  let isGood21 = true\n  let isBalanced22 = true\n  let isGood22 = true\n  let isBalanced23 = true\n  let isGood23 = true\n  let isBalanced24 = true\n  let isGood24 = true\n  let isBalanced25 = true\n  let isGood25 = true\n  let isBalanced26 = true\n  let isGood26 = true\n  let isBalanced27 = true\n  let isGood27 = true\n  let isBalanced28 = true\n  let isGood28 = true\n  let isBalanced29 = true\n  let isGood29 = true\n  let isBalanced30 = true\n  let isGood30 = true\n  let isBalanced31 = true\n  let isGood31 = true\n  let isBalanced32 = true\n  let isGood32 = true\n  let isBalanced33 = true\n  let isGood33 = true\n  let isBalanced34 = true\n  let isGood34 = true\n  let isBalanced35 = true\n  let isGood35 = true\n  let isBalanced36 = true\n  let isGood36 = true\n  let isBalanced37 = true\n  let isGood37 = true\n  let isBalanced38 = true\n  let isGood38 = true\n  let isBalanced39 = true\n  let isGood39 = true\n  let isBalanced40 = true\n  let isGood40 = true\n  let isBalanced41 = true\n  let isGood41 = true\n  let isBalanced42 = true\n  let isGood42 = true\n  let isBalanced43 = true\n  let isGood43 = true\n  let isBalanced44 = true\n  let isGood44 = true\n  let isBalanced45 = true\n  let isGood45 = true\n  let isBalanced46 = true\n  let isGood46 = true\n  let isBalanced47 = true\n  let isGood47 = true\n  let isBalanced48 = true\n  let isGood48 = true\n  let isBalanced49 = true\n  let isGood49 = true\n  let isBalanced50 = true\n  let isGood50 = true\n  let isBalanced51 = true\n  let isGood51 = true\n  let isBalanced52 = true\n  let isGood52 = true\n  let isBalanced53 = true\n  let isGood53 = true\n  let isBalanced54 = true\n  let isGood54 = true\n  let isBalanced55 = true\n  let isGood55 = true\n  let isBalanced56 = true\n  let isGood56 = true\n  let isBalanced57 = true\n  let isGood57 = true\n  let isBalanced58 = true\n  let isGood58 = true\n  let isBalanced59 = true\n  let isGood59 = true\n  let isBalanced60 = true\n  let isGood60 = true\n  let isBalanced61 = true\n  let isGood61 = true\n  let isBalanced62 = true\n  let isGood62 = true\n  let isBalanced63 = true\n  let isGood63 = true\n  let isBalanced64 = true\n  let isGood64 = true\n  let isBalanced65 = true\n  let isGood65 = true\n  let isBalanced66 = true\n  let isGood66 = true\n  let isBalanced67 = true\n  let isGood67 = true\n  let isBalanced68 = true\n  let isGood68 = true\n  let isBalanced69 = true\n  let isGood69 = true\n  let isBalanced70 = true\n  let isGood70 = true\n  let isBalanced71 = true\n  let isGood71 = true\n  let isBalanced72 = true\n  let isGood72 = true\n  let isBalanced73 = true\n  let isGood73 = true\n  let isBalanced74 = true\n  let isGood74 = true\n  let isBalanced75 = true\n  let isGood75 = true\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* OuT Of list of strings, return The longest oNe. Return THE fIrst oNE in CAse oF multiple\n  strings oF the same length. RetURn NuLl in Case the INput list Is emPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "/* OuT Of list of strings, return The longest oNe. Return THE fIrst oNE in CAse oF multiple\n  strings oF the same length. RetURn NuLl in Case the INput list Is emPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  let longest = strings[0]\n  let longestLength = strings[0].length\n\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestLength) {\n      longest = strings[i]\n      longestLength = strings[i].length\n    }\n  }\n\n  return longest\n}\n\nexport default longest\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  GiVEn an ArraY arr of integERS aNd a poSITIve iNteger k, return a sorTed list \n  of length k with thE maximum k NuMbErS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn an ArraY arr of integERS aNd a poSITIve iNteger k, return a sorTed list \n  of length k with thE maximum k NuMbErS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (k === 0) {\n    return arr;\n  }\n  if (k === 1) {\n    return arr.length === 0? [] : arr;\n  }\n  const max = arr.reduce((a, b) => Math.max(a, b), -Infinity);\n  const maxIndex = arr.reduce((a, b) => Math.max(a, b), -1);\n  const maxIndexArr = arr.slice(maxIndex + 1);\n  const maxIndexArrLength = maxIndexArr.length;\n  const maxIndexArrIndex = maxIndexArr.indexOf(max);\n  const maxIndexArrIndexArr = maxIndexArr.slice(maxIndexArrIndex + 1);\n  const maxIndexArrIndexArrLength = maxIndexArrIndexArr.length;\n  const maxIndexArrIndexArrIndex = maxIndexArrIndexArr.indexOf(max);\n  const maxIndexArrIndexArrIndexArr = maxIndexArrIndexArr.slice(maxIndexArrIndexArrIndex + 1);\n  const maxIndexArrIndexArrIndexArrLength = maxIndexArrIndexArrIndexArr.length;\n  const maxIndexArrIndexArrIndexArrIndex = maxIndexArrIndexArrIndexArr.indexOf(max);\n  const maxIndexArrIndexArrIndexArrIndexArr = maxIndexArrIndexArrIndexArr.slice(maxIndexArrIndexArrIndexArrIndex + 1);\n  const maxIndexArrIndexArrIndexArrIndexArrLength = maxIndexArrIndexArrIndexArrIndexArr.length;\n  const maxIndexArrIndexArrIndexArrIndexArrIndex = maxIndexArrIndexArrIndexArrIndexArr.indexOf(max);\n  const maxIndexArrIndexArrIndexArrIndexArrIndexArr = maxIndexArrIndexArrIndexArrIndexArr.slice(maxIndexArrIndexArrIndexArrIndexArrIndex + 1);\n  const maxIndexArrIndexArrIndexArrIndexArrIndexArrLength = maxIndexArrIndexArrIndexArrIndexArrIndexArr.length;\n  const maxIndexArrIndexArrIndexArrIndexArrIndexArrIndex = maxIndexArrIndexArrIndexArrIndexArrIndexArr.indexOf(max);\n  const maxIndexArrIndexArrIndexArrIndexArrIndexArrIndexArr = maxIndexArrIndexArrIndexArrIndexArrIndexArr.slice(maxIndexArrIndexArrIndexArrIndexArrIndexArrIndex + 1);\n  const maxIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndex = maxIndexArrIndexArrIndexArrIndexArrIndexArrIndexArr.indexOf(max);\n  const maxIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArr = maxIndexArrIndexArrIndexArrIndexArrIndexArrIndexArr.slice(maxIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndex + 1);\n  const maxIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArr = maxIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArr.slice(maxIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndex + 1);\n  const maxIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArr = maxIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArr.slice(maxIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndex + 1);\n  const maxIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexArrIndexAr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*GivEN a noN-empTy list of inteGERs, return The suM OF All oF the odd eleMents that are in even pOSiTiOnS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "/*GivEN a noN-empTy list of inteGERs, return The suM OF All oF the odd eleMents that are in even pOSiTiOnS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = arr.reduce((acc, curr) => acc + curr, 0);\n  return sum % k;\n};\n\nmodule.exports = addElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  GiVEn a pOsitIve integER n, return A sOrted list THAT has The odd numbErs in collatz sequencE.\n\n  thE COlLatz conJEctuRe is A cOnJEcTurE in MathEmAtIcS tHAt COncErNS A seQUEnce definEd\n  AS foLlowS: sTarT wITH ANy posiTiVe intEgeR n. thEn EACH TerM iS obtainEd fROm the \n  pRevIoUS teRm as FoLLowS: iF the prEVIous tErm is eveN, the nexT TeRm is onE haLf OF \n  the PREviouS terM. If The previOuS teRm is odd, thE next Term is 3 Times tHe prevIouS\n  teRm PluS 1. ThE cONjecturE Is THaT no mattER whAT value of n, The seQuEnce wiLl alwayS ReACh 1.\n\n  note: \n      1. cOlLaTz(1) is [1].\n      2. reTURNed list soRted in iNcreasing ordEr.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a pOsitIve integER n, return A sOrted list THAT has The odd numbErs in collatz sequencE.\n\n  thE COlLatz conJEctuRe is A cOnJEcTurE in MathEmAtIcS tHAt COncErNS A seQUEnce definEd\n  AS foLlowS: sTarT wITH ANy posiTiVe intEgeR n. thEn EACH TerM iS obtainEd fROm the \n  pRevIoUS teRm as FoLLowS: iF the prEVIous tErm is eveN, the nexT TeRm is onE haLf OF \n  the PREviouS terM. If The previOuS teRm is odd, thE next Term is 3 Times tHe prevIouS\n  teRm PluS 1. ThE cONjecturE Is THaT no mattER whAT value of n, The seQuEnce wiLl alwayS ReACh 1.\n\n  note: \n      1. cOlLaTz(1) is [1].\n      2. reTURNed list soRted in iNcreasing ordEr.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let res = [];\n  let curr = n;\n  while (curr > 1) {\n    if (curr % 2 === 0) {\n      curr = curr / 2;\n    } else {\n      res.push(curr);\n      curr = 3 * curr + 1;\n    }\n  }\n  return res;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You HAve tO wriTe a functION wHich vALIDateS a given date strIng and\n  returns true IF tHe date Is Valid otHErwiSe faLsE.\n  THE date iS vaLId if AlL oF tHe FOlLOwiNg RULes ARE satisfieD:\n  1. THE date stRing Is Not EmPTY.\n  2. tHe numbEr Of dayS is NOt LeSS THAn 1 oR hIgher thAn 31 dAYs for mOntHs 1,3,5,7,8,10,12. aNd tHe nuMbER of DaYs is noT LEss thAn 1 or highEr than 30 dAYs For monThs 4,6,9,11. anD, The nUMBer of Days Is nOt less thAn 1 Or hIgher than 29 For thE month 2.\n  3. the monThs shoUld Not Be LesS thAn 1 OR higher THaN 12.\n  4. thE date should BE in thE Format: mm-Dd-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "/*You HAve tO wriTe a functION wHich vALIDateS a given date strIng and\n  returns true IF tHe date Is Valid otHErwiSe faLsE.\n  THE date iS vaLId if AlL oF tHe FOlLOwiNg RULes ARE satisfieD:\n  1. THE date stRing Is Not EmPTY.\n  2. tHe numbEr Of dayS is NOt LeSS THAn 1 oR hIgher thAn 31 dAYs for mOntHs 1,3,5,7,8,10,12. aNd tHe nuMbER of DaYs is noT LEss thAn 1 or highEr than 30 dAYs For monThs 4,6,9,11. anD, The nUMBer of Days Is nOt less thAn 1 Or hIgher than 29 For thE month 2.\n  3. the monThs shoUld Not Be LesS thAn 1 OR higher THaN 12.\n  4. thE date should BE in thE Format: mm-Dd-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateParts = date.split('-');\n  if (dateParts.length!== 3) {\n    return false;\n  }\n  const day = parseInt(dateParts[2], 10);\n  const month = parseInt(dateParts[1], 10);\n  const year = parseInt(dateParts[0], 10);\n  const dayOfMonth = day;\n  const monthOfYear = month;\n  const yearOfYear = year;\n  const dayOfWeek = dayOfMonth % 7;\n  const dayOfYear = dayOfMonth;\n  const monthOfYear = monthOfYear;\n  const yearOfYear = yearOfYear;\n  const isLeapYear = (year % 4 === 0 && year % 100!== 0) || year % 400 === 0;\n  const isValid = dayOfWeek >= 1 && dayOfWeek <= 7 && dayOfMonth >= 1 && dayOfMonth <= 31 && monthOfYear >= 1 && monthOfYear <= 12 && yearOfYear >= 1 && yearOfYear <= 9999 && isLeapYear;\n  return isValid;\n};\n\nexport default validDate;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* GiVEn a sTrinG of words, return A list OF wOrds sPLIT on wHitespace, iF no whitespaces exiSTs in ThE tExt you\n  sHOuld SpliT oN cOMmAs ',' iF No coMmAs ExIsTS yOU shOuLD return The NUMber of lowEr-CAse LettErS wiTh ODD ORder in thE\n  aLphabEt, oRD('a') = 0, OrD('B') = 1, ... ORD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "/* GiVEn a sTrinG of words, return A list OF wOrds sPLIT on wHitespace, iF no whitespaces exiSTs in ThE tExt you\n  sHOuld SpliT oN cOMmAs ',' iF No coMmAs ExIsTS yOU shOuLD return The NUMber of lowEr-CAse LettErS wiTh ODD ORder in thE\n  aLphabEt, oRD('a') = 0, OrD('B') = 1,... ORD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* GiVEn a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAn 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "/* GiVEn a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAn 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      return false;\n    }\n    if (lst[i] > lst[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You ARe giVen tWo intervALS,\n  wHere eACH InteRval is a paiR of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "/*You ARe giVen tWo intervALS,\n  wHere eACH InteRval is a paiR of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start >= interval2.start && interval1.end <= interval2.end) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  YoU Are gIven An array arr oF INtEgers AND You nEed to return\n  sum of Magnitudes of integERs MuLtIplied bY ProdUct oF aLl SIgNs\n  oF Each NuMbEr in ThE ArRAy, rEpRESenTED by 1, -1 or 0.\n  Note: return NuLL foR empTy arr.\n\n  exaMpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "/*\n  YoU Are gIven An array arr oF INtEgers AND You nEed to return\n  sum of Magnitudes of integERs MuLtIplied bY ProdUct oF aLl SIgNs\n  oF Each NuMbEr in ThE ArRAy, rEpRESenTED by 1, -1 or 0.\n  Note: return NuLL foR empTy arr.\n\n  exaMpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  GiVEn a grid wIth N Rows and N COLuMns (N >= 2) aND A PosiTive integeR k, \n  each cell of the grid conTAiNs A vAlue. EveRY intEger in ThE rANgE [1, N * N]\n  INcluSiVe ApPeARs EXacTlY ONce ON The cells oF tHE grid.\n\n  YoU havE tO fiNd THE MInimum PaTh of lEngTH k in tHe grid. yOU CAn sTaRt\n  from aNy cELl, and in eAch StEP yoU can MoVE to AnY of the NEIghboR cells,\n  in otHer wordS, YoU can go To cElLS whiCH Share An edGe wIth you cuRrEnt\n  Cell.\n  PleasE note That a pAth of lEngth k mEanS viSiTinG exAcTLy k cells (NOt\n  NEcEssarilY DisTInct).\n  You CaNNOT Go Off the grid.\n  a path A (oF LeNGtH k) is cONsIdEred leSS THan a pAth B (oF length k) if\n  aftEr makIng thE oRDered lisTs oF tHE vALUEs ON THe CelLS thaT A aNd B go\n  thrOugh (let's calL ThEm lsT_a aND lST_B), Lst_a iS leXiCOgraphIcALLY LEss\n  than lST_B, in oThEr words, tHerE exiSt AN integeR indeX i (1 <= i <= k)\n  SUch That lST_A[i] < Lst_B[i] and FoR aNY j (1 <= j < i) we haVe\n  lst_A[J] = lST_B[J].\n  It IS guArantEEd THaT THE aNsweR iS UniQue.\n  RetuRN an OrdereD list OF tHe values ON thE ceLls tHat the mINiMUM path Go ThrOUgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a grid wIth N Rows and N COLuMns (N >= 2) aND A PosiTive integeR k, \n  each cell of the grid conTAiNs A vAlue. EveRY intEger in ThE rANgE [1, N * N]\n  INcluSiVe ApPeARs EXacTlY ONce ON The cells oF tHE grid.\n\n  YoU havE tO fiNd THE MInimum PaTh of lEngTH k in tHe grid. yOU CAn sTaRt\n  from aNy cELl, and in eAch StEP yoU can MoVE to AnY of the NEIghboR cells,\n  in otHer wordS, YoU can go To cElLS whiCH Share An edGe wIth you cuRrEnt\n  Cell.\n  PleasE note That a pAth of lEngth k mEanS viSiTinG exAcTLy k cells (NOt\n  NEcEssarilY DisTInct).\n  You CaNNOT Go Off the grid.\n  a path A (oF LeNGtH k) is cONsIdEred leSS THan a pAth B (oF length k) if\n  aftEr makIng thE oRDered lisTs oF tHE vALUEs ON THe CelLS thaT A aNd B go\n  thrOugh (let's calL ThEm lsT_a aND lST_B), Lst_a iS leXiCOgraphIcALLY LEss\n  than lST_B, in oThEr words, tHerE exiSt AN integeR indeX i (1 <= i <= k)\n  SUch That lST_A[i] < Lst_B[i] and FoR aNY j (1 <= j < i) we haVe\n  lst_A[J] = lST_B[J].\n  It IS guArantEEd THaT THE aNsweR iS UniQue.\n  RetuRN an OrdereD list OF tHe values ON thE ceLls tHat the mINiMUM path Go ThrOUgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const size = grid.length;\n  const path = [];\n  for (let i = 0; i < size; i++) {\n    const current = [];\n    for (let j = 0; j < size; j++) {\n      if (grid[i][j] === 0) {\n        current.push(j);\n      }\n    }\n    path.push(current);\n  }\n  return path.slice(0, k);\n};\n\nexport default minPath;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "/* ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === b) {\n    return a;\n  }\n  let gcd = a;\n  while (b!== 0) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/130", "prompt": "/*EveRYone KnowS FibonacCI SeQuencE, IT Was sTudied deepLy by mathematicianS in \n  ThE lAsT couple CEntuRies. hoWeVEr, WhaT PeopLe DoN't KnOW iS triBoNACci SEQuence.\n  TriBoNAccI seqUeNce Is DEFINed by tHe RecurRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n iS EVEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n Is Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "/*EveRYone KnowS FibonacCI SeQuencE, IT Was sTudied deepLy by mathematicianS in \n  ThE lAsT couple CEntuRies. hoWeVEr, WhaT PeopLe DoN't KnOW iS triBoNACci SEQuence.\n  TriBoNAccI seqUeNce Is DEFINed by tHe RecurRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n iS EVEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n Is Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1, b = 1, c = 1;\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(a + b + c);\n    a = b;\n    b = c;\n    c = a + b;\n  }\n  return result;\n};\n\nconst test = () => {\n  const result = tri(3);\n  console.log(result);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 2 === 0) return 0\n  return digits(n - 1) + digits(n - 2)\n}\n\nconst digits2 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 2 === 0) return 0\n  return digits2(n - 1) + digits2(n - 2)\n}\n\nconst digits3 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 3 === 0) return 0\n  return digits3(n - 1) + digits3(n - 2)\n}\n\nconst digits4 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 4 === 0) return 0\n  return digits4(n - 1) + digits4(n - 2)\n}\n\nconst digits5 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 5 === 0) return 0\n  return digits5(n - 1) + digits5(n - 2)\n}\n\nconst digits6 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 6 === 0) return 0\n  return digits6(n - 1) + digits6(n - 2)\n}\n\nconst digits7 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 7 === 0) return 0\n  return digits7(n - 1) + digits7(n - 2)\n}\n\nconst digits8 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 8 === 0) return 0\n  return digits8(n - 1) + digits8(n - 2)\n}\n\nconst digits9 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 9 === 0) return 0\n  return digits9(n - 1) + digits9(n - 2)\n}\n\nconst digits10 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 10 === 0) return 0\n  return digits10(n - 1) + digits10(n - 2)\n}\n\nconst digits11 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 11 === 0) return 0\n  return digits11(n - 1) + digits11(n - 2)\n}\n\nconst digits12 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 12 === 0) return 0\n  return digits12(n - 1) + digits12(n - 2)\n}\n\nconst digits13 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 13 === 0) return 0\n  return digits13(n - 1) + digits13(n - 2)\n}\n\nconst digits14 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 14 === 0) return 0\n  return digits14(n - 1) + digits14(n - 2)\n}\n\nconst digits15 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 15 === 0) return 0\n  return digits15(n - 1) + digits15(n - 2)\n}\n\nconst digits16 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 16 === 0) return 0\n  return digits16(n - 1) + digits16(n - 2)\n}\n\nconst digits17 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 17 === 0) return 0\n  return digits17(n - 1) + digits17(n - 2)\n}\n\nconst digits18 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 18 === 0) return 0\n  return digits18(n - 1) + digits18(n - 2)\n}\n\nconst digits19 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 19 === 0) return 0\n  return digits19(n - 1) + digits19(n - 2)\n}\n\nconst digits20 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 20 === 0) return 0\n  return digits20(n - 1) + digits20(n - 2)\n}\n\nconst digits21 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 21 === 0) return 0\n  return digits21(n - 1) + digits21(n - 2)\n}\n\nconst digits22 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 22 === 0) return 0\n  return digits22(n - 1) + digits22(n - 2)\n}\n\nconst digits23 = (n) => {\n  if (n < 0) return 0\n  if (n === 0) return 1\n  if (n % 23 === 0) return 0\n  return digits23(n - 1) + digits23(n - 2)\n}\n\nconst digits24 = (n) => {\n  if (n < 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested = false;\n  let isNested =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given list,\n  rouND eAcH eLement in tHE list to tHe upPeR int(Ceiling) fIRsT.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given list,\n  rouND eAcH eLement in tHE list to tHe upPeR int(Ceiling) fIRsT.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares9 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares10 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares11 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares12 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares13 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares14 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares15 = (lst) => {\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.length > 0 &&\n    /[a-zA-Z]/.test(txt.charAt(txt.length - 1));\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter2 = (txt) => {\n  return txt.length > 0 &&\n    /[a-zA-Z]/.test(txt.charAt(txt.length - 1));\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter3 = (txt) => {\n  return txt.length > 0 &&\n    /[a-zA-Z]/.test(txt.charAt(txt.length - 1));\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter4 = (txt) => {\n  return txt.length > 0 &&\n    /[a-zA-Z]/.test(txt.charAt(txt.length - 1));\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter5 = (txt) => {\n  return txt.length > 0 &&\n    /[a-zA-Z]/.test(txt.charAt(txt.length - 1));\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter6 = (txt) => {\n  return txt.length > 0 &&\n    /[a-zA-Z]/.test(txt.charAt(txt.length - 1));\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter7 = (txt) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*CreATe a fUnctIon which RETuRns thE LARgesT index of an Element which\n  is not GReAtEr Than or eQUal tO the ElEmENt ImmEDiatElY pReCeDInG It. IF\n  nO SUch ELEment exisTs THen return -1. the gIvEn aRrAY WILl not cOnTain\n  dUplICaTe VALUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "/*CreATe a fUnctIon which RETuRns thE LARgesT index of an Element which\n  is not GReAtEr Than or eQUal tO the ElEmENt ImmEDiatElY pReCeDInG It. IF\n  nO SUch ELEment exisTs THen return -1. the gIvEn aRrAY WILl not cOnTain\n  dUplICaTe VALUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let result = 0;\n  let i = 0;\n  while (i < arr.length) {\n    let j = i + 1;\n    while (j < arr.length) {\n      if (arr[i] === arr[j]) {\n        j++;\n      } else {\n        break;\n      }\n    }\n    if (j === arr.length) {\n      result++;\n    }\n    i = j;\n  }\n  return result;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* CrEAte a fUnctIon that rETUrNs a tuple (a, b), wheRE 'a' IS\n  the Largest of nEgative integers, anD 'b' Is ThE sMallest\n  OF posItivE iNtEGeRs in a list.\n  IF TherE iS nO nEgATiVE or PoSITivE INtegers, return thEm AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "/* CrEAte a fUnctIon that rETUrNs a tuple (a, b), wheRE 'a' IS\n  the Largest of nEgative integers, anD 'b' Is ThE sMallest\n  OF posItivE iNtEGeRs in a list.\n  IF TherE iS nO nEgATiVE or PoSITivE INtegers, return thEm AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  if (lst.length === 1) {\n    return [null, lst[0]];\n  }\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE . oR ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ NulL\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ NulL\n  */\nconSt compareOne = (a, b) => {\n  if (a == null || b == null) {\n    return null;\n  }\n  if (a instanceof Number && b instanceof Number) {\n    return a == b;\n  }\n  if (a instanceof String && b instanceof String) {\n    return a == b;\n  }\n  if (a instanceof Array && b instanceof Array) {\n    return a.length == b.length && a.every((aItem, index) => {\n      return compareOne(aItem, b[index]);\n    });\n  }\n  return null;\n};\n\n//\n//  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n//  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n//  RETUrn NULl if the vaLuES arE equAl.\n//  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n//\n//  compareOne(1, 2.5) ➞ 2.5\n//  compareOne(1, \"2,3\") ➞ \"2,3\"\n//  compareOne(\"5,1\", \"6\") ➞ \"6\"\n//  compareOne(\"1\", 1) ➞ NulL\n//\n//  compareOne(1, 1) ➞ NulL\n//\n//  compareOne(1, 1.5) ➞ NulL\n//\n//  compareOne(1, \"1\") ➞ NulL\n//\n//  compareOne(\"1\", 1) ➞ NulL\n//\n//  compareOne(\"1\", 1.5) ➞ NulL\n//\n//  compareOne(\"1\", \"1\") ➞ NulL\n//\n//  compareOne(\"1\", \"1.5\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5,6\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5,6,7\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5,6,7,8\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5,6,7,8,9\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5,6,7,8,9,10\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5,6,7,8,9,10,11\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5,6,7,8,9,10,11,12\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5,6,7,8,9,10,11,12,13\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\") ➞ NulL\n//\n//  compareOne(\"1\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21\") ➞ NulL\n//\n//  compareOne", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isEqualToSumOdd = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd2 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd3 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd4 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd5 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd6 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd7 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd8 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd9 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd10 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd11 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd12 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd13 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd14 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd15 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd16 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd17 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd18 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd19 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd20 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd21 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd22 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd23 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd24 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd25 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd26 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd27 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd28 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd29 = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst isEqualToSumOdd30 = (n) => {\n  if (n %", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/139", "prompt": "/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error('The function should receive an integer as input.');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = ['']\n  let i = 0\n  while (i < string.length) {\n    prefixes.push(string.slice(0, i))\n    i += 1\n  }\n  return prefixes\n}\n\n/*\n  Returns a copy of the string, with all spaces removed\n  */\nconst trim = (string) => {\n  return string.replace(/\\s+/g, '')\n}\n\n/*\n  Returns a string with all consecutive whitespace characters\n  replaced with a single space\n  */\nconst replaceAll = (string) => {\n  return string.replace(/\\s+/g,'')\n}\n\n/*\n  Returns a string with all consecutive whitespace characters\n  replaced with a single space\n  */\nconst replaceAllNonWord = (string) => {\n  return string.replace(/\\s+/g,'')\n}\n\n/*\n  Returns a string with all consecutive whitespace characters\n  replaced with a single space\n  */\nconst replaceAllNonWordNonSpace = (string) => {\n  return string.replace(/\\s+/g,'')\n}\n\n/*\n  Returns a string with all consecutive whitespace characters\n  replaced with a single space\n  */\nconst replaceAllNonWordNonSpaceNonSpace = (string) => {\n  return string.replace(/\\s+/g,'')\n}\n\n/*\n  Returns a string with all consecutive whitespace characters\n  replaced with a single space\n  */\nconst replaceAllNonWordNonSpaceNonSpaceNonSpace = (string) => {\n  return string.replace(/\\s+/g,'')\n}\n\n/*\n  Returns a string with all consecutive whitespace characters\n  replaced with a single space\n  */\nconst replaceAllNonWordNonSpaceNonSpaceNonSpaceNonSpace = (string) => {\n  return string.replace(/\\s+/g,'')\n}\n\n/*\n  Returns a string with all consecutive whitespace characters\n  replaced with a single space\n  */\nconst replaceAllNonWordNonSpaceNonSpaceNonSpaceNonSpaceNonSpace = (string) => {\n  return string.replace(/\\s+/g,'')\n}\n\n/*\n  Returns a string with all consecutive whitespace characters\n  replaced with a single space\n  */\nconst replaceAllNonWordNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpace = (string) => {\n  return string.replace(/\\s+/g,'')\n}\n\n/*\n  Returns a string with all consecutive whitespace characters\n  replaced with a single space\n  */\nconst replaceAllNonWordNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpace = (string) => {\n  return string.replace(/\\s+/g,'')\n}\n\n/*\n  Returns a string with all consecutive whitespace characters\n  replaced with a single space\n  */\nconst replaceAllNonWordNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpace = (string) => {\n  return string.replace(/\\s+/g,'')\n}\n\n/*\n  Returns a string with all consecutive whitespace characters\n  replaced with a single space\n  */\nconst replaceAllNonWordNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpace = (string) => {\n  return string.replace(/\\s+/g,'')\n}\n\n/*\n  Returns a string with all consecutive whitespace characters\n  replaced with a single space\n  */\nconst replaceAllNonWordNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpace = (string) => {\n  return string.replace(/\\s+/g,'')\n}\n\n/*\n  Returns a string with all consecutive whitespace characters\n  replaced with a single space\n  */\nconst replaceAllNonWordNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpace = (string) => {\n  return string.replace(/\\s+/g,'')\n}\n\n/*\n  Returns a string with all consecutive whitespace characters\n  replaced with a single space\n  */\nconst replaceAllNonWordNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpace = (string) => {\n  return string.replace(/\\s+/g,'')\n}\n\n/*\n  Returns a string with all consecutive whitespace characters\n  replaced with a single space\n  */\nconst replaceAllNonWordNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNonSpaceNon", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n}\n\nmodule.exports = {\n  fixSpaces\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*CreATe a fuNctiOn which tAKEs a StrinG REPresEnting a file'S name, and returns\n  'YeS' If ThE tHe file's NAme iS valId, AnD ReTurNS 'No' oThErWiSe.\n  a FiLE's nAmE IS coNSIdered to bE vALid If anD oNly If ALL THe follOwIng coNdiTIoNs \n  ARE MEt:\n  - THeRe shoulD noT Be more ThaN tHRee DigiTs ('0'-'9') in THe fIlE's name.\n  - tHE file'S name conTains exACtLy one dOt '.'\n  - THe SUbstRINg befOre tHe dOt should NoT be Empty, and iT starTs with a Letter From \n  thE laTin AlPhaPet ('a'-'z' AnD 'a'-'Z').\n  - The suBStRInG after tHE doT Should be One of ThEse: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "/*CreATe a fuNctiOn which tAKEs a StrinG REPresEnting a file'S name, and returns\n  'YeS' If ThE tHe file's NAme iS valId, AnD ReTurNS 'No' oThErWiSe.\n  a FiLE's nAmE IS coNSIdered to bE vALid If anD oNly If ALL THe follOwIng coNdiTIoNs \n  ARE MEt:\n  - THeRe shoulD noT Be more ThaN tHRee DigiTs ('0'-'9') in THe fIlE's name.\n  - tHE file'S name conTains exACtLy one dOt '.'\n  - THe SUbstRINg befOre tHe dOt should NoT be Empty, and iT starTs with a Letter From \n  thE laTin AlPhaPet ('a'-'z' AnD 'a'-'Z').\n  - The suBStRInG after tHE doT Should be One of ThEse: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = file_name.toLowerCase()\n  let file_name_check_length = file_name_check.length\n  let file_name_check_letters = file_name_check.match(/[a-z]/g)\n  let file_name_check_letters_length = file_name_check_letters.length\n  let file_name_check_letters_match = file_name_check_letters.match(/[a-z]/g)\n  let file_name_check_letters_match_length = file_name_check_letters_match.length\n  let file_name_check_letters_match_match = file_name_check_letters_match.match(/[a-z]/g)\n  let file_name_check_letters_match_match_length = file_name_check_letters_match_match.length\n  let file_name_check_letters_match_match_match = file_name_check_letters_match_match.match(/[a-z]/g)\n  let file_name_check_letters_match_match_match_length = file_name_check_letters_match_match_match.length\n  let file_name_check_letters_match_match_match_match = file_name_check_letters_match_match_match.match(/[a-z]/g)\n  let file_name_check_letters_match_match_match_match_length = file_name_check_letters_match_match_match_match.length\n  let file_name_check_letters_match_match_match_match_match = file_name_check_letters_match_match_match_match.match(/[a-z]/g)\n  let file_name_check_letters_match_match_match_match_match_length = file_name_check_letters_match_match_match_match_match.length\n  let file_name_check_letters_match_match_match_match_match_match = file_name_check_letters_match_match_match_match_match.match(/[a-z]/g)\n  let file_name_check_letters_match_match_match_match_match_match_length = file_name_check_letters_match_match_match_match_match.length\n  let file_name_check_letters_match_match_match_match_match_match_match = file_name_check_letters_match_match_match_match_match_match.match(/[a-z]/g)\n  let file_name_check_letters_match_match_match_match_match_match_match_length = file_name_check_letters_match_match_match_match_match_match.length\n  let file_name_check_letters_match_match_match_match_match_match_match_match = file_name_check_letters_match_match_match_match_match_match_match.match(/[a-z]/g)\n  let file_name_check_letters_match_match_match_match_match_match_match_match_match = file_name_check_letters_match_match_match_match_match_match_match.match(/[a-z]/g)\n  let file_name_check_letters_match_match_match_match_match_match_match_match_match = file_name_check_letters_match_match_match_match_match_match_match.match(/[a-z]/g)\n  let file_name_check_letters_match_match_match_match_match_match_match_match_match = file_name_check_letters_match_match_match_match_match_match.match(/[a-z]/g)\n  let file_name_check_letters_match_match_match_match_match_match_match_match_match = file_name_check_letters_match_match_match_match_match_match.match(/[a-z]/g)\n  let file_name_check_letters_match_match_match_match_match_match_match_match_match = file_name_check_letters_match_match_match_match_match_match.match(/[a-z]/g)\n  let file_name_check_letters_match_match_match_match_match_match_match_match_match = file_name_check_letters_match_match_match_match_match_match.match(/[a-z]/g)\n  let file_name_check_letters_match_match_match_match_match_match_match_match_match = file_name_check_letters_match_match_match_match_match_match.match(/[a-z]/g)\n  let file_name_check_letters_match_match_match_match_match_match_match_match_match = file_name_check_letters_match_match_match_match_match_match.match(/[a-z]/g)\n  let file_name_check", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThIS funCtioN will takE A list Of IntegERS. for aLl entries in tHe list, the function shalL SqUaRe The inteGEr enTry iF iTs INdEx iS A \n  mulTiPlE oF 3 aND wILl cUbE THe iNTEger entry If ITs iNdex Is A muLtIPLE Of 4 and nOt A multIplE Of 3. thE FUNCtiOn Will not \n  ChaNGe the eNtrIeS in The list WhosE iNDexEs Are not A MUltipLe of 3 or 4. ThE functiON sHall thEn return tHe SUm of ALL entrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*\"\n  ThIS funCtioN will takE A list Of IntegERS. for aLl entries in tHe list, the function shalL SqUaRe The inteGEr enTry iF iTs INdEx iS A \n  mulTiPlE oF 3 aND wILl cUbE THe iNTEger entry If ITs iNdex Is A muLtIPLE Of 4 and nOt A multIplE Of 3. thE FUNCtiOn Will not \n  ChaNGe the eNtrIeS in The list WhosE iNDexEs Are not A MUltipLe of 3 or 4. ThE functiON sHall thEn return tHe SUm of ALL entrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  YoU Are gIven A string rEPReSentiNG A sentence,\n  The sentence cOntains somE words separated by A SpAcE,\n  aNd you haVE to return a StriNg ThAT cOntAIns tHe WoRdS fROm THe oRiGINal sentence,\n  WHOse lengthS aRE prIme nUmBerS,\n  tHE ORDer of tHe Words in The NEw StRING ShoUlD be the sAme AS the orIgiNaL One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "/*\n  YoU Are gIven A string rEPReSentiNG A sentence,\n  The sentence cOntains somE words separated by A SpAcE,\n  aNd you haVE to return a StriNg ThAT cOntAIns tHe WoRdS fROm THe oRiGINal sentence,\n  WHOse lengthS aRE prIme nUmBerS,\n  tHE ORDer of tHe Words in The NEw StRING ShoUlD be the sAme AS the orIgiNaL One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*YouR Task Is to ImplemenT a FUnCtion THAT wilL simplify the expresSion\n  x * n. The function reTUrNs TrUe if x * n evaLUateS to a wHoLe NUmBer ANd faLsE\n  oThErWIsE. botH x aND n, Are STRing repreSeNTatIon oF a fRacTiON, AND have tHe FolloWinG FoRmAT,\n  <NUMerAtOr>/<denomInaTOr> wherE boTh NUmeRatoR aND deNoMinatoR ARe posItive whoLe numbeRS.\n\n  YOu can aSsuMe THat x, aND n Are vaLid fRacTions, and Do Not Have zero aS denoMinatoR.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = fAlse\n  simplify(\"7/10\", \"10/2\") = faLse\n  */\nConSt simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "/*YouR Task Is to ImplemenT a FUnCtion THAT wilL simplify the expresSion\n  x * n. The function reTUrNs TrUe if x * n evaLUateS to a wHoLe NUmBer ANd faLsE\n  oThErWIsE. botH x aND n, Are STRing repreSeNTatIon oF a fRacTiON, AND have tHe FolloWinG FoRmAT,\n  <NUMerAtOr>/<denomInaTOr> wherE boTh NUmeRatoR aND deNoMinatoR ARe posItive whoLe numbeRS.\n\n  YOu can aSsuMe THat x, aND n Are vaLid fRacTions, and Do Not Have zero aS denoMinatoR.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = fAlse\n  simplify(\"7/10\", \"10/2\") = faLse\n  */\nConSt simplify = (x, n) => {\n  if (x == 0) {\n    return false;\n  }\n  if (x == 1) {\n    return true;\n  }\n  if (x == n) {\n    return true;\n  }\n  if (x < 0) {\n    return false;\n  }\n  if (x > 0) {\n    return false;\n  }\n  if (x % n == 0) {\n    return true;\n  }\n  if (x % n == 1) {\n    return false;\n  }\n  if (x % n == 2) {\n    return true;\n  }\n  if (x % n == 3) {\n    return false;\n  }\n  if (x % n == 4) {\n    return true;\n  }\n  if (x % n == 5) {\n    return false;\n  }\n  if (x % n == 6) {\n    return true;\n  }\n  if (x % n == 7) {\n    return false;\n  }\n  if (x % n == 8) {\n    return true;\n  }\n  if (x % n == 9) {\n    return false;\n  }\n  if (x % n == 10) {\n    return true;\n  }\n  if (x % n == 11) {\n    return false;\n  }\n  if (x % n == 12) {\n    return true;\n  }\n  if (x % n == 13) {\n    return false;\n  }\n  if (x % n == 14) {\n    return true;\n  }\n  if (x % n == 15) {\n    return false;\n  }\n  if (x % n == 16) {\n    return true;\n  }\n  if (x % n == 17) {\n    return false;\n  }\n  if (x % n == 18) {\n    return true;\n  }\n  if (x % n == 19) {\n    return false;\n  }\n  if (x % n == 20) {\n    return true;\n  }\n  if (x % n == 21) {\n    return false;\n  }\n  if (x % n == 22) {\n    return true;\n  }\n  if (x % n == 23) {\n    return false;\n  }\n  if (x % n == 24) {\n    return true;\n  }\n  if (x % n == 25) {\n    return false;\n  }\n  if (x % n == 26) {\n    return true;\n  }\n  if (x % n == 27) {\n    return false;\n  }\n  if (x % n == 28) {\n    return true;\n  }\n  if (x % n == 29) {\n    return false;\n  }\n  if (x % n == 30) {\n    return true;\n  }\n  if (x % n == 31) {\n    return false;\n  }\n  if (x % n == 32) {\n    return true;\n  }\n  if (x % n == 33) {\n    return false;\n  }\n  if (x % n == 34) {\n    return true;\n  }\n  if (x % n == 35) {\n    return false;\n  }\n  if (x % n == 36) {\n    return true;\n  }\n  if (x % n == 37) {\n    return false;\n  }\n  if (x % n == 38) {\n    return true;\n  }\n  if (x % n == 39) {\n    return false;\n  }\n  if (x % n == 40) {\n    return true;\n  }\n  if (x % n == 41) {\n    return false;\n  }\n  if (x % n == 42) {\n    return true;\n  }\n  if (x % n == 43) {\n    return false;\n  }\n  if (x % n == 44) {\n    return true;\n  }\n  if (x % n == 45) {\n    return false;\n  }\n  if (x % n == 46) {\n    return true;\n  }\n  if (x % n == 47) {\n    return false;\n  }\n  if (x % n == 48) {\n    return true;\n  }\n  if (x % n == 49) {\n    return false;\n  }\n  if (x % n == 50) {\n    return true;\n  }\n  if (x % n == 51) {\n    return false;\n  }\n  if (x % n == 52) {\n    return true;\n  }\n  if (x % n == 53) {\n    return false;\n  }\n  if (x % n == 54) {\n    return true;\n  }\n  if (x % n == 55) {\n    return false;\n  }\n  if (x % n == 56) {\n    return true;\n  }\n  if (x % n == 57) {\n    return false;\n  }\n  if (x % n == 58) {\n    return true;\n  }\n  if (x % n == 59) {\n    return false;\n  }\n  if (x % n == 60) {\n    return true;\n  }\n  if (x % n == 61) {\n    return false;\n  }\n  if (x % n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted;\n};\n\nexport default orderByPoints;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*WriTE a fuNctiOn that taKES aN arraY OF NumbErs as input And returns \n  the numbER oF eLeMents in thE ArraY thaT aRe GReAteR Than 10 AnD bOtH \n  fIRsT And LaST DigITS of a numbeR aRE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "/*WriTE a fuNctiOn that taKES aN arraY OF NumbErs as input And returns \n  the numbER oF eLeMents in thE ArraY thaT aRe GReAteR Than 10 AnD bOtH \n  fIRsT And LaST DigITS of a numbeR aRE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  let temp = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  YoU Are gIven A positivE INtEger n. YOU HAve tO create an iNteger array a of lenGTh n.\n      foR eAch i (1 ≤ i ≤ n), the vALue oF a[i] = i * i - i + 1.\n      REtUrN ThE nuMBer oF tRiPlEs (A[I], a[J], A[k]) oF a WHEre i < j < k, \n  AND a[i] + a[j] + a[k] is A mULtiPle oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "/*\n  YoU Are gIven A positivE INtEger n. YOU HAve tO create an iNteger array a of lenGTh n.\n      foR eAch i (1 ≤ i ≤ n), the vALue oF a[i] = i * i - i + 1.\n      REtUrN ThE nuMBer oF tRiPlEs (A[I], a[J], A[k]) oF a WHEre i < j < k, \n  AND a[i] + a[j] + a[k] is A mULtiPle oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          max = Math.max(max, i + j + k);\n        }\n      }\n    }\n  }\n  return max;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* ThERe arE eigHt planetS in OUr Solar SYSTem: tHe closerst To the Sun\n  is Mercury, THe NeXt One is VeNUs, thEn EaRtH, MARs, jupITer, SAtUrN,\n  URaNUs, nEptUnE.\n  wRitE A Function tHaT TakEs twO pLanEt NAMES as strInGs planet1 and planet2.\n  the FUnCtION SHouLd return A tuple contaiNinG All plaNetS wHOse OrbiTs ARe\n  lOcAted beTWEen thE orbit of planet1 And the oRBiT of planet2, sorTed By\n  THe prOXImity To thE suN.\n  The funcTiOn sHould return an emPty tuple if planet1 Or planet2\n  are nOt corrEct plaNet NamEs.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "/* ThERe arE eigHt planetS in OUr Solar SYSTem: tHe closerst To the Sun\n  is Mercury, THe NeXt One is VeNUs, thEn EaRtH, MARs, jupITer, SAtUrN,\n  URaNUs, nEptUnE.\n  wRitE A Function tHaT TakEs twO pLanEt NAMES as strInGs planet1 and planet2.\n  the FUnCtION SHouLd return A tuple contaiNinG All plaNetS wHOse OrbiTs ARe\n  lOcAted beTWEen thE orbit of planet1 And the oRBiT of planet2, sorTed By\n  THe prOXImity To thE suN.\n  The funcTiOn sHould return an emPty tuple if planet1 Or planet2\n  are nOt corrEct plaNet NamEs.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Name = planet1.split(\" \")[0]\n  const planet2Name = planet2.split(\" \")[0]\n  const planet1Orbit = getOrbit(planet1Name)\n  const planet2Orbit = getOrbit(planet2Name)\n  const planet1OrbitName = planet1Orbit.split(\" \")[0]\n  const planet2OrbitName = planet2Orbit.split(\" \")[0]\n  const planet1OrbitNameLower = planet1OrbitName.toLowerCase()\n  const planet2OrbitNameLower = planet2OrbitName.toLowerCase()\n  const planet1OrbitNameUpper = planet1OrbitName.toUpperCase()\n  const planet2OrbitNameUpper = planet2OrbitName.toUpperCase()\n  const planet1OrbitNameLowerUpper = planet1OrbitNameLower.toUpperCase()\n  const planet2OrbitNameLowerUpper = planet2OrbitNameLower.toUpperCase()\n  const planet1OrbitNameUpperLower = planet1OrbitNameUpper.toLowerCase()\n  const planet2OrbitNameUpperLower = planet2OrbitNameUpper.toLowerCase()\n  const planet1OrbitNameUpperLowerUpper = planet1OrbitNameUpperLower.toUpperCase()\n  const planet2OrbitNameUpperLowerUpper = planet2OrbitNameUpperLower.toUpperCase()\n  const planet1OrbitNameUpperLowerUpper = planet1OrbitNameUpperLowerUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet2OrbitNameLowerUpperUpper = planet2OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper = planet1OrbitNameLowerUpperUpper.toUpperCase()\n  const planet1OrbitNameLowerUpperUpper =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs aS a parameteR,\n  deletes the stringS ThAt HaVe odd leNGths From It,\n  AnD ReTurNS the ReSuLtEd list WItH A soRtED OrdER,\n  the list is alwaYs A list Of sTrinGs And NeVER AN array Of NumbeRs,\n  aND iT mAY CONtaIn DuplicaTes.\n  tHe ordeR of ThE list ShoUld bE aSCenDiNg by leNGTh of eAch word, aNd you\n  shOUlD return the list soRteD bY That RULe.\n  If tWo woRds Have the sAmE leNgth, sort tHe list alpHabetiCally.\n  THe funcTioN shOuLd return a list Of sTrINgs in sortED oRDeR.\n  You may ASsuME that all Words WiLl have The same LEnGTh.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs aS a parameteR,\n  deletes the stringS ThAt HaVe odd leNGths From It,\n  AnD ReTurNS the ReSuLtEd list WItH A soRtED OrdER,\n  the list is alwaYs A list Of sTrinGs And NeVER AN array Of NumbeRs,\n  aND iT mAY CONtaIn DuplicaTes.\n  tHe ordeR of ThE list ShoUld bE aSCenDiNg by leNGTh of eAch word, aNd you\n  shOUlD return the list soRteD bY That RULe.\n  If tWo woRds Have the sAmE leNgth, sort tHe list alpHabetiCally.\n  THe funcTioN shOuLd return a list Of sTrINgs in sortED oRDeR.\n  You may ASsuME that all Words WiLl have The same LEnGTh.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum2 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum3 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum4 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum5 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum6 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum7 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum8 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum9 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum10 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum11 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum12 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum13 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum14 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum15 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum16 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum17 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum18 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sorted.map((curr) => curr + sum);\n};\n\nconst sortedListSum19 = (lst) => {\n  const sorted = lst.sort();\n  const sum = lst.reduce((acc, curr) => acc + curr, 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/*\n  ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/*\n  ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/*\n  ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/*\n  ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/*\n  ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/*\n  ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/*\n  ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/*\n  ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/*\n  ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/*\n  ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/*\n  ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  }\n  return null;\n};\n\nmodule.exports = xOrY;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* GiVEn a list oF numBers, return the sUM Of SquarES OF the Numbers\n  in the list That are odd. Ignore nUMbErS tHat are nEGatiVe or NoT iNTeGerS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  if thE iNpUt list Is EMpTY, return 0.\n  */\ncoNsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "/* GiVEn a list oF numBers, return the sUM Of SquarES OF the Numbers\n  in the list That are odd. Ignore nUMbErS tHat are nEGatiVe or NoT iNTeGerS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  if thE iNpUt list Is EMpTY, return 0.\n  */\ncoNsT doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) sum += lst[i]\n  }\n  return sum\n}\n\nmodule.exports = {\n  doubleTheDifference\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I thINk we All rEmember tHAT fEelinG WHEn thE result of sOme long-awaited\n  eveNT iS fInAlly knoWN. The FeelInGs ANd ThoUGhts YoU hAvE aT ThAT moMeNT Are\n  DEFinitely wOrTH noTing DoWn aNd COMPAring.\n  YOuR task Is tO DeTeRMINE if A pErson coRreCTly gueSseD tHE reSultS oF A nuMbEr of maTCHes.\n  YoU are giveN two arrAYs Of scorEs aNd GUessES Of equAl leNgtH, where eaCh IndEx shows a mAtch. \n  REturn aN array Of the sAme LenGtH deNotInG How far oFF eACh guess Was. If thEY haVE guessed CorreCtLy,\n  the vAlue is 0, aND iF NoT, the VAlUe Is the aBSOLute dIfferEnce between tHe guess and The scOrE.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "/*I thINk we All rEmember tHAT fEelinG WHEn thE result of sOme long-awaited\n  eveNT iS fInAlly knoWN. The FeelInGs ANd ThoUGhts YoU hAvE aT ThAT moMeNT Are\n  DEFinitely wOrTH noTing DoWn aNd COMPAring.\n  YOuR task Is tO DeTeRMINE if A pErson coRreCTly gueSseD tHE reSultS oF A nuMbEr of maTCHes.\n  YoU are giveN two arrAYs Of scorEs aNd GUessES Of equAl leNgtH, where eaCh IndEx shows a mAtch. \n  REturn aN array Of the sAme LenGtH deNotInG How far oFF eACh guess Was. If thEY haVE guessed CorreCtLy,\n  the vAlue is 0, aND iF NoT, the VAlUe Is the aBSOLute dIfferEnce between tHe guess and The scOrE.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  // console.log(game);\n  // console.log(guess);\n  let result = 0;\n  let guess_len = guess.length;\n  let game_len = game.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You WIll bE givEn the namE OF a Class (A STRing) And a list of extensions.\n  The extensions aRe to be used to load aDDiTiOnAl classES to tHe clAsS. THE\n  sTreNGth oF tHe ExTeNSiON is As FOLloWS: let CAP be tHe NUmbEr of ThE upPeRCASE\n  letteRs in The exTenSIoN's NAME, And LeT SM be thE nuMBer of lOweRcASe lEtteRs\n  in THe eXtEnsion'S NAme, thE strengtH is giveN By The fraCtiOn caP - SM.\n  yOU shouLd fiNd tHe strongEsT exTension anD return a strIng in thiS\n  formaT: ClassnamE.StRoNgeStEXtENsionNaME.\n  IF ThEre are tWO or MOre extensions with tHe samE sTrengtH, you shoULd\n  CHoOse tHE oNe That coMES First in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "/*You WIll bE givEn the namE OF a Class (A STRing) And a list of extensions.\n  The extensions aRe to be used to load aDDiTiOnAl classES to tHe clAsS. THE\n  sTreNGth oF tHe ExTeNSiON is As FOLloWS: let CAP be tHe NUmbEr of ThE upPeRCASE\n  letteRs in The exTenSIoN's NAME, And LeT SM be thE nuMBer of lOweRcASe lEtteRs\n  in THe eXtEnsion'S NAme, thE strengtH is giveN By The fraCtiOn caP - SM.\n  yOU shouLd fiNd tHe strongEsT exTension anD return a strIng in thiS\n  formaT: ClassnamE.StRoNgeStEXtENsionNaME.\n  IF ThEre are tWO or MOre extensions with tHe samE sTrengtH, you shoULd\n  CHoOse tHE oNe That coMES First in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let class_name_parts = class_name.split('.');\n  let class_name_parts_length = class_name_parts.length;\n  let class_name_parts_last = class_name_parts.slice(-1);\n  let class_name_parts_last_length = class_name_parts_last.length;\n  let class_name_parts_last_last = class_name_parts_last.slice(-1);\n  let class_name_parts_last_last_length = class_name_parts_last_last.length;\n  let class_name_parts_last_last_last = class_name_parts_last_last.slice(-1);\n  let class_name_parts_last_last_last_length = class_name_parts_last_last_last.length;\n  let class_name_parts_last_last_last_last = class_name_parts_last_last_last.slice(-1);\n  let class_name_parts_last_last_last_last_length = class_name_parts_last_last_last_last.length;\n  let class_name_parts_last_last_last_last_last = class_name_parts_last_last_last_last.slice(-1);\n  let class_name_parts_last_last_last_last_last_length = class_name_parts_last_last_last_last_last.length;\n  let class_name_parts_last_last_last_last_last_last = class_name_parts_last_last_last_last_last.slice(-1);\n  let class_name_parts_last_last_last_last_last_last_length = class_name_parts_last_last_last_last_last.length;\n  let class_name_parts_last_last_last_last_last_last_last = class_name_parts_last_last_last_last_last.slice(-1);\n  let class_name_parts_last_last_last_last_last_last_last_length = class_name_parts_last_last_last_last_last.length;\n  let class_name_parts_last_last_last_last_last_last_last_last = class_name_parts_last_last_last_last_last.slice(-1);\n  let class_name_parts_last_last_last_last_last_last_last_last_length = class_name_parts_last_last_last_last_last.length;\n  let class_name_parts_last_last_last_last_last_last_last_last_last = class_name_parts_last_last_last_last_last.slice(-1);\n  let class_name_parts_last_last_last_last_last_last_last_last_last_length = class_name_parts_last_last_last_last_last.length;\n  let class_name_parts_last_last_last_last_last_last_last_last_last_last = class_name_parts_last_last_last_last_last.slice(-1);\n  let class_name_parts_last_last_last_last_last_last_last_last_last_last_length = class_name_parts_last_last_last_last_last.length;\n  let class_name_parts_last_last_last_last_last_last_last_last_last_last_last = class_name_parts_last_last_last_last_last.slice(-1);\n  let class_name_parts_last_last_last_last_last_last_last_last_last_last_last_length = class_name_parts_last_last_last_last_last.length;\n  let class_name_parts_last_last_last_last_last_last_last_last_last_last_last_last = class_name_parts_last_last_last_last_last.slice(-1);\n  let class_name_parts_last_last_last_last_last_last_last_last_last_last_last_last_length = class_name_parts_last_last_last_last_last.length;\n  let class_name_parts_last_last_last_last_last_last_last_last_last_last_last_last_last = class_name_parts_last_last_last_last_last.slice(-1);\n  let class_name_parts_last_last_last_last_last_last_last_last_last_last_last_last_last_length = class_name_parts_last_last_last_last_last.length;\n  let class_name_parts_last_last_last_last_last_last_last_last_last", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You ARe giVen 2 wOrds. You nEED tO return true IF THe seCond word or Any of its rotations IS a sUbStRing in the FIrst Word\n  cycpatternCheck(\"abcd\",\"abd\") => FaLsE\n  cycpatternCheck(\"hello\",\"ell\") => TrUe\n  cycpatternCheck(\"whassup\",\"psus\") => fALse\n  cycpatternCheck(\"abab\",\"baa\") => tRuE\n  cycpatternCheck(\"efef\",\"eeff\") => fAlSe\n  cycpatternCheck(\"himenss\",\"simen\") => TRuE\n  */\nConSt cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "/*You ARe giVen 2 wOrds. You nEED tO return true IF THe seCond word or Any of its rotations IS a sUbStRing in the FIrst Word\n  cycpatternCheck(\"abcd\",\"abd\") => FaLsE\n  cycpatternCheck(\"hello\",\"ell\") => TrUe\n  cycpatternCheck(\"whassup\",\"psus\") => fALse\n  cycpatternCheck(\"abab\",\"baa\") => tRuE\n  cycpatternCheck(\"efef\",\"eeff\") => fAlSe\n  cycpatternCheck(\"himenss\",\"simen\") => TRuE\n  */\nConSt cycpatternCheck = (a, b) => {\n  if (a.length!= b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i]!= b[i]) return false;\n  }\n  return true;\n};\n\n// https://leetcode.com/problems/word-pattern/\n// Given a pattern and a string str, find if str follows the same pattern.\n//\n// Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.\n//\n// Examples:\n//\n// pattern = \"abba\", str = \"dog cat cat dog\" should return true.\n// pattern = \"abba\", str = \"dog cat cat fish\" should return false.\n// pattern = \"aaaa\", str = \"dog cat cat dog\" should return false.\n// pattern = \"abba\", str = \"dog dog dog dog\" should return false.\n//\n// Note:\n// You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.\n//\n// Follow up:\n// Could you do it without any extra space (i.e. The answer could be true or false, but not a third word).\n//\n// UPDATE (2017/1/20):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/2/1):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/2/2):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/2/3):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/2/4):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/2/5):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/2/6):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/2/7):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/2/8):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/2/9):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/2/10):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/2/11):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/2/12):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/2/13):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/2/14):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/2/15):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/2/16):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/2/17):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/2/18):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/2/19):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/2/20):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/2/21):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/2/22):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/2/23):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/2/24):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/2/25):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/2/26):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/2/27):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/2/28):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/2/29):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/2/30):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/3/1):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/3/2):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/3/3):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/3/4):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/3/5):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/3/6):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/3/7):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/3/8):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/3/9):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/3/10):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/3/11):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/3/12):\n// The pattern string has been changed to lowercase.\n//\n// UPDATE (2017/3/13):\n// The pattern string has been changed to uppercase.\n//\n// UPDATE (2017/3/14):\n// The pattern string", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const [num, i] = number;\n  let result = '';\n  while (num > 0) {\n    const [numDigit, numDigitI] = num % 10;\n    result = `${result}${numDigitI}`;\n    num = Math.floor(num / 10);\n  }\n  return result.toUpperCase();\n};\n\nexport default intToMiniRoman;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN true if the three\n  siDEs FoRm a Right-anGLed tRianGlE, fALsE otHErwiSe.\n  a rIgHt-ANgLEd tRiANGle IS a Triangle in wHiCH onE angLe Is rIgHT ANGle or\n  90 dEgRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "/*\n GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN true if the three\n  siDEs FoRm a Right-anGLed tRianGlE, fALsE otHErwiSe.\n  a rIgHt-ANgLEd tRiANGle IS a Triangle in wHiCH onE angLe Is rIgHT ANGle or\n  90 dEgRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === a || b === c && a === b;\n};\n\n/*\n  A triAngle is a triangle with three sides.\n  Example:\n  triangle(3, 4, 5) == true\n  triangle(1, 2, 3) == false\n  */\nconst triangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === a || b === c && a === b;\n};\n\n/*\n  A rightAngleTriangle is a triangle with three sides.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === a || b === c && a === b;\n};\n\n/*\n  A rightAngleTriangle is a triangle with three sides.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === a || b === c && a === b;\n};\n\n/*\n  A rightAngleTriangle is a triangle with three sides.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === a || b === c && a === b;\n};\n\n/*\n  A rightAngleTriangle is a triangle with three sides.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === a || b === c && a === b;\n};\n\n/*\n  A rightAngleTriangle is a triangle with three sides.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === a || b === c && a === b;\n};\n\n/*\n  A rightAngleTriangle is a triangle with three sides.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === a || b === c && a === b;\n};\n\n/*\n  A rightAngleTriangle is a triangle with three sides.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === a || b === c && a === b;\n};\n\n/*\n  A rightAngleTriangle is a triangle with three sides.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === a || b === c && a === b;\n};\n\n/*\n  A rightAngleTriangle is a triangle with three sides.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === a || b === c && a === b;\n};\n\n/*\n  A rightAngleTriangle is a triangle with three sides.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === a || b === c && a === b;\n};\n\n/*\n  A rightAngleTriangle is a triangle with three sides.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === a || b === c && a === b;\n};\n\n/*\n  A rightAngleTriangle is a triangle with three sides.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === a || b === c && a === b;\n};\n\n/*\n  A rightAngleTriangle is a triangle with three", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax2 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxLength = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > maxLength) {\n      max = words[i];\n      maxIndex = i;\n      maxLength = words[i].length;\n    }\n  }\n  return max;\n};\n\n/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax3 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxLength = 0;\n  let maxIndex2 = 0;\n  let maxLength2 = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > maxLength) {\n      max = words[i];\n      maxIndex = i;\n      maxLength = words[i].length;\n    }\n    if (words[i].length > maxLength2) {\n      maxIndex2 = i;\n      maxLength2 = words[i].length;\n    }\n  }\n  return max;\n};\n\n/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax4 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxLength = 0;\n  let maxIndex2 = 0;\n  let maxLength2 = 0;\n  let maxIndex3 = 0;\n  let maxLength3 = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > maxLength) {\n      max = words[i];\n      maxIndex = i;\n      maxLength = words[i].length;\n    }\n    if (words[i].length > maxLength2) {\n      maxIndex2 = i;\n      maxLength2 = words[i].length;\n    }\n    if (words[i].length > maxLength3) {\n      maxIndex3 = i;\n      maxLength3 = words[i].length;\n    }\n  }\n  return max;\n};\n\n/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\ncon", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  YoU'Re a hUngrY rabbit, aND YoU alreADY Have Eaten a certAin number of carrots,\n  but noW YoU need tO eat mOre carrOTs to CompLeTe THe Day'S MealS.\n  yOu ShOuLD return aN ArrAy OF [ TotAL number Of eaten caRrOTs aFter YoUr mEaLS,\n                                  THE number of carRoTs lefT afTEr YoUR MEAls ]\n  If There arE noT Enough remaining CarRoTS, yoU wilL eat aLL remaining caRrOts, but WILl stiLl be hungRy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "/*\n  YoU'Re a hUngrY rabbit, aND YoU alreADY Have Eaten a certAin number of carrots,\n  but noW YoU need tO eat mOre carrOTs to CompLeTe THe Day'S MealS.\n  yOu ShOuLD return aN ArrAy OF [ TotAL number Of eaten caRrOTs aFter YoUr mEaLS,\n                                  THE number of carRoTs lefT afTEr YoUR MEAls ]\n  If There arE noT Enough remaining CarRoTS, yoU wilL eat aLL remaining caRrOts, but WILl stiLl be hungRy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    return [];\n  }\n  if (number < need) {\n    return [];\n  }\n  let result = [];\n  let i = 0;\n  while (i < need) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nexport { eat };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  GiVEn twO lisTs operator, and operand. The FIRsT list has bASIC algEbra operatIons, and \n  the second list iS A list oF iNtEgers. UsE The tWo giVeN lIStS to BUild ThE aLgEbRIc \n  EXprEsSIOn aND return The evaluaTiON of This ExPreSsION.\n\n  tHe basiC aLgebrA opERaTiONS:\n  aDdiTiOn ( + ) \n  SubtrActIOn ( - ) \n  MultIplIcATioN ( * ) \n  FloOr DIviSiOn ( // ) \n  ExpoNENtiatIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn twO lisTs operator, and operand. The FIRsT list has bASIC algEbra operatIons, and \n  the second list iS A list oF iNtEgers. UsE The tWo giVeN lIStS to BUild ThE aLgEbRIc \n  EXprEsSIOn aND return The evaluaTiON of This ExPreSsION.\n\n  tHe basiC aLgebrA opERaTiONS:\n  aDdiTiOn ( + ) \n  SubtrActIOn ( - ) \n  MultIplIcATioN ( * ) \n  FloOr DIviSiOn ( // ) \n  ExpoNENtiatIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You ARe giVen a String s.\n  if s[i] IS A lEtter, REVErse Its case froM lower to upper or viSE vErSa, \n  OtherwiSE keeP it aS iT iS.\n  if The STrinG cOnTaInS No LEttErS, REveRSE the strinG.\n  THE fuNctiOn ShoUlD return THE ResultEd StrinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*You ARe giVen a String s.\n  if s[i] IS A lEtter, REVErse Its case froM lower to upper or viSE vErSa, \n  OtherwiSE keeP it aS iT iS.\n  if The STrinG cOnTaInS No LEttErS, REveRSE the strinG.\n  THE fuNctiOn ShoUlD return THE ResultEd StrinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      result += String.fromCharCode(s[i] + 32);\n    } else if (s[i] >= 97 && s[i] <= 122) {\n      result += String.fromCharCode(s[i] - 32);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconst solve2 = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      result += String.fromCharCode(s[i] + 32);\n    } else if (s[i] >= 97 && s[i] <= 122) {\n      result += String.fromCharCode(s[i] - 32);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconst solve3 = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      result += String.fromCharCode(s[i] + 32);\n    } else if (s[i] >= 97 && s[i] <= 122) {\n      result += String.fromCharCode(s[i] - 32);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconst solve4 = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      result += String.fromCharCode(s[i] + 32);\n    } else if (s[i] >= 97 && s[i] <= 122) {\n      result += String.fromCharCode(s[i] - 32);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconst solve5 = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      result += String.fromCharCode(s[i] + 32);\n    } else if (s[i] >= 97 && s[i] <= 122) {\n      result += String.fromCharCode(s[i] - 32);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconst solve6 = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      result += String.fromCharCode(s[i] + 32);\n    } else if (s[i] >= 97 && s[i] <= 122) {\n      result += String.fromCharCode(s[i] - 32);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconst solve7 = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      result += String.fromCharCode(s[i] + 32);\n    } else if (s[i] >= 97 && s[i] <= 122) {\n      result += String.fromCharCode(s[i] - 32);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconst solve8 = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      result += String.fromCharCode(s[i] + 32);\n    } else if (s[i] >= 97 && s[i] <= 122) {\n      result += String.fromCharCode(s[i] - 32);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconst solve9 = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      result += String.fromCharCode(s[i] + 32);\n    } else if (s[i] >= 97 && s[i] <= 122) {\n      result += String.fromCharCode(s[i] - 32);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconst solve10 = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      result += String.fromCharCode(s[i] + 32);\n    } else if (s[i] >= 97 && s[i] <= 122) {\n      result += String.fromCharCode(s[i] - 32);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconst solve11 = (s) => {\n  let result = \"\";\n  for (let i = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in ascending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in ascending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a < b) {\n    return generateIntegers(b, a)\n  }\n  let result = []\n  for (let i = a; i <= b; i++) {\n    result.push(i)\n  }\n  return result\n}\n\nmodule.exports = generateIntegers\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* InPUt to This Function IS A sTring REPReseNting musicAl notes in a special ASciI FoRmAt.\n  Your tASk is To paRsE tHIs StrINg anD return list oF iNtEgERs COrrEsPONdiNG To how many BeATs dOes eAcH\n  noT lAST.\n\n  hEre is a LeGend:\n  'o' - WhoLE nOtE, LASTs fOuR beats\n  'o|' - HalF Note, laSts TwO BeaTs\n  '.|' - quAtER noTe, Lasts oNE Beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "/* InPUt to This Function IS A sTring REPReseNting musicAl notes in a special ASciI FoRmAt.\n  Your tASk is To paRsE tHIs StrINg anD return list oF iNtEgERs COrrEsPONdiNG To how many BeATs dOes eAcH\n  noT lAST.\n\n  hEre is a LeGend:\n  'o' - WhoLE nOtE, LASTs fOuR beats\n  'o|' - HalF Note, laSts TwO BeaTs\n  '.|' - quAtER noTe, Lasts oNE Beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = []\n  let music_string_array = music_string.split(' ')\n  for (let i = 0; i < music_string_array.length; i++) {\n    let music_string_array_item = music_string_array[i].split('|')\n    let music_string_array_item_length = music_string_array_item.length\n    let music_string_array_item_index = 0\n    let music_string_array_item_value = 0\n    while (music_string_array_item_index < music_string_array_item_length) {\n      if (music_string_array_item_index === 0) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 1) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 2) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 3) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 4) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 5) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 6) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 7) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 8) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 9) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 10) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 11) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 12) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 13) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 14) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 15) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 16) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      } else if (music_string_array_item_index === 17) {\n        music_string_array_item_value = parseInt(music_string_array_item[music_string_array_item_index])\n        music_string_array_item_index += 1\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* FiND how Many times A given substring caN BE fOund in tHE ORigiNal string. Count ovErlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "/* FiND how Many times A given substring caN BE fOund in tHE ORigiNal string. Count ovErlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/19", "prompt": "/* InPUt is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX', 'seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "/* InPUt is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersArr = numbers.split(/\\s+/);\n  numbersArr.sort((a, b) => {\n    let aNum = parseInt(a.replace(/\\D+/g, ''), 10);\n    let bNum = parseInt(b.replace(/\\D+/g, ''), 10);\n    if (aNum < bNum) {\n      return -1;\n    }\n    if (aNum > bNum) {\n      return 1;\n    }\n    return 0;\n  });\n  return numbersArr.join('');\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* GiVEn a pOsitIve floatING pOint number, iT CAN be dEcomposed iNto\n  and integer part (LArGeSt Integer SMallEr thAn GiVEn number) And DEcimAlS\n  (lEfToVEr PArt AlWAYs sMALler than 1).\n\n  REtURn tHe deCiMal PaRT OF The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "/* GiVEn a pOsitIve floatING pOint number, iT CAN be dEcomposed iNto\n  and integer part (LArGeSt Integer SMallEr thAn GiVEn number) And DEcimAlS\n  (lEfToVEr PArt AlWAYs sMALler than 1).\n\n  REtURn tHe deCiMal PaRT OF The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (number < 0) {\n    return 0;\n  }\n  if (number > 1) {\n    return number;\n  }\n  return 0.5;\n};\n\nexport default truncateNumber;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* FrOM a supPlieD list of numbers (of lenGTH aT leasT TWO) selEct and return two tHat are the closest tO EaCh\n  OtHer and return tHEm in orDer (sMaLlER nUmbER, larGeR nUmBeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "/* FrOM a supPlieD list of numbers (of lenGTH aT leasT TWO) selEct and return two tHat are the closest tO EaCh\n  OtHer and return tHEm in orDer (sMaLlER nUmbER, larGeR nUmBeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const len = numbers.length;\n  if (len < 2) {\n    return numbers;\n  }\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const minIndex = 0;\n  const maxIndex = 0;\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] < min) {\n      minIndex = i;\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      maxIndex = i;\n      max = numbers[i];\n    }\n  }\n  return [min, max];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* GiVEn list of numbers (Of at Least two ELEmEnts), aPPLY a liNear transfOrm to that list,\n  such that THe SmAlLest numBEr wiLl beCoMe 0 ANd The LArgeSt WiLl BeCOmE 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "/* GiVEn list of numbers (Of at Least two ELEmEnts), aPPLY a liNear transfOrm to that list,\n  such that THe SmAlLest numBEr wiLl beCoMe 0 ANd The LArgeSt WiLl BeCOmE 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let sum = 0;\n  let i = 0;\n  while (i < numbers.length) {\n    sum += numbers[i];\n    i++;\n  }\n  let scale = 1 / sum;\n  let newNumbers = [];\n  i = 0;\n  while (i < numbers.length) {\n    newNumbers.push(numbers[i] * scale);\n    i++;\n  }\n  return newNumbers;\n};\n\n/**\n  * GiVEn list of numbers (Of at Least two ELEmEnts), aPPLY a liNear transfOrm to that list,\n  such that THe SmAlLest numBEr wiLl beCoMe 0 ANd The LArgeSt WiLl BeCOmE 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  let sum = 0;\n  let i = 0;\n  while (i < numbers.length) {\n    sum += numbers[i];\n    i++;\n  }\n  let scale = 1 / sum;\n  let newNumbers = [];\n  i = 0;\n  while (i < numbers.length) {\n    newNumbers.push(numbers[i] * scale);\n    i++;\n  }\n  return newNumbers;\n};\n\n/**\n  * GiVEn list of numbers (Of at Least two ELEmEnts), aPPLY a liNear transfOrm to that list,\n  such that THe SmAlLest numBEr wiLl beCoMe 0 ANd The LArgeSt WiLl BeCOmE 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  let sum = 0;\n  let i = 0;\n  while (i < numbers.length) {\n    sum += numbers[i];\n    i++;\n  }\n  let scale = 1 / sum;\n  let newNumbers = [];\n  i = 0;\n  while (i < numbers.length) {\n    newNumbers.push(numbers[i] * scale);\n    i++;\n  }\n  return newNumbers;\n};\n\n/**\n  * GiVEn list of numbers (Of at Least two ELEmEnts), aPPLY a liNear transfOrm to that list,\n  such that THe SmAlLest numBEr wiLl beCoMe 0 ANd The LArgeSt WiLl BeCOmE 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  let sum = 0;\n  let i = 0;\n  while (i < numbers.length) {\n    sum += numbers[i];\n    i++;\n  }\n  let scale = 1 / sum;\n  let newNumbers = [];\n  i = 0;\n  while (i < numbers.length) {\n    newNumbers.push(numbers[i] * scale);\n    i++;\n  }\n  return newNumbers;\n};\n\n/**\n  * GiVEn list of numbers (Of at Least two ELEmEnts), aPPLY a liNear transfOrm to that list,\n  such that THe SmAlLest numBEr wiLl beCoMe 0 ANd The LArgeSt WiLl BeCOmE 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  let sum = 0;\n  let i = 0;\n  while (i < numbers.length) {\n    sum += numbers[i];\n    i++;\n  }\n  let scale = 1 / sum;\n  let newNumbers = [];\n  i = 0;\n  while (i < numbers.length) {\n    newNumbers.push(numbers[i] * scale);\n    i++;\n  }\n  return newNumbers;\n};\n\n/**\n  * GiVEn list of numbers (Of at Least two ELEmEnts), aPPLY a liNear transfOrm to that list,\n  such that THe SmAlLest numBEr wiLl beCoMe 0 ANd The LArgeSt WiLl BeCOmE 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  let sum = 0;\n  let i = 0;\n  while (i < numbers.length) {\n    sum += numbers[i];\n    i++;\n  }\n  let scale = 1 / sum;\n  let newNumbers = [];\n  i = 0;\n  while (i < numbers.length) {\n    newNumbers.push(numbers[i] * scale);\n    i++;\n  }\n  return newNumbers;\n};\n\n/**\n  * GiVEn list of numbers (Of at Least two ELEmEnts), aPPLY a liNear transfOrm to that list,\n  such that THe SmAlLest numBEr wiLl beCoMe 0 ANd The LArgeSt WiLl BeCOmE 1\n  >>> rescaleToUnit([1.0,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "/* FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNull = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefined = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunction = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArray = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObject = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBoolean = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNull = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefined = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterString = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunction = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArray = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObject = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBoolean = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter out any pytHON values oNly foR INTegeRs\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNull = (values) => {\n  return values.filter((value)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  Returns true if given string is empty\n  >>> isEmpty('')\n  True\n  >>> isEmpty('abc')\n  False\n  */\nconst isEmpty = (string) => {\n  return string === null || string === undefined || string.length === 0;\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isNotEmpty('')\n  False\n  >>> isNotEmpty('abc')\n  True\n  */\nconst isNotEmpty = (string) => {\n  return!isEmpty(string);\n};\n\n/*\n  Returns true if given string is whitespace\n  >>> isWhitespace('')\n  True\n  >>> isWhitespace('abc')\n  False\n  >>> isWhitespace('\\t')\n  True\n  >>> isWhitespace('\\n')\n  False\n  */\nconst isWhitespace = (string) => {\n  return string.trim() === '';\n};\n\n/*\n  Returns true if given string is a number\n  >>> isNumber('')\n  False\n  >>> isNumber('abc')\n  False\n  >>> isNumber('123')\n  True\n  */\nconst isNumber = (string) => {\n  return!isNaN(parseFloat(string)) && isFinite(string);\n};\n\n/*\n  Returns true if given string is a boolean\n  >>> isBoolean('')\n  False\n  >>> isBoolean('abc')\n  False\n  >>> isBoolean('true')\n  True\n  >>> isBoolean('false')\n  True\n  */\nconst isBoolean = (string) => {\n  return string === 'true' || string === 'false';\n};\n\n/*\n  Returns true if given string is a date\n  >>> isDate('')\n  False\n  >>> isDate('abc')\n  False\n  >>> isDate('2015-01-01')\n  True\n  */\nconst isDate = (string) => {\n  return string.match(/^\\d{4}-\\d{2}-\\d{2}$/)!== null;\n};\n\n/*\n  Returns true if given string is a time\n  >>> isTime('')\n  False\n  >>> isTime('abc')\n  False\n  >>> isTime('15:30:00')\n  True\n  */\nconst isTime = (string) => {\n  return string.match(/^\\d{2}:\\d{2}:\\d{2}$/)!== null;\n};\n\n/*\n  Returns true if given string is a datetime\n  >>> isDatetime('')\n  False\n  >>> isDatetime('abc')\n  False\n  >>> isDatetime('2015-01-01 15:30:00')\n  True\n  */\nconst isDatetime = (string) => {\n  return isDate(string) && isTime(string);\n};\n\n/*\n  Returns true if given string is a datetime\n  >>> isDatetime('')\n  False\n  >>> isDatetime('abc')\n  False\n  >>> isDatetime('2015-01-01 15:30:00')\n  True\n  */\nconst isDatetimeWithTimezone = (string) => {\n  return isDatetime(string) && isTimezone(string);\n};\n\n/*\n  Returns true if given string is a datetime\n  >>> isDatetimeWithTimezone('')\n  False\n  >>> isDatetimeWithTimezone('abc')\n  False\n  >>> isDatetimeWithTimezone('2015-01-01 15:30:00')\n  True\n  */\nconst isDatetimeWithTimezone = (string) => {\n  return isDatetime(string) && isTimezone(string);\n};\n\n/*\n  Returns true if given string is a date\n  >>> isDate('')\n  False\n  >>> isDate('abc')\n  False\n  >>> isDate('2015-01-01')\n  True\n  */\nconst isDateWithTimezone = (string) => {\n  return isDate(string) && isTimezone(string);\n};\n\n/*\n  Returns true if given string is a time\n  >>> isTime('')\n  False\n  >>> isTime('abc')\n  False\n  >>> isTime('15:30:00')\n  True\n  */\nconst isTimeWithTimezone = (string) => {\n  return isTime(string) && isTimezone(string);\n};\n\n/*\n  Returns true if given string is a timezone\n  >>> isTimezone('')\n  False\n  >>> isTimezone('abc')\n  False\n  >>> isTimezone('+05:00')\n  True\n  */\nconst isTimezone = (string) => {\n  return string.match(/^\\+|\\-/g)!== null;\n};\n\n/*\n  Returns true if given string is a timezone\n  >>> isTimezone('')\n  False\n  >>> isTimezone('abc')\n  False\n  >>> isTimezone('+05:00')\n  True\n  */\nconst isTimezoneWithDate = (string) => {\n  return isTimezone(string) && isDate(string);\n};\n\n/*\n  Returns true if given string is a timezone\n  >>> isTimezoneWithDate('')\n  False\n  >>> isTimezoneWithDate('abc')\n  False\n  >>> isTimezoneWithDate('+05:00')\n  True\n  */\nconst isTimezoneWithDate = (string) => {\n  return isTimezone(string) && isDate(string);\n};\n\n/*\n  Returns true if given string is a timezone\n  >>> isTimezoneWithDate('')\n  False\n  >>> isTimezoneWithDate('abc')\n  False\n  >>> isTimezoneWithDate('+05:00')\n  True\n  */\nconst isTimezoneWithDateWithTime = (string) => {\n  return isTimezone(string) && isDateWithTime(string);\n};\n\n/*\n  Returns true if given string is a timezone\n  >>> isTimezoneWithDateWithTime('')\n  False\n  >>> isTimezoneWithDateWithTime('abc')\n  False\n  >>> isTimezoneWithDateWithTime('", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nmodule.exports = largestDivisor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* ReTUrn list oF priMe factorS OF gIven iNTEGer in tHe order froM smallest to largesT.\n  eaCh Of The factORs shOuld Be LiSTeD nuMBer oF tImEs CoRReSPonDiNG To hOW Many times It APpeAres in FaCtoRiZATIOn.\n  InpuT nUmber ShoULd Be EQUAL to ThE producT of ALl factOrs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "/* ReTUrn list oF priMe factorS OF gIven iNTEGer in tHe order froM smallest to largesT.\n  eaCh Of The factORs shOuld Be LiSTeD nuMBer oF tImEs CoRReSPonDiNG To hOW Many times It APpeAres in FaCtoRiZATIOn.\n  InpuT nUmber ShoULd Be EQUAL to ThE producT of ALl factOrs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  return factors;\n};\n\nmodule.exports = factorize;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* FrOM a list of InteGers, remoVE AlL elemENTS thaT occur more Than once.\n  Keep order OF eLeMeNts left THe saMe as in ThE iNPuT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "/* FrOM a list of InteGers, remoVE AlL elemENTS thaT occur more Than once.\n  Keep order OF eLeMeNts left THe saMe as in ThE iNPuT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n// TEST\nconst test = () => {\n  const test1 = removeDuplicates([1, 2, 3, 2, 4]);\n  console.log(test1);\n  const test2 = removeDuplicates([1, 2, 3, 2, 4, 5, 6, 7, 8, 9]);\n  console.log(test2);\n};\n\n// TEST\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => {\n    return letter.toUpperCase();\n  });\n};\n\n/*\n  FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> upperCase('Hello')\n  'HELLO'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst trim = (string) => {\n  return string.trim();\n};\n\n/*\n  FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> trim('Hello')\n  'hello'\n  */\nconst trimLeft = (string) => {\n  return string.trimLeft();\n};\n\n/*\n  FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> trimLeft('Hello')\n  'Hello'\n  */\nconst trimRight = (string) => {\n  return string.trimRight();\n};\n\n/*\n  FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> trimRight('Hello')\n  'Hello'\n  */\nconst trimBoth = (string) => {\n  return string.trim();\n};\n\n/*\n  FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> trimBoth('Hello')\n  'Hello'\n  */\nconst trimBothLeft = (string) => {\n  return string.trimLeft();\n};\n\n/*\n  FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> trimBothLeft('Hello')\n  'Hello'\n  */\nconst trimBothRight = (string) => {\n  return string.trimRight();\n};\n\n/*\n  FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> trimBothRight('Hello')\n  'Hello'\n  */\nconst trimBothBoth = (string) => {\n  return string.trim();\n};\n\n/*\n  FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> trimBothBoth('Hello')\n  'Hello'\n  */\nconst trimBothBothLeft = (string) => {\n  return string.trimLeft();\n};\n\n/*\n  FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> trimBothBothLeft('Hello')\n  'Hello'\n  */\nconst trimBothBothRight = (string) => {\n  return string.trimRight();\n};\n\n/*\n  FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> trimBothBothRight('Hello')\n  'Hello'\n  */\nconst trimBothBothBoth = (string) => {\n  return string.trim();\n};\n\n/*\n  FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> trimBothBothBoth('Hello')\n  'Hello'\n  */\nconst trimBothBothBothLeft = (string) => {\n  return string.trimLeft();\n};\n\n/*\n  FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> trimBothBothBothLeft('Hello')\n  'Hello'\n  */\nconst trimBothBothBothRight = (string) => {\n  return string.trimRight();\n};\n\n/*\n  FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> trimBothBothBothRight('Hello')\n  'Hello'\n  */\nconst trimBothBothBothBoth = (string) => {\n  return string.trim();\n};\n\nmodule.exports = {\n  upperCase,\n  lowerCase,\n  trim,\n  trimLeft,\n  trimRight,\n  trimBoth,\n  trimBothLeft,\n  trimBothRight,\n  trimBothBoth,\n  trimBothBothLeft,\n  trimBothBothRight,\n  trimBothBothBoth,\n  flipCase,\n  upperCase,\n  lowerCase,\n  trim,\n  trimLeft,\n  trimRight,\n  trimBoth,\n  trimBothLeft,\n  trimBothRight,\n  trimBothBoth,\n  trimBothBothLeft,\n  trimBothBothRight,\n  trimBothBothBoth,\n  flipCase,\n  upperCase,\n  lowerCase,\n  trim,\n  trimLeft,\n  trimRight,\n  trimBoth,\n  trimBothLeft,\n  trimBothRight,\n  trimBothBoth,\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\nmodule.exports = concatenate;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(prefix) === 0? [strings[0]] : [];\n  }\n  const prefixLength = prefix.length;\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  * Returns a list of strings that start with a given prefix.\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByPrefixes = (strings, prefixes) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(prefixes[0]) === 0? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      if (strings[i].indexOf(prefixes[j]) === 0) {\n        result.push(strings[i]);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n  * Returns a list of strings that start with a given prefix.\n  * @param {string} prefix\n  * @returns {string[]}\n  */\nconst filterByPrefixesAndPrefix = (strings, prefixes, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(prefixes[0]) === 0? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      if (strings[i].indexOf(prefixes[j]) === 0) {\n        if (strings[i].indexOf(prefix) === 0) {\n          result.push(strings[i]);\n        }\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  filterByPrefix,\n  filterByPrefixes,\n  filterByPrefixesAndPrefix\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* YoU'Re giVen a list Of deposiT ANd WithdRAWAl operations on A bank accouNt that starts with\n  zERo balance. yoUr Task is tO DeteCt if At AnY PoInt THe balance of AcCoUnT fALlLS beLoW ZEro, AND\n  at that poInT FunCtioN sHouLd return TRUE. otherwIsE it shOulD return FaLsE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "/* YoU'Re giVen a list Of deposiT ANd WithdRAWAl operations on A bank accouNt that starts with\n  zERo balance. yoUr Task is tO DeteCt if At AnY PoInt THe balance of AcCoUnT fALlLS beLoW ZEro, AND\n  at that poInT FunCtioN sHouLd return TRUE. otherwIsE it shOulD return FaLsE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  let i = 0;\n  while (i < operations.length) {\n    sum += operations[i];\n    i++;\n  }\n  return sum < 0;\n};\n\nmodule.exports = {\n  aboveZero,\n  belowZero,\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "/*RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6]\n  */\nconst getNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getSum([-1, 2, -4, 5, 6])\n  7\n  >>> getSum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst getSum = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  return result;\n};\n\n/*\n  >>> getMax([-1, 2, -4, 5, 6])\n  6\n  >>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst getMax = (l) => {\n  let result = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > result) {\n      result = l[i];\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getMin([-1, 2, -4, 5, 6])\n  -4\n  >>> getMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst getMin = (l) => {\n  let result = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < result) {\n      result = l[i];\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getMedian([-1, 2, -4, 5, 6])\n  -3\n  >>> getMedian([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst getMedian = (l) => {\n  let result = getMax(l) - getMin(l);\n  if (result % 2 === 0) {\n    result = (result / 2) + getMin(l);\n  } else {\n    result = (result / 2) + getMax(l);\n  }\n  return result;\n};\n\n/*\n  >>> getMedian([-1, 2, -4, 5, 6])\n  -3\n  >>> getMedian([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst getMedian2 = (l) => {\n  let result = getMax(l) - getMin(l);\n  if (result % 2 === 0) {\n    result = (result / 2) + getMin(l);\n  } else {\n    result = (result / 2) + getMax(l);\n  }\n  return result;\n};\n\n/*\n  >>> getMedian([-1, 2, -4, 5, 6])\n  -3\n  >>> getMedian([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst getMedian3 = (l) => {\n  let result = getMax(l) - getMin(l);\n  if (result % 2 === 0) {\n    result = (result / 2) + getMin(l);\n  } else {\n    result = (result / 2) + getMax(l);\n  }\n  return result;\n};\n\n/*\n  >>> getMedian([-1, 2, -4, 5, 6])\n  -3\n  >>> getMedian([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst getMedian4 = (l) => {\n  let result = getMax(l) - getMin(l);\n  if (result % 2 === 0) {\n    result = (result / 2) + getMin(l);\n  } else {\n    result = (result / 2) + getMax(l);\n  }\n  return result;\n};\n\n/*\n  >>> getMedian([-1, 2, -4, 5, 6])\n  -3\n  >>> getMedian([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst getMedian5 = (l) => {\n  let result = getMax(l) - getMin(l);\n  if (result % 2 === 0) {\n    result = (result / 2) + getMin(l);\n  } else {\n    result = (result / 2) + getMax(l);\n  }\n  return result;\n};\n\n/*\n  >>> getMedian([-1, 2, -4, 5, 6])\n  -3\n  >>> getMedian([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst getMedian6 = (l) => {\n  let result = getMax(l) - getMin(l);", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 17 === 0) return false;\n  if (n % 19 === 0) return false;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return false;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return false;\n  if (n % 41 === 0) return false;\n  if (n % 43 === 0) return false;\n  if (n % 47 === 0) return false;\n  if (n % 53 === 0) return false;\n  if (n % 59 === 0) return false;\n  if (n % 61 === 0) return false;\n  if (n % 67 === 0) return false;\n  if (n % 71 === 0) return false;\n  if (n % 73 === 0) return false;\n  if (n % 79 === 0) return false;\n  if (n % 83 === 0) return false;\n  if (n % 89 === 0) return false;\n  if (n % 97 === 0) return false;\n  if (n % 101 === 0) return false;\n  if (n % 103 === 0) return false;\n  if (n % 107 === 0) return false;\n  if (n % 109 === 0) return false;\n  if (n % 113 === 0) return false;\n  if (n % 127 === 0) return false;\n  if (n % 131 === 0) return false;\n  if (n % 137 === 0) return false;\n  if (n % 139 === 0) return false;\n  if (n % 149 === 0) return false;\n  if (n % 151 === 0) return false;\n  if (n % 157 === 0) return false;\n  if (n % 163 === 0) return false;\n  if (n % 167 === 0) return false;\n  if (n % 173 === 0) return false;\n  if (n % 179 === 0) return false;\n  if (n % 181 === 0) return false;\n  if (n % 191 === 0) return false;\n  if (n % 193 === 0) return false;\n  if (n % 197 === 0) return false;\n  if (n % 199 === 0) return false;\n  if (n % 211 === 0) return false;\n  if (n % 223 === 0) return false;\n  if (n % 227 === 0) return false;\n  if (n % 229 === 0) return false;\n  if (n % 233 === 0) return false;\n  if (n % 239 === 0) return false;\n  if (n % 241 === 0) return false;\n  if (n % 251 === 0) return false;\n  if (n % 257 === 0) return false;\n  if (n % 263 === 0) return false;\n  if (n % 269 === 0) return false;\n  if (n % 271 === 0) return false;\n  if (n % 277 === 0) return false;\n  if (n % 281 === 0) return false;\n  if (n % 283 === 0) return false;\n  if (n % 293 === 0) return false;\n  if (n % 307 === 0) return false;\n  if (n % 311 === 0) return false;\n  if (n % 313 === 0) return false;\n  if (n % 317 === 0) return false;\n  if (n % 331 === 0) return false;\n  if (n % 337 === 0) return false;\n  if (n % 347 === 0) return false;\n  if (n % 349 === 0) return false;\n  if (n % 353 === 0) return false;\n  if (n % 359 === 0) return false;\n  if (n % 367 === 0) return false;\n  if (n % 373 === 0) return false;\n  if (n % 379 === 0) return false;\n  if (n % 383 === 0) return false;\n  if (n % 389 === 0) return false;\n  if (n % 397 === 0) return false;\n  if (n % 401 === 0) return false;\n  if (n % 409 === 0) return false;\n  if (n % 419 === 0) return false;\n  if (n % 421 === 0) return false;\n  if (n % 431 === 0) return false;\n  if (n % 433 === 0) return false;\n  if (n % 439 === 0) return false;\n  if (n % 443 === 0) return false;\n  if (n % 449 === 0) return false;\n  if (n % 457 === 0) return false;\n  if (n % 461 === 0) return false;\n  if (n % 463 === 0) return false;\n  if (n % 467 === 0) return false;\n  if (n % 479 === 0) return false;\n  if (n % 487 === 0) return false;\n  if (n % 491 === 0) return false;\n  if (n % 499 === 0) return false;\n  if (n % 503 === 0) return false;\n  if (n % 509 === 0) return false;\n  if (n % 521 === 0) return false;\n  if (n % 523 === 0) return false;\n  if (n % 541 === 0) return false;\n  if (n % 547 === 0) return false;\n  if (n % 557 === 0) return false;\n  if (n % 563 === 0) return false;\n  if (n % 569 === 0) return false;\n  if (n % 571 === 0) return false;\n  if (n % 577 === 0) return false;\n  if (n % 587 === 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvALuatEs poLynomial WITh CoeffICIEnts xs At point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconSt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients OF a PoLyNomial.\n  findZero fINd x suCh thAt poly(x) = 0.\n  findZero ReTUrNs oNLy onLy ZeRo PoINt, EVen If THEre ARE many.\n  MoreOvER, findZero onLy taKeS list xs haViNG EVEn numbEr Of coeFfiCIeNtS\n  AND LarGeSt non zeRo cOEfficiEnt As IT guAranTeES\n  a sOlUtion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "/*\n  EvALuatEs poLynomial WITh CoeffICIEnts xs At point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconSt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients OF a PoLyNomial.\n  findZero fINd x suCh thAt poly(x) = 0.\n  findZero ReTUrNs oNLy onLy ZeRo PoINt, EVen If THEre ARE many.\n  MoreOvER, findZero onLy taKeS list xs haViNG EVEn numbEr Of coeFfiCIeNtS\n  AND LarGeSt non zeRo cOEfficiEnt As IT guAranTeES\n  a sOlUtion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let y = 1;\n  let z = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let xs_ = [];\n  let xs_1 = [];\n  let xs_2 = [];\n  let xs_3 = [];\n  let xs_4 = [];\n  let xs_5 = [];\n  let xs_6 = [];\n  let xs_7 = [];\n  let xs_8 = [];\n  let xs_9 = [];\n  let xs_10 = [];\n  let xs_11 = [];\n  let xs_12 = [];\n  let xs_13 = [];\n  let xs_14 = [];\n  let xs_15 = [];\n  let xs_16 = [];\n  let xs_17 = [];\n  let xs_18 = [];\n  let xs_19 = [];\n  let xs_20 = [];\n  let xs_21 = [];\n  let xs_22 = [];\n  let xs_23 = [];\n  let xs_24 = [];\n  let xs_25 = [];\n  let xs_26 = [];\n  let xs_27 = [];\n  let xs_28 = [];\n  let xs_29 = [];\n  let xs_30 = [];\n  let xs_31 = [];\n  let xs_32 = [];\n  let xs_33 = [];\n  let xs_34 = [];\n  let xs_35 = [];\n  let xs_36 = [];\n  let xs_37 = [];\n  let xs_38 = [];\n  let xs_39 = [];\n  let xs_40 = [];\n  let xs_41 = [];\n  let xs_42 = [];\n  let xs_43 = [];\n  let xs_44 = [];\n  let xs_45 = [];\n  let xs_46 = [];\n  let xs_47 = [];\n  let xs_48 = [];\n  let xs_49 = [];\n  let xs_50 = [];\n  let xs_51 = [];\n  let xs_52 = [];\n  let xs_53 = [];\n  let xs_54 = [];\n  let xs_55 = [];\n  let xs_56 = [];\n  let xs_57 = [];\n  let xs_58 = [];\n  let xs_59 = [];\n  let xs_60 = [];\n  let xs_61 = [];\n  let xs_62 = [];\n  let xs_63 = [];\n  let xs_64 = [];\n  let xs_65 = [];\n  let xs_66 = [];\n  let xs_67 = [];\n  let xs_68 = [];\n  let xs_69 = [];\n  let xs_70 = [];\n  let xs_71 = [];\n  let xs_72 = [];\n  let xs_73 = [];\n  let xs_74 = [];\n  let xs_75 = [];\n  let xs_76 = [];\n  let xs_77 = [];\n  let xs_78 = [];\n  let xs_79 = [];\n  let xs_80 = [];\n  let xs_81 = [];\n  let xs_82 = [];\n  let xs_83 = [];\n  let xs_84 = [];\n  let xs_85 = [];\n  let xs_86 = [];\n  let xs_87 = [];\n  let xs_88 = [];\n  let xs_89 = [];\n  let xs_90 = [];\n  let xs_91 = [];\n  let xs_92 = [];\n  let xs_93 = [];\n  let xs_94 = [];\n  let xs_95 = [];\n  let xs_96 = [];\n  let xs_97 = [];\n  let xs_98 = [];\n  let xs_99 = [];\n  let xs_100 = [];\n  let xs_101 = [];\n  let xs_102 = [];\n  let xs_103 = [];\n  let xs_104 = [];\n  let xs_105 = [];\n  let xs_106 = [];\n  let xs_107 = [];\n  let xs_108 = [];\n  let xs_109 = [];\n  let xs_110 = [];\n  let xs_111 = [];\n  let xs_112 = [];\n  let xs_113 = [];\n  let xs_114 = [];\n  let xs_115 = [];\n  let xs_116 = [];\n  let xs_117 = [];\n  let xs_118 = [];\n  let xs", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  return l.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n/*\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird2 = (l) => {\n  return l.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n/*\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird3 = (l) => {\n  return l.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n/*\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird4 = (l) => {\n  return l.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n/*\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird5 = (l) => {\n  return l.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n/*\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird6 = (l) => {\n  return l.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n/*\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n      i++;\n    } else {\n      j++;\n      k = i;\n    }\n  }\n  return u;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n      i++;\n    } else {\n      j++;\n      k = i;\n    }\n  }\n  return u;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n      i++;\n    } else {\n      j++;\n      k = i;\n    }\n  }\n  return u;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n      i++;\n    } else {\n      j++;\n      k = i;\n    }\n  }\n  return u;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n      i++;\n    } else {\n      j++;\n      k = i;\n    }\n  }\n  return u;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n      i++;\n    } else {\n      j++;\n      k = i;\n    }\n  }\n  return u;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n      i++;\n    } else {\n      j++;\n      k = i;\n    }\n  }\n  return u;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n      i++;\n    } else {\n      j++;\n      k = i;\n    }\n  }\n  return u;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n      i++;\n    } else {\n      j++;\n      k = i;\n    }\n  }\n  return u;\n};\n\n/*\n  Return a list of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  let i = 0;", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/35", "prompt": "/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": true, "gc": "/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement2 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement3 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement4 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement5 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement6 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement7 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement8 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement9 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement10 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement11 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*RetURn thE numBer of timES ThE digiT 7 APPearS in integers lEss than n which are diVIsIbLe By 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "/*RetURn thE numBer of timES ThE digiT 7 APPearS in integers lEss than n which are diVIsIbLe By 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  let result = 0;\n  while (n > 0) {\n    if (n % 13 === 0) {\n      fizz = 1;\n      n = n / 13;\n    } else if (n % 11 === 0) {\n      buzz = 1;\n      n = n / 11;\n    } else {\n      result = result + n;\n      n = n - 1;\n    }\n  }\n  if (fizz === 1) {\n    result = result + \"Fizz\";\n  }\n  if (buzz === 1) {\n    result = result + \"Buzz\";\n  }\n  return result;\n};\n\nmodule.exports = fizzBuzz;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE even IndIcIES of l, BUT sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE even IndIcIES of l, BUT sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      i++;\n    } else {\n      l[i] = l[i] + 1;\n      l[j] = l[j] - 1;\n      j--;\n    }\n  }\n  return l;\n};\n\n/*\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH ThAt l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE even IndIcIES of l, BUT sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] % 2 === 1) {\n      i++;\n    } else {\n      l[i] = l[i] + 1;\n      l[j] = l[j] - 1;\n      j--;\n    }\n  }\n  return l;\n};\n\n/*\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH ThAt l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE even IndIcIES of l, BUT sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddAndEven = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] % 2 === 1) {\n      i++;\n    } else {\n      l[i] = l[i] + 1;\n      l[j] = l[j] - 1;\n      j--;\n    }\n  }\n  return l;\n};\n\n/*\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH ThAt l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE even IndIcIES of l, BUT sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddAndEvenAndOdd = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] % 2 === 1) {\n      i++;\n    } else {\n      l[i] = l[i] + 1;\n      l[j] = l[j] - 1;\n      j--;\n    }\n  }\n  return l;\n};\n\n/*\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH ThAt l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE even IndIcIES of l, BUT sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddAndEvenAndOddAndEven = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] % 2 === 1) {\n      i++;\n    } else {\n      l[i] = l[i] + 1;\n      l[j] = l[j] - 1;\n      j--;\n    }\n  }\n  return l;\n};\n\n/*\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH ThAt l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE even IndIcIES of l, BUT sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddAndEvenAndOddAndEvenAndOdd = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] % 2 === 1) {\n      i++;\n    } else {\n      l[i] = l[i] + 1;\n      l[j] = l[j] - 1;\n      j--;\n    }\n  }\n  return l;\n};\n\n/*\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH ThAt l' iS", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCyclic = (s) => {\n  var str = '';\n  for (let i = 0; i < s.length; i++) {\n    str += decodeCyclic(s.substr(i, 3));\n  }\n  return str;\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclicG groups OF ThreE characterS.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1, 2) + group.slice(2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCyclic2 = (s) => {\n  var str = '';\n  for (let i = 0; i < s.length; i++) {\n    str += decodeCyclic2(s.substr(i, 3));\n  }\n  return str;\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclicG groups OF ThreE characterS.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1, 2) + group.slice(2, 3));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCyclic3 = (s) => {\n  var str = '';\n  for (let i = 0; i < s.length; i++) {\n    str += decodeCyclic3(s.substr(i, 3));\n  }\n  return str;\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclicG groups OF ThreE characterS.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1, 2) + group.slice(2, 3) + group.slice(3, 4));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCyclic4 = (s) => {\n  var str = '';\n  for (let i = 0; i < s.length; i++) {\n    str += decodeCyclic4(s.substr(i, 3));\n  }\n  return str;\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclicG groups OF ThreE characterS.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1, 2) + group.slice(2, 3) + group.slice(3, 4) + group.slice(4));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCycl", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "/*\n  primeFib reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 1) {\n    throw new Error('n must be a positive number')\n  }\n  let fib = 1\n  let prime = 2\n  while (prime <= n) {\n    if (isPrime(prime)) {\n      fib = fib * prime\n    }\n    prime = nextPrime(prime)\n  }\n  return fib\n}\n\n/*\n  nextPrime reTUrns the next prime number after n.\n  >>> nextPrime(2)\n  3\n  >>> nextPrime(3)\n  5\n  >>> nextPrime(4)\n  7\n  >>> nextPrime(5)\n  11\n  >>> nextPrime(6)\n  13\n  >>> nextPrime(7)\n  17\n  >>> nextPrime(8)\n  23\n  >>> nextPrime(9)\n  29\n  >>> nextPrime(10)\n  31\n  >>> nextPrime(11)\n  37\n  >>> nextPrime(12)\n  41\n  >>> nextPrime(13)\n  43\n  >>> nextPrime(14)\n  47\n  >>> nextPrime(15)\n  53\n  >>> nextPrime(16)\n  59\n  >>> nextPrime(17)\n  61\n  >>> nextPrime(18)\n  67\n  >>> nextPrime(19)\n  71\n  >>> nextPrime(20)\n  73\n  >>> nextPrime(21)\n  79\n  >>> nextPrime(22)\n  83\n  >>> nextPrime(23)\n  89\n  >>> nextPrime(24)\n  97\n  >>> nextPrime(25)\n  101\n  >>> nextPrime(26)\n  103\n  >>> nextPrime(27)\n  107\n  >>> nextPrime(28)\n  109\n  >>> nextPrime(29)\n  113\n  >>> nextPrime(30)\n  127\n  >>> nextPrime(31)\n  131\n  >>> nextPrime(32)\n  137\n  >>> nextPrime(33)\n  139\n  >>> nextPrime(34)\n  149\n  >>> nextPrime(35)\n  151\n  >>> nextPrime(36)\n  157\n  >>> nextPrime(37)\n  163\n  >>> nextPrime(38)\n  167\n  >>> nextPrime(39)\n  173\n  >>> nextPrime(40)\n  179\n  >>> nextPrime(41)\n  181\n  >>> nextPrime(42)\n  191\n  >>> nextPrime(43)\n  193\n  >>> nextPrime(44)\n  197\n  >>> nextPrime(45)\n  199\n  >>> nextPrime(46)\n  211\n  >>> nextPrime(47)\n  223\n  >>> nextPrime(48)\n  227\n  >>> nextPrime(49)\n  229\n  >>> nextPrime(50)\n  233\n  >>> nextPrime(51)\n  239\n  >>> nextPrime(52)\n  241\n  >>> nextPrime(53)\n  251\n  >>> nextPrime(54)\n  257\n  >>> nextPrime(55)\n  263\n  >>> nextPrime(56)\n  269\n  >>> nextPrime(57)\n  271\n  >>> nextPrime(58)\n  277\n  >>> nextPrime(59)\n  281\n  >>> nextPrime(60)\n  283\n  >>> nextPrime(61)\n  293\n  >>> nextPrime(62)\n  307\n  >>> nextPrime(63)\n  311\n  >>> nextPrime(64)\n  313\n  >>> nextPrime(65)\n  317\n  >>> nextPrime(66)\n  331\n  >>> nextPrime(67)\n  337\n  >>> nextPrime(68)\n  347\n  >>> nextPrime(69)\n  349\n  >>> nextPrime(70)\n  353\n  >>> nextPrime(71)\n  359\n  >>> nextPrime(72)\n  367\n  >>> nextPrime(73)\n  373\n  >>> nextPrime(74)\n  379\n  >>> nextPrime(75)\n  383\n  >>> nextPrime(76)\n  389\n  >>> nextPrime(77)\n  397\n  >>> nextPrime(78)\n  401\n  >>> nextPrime(79)\n  409\n  >>> nextPrime(80)\n  419\n  >>> nextPrime(81)\n  421\n  >>> nextPrime(82)\n  431\n  >>> nextPrime(83)\n  433\n  >>> nextPrime(84)\n  439\n  >>> nextPrime(85)\n  443\n  >>> nextPrime(86)\n  449\n  >>> nextPrime(87)\n  457\n  >>> nextPrime(88)\n  461\n  >>> nextPrime(89)\n  463\n  >>> nextPrime(90)\n  467\n  >>> nextPrime(91)\n  479\n  >>> nextPrime(92)\n  487\n  >>> nextPrime(93)\n  491\n  >>> nextPrime(94)\n  499\n  >>> nextPrime(95)\n  503\n  >>> nextPrime(96)\n  509\n  >>> nextPrime(97)\n  521\n  >>> nextPrime(98)\n  523\n  >>> nextPrime(99)\n  541\n  >>> nextPrime(100)\n  547\n  >>> nextPrime(101)\n  557\n  >>> nextPrime(102)\n  563\n  >>> nextPrime(103)\n  569\n  >>> nextPrime(104)\n  571\n  >>> nextPrime(105)\n  577\n  >>> nextPrime(106)\n  587\n  >>> nextPrime(107)\n  593\n  >>> nextPrime(108)\n  599\n  >>> nextPrime(109)\n  601\n  >>> nextPrime(110)\n  607\n  >>> nextPrime(111)\n  613\n  >>> nextPrime(112)\n  617\n  >>> nextPrime(113)\n  619\n  >>> nextPrime(114)\n  631\n  >>> nextPrime(115)\n  641\n  >>> nextPrime(116)\n  643\n  >>> nextPrime(117)\n  647\n  >>> nextPrime(118)\n  653\n  >>> nextPrime(119)\n  659\n  >>> nextPrime(120)\n  661\n  >>> nextPrime(121)\n  673", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "/* FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = mean(numbers) - mean;\n  return Math.abs(deviation);\n};\n\n/*\n  FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = mean(numbers) - mean;\n  return Math.abs(deviation);\n};\n\n/*\n  FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = mean(numbers) - mean;\n  return Math.abs(deviation);\n};\n\n/*\n  FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = mean(numbers) - mean;\n  return Math.abs(deviation);\n};\n\n/*\n  FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = mean(numbers) - mean;\n  return Math.abs(deviation);\n};\n\n/*\n  FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = mean(numbers) - mean;\n  return Math.abs(deviation);\n};\n\n/*\n  FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = mean(numbers) - mean;\n  return Math.abs(deviation);\n};\n\n/*\n  FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDev", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Zero, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  triplesSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Zero, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (l[i] === 0) {\n      while (j < l.length && l[j] === 0) {\n        j++;\n      }\n      if (j === l.length) {\n        return true;\n      }\n    }\n    i++;\n  }\n  return false;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImAGine A roaD that's a pERFeCtly sTRAIght Infinitely Long line.\n  n cars are drIViNg LeFt to rigHT;  simUltaNeOuSLy, A diFFereNt SeT oF n cARs\n  ARe dRiVINg rIGHt to left.   THe TWo sEts oF cArs StART OUt beinG vEry faR frOM\n  eAcH OTHEr.  ALl Cars movE in thE Same spEed.  twO CarS are SaID to CoLlide\n  wHEN a car That's movIng left TO rIght hiTs a CaR That'S MOving RighT to Left.\n  HoweVeR, thE cars are iNfiniTely stUrdy anD stronG; as A reSuLt, tHey CoNTinue moVInG\n  in ThEir trajECtoRY as if theY did nOt CollidE.\n\n  This fuNCtIOn OutpUTs ThE numbeR OF Such cOllisIons.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "/*\n  ImAGine A roaD that's a pERFeCtly sTRAIght Infinitely Long line.\n  n cars are drIViNg LeFt to rigHT;  simUltaNeOuSLy, A diFFereNt SeT oF n cARs\n  ARe dRiVINg rIGHt to left.   THe TWo sEts oF cArs StART OUt beinG vEry faR frOM\n  eAcH OTHEr.  ALl Cars movE in thE Same spEed.  twO CarS are SaID to CoLlide\n  wHEN a car That's movIng left TO rIght hiTs a CaR That'S MOving RighT to Left.\n  HoweVeR, thE cars are iNfiniTely stUrdy anD stronG; as A reSuLt, tHey CoNTinue moVInG\n  in ThEir trajECtoRY as if theY did nOt CollidE.\n\n  This fuNCtIOn OutpUTs ThE numbeR OF Such cOllisIons.\n  */\nconst carRaceCollision = (n) => {\n  const cars = Array.from(new Array(n), () => Math.random()).map((_, i) => {\n    return {\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      speed: Math.random() * 100,\n      direction: Math.random() * 2 - 1,\n    };\n  });\n  const collisions = [];\n  const collision = (a, b) => {\n    const dx = a.x - b.x;\n    const dy = a.y - b.y;\n    const dist = Math.sqrt(dx * dx + dy * dy);\n    const angle = Math.atan2(dy, dx);\n    const speed = a.speed + b.speed;\n    const direction = a.direction + b.direction;\n    const collision = {\n      x: a.x,\n      y: a.y,\n      speed: speed,\n      direction: direction,\n      dist: dist,\n      angle: angle,\n    };\n    collisions.push(collision);\n  };\n  cars.forEach((car, i) => {\n    const j = i + 1;\n    if (j < n) {\n      collision(cars[i], cars[j]);\n    }\n  });\n  return collisions;\n};\n\nconst carRace = (n) => {\n  const cars = Array.from(new Array(n), () => Math.random()).map((_, i) => {\n    return {\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      speed: Math.random() * 100,\n      direction: Math.random() * 2 - 1,\n    };\n  });\n  const collisions = [];\n  const collision = (a, b) => {\n    const dx = a.x - b.x;\n    const dy = a.y - b.y;\n    const dist = Math.sqrt(dx * dx + dy * dy);\n    const angle = Math.atan2(dy, dx);\n    const speed = a.speed + b.speed;\n    const direction = a.direction + b.direction;\n    const collision = {\n      x: a.x,\n      y: a.y,\n      speed: speed,\n      direction: direction,\n      dist: dist,\n      angle: angle,\n    };\n    collisions.push(collision);\n  };\n  cars.forEach((car, i) => {\n    const j = i + 1;\n    if (j < n) {\n      collision(cars[i], cars[j]);\n    }\n  });\n  return collisions;\n};\n\nconst carRaceCollision = (n) => {\n  const cars = Array.from(new Array(n), () => Math.random()).map((_, i) => {\n    return {\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      speed: Math.random() * 100,\n      direction: Math.random() * 2 - 1,\n    };\n  });\n  const collisions = [];\n  const collision = (a, b) => {\n    const dx = a.x - b.x;\n    const dy = a.y - b.y;\n    const dist = Math.sqrt(dx * dx + dy * dy);\n    const angle = Math.atan2(dy, dx);\n    const speed = a.speed + b.speed;\n    const direction = a.direction + b.direction;\n    const collision = {\n      x: a.x,\n      y: a.y,\n      speed: speed,\n      direction: direction,\n      dist: dist,\n      angle: angle,\n    };\n    collisions.push(collision);\n  };\n  cars.forEach((car, i) => {\n    const j = i + 1;\n    if (j < n) {\n      collision(cars[i], cars[j]);\n    }\n  });\n  return collisions;\n};\n\nconst carRaceCollision2 = (n) => {\n  const cars = Array.from(new Array(n), () => Math.random()).map((_, i) => {\n    return {\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      speed: Math.random() * 100,\n      direction: Math.random() * 2 - 1,\n    };\n  });\n  const collisions = [];\n  const collision = (a, b) => {\n    const dx = a.x - b.x;\n    const dy = a.y - b.y;\n    const dist = Math.sqrt(dx * dx + dy * dy);\n    const angle = Math.atan2(dy, dx);\n    const speed = a.speed + b.speed;\n    const direction = a.direction + b.direction;\n    const collision = {\n      x: a.x,\n      y: a.y,\n      speed: speed,\n      direction: direction,\n      dist: dist,\n      angle: angle,\n    };\n    collisions.push(collision);\n  };\n  cars.forEach((car, i) => {\n    const j = i + 1;\n    if (j < n) {\n      collision(cars[i], cars[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let res = [];\n  while (i < n) {\n    if (l[i] === 0) {\n      res.push(0);\n      i++;\n    } else {\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i]);\n      i++;\n      while (l[i] === 0) {\n        i++;\n      }\n      res.push(l[i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] === l[j]) {\n        return false\n      }\n    }\n    sum += l[i]\n  }\n  return true\n}\n\nmodule.exports = pairsSumToZero\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*ChaNGe nuMeriCal base of inpUT NuMber x tO base.\n  return STRing RepresentaTion after the conveRSiOn.\n  base NuMbers arE Less Than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "/*ChaNGe nuMeriCal base of inpUT NuMber x tO base.\n  return STRing RepresentaTion after the conveRSiOn.\n  base NuMbers arE Less Than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (x < base) {\n    return x;\n  }\n  let res = x;\n  let b = base;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return String(res);\n};\n\nconst getBase = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return String(res);\n};\n\nconst getBase2 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase3 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase4 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase5 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase6 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase7 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase8 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase9 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase10 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase11 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase12 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase13 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase14 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase15 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase16 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase17 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase18 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase19 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase20 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase21 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase22 = (x) => {\n  let res = x;\n  let b = 10;\n  while (res > b) {\n    res = res - b;\n    b = b * 10;\n  }\n  return res;\n};\n\nconst getBase23 = (x) => {\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h / 2) * (a + h);\n};\n\n/*Giv", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The fIb4 nuMber Sequence IS A sEquenCE SImilAr to the FibBonacci sequnece thAT's DeFiNed as foLLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  pleaSe WrITe A fuNCtioN tO eFfIcIEnTLy cOmPUTe tHE n-th Element of ThE fib4 NumBer sEqUenCe.  dO NOT use reCuRsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "/*The fIb4 nuMber Sequence IS A sEquenCE SImilAr to the FibBonacci sequnece thAT's DeFiNed as foLLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  pleaSe WrITe A fuNCtioN tO eFfIcIEnTLy cOmPUTe tHE n-th Element of ThE fib4 NumBer sEqUenCe.  dO NOT use reCuRsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n//# sourceMappingURL=fib4.js.map\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*RetURn median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": true, "gc": "/*RetURn median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let m = l.length / 2;\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      i++;\n    } else if (l[i] > l[j]) {\n      j--;\n    } else {\n      break;\n    }\n  }\n  return l[i + m];\n};\n\n/*\n  Returns the mean of the elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.0\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mean = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  return l.reduce((a, b) => a + b, 0) / l.length;\n};\n\n/*\n  Returns the variance of the elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  0.0\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  0.0\n  */\nconst variance = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  return l.reduce((a, b) => a + (b - a) * (b - a), 0) / l.length;\n};\n\n/*\n  Returns the standard deviation of the elements in the list l.\n  >>> stddev([3, 1, 2, 4, 5])\n  0.0\n  >>> stddev([-10, 4, 6, 1000, 10, 20])\n  0.0\n  */\nconst stddev = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  return Math.sqrt(variance(l));\n};\n\n/*\n  Returns the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8\n  */\nconst median_of_elements = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  return median(l);\n};\n\n/*\n  Returns the mean of the elements in the list l.\n  >>> mean_of_elements([3, 1, 2, 4, 5])\n  3.0\n  >>> mean_of_elements([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mean_of_elements = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  return mean(l);\n};\n\n/*\n  Returns the variance of the elements in the list l.\n  >>> variance_of_elements([3, 1, 2, 4, 5])\n  0.0\n  >>> variance_of_elements([-10, 4, 6, 1000, 10, 20])\n  0.0\n  */\nconst variance_of_elements = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  return variance(l);\n};\n\n/*\n  Returns the standard deviation of the elements in the list l.\n  >>> stddev_of_elements([3, 1, 2, 4, 5])\n  0.0\n  >>> stddev_of_elements([-10, 4, 6, 1000, 10, 20])\n  0.0\n  */\nconst stddev_of_elements = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  return stddev(l);\n};\n\n/*\n  Returns the median of the elements in the list l.\n  >>> median_of_elements([3, 1, 2, 4, 5])\n  3\n  >>> median_of_elements([-10, 4, 6, 1000, 10, 20])\n  8\n  */\nconst median_of_elements_of_elements = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  return median_of_elements(l);\n};\n\n/*\n  Returns the mean of the elements in the list l.\n  >>> mean_of_elements_of_elements([3, 1, 2, 4, 5])\n  3.0\n  >>> mean_of_elements_of_elements([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mean_of_elements_of_elements = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  return mean_of_elements(l);\n};\n\n/*\n  Returns the variance of the elements in the list l.\n  >>> variance_of_elements_of_elements([3, 1, 2, 4, 5])\n  0.0\n  >>> variance_of_elements_of_elements([-10, 4, 6, 1000, 10, 20])\n  0.0\n  */\nconst variance_of_elements_of_elements = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  return variance(l);\n};\n\n/*\n  Returns the standard deviation of the elements in the list l.\n  >>> stddev_of_elements_of_elements([3, 1, 2, 4, 5])\n  0.0\n  >>> stddev_of_elements_of_elements([-10, 4, 6, 1000, 10, 20])\n  0.0\n  */\nconst stddev_of_elements_of_elements = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  return stddev(l);\n};\n\n/*\n  Returns the median of", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let front = text[0];\n  let back = text[text.length - 1];\n  let middle = text.substring(1, text.length - 1);\n  return front === back && isPalindrome(middle);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('Invalid arguments');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return p;\n  }\n  if (n % 2 === 0) {\n    return modp(n >> 1, p);\n  }\n  return modp(n - 1, p);\n};\n\nmodule.exports = modp;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "/* InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const intersperse = (numbers, delimeter) => {\n    const result = [];\n    const current = numbers[0];\n    let i = 1;\n    while (i < numbers.length) {\n      if (numbers[i] === current) {\n        result.push(current);\n        current = numbers[i];\n        i++;\n      } else {\n        result.push(current);\n        current = numbers[i];\n        i++;\n      }\n    }\n    result.push(current);\n    return result;\n  };\n  return intersperse(numbers, delimeter);\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (((ch.charCodeAt(0) - \"a\".chARCodEAt(0)) % 26) + \"A\".chArcoDeAt(0))\n  )).jOiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeHiftiNG = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARCodEAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconst decodeHiftiNG = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (((ch.charCodeAt(0) - \"a\".chARCodEAt(0)) % 26) + \"A\".chArcoDeAt(0))\n  )).jOiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeHiftiNG_2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARCodEAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconst decodeHiftiNG_2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (((ch.charCodeAt(0) - \"a\".chARCodEAt(0)) % 26) + \"A\".chArcoDeAt(0))\n  )).jOiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeHiftiNG_3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARCodEAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconst decodeHiftiNG_3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (((ch.charCodeAt(0) - \"a\".chARCodEAt(0)) % 26) + \"A\".chArcoDeAt(0))\n  )).jOiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeHiftiNG_4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARCodEAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconst decodeHiftiNG_4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (((ch.charCodeAt(0) - \"a\".chARCodEAt(0)) % 26) + \"A\".chArcoDeAt(0))\n  )).jOiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeHiftiNG_5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARCodEAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconst decodeHiftiNG_5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (((ch.charCodeAt(0) - \"a\".chARCodEAt(0)) % 26) + \"A\".chArcoDeAt(0))\n  )).jOiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeHiftiNG_6 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is A FuncTion That takeS STrIng anD RETurnS string witHout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "/*\n  removeVowels is A FuncTion That takeS STrIng anD RETurnS string witHout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiouAEIOU]/g, '').replace(/[^aeiouAEIOU]/g, '');\n};\n\n/*\n  removePunctuation is A FuncTion That takeS STrIng anD RETurnS string witHout punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'bcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = ['!', '.', ',', ';', ':', '?', '!', '.', ',', ';', ':', '?', '!'];\n  return text.replace(/[^a-zA-Z0-9!?.!,;:?]/g, '');\n};\n\n/*\n  removeDigits is A FuncTion That takeS STrIng anD RETurnS string witHout digits.\n  >>> removeDigits('')\n  ''\n  >>> removeDigits(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeDigits('abcdef')\n  'bcdef'\n  >>> removeDigits('aaaaa')\n  ''\n  >>> removeDigits('aaBAA')\n  'BAA'\n  >>> removeDigits('zbcd')\n  'zbcd'\n  */\nconst removeDigits = (text) => {\n  const digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  return text.replace(/[^0-9]/g, '');\n};\n\n/*\n  removeNonLetters is A FuncTion That takeS STrIng anD RETurnS string witHout non letters.\n  >>> removeNonLetters('')\n  ''\n  >>> removeNonLetters(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeNonLetters('abcdef')\n  'bcdef'\n  >>> removeNonLetters('aaaaa')\n  ''\n  >>> removeNonLetters('aaBAA')\n  'BAA'\n  >>> removeNonLetters('zbcd')\n  'zbcd'\n  */\nconst removeNonLetters = (text) => {\n  const nonLetters = ['!', '.', ',', ';', ':', '?', '!', '.', ',', ';', ':', '?', '!'];\n  return text.replace(/[^a-zA-Z0-9!?.!,;:?]/g, '');\n};\n\n/*\n  removeNonLetters is A FuncTion That takeS STrIng anD RETURNS string witHout non letters.\n  >>> removeNonLetters('')\n  ''\n  >>> removeNonLetters(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeNonLetters('abcdef')\n  'bcdef'\n  >>> removeNonLetters('aaaaa')\n  ''\n  >>> removeNonLetters('aaBAA')\n  'BAA'\n  >>> removeNonLetters('zbcd')\n  'zbcd'\n  */\nconst removeNonLetters = (text) => {\n  const nonLetters = ['!', '.', ',', ';', ':', '?', '!', '.', ',', ';', ':', '?', '!'];\n  return text.replace(/[^a-zA-Z0-9!?.!,;:?]/g, '');\n};\n\n/*\n  removeNonLetters is A FuncTion That takeS STrIng anD RETURNS string witHout non letters.\n  >>> removeNonLetters('')\n  ''\n  >>> removeNonLetters(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeNonLetters('abcdef')\n  'bcdef'\n  >>> removeNonLetters('aaaaa')\n  ''\n  >>> removeNonLetters('aaBAA')\n  'BAA'\n  >>> removeNonLetters('zbcd')\n  'zbcd'\n  */\nconst removeNonLetters = (text) => {\n  const nonLetters = ['!', '.', ',', ';', ':', '?', '!', '.', ',', ';', ':', '?', '!'];\n  return text.replace(/[^a-zA-Z0-9!?.!,;:?]/g, '');\n};\n\nmodule.exports = {\n  removeVowels,\n  removePunctuation,\n  removeDigits,\n  removeNonLetters\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*RetURn trUe if All numbeRS in ThE list l are bELOW thrEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "/*RetURn trUe if All numbeRS in ThE list l are bELOW thrEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/*\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\n/*\n  >>> isEven(10)\n  true\n  >>> isEven(20)\n  false\n  */\nconst isOdd = (n) => {\n  return n % 2!== 0;\n};\n\n/*\n  >>> isOdd(10)\n  false\n  >>> isOdd(20)\n  true\n  */\nconst isPositive = (n) => {\n  return n > 0;\n};\n\n/*\n  >>> isPositive(10)\n  true\n  >>> isPositive(0)\n  false\n  */\nconst isNegative = (n) => {\n  return n < 0;\n};\n\n/*\n  >>> isNegative(10)\n  false\n  >>> isNegative(0)\n  true\n  */\nconst isZero = (n) => {\n  return n === 0;\n};\n\n/*\n  >>> isZero(10)\n  false\n  >>> isZero(0)\n  true\n  */\nconst isPositiveOrZero = (n) => {\n  return isPositive(n) || isZero(n);\n};\n\n/*\n  >>> isPositiveOrZero(10)\n  true\n  >>> isPositiveOrZero(0)\n  false\n  */\nconst isNegativeOrZero = (n) => {\n  return isNegative(n) || isZero(n);\n};\n\n/*\n  >>> isNegativeOrZero(10)\n  false\n  >>> isNegativeOrZero(0)\n  true\n  */\nconst isPositiveOrNegative = (n) => {\n  return isPositive(n) || isNegative(n);\n};\n\n/*\n  >>> isPositiveOrNegative(10)\n  true\n  >>> isPositiveOrNegative(0)\n  false\n  */\nconst isPositiveOrPositive = (n) => {\n  return isPositive(n) || isPositive(n);\n};\n\n/*\n  >>> isPositiveOrPositive(10)\n  true\n  >>> isPositiveOrPositive(0)\n  false\n  */\nconst isPositiveOrPositiveOrZero = (n) => {\n  return isPositive(n) || isPositiveOrZero(n);\n};\n\n/*\n  >>> isPositiveOrPositiveOrZero(10)\n  true\n  >>> isPositiveOrPositiveOrZero(0)\n  false\n  */\nconst isPositiveOrPositiveOrNegative = (n) => {\n  return isPositive(n) || isPositiveOrNegative(n);\n};\n\n/*\n  >>> isPositiveOrPositiveOrNegative(10)\n  true\n  >>> isPositiveOrPositiveOrNegative(0)\n  false\n  */\nconst isPositiveOrPositiveOrPositive = (n) => {\n  return isPositive(n) || isPositiveOrPositive(n);\n};\n\n/*\n  >>> isPositiveOrPositiveOrPositive(10)\n  true\n  >>> isPositiveOrPositiveOrPositive(0)\n  false\n  */\nconst isPositiveOrPositiveOrPositiveOrZero = (n) => {\n  return isPositive(n) || isPositiveOrPositiveOrZero(n);\n};\n\n/*\n  >>> isPositiveOrPositiveOrPositiveOrZero(10)\n  true\n  >>> isPositiveOrPositiveOrPositiveOrZero(0)\n  false\n  */\nconst isPositiveOrPositiveOrPositiveOrPositive = (n) => {\n  return isPositive(n) || isPositiveOrPositiveOrPositive(n);\n};\n\n/*\n  >>> isPositiveOrPositiveOrPositiveOrPositive(10)\n  true\n  >>> isPositiveOrPositiveOrPositiveOrPositive(0)\n  false\n  */\nconst isPositiveOrPositiveOrPositiveOrPositiveOrZero = (n) => {\n  return isPositive(n) || isPositiveOrPositiveOrPositiveOrZero(n);\n};\n\n/*\n  >>> isPositiveOrPositiveOrPositiveOrPositiveOrZero(10)\n  true\n  >>> isPositiveOrPositiveOrPositiveOrPositiveOrZero(0)\n  false\n  */\nconst isPositiveOrPositiveOrPositiveOrPositiveOrPositive = (n) => {\n  return isPositive(n) || isPositiveOrPositiveOrPositiveOrPositive(n);\n};\n\n/*\n  >>> isPositiveOrPositiveOrPositiveOrPositiveOrPositive(10)\n  true\n  >>> isPositiveOrPositiveOrPositiveOrPositiveOrPositive(0)\n  false\n  */\nconst isPositiveOrPositiveOrPositiveOrPositiveOrPositiveOrZero = (n) => {\n  return isPositive(n) || isPositiveOrPositiveOrPositiveOrPositiveOrZero(n);\n};\n\n/*\n  >>> isPositiveOrPositiveOrPositiveOrPositiveOrPositiveOrZero(10)\n  true\n  >>> isPositiveOrPositiveOrPositiveOrPositiveOrPositiveOrZero(0)\n  false\n  */\nconst isPositiveOrPositiveOrPositiveOrPositiveOrPositiveOrPositive = (n) => {\n  return isPositive(n) || isPositiveOrPositiveOrPositiveOrPositiveOrPositive(n);\n};\n\n/*\n  >>> isPositiveOrPositiveOrPositiveOrPos", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*RetURn n-th FiBonaCci numbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "/*RetURn n-th FiBonaCci numbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib15(n - 1) + fib15(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib16(n - 1) + fib16(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib17 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib17(n - 1) + fib17(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib18 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib18(n - 1) + fib18(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is A StriNg of \"<\" And \">\".\n  return false IF EvEry opENINg brAcket has a cOrresponding closiNG bRaCkEt.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is A StriNg of \"<\" And \">\".\n  return false IF EvEry opENINg brAcket has a cOrresponding closiNG bRaCkEt.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  if (brackets.length === 0) {\n    return false;\n  }\n\n  const lastBracket = brackets[brackets.length - 1];\n  const nextBracket = brackets[brackets.length - 2];\n\n  if (lastBracket === nextBracket) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n  * Checks if the given string is a valid expression.\n  *\n  * @param expression The string to check.\n  * @returns {boolean} True if the string is a valid expression, false otherwise.\n  */\nconst isValidExpression = (expression) => {\n  if (expression.length === 0) {\n    return false;\n  }\n\n  const brackets = getBrackets(expression);\n\n  if (correctBracketing(brackets)) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n  * Checks if the given string is a valid expression.\n  *\n  * @param expression The string to check.\n  * @returns {boolean} True if the string is a valid expression, false otherwise.\n  */\nconst isValidExpression2 = (expression) => {\n  if (expression.length === 0) {\n    return false;\n  }\n\n  const brackets = getBrackets(expression);\n\n  if (correctBracketing(brackets)) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n  * Checks if the given string is a valid expression.\n  *\n  * @param expression The string to check.\n  * @returns {boolean} True if the string is a valid expression, false otherwise.\n  */\nconst isValidExpression3 = (expression) => {\n  if (expression.length === 0) {\n    return false;\n  }\n\n  const brackets = getBrackets(expression);\n\n  if (correctBracketing(brackets)) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n  * Checks if the given string is a valid expression.\n  *\n  * @param expression The string to check.\n  * @returns {boolean} True if the string is a valid expression, false otherwise.\n  */\nconst isValidExpression4 = (expression) => {\n  if (expression.length === 0) {\n    return false;\n  }\n\n  const brackets = getBrackets(expression);\n\n  if (correctBracketing(brackets)) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n  * Checks if the given string is a valid expression.\n  *\n  * @param expression The string to check.\n  * @returns {boolean} True if the string is a valid expression, false otherwise.\n  */\nconst isValidExpression5 = (expression) => {\n  if (expression.length === 0) {\n    return false;\n  }\n\n  const brackets = getBrackets(expression);\n\n  if (correctBracketing(brackets)) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n  * Checks if the given string is a valid expression.\n  *\n  * @param expression The string to check.\n  * @returns {boolean} True if the string is a valid expression, false otherwise.\n  */\nconst isValidExpression6 = (expression) => {\n  if (expression.length === 0) {\n    return false;\n  }\n\n  const brackets = getBrackets(expression);\n\n  if (correctBracketing(brackets)) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n  * Checks if the given string is a valid expression.\n  *\n  * @param expression The string to check.\n  * @returns {boolean} True if the string is a valid expression, false otherwise.\n  */\nconst isValidExpression7 = (expression) => {\n  if (expression.length === 0) {\n    return false;\n  }\n\n  const brackets = getBrackets(expression);\n\n  if (correctBracketing(brackets)) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n  * Checks if the given string is a valid expression.\n  *\n  * @param expression The string to check.\n  * @returns {boolean} True if the string is a valid expression, false otherwise.\n  */\nconst isValidExpression8 = (expression) => {\n  if (expression.length === 0) {\n    return false;\n  }\n\n  const brackets = getBrackets(expression);\n\n  if (correctBracketing(brackets)) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n  * Checks if the given string is a valid expression.\n  *\n  * @param expression The string to check.\n  * @returns {boolean} True if the string is a valid expression, false otherwise.\n  */\nconst isValidExpression9 = (expression) => {\n  if (expression.length === 0) {\n    return false;\n  }\n\n  const brackets = getBrackets(expression);\n\n  if (correctBracketing(brackets)) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n  * Checks if the given string is a valid expression.\n  *\n  * @param expression The string to check.\n  * @returns {boolean} True if the string is a valid expression, false otherwise.\n  */\nconst isValidExpression10 = (expression) => {\n  if (expression.length === 0) {\n    return false;\n  }\n\n  const brackets = getBrackets(expression);\n\n  if (correctBracketing(brackets)) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n  * Checks if the given string is a valid expression.\n  *\n  * @param expression The string to check.\n  * @returns {boolean} True if the string is a valid expression, false otherwise.\n  */\nconst isValidExpression11 = (expression) => {\n  if (expression.length === 0)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n\n  const last = l[l.length - 1];\n  for (let i = l.length - 2; i >= 0; i--) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  if (l1Len === 0 || l2Len === 0) {\n    return [];\n  }\n  const l1Idx = 0;\n  const l2Idx = 0;\n  const commonIdx = 0;\n  while (l1Idx < l1Len && l2Idx < l2Len) {\n    if (l1[l1Idx] === l2[l2Idx]) {\n      commonIdx++;\n      l1Idx++;\n      l2Idx++;\n    } else if (l1[l1Idx] < l2[l2Idx]) {\n      l1Idx++;\n    } else {\n      l2Idx++;\n    }\n  }\n  return l1.slice(l1Idx, l1Len);\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*RetURn thE largest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "/*RetURn thE largest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n <= 1) {\n    return 0;\n  }\n  const factor = 2;\n  while (n % factor === 0) {\n    n /= factor;\n    factor++;\n  }\n  return factor;\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* InPUt to This Function IS A sTring REPReseNted multipLe groups for nested PArEnThEses sepARateD by sPaCeS.\n  foR eaCH of tHe GrOuP, oUTpUT thE dEEPesT LEvel of nesTiNG of PareNtHesEs.\n  e.G. (()()) HAS maximUm Two leVelS Of NeSTING whIlE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "/* InPUt to This Function IS A sTring REPReseNted multipLe groups for nested PArEnThEses sepARateD by sPaCeS.\n  foR eaCH of tHe GrOuP, oUTpUT thE dEEPesT LEvel of nesTiNG of PareNtHesEs.\n  e.G. (()()) HAS maximUm Two leVelS Of NeSTING whIlE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_arr = paren_string.split(' ');\n  const paren_string_arr_len = paren_string_arr.length;\n  const paren_string_arr_arr = [];\n  let paren_string_arr_arr_len = 0;\n  let paren_string_arr_arr_arr = [];\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr_arr_len = 0;\n  let paren_string_arr_arr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "/*sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.exports = sumToN;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is A StriNg of \"(\" And \")\".\n  return true iF EVeRy opeNING braCket has a coRresponding closinG BrAcKeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is A StriNg of \"(\" And \")\".\n  return true iF EVeRy opeNING braCket has a coRresponding closinG BrAcKeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketing = brackets.split(\"\");\n  const openBracketing = brackets.split(\"(\");\n  const closeBracketing = brackets.split(\")\");\n  const openCount = openBracketing.length;\n  const closeCount = closeBracketing.length;\n  const openIndex = 0;\n  const closeIndex = 0;\n  const openIndex2 = 0;\n  const closeIndex2 = 0;\n  const openIndex3 = 0;\n  const closeIndex3 = 0;\n  const openIndex4 = 0;\n  const closeIndex4 = 0;\n  const openIndex5 = 0;\n  const closeIndex5 = 0;\n  const openIndex6 = 0;\n  const closeIndex6 = 0;\n  const openIndex7 = 0;\n  const closeIndex7 = 0;\n  const openIndex8 = 0;\n  const closeIndex8 = 0;\n  const openIndex9 = 0;\n  const closeIndex9 = 0;\n  const openIndex10 = 0;\n  const closeIndex10 = 0;\n  const openIndex11 = 0;\n  const closeIndex11 = 0;\n  const openIndex12 = 0;\n  const closeIndex12 = 0;\n  const openIndex13 = 0;\n  const closeIndex13 = 0;\n  const openIndex14 = 0;\n  const closeIndex14 = 0;\n  const openIndex15 = 0;\n  const closeIndex15 = 0;\n  const openIndex16 = 0;\n  const closeIndex16 = 0;\n  const openIndex17 = 0;\n  const closeIndex17 = 0;\n  const openIndex18 = 0;\n  const closeIndex18 = 0;\n  const openIndex19 = 0;\n  const closeIndex19 = 0;\n  const openIndex20 = 0;\n  const closeIndex20 = 0;\n  const openIndex21 = 0;\n  const closeIndex21 = 0;\n  const openIndex22 = 0;\n  const closeIndex22 = 0;\n  const openIndex23 = 0;\n  const closeIndex23 = 0;\n  const openIndex24 = 0;\n  const closeIndex24 = 0;\n  const openIndex25 = 0;\n  const closeIndex25 = 0;\n  const openIndex26 = 0;\n  const closeIndex26 = 0;\n  const openIndex27 = 0;\n  const closeIndex27 = 0;\n  const openIndex28 = 0;\n  const closeIndex28 = 0;\n  const openIndex29 = 0;\n  const closeIndex29 = 0;\n  const openIndex30 = 0;\n  const closeIndex30 = 0;\n  const openIndex31 = 0;\n  const closeIndex31 = 0;\n  const openIndex32 = 0;\n  const closeIndex32 = 0;\n  const openIndex33 = 0;\n  const closeIndex33 = 0;\n  const openIndex34 = 0;\n  const closeIndex34 = 0;\n  const openIndex35 = 0;\n  const closeIndex35 = 0;\n  const openIndex36 = 0;\n  const closeIndex36 = 0;\n  const openIndex37 = 0;\n  const closeIndex37 = 0;\n  const openIndex38 = 0;\n  const closeIndex38 = 0;\n  const openIndex39 = 0;\n  const closeIndex39 = 0;\n  const openIndex40 = 0;\n  const closeIndex40 = 0;\n  const openIndex41 = 0;\n  const closeIndex41 = 0;\n  const openIndex42 = 0;\n  const closeIndex42 = 0;\n  const openIndex43 = 0;\n  const closeIndex43 = 0;\n  const openIndex44 = 0;\n  const closeIndex44 = 0;\n  const openIndex45 = 0;\n  const closeIndex45 = 0;\n  const openIndex46 = 0;\n  const closeIndex46 = 0;\n  const openIndex47 = 0;\n  const closeIndex47 = 0;\n  const openIndex48 = 0;\n  const closeIndex48 = 0;\n  const openIndex49 = 0;\n  const closeIndex49 = 0;\n  const openIndex50 = 0;\n  const closeIndex50 = 0;\n  const openIndex51 = 0;\n  const closeIndex51 = 0;\n  const openIndex52 = 0;\n  const closeIndex52 = 0;\n  const openIndex53 = 0;\n  const closeIndex53 = 0;\n  const openIndex54 = 0;\n  const closeIndex54 = 0;\n  const openIndex55 = 0;\n  const closeIndex55 = 0;\n  const openIndex56 = 0;\n  const closeIndex56 = 0;\n  const openIndex57 = 0;\n  const closeIndex57 = 0;\n  const openIndex58 = 0;\n  const closeIndex58 = 0;\n  const openIndex59 = 0;\n  const closeIndex59 = 0;\n  const openIndex60 = 0;\n  const closeIndex60 = 0;\n  const openIndex61 = 0;\n  const closeIndex61 = 0;\n  const openIndex62 = 0;\n  const closeIndex62 = 0;\n  const openIndex63 = 0;\n  const closeIndex63 = 0;\n  const openIndex64 = 0;\n  const closeIndex64 = 0;\n  const openIndex65 = 0;\n  const closeIndex65 = 0;\n  const openIndex66 = 0;\n  const closeIndex66 = 0;\n  const openIndex67 = 0;\n  const closeIndex67 = 0;\n  const openIndex68 = 0;\n  const closeIndex68 = 0;\n  const openIndex69 = 0;\n  const closeIndex69 = 0;\n  const openIndex70 = 0;\n  const closeIndex70 = 0;\n  const openIndex71 = 0;\n  const closeIndex71 = 0;\n  const openIndex72 = 0;\n  const closeIndex72 = 0;\n  const openIndex73 = 0;\n  const closeIndex73 = 0;\n  const openIndex74 = 0;\n  const closeIndex74 = 0;\n  const openIndex75 = 0;\n  const closeIndex75 = 0;\n  const openIndex76 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map(x => x * x);\n  const xs3 = xs2.map(x => x * x * x);\n  const xs4 = xs3.map(x => x * x * x * x);\n  const xs5 = xs4.map(x => x * x * x * x * x);\n  const xs6 = xs5.map(x => x * x * x * x * x * x);\n  const xs7 = xs6.map(x => x * x * x * x * x * x * x);\n  const xs8 = xs7.map(x => x * x * x * x * x * x * x * x);\n  const xs9 = xs8.map(x => x * x * x * x * x * x * x * x * x);\n  const xs10 = xs9.map(x => x * x * x * x * x * x * x * x * x * x);\n  const xs11 = xs10.map(x => x * x * x * x * x * x * x * x * x * x * x);\n  const xs12 = xs11.map(x => x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs13 = xs12.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs14 = xs13.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs15 = xs14.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs16 = xs15.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs17 = xs16.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs18 = xs17.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs19 = xs18.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs20 = xs19.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs21 = xs20.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs22 = xs21.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs23 = xs22.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs24 = xs23.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs25 = xs24.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs26 = xs25.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs27 = xs26.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs28 = xs27.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs29 = xs28.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs30 = xs29.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const xs31 = xs30.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x);\n  const x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "/*The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n/*\n  The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib2(n - 1) + fibfib2(n - 2) + fibfib2(n - 3);\n};\n\n/*\n  The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib3 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib3(n - 1) + fibfib3(n - 2) + fibfib3(n - 3);\n};\n\n/*\n  The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib4(n - 1) + fibfib4(n - 2) + fibfib4(n - 3);\n};\n\n/*\n  The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib5(n - 1) + fibfib5(n - 2) + fibfib5(n - 3);\n};\n\n/*\n  The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*WriTE a fuNctiOn vowelsCount which tAKEs A striNG REpreSenting\n  a woRd as input and returNS tHe NuMber of vowels in tHE strIng.\n  VOwElS in ThIs cASe arE 'a', 'E', 'i', 'O', 'u'. heRE, 'y' IS alSo A\n  VOweL, BUt only wheN iT Is aT the EnD of ThE GIVEn word.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "/*WriTE a fuNctiOn vowelsCount which tAKEs A striNG REpreSenting\n  a woRd as input and returNS tHe NuMber of vowels in tHE strIng.\n  VOwElS in ThIs cASe arE 'a', 'E', 'i', 'O', 'u'. heRE, 'y' IS alSo A\n  VOweL, BUt only wheN iT Is aT the EnD of ThE GIVEn word.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n    i++;\n  }\n  return vowels;\n};\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst isVowel = (s) => {\n  let vowels = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n    i++;\n  }\n  return vowels === 1;\n};\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst isVowelCount = (s) => {\n  let vowels = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n    i++;\n  }\n  return vowels === 2;\n};\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst isVowelCount2 = (s) => {\n  let vowels = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n    i++;\n  }\n  return vowels === 3;\n};\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst isVowelCount3 = (s) => {\n  let vowels = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n    i++;\n  }\n  return vowels === 4;\n};\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst isVowelCount4 = (s) => {\n  let vowels = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n    i++;\n  }\n  return vowels === 5;\n};\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst isVowelCount5 = (s) => {\n  let vowels = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n    i++;\n  }\n  return vowels === 6;\n};\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst isVowelCount6 = (s) => {\n  let vowels = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n    i++;\n  }\n  return vowels === 7;\n};\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst isVowelCount7 = (s) => {\n  let vowels = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n    i++;\n  }\n  return vowels === 8;\n};\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst isVowel", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let res = \"\";\n  let i = 0;\n  while (i < shift) {\n    res += x;\n    x = x << 1;\n    i++;\n  }\n  return res;\n};\n\nconst getDigit = (x, i) => {\n  return (x % 10) + \"0\";\n};\n\nconst getDigits = (x) => {\n  let res = \"\";\n  let i = 0;\n  while (i < x) {\n    res += getDigit(x, i);\n    i++;\n  }\n  return res;\n};\n\nconst getDigitsFromString = (str) => {\n  let res = \"\";\n  let i = 0;\n  while (i < str.length) {\n    res += getDigit(str, i);\n    i++;\n  }\n  return res;\n};\n\nconst getDigitsFromNumber = (x) => {\n  let res = \"\";\n  let i = 0;\n  while (i < x) {\n    res += getDigit(x, i);\n    i++;\n  }\n  return res;\n};\n\nconst getDigitsFromNumberWithShift = (x, shift) => {\n  let res = \"\";\n  let i = 0;\n  while (i < shift) {\n    res += getDigit(x, i);\n    x = x << 1;\n    i++;\n  }\n  return res;\n};\n\nconst getDigitsFromNumberWithShiftAndDigit = (x, shift, digit) => {\n  let res = \"\";\n  let i = 0;\n  while (i < shift) {\n    res += getDigit(x, i);\n    x = x << 1;\n    i++;\n  }\n  res += getDigit(x, i);\n  return res;\n};\n\nconst getDigitsFromNumberWithDigit = (x, digit) => {\n  let res = \"\";\n  let i = 0;\n  while (i < x) {\n    res += getDigit(x, i);\n    x = x << 1;\n    i++;\n  }\n  return res;\n};\n\nconst getDigitsFromNumberWithDigitAndShift = (x, digit, shift) => {\n  let res = \"\";\n  let i = 0;\n  while (i < shift) {\n    res += getDigit(x, i);\n    x = x << 1;\n    i++;\n  }\n  res += getDigit(x, i);\n  return res;\n};\n\nconst getDigitsFromNumberWithDigitAndShiftAndDigit = (x, digit, shift, digit2) => {\n  let res = \"\";\n  let i = 0;\n  while (i < shift) {\n    res += getDigit(x, i);\n    x = x << 1;\n    i++;\n  }\n  res += getDigit(x, i);\n  return res;\n};\n\nconst getDigitsFromNumberWithDigitAndShiftAndDigitAndDigit = (x, digit, shift, digit2, digit3) => {\n  let res = \"\";\n  let i = 0;\n  while (i < shift) {\n    res += getDigit(x, i);\n    x = x << 1;\n    i++;\n  }\n  res += getDigit(x, i);\n  return res;\n};\n\nconst getDigitsFromNumberWithDigitAndShiftAndDigitAndDigitAndDigit = (x, digit, shift, digit2, digit3, digit4) => {\n  let res = \"\";\n  let i = 0;\n  while (i < shift) {\n    res += getDigit(x, i);\n    x = x << 1;\n    i++;\n  }\n  res += getDigit(x, i);\n  return res;\n};\n\nconst getDigitsFromNumberWithDigitAndShiftAndDigitAndDigitAndDigitAndDigit = (x, digit, shift, digit2, digit3, digit4, digit5) => {\n  let res = \"\";\n  let i = 0;\n  while (i < shift) {\n    res += getDigit(x, i);\n    x = x << 1;\n    i++;\n  }\n  res += getDigit(x, i);\n  return res;\n};\n\nconst getDigitsFromNumberWithDigitAndShiftAndDigitAndDigitAndDigitAndDigitAndDigit = (x, digit, shift, digit2, digit3, digit4, digit5, digit6) => {\n  let res = \"\";\n  let i = 0;\n  while (i < shift) {\n    res += getDigit(x, i);\n    x = x << 1;\n    i++;\n  }\n  res += getDigit(x, i);\n  return res;\n};\n\nconst getDigitsFromNumberWithDigitAndShiftAndDigitAndDigitAndDigitAndDigitAndDigitAndDigit = (x, digit, shift, digit2, digit3, digit4, digit5, digit6, digit7) => {\n  let res = \"\";\n  let i = 0;\n  while (i < shift) {\n    res += getDigit(x, i);\n    x = x << 1;\n    i++;\n  }\n  res += getDigit(x, i);\n  return res;\n};\n\nconst getDigitsFromNumberWithDigitAndShiftAndDigitAndDigitAndDigitAndDigitAndDigitAndDigitAndDigit = (x, digit, shift, digit2, digit3, digit4, digit5, digit6, digit7, digit8) => {\n  let res = \"\";\n  let i = 0;\n  while (i < shift) {\n    res += getDigit(x, i);\n    x = x << 1;\n    i++;\n  }\n  res += getDigit(x, i);\n  return res;\n};\n\nconst getDigitsFromNumberWithDigitAnd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n// //////////////////////////////////////////////////////////////////////////////\n// / @brief main\n// //////////////////////////////////////////////////////////////////////////////\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In THis tAsk, yOu will be GIVeN a strING That Represents A number of apples anD OrAnGeS\n  that arE DistRibuTeD in a BAsKet OF fruIt ThIs BaSKeT ConTaINS\n  apPLEs, oranges, AnD ManGo frUiTs. GIvEN THE strinG tHat rePreSEnTs THE TOtaL nUmber of\n  The ORanges And ApPLes And aN iNTegEr That rePREsent The total Number oF ThE fruitS\n  in thE bASket return THE numbEr of The Mango fruItS in thE basket.\n  foR examBle:\n  fruitDistribution(\"5 appLes and 6 OrangeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apPleS aNd 1 oRanGeS\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples aND 3 oRAnGes\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applES anD 1 Oranges\",120) -> 120 - 100 - 1 = 19\n  */\ncOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "/*\n  In THis tAsk, yOu will be GIVeN a strING That Represents A number of apples anD OrAnGeS\n  that arE DistRibuTeD in a BAsKet OF fruIt ThIs BaSKeT ConTaINS\n  apPLEs, oranges, AnD ManGo frUiTs. GIvEN THE strinG tHat rePreSEnTs THE TOtaL nUmber of\n  The ORanges And ApPLes And aN iNTegEr That rePREsent The total Number oF ThE fruitS\n  in thE bASket return THE numbEr of The Mango fruItS in thE basket.\n  foR examBle:\n  fruitDistribution(\"5 appLes and 6 OrangeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apPleS aNd 1 oRanGeS\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples aND 3 oRAnGes\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applES anD 1 Oranges\",120) -> 120 - 100 - 1 = 19\n  */\ncOnst fruitDistribution = (s, n) => {\n  let sum = 0;\n  let i = 0;\n  while (i < n) {\n    sum += i;\n    i++;\n  }\n  let a = 0;\n  while (a < sum) {\n    let b = 0;\n    while (b < n) {\n      if (a + b < sum) {\n        a++;\n        b++;\n      } else {\n        break;\n      }\n    }\n    if (a + b == sum) {\n      return a + b;\n    }\n  }\n  return sum;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 orange\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 orange\", 120));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GiVEn an ArraY represeNTInG a braNCH Of a tRee that has Non-negative integeR NoDeS\n  yOur task IS to pluck oNe of ThE nODeS anD return It.\n  ThE pLuCkEd NOdE ShoUlD BE thE NOde with thE sMAllEst eVeN vaLuE.\n  iF MUltiplE nOdes wIth THe SaME SMAllEsT even vaLue ARe founD return thE nODe tHat hAs SMalLeSt indeX.\n\n  tHe pluCked node Should bE ReTurned in A list, [ smAlESt_vaLUE, its iNdex ],\n  if tHere are nO eVen Values or tHe givEn arraY is empTy, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "/*\n  \"GiVEn an ArraY represeNTInG a braNCH Of a tRee that has Non-negative integeR NoDeS\n  yOur task IS to pluck oNe of ThE nODeS anD return It.\n  ThE pLuCkEd NOdE ShoUlD BE thE NOde with thE sMAllEst eVeN vaLuE.\n  iF MUltiplE nOdes wIth THe SaME SMAllEsT even vaLue ARe founD return thE nODe tHat hAs SMalLeSt indeX.\n\n  tHe pluCked node Should bE ReTurned in A list, [ smAlESt_vaLUE, its iNdex ],\n  if tHere are nO eVen Values or tHe givEn arraY is empTy, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      res.push(arr[i]);\n    }\n  }\n  return res;\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  YoU Are gIven A non-emptY list OF pOsitiVE INtegErs. Return tHe greatest integer THaT iS gReater tHAn\n  zeRo, anD hAs A FrEquENcy gReAtEr ThAN oR EquAl TO The VALue of the iNtEGer ItseLf.\n  the FrEQUENcy of aN iNtegeR is THe NuMBER Of tImEs it appEarS in The list.\n  If nO suCh A ValUe exIsT, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "/*\n  YoU Are gIven A non-emptY list OF pOsitiVE INtegErs. Return tHe greatest integer THaT iS gReater tHAn\n  zeRo, anD hAs A FrEquENcy gReAtEr ThAN oR EquAl TO The VALue of the iNtEGer ItseLf.\n  the FrEQUENcy of aN iNtegeR is THe NuMBER Of tImEs it appEarS in The list.\n  If nO suCh A ValUe exIsT, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  if (lst.length === 0) {\n    return -1\n  }\n  const max = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  return max\n}\n\nmodule.exports = search\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Returns a list of strings that are contained in a given string\n * @param {string} string\n * @returns {string[]}\n */\nconst getSubstrings = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  if (string.length === 1) {\n    return [string];\n  }\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i])!== -1) {\n      substrings.push(string[i]);\n    }\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of strings that are contained in a given string\n * @param {string} string\n * @returns {string[]}\n */\nconst getSubstrings2 = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  if (string.length === 1) {\n    return [string];\n  }\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i])!== -1) {\n      substrings.push(string[i]);\n    }\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of strings that are contained in a given string\n * @param {string} string\n * @returns {string[]}\n */\nconst getSubstrings3 = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  if (string.length === 1) {\n    return [string];\n  }\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i])!== -1) {\n      substrings.push(string[i]);\n    }\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of strings that are contained in a given string\n * @param {string} string\n * @returns {string[]}\n */\nconst getSubstrings4 = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  if (string.length === 1) {\n    return [string];\n  }\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i])!== -1) {\n      substrings.push(string[i]);\n    }\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of strings that are contained in a given string\n * @param {string} string\n * @returns {string[]}\n */\nconst getSubstrings5 = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  if (string.length === 1) {\n    return [string];\n  }\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i])!== -1) {\n      substrings.push(string[i]);\n    }\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of strings that are contained in a given string\n * @param {string} string\n * @returns {string[]}\n */\nconst getSubstrings6 = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  if (string.length === 1) {\n    return [string];\n  }\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i])!== -1) {\n      substrings.push(string[i]);\n    }\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of strings that are contained in a given string\n * @param {string} string\n * @returns {string[]}\n */\nconst getSubstrings7 = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  if (string.length === 1) {\n    return [string];\n  }\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i])!== -1) {\n      substrings.push(string[i]);\n    }\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of strings that are contained in a given string\n * @param {string} string\n * @returns {string[]}\n */\nconst getSubstrings8 = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  if (string.length === 1) {\n    return [string];\n  }\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i])!== -1) {\n      substrings.push(string[i]);\n    }\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of strings that are contained in a given string\n * @param {string} string\n * @returns {string[]}\n */\nconst getSubstrings9 = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  if (string.length === 1) {\n    return [string];\n  }\n  const", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  let max = lst[0];\n  let min = lst[0];\n  let maxIndex = 0;\n  let minIndex = 0;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n\n  let temp = lst[maxIndex];\n  lst[maxIndex] = lst[minIndex];\n  lst[minIndex] = temp;\n\n  return strangeSortList(lst);\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN the area of\n  the triangle ROuNdEd To 2 decimAL poiNts iF tHe THrEe sIDes fOrM a vAlId TRiANglE.\n  OTHErwISE return -1\n  Three sidEs MAke a ValiD tRiaNgLE WHEn the sUm Of any Two SIdEs IS GREatEr\n  Than the ThiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN the area of\n  the triangle ROuNdEd To 2 decimAL poiNts iF tHe THrEe sIDes fOrM a vAlId TRiANglE.\n  OTHErwISE return -1\n  Three sidEs MAke a ValiD tRiaNgLE WHEn the sUm Of any Two SIdEs IS GREatEr\n  Than the ThiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  return Math.abs(a * b + b * c + c * a) / 2\n}\n\nmodule.exports = triangleArea\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  WrITe a fUnctIon that rETUrNs truE IF The oBject q will fLy, and false otherwiSE.\n  THe ObJect q wilL Fly iF it's BaLaNCeD (it IS a paLiNdRoMiC list) AnD The SuM OF itS ELements is LeSS thAn or EqUal ThE MAXImum poSsIble wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "/*\n  WrITe a fUnctIon that rETUrNs truE IF The oBject q will fLy, and false otherwiSE.\n  THe ObJect q wilL Fly iF it's BaLaNCeD (it IS a paLiNdRoMiC list) AnD The SuM OF itS ELements is LeSS thAn or EqUal ThE MAXImum poSsIble wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return true;\n  }\n\n  const max = q.reduce((a, b) => Math.max(a, b), 0);\n  const sum = q.reduce((a, b) => a + b, 0);\n\n  return sum <= w && q.length <= max;\n};\n\nmodule.exports = willItFly;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  GiVEn an ArraY arr of integERS, fInd thE MINimuM number of eLements that\n  need to BE cHaNgEd to makE The aRray PaLiNDrOmiC. a palInDrOmIc ARrAY is An ARRay THAt\n  is read tHe SAme BackWaRds AnD FORWards. IN oNe chaNge, YOu CaN CHANge OnE elemenT to ANy otheR elEmENt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn an ArraY arr of integERS, fInd thE MINimuM number of eLements that\n  need to BE cHaNgEd to makE The aRray PaLiNDrOmiC. a palInDrOmIc ARrAY is An ARRay THAt\n  is read tHe SAme BackWaRds AnD FORWards. IN oNe chaNge, YOu CaN CHANge OnE elemenT to ANy otheR elEmENt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  const arrLength = arr.length;\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arrLength; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return arr[minIndex];\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  WrITe a fUnctIon that aCCEpTs two LISTs of Strings and Returns the list that has\n  TOtAl NuMber of cHArs in tHe alL sTrINgS of THe list leSs ThAn ThE OtHEr list.\n\n  iF tHE Two LISts have thE sAMe nUmbeR oF chArS, return THE First list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "/*\n  WrITe a fUnctIon that aCCEpTs two LISTs of Strings and Returns the list that has\n  TOtAl NuMber of cHArs in tHe alL sTrINgS of THe list leSs ThAn ThE OtHEr list.\n\n  iF tHE Two LISts have thE sAMe nUmbeR oF chArS, return THE First list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalMatch = [];\n  let i = 0;\n  while (i < lst1.length && i < lst2.length) {\n    if (lst1[i] === lst2[i]) {\n      totalMatch.push(lst1[i]);\n    }\n    i++;\n  }\n  return totalMatch;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LeSS tHEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LeSS tHEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    return false;\n  }\n  if (a % 5 === 0) {\n    return false;\n  }\n  if (a % 7 === 0) {\n    return false;\n  }\n  if (a % 11 === 0) {\n    return false;\n  }\n  if (a % 13 === 0) {\n    return false;\n  }\n  if (a % 17 === 0) {\n    return false;\n  }\n  if (a % 19 === 0) {\n    return false;\n  }\n  if (a % 23 === 0) {\n    return false;\n  }\n  if (a % 29 === 0) {\n    return false;\n  }\n  if (a % 31 === 0) {\n    return false;\n  }\n  if (a % 37 === 0) {\n    return false;\n  }\n  if (a % 41 === 0) {\n    return false;\n  }\n  if (a % 43 === 0) {\n    return false;\n  }\n  if (a % 47 === 0) {\n    return false;\n  }\n  if (a % 53 === 0) {\n    return false;\n  }\n  if (a % 59 === 0) {\n    return false;\n  }\n  if (a % 61 === 0) {\n    return false;\n  }\n  if (a % 67 === 0) {\n    return false;\n  }\n  if (a % 71 === 0) {\n    return false;\n  }\n  if (a % 73 === 0) {\n    return false;\n  }\n  if (a % 79 === 0) {\n    return false;\n  }\n  if (a % 83 === 0) {\n    return false;\n  }\n  if (a % 89 === 0) {\n    return false;\n  }\n  if (a % 97 === 0) {\n    return false;\n  }\n  if (a % 101 === 0) {\n    return false;\n  }\n  if (a % 103 === 0) {\n    return false;\n  }\n  if (a % 107 === 0) {\n    return false;\n  }\n  if (a % 109 === 0) {\n    return false;\n  }\n  if (a % 113 === 0) {\n    return false;\n  }\n  if (a % 127 === 0) {\n    return false;\n  }\n  if (a % 131 === 0) {\n    return false;\n  }\n  if (a % 137 === 0) {\n    return false;\n  }\n  if (a % 139 === 0) {\n    return false;\n  }\n  if (a % 149 === 0) {\n    return false;\n  }\n  if (a % 151 === 0) {\n    return false;\n  }\n  if (a % 157 === 0) {\n    return false;\n  }\n  if (a % 163 === 0) {\n    return false;\n  }\n  if (a % 167 === 0) {\n    return false;\n  }\n  if (a % 173 === 0) {\n    return false;\n  }\n  if (a % 179 === 0) {\n    return false;\n  }\n  if (a % 181 === 0) {\n    return false;\n  }\n  if (a % 191 === 0) {\n    return false;\n  }\n  if (a % 193 === 0) {\n    return false;\n  }\n  if (a % 197 === 0) {\n    return false;\n  }\n  if (a % 199 === 0) {\n    return false;\n  }\n  if (a % 211 === 0) {\n    return false;\n  }\n  if (a % 223 === 0) {\n    return false;\n  }\n  if (a % 227 === 0) {\n    return false;\n  }\n  if (a % 229 === 0) {\n    return false;\n  }\n  if (a % 233 === 0) {\n    return false;\n  }\n  if (a % 239 === 0) {\n    return false;\n  }\n  if (a % 241 === 0) {\n    return false;\n  }\n  if (a % 251 === 0) {\n    return false;\n  }\n  if (a % 257 === 0) {\n    return false;\n  }\n  if (a % 263 === 0) {\n    return false;\n  }\n  if (a % 269 === 0) {\n    return false;\n  }\n  if (a % 271 === 0) {\n    return false;\n  }\n  if (a % 277 === 0) {\n    return false;\n  }\n  if (a % 281 === 0) {\n    return false;\n  }\n  if (a % 283 === 0) {\n    return false;\n  }\n  if (a % 293 === 0) {\n    return false;\n  }\n  if (a % 307 === 0) {\n    return false;\n  }\n  if (a % 311 === 0) {\n    return false;\n  }\n  if (a % 313 === 0) {\n    return false;\n  }\n  if (a % 317 === 0) {\n    return false;\n  }\n  if (a % 331 === 0) {\n    return false;\n  }\n  if (a % 337 === 0) {\n    return false;\n  }\n  if (a % 347 === 0) {\n    return false;\n  }\n  if (a % 349 === 0) {\n    return false;\n  }\n  if (a % 353 === 0) {\n    return false;\n  }\n  if (a % 359 === 0) {\n    return false;\n  }\n  if (a % 367 === 0) {\n    return false;\n  }\n  if (a % 373 === 0) {\n    return false;\n  }\n  if (a % 379 === 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*YouR Task Is to Write a fuNCTiOn thaT RETurnS true if a nuMber x is a simple\n  power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "/*YouR Task Is to Write a fuNCTiOn thaT RETurnS true if a nuMber x is a simple\n  power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = isSimplePower;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return (a >= 0 && a < 100);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  return (a >= 0 && a < 100);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  return (a >= 0 && a < 100);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  return (a >= 0 && a < 100);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  return (a >= 0 && a < 100);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  return (a >= 0 && a < 100);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  return (a >= 0 && a < 100);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  return (a >= 0 && a < 100);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube9 = (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You HAve bEen tAsked to wRITe A funcTION thaT receives\n  a Hexadecimal number AS a StRiNg and coUNts tHe nuMbEr OF hExaDEcimAl\n  DiGiTs THaT Are primes (PrIME nuMBEr=== or a primE=== iS A naTuraL nUmbEr\n  GREATer thaN 1 tHat is Not A PrOdUCT OF twO sMaller nAtuRAl numbErs).\n  heXAdeCimaL dIGitS aRe 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  prime Numbers aRe 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you HAvE to detErmInE A numBER of thE folLowIng digitS: 2=== 3=== 5=== 7===\n  B (=DecImal 11)=== D (=deciMal 13).\n  NoTe: you mAy assuMe the iNpuT is AlWayS coRrECt or empTY sTRiNg===\n  and syMBolS a===B===C===D===E===F arE alwaYs UppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "/*You HAve bEen tAsked to wRITe A funcTION thaT receives\n  a Hexadecimal number AS a StRiNg and coUNts tHe nuMbEr OF hExaDEcimAl\n  DiGiTs THaT Are primes (PrIME nuMBEr=== or a primE=== iS A naTuraL nUmbEr\n  GREATer thaN 1 tHat is Not A PrOdUCT OF twO sMaller nAtuRAl numbErs).\n  heXAdeCimaL dIGitS aRe 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  prime Numbers aRe 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you HAvE to detErmInE A numBER of thE folLowIng digitS: 2=== 3=== 5=== 7===\n  B (=DecImal 11)=== D (=deciMal 13).\n  NoTe: you mAy assuMe the iNpuT is AlWayS coRrECt or empTY sTRiNg===\n  and syMBolS a===B===C===D===E===F arE alwaYs UppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hex = num.toString(16);\n  let hexLength = hex.length;\n  let result = 0;\n  for (let i = 0; i < hexLength; i++) {\n    result += parseInt(hex[i], 16);\n  }\n  return result;\n};\n\nconst prime = (num) => {\n  let prime = true;\n  let i = 2;\n  while (prime) {\n    if (num % i === 0) {\n      prime = false;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst isPrime = (num) => {\n  let prime = true;\n  let i = 2;\n  while (prime) {\n    if (num % i === 0) {\n      prime = false;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst isPrime2 = (num) => {\n  let prime = true;\n  let i = 2;\n  while (prime) {\n    if (num % i === 0) {\n      prime = false;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst isPrime3 = (num) => {\n  let prime = true;\n  let i = 2;\n  while (prime) {\n    if (num % i === 0) {\n      prime = false;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst isPrime4 = (num) => {\n  let prime = true;\n  let i = 2;\n  while (prime) {\n    if (num % i === 0) {\n      prime = false;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst isPrime5 = (num) => {\n  let prime = true;\n  let i = 2;\n  while (prime) {\n    if (num % i === 0) {\n      prime = false;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst isPrime6 = (num) => {\n  let prime = true;\n  let i = 2;\n  while (prime) {\n    if (num % i === 0) {\n      prime = false;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst isPrime7 = (num) => {\n  let prime = true;\n  let i = 2;\n  while (prime) {\n    if (num % i === 0) {\n      prime = false;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst isPrime8 = (num) => {\n  let prime = true;\n  let i = 2;\n  while (prime) {\n    if (num % i === 0) {\n      prime = false;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst isPrime9 = (num) => {\n  let prime = true;\n  let i = 2;\n  while (prime) {\n    if (num % i === 0) {\n      prime = false;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst isPrime10 = (num) => {\n  let prime = true;\n  let i = 2;\n  while (prime) {\n    if (num % i === 0) {\n      prime = false;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst isPrime11 = (num) => {\n  let prime = true;\n  let i = 2;\n  while (prime) {\n    if (num % i === 0) {\n      prime = false;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst isPrime12 = (num) => {\n  let prime = true;\n  let i = 2;\n  while (prime) {\n    if (num % i === 0) {\n      prime = false;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst isPrime13 = (num) => {\n  let prime = true;\n  let i = 2;\n  while (prime) {\n    if (num % i === 0) {\n      prime = false;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst isPrime14 = (num) => {\n  let prime = true;\n  let i = 2;\n  while (prime) {\n    if (num % i === 0) {\n      prime = false;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst isPrime15 = (num) => {\n  let prime = true;\n  let i = 2;\n  while (prime) {\n    if (num % i === 0) {\n      prime = false;\n    }\n    i++;\n  }\n  return prime", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You WIll bE givEn a numbeR in decimal FOrM and yOUR Task Is to converT it to\n  binary format. tHe FuNcTion shoULd return a sTrinG, wItH EaCh cHAracTeR rEpReSEnTIng A bINAry\n  NUMber. Each cHaRActEr in thE sTriNg WILL Be '0' or '1'.\n\n  ThErE will Be aN ExTrA COUPle Of CharactErs 'DB' at the BegInNIng And aT tHE enD oF the stRINg.\n  The Extra chaRacters ARe There tO heLp WIth tHE FormaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "/*You WIll bE givEn a numbeR in decimal FOrM and yOUR Task Is to converT it to\n  binary format. tHe FuNcTion shoULd return a sTrinG, wItH EaCh cHAracTeR rEpReSEnTIng A bINAry\n  NUMber. Each cHaRActEr in thE sTriNg WILL Be '0' or '1'.\n\n  ThErE will Be aN ExTrA COUPle Of CharactErs 'DB' at the BegInNIng And aT tHE enD oF the stRINg.\n  The Extra chaRacters ARe There tO heLp WIth tHE FormaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binaryString = \"\";\n  let binaryIndex = 0;\n  let decimalIndex = 0;\n  let decimalDigit = 0;\n  let decimalDigitIndex = 0;\n  let decimalDigitValue = 0;\n  let decimalDigitValueIndex = 0;\n  let decimalDigitValueLength = 0;\n  let decimalDigitValueLengthIndex = 0;\n  let decimalDigitValueLengthLength = 0;\n  let decimalDigitValueLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLength = 0;\n  let decimalDigitValueLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLength = 0;\n  let decimalDigitValueLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLength = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  let decimalDigitValueLengthLengthLengthLengthLengthLengthLengthLengthLengthLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= int;\n  }\n  return [sum, prod];\n};\n\nmodule.exports = sumProduct;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "/*You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) {\n    return false;\n  }\n\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i)\n  }\n\n  return sum % 10 === 0\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It iS The lAst wEek of the SEMeSter aND THe teAcher has to Give the grades\n  to students. tHe TeAcHer has bEEn maKing HeR oWN aLgoRIthm FoR gRaDiNG.\n  THE onLy PROblEM Is, she has lOsT The Code ShE usEd FOR GRading.\n  shE has gIveN YoU a list OF gpas fOr Some stuDenTS and yoU haVe TO wrIte\n  a FuNCtiOn That caN OUtput A list of letteR grades using tHE fOllowiNg tAbLE:\n           GPA       |    lETter gRade\n            4.0                a+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "/*It iS The lAst wEek of the SEMeSter aND THe teAcher has to Give the grades\n  to students. tHe TeAcHer has bEEn maKing HeR oWN aLgoRIthm FoR gRaDiNG.\n  THE onLy PROblEM Is, she has lOsT The Code ShE usEd FOR GRading.\n  shE has gIveN YoU a list OF gpas fOr Some stuDenTS and yoU haVe TO wrIte\n  a FuNCtiOn That caN OUtput A list of letteR grades using tHE fOllowiNg tAbLE:\n           GPA       |    lETter gRade\n            4.0                a+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradeList = [];\n  grades.forEach((grade) => {\n    if (grade >= 3.7) {\n      gradeList.push('A+');\n    } else if (grade >= 3.3) {\n      gradeList.push('A');\n    } else if (grade >= 3.0) {\n      gradeList.push('A-');\n    } else if (grade >= 2.7) {\n      gradeList.push('B');\n    } else if (grade >= 2.3) {\n      gradeList.push('B-');\n    } else if (grade >= 2.0) {\n      gradeList.push('C+');\n    } else if (grade >= 1.7) {\n      gradeList.push('C');\n    } else if (grade >= 1.3) {\n      gradeList.push('C-');\n    } else if (grade >= 1.0) {\n      gradeList.push('D+');\n    } else if (grade >= 0.7) {\n      gradeList.push('D');\n    } else if (grade >= 0.0) {\n      gradeList.push('D-');\n    } else {\n      gradeList.push('E');\n    }\n  });\n  return gradeList;\n};\n\nexport default numericalLetterGrade;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*WriTE a fuNctiOn that taKES a string And reTURNs trUe if the string\n  lenGth is a prime number OR fAlSe OtherwiSE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "/*WriTE a fuNctiOn that taKES a string And reTURNs trUe if the string\n  lenGth is a prime number OR fAlSe OtherwiSE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const len = string.length;\n  let isPrime = true;\n  for (let i = 2; i < len; i++) {\n    if (len % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds2 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds4 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds6 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds8 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds9 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds10 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds11 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds12 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds13 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a pOsitIve integER n,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*GivEN a poSitiVe integeR N, return THe Total SUM Of itS digits in binAry.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*GivEN a poSitiVe integeR N, return THe Total SUM Of itS digits in binAry.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(2, i);\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst add2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst add4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst add6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst add8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add9 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst add10 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add11 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst add12 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add13 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      add([4,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle2 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle3 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle4 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle5 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle6 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle7 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle8 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle9 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle10 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle11 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle12 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle13 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle14 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle15 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle16 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle17 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle18 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle19 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle20 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle21 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle22 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle23 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle24 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle25 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle26 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle27 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle28 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle29 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle30 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle31 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle32 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle33 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle34 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle35 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle36 = (s) => {\n  const result = s.split('').reverse().join('');\n  return result;\n};\n\nconst antiShuffle", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  YoU Are gIven A 2 dimensiONAl Data, aS A NEsteD lists,\n  whicH is similar to matriX, HoWeVeR, unlike MAtriCes,\n  eAcH rOW mAy cONtaiN a DiFfErENt NUmbEr OF ColUMNs.\n  Given lst, anD iNTegEr x, fiNd IntEgERS x in THe list,\n  and return list oF tUples, [(X1, y1), (x2, Y2) ...] SuCh THAT\n  EacH tuple iS a coordInaTE - (row, coLumNs), STarTing WiTH 0.\n  SoRt CoordiNATes inItially bY rows in asCEnDing orDer.\n  alSO, sorT COordiNateS of The row by CoLumNs in descendIng orDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "/*\n  YoU Are gIven A 2 dimensiONAl Data, aS A NEsteD lists,\n  whicH is similar to matriX, HoWeVeR, unlike MAtriCes,\n  eAcH rOW mAy cONtaiN a DiFfErENt NUmbEr OF ColUMNs.\n  Given lst, anD iNTegEr x, fiNd IntEgERS x in THe list,\n  and return list oF tUples, [(X1, y1), (x2, Y2)...] SuCh THAT\n  EacH tuple iS a coordInaTE - (row, coLumNs), STarTing WiTH 0.\n  SoRt CoordiNATes inItially bY rows in asCEnDing orDer.\n  alSO, sorT COordiNateS of The row by CoLumNs in descendIng orDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (x >= lst.length) return [];\n  let ret = [];\n  for (let i = 0; i < lst[x].length; i++) {\n    ret.push([lst[x][i], i]);\n  }\n  return ret;\n};\n\nconst getRow2 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (x >= lst.length) return [];\n  let ret = [];\n  for (let i = 0; i < lst[x].length; i++) {\n    ret.push([lst[x][i], i]);\n  }\n  return ret;\n};\n\nconst getRow3 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (x >= lst.length) return [];\n  let ret = [];\n  for (let i = 0; i < lst[x].length; i++) {\n    ret.push([lst[x][i], i]);\n  }\n  return ret;\n};\n\nconst getRow4 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (x >= lst.length) return [];\n  let ret = [];\n  for (let i = 0; i < lst[x].length; i++) {\n    ret.push([lst[x][i], i]);\n  }\n  return ret;\n};\n\nconst getRow5 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (x >= lst.length) return [];\n  let ret = [];\n  for (let i = 0; i < lst[x].length; i++) {\n    ret.push([lst[x][i], i]);\n  }\n  return ret;\n};\n\nconst getRow6 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (x >= lst.length) return [];\n  let ret = [];\n  for (let i = 0; i < lst[x].length; i++) {\n    ret.push([lst[x][i], i]);\n  }\n  return ret;\n};\n\nconst getRow7 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (x >= lst.length) return [];\n  let ret = [];\n  for (let i = 0; i < lst[x].length; i++) {\n    ret.push([lst[x][i], i]);\n  }\n  return ret;\n};\n\nconst getRow8 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (x >= lst.length) return [];\n  let ret = [];\n  for (let i = 0; i < lst[x].length; i++) {\n    ret.push([lst[x][i], i]);\n  }\n  return ret;\n};\n\nconst getRow9 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (x >= lst.length) return [];\n  let ret = [];\n  for (let i = 0; i < lst[x].length; i++) {\n    ret.push([lst[x][i], i]);\n  }\n  return ret;\n};\n\nconst getRow10 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (x >= lst.length) return [];\n  let ret = [];\n  for (let i = 0; i < lst[x].length; i++) {\n    ret.push([lst[x][i], i]);\n  }\n  return ret;\n};\n\nconst getRow11 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (x >= lst.length) return [];\n  let ret = [];\n  for (let i = 0; i < lst[x].length; i++) {\n    ret.push([lst[x][i], i]);\n  }\n  return ret;\n};\n\nconst getRow12 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (x >= lst.length) return [];\n  let ret = [];\n  for (let i = 0; i < lst[x].length; i++) {\n    ret.push([lst[x][i], i]);\n  }\n  return ret;\n};\n\nconst getRow13 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (x >= lst.length) return [];\n  let ret = [];\n  for (let i = 0; i < lst[x].length; i++) {\n    ret.push([lst[x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  GiVEn an array Of noN-negativE INtEgers, return A COPy of The given array afTer sorting,\n  you will SOrT tHe Given array in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn an array Of noN-negativE INtEgers, return A COPy of The given array afTer sorting,\n  you will SOrT tHe Given array in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return array;\n  }\n  let index = 0;\n  let temp = array[0];\n  let sorted = [];\n  while (index < array.length) {\n    let current = array[index];\n    let next = array[index + 1];\n    if (current === next) {\n      index++;\n      continue;\n    }\n    if (current > next) {\n      sorted.push(temp);\n      temp = next;\n      index++;\n    } else {\n      sorted.push(current);\n    }\n  }\n  sorted.push(temp);\n  return sorted;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*CreATe a fUnctIon encrypt that tAKEs A striNG AS an aRgument and\n  Returns a string encRYpTeD wIth the aLPhabEt beInG rOTaTed. \n  tHe alPhAbEt ShOUlD Be rOtATEd in a MANner such tHaT The LettErS \n  shIfT DOWN by two MuLtiplIed TO tWo PLACEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "/*CreATe a fUnctIon encrypt that tAKEs A striNG AS an aRgument and\n  Returns a string encRYpTeD wIth the aLPhabEt beInG rOTaTed. \n  tHe alPhAbEt ShOUlD Be rOtATEd in a MANner such tHaT The LettErS \n  shIfT DOWN by two MuLtiplIed TO tWo PLACEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s1 = 0;\n  let s2 = 0;\n  let s3 = 0;\n  let s4 = 0;\n  let s5 = 0;\n  let s6 = 0;\n  let s7 = 0;\n  let s8 = 0;\n  let s9 = 0;\n  let s10 = 0;\n  let s11 = 0;\n  let s12 = 0;\n  let s13 = 0;\n  let s14 = 0;\n  let s15 = 0;\n  let s16 = 0;\n  let s17 = 0;\n  let s18 = 0;\n  let s19 = 0;\n  let s20 = 0;\n  let s21 = 0;\n  let s22 = 0;\n  let s23 = 0;\n  let s24 = 0;\n  let s25 = 0;\n  let s26 = 0;\n  let s27 = 0;\n  let s28 = 0;\n  let s29 = 0;\n  let s30 = 0;\n  let s31 = 0;\n  let s32 = 0;\n  let s33 = 0;\n  let s34 = 0;\n  let s35 = 0;\n  let s36 = 0;\n  let s37 = 0;\n  let s38 = 0;\n  let s39 = 0;\n  let s40 = 0;\n  let s41 = 0;\n  let s42 = 0;\n  let s43 = 0;\n  let s44 = 0;\n  let s45 = 0;\n  let s46 = 0;\n  let s47 = 0;\n  let s48 = 0;\n  let s49 = 0;\n  let s50 = 0;\n  let s51 = 0;\n  let s52 = 0;\n  let s53 = 0;\n  let s54 = 0;\n  let s55 = 0;\n  let s56 = 0;\n  let s57 = 0;\n  let s58 = 0;\n  let s59 = 0;\n  let s60 = 0;\n  let s61 = 0;\n  let s62 = 0;\n  let s63 = 0;\n  let s64 = 0;\n  let s65 = 0;\n  let s66 = 0;\n  let s67 = 0;\n  let s68 = 0;\n  let s69 = 0;\n  let s70 = 0;\n  let s71 = 0;\n  let s72 = 0;\n  let s73 = 0;\n  let s74 = 0;\n  let s75 = 0;\n  let s76 = 0;\n  let s77 = 0;\n  let s78 = 0;\n  let s79 = 0;\n  let s80 = 0;\n  let s81 = 0;\n  let s82 = 0;\n  let s83 = 0;\n  let s84 = 0;\n  let s85 = 0;\n  let s86 = 0;\n  let s87 = 0;\n  let s88 = 0;\n  let s89 = 0;\n  let s90 = 0;\n  let s91 = 0;\n  let s92 = 0;\n  let s93 = 0;\n  let s94 = 0;\n  let s95 = 0;\n  let s96 = 0;\n  let s97 = 0;\n  let s98 = 0;\n  let s99 = 0;\n  let s100 = 0;\n  let s101 = 0;\n  let s102 = 0;\n  let s103 = 0;\n  let s104 = 0;\n  let s105 = 0;\n  let s106 = 0;\n  let s107 = 0;\n  let s108 = 0;\n  let s109 = 0;\n  let s110 = 0;\n  let s111 = 0;\n  let s112 = 0;\n  let s113 = 0;\n  let s114 = 0;\n  let s115 = 0;\n  let s116 = 0;\n  let s117 = 0;\n  let s118 = 0;\n  let s119 = 0;\n  let s120 = 0;\n  let s121 = 0;\n  let s122 = 0;\n  let s123 = 0;\n  let s124 = 0;\n  let s125 = 0;\n  let s126 = 0;\n  let s127 = 0;\n  let s128 = 0;\n  let s129 = 0;\n  let s130 = 0;\n  let s131 = 0;\n  let s132 = 0;\n  let s133 = 0;\n  let s134 = 0;\n  let s135 = 0;\n  let s136 = 0;\n  let s137 = 0;\n  let s138 = 0;\n  let s139 = 0;\n  let s140 = 0;\n  let s141 = 0;\n  let s142 = 0;\n  let s143 = 0;\n  let s144 = 0;\n  let s145 = 0;\n  let s146 = 0;\n  let s147 = 0;\n  let s148 = 0;\n  let s149 = 0;\n  let s150 = 0;\n  let s151 = 0;\n  let s152 = 0;\n  let s153 = 0;\n  let s154 = 0;\n  let s155 = 0;\n  let s156 = 0;\n  let s157 = 0;\n  let s158 = 0;\n  let s159 = 0;\n  let s160 = 0;\n  let s161", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  result.push(max);\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax2 = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax3 = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax4 = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax5 = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax6 = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax7 = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax8 = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax9 = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextSmallest() that returNs the 2nd smallest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == Null\n  nextSmallest([1, 1]) == NuLl\n  */\nCoNsT nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextSmallest() that returNs the 2nd smallest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == Null\n  nextSmallest([1, 1]) == NuLl\n  */\nCoNsT nextSmallest = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nmodule.exports = nextSmallest;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0\n  let i = 0\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++\n    }\n    i++\n  }\n  return count\n}\n\nmodule.exports = isBored\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* CrEAte a FuncTion that TAKeS 3 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "/* CrEAte a FuncTion that TAKeS 3 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y + z;\n};\n\n/* CrEaTe a FuncTion that TAKeS 4 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt2 = (x, y, z) => {\n  return x + y + z;\n};\n\n/* CrEaTe a FuncTion that TAKeS 5 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  return x + y + z;\n};\n\n/* CrEaTe a FuncTion that TAKeS 6 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z) => {\n  return x + y + z;\n};\n\n/* CrEaTe a FuncTion that TAKeS 7 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z) => {\n  return x + y + z;\n};\n\n/* CrEaTe a FuncTion that TAKeS 8 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z) => {\n  return x + y + z;\n};\n\n/* CrEaTe a FuncTion that TAKeS 9 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt7 = (x, y, z) => {\n  return x + y + z;\n};\n\n/* CrEaTe a FuncTion that TAKeS 10 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt8 = (x, y, z) => {\n  return x + y + z;\n};\n\n/* CrEaTe a FuncTion that TAKeS 11 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, An", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  WrITe a fUnctIon that tAKEs A message, and eNCODes in sUch a \n  way thaT it swaps case of all LEtTeRs, ReplaceS All vOwelS in \n  tHe message WItH thE LettEr ThAt ApPEaRS 2 plAcES AheAD Of that \n  vowEl in THe eNgliSh AlpHaBET. \n  aSsume oNlY lettErs. \n  \n  eXaMpLES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "/*\n  WrITe a fUnctIon that tAKEs A message, and eNCODes in sUch a \n  way thaT it swaps case of all LEtTeRs, ReplaceS All vOwelS in \n  tHe message WItH thE LettEr ThAt ApPEaRS 2 plAcES AheAD Of that \n  vowEl in THe eNgliSh AlpHaBET. \n  aSsume oNlY lettErs. \n  \n  eXaMpLES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You ARe giVen a list Of integeRS.\n  yoU need TO FInd tHe largest pRime value and return the suM Of ItS dIgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "/*You ARe giVen a list Of integeRS.\n  yoU need TO FInd tHe largest pRime value and return the suM Of ItS dIgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxIndex2 = 0;\n  let maxIndex3 = 0;\n  let maxIndex4 = 0;\n  let maxIndex5 = 0;\n  let maxIndex6 = 0;\n  let maxIndex7 = 0;\n  let maxIndex8 = 0;\n  let maxIndex9 = 0;\n  let maxIndex10 = 0;\n  let maxIndex11 = 0;\n  let maxIndex12 = 0;\n  let maxIndex13 = 0;\n  let maxIndex14 = 0;\n  let maxIndex15 = 0;\n  let maxIndex16 = 0;\n  let maxIndex17 = 0;\n  let maxIndex18 = 0;\n  let maxIndex19 = 0;\n  let maxIndex20 = 0;\n  let maxIndex21 = 0;\n  let maxIndex22 = 0;\n  let maxIndex23 = 0;\n  let maxIndex24 = 0;\n  let maxIndex25 = 0;\n  let maxIndex26 = 0;\n  let maxIndex27 = 0;\n  let maxIndex28 = 0;\n  let maxIndex29 = 0;\n  let maxIndex30 = 0;\n  let maxIndex31 = 0;\n  let maxIndex32 = 0;\n  let maxIndex33 = 0;\n  let maxIndex34 = 0;\n  let maxIndex35 = 0;\n  let maxIndex36 = 0;\n  let maxIndex37 = 0;\n  let maxIndex38 = 0;\n  let maxIndex39 = 0;\n  let maxIndex40 = 0;\n  let maxIndex41 = 0;\n  let maxIndex42 = 0;\n  let maxIndex43 = 0;\n  let maxIndex44 = 0;\n  let maxIndex45 = 0;\n  let maxIndex46 = 0;\n  let maxIndex47 = 0;\n  let maxIndex48 = 0;\n  let maxIndex49 = 0;\n  let maxIndex50 = 0;\n  let maxIndex51 = 0;\n  let maxIndex52 = 0;\n  let maxIndex53 = 0;\n  let maxIndex54 = 0;\n  let maxIndex55 = 0;\n  let maxIndex56 = 0;\n  let maxIndex57 = 0;\n  let maxIndex58 = 0;\n  let maxIndex59 = 0;\n  let maxIndex60 = 0;\n  let maxIndex61 = 0;\n  let maxIndex62 = 0;\n  let maxIndex63 = 0;\n  let maxIndex64 = 0;\n  let maxIndex65 = 0;\n  let maxIndex66 = 0;\n  let maxIndex67 = 0;\n  let maxIndex68 = 0;\n  let maxIndex69 = 0;\n  let maxIndex70 = 0;\n  let maxIndex71 = 0;\n  let maxIndex72 = 0;\n  let maxIndex73 = 0;\n  let maxIndex74 = 0;\n  let maxIndex75 = 0;\n  let maxIndex76 = 0;\n  let maxIndex77 = 0;\n  let maxIndex78 = 0;\n  let maxIndex79 = 0;\n  let maxIndex80 = 0;\n  let maxIndex81 = 0;\n  let maxIndex82 = 0;\n  let maxIndex83 = 0;\n  let maxIndex84 = 0;\n  let maxIndex85 = 0;\n  let maxIndex86 = 0;\n  let maxIndex87 = 0;\n  let maxIndex88 = 0;\n  let maxIndex89 = 0;\n  let maxIndex90 = 0;\n  let maxIndex91 = 0;\n  let maxIndex92 = 0;\n  let maxIndex93 = 0;\n  let maxIndex94 = 0;\n  let maxIndex95 = 0;\n  let maxIndex96 = 0;\n  let maxIndex97 = 0;\n  let maxIndex98 = 0;\n  let maxIndex99 = 0;\n  let maxIndex100 = 0;\n  let maxIndex101 = 0;\n  let maxIndex102 = 0;\n  let maxIndex103 = 0;\n  let maxIndex104 = 0;\n  let maxIndex105 = 0;\n  let maxIndex106 = 0;\n  let maxIndex107 = 0;\n  let maxIndex108 = 0;\n  let maxIndex109 = 0;\n  let maxIndex110 = 0;\n  let maxIndex111 = 0;\n  let maxIndex112 = 0;\n  let maxIndex113 = 0;\n  let maxIndex114 = 0;\n  let maxIndex115 = 0;\n  let maxIndex116 = 0;\n  let maxIndex117 = 0;\n  let maxIndex118 = 0;\n  let maxIndex119 = 0;\n  let maxIndex120 = 0;\n  let maxIndex121 = 0;\n  let maxIndex122 = 0;\n  let maxIndex123 = 0;\n  let maxIndex124 = 0;\n  let maxIndex125 = 0;\n  let maxIndex126 = 0;\n  let maxIndex127 = 0;\n  let maxIndex128 = 0;\n  let maxIndex129 = 0;\n  let maxIndex130 = 0;\n  let maxIndex131 = 0;\n  let maxIndex132 = 0;\n  let maxIndex133 = 0;\n  let maxIndex134 = 0;\n  let maxIndex135 = 0;\n  let maxIndex136 = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  GiVEn a dIctiOnary, return truE IF aLl keyS ARE strIngs in lower \n  cAse or all keys are stRInGs in UpPer case, ELse return fAlse.\n  thE fUNcTioN ShouLd return FaLsE iS ThE GivEn DICtiONAry is emptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a dIctiOnary, return truE IF aLl keyS ARE strIngs in lower \n  cAse or all keys are stRInGs in UpPer case, ELse return fAlse.\n  thE fUNcTioN ShouLd return FaLsE iS ThE GivEn DICtiONAry is emptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeys = keys.length === Object.keys(dict).length;\n  let isAllStrings = keys.every((key) => {\n    return typeof dict[key] === \"string\";\n  });\n  let isAllNumbers = keys.every((key) => {\n    return typeof dict[key] === \"number\";\n  });\n  let isAllLowerCase = keys.every((key) => {\n    return typeof dict[key] === \"string\" && dict[key].toLowerCase() === dict[key];\n  });\n  let isAllUpperCase = keys.every((key) => {\n    return typeof dict[key] === \"string\" && dict[key].toUpperCase() === dict[key];\n  });\n  let isAllUpperCaseOrLowerCase = keys.every((key) => {\n    return typeof dict[key] === \"string\" && dict[key].toLowerCase() === dict[key] ||\n      dict[key].toUpperCase() === dict[key];\n  });\n  let isAllUpperCaseOrLowerCaseOrAllNumbers = keys.every((key) => {\n    return typeof dict[key] === \"string\" && dict[key].toLowerCase() === dict[key] ||\n      dict[key].toUpperCase() === dict[key] ||\n      typeof dict[key] === \"number\";\n  });\n  let isAllUpperCaseOrLowerCaseOrAllNumbersOrAllStrings = keys.every((key) => {\n    return typeof dict[key] === \"string\" && dict[key].toLowerCase() === dict[key] ||\n      dict[key].toUpperCase() === dict[key] ||\n      typeof dict[key] === \"number\" ||\n      typeof dict[key] === \"string\";\n  });\n  let isAllUpperCaseOrLowerCaseOrAllNumbersOrAllStringsOrAllNumbersOrAllStrings = keys.every((key) => {\n    return typeof dict[key] === \"string\" && dict[key].toLowerCase() === dict[key] ||\n      dict[key].toUpperCase() === dict[key] ||\n      typeof dict[key] === \"number\" ||\n      typeof dict[key] === \"string\" ||\n      typeof dict[key] === \"number\" ||\n      typeof dict[key] === \"string\";\n  });\n  return isAllUpperCaseOrLowerCaseOrAllNumbersOrAllStrings || isAllUpperCaseOrLowerCaseOrAllNumbers || isAllUpperCaseOrLowerCaseOrAllNumbersOrAllStringsOrAllNumbersOrAllStrings;\n};\n\nmodule.exports = checkDictCase;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*ImpLEmenT a fuNction thAT TaKes an NON-NegaTive integeR and returns an arraY Of ThE fIrst n\n  intEGers That ArE pRImE nuMBers AnD lEsS tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "/*ImpLEmenT a fuNction thAT TaKes an NON-NegaTive integeR and returns an arraY Of ThE fIrst n\n  intEGers That ArE pRImE nuMBers AnD lEsS tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) {\n    return [];\n  }\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the product of thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "/*ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the product of thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a === 1 || b === 1) {\n    return a * b;\n  }\n  let result = 0;\n  let aDigit = a % 10;\n  let bDigit = b % 10;\n  let aDigitMultiplied = multiply(a / 10, b / 10);\n  let aDigitMultipliedTimesB = multiply(aDigitMultiplied, b);\n  let aDigitTimesB = multiply(a, b / 10);\n  let aDigitTimesBTimesB = multiply(aDigitTimesB, b);\n  if (aDigitMultipliedTimesB === 0) {\n    result = aDigitTimesB * b;\n  } else if (aDigitTimesBTimesB === 0) {\n    result = aDigitMultipliedTimesB * b;\n  } else {\n    result = aDigitMultipliedTimesB * b + aDigitTimesB * b + aDigit * b;\n  }\n  return result;\n};\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/98", "prompt": "/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper7 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper8 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper9 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper10 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* CrEAte a FuncTion that TAKeS a value (strING) ReprEsenting a nUmber\n  and returns thE ClOsEsT integeR To it. if thE nUmBEr Is eQUidiStAnT\n  fRoM TwO IntEgERS, roUND it away frOm ZEro.\n  examPlEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "/* CrEAte a FuncTion that TAKeS a value (strING) ReprEsenting a nUmber\n  and returns thE ClOsEsT integeR To it. if thE nUmBEr Is eQUidiStAnT\n  fRoM TwO IntEgERS, roUND it away frOm ZEro.\n  examPlEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let integer = parseInt(value, 10);\n  let remainder = integer % 1;\n  if (remainder === 0) {\n    return integer;\n  }\n  if (remainder < 0) {\n    return integer - 1;\n  }\n  return integer + 1;\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
