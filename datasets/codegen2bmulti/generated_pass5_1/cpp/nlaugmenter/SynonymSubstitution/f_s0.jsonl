{"task_id": "CPP/0", "prompt": "/*\nCheck if in given vector of numbers, are any two numbers closer to each early than \n given threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n", "canonical_solution": "    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert (has_close_elements(a, 0.3)==true);\n    assert (has_close_elements(a, 0.05) == false);\n\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);\n    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);\n    \n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (has_close_elements({1.0, 2.0, 3.0}, 0.5) == false && \"failure 1\");\n    assert (has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3) && \"failure 2\") ;\n}\n", "entry_point": "has_close_elements", "seed": 0, "perturbed": true, "gc": "/*\nCheck if in given vector of numbers, are any two numbers closer to each early than \n given threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(fabs(numbers[i]-numbers[j])<=threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main(){\n    vector<float> numbers;\n    numbers.push_back(1.0);\n    numbers.push_back(2.0);\n    numbers.push_back(3.0);\n    numbers.push_back(4.0);\n    numbers.push_back(5.0);\n    numbers.push_back(2.0);\n    cout<<has_close_elements(numbers, 0.5)<<endl;\n    cout<<has_close_elements(numbers, 0.3)<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/1", "prompt": "/*\nInput to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n separate those group into separate strings and return the vector of those. \n disjoined group are balanced (each open brace is properly shut) and not nested within each early \n Ignore any space in the input chain.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n", "canonical_solution": "    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));\n    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));\n    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));\n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}\n", "entry_point": "separate_paren_groups", "seed": 0, "perturbed": true, "gc": "/*\nInput to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n separate those group into separate strings and return the vector of those. \n disjoined group are balanced (each open brace is properly shut) and not nested within each early \n Ignore any space in the input chain.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n\tvector<string> paren_groups;\n\tstring curr_paren_group;\n\tfor(int i=0;i<paren_string.size();i++){\n\t\tif(paren_string[i]=='('){\n\t\t\tcurr_paren_group.push_back(paren_string[i]);\n\t\t}\n\t\telse if(paren_string[i]==')'){\n\t\t\tcurr_paren_group.push_back(paren_string[i]);\n\t\t\tparen_groups.push_back(curr_paren_group);\n\t\t\tcurr_paren_group.clear();\n\t\t}\n\t\telse{\n\t\t\tcurr_paren_group.push_back(paren_string[i]);\n\t\t}\n\t}\n\treturn paren_groups;\n}\nint main(){\n\tvector<string> paren_groups = separate_paren_groups(\"( ) (( )) (( )( ))\");\n\tfor(int i=0;i<paren_groups.size();i++){\n\t\tprintf(\"%s\\n\",paren_groups[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/2", "prompt": "/*\nGiven a positive floating point number, it can be disintegrate into \n and integer region (largest integer smaller than given number) and decimals \n (leftover function always little than 1). \n\n Return the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n", "canonical_solution": "    return number-int(number);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n assert (abs(truncate_number(1.33) - 0.33) < 1e-4);\n  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n}\n", "entry_point": "truncate_number", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive floating point number, it can be disintegrate into \n and integer region (largest integer smaller than given number) and decimals \n (leftover function always little than 1). \n\n Return the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n\tfloat remainder;\n\tremainder = number - floor(number);\n\tif(remainder < 0.5){\n\t\treturn floor(number);\n\t}\n\telse{\n\t\treturn floor(number) + 1;\n\t}\n}\nint main(){\n\tfloat number;\n\tprintf(\"Enter a number: \");\n\tscanf(\"%f\", &number);\n\tprintf(\"%f\\n\", truncate_number(number));\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/3", "prompt": "/*\nYou\"re given a vector of deposit and withdrawal operations on a savings bank history that starts with \n zero balance wheel. Your task is to detect if at any degree the remainder of account fall below zero, and \n at that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({}) == false);\n    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);\n    assert (below_zero({1, 2, -4, 5, 6}) == true);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);\n    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({1, 2, 3}) == false);\n    assert (below_zero({1, 2, -4, 5}) == true);\n}\n", "entry_point": "below_zero", "seed": 0, "perturbed": true, "gc": "/*\nYou\"re given a vector of deposit and withdrawal operations on a savings bank history that starts with \n zero balance wheel. Your task is to detect if at any degree the remainder of account fall below zero, and \n at that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n\tint sum = 0;\n\tfor(int i = 0; i < operations.size(); i++){\n\t\tsum += operations[i];\n\t}\n\tif(sum < 0){\n\t\treturn true;\n\t}\n\treturn false;\n}\nint main(){\n\tvector<int> operations;\n\toperations.push_back(1);\n\toperations.push_back(2);\n\toperations.push_back(3);\n\tprintf(\"%d\\n\", below_zero(operations));\n\toperations.push_back(-4);\n\toperations.push_back(5);\n\tprintf(\"%d\\n\", below_zero(operations));\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/4", "prompt": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation \n around the mean of this dataset. \n Mean Absolute Deviation is the average absolute remainder between each \n element and a centerpoint (intend in this lawsuit ): \n MAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n", "canonical_solution": "    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n}\n", "entry_point": "mean_absolute_deviation", "seed": 0, "perturbed": true, "gc": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation \n around the mean of this dataset. \n Mean Absolute Deviation is the average absolute remainder between each \n element and a centerpoint (intend in this lawsuit ): \n MAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += fabs(numbers[i] - mean(numbers));\n    }\n    return sum/numbers.size();\n}\n\nint main(){\n    vector<float> numbers = {1.0, 2.0, 3.0, 4.0};\n    cout << mean_absolute_deviation(numbers) << endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/5", "prompt": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "canonical_solution": "    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 7), {}));\n    \n    assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));\n    assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 4), {}));\n    assert (issame(intersperse({1, 2, 3}, 4),{1, 4, 2, 4, 3}));\n}\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    for(int i = 0; i < numbers.size(); i++){\n        if(i == 0){\n            result.push_back(numbers[i]);\n        }else if(i == numbers.size() - 1){\n            result.push_back(numbers[i]);\n            result.push_back(numbers[i]);\n        }else{\n            result.push_back(numbers[i]);\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\nint main(){\n    vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    vector<int> result = intersperse(numbers, 4);\n    for(int i = 0; i < result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/6", "prompt": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by space. \n For each of the group, output the thick level of nest of parentheses. \n E.g. (() ()) has maximal two levels of nest while (( ()) ) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n", "canonical_solution": "    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n     assert (issame(parse_nested_parens(\"() (()) ((())) (((())))\") , {1, 2, 3, 4}));\n    assert (issame(parse_nested_parens(\"(()(())((())))\") ,{4}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n}\n", "entry_point": "parse_nested_parens", "seed": 0, "perturbed": true, "gc": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by space. \n For each of the group, output the thick level of nest of parentheses. \n E.g. (() ()) has maximal two levels of nest while (( ()) ) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> paren_levels;\n    paren_levels.push_back(0);\n    int level = 0;\n    for(int i = 0; i < paren_string.size(); i++){\n        if(paren_string[i] == '('){\n            paren_levels.push_back(level);\n            level++;\n        }\n        else if(paren_string[i] == ')'){\n            paren_levels.pop_back();\n            level--;\n        }\n    }\n    return paren_levels;\n}\nint main(){\n    vector<int> paren_levels = parse_nested_parens(\"(()()) ((())) () ((())()())\");\n    for(int i = 0; i < paren_levels.size(); i++){\n        printf(\"%d \", paren_levels[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/7", "prompt": "/*\nFilter an input vector of strings only for ones that hold feed substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "canonical_solution": "    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"john\"),{}));\n     assert (issame(filter_by_substring({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), {\"xxx\", \"xxxAAA\", \"xxx\"}));\n    assert (issame(filter_by_substring({\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"),{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}));\n     assert (issame(filter_by_substring({\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\") ,{\"grunt\", \"prune\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"a\"),{}));\n     assert (issame(filter_by_substring({\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\"), {\"abc\", \"bacd\", \"array\"}));\n}\n", "entry_point": "filter_by_substring", "seed": 0, "perturbed": true, "gc": "/*\nFilter an input vector of strings only for ones that hold feed substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\tvector<string> ret;\n\tfor(string s : strings){\n\t\tif(s.find(substring)!= string::npos){\n\t\t\tret.push_back(s);\n\t\t}\n\t}\n\treturn ret;\n}\nint main(){\n\tvector<string> strings = {\"abc\", \"bacd\", \"cde\", \"vector\"};\n\tvector<string> ret = filter_by_substring(strings, \"a\");\n\tfor(string s : ret){\n\t\tprintf(\"%s\\n\", s.c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/8", "prompt": "/*\nFor a given vector of integers, return a vector consist of a sum and a product of all the integer in a vector. \n Empty sum should equal equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n", "canonical_solution": "    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 1, 1}), {3, 1}));\n    assert (issame(sum_product({100, 0}),{100, 0}));\n     assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));\n      assert (issame(sum_product({10}) ,{10, 10}));\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 2, 3,4}), {10, 24}));\n}\n", "entry_point": "sum_product", "seed": 0, "perturbed": true, "gc": "/*\nFor a given vector of integers, return a vector consist of a sum and a product of all the integer in a vector. \n Empty sum should equal equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    vector<int> sum(numbers.size(), 0);\n    vector<int> prod(numbers.size(), 1);\n    for(int i = 0; i < numbers.size(); i++){\n        for(int j = 0; j < numbers.size(); j++){\n            if(i == j)\n                sum[i] += numbers[i];\n            else\n                sum[i] += numbers[i] * numbers[j];\n            prod[i] *= numbers[j];\n        }\n    }\n    return sum;\n}\nint main(){\n    vector<int> numbers = {1, 2, 3, 4};\n    vector<int> sum = sum_product(numbers);\n    vector<int> prod = sum_product(numbers);\n    for(int i = 0; i < sum.size(); i++){\n        printf(\"%d \", sum[i]);\n    }\n    printf(\"\\n\");\n    for(int i = 0; i < prod.size(); i++){\n        printf(\"%d \", prod[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/9", "prompt": "/*\nFrom a given vector of integers, generate a vector of rolling maximal element found until give moment \n in the succession.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n", "canonical_solution": "    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({}),{}));\n    assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));\n     assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));\n      assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({1, 2, 3, 2, 3, 4, 2}),{1, 2, 3, 3, 3, 4, 4}));\n}\n", "entry_point": "rolling_max", "seed": 0, "perturbed": true, "gc": "/*\nFrom a given vector of integers, generate a vector of rolling maximal element found until give moment \n in the succession.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n\tvector<int> result;\n\tint max_value=numbers[0];\n\tint max_index=0;\n\tfor(int i=1;i<numbers.size();i++){\n\t\tif(numbers[i]>max_value){\n\t\t\tmax_value=numbers[i];\n\t\t\tmax_index=i;\n\t\t}\n\t}\n\tresult.push_back(max_value);\n\tfor(int i=max_index;i<numbers.size();i++){\n\t\tif(numbers[i]>max_value){\n\t\t\tmax_value=numbers[i];\n\t\t\tmax_index=i;\n\t\t}\n\t\tresult.push_back(max_value);\n\t}\n\treturn result;\n}\nint main(){\n\tvector<int> numbers={1,2,3,2,3,4,2};\n\tvector<int> result=rolling_max(numbers);\n\tfor(int i=0;i<result.size();i++){\n\t\tprintf(\"%d \",result[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/10", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a issue chain. \n     Algorithm mind is childlike: - Find the long postfix of issue string that equal a palindrome. \n     - Append to the end of the string reverse of a chain prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n", "canonical_solution": "   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"x\") == \"x\");\n     assert (make_palindrome(\"xyz\") == \"xyzyx\");\n     assert (make_palindrome(\"xyx\") == \"xyx\") ;\n     assert (make_palindrome(\"jerry\") == \"jerryrrej\");\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"cat\") == \"catac\");\n     assert (make_palindrome(\"cata\") == \"catac\");\n}\n", "entry_point": "make_palindrome", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a issue chain. \n     Algorithm mind is childlike: - Find the long postfix of issue string that equal a palindrome. \n     - Append to the end of the string reverse of a chain prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    if(str.empty()){\n        return str;\n    }\n    string s(str.rbegin(),str.rend());\n    string p(s);\n    reverse(p.begin(),p.end());\n    reverse(p.rbegin(),p.rend());\n    return p;\n}\nint main(){\n    string str;\n    while(cin>>str){\n        if(is_palindrome(str)){\n            cout<<str<<endl;\n        }\n        else{\n            cout<<\"Not a palindrome\"<<endl;\n        }\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/11", "prompt": "/*\nInput are two strings a and b consisting only of 1s and zero. \n Perform binary XOR on these inputs and return result besides as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n", "canonical_solution": "    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"111000\", \"101010\") == \"010010\");\n     assert (string_xor(\"1\", \"1\") == \"0\");\n    assert (string_xor(\"0101\", \"0000\") == \"0101\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"010\", \"110\") == \"100\");\n}\n", "entry_point": "string_xor", "seed": 0, "perturbed": true, "gc": "/*\nInput are two strings a and b consisting only of 1s and zero. \n Perform binary XOR on these inputs and return result besides as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result;\n    int i,j,k;\n    for(i=0;i<a.size();i++){\n        for(j=0;j<b.size();j++){\n            k=a[i]^b[j];\n            if(k==0)\n                result+=a[i];\n            else if(k==1)\n                result+=b[j];\n        }\n    }\n    return result;\n}\nint main(){\n    string a=\"010\",b=\"110\";\n    printf(\"%s\\n\",string_xor(a,b).c_str());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/12", "prompt": "/*\nOut of vector of strings, return the longest one. Return the first one in sheath of multiple \n string of the same duration. Return None in lawsuit the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n", "canonical_solution": "    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"x\", \"y\", \"z\"}) == \"x\");\n    assert (longest({\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"}) == \"zzzz\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"a\", \"b\", \"c\"}) == \"a\");\n    assert (longest({\"a\", \"bb\", \"ccc\"}) == \"ccc\");\n}\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/*\nOut of vector of strings, return the longest one. Return the first one in sheath of multiple \n string of the same duration. Return None in lawsuit the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n\tif(strings.empty())\n\t\treturn \"\";\n\tstring longest = strings[0];\n\tfor(int i = 1; i < strings.size(); i++){\n\t\tif(strings[i].size() > longest.size()){\n\t\t\tlongest = strings[i];\n\t\t}\n\t}\n\treturn longest;\n}\nint main(){\n\tvector<string> strings;\n\tstring s;\n\twhile(getline(cin, s)){\n\t\tstrings.push_back(s);\n\t}\n\tprintf(\"%s\\n\", longest(strings).c_str());\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/13", "prompt": "/*\nReturn a greatest common divisor of two integer a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n", "canonical_solution": "    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 7) == 1);\n     assert (greatest_common_divisor(10, 15) == 5);\n      assert (greatest_common_divisor(49, 14) == 7);\n     assert (greatest_common_divisor(144, 60) == 12);\n}\n", "declaration": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 5) == 1);\n     assert (greatest_common_divisor(25, 15) == 5);\n}\n", "entry_point": "greatest_common_divisor", "seed": 0, "perturbed": true, "gc": "/*\nReturn a greatest common divisor of two integer a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n\tint i, j, k;\n\tif(a == 0 || b == 0)\n\t\treturn 0;\n\tif(a == 1 || b == 1)\n\t\treturn 1;\n\tif(a > b)\n\t\treturn greatest_common_divisor(b, a);\n\tfor(i = 1; i <= a; i++){\n\t\tif(a % i == 0 && b % i == 0)\n\t\t\treturn i;\n\t}\n\treturn 0;\n}\nint main(){\n\tint a, b;\n\tscanf(\"%d %d\", &a, &b);\n\tprintf(\"%d\\n\", greatest_common_divisor(a, b));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/14", "prompt": "/*\nReturn vector of all prefixes from shortest to long of the stimulation bowed stringed instrument\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n", "canonical_solution": "    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"\"),{}));\n    assert (issame(all_prefixes(\"asdfgh\") ,{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}));\n     assert (issame(all_prefixes(\"WWW\") ,{\"W\", \"WW\", \"WWW\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"abc\"),{\"a\",\"ab\",\"abc\"}));\n}\n", "entry_point": "all_prefixes", "seed": 0, "perturbed": true, "gc": "/*\nReturn vector of all prefixes from shortest to long of the stimulation bowed stringed instrument\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n\tvector<string> prefixes;\n\tstring prefix;\n\tfor(int i=0; i<str.size(); i++){\n\t\tprefix.push_back(str[i]);\n\t\tfor(int j=1; j<=i; j++){\n\t\t\tprefix.push_back('a');\n\t\t}\n\t\tprefix.push_back('\\0');\n\t\tprefixes.push_back(prefix);\n\t}\n\treturn prefixes;\n}\n\nint main(){\n\tvector<string> prefixes = all_prefixes(\"abc\");\n\tfor(int i=0; i<prefixes.size(); i++){\n\t\tprintf(\"%s\\n\", prefixes[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/15", "prompt": "/*\nReturn a string containing space - subtend number starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n", "canonical_solution": "    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(3) == \"0 1 2 3\");\n     assert (string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(5) == \"0 1 2 3 4 5\");\n}\n", "entry_point": "string_sequence", "seed": 0, "perturbed": true, "gc": "/*\nReturn a string containing space - subtend number starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n\tstring s;\n\tfor(int i=0;i<n;i++){\n\t\ts+=i;\n\t}\n\treturn s;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%s\\n\",string_sequence(n).c_str());\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/16", "prompt": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n", "canonical_solution": "    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"\") == 0);\n    assert (count_distinct_characters(\"abcde\") == 5);\n    assert (count_distinct_characters(\"abcdecadeCADE\") == 5);\n    assert (count_distinct_characters(\"aaaaAAAAaaaa\") == 1);\n    assert (count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"xyzXYZ\") == 3);\n    assert (count_distinct_characters(\"Jerry\") == 4);\n}\n", "entry_point": "count_distinct_characters", "seed": 0, "perturbed": false, "gc": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    int count = 0;\n    for(int i = 0; i < str.length(); i++){\n        count += str[i] == str[i]? 1 : 0;\n    }\n    return count;\n}\nint main(){\n    string str;\n    while(scanf(\"%s\", &str)!= EOF){\n        printf(\"%d\\n\", count_distinct_characters(str));\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/17", "prompt": "/*\nInput to this function is a string representing melodious notes in a particular ASCII format. \n Your task is to parse this string and return vector of integer represent to how many beat generation does each \n not last. \n\n Here is a caption: \n \" o \" - unharmed note, lasts four beats \n \" o| \" - one-half bill, last two beat \n \" .| \" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n", "canonical_solution": "    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"\") , {}));\n     assert (issame(parse_music(\"o o o o\") ,{4, 4, 4, 4}));\n      assert (issame(parse_music(\".| .| .| .|\") , {1, 1, 1, 1}));\n assert (issame(parse_music(\"o| o| .| .| o o o o\") , {2, 2, 1, 1, 4, 4, 4, 4}));\n  assert (issame(parse_music(\"o| .| o| .| o o| o o|\") , {2, 1, 2, 1, 4, 2, 4, 2}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"o o| .| o| o| .| .| .| .| o o\") , {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}));\n}\n", "entry_point": "parse_music", "seed": 0, "perturbed": true, "gc": "/*\nInput to this function is a string representing melodious notes in a particular ASCII format. \n Your task is to parse this string and return vector of integer represent to how many beat generation does each \n not last. \n\n Here is a caption: \n \" o \" - unharmed note, lasts four beats \n \" o| \" - one-half bill, last two beat \n \".| \" - quater note, lasts one beat\n\n>>> parse_music(\"o o|.| o| o|.|.|.|.| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n    vector<int> beat_count;\n    int i = 0;\n    while(music_string[i]!= '\\0'){\n        if(music_string[i] == 'o'){\n            beat_count.push_back(4);\n        }\n        else if(music_string[i] == '|'){\n            beat_count.push_back(2);\n        }\n        else if(music_string[i] == '.'){\n            beat_count.push_back(1);\n        }\n        i++;\n    }\n    return beat_count;\n}\n\nint main(){\n    string music_string = \"o o|.| o| o|.|.|.|.| o o\";\n    vector<int> beat_count = parse_music(music_string);\n    for(int i = 0; i < beat_count.size(); i++){\n        printf(\"%d \", beat_count[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/18", "prompt": "/*\nFind how many times a grant substring can be determine in the original drawstring. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n", "canonical_solution": "    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"x\") == 0);\n    assert (how_many_times(\"xyxyxyx\", \"x\") == 4);\n     assert (how_many_times(\"cacacacac\", \"cac\") == 4);\n    assert (how_many_times(\"john doe\", \"john\") == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"a\") == 0);\n    assert (how_many_times(\"aaa\", \"a\") == 3);\n    assert (how_many_times(\"aaaa\", \"aa\") == 3);\n}\n", "entry_point": "how_many_times", "seed": 0, "perturbed": true, "gc": "/*\nFind how many times a grant substring can be determine in the original drawstring. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n\tint count=0;\n\tfor(int i=0;i<str.size();i++){\n\t\tif(str.substr(i,substring.size())==substring){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring str=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}
{"task_id": "CPP/19", "prompt": "/*\nInput is a space - delimited string of numberals from \" zero \" to \" nine \". \n Valid option are \" zero \", \" one \",' two \",' three \", \" four \", \" five \",' six \",' seven \", \" eight \" and \" nine \". \n revert the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n", "canonical_solution": "    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"\") == \"\");\n    assert (sort_numbers(\"three\") == \"three\");\n    assert (sort_numbers(\"three five nine\") == \"three five nine\");\n     assert (sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n      assert (sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"three one five\") == \"one three five\");\n}\n", "entry_point": "sort_numbers", "seed": 0, "perturbed": true, "gc": "/*\nInput is a space - delimited string of numberals from \" zero \" to \" nine \". \n Valid option are \" zero \", \" one \",' two \",' three \", \" four \", \" five \",' six \",' seven \", \" eight \" and \" nine \". \n revert the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n\tmap<string,int> m;\n\tfor(int i=0;i<numbers.length();i++){\n\t\tm[numbers[i]]++;\n\t}\n\tstring output=\"\";\n\tfor(map<string,int>::iterator it=m.begin();it!=m.end();it++){\n\t\toutput+=it->first;\n\t\toutput+=\" \";\n\t\toutput+=it->second;\n\t\toutput+=\" \";\n\t}\n\treturn output;\n}\nint main(){\n\tstring numbers=\"three one five\")\n\tstring output=sort_numbers(numbers);\n\tprintf(\"%s\\n\",output.c_str());\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/20", "prompt": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that constitute the close to each \n early and return them in order (smaller number, large number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}) , {3.9, 4.0}));\n    assert (issame(find_closest_elements({1.0, 2.0, 5.9, 4.0, 5.0}) , {5.0, 5.9} ));\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n      assert (issame(find_closest_elements({1.1, 2.2, 3.1, 4.1, 5.1}) , {2.2, 3.1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n}\n", "entry_point": "find_closest_elements", "seed": 0, "perturbed": true, "gc": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that constitute the close to each \n early and return them in order (smaller number, large number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n\tfloat min_dist = 0.0;\n\tfloat min_num = 0.0;\n\tfloat max_num = 0.0;\n\tfloat max_dist = 0.0;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tfloat dist = pow(numbers[i] - 1.0, 2);\n\t\tif(min_dist > dist){\n\t\t\tmin_dist = dist;\n\t\t\tmin_num = numbers[i];\n\t\t}\n\t\tif(max_dist < dist){\n\t\t\tmax_dist = dist;\n\t\t\tmax_num = numbers[i];\n\t\t}\n\t}\n\treturn vector<float>{min_num, max_num};\n}\nint main(){\n\tvector<float> numbers = {1.0, 2.0, 3.0, 4.0, 5.0, 2.2};\n\tvector<float> closest_elements = find_closest_elements(numbers);\n\tprintf(\"%f, %f\\n\", closest_elements[0], closest_elements[1]);\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/21", "prompt": "/*\nGiven vector of numbers (of at least two element), use a linear transform to that vector, \n such that the smallest number will become 0 and the big will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "canonical_solution": "    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));\n     assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0})); \n     assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n    assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));\n     assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n}\n", "entry_point": "rescale_to_unit", "seed": 0, "perturbed": true, "gc": "/*\nGiven vector of numbers (of at least two element), use a linear transform to that vector, \n such that the smallest number will become 0 and the big will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n\tfloat min = *min_element(numbers.begin(), numbers.end());\n\tfloat max = *max_element(numbers.begin(), numbers.end());\n\tfloat scale = 1.0/max;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tnumbers[i] = numbers[i]*scale;\n\t}\n\treturn numbers;\n}\n\nint main(){\n\tvector<float> numbers;\n\tnumbers.push_back(1.0);\n\tnumbers.push_back(2.0);\n\tnumbers.push_back(3.0);\n\tnumbers.push_back(4.0);\n\tnumbers.push_back(5.0);\n\tvector<float> numbers_rescaled = rescale_to_unit(numbers);\n\tfor(int i = 0; i < numbers_rescaled.size(); i++){\n\t\tprintf(\"%f \", numbers_rescaled[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/22", "prompt": "/*\nFilter given vector of any python values only for integer\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n", "canonical_solution": "    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({}),{}));\n\n    assert (issame(filter_integers({4,  {},23.2, 9, string(\"adasd\")}) ,{4, 9}));\n    assert (issame(filter_integers({3, 'c', 3, 3, 'a', 'b'}) ,{3, 3, 3}));\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({string(\"a\"), 3.14, 5}),{5}));\n    assert (issame(filter_integers({1, 2, 3, string(\"abc\"), {}, {}}),{1,2,3}));\n}\n", "entry_point": "filter_integers", "seed": 0, "perturbed": true, "gc": "/*\nFilter given vector of any python values only for integer\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n\tvector<int> result;\n\tfor(list_any::iterator it = values.begin(); it!= values.end(); it++){\n\t\tif(boost::any_cast<int>(*it) > 0){\n\t\t\tresult.push_back(boost::any_cast<int>(*it));\n\t\t}\n\t}\n\treturn result;\n}\n\nint main(){\n\tlist_any values = {1, 2, 3, \"abc\", {}, {}};\n\tvector<int> result = filter_integers(values);\n\tfor(vector<int>::iterator it = result.begin(); it!= result.end(); it++){\n\t\tprintf(\"%d \", *it);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/23", "prompt": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n", "canonical_solution": "    return str.length();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"x\") == 1);\n     assert (strlen(\"asdasnakj\") == 9);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"abc\") == 3);\n}\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    int len=0;\n    for(int i=0;i<str.length();i++){\n        len++;\n    }\n    return len;\n}\nint main(){\n    string str=\"abc\";\n    printf(\"%d\\n\",strlen(str));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/24", "prompt": "/*\nFor a given number n, find the largest phone number that divide n evenly, little than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(3) == 1);\n    assert (largest_divisor(7) == 1);\n    assert (largest_divisor(10) == 5);\n    assert (largest_divisor(100) == 50);\n    assert (largest_divisor(49) == 7);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(15) == 5);\n}\n", "entry_point": "largest_divisor", "seed": 0, "perturbed": true, "gc": "/*\nFor a given number n, find the largest phone number that divide n evenly, little than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int i;\n    for(i=1;i<=n;i++){\n        if(n%i==0){\n            if(n/i>n/i){\n                return i;\n            }\n        }\n    }\n    return i;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\",largest_divisor(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/25", "prompt": "/*\nReturn vector of prime factors of grant integer in the ordering from smallest to big. \n Each of the factors should be vectored phone number of meter corresponding to how many multiplication it appeares in factorization. \n stimulation number should be equal to the product of all agent\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(2) , {2}));\n    assert (issame(factorize(4) , {2, 2}));\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(3 * 19) , {3, 19}));\n    assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19})); \n    assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19})); \n    assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19})); \n    assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(25) , {5,5}));\n    assert (issame(factorize(70) , {2,5,7})); \n}\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/*\nReturn vector of prime factors of grant integer in the ordering from smallest to big. \n Each of the factors should be vectored phone number of meter corresponding to how many multiplication it appeares in factorization. \n stimulation number should be equal to the product of all agent\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> v;\n    if(n==1)\n        v.push_back(1);\n    else{\n        int i=2;\n        while(n%i==0){\n            v.push_back(i);\n            n/=i;\n        }\n        if(n!=1)\n            v.push_back(n);\n    }\n    return v;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> v=factorize(n);\n    for(int i=0;i<v.size();i++){\n        printf(\"%d \",v[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/26", "prompt": "/*\nFrom a vector of integers, remove all elements that happen more than once. \n Keep order of element left the like as in the remark.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n", "canonical_solution": "    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(remove_duplicates({}) , {}));\n     assert (issame(remove_duplicates({1, 2, 3, 4}) , {1, 2, 3, 4}));\n      assert (issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}) , {1, 4, 5}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(remove_duplicates({1, 2, 3, 2,4}) , {1,  3, 4}));\n}\n", "entry_point": "remove_duplicates", "seed": 0, "perturbed": true, "gc": "/*\nFrom a vector of integers, remove all elements that happen more than once. \n Keep order of element left the like as in the remark.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n\tvector<int> result;\n\tsort(numbers.begin(), numbers.end());\n\tint i=0;\n\tfor(i=0; i<numbers.size(); i++){\n\t\tif(i!=0 && numbers[i]==numbers[i-1]){\n\t\t\tcontinue;\n\t\t}\n\t\tresult.push_back(numbers[i]);\n\t}\n\treturn result;\n}\nint main(){\n\tvector<int> numbers;\n\tnumbers.push_back(1);\n\tnumbers.push_back(2);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(4);\n\tvector<int> result = remove_duplicates(numbers);\n\tfor(int i=0; i<result.size(); i++){\n\t\tprintf(\"%d \", result[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/27", "prompt": "/*\nFor a given string, flip lowercase character to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"\") == \"\");\n    assert (filp_case(\"Hello!\") == \"hELLO!\");\n    assert (filp_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"Hello\") == \"hELLO\");\n}\n", "entry_point": "filp_case", "seed": 0, "perturbed": true, "gc": "/*\nFor a given string, flip lowercase character to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n\tstring ret = \"\";\n\tfor(int i = 0; i < str.size(); i++){\n\t\tif(str[i] >= 'a' && str[i] <= 'z'){\n\t\t\tret += str[i] - 'a' + 'A';\n\t\t}else{\n\t\t\tret += str[i];\n\t\t}\n\t}\n\treturn ret;\n}\nint main(){\n\tstring str;\n\twhile(getline(cin, str)){\n\t\tprintf(\"%s\\n\", filp_case(str).c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/28", "prompt": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n     assert (concatenate({\"x\", \"y\", \"z\"}) == \"xyz\");\n    assert (concatenate({\"x\", \"y\", \"z\", \"w\", \"k\"}) == \"xyzwk\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n    assert (concatenate({\"a\", \"b\", \"c\"}) == \"abc\");\n}\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result;\n    for(auto it = strings.begin(); it!= strings.end(); it++){\n        result += *it;\n    }\n    return result;\n}\n\nint main(){\n    vector<string> strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"b\");\n    strings.push_back(\"c\");\n    printf(\"%s\\n\", concatenate(strings).c_str());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/29", "prompt": "/*\nFilter an input vector of strings only for ones that startle with a feed prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"john\") , {}));\n    assert (issame(filter_by_prefix({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\") , {\"xxx\", \"xxxAAA\", \"xxx\"}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"a\") , {}));\n    assert (issame(filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\") , {\"abc\", \"array\"}));\n}\n", "entry_point": "filter_by_prefix", "seed": 0, "perturbed": true, "gc": "/*\nFilter an input vector of strings only for ones that startle with a feed prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n\tvector<string> ret;\n\tfor(string s: strings){\n\t\tif(s.substr(0, prefix.length()) == prefix){\n\t\t\tret.push_back(s);\n\t\t}\n\t}\n\treturn ret;\n}\nint main(){\n\tvector<string> strings = {\"abc\", \"bcd\", \"cde\", \"vector\"};\n\tvector<string> ret = filter_by_prefix(strings, \"a\");\n\tfor(string s: ret){\n\t\tprintf(\"%s\\n\", s.c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/30", "prompt": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));\n     assert (issame(get_positive({-1, -2}) , {} ));\n     assert (issame(get_positive({}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, 2, -4, 5, 6}) , {2, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, -3,3, 9, 0, 123, 1, -10}) , {5, 3, 2,  3, 9, 123, 1}));\n}\n", "entry_point": "get_positive", "seed": 0, "perturbed": false, "gc": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n\tvector<float> r;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]>0)\n\t\t\tr.push_back(l[i]);\n\t}\n\treturn r;\n}\nint main(){\n\tvector<float> l;\n\tl.push_back(-1);\n\tl.push_back(2);\n\tl.push_back(-4);\n\tl.push_back(5);\n\tl.push_back(6);\n\tl.push_back(5);\n\tl.push_back(3);\n\tl.push_back(-5);\n\tl.push_back(2);\n\tl.push_back(-3);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(0);\n\tl.push_back(123);\n\tl.push_back(1);\n\tl.push_back(-10);\n\tvector<float> r=get_positive(l);\n\tfor(int i=0;i<r.size();i++){\n\t\tprintf(\"%f\\n\",r[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/31", "prompt": "/*\nReturn true if a given number equal choice, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n", "canonical_solution": "    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n    assert (is_prime(5) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(17) == true);\n    assert (is_prime(5 * 17) == false);\n    assert (is_prime(11 * 7) == false);\n    assert (is_prime(13441 * 19) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n}\n", "entry_point": "is_prime", "seed": 0, "perturbed": true, "gc": "/*\nReturn true if a given number equal choice, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if(n==2||n==3||n==5||n==7||n==11||n==13||n==17||n==19||n==23||n==29||n==31||n==37||n==41||n==43||n==47||n==53||n==59||n==61||n==67||n==71||n==73||n==79||n==83||n==89||n==97){\n        return true;\n    }\n    if(n<=1){\n        return false;\n    }\n    if(n%2==0||n%3==0||n%5==0||n%7==0||n%11==0||n%13==0||n%17==0||n%19==0||n%23==0||n%29==0||n%31==0||n%37==0||n%41==0||n%43==0||n%47==0||n%53==0||n%59==0||n%61==0||n%67==0||n%71==0||n%73==0||n%79==0||n%83==0||n%89==0){\n        return false;\n    }\n    long long i=2;\n    while(i<=n/2){\n        if(n%i==0){\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main(){\n    long long n;\n    while(scanf(\"%lld\",&n)!=EOF){\n        if(is_prime(n)){\n            printf(\"%lld is prime\\n\",n);\n        }else{\n            printf(\"%lld is not prime\\n\",n);\n        }\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/32", "prompt": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n     * / \n     bivalent sum=0;\n     int i;\n     for (i=0;i<xs.size();i++)\n     { \n         sum+=xs[i]*pow(x,i);\n     } \n     return sum;\n}\n\ndouble find_zero(vector < double > xs){\n     / * \n     xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero degree, even if there equal many. \n     Moreover, find_zero only takes list xs receive even number of coefficients and largest non zero coefficient as it undertake a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n", "canonical_solution": "    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=ans-value/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n   \n    double solution;\n    int ncoeff;\n    for (int i=0;i<100;i++)\n    {\n        ncoeff = 2 * (1+rand()%4);\n        vector<double> coeffs = {};\n        for (int j=0;j<ncoeff;j++)\n        {\n            double coeff = -10+rand()%21;\n            if (coeff == 0) coeff = 1;\n            coeffs.push_back(coeff);\n        }\n        \n        solution = find_zero(coeffs);\n        assert (abs(poly(coeffs, solution))< 1e-3);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (find_zero({1,2})+0.5<1e-4);\n    assert (find_zero({-6,11,-6,1})-1<1e-4);\n}\n", "entry_point": "for", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n     * / \n     bivalent sum=0;\n     int i;\n     for (i=0;i<xs.size();i++)\n     { \n         sum+=xs[i]*pow(x,i);\n     } \n     return sum;\n}\n\ndouble find_zero(vector < double > xs){\n     / * \n     xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero degree, even if there equal many. \n     Moreover, find_zero only takes list xs receive even number of coefficients and largest non zero coefficient as it undertake a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    double x=0;\n    double y=0;\n    double x_old=0;\n    double y_old=0;\n    double x_new=0;\n    double y_new=0;\n    double x_new_old=0;\n    double y_new_old=0;\n    double x_new_new=0;\n    double y_new_new=0;\n    double x_new_new_old=0;\n    double y_new_new_old=0;\n    double x_new_new_new=0;\n    double y_new_new_new=0;\n    double x_new_new_new_old=0;\n    double y_new_new_new_old=0;\n    double x_new_new_new_new=0;\n    double y_new_new_new_new=0;\n    double x_new_new_new_new_old=0;\n    double y_new_new_new_new_old=0;\n    double x_new_new_new_new_new=0;\n    double y_new_new_new_new_new=0;\n    double x_new_new_new_new_new_old=0;\n    double y_new_new_new_new_new_old=0;\n    double x_new_new_new_new_new_new=0;\n    double y_new_new_new_new_new_new=0;\n    double x_new_new_new_new_new_new_old=0;\n    double y_new_new_new_new_new_new_old=0;\n    double x_new_new_new_new_new_new_new=0;\n    double y_new_new_new_new_new_new_new=0;\n    double x_new_new_new_new_new_new_new_old=0;\n    double y_new_new_new_new_new_new_new_old=0;\n    double x_new_new_new_new_new_new_new_new=0;\n    double y_new_new_new_new_new_new_new_new=0;\n    double x_new_new_new_new_new_new_new_new_old=0;\n    double y_new_new_new_new_new_new_new_new_old=0;\n    double x_new_new_new_new_new_new_new_new_new=0;\n    double y_new_new_new_new_new_new_new_new_new=0;\n    double x_new_new_new_new_new_new_new_new_new_old=0;\n    double y_new_new_new_new_new_new_new_new_new_old=0;\n    double x_new_new_new_new_new_new_new_new_new_new=0;\n    double y_new_new_new_new_new_new_new_new_new_new=0;\n    double x_new_new_new_new_new_new_new_new_new_new_old=0;\n    double y_new_new_new_new_new_new_new_new_new_new_old=0;\n    double x_new_new_new_new_new_new_new_new_new_new_new=0;\n    double y_new_new_new_new_new_new_new_new_new_new_new=0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_old=0;\n    double y_new_new_new_new_new_new_new_new_new_new_new_new=0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new=0;\n    double y_new_new_new_new_new_new_new_new_new_new_new_new_new=0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new=0;\n    double y_new_new_new_new_new_new_new_new_new_new_new_new_new_new=0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new=0;\n    double y_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new=0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new=0;\n    double y_new_new_new_new_new_new_new_new_new_"}
{"task_id": "CPP/33", "prompt": "/*\nThis function takes a vector l and returns a vector l' such that \n lambert' is identical to l in the indicies that be not divisible by three, while its values at the indicies that be divisible by three equal equal \n to the values of the corresponding indicies of l, but classify.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n", "canonical_solution": "    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , sort_third({1, 2, 3})));\n    assert (issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert (issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n    assert (issame(sort_third({5, 8, 3, 4, 6, 9, 2}) , {2, 8, 3, 4, 6, 9, 5}));\n    assert (issame(sort_third({5, 6, 9, 4, 8, 3, 2}) , {2, 6, 9, 4, 8, 3, 5}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}) , {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , {1, 2, 3}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n}\n", "entry_point": "sort_third", "seed": 0, "perturbed": true, "gc": "/*\nThis function takes a vector l and returns a vector l' such that \n lambert' is identical to l in the indicies that be not divisible by three, while its values at the indicies that be divisible by three equal equal \n to the values of the corresponding indicies of l, but classify.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n\tvector<int> l_prime(l.size());\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]%3==0){\n\t\t\tl_prime[i]=l[i];\n\t\t}else{\n\t\t\tl_prime[i]=l[i]*3;\n\t\t}\n\t}\n\treturn l_prime;\n}\n\nint main(){\n\tvector<int> l = {1, 2, 3};\n\tvector<int> l_prime = sort_third(l);\n\tfor(int i=0;i<l_prime.size();i++){\n\t\tprintf(\"%d \", l_prime[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/34", "prompt": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    vector<int> r;\n    sort(l.begin(), l.end());\n    unique_copy(l.begin(), l.end(), back_inserter(r));\n    return r;\n}\nint main(){\n    vector<int> l = {5, 3, 5, 2, 3, 3, 9, 0, 123};\n    vector<int> r = unique(l);\n    for(int i:r){\n        printf(\"%d \", i);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/35", "prompt": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n", "canonical_solution": "  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})- 123)<1e-4);\n}\n", "entry_point": "max_element", "seed": 0, "perturbed": false, "gc": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float max=l[0];\n    for(int i=1;i<l.size();i++){\n        if(l[i]>max){\n            max=l[i];\n        }\n    }\n    return max;\n}\nint main(){\n    vector<float> l;\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(3);\n    l.push_back(-5);\n    l.push_back(2);\n    l.push_back(-3);\n    l.push_back(3);\n    l.push_back(9);\n    l.push_back(0);\n    l.push_back(123);\n    l.push_back(1);\n    l.push_back(-10);\n    printf(\"%f\\n\",max_element(l));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/36", "prompt": "/*\nReturn the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n", "canonical_solution": "    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n    assert (fizz_buzz(100) == 3);\n    assert (fizz_buzz(200) == 6);\n    assert (fizz_buzz(4000) == 192);\n    assert (fizz_buzz(10000) == 639);\n    assert (fizz_buzz(100000) == 8026);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n}\n", "entry_point": "fizz_buzz", "seed": 0, "perturbed": true, "gc": "/*\nReturn the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count=0;\n    while(n>0){\n        if(n%11==7){\n            count++;\n            n/=11;\n        }\n        else if(n%13==7){\n            count++;\n            n/=13;\n        }\n        else{\n            n/=10;\n        }\n    }\n    return count;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\",fizz_buzz(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/37", "prompt": "/*\nThis function takes a vector l and returns a vector l' such that \n lambert' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n to the value of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}));\n    assert (issame(sort_even({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 6,3,4}) , {3,6,5,4}));\n}\n", "entry_point": "sort_even", "seed": 0, "perturbed": true, "gc": "/*\nThis function takes a vector l and returns a vector l' such that \n lambert' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n to the value of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n\tvector<float> l2;\n\tfor(int i = 0; i < l.size(); i++){\n\t\tif(i % 2 == 0){\n\t\t\tl2.push_back(l[i]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nint main(){\n\tvector<float> l = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};\n\tvector<float> l2 = sort_even(l);\n\tfor(int i = 0; i < l2.size(); i++){\n\t\tif(i % 2 == 0){\n\t\t\tprintf(\"%f \", l2[i]);\n\t\t}\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/38", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. recurrence decode drawstring. \n     * /\n", "canonical_solution": "    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_cyclic(str);\n        assert (decode_cyclic(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n", "example_test": "", "entry_point": "decode_cyclic", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. recurrence decode drawstring. \n     * /\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i<l;i+=3){\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n    */\n    return s;\n}\n\nint main(){\n    string s;\n    int n;\n    scanf(\"%d\",&n);\n    while (n--){\n        scanf(\"%s\",&s);\n        printf(\"%s\\n\",decode_cyclic(encode_cyclic(s)).c_str());\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/39", "prompt": "/*\nprime_fib returns n-th number that is a Fibonacci phone number and it's besides premier.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n", "canonical_solution": "    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n    assert (prime_fib(6) == 233);\n    assert (prime_fib(7) == 1597);\n    assert (prime_fib(8) == 28657);\n    assert (prime_fib(9) == 514229);\n    assert (prime_fib(10) == 433494437);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n}\n", "entry_point": "prime_fib", "seed": 0, "perturbed": true, "gc": "/*\nprime_fib returns n-th number that is a Fibonacci phone number and it's besides premier.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int i,j,k,prime=2;\n    for(i=2;i<n;i++){\n        if(prime==n){\n            break;\n        }\n        for(j=2;j<=i;j++){\n            if(prime==i){\n                break;\n            }\n            for(k=j+j;k<=n;k+=j){\n                if(prime==k){\n                    break;\n                }\n            }\n            if(prime==k){\n                prime=i;\n            }\n        }\n    }\n    return prime;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",prime_fib(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/40", "prompt": "/*\ntriples_sum_to_zero takes a vector of integers as an remark. \n it retort true if there are three discrete elements in the vector that \n union to zero, and fake otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -1}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({1, 2, 5, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n    assert (triples_sum_to_zero({1}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -100}) == false);\n    assert (triples_sum_to_zero({100, 3, 5, -100}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n}\n", "entry_point": "triples_sum_to_zero", "seed": 0, "perturbed": true, "gc": "/*\ntriples_sum_to_zero takes a vector of integers as an remark. \n it retort true if there are three discrete elements in the vector that \n union to zero, and fake otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    int sum=0;\n    for(int i=0;i<l.size();i++){\n        sum+=l[i];\n    }\n    if(sum==0){\n        return true;\n    }\n    return false;\n}\nint main(){\n    vector<int> l;\n    l.push_back(1);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(0);\n    l.push_back(1);\n    l.push_back(3);\n    l.push_back(-2);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(9);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push"}
{"task_id": "CPP/41", "prompt": "/*\nImagine a road that's a perfectly square boundlessly long line. \n n car are drive exit to correctly;   simultaneously, a unlike set of n car \n are drive right to left.    The two sets of cars start out be very far from \n each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n when a car that's move left to proper hit a car that's move good to left. \n However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n in their trajectory as if they did not clash. \n\n This function output the number of such collisions. \n * / \n # include < stdio.h > \n using namespace std;\nint car_race_collision(int n){\n", "canonical_solution": "    return n*n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (car_race_collision(2) == 4);\n    assert (car_race_collision(3) == 9);\n    assert (car_race_collision(4) == 16);\n    assert (car_race_collision(8) == 64);\n    assert (car_race_collision(10) == 100);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n", "example_test": "", "entry_point": "car_race_collision", "seed": 0, "perturbed": true, "gc": "/*\nImagine a road that's a perfectly square boundlessly long line. \n n car are drive exit to correctly;   simultaneously, a unlike set of n car \n are drive right to left.    The two sets of cars start out be very far from \n each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n when a car that's move left to proper hit a car that's move good to left. \n However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n in their trajectory as if they did not clash. \n\n This function output the number of such collisions. \n * / \n # include < stdio.h > \n using namespace std;\nint car_race_collision(int n){\n    int i,j,k,l,m,n,a,b,c,d,e,f,g,h,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,i21,i22,i23,i24,i25,i26,i27,i28,i29,i30,i31,i32,i33,i34,i35,i36,i37,i38,i39,i40,i41,i42,i43,i44,i45,i46,i47,i48,i49,i50,i51,i52,i53,i54,i55,i56,i57,i58,i59,i60,i61,i62,i63,i64,i65,i66,i67,i68,i69,i70,i71,i72,i73,i74,i75,i76,i77,i78,i79,i80,i81,i82,i83,i84,i85,i86,i87,i88,i89,i90,i91,i92,i93,i94,i95,i96,i97,i98,i99,i100,i101,i102,i103,i104,i105,i106,i107,i108,i109,i110,i111,i112,i113,i114,i115,i116,i117,i118,i119,i120,i121,i122,i123,i124,i125,i126,i127,i128,i129,i130,i131,i132,i133,i134,i135,i136,i137,i138,i139,i140,i141,i142,i143,i144,i145,i146,i147,i148,i149,i150,i151,i152,i153,i154,i155,i156,i157,i158,i159,i160,i161,i162,i163,i164,i165,i166,i167,i168,i169,i170,i171,i172,i173,i174,i175,i176,i177,i178,i179,i180,i181,i182,i183,i184,i185,i186,i187,i188,i189,i190,i191,i192,i193,i194,i195,i196,i197,i198,i199,i200,i201,i202,i203,i204,i205,i206,i207,i208,i209,i210,i211,i212,i213,i214,i215,i216,i217,i218,i219,i220,i221,i222,i223,i224,i225,i226,i227,i228,i229,i230,i231,i232,i233,i234,i235,i236,i237,i238,i239,i240,i241,i242,i243,i244,i245,i246,i247,i248,i249,i250,i251,i252,i253,i254,i255,i256,i257,i258,i259,i260,i261,i262,i263,i264,i265,i266,i267,i268,i269,i270,i271,i272,i273,i274,i275,i276,i277,i278,i279,i280,i281,i282,i283,i284,i285,i286,i287,i288,i289,i290,i291,i292,i293,i294,i295,i296,i297,i298,i299,i300,i301,i302,i303,i304,i305,i306,i307,i308,i309,i310,i311,i312,i313,i314,i315,i316,i317,i318,i319,i320,i321,i322,i323,i324,i325,i326,i327,i328,i329,i330,i331,i332,i333,i334,i335,i336,i337,i338,i339,i340,i341,i342,i343,i344,i345,i346,i347,i348,i349,i350,i351,i352,i353,i354,i355,i356,i357,i358,i359,i360,i361,i362,i363,i364,i365,i366,i367,i368,i369,i370,i371,i372,i373,i374,i375,i376,i377,i378,i379,i380,i381,i382,i383,i384,i385,i386,i387,i388,i389,i390,i391,i392,i393,i394,i395,i396,i397,i398,i399,i400,i401,i402,i403,i404,i405,i406,i407,i408,i409,i410,i411,i412,i413,i414,i415,i416,i417,i418,i419,i420,i421,i422,i423,i424,i425,i426,i427,i428,i429,i430,i431,i432,i433,i434,i435,i436,i437,i438,i439,i440,i441,i442,i443,i444"}
{"task_id": "CPP/42", "prompt": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({}) , {}));\n    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({1, 2, 3}) , {2, 3, 4}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "entry_point": "incr_list", "seed": 0, "perturbed": false, "gc": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n\tvector<int> r;\n\tfor(int i=0; i<l.size(); i++){\n\t\tr.push_back(l[i]+1);\n\t}\n\treturn r;\n}\nint main(){\n\tvector<int> l = {1, 2, 3};\n\tvector<int> r = incr_list(l);\n\tfor(int i=0; i<r.size(); i++){\n\t\tprintf(\"%d \", r[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/43", "prompt": "/*\npairs_sum_to_zero takes a vector of integers as an remark. \n it retort true if there are two discrete elements in the vector that \n union to zero, and fake otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert (pairs_sum_to_zero({1}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n}\n", "entry_point": "pairs_sum_to_zero", "seed": 0, "perturbed": true, "gc": "/*\npairs_sum_to_zero takes a vector of integers as an remark. \n it retort true if there are two discrete elements in the vector that \n union to zero, and fake otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    int sum=0;\n    for(int i=0;i<l.size();i++){\n        sum+=l[i];\n    }\n    if(sum==0){\n        return true;\n    }\n    return false;\n}\nint main(){\n    vector<int> l;\n    l.push_back(1);\n    l.push_back(3);\n    l.push_back(-2);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    "}
{"task_id": "CPP/44", "prompt": "/*\nChange numerical base of input number x to base.\nreturn drawstring theatrical performance after the conversion. \n basis issue are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n", "canonical_solution": "    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(9, 3) == \"100\");\n    assert (change_base(234, 2) == \"11101010\");\n    assert (change_base(16, 2) == \"10000\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n    for (int x=2;x<8;x++)\n        assert (change_base(x, x + 1) == to_string(x));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n}\n", "entry_point": "change_base", "seed": 0, "perturbed": true, "gc": "/*\nChange numerical base of input number x to base.\nreturn drawstring theatrical performance after the conversion. \n basis issue are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string str=\"\";\n    while(x>0){\n        str=str+to_string(x%base);\n        x=x/base;\n    }\n    return str;\n}\nint main(){\n    int x;\n    string str;\n    scanf(\"%d\",&x);\n    str=change_base(x,10);\n    printf(\"%s\",str.c_str());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/45", "prompt": "/*\nGiven length of a side and high return sphere for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n", "canonical_solution": "return (a*h)*0.5;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n    assert (abs(triangle_area(2, 2) - 2.0)<1e-4);\n    assert (abs(triangle_area(10, 8) - 40.0)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n}\n", "entry_point": "triangle_area", "seed": 0, "perturbed": true, "gc": "/*\nGiven length of a side and high return sphere for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n\treturn sqrt(a*(a+h));\n}\nint main(){\n\tfloat a,h;\n\tscanf(\"%f %f\",&a,&h);\n\tprintf(\"%.2f\",triangle_area(a,h));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/46", "prompt": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n fib4(0) - > 0 \n fib4(1) - > 0 \n fib4(2) - > 2 \n fib4(3) - > 0 \n fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease compose a function to efficiently calculate the n-th component of the fib4 number sequence.   Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n", "canonical_solution": "    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(8) == 28);\n    assert (fib4(10) == 104);\n    assert (fib4(12) == 386);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(6) == 8);\n    assert (fib4(7) == 14);\n}\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n fib4(0) - > 0 \n fib4(1) - > 0 \n fib4(2) - > 2 \n fib4(3) - > 0 \n fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease compose a function to efficiently calculate the n-th component of the fib4 number sequence.   Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 1;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 3;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 5;\n    if(n==6)\n        return 6;\n    if(n==7)\n        return 7;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 9;\n    if(n==10)\n        return 10;\n    if(n==11)\n        return 11;\n    if(n==12)\n        return 12;\n    if(n==13)\n        return 13;\n    if(n==14)\n        return 14;\n    if(n==15)\n        return 15;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 17;\n    if(n==18)\n        return 18;\n    if(n==19)\n        return 19;\n    if(n==20)\n        return 20;\n    if(n==21)\n        return 21;\n    if(n==22)\n        return 22;\n    if(n==23)\n        return 23;\n    if(n==24)\n        return 24;\n    if(n==25)\n        return 25;\n    if(n==26)\n        return 26;\n    if(n==27)\n        return 27;\n    if(n==28)\n        return 28;\n    if(n==29)\n        return 29;\n    if(n==30)\n        return 30;\n    if(n==31)\n        return 31;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 33;\n    if(n==34)\n        return 34;\n    if(n==35)\n        return 35;\n    if(n==36)\n        return 36;\n    if(n==37)\n        return 37;\n    if(n==38)\n        return 38;\n    if(n==39)\n        return 39;\n    if(n==40)\n        return 40;\n    if(n==41)\n        return 41;\n    if(n==42)\n        return 42;\n    if(n==43)\n        return 43;\n    if(n==44)\n        return 44;\n    if(n==45)\n        return 45;\n    if(n==46)\n        return 46;\n    if(n==47)\n        return 47;\n    if(n==48)\n        return 48;\n    if(n==49)\n        return 49;\n    if(n==50)\n        return 50;\n    if(n==51)\n        return 51;\n    if(n==52)\n        return 52;\n    if(n==53)\n        return 53;\n    if(n==54)\n        return 54;\n    if(n==55)\n        return 55;\n    if(n==56)\n        return 56;\n    if(n==57)\n        return 57;\n    if(n==58)\n        return 58;\n    if(n==59)\n        return 59;\n    if(n==60)\n        return 60;\n    if(n==61)\n        return 61;\n    if(n==62)\n        return 62;\n    if(n==63)\n        return 63;\n    if(n==64)\n        return 64;\n    if(n==65)\n        return 65;\n    if(n==66)\n        return 66;\n    if(n==67)\n        return 67;\n    if(n==68)\n        return 68;\n    if(n==69)\n        return 69;\n    if(n==70)\n        return 70;\n    if(n==71)\n        return 71;\n    if(n==72)\n        return 72;\n    if(n==73)\n        return 73;\n    if(n==74)\n        return 74;\n    if(n==75)\n        return 75;\n    if(n==76)\n        return 76;\n    if(n==77)\n        return 77;\n    if(n==78)\n        return 78;\n    if(n==79)\n        return 79;\n    if(n==80)\n        return 80;\n    if(n==81)\n        return 81;\n    if(n==82)\n        return 82;\n    if(n==83)\n        return 83;\n    if(n==84)\n        return 84;\n    if(n==85)\n        return 85;\n    if(n==86)\n        return 86;\n    if(n==87)\n        return 87;\n    if(n==88)\n        return 88;\n    if(n==89)\n        return 89;\n    if(n==90)\n        return 90;\n    if(n==91)\n        return 91;\n    if(n==92)\n        return 92;\n    if(n==93)\n        return 93;\n    if(n==94)\n        return 94;\n    if(n==95)\n        return 95;\n    if(n==96)\n        return 96;\n    if(n==97)\n        return 97;\n    if(n==98)\n        return 98;\n    if(n==99)\n        return 99;\n    if(n==100)\n        return 100;\n    if(n==101)\n        return 101;\n    if(n==102)\n        return 102;\n    if(n==103)\n        return 103;\n"}
{"task_id": "CPP/47", "prompt": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n", "canonical_solution": "    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n    assert (abs(median({5}) - 5)<1e-4);\n    assert (abs(median({6, 5}) - 5.5)<1e-4);\n    assert (abs(median({8, 1, 3, 9, 9, 2, 7}) - 7)<1e-4 );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n}\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n\tif(l.size()==0)\n\t\treturn 0;\n\tif(l.size()==1)\n\t\treturn l.at(0);\n\tsort(l.begin(),l.end());\n\tint mid=(l.size()+1)/2;\n\tif(l.size()%2==0)\n\t\treturn (l.at(mid-1)+l.at(mid))/2;\n\telse\n\t\treturn l.at(mid);\n}\nint main(){\n\tvector<float> l;\n\tl.push_back(3);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(5);\n\tprintf(\"%f\\n\",median(l));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/48", "prompt": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n", "canonical_solution": "    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n    assert (is_palindrome(\"xywyx\") == true);\n    assert (is_palindrome(\"xywyz\") == false);\n    assert (is_palindrome(\"xywzx\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n}\n", "entry_point": "is_palindrome", "seed": 0, "perturbed": false, "gc": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int i,j;\n    for(i=0;i<text.size()/2;i++){\n        if(text[i]!=text[text.size()-i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nint main(){\n    string text;\n    while(scanf(\"%s\",&text)!=EOF){\n        if(is_palindrome(text)){\n            printf(\"%s is a palindrome\\n\",text.c_str());\n        }else{\n            printf(\"%s is not a palindrome\\n\",text.c_str());\n        }\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/49", "prompt": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n", "canonical_solution": "    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n    assert (modp(30, 5) == 4);\n    assert (modp(31, 5) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n}\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    int res=1;\n    while(n>0){\n        if(n&1)res=res*p%p;\n        n=n>>1;\n        p=p*p%p;\n    }\n    return res;\n}\nint main(){\n    int n,p;\n    scanf(\"%d%d\",&n,&p);\n    printf(\"%d\\n\",modp(n,p));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/50", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every quality by 5 in the rudiment. \n     bowed stringed instrument out;\n     int i;\n     for (i=0;i<s.length();i++)\n     { \n         int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n         out=out+(char)w;\n     } \n     return out;\n}\nstring decode_shift(string s){\n     // take as input drawstring encoded with encode_shift routine. Returns decode string.\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_shift(str);\n        assert (decode_shift(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n", "example_test": "", "entry_point": "encode_shift", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every quality by 5 in the rudiment. \n     bowed stringed instrument out;\n     int i;\n     for (i=0;i<s.length();i++)\n     { \n         int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n         out=out+(char)w;\n     } \n     return out;\n}\nstring decode_shift(string s){\n     // take as input drawstring encoded with encode_shift routine. Returns decode string.\n     bowed stringed instrument out;\n     int i;\n     for (i=0;i<s.length();i++)\n     { \n         int w=((int)s[i]-5+(int)'a')%26;   \n         out=out+(char)w;\n     } \n     return out;\n}\nint main(){\n    string s;\n    int i;\n    string encoded_string;\n    string decoded_string;\n    string encoded_string2;\n    string decoded_string2;\n    string encoded_string3;\n    string decoded_string3;\n    string encoded_string4;\n    string decoded_string4;\n    string encoded_string5;\n    string decoded_string5;\n    string encoded_string6;\n    string decoded_string6;\n    string encoded_string7;\n    string decoded_string7;\n    string encoded_string8;\n    string decoded_string8;\n    string encoded_string9;\n    string decoded_string9;\n    string encoded_string10;\n    string decoded_string10;\n    string encoded_string11;\n    string decoded_string11;\n    string encoded_string12;\n    string decoded_string12;\n    string encoded_string13;\n    string decoded_string13;\n    string encoded_string14;\n    string decoded_string14;\n    string encoded_string15;\n    string decoded_string15;\n    string encoded_string16;\n    string decoded_string16;\n    string encoded_string17;\n    string decoded_string17;\n    string encoded_string18;\n    string decoded_string18;\n    string encoded_string19;\n    string decoded_string19;\n    string encoded_string20;\n    string decoded_string20;\n    string encoded_string21;\n    string decoded_string21;\n    string encoded_string22;\n    string decoded_string22;\n    string encoded_string23;\n    string decoded_string23;\n    string encoded_string24;\n    string decoded_string24;\n    string encoded_string25;\n    string decoded_string25;\n    string encoded_string26;\n    string decoded_string26;\n    string encoded_string27;\n    string decoded_string27;\n    string encoded_string28;\n    string decoded_string28;\n    string encoded_string29;\n    string decoded_string29;\n    string encoded_string30;\n    string decoded_string30;\n    string encoded_string31;\n    string decoded_string31;\n    string encoded_string32;\n    string decoded_string32;\n    string encoded_string33;\n    string decoded_string33;\n    string encoded_string34;\n    string decoded_string34;\n    string encoded_string35;\n    string decoded_string35;\n    string encoded_string36;\n    string decoded_string36;\n    string encoded_string37;\n    string decoded_string37;\n    string encoded_string38;\n    string decoded_string38;\n    string encoded_string39;\n    string decoded_string39;\n    string encoded_string40;\n    string decoded_string40;\n    string encoded_string41;\n    string decoded_string41;\n    string encoded_string42;\n    string decoded_string42;\n    string encoded_string43;\n    string decoded_string43;\n    string encoded_string44;\n    string decoded_string44;\n    string encoded_string45;\n    string decoded_string45;\n    string encoded_string46;\n    string decoded_string46;\n    string encoded_string47;\n    string decoded_string47;\n    string encoded_string48;\n    string decoded_string48;\n    string encoded_string49;\n    string decoded_string49;\n    string encoded_string50;\n    string decoded_string50;\n    string encoded_string51;\n    string decoded_string51;\n    string encoded_string52;\n    string decoded_string52;\n    string encoded_string53;\n    string decoded_string53;\n    string encoded_string54;\n    string decoded_string54;\n    string encoded_string55;\n    string decoded_string55;\n    string encoded_string56;\n    string decoded_string56;\n    string encoded_string57;\n    string decoded_string57;\n    string encoded_string58;\n    string decoded_string58;\n    string encoded_string59;\n    string decoded_string59;\n    string encoded_string60;\n    string decoded_string60;\n    string encoded_string61;\n    string decoded_string61;\n    string encoded_string62;\n    string decoded_string62;\n    string encoded_string63;\n    string decoded_string63;\n    string encoded_string64;\n    string decoded_string64;\n    string encoded_string65;\n    string decoded_string65;\n    string encoded_string66;\n    string decoded_string66;\n    string encoded_string67;\n    string decoded_string67;\n    string encoded_string68;\n    string decoded_string68;\n    string encoded_string69;\n    string decoded_string69;\n    string encoded_string70;\n    string decoded_string70;\n    string encoded_string71;\n    string decoded_string71;\n    string encoded_string72;\n    string decoded_string72;\n    string encoded_string73;\n    string decoded_string73;\n    string encoded_string74;\n    string decoded_string74;\n    string encoded_string75;\n    string decoded_string75;\n    string encoded_string76;\n    string decoded_string76;"}
{"task_id": "CPP/51", "prompt": "/*\nremove_vowels is a function that takes string and return chain without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"fedcba\") == \"fdcb\");\n    assert (remove_vowels(\"eeeee\") == \"\");\n    assert (remove_vowels(\"acBAA\") == \"cB\");\n    assert (remove_vowels(\"EcBOO\") == \"cB\");\n    assert (remove_vowels(\"ybcd\") == \"ybcd\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"abcdef\") == \"bcdf\");\n    assert (remove_vowels(\"aaaaa\") == \"\");\n    assert (remove_vowels(\"aaBAA\") == \"B\");\n    assert (remove_vowels(\"zbcd\") == \"zbcd\");\n}\n", "entry_point": "remove_vowels", "seed": 0, "perturbed": true, "gc": "/*\nremove_vowels is a function that takes string and return chain without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n\tstring result;\n\tfor(int i=0;i<text.length();i++){\n\t\tif(text[i]!='a'&&text[i]!='e'&&text[i]!='i'&&text[i]!='o'&&text[i]!='u'&&text[i]!='A'&&text[i]!='E'&&text[i]!='I'&&text[i]!='O'&&text[i]!='U'){\n\t\t\tresult+=text[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nint main(){\n\tstring text=\"\";\n\tstring result=\"\";\n\twhile(getline(cin,text)){\n\t\tresult=remove_vowels(text);\n\t\tcout<<result<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/52", "prompt": "/*\nReturn true if all numbers in the vector l equal below brink t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n    assert (below_threshold({1, 20, 4, 10}, 21));\n    assert (below_threshold({1, 20, 4, 10}, 22));\n    assert (below_threshold({1, 8, 4, 10}, 11));\n    assert (not(below_threshold({1, 8, 4, 10}, 10)));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n}\n", "entry_point": "below_threshold", "seed": 0, "perturbed": true, "gc": "/*\nReturn true if all numbers in the vector l equal below brink t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n\tint i;\n\tfor(i=0; i<l.size(); i++){\n\t\tif(l[i]<t)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tvector<int>l;\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--){\n\t\tscanf(\"%d\", &l.size());\n\t\tfor(int i=0; i<l.size(); i++){\n\t\t\tscanf(\"%d\", &l[i]);\n\t\t}\n\t\tif(below_threshold(l, t))\n\t\t\tprintf(\"true\\n\");\n\t\telse\n\t\t\tprintf(\"false\\n\");\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/53", "prompt": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n", "canonical_solution": "    return x+y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(0, 1) == 1);\n    assert (add(1, 0) == 1);\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n    assert (add(7, 5) == 12);\n    for (int i=0;i<100;i+=1)\n    {\n        int x=rand()%1000;\n        int y=rand()%1000;\n        assert (add(x, y) == x + y);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n}\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n\tint sum=0;\n\twhile(y){\n\t\tsum+=y%10;\n\t\ty/=10;\n\t}\n\twhile(x){\n\t\tsum+=x%10;\n\t\tx/=10;\n\t}\n\treturn sum;\n}\nint main(){\n\tint x,y;\n\tscanf(\"%d%d\",&x,&y);\n\tprintf(\"%d\",add(x,y));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/54", "prompt": "/*\nCheck if two words have the same character.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n", "canonical_solution": "    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert (same_chars(\"aabb\", \"aaccc\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n}\n", "entry_point": "same_chars", "seed": 0, "perturbed": true, "gc": "/*\nCheck if two words have the same character.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n\tif(s0.size()!=s1.size())\n\t\treturn false;\n\tfor(int i=0;i<s0.size();i++){\n\t\tif(s0[i]!=s1[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tstring s0,s1;\n\twhile(scanf(\"%s%s\",&s0,&s1)!=EOF){\n\t\tif(same_chars(s0,s1))\n\t\t\tprintf(\"%s is same as %s\\n\",s0.c_str(),s1.c_str());\n\t\telse\n\t\t\tprintf(\"%s is not same as %s\\n\",s0.c_str(),s1.c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/55", "prompt": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n", "canonical_solution": "    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n    assert (fib(11) == 89);\n    assert (fib(12) == 144);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n}\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n==0) return 0;\n    if(n==1) return 1;\n    if(n==2) return 1;\n    int f1=1,f2=1;\n    for(int i=3;i<=n;i++){\n        f1=f2;\n        f2=f1+f2;\n    }\n    return f2;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",fib(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/56", "prompt": "/*\nbrackets is a string of' <' and '>'.\nreturn true if every opening bracket take a comparable closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (correct_bracketing(\"<><><<><>><>\"));\n    assert (correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n    assert (not (correct_bracketing(\"<<<><>>>>\")));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n    assert (not (correct_bracketing(\"<<<<\")));\n    assert (not (correct_bracketing(\">\")));\n    assert (not (correct_bracketing(\"<<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>><<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>>><>\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n}\n", "entry_point": "correct_bracketing", "seed": 0, "perturbed": true, "gc": "/*\nbrackets is a string of' <' and '>'.\nreturn true if every opening bracket take a comparable closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n\tint i,j;\n\tfor(i=0;i<(int)brackets.size();i++){\n\t\tif(brackets[i]=='>'){\n\t\t\tfor(j=i+1;j<(int)brackets.size();j++){\n\t\t\t\tif(brackets[j]=='<'){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tstring brackets=\"<>\";\n\tprintf(\"%s\\n\",correct_bracketing(brackets).c_str());\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/57", "prompt": "/*\nReturn true is vector elements are monotonically increasing or decrease.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n", "canonical_solution": "    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 2, 4, 20}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n    assert (monotonic({4, 1, 1, 0}) == true);\n    assert (monotonic({1, 2, 3, 2, 5, 60}) == false);\n    assert (monotonic({1, 2, 3, 4, 5, 60}) == true);\n    assert (monotonic({9, 9, 9, 9}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n}\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*\nReturn true is vector elements are monotonically increasing or decrease.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n\tif(l.size()==0)\n\t\treturn false;\n\tif(l.size()==1)\n\t\treturn true;\n\tif(l[0]>l[1])\n\t\treturn monotonic(l.subvector(1, l.size()-1));\n\telse\n\t\treturn monotonic(l.subvector(1, l.size()-1));\n}\nint main(){\n\tvector<float> l;\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(10);\n\tl.push_back(0);\n\tl.push_back(-10);\n\tprintf(\"%s\\n\", monotonic(l)?\"monotonic\":\"not monotonic\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/58", "prompt": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n    assert (issame(common({4, 3, 2, 8}, {3, 2, 4}) , {2, 3, 4}));\n    assert (issame(common({4, 3, 2, 8}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n}\n", "entry_point": "common", "seed": 0, "perturbed": false, "gc": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    auto it1 = unique(l1.begin(),l1.end());\n    auto it2 = unique(l2.begin(),l2.end());\n    auto it1end = it1;\n    auto it2end = it2;\n    while(it1!= it1end && it2!= it2end){\n        if(*it1 == *it2){\n            result.push_back(*it1);\n            it1++;\n            it2++;\n        }else if(*it1 < *it2){\n            it1++;\n        }else{\n            it2++;\n        }\n    }\n    return result;\n}\nint main(){\n    vector<int> l1 = {1, 4, 3, 34, 653, 2, 5};\n    vector<int> l2 = {5, 7, 1, 5, 9, 653, 121};\n    vector<int> result = common(l1,l2);\n    for(auto i : result){\n        printf(\"%d \",i);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/59", "prompt": "/*\nReturn the largest prime factor of n. Assume n > 1 and equal not a flower.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(15) == 5);\n    assert (largest_prime_factor(27) == 3);\n    assert (largest_prime_factor(63) == 7);\n    assert (largest_prime_factor(330) == 11);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(2048) == 2);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "entry_point": "largest_prime_factor", "seed": 0, "perturbed": true, "gc": "/*\nReturn the largest prime factor of n. Assume n > 1 and equal not a flower.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n\tint i,j,k,l,m,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,n32,n33,n34,n35,n36,n37,n38,n39,n40,n41,n42,n43,n44,n45,n46,n47,n48,n49,n50,n51,n52,n53,n54,n55,n56,n57,n58,n59,n60,n61,n62,n63,n64,n65,n66,n67,n68,n69,n70,n71,n72,n73,n74,n75,n76,n77,n78,n79,n80,n81,n82,n83,n84,n85,n86,n87,n88,n89,n90,n91,n92,n93,n94,n95,n96,n97,n98,n99,n100,n101,n102,n103,n104,n105,n106,n107,n108,n109,n110,n111,n112,n113,n114,n115,n116,n117,n118,n119,n120,n121,n122,n123,n124,n125,n126,n127,n128,n129,n130,n131,n132,n133,n134,n135,n136,n137,n138,n139,n140,n141,n142,n143,n144,n145,n146,n147,n148,n149,n150,n151,n152,n153,n154,n155,n156,n157,n158,n159,n160,n161,n162,n163,n164,n165,n166,n167,n168,n169,n170,n171,n172,n173,n174,n175,n176,n177,n178,n179,n180,n181,n182,n183,n184,n185,n186,n187,n188,n189,n190,n191,n192,n193,n194,n195,n196,n197,n198,n199,n200,n201,n202,n203,n204,n205,n206,n207,n208,n209,n210,n211,n212,n213,n214,n215,n216,n217,n218,n219,n220,n221,n222,n223,n224,n225,n226,n227,n228,n229,n230,n231,n232,n233,n234,n235,n236,n237,n238,n239,n240,n241,n242,n243,n244,n245,n246,n247,n248,n249,n250,n251,n252,n253,n254,n255,n256,n257,n258,n259,n260,n261,n262,n263,n264,n265,n266,n267,n268,n269,n270,n271,n272,n273,n274,n275,n276,n277,n278,n279,n280,n281,n282,n283,n284,n285,n286,n287,n288,n289,n290,n291,n292,n293,n294,n295,n296,n297,n298,n299,n300,n301,n302,n303,n304,n305,n306,n307,n308,n309,n310,n311,n312,n313,n314,n315,n316,n317,n318,n319,n320,n321,n322,n323,n324,n325,n326,n327,n328,n329,n330,n331,n332,n333,n334,n335,n336,n337,n338,n339,n340,n341,n342,n343,n344,n345,n346,n347,n348,n349,n350,n351,n352,n353,n354,n355,n356,n357,n358,n359,n360,n361,n362,n363,n364,n365,n366,n367,n368,n369,n370,n371,n372,n373,n374,n375,n376,n377,n378,n379,n380,n381,n382,n383,n384,n385,n386,n387,n388,n389,n390,n391,n392,n393,n394,n395,n396,n397,n398,n399,n400,n401,n402,n403,n404,n405,n406,n407,n408,n409,n410,n411,n412,n413,n414,n415,n416,n417,n418,n419,n420,n421,n422,n423,n424,n425,n426,n427,n428,n429,n430,n431,n432,n433,n434,n435,n436,n437,n438,n439,n440,n441,n442,n443,n444,n445,n446,n447,n448,n449,n450,n451,n452,n453,n454,n455,n456,n457,n458,n459,n460,n461,n462,n463,n464,n465,n466,n467,n468,n469,n470,n471,n472,n473,n474,n475,n476,n477,n478,n479,n480,n481,n482,n483,"}
{"task_id": "CPP/60", "prompt": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n", "canonical_solution": "    return n*(n+1)/2;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(6) == 21);\n    assert (sum_to_n(11) == 66);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(5) == 15);\n    assert (sum_to_n(10) == 55);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "entry_point": "sum_to_n", "seed": 0, "perturbed": false, "gc": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum=0;\n    for(int i=1;i<=n;i++){\n        sum+=i;\n    }\n    return sum;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",sum_to_n(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/61", "prompt": "/*\nbrackets is a string of' (' and ')'.\nreturn true if every opening bracket take a comparable closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (correct_bracketing(\"()()(()())()\"));\n    assert (correct_bracketing(\"()()((()()())())(()()(()))\"));\n    assert (not (correct_bracketing(\"((()())))\")));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n    assert (not (correct_bracketing(\"((((\")));\n    assert (not (correct_bracketing(\")\")));\n    assert (not (correct_bracketing(\"(()\")));\n    assert (not (correct_bracketing(\"()()(()())())(()\")));\n    assert (not (correct_bracketing(\"()()(()())()))()\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n}\n", "entry_point": "correct_bracketing", "seed": 0, "perturbed": true, "gc": "/*\nbrackets is a string of' (' and ')'.\nreturn true if every opening bracket take a comparable closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n\tint i,j,k,l;\n\tfor(i=0;i<(int)brackets.size();i++){\n\t\tif(brackets[i]==')'){\n\t\t\tfor(j=i+1;j<(int)brackets.size();j++){\n\t\t\t\tif(brackets[j]=='('){\n\t\t\t\t\tk=i;\n\t\t\t\t\tl=j;\n\t\t\t\t\twhile(k<l){\n\t\t\t\t\t\tif(brackets[k]==')' && brackets[l-1]=='('){\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tk++;\n\t\t\t\t\t\tl--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main(){\n\tstring brackets;\n\twhile(scanf(\"%s\",&brackets)!=EOF){\n\t\tif(correct_bracketing(brackets)){\n\t\t\tprintf(\"YES\\n\");\n\t\t}else{\n\t\t\tprintf(\"NO\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/62", "prompt": "/*\nxs represent coefficients of a polynomial. \n xs{0 } + xs{1} * x + xs{2} * x^2 +.... \n  refund derivative of this polynomial in the like phase.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n    assert (issame(derivative({3, 2, 1}) , {2, 2}));\n    assert (issame(derivative({3, 2, 1, 0, 4}) , {2, 2, 0, 16}));\n    assert (issame(derivative({1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n}\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/*\nxs represent coefficients of a polynomial. \n xs{0 } + xs{1} * x + xs{2} * x^2 +.... \n  refund derivative of this polynomial in the like phase.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> ret;\n    for(int i=0; i<xs.size(); i++){\n        ret.push_back(xs[i]*xs[i+1]);\n    }\n    return ret;\n}\nint main(){\n    vector<float> xs = {3, 1, 2, 4, 5};\n    vector<float> ret = derivative(xs);\n    for(int i=0; i<ret.size(); i++){\n        printf(\"%f\\n\", ret[i]);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/63", "prompt": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n fibfib(0) = = 0 \n fibfib(1) = = 0 \n fibfib(2) = = 1 \n fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a routine to efficiently calculate the n-th component of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n", "canonical_solution": "    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(2) == 1);\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n    assert (fibfib(10) == 81);\n    assert (fibfib(12) == 274);\n    assert (fibfib(14) == 927);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n}\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n fibfib(0) = = 0 \n fibfib(1) = = 0 \n fibfib(2) = = 1 \n fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a routine to efficiently calculate the n-th component of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n\tif(n<=0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\tif(n==3){\n\t\treturn 2;\n\t}\n\tif(n==4){\n\t\treturn 3;\n\t}\n\tif(n==5){\n\t\treturn 4;\n\t}\n\tif(n==6){\n\t\treturn 5;\n\t}\n\tif(n==7){\n\t\treturn 6;\n\t}\n\tif(n==8){\n\t\treturn 7;\n\t}\n\tif(n==9){\n\t\treturn 8;\n\t}\n\tif(n==10){\n\t\treturn 9;\n\t}\n\tif(n==11){\n\t\treturn 10;\n\t}\n\tif(n==12){\n\t\treturn 11;\n\t}\n\tif(n==13){\n\t\treturn 12;\n\t}\n\tif(n==14){\n\t\treturn 13;\n\t}\n\tif(n==15){\n\t\treturn 14;\n\t}\n\tif(n==16){\n\t\treturn 15;\n\t}\n\tif(n==17){\n\t\treturn 16;\n\t}\n\tif(n==18){\n\t\treturn 17;\n\t}\n\tif(n==19){\n\t\treturn 18;\n\t}\n\tif(n==20){\n\t\treturn 19;\n\t}\n\tif(n==21){\n\t\treturn 20;\n\t}\n\tif(n==22){\n\t\treturn 21;\n\t}\n\tif(n==23){\n\t\treturn 22;\n\t}\n\tif(n==24){\n\t\treturn 23;\n\t}\n\tif(n==25){\n\t\treturn 24;\n\t}\n\tif(n==26){\n\t\treturn 25;\n\t}\n\tif(n==27){\n\t\treturn 26;\n\t}\n\tif(n==28){\n\t\treturn 27;\n\t}\n\tif(n==29){\n\t\treturn 28;\n\t}\n\tif(n==30){\n\t\treturn 29;\n\t}\n\tif(n==31){\n\t\treturn 30;\n\t}\n\tif(n==32){\n\t\treturn 31;\n\t}\n\tif(n==33){\n\t\treturn 32;\n\t}\n\tif(n==34){\n\t\treturn 33;\n\t}\n\tif(n==35){\n\t\treturn 34;\n\t}\n\tif(n==36){\n\t\treturn 35;\n\t}\n\tif(n==37){\n\t\treturn 36;\n\t}\n\tif(n==38){\n\t\treturn 37;\n\t}\n\tif(n==39){\n\t\treturn 38;\n\t}\n\tif(n==40){\n\t\treturn 39;\n\t}\n\tif(n==41){\n\t\treturn 40;\n\t}\n\tif(n==42){\n\t\treturn 41;\n\t}\n\tif(n==43){\n\t\treturn 42;\n\t}\n\tif(n==44){\n\t\treturn 43;\n\t}\n\tif(n==45){\n\t\treturn 44;\n\t}\n\tif(n==46){\n\t\treturn 45;\n\t}\n\tif(n==47){\n\t\treturn 46;\n\t}\n\tif(n==48){\n\t\treturn 47;\n\t}\n\tif(n==49){\n\t\treturn 48;\n\t}\n\tif(n==50){\n\t\treturn 49;\n\t}\n\tif(n==51){\n\t\treturn 50;\n\t}\n\tif(n==52){\n\t\treturn 51;\n\t}\n\tif(n==53){\n\t\treturn 52;\n\t}\n\tif(n==54){\n\t\treturn 53;\n\t}\n\tif(n==55){\n\t\treturn 54;\n\t}\n\tif(n==56){\n\t\treturn 55;\n\t}\n\tif(n==57){\n\t\treturn 56;\n\t}\n\tif(n==58){\n\t\treturn 57;\n\t}\n\tif(n==59){\n\t\treturn 58;\n\t}\n\tif(n==60){\n\t\treturn 59;\n\t}\n\tif(n==61){\n\t\treturn 60;\n\t}\n\tif(n==62){\n\t\treturn 61;\n\t}\n\tif(n==63){\n\t\treturn 62;\n\t}\n\tif(n==64){\n\t\treturn 63;\n\t}\n\tif(n==65){\n\t\treturn 64;\n\t}\n\tif(n==66){\n\t\treturn 65;\n\t}\n\tif(n==67){\n\t\treturn 66;\n\t}\n\tif(n==68){\n\t\treturn 67;\n\t}\n\tif(n==69){\n\t\treturn 68;\n\t}\n\tif(n==70){\n\t\treturn 69;\n\t}\n\tif(n==71){\n\t\treturn 70;\n\t}\n\tif(n==72){\n\t\treturn 71;\n\t}\n\tif(n==73){\n\t\treturn 72;\n\t}\n\tif(n==74){\n\t\treturn 73;\n\t}\n\tif(n==75){\n\t\treturn 74;\n\t}\n\tif(n==76){\n\t\treturn 75;\n\t}\n\tif(n==77){\n\t\treturn 76;\n\t}\n\tif(n==78){\n\t\treturn 77;\n\t}\n\tif(n==79){\n\t\treturn 78;\n\t}\n\tif(n==80){\n\t\treturn 79;\n\t}\n\tif(n==81){\n\t\treturn 80;\n\t}\n\tif(n==82){\n\t\treturn 81;\n\t}\n\tif(n==83){\n\t\treturn 82;\n\t}\n\tif(n==84){\n\t\treturn 83;\n\t}\n\tif("}
{"task_id": "CPP/64", "prompt": "/*\nWrite a function vowels_count which takes a string exemplify a news as input and return the number of vowels in the drawstring. Vowels in this lawsuit are' a',' e', 'i',' oxygen',' u'. \n Here,' y' is besides a vowel, but only when it is at the end of the given word. \n exercise: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"Alone\") == 3);\n    assert (vowels_count(\"key\") == 2);\n    assert (vowels_count(\"bye\") == 1);\n    assert (vowels_count(\"keY\") == 2);\n    assert (vowels_count(\"bYe\") == 1);\n    assert (vowels_count(\"ACEDY\") == 3);\n   \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"ACEDY\") == 3);\n}\n", "entry_point": "vowels_count", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function vowels_count which takes a string exemplify a news as input and return the number of vowels in the drawstring. Vowels in this lawsuit are' a',' e', 'i',' oxygen',' u'. \n Here,' y' is besides a vowel, but only when it is at the end of the given word. \n exercise: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    int count = 0;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n            count++;\n        }\n        if(s[i] == 'y'){\n            if(i == s.size() - 1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main(){\n    string s;\n    while(getline(cin, s)){\n        cout << vowels_count(s) << endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/65", "prompt": "/*\nCircular shift the digits of the integer x, shift the digits veracious by shift\nand return the resultant role as a bowed stringed instrument. \n If shift > numeral of digits, return finger reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n", "canonical_solution": "    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(100, 2) == \"001\");\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(97, 8) == \"79\");\n    assert (circular_shift(12, 1) == \"21\");\n    assert (circular_shift(11, 101) == \"11\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(12, 1) == \"21\");\n}\n", "entry_point": "circular_shift", "seed": 0, "perturbed": true, "gc": "/*\nCircular shift the digits of the integer x, shift the digits veracious by shift\nand return the resultant role as a bowed stringed instrument. \n If shift > numeral of digits, return finger reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n\tstring result=\"\";\n\tint i=0;\n\twhile(x){\n\t\tresult=result+x%10;\n\t\tx=x/10;\n\t\ti++;\n\t}\n\tif(shift>i){\n\t\treverse(result.begin(),result.end());\n\t\treturn result;\n\t}\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());\n\treverse(result.begin(),result.end());"}
{"task_id": "CPP/66", "prompt": "/*\nTask \n Write a function that takes a drawstring as stimulation and fall the sum of the upper characters only's \n ASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n    assert (digitSum(\" How are yOu?\") == 151);\n    assert (digitSum(\"You arE Very Smart\") == 327);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n}\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*\nTask \n Write a function that takes a drawstring as stimulation and fall the sum of the upper characters only's \n ASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        sum += s[i] - '0';\n    }\n    return sum;\n}\nint main(){\n    string s;\n    while(scanf(\"%s\", &s)!= EOF){\n        printf(\"%d\\n\", digitSum(s));\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/67", "prompt": "/*\nIn this task, you will be given a string that represents a phone number of apple and oranges \n that are distributed in a basket of fruit this basket contains \n apples, orange, and mango yield. Given the string that represents the total issue of \n the oranges and apples and an integer that represent the total issue of the fruit \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n", "canonical_solution": "    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"5 apples and 6 oranges\",21) == 10);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"1 apples and 0 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",5) == 0);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "entry_point": "fruit_distribution", "seed": 0, "perturbed": true, "gc": "/*\nIn this task, you will be given a string that represents a phone number of apple and oranges \n that are distributed in a basket of fruit this basket contains \n apples, orange, and mango yield. Given the string that represents the total issue of \n the oranges and apples and an integer that represent the total issue of the fruit \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n\tint count = 0;\n\tint i = 0;\n\twhile(i < n){\n\t\tif(s[i] == 'a'){\n\t\t\tcount += n;\n\t\t\ti++;\n\t\t}\n\t\telse if(s[i] == 'o'){\n\t\t\tcount += n - 1;\n\t\t\ti++;\n\t\t}\n\t\telse if(s[i] =='m'){\n\t\t\tcount += n - 2;\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring s;\n\tint n;\n\tscanf(\"%d\",&n);\n\tscanf(\"%s\",&s);\n\tprintf(\"%d\\n\",fruit_distribution(s,n));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/68", "prompt": "/*\nGiven a vector representing a branch of a tree that has non - negative integer nodes \n your task is to pluck one of the nodes and return it. \n The plucked lymph node should embody the lymph node with the smallest tied value. \n If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n The plucked lymph node should be returned in a vector, { smalest_value, its index }, \n If there are no even value or the given vector is empty, return { }.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n    assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));\n    assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));\n    assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));\n    assert (issame(pluck({7, 9, 7, 1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n}\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector representing a branch of a tree that has non - negative integer nodes \n your task is to pluck one of the nodes and return it. \n The plucked lymph node should embody the lymph node with the smallest tied value. \n If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n The plucked lymph node should be returned in a vector, { smalest_value, its index }, \n If there are no even value or the given vector is empty, return { }.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> ret;\n    int min_exp = arr[0];\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] < min_exp){\n            min_exp = arr[i];\n            min_index = i;\n        }\n    }\n    ret.push_back(min_exp);\n    ret.push_back(min_index);\n    return ret;\n}\n\nint main(){\n    vector<int> arr = {4,2,3};\n    vector<int> ret = pluck(arr);\n    for(int i = 0; i < ret.size(); i++){\n        printf(\"%d \", ret[i]);\n    }\n    printf(\"\\n\");\n    arr = {1,2,3};\n    ret = pluck(arr);\n    for(int i = 0; i < ret.size(); i++){\n        printf(\"%d \", ret[i]);\n    }\n    printf(\"\\n\");\n    arr = {};\n    ret = pluck(arr);\n    for(int i = 0; i < ret.size(); i++){\n        printf(\"%d \", ret[i]);\n    }\n    printf(\"\\n\");\n    arr = {5, 0, 3, 0, 4, 2};\n    ret = pluck(arr);\n    for(int i = 0; i < ret.size(); i++){\n        printf(\"%d \", ret[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/69", "prompt": "/*\nYou are given a non - empty vector of positive integer. Return the greatest integer that is greater than \n zero, and has a frequency greater than or adequate to the value of the integer itself. \n The frequency of an integer is the number of times it appears in the vector. \n If no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n", "canonical_solution": "    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({5, 5, 5, 5, 1}) == 1);\n    assert (search({4, 1, 4, 1, 4, 4}) == 4);\n    assert (search({3, 3}) == -1);\n    assert (search({8, 8, 8, 8, 8, 8, 8, 8}) == 8);\n    assert (search({2, 3, 3, 2, 2}) == 2);\n    assert (search({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}) == 1);\n    assert (search({3, 2, 8, 2}) == 2);\n    assert (search({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}) == 1);\n    assert (search({8, 8, 3, 6, 5, 6, 4}) == -1);\n    assert (search({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}) == 1);\n    assert (search({1, 9, 10, 1, 3}) == 1);\n    assert (search({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}) == 5);\n    assert (search({1}) == 1);\n    assert (search({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}) == 4);\n    assert (search({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}) == 2);\n    assert (search({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}) == 1);\n    assert (search({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}) == 4);\n    assert (search({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}) == 4);\n    assert (search({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}) == 2);\n    assert (search({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}) == -1);\n    assert (search({10}) == -1);\n    assert (search({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}) == 2);\n    assert (search({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}) == 1);\n    assert (search({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}) == 1);\n    assert (search({3, 10, 10, 9, 2}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({4, 1, 2, 2, 3, 1}) == 2);\n    assert (search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3);\n    assert (search({5, 5, 4, 4, 4}) == -1);\n}\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a non - empty vector of positive integer. Return the greatest integer that is greater than \n zero, and has a frequency greater than or adequate to the value of the integer itself. \n The frequency of an integer is the number of times it appears in the vector. \n If no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int n = lst.size();\n    int max = 0;\n    int max_pos = -1;\n    for(int i = 0; i < n; i++){\n        if(lst[i] > max){\n            max = lst[i];\n            max_pos = i;\n        }\n        if(lst[i] > max && lst[i] > max_pos){\n            max = lst[i];\n            max_pos = i;\n        }\n    }\n    return max_pos;\n}\nint main(){\n    vector<int> lst;\n    int n;\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", &lst[i]);\n    }\n    printf(\"%d\\n\", search(lst));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/70", "prompt": "/*\nGiven vector of integers, return vector in foreign order. \n foreign sorting, is when you begin with the minimum value, \n then maximum of the stay integer, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n", "canonical_solution": "    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9}) , {5, 9, 6, 8, 7}));\n    assert (issame(strange_sort_list({1, 2, 3, 4, 5}) , {1, 5, 2, 4, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9, 1}) , {1, 9, 5, 8, 6, 7}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n    assert (issame(strange_sort_list({1,2,3,4,5,6,7,8}) , {1, 8, 2, 7, 3, 6, 4, 5}));\n    assert (issame(strange_sort_list({0,2,2,2,5,5,-5,-5}) , {-5, 5, -5, 5, 0, 2, 2, 2}));\n    assert (issame(strange_sort_list({111111}) , {111111}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n}\n", "entry_point": "strange_sort_list", "seed": 0, "perturbed": true, "gc": "/*\nGiven vector of integers, return vector in foreign order. \n foreign sorting, is when you begin with the minimum value, \n then maximum of the stay integer, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n\tvector<int> res;\n\tsort(lst.begin(), lst.end());\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tres.push_back(lst[i]);\n\t}\n\treturn res;\n}\nint main(){\n\tvector<int> lst = {1, 2, 3, 4};\n\tvector<int> res = strange_sort_list(lst);\n\tfor(int i = 0; i < res.size(); i++){\n\t\tprintf(\"%d \", res[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/71", "prompt": "/*\nGiven the lengths of the three sides of a triangle. refund the area of \n the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n differently return -1 \n Three sides make a valid triangle when the union of any two sides is greater \n than the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n", "canonical_solution": "    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n    assert (abs(triangle_area(4, 8, 5) -8.18)<0.01);\n    assert (abs(triangle_area(2, 2, 2) -1.73)<0.01);\n    assert (abs(triangle_area(1, 2, 3) +1)<0.01);\n    assert (abs(triangle_area(10, 5, 7) - 16.25)<0.01);\n    assert (abs(triangle_area(2, 6, 3) +1)<0.01);\n    assert (abs(triangle_area(1, 1, 1) -0.43)<0.01);\n    assert (abs(triangle_area(2, 2, 10) +1)<0.01);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n}\n", "entry_point": "triangle_area", "seed": 0, "perturbed": true, "gc": "/*\nGiven the lengths of the three sides of a triangle. refund the area of \n the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n differently return -1 \n Three sides make a valid triangle when the union of any two sides is greater \n than the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n\tfloat s=sqrt(a*a+b*b);\n\tfloat t=sqrt(c*c+b*b);\n\tfloat area=s*t;\n\tif(area>c)\n\t\treturn -1;\n\telse\n\t\treturn area;\n}\nint main(){\n\tfloat a,b,c;\n\tscanf(\"%f %f %f\",&a,&b,&c);\n\tprintf(\"%.2f\\n\",triangle_area(a,b,c));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/72", "prompt": "/*\nWrite a function that returns true if the aim q will fly, and assumed differently. \n The aim q will vanish if it's balanced (it is a palindromic vector) and the sum of its element is less than or equal the maximal possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n    assert (will_it_fly({1, 2, 3}, 6) ==false);\n    assert (will_it_fly({5}, 5) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n}\n", "entry_point": "will_it_fly", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that returns true if the aim q will fly, and assumed differently. \n The aim q will vanish if it's balanced (it is a palindromic vector) and the sum of its element is less than or equal the maximal possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    return sum<=w;\n}\nint main(){\n    vector<int> q={1,2,3,4,5,6,7,8,9,10};\n    printf(\"%s\\n\",will_it_fly(q,5)?\"true\":\"false\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/73", "prompt": "/*\nGiven a vector arr of integers, find the minimal number of element that \n necessitate to be exchange to make the vector palindromic. A palindromic vector is a vector that \n is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 4, 2}) == 1);\n    assert (smallest_change({1, 4, 4, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n    assert (smallest_change({1}) == 0);\n    assert (smallest_change({0, 1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n}\n", "entry_point": "smallest_change", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector arr of integers, find the minimal number of element that \n necessitate to be exchange to make the vector palindromic. A palindromic vector is a vector that \n is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int min_change = n;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(arr[i] > arr[j]){\n                min_change = min(min_change, j-i);\n            }\n        }\n    }\n    return min_change;\n}\nint main(){\n    vector<int> arr = {1,2,3,5,4,7,9,6};\n    printf(\"%d\\n\", smallest_change(arr));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/74", "prompt": "/*\nWrite a function that accepts two vectors of string and retort the vector that has \n entire number of charwoman in the all strings of the vector less than the early vector. \n\n if the two vectors have the same number of char, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "canonical_solution": "    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\"}) , {\"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({}, {\"this\"}) , {}));\n    assert (issame(total_match({\"this\"}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n}\n", "entry_point": "total_match", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that accepts two vectors of string and retort the vector that has \n entire number of charwoman in the all strings of the vector less than the early vector. \n\n if the two vectors have the same number of char, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    vector<string> res;\n    int len1=lst1.size();\n    int len2=lst2.size();\n    if(len1==len2){\n        return lst1;\n    }\n    if(len1>len2){\n        res=lst1;\n        for(int i=0;i<len2;i++){\n            if(res.back()==lst2[i]){\n                res.pop_back();\n            }\n        }\n        return res;\n    }\n    if(len2>len1){\n        res=lst2;\n        for(int i=0;i<len1;i++){\n            if(res.back()==lst1[i]){\n                res.pop_back();\n            }\n        }\n        return res;\n    }\n    return res;\n}\nint main(){\n    vector<string> lst1;\n    vector<string> lst2;\n    lst1.push_back(\"hi\");\n    lst1.push_back(\"admin\");\n    lst1.push_back(\"project\");\n    lst1.push_back(\"4\");\n    lst1.push_back(\"1\");\n    lst1.push_back(\"2\");\n    lst1.push_back(\"3\");\n    lst1.push_back(\"4\");\n    lst1.push_back(\"5\");\n    lst2.push_back(\"hi\");\n    lst2.push_back(\"hi\");\n    lst2.push_back(\"hi\");\n    lst2.push_back(\"project\");\n    lst2.push_back(\"4\");\n    lst2.push_back(\"1\");\n    lst2.push_back(\"2\");\n    lst2.push_back(\"3\");\n    lst2.push_back(\"4\");\n    lst2.push_back(\"5\");\n    vector<string> res=total_match(lst1,lst2);\n    for(int i=0;i<res.size();i++){\n        printf(\"%s\\n\",res[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/75", "prompt": "/*\nWrite a function that returns true if the grant issue is the multiplication of 3 premier numbers \n and fake otherwise. \n know that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n", "canonical_solution": "    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(5) == false);\n    assert (is_multiply_prime(30) == true);\n    assert (is_multiply_prime(8) == true);\n    assert (is_multiply_prime(10) == false);\n    assert (is_multiply_prime(125) == true);\n    assert (is_multiply_prime(3 * 5 * 7) == true);\n    assert (is_multiply_prime(3 * 6 * 7) == false);\n    assert (is_multiply_prime(9 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 13 * 7) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(30) == true);\n}\n", "entry_point": "is_multiply_prime", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that returns true if the grant issue is the multiplication of 3 premier numbers \n and fake otherwise. \n know that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n\tif(a<=100)\n\t\treturn false;\n\tif(a%3==0 && a%5==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main(){\n\tint a;\n\tscanf(\"%d\",&a);\n\tprintf(\"%s\",is_multiply_prime(a)?\"true\":\"false\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/76", "prompt": "/*\nYour task is to write a function that returns dependable if a issue x is a simple \n ability of n and fake in early case. \n x is a bare power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n", "canonical_solution": "    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n    assert (is_simple_power(16, 2)== true);\n    assert (is_simple_power(143214, 16)== false);\n    assert (is_simple_power(4, 2)==true);\n    assert (is_simple_power(9, 3)==true);\n    assert (is_simple_power(16, 4)==true);\n    assert (is_simple_power(24, 2)==false);\n    assert (is_simple_power(128, 4)==false);\n    assert (is_simple_power(12, 6)==false);\n    assert (is_simple_power(1, 1)==true);\n    assert (is_simple_power(1, 12)==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n}\n", "entry_point": "is_simple_power", "seed": 0, "perturbed": true, "gc": "/*\nYour task is to write a function that returns dependable if a issue x is a simple \n ability of n and fake in early case. \n x is a bare power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n    if(n==0)\n        return true;\n    if(x==1)\n        return true;\n    if(x==n)\n        return true;\n    if(x%n==0)\n        return true;\n    if(x%n==1)\n        return true;\n    if(x%n==n)\n        return true;\n    return false;\n}\nint main(void)\n{\n    int n;\n    scanf(\"%d\",&n);\n    if(is_simple_power(1, n))\n        printf(\"simple\\n\");\n    else\n        printf(\"not simple\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/77", "prompt": "/*\nWrite a function that takes an integer a and return on-key \n if this ingeger is a block of some integer number. \n Note: you may assume the remark is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n", "canonical_solution": "    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(1000) == true);\n    assert (iscuber(0) == true);\n    assert (iscuber(1729) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(0) == true);\n}\n", "entry_point": "iscuber", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes an integer a and return on-key \n if this ingeger is a block of some integer number. \n Note: you may assume the remark is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n    if(a==0)\n        return true;\n    if(a==1)\n        return false;\n    if(a%2==0)\n        return iscuber(a/2);\n    else\n        return iscuber(a/2+1);\n}\nint main(){\n    int a;\n    scanf(\"%d\",&a);\n    printf(\"%s\\n\",iscuber(a)?\"true\":\"false\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/78", "prompt": "/*\nYou have been tasked to write a function that receives \n a hexadecimal number as a chain and count the number of hexadecimal \n digits that are flower (prime phone number, or a prime, is a natural number \n bang-up than 1 that is not a product of two smaller natural numbers). \n Hexadecimal digit are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \n Prime numbers are 2, 3, 5, 7, 11, 13, 17, ... \n therefore you hold to determine a number of the following digits: 2, 3, 5, 7, \n B (= decimal 11), D (= decimal 13). \n Note: you may bear the remark is constantly right or empty bowed stringed instrument, \n and symbol A, B, C, D, E, degree fahrenheit be constantly uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n", "canonical_solution": "    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n    assert (hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12 );\n    assert (hex_key(\"\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n}\n", "entry_point": "hex_key", "seed": 0, "perturbed": true, "gc": "/*\nYou have been tasked to write a function that receives \n a hexadecimal number as a chain and count the number of hexadecimal \n digits that are flower (prime phone number, or a prime, is a natural number \n bang-up than 1 that is not a product of two smaller natural numbers). \n Hexadecimal digit are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \n Prime numbers are 2, 3, 5, 7, 11, 13, 17,... \n therefore you hold to determine a number of the following digits: 2, 3, 5, 7, \n B (= decimal 11), D (= decimal 13). \n Note: you may bear the remark is constantly right or empty bowed stringed instrument, \n and symbol A, B, C, D, E, degree fahrenheit be constantly uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n\tint count = 0;\n\tfor(int i = 0; i < num.length(); i++){\n\t\tif(num[i] == 'A' || num[i] == 'B' || num[i] == 'C' || num[i] == 'D' || num[i] == 'E' || num[i] == 'F'){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring num;\n\twhile(scanf(\"%s\", &num)!= EOF){\n\t\tint count = hex_key(num);\n\t\tprintf(\"%d\\n\", count);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/79", "prompt": "/*\nYou will be given a number in decimal form and your task equal to commute it to \n binary format. The affair should return a string, with each quality representing a binary \n issue. Each quality in the string will be' 0' or' 1'. \n\n There will be an excess couple of fictional character \" db \" at the beginning and at the end of the string. \n The excess character are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n", "canonical_solution": "    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(0) == \"db0db\");\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(103) == \"db1100111db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n}\n", "entry_point": "decimal_to_binary", "seed": 0, "perturbed": true, "gc": "/*\nYou will be given a number in decimal form and your task equal to commute it to \n binary format. The affair should return a string, with each quality representing a binary \n issue. Each quality in the string will be' 0' or' 1'. \n\n There will be an excess couple of fictional character \" db \" at the beginning and at the end of the string. \n The excess character are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n\tstring binary = \"\";\n\tint binary_number = decimal;\n\twhile(binary_number > 0){\n\t\tbinary_number = binary_number / 2;\n\t\tbinary = binary + \"0\" + binary_number;\n\t}\n\treturn binary;\n}\n\nint main(){\n\tint decimal = 15;\n\tstring binary = decimal_to_binary(decimal);\n\tprintf(\"%s\\n\", binary.c_str());\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/80", "prompt": "/*\nYou are given a string s.\nYour task is to check if the drawstring is glad or not. \n A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n", "canonical_solution": "    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n    assert (is_happy(\"iopaxpoi\") == true );\n    assert (is_happy(\"iopaxioi\") == false );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n}\n", "entry_point": "is_happy", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string s.\nYour task is to check if the drawstring is glad or not. \n A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    int i,j,k;\n    for(i=0;i<s.size();i++){\n        for(j=i+1;j<s.size();j++){\n            for(k=j+1;k<s.size();k++){\n                if(s[i]==s[j] && s[j]==s[k]){\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\nint main(){\n    string s;\n    while(scanf(\"%s\",&s)==1){\n        if(is_happy(s)){\n            printf(\"%s is glad\\n\",s.c_str());\n        }else{\n            printf(\"%s is not happy\\n\",s.c_str());\n        }\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/81", "prompt": "/*\nIt is the last week of the semester and the teacher take to pass the grades\nto student. The teacher has been making her own algorithm for grading. \n The alone problem is, she has lose the code she used for grading. \n She has given you a vector of GPAs for some student and you have to write \n a function that can output a vector of letter grades using the follow board: \n          GPA        |     Letter class \n           4.0                 A+ \n         > 3.7                 A \n         > 3.3                 A- \n         > 3.0                 B+ \n         > 2.7                 B \n         > 2.3                 B- \n         > 2.0                 C+ \n         > 1.7                 C \n         > 1.3                 C- \n         > 1.0                 D+ \n         > 0.7                 D \n         > 0.0                 D- \n           0.0                 E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n    assert (issame(numerical_letter_grade({1.2}) , {\"D+\"}));\n    assert (issame(numerical_letter_grade({0.5}) , {\"D-\"}));\n    assert (issame(numerical_letter_grade({0.0}) , {\"E\"}));\n    assert (issame(numerical_letter_grade({1, 0.3, 1.5, 2.8, 3.3}) , {\"D\", \"D-\", \"C-\", \"B\", \"B+\"}));\n    assert (issame(numerical_letter_grade({0, 0.7}) , {\"E\", \"D-\"}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n}\n", "entry_point": "numerical_letter_grade", "seed": 0, "perturbed": true, "gc": "/*\nIt is the last week of the semester and the teacher take to pass the grades\nto student. The teacher has been making her own algorithm for grading. \n The alone problem is, she has lose the code she used for grading. \n She has given you a vector of GPAs for some student and you have to write \n a function that can output a vector of letter grades using the follow board: \n          GPA        |     Letter class \n           4.0                 A+ \n         > 3.7                 A \n         > 3.3                 A- \n         > 3.0                 B+ \n         > 2.7                 B \n         > 2.3                 B- \n         > 2.0                 C+ \n         > 1.7                 C \n         > 1.3                 C- \n         > 1.0                 D+ \n         > 0.7                 D \n         > 0.0                 D- \n           0.0                 E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for(int i = 0; i < grades.size(); i++){\n        if(grades[i] >= 3.7){\n            letter_grades.push_back(\"A+\");\n        }else if(grades[i] >= 3.3){\n            letter_grades.push_back(\"A\");\n        }else if(grades[i] >= 3.0){\n            letter_grades.push_back(\"A-\");\n        }else if(grades[i] >= 2.7){\n            letter_grades.push_back(\"B+\");\n        }else if(grades[i] >= 2.3){\n            letter_grades.push_back(\"B\");\n        }else if(grades[i] >= 2.0){\n            letter_grades.push_back(\"B-\");\n        }else if(grades[i] >= 1.7){\n            letter_grades.push_back(\"C+\");\n        }else if(grades[i] >= 1.3){\n            letter_grades.push_back(\"C\");\n        }else if(grades[i] >= 1.0){\n            letter_grades.push_back(\"C-\");\n        }else if(grades[i] >= 0.7){\n            letter_grades.push_back(\"D+\");\n        }else if(grades[i] >= 0.3){\n            letter_grades.push_back(\"D\");\n        }else if(grades[i] >= 0.0){\n            letter_grades.push_back(\"D-\");\n        }else{\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\nint main(){\n    vector<float> grades;\n    grades.push_back(4.0);\n    grades.push_back(3.7);\n    grades.push_back(3.3);\n    grades.push_back(3.0);\n    grades.push_back(2.7);\n    grades.push_back(2.3);\n    grades.push_back(2.0);\n    grades.push_back(1.7);\n    grades.push_back(1.3);\n    grades.push_back(1.0);\n    grades.push_back(0.7);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back"}
{"task_id": "CPP/82", "prompt": "/*\nWrite a function that takes a string and return on-key if the string \n length constitute a prime phone number or false differently\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n", "canonical_solution": "    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n    assert (prime_length(\"wow\") == true);\n    assert (prime_length(\"world\") == true);\n    assert (prime_length(\"MadaM\") == true);\n    assert (prime_length(\"Wow\") == true);\n    assert (prime_length(\"\") == false);\n    assert (prime_length(\"HI\") == true);\n    assert (prime_length(\"go\") == true);\n    assert (prime_length(\"gogo\") == false);\n    assert (prime_length(\"aaaaaaaaaaaaaaa\") == false);\n    assert (prime_length(\"Madam\") == true);\n    assert (prime_length(\"M\") == false);\n    assert (prime_length(\"0\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n}\n", "entry_point": "prime_length", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes a string and return on-key if the string \n length constitute a prime phone number or false differently\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int len = str.length();\n    for(int i = 2; i < len; i++){\n        if(str[i] == '0'){\n            continue;\n        }\n        if(str[i] == '1'){\n            if(i == len - 1){\n                return false;\n            }\n            continue;\n        }\n        if(str[i] == '2'){\n            if(i == len - 1){\n                return false;\n            }\n            if(str[i + 1] == '1'){\n                return false;\n            }\n            continue;\n        }\n        if(str[i] == '3'){\n            if(i == len - 1){\n                return false;\n            }\n            if(str[i + 1] == '2'){\n                return false;\n            }\n            if(str[i + 2] == '1'){\n                return false;\n            }\n            continue;\n        }\n        if(str[i] == '4'){\n            if(i == len - 1){\n                return false;\n            }\n            if(str[i + 1] == '3'){\n                return false;\n            }\n            if(str[i + 2] == '2'){\n                return false;\n            }\n            if(str[i + 3] == '1'){\n                return false;\n            }\n            continue;\n        }\n        if(str[i] == '5'){\n            if(i == len - 1){\n                return false;\n            }\n            if(str[i + 1] == '4'){\n                return false;\n            }\n            if(str[i + 2] == '3'){\n                return false;\n            }\n            if(str[i + 3] == '2'){\n                return false;\n            }\n            if(str[i + 4] == '1'){\n                return false;\n            }\n            continue;\n        }\n        if(str[i] == '6'){\n            if(i == len - 1){\n                return false;\n            }\n            if(str[i + 1] == '5'){\n                return false;\n            }\n            if(str[i + 2] == '4'){\n                return false;\n            }\n            if(str[i + 3] == '3'){\n                return false;\n            }\n            if(str[i + 4] == '2'){\n                return false;\n            }\n            if(str[i + 5] == '1'){\n                return false;\n            }\n            continue;\n        }\n        if(str[i] == '7'){\n            if(i == len - 1){\n                return false;\n            }\n            if(str[i + 1] == '6'){\n                return false;\n            }\n            if(str[i + 2] == '5'){\n                return false;\n            }\n            if(str[i + 3] == '4'){\n                return false;\n            }\n            if(str[i + 4] == '3'){\n                return false;\n            }\n            if(str[i + 5] == '2'){\n                return false;\n            }\n            if(str[i + 6] == '1'){\n                return false;\n            }\n            continue;\n        }\n        if(str[i] == '8'){\n            if(i == len - 1){\n                return false;\n            }\n            if(str[i + 1] == '7'){\n                return false;\n            }\n            if(str[i + 2] == '6'){\n                return false;\n            }\n            if(str[i + 3] == '5'){\n                return false;\n            }\n            if(str[i + 4] == '4'){\n                return false;\n            }\n            if(str[i + 5] == '3'){\n                return false;\n            }\n            if(str[i + 6] == '2'){\n                return false;\n            }\n            if(str[i + 7] == '1'){\n                return false;\n            }\n            continue;\n        }\n        if(str[i] == '9'){\n            if(i == len - 1){\n                return false;\n            }\n            if(str[i + 1] == '8'){\n                return false;\n            }\n            if(str[i + 2] == '7'){\n                return false;\n            }\n            if(str[i + 3] == '6'){\n                return false;\n            }\n            if(str[i + 4] == '5'){\n                return false;\n            }\n            if(str[i + 5] == '4'){\n                return false;\n            }\n            if(str[i + 6] == '3'){\n                return false;\n            }\n            if(str[i + 7] == '2'){\n                return false;\n            }\n            if(str[i + 8] == '1'){\n                return false;\n            }\n            continue;\n        }\n    }\n    return true;\n}\nint main(){\n    string str;\n    while(getline(cin, str)){\n        if(prime_length(str)){\n            cout << \"prime\" << endl;\n        }else{\n            cout << \"not prime\" << endl;\n        }\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/83", "prompt": "/*\nGiven a positive integer n, return the count of the numeral of n-digit\npositive integer that get down or end with 1. \n * / \n # include < stdio.h > \n using namespace std;\nint starts_one_ends(int n){\n", "canonical_solution": "    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (starts_one_ends(1) == 1);\n    assert (starts_one_ends(2) == 18);\n    assert (starts_one_ends(3) == 180);\n    assert (starts_one_ends(4) == 1800);\n    assert (starts_one_ends(5) == 18000);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n", "example_test": "", "entry_point": "starts_one_ends", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return the count of the numeral of n-digit\npositive integer that get down or end with 1. \n * / \n # include < stdio.h > \n using namespace std;\nint starts_one_ends(int n){\n    int count = 0;\n    while(n>0){\n        if(n%10==1)\n            count++;\n        n/=10;\n    }\n    return count;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",starts_one_ends(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/84", "prompt": "/*\nGiven a positive integer N, return the total sum of its finger in binary star.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n", "canonical_solution": "    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(1000) == \"1\");\n    assert (solve(150) == \"110\");\n    assert (solve(147) == \"1100\");\n    assert (solve(333) == \"1001\");\n    assert (solve(963) == \"10010\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer N, return the total sum of its finger in binary star.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    string res;\n    int sum = 0;\n    for(int i = 0; i < N; i++){\n        sum += i;\n        res += (sum % 2 == 0)? '0' : '1';\n    }\n    return res;\n}\nint main(){\n    int N;\n    scanf(\"%d\", &N);\n    printf(\"%s\\n\", solve(N).c_str());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/85", "prompt": "/*\nGiven a non - empty vector of integers lst. add the tied elements that are at curious indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 88}) == 88);\n    assert (add({4, 5, 6, 7, 2, 122}) == 122);\n    assert (add({4, 0, 6, 7}) == 0);\n    assert (add({4, 4, 6, 8}) == 12);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 2, 6, 7}) == 2);\n}\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*\nGiven a non - empty vector of integers lst. add the tied elements that are at curious indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int i, j, k, l, m, n, sum=0;\n    for(i=0; i<lst.size(); i++){\n        for(j=i+1; j<lst.size(); j++){\n            if(lst[i]==lst[j]){\n                for(k=i+1; k<lst.size(); k++){\n                    if(lst[k]==lst[j]){\n                        for(l=k+1; l<lst.size(); l++){\n                            if(lst[l]==lst[j]){\n                                for(m=l+1; m<lst.size(); m++){\n                                    if(lst[m]==lst[j]){\n                                        for(n=m+1; n<lst.size(); n++){\n                                            if(lst[n]==lst[j]){\n                                                sum+=lst[i]+lst[j]+lst[k]+lst[l]+lst[m]+lst[n];\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return sum;\n}\nint main(){\n    vector<int> lst;\n    int i;\n    for(i=0; i<5; i++){\n        scanf(\"%d\", &lst[i]);\n    }\n    printf(\"%d\", add(lst));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/86", "prompt": "/*\nWrite a function that takes a string and return an coherent version of it. \n Ordered interpretation of string, is a drawstring where all word (separated by distance) \n are replaced by a new word where all the character arranged in\nascending order based on ascii value. \n bill: You should keep the decree of word and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"number\") == \"bemnru\");\n    assert (anti_shuffle(\"abcd\") == \"abcd\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert (anti_shuffle(\"\") == \"\");\n    assert (anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n}\n", "entry_point": "anti_shuffle", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes a string and return an coherent version of it. \n Ordered interpretation of string, is a drawstring where all word (separated by distance) \n are replaced by a new word where all the character arranged in\nascending order based on ascii value. \n bill: You should keep the decree of word and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello!!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n\tstring result;\n\tint len = s.length();\n\tfor(int i = 0; i < len; i++){\n\t\tint j = i;\n\t\twhile(j < len){\n\t\t\tif(s[j] == s[i]){\n\t\t\t\tj++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult += s[i];\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tstring s = \"Hi\";\n\tprintf(\"%s\\n\", anti_shuffle(s).c_str());\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/87", "prompt": "/*\nYou are given a 2 dimensional data, as a nested vector, \n which be similar to matrix, however, unlike matrices, \n each row may contain a different phone number of columns. \n hold lst, and integer x, find integers x in the vector, \n and return vector of vectors, { { x1, y1 }, { x2, y2 }... } such that \n each vector is a coordinate - { row, columns }, begin with 0. \n kind coordinates initially by row in ascending order. \n Also, sort coordinates of the quarrel by columns in derive order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "canonical_solution": "    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6}}, 2) , {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,1,3,4,5,6},\n        {1,2,1,4,5,6},\n        {1,2,3,1,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}\n    }, 1) , {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{1}}, 2) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "entry_point": "get_row", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a 2 dimensional data, as a nested vector, \n which be similar to matrix, however, unlike matrices, \n each row may contain a different phone number of columns. \n hold lst, and integer x, find integers x in the vector, \n and return vector of vectors, { { x1, y1 }, { x2, y2 }... } such that \n each vector is a coordinate - { row, columns }, begin with 0. \n kind coordinates initially by row in ascending order. \n Also, sort coordinates of the quarrel by columns in derive order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n  vector<vector<int>> res;\n  vector<int> row;\n  for(int i=0; i<lst.size(); i++){\n    row.clear();\n    for(int j=0; j<lst[i].size(); j++){\n      if(lst[i][j]==x){\n        row.push_back(j);\n      }\n    }\n    res.push_back(row);\n  }\n  return res;\n}\n\nvector<vector<int>> get_row(vector<vector<int>> lst){\n  vector<vector<int>> res;\n  vector<int> row;\n  for(int i=0; i<lst.size(); i++){\n    row.clear();\n    for(int j=0; j<lst[i].size(); j++){\n      if(lst[i][j]==0){\n        row.push_back(j);\n      }\n    }\n    res.push_back(row);\n  }\n  return res;\n}\n\nint main(){\n  vector<vector<int>> lst = {{1,2,3,4,5,6}, {1,2,3,4,1,6}, {1,2,3,4,5,1}};\n  vector<vector<int>> res = get_row(lst, 1);\n  for(int i=0; i<res.size(); i++){\n    for(int j=0; j<res[i].size(); j++){\n      printf(\"%d \", res[i][j]);\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/88", "prompt": "/*\nGiven a vector of non - minus integer, return a transcript of the establish vector after sorting, \n you will sort the given vector in ascending orderliness if the sum (beginning index value, last index value) is curious, \n or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n Note: \n * don't change the yield vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n", "canonical_solution": "    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n    assert (issame(sort_array({2, 1}) , {1, 2}));\n    assert (issame(sort_array({15, 42, 87, 32 ,11, 0}) , {0, 11, 15, 32, 42, 87}));\n    assert (issame(sort_array({21, 14, 23, 11}) , {23, 21, 14, 11}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n}\n", "entry_point": "sort_array", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of non - minus integer, return a transcript of the establish vector after sorting, \n you will sort the given vector in ascending orderliness if the sum (beginning index value, last index value) is curious, \n or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n Note: \n * don't change the yield vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n\tvector<int> result;\n\tsort(array.begin(), array.end());\n\tfor(int i = 0; i < array.size(); i++){\n\t\tif(array[i] < 0){\n\t\t\tresult.push_back(array[i]);\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tvector<int> array = {5, 2, 4, 3, 0, 1, 5};\n\tvector<int> result = sort_array(array);\n\tfor(int i = 0; i < result.size(); i++){\n\t\tprintf(\"%d \", result[i]);\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/89", "prompt": "/*\nCreate a function encrypt that takes a string as an argumentation and \n retort a string encrypted with the rudiment being rotated. \n The alphabet should be rotated in a manner such that the letter \n switch down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n    assert (encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\");\n    assert (encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\");\n    assert (encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert (encrypt(\"a\")==\"e\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n}\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function encrypt that takes a string as an argumentation and \n retort a string encrypted with the rudiment being rotated. \n The alphabet should be rotated in a manner such that the letter \n switch down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string ret;\n    for(int i=0;i<s.length();i++){\n        ret+=s[i];\n        ret+=s[i];\n    }\n    return ret;\n}\nint main(){\n    string s;\n    while(scanf(\"%s\",&s)!=EOF){\n        printf(\"%s\\n\",encrypt(s).c_str());\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/90", "prompt": "/*\nYou are given a vector of integers. \n Write a routine next_smallest () that come back the 2nd little element of the vector. \n Return None if there is no such element. \n\n next_smallest({1, 2, 3, 4, 5 }) = = 2 \n next_smallest({5, 1, 4, 3, 2 }) = = 2 \n next_smallest ({ }) = = None \n next_smallest({1, 1 }) = = None \n * / \n # admit < stdio.h > \n # include < vector > \n # include < algorithm > \n using namespace std;\nint next_smallest(vector < int > lst){\n", "canonical_solution": "    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n    assert (next_smallest({1,1,1,1,0}) == 1);\n    assert (next_smallest({-35, 34, 12, -45}) == -35);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n}\n", "entry_point": "next_smallest", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of integers. \n Write a routine next_smallest () that come back the 2nd little element of the vector. \n Return None if there is no such element. \n\n next_smallest({1, 2, 3, 4, 5 }) = = 2 \n next_smallest({5, 1, 4, 3, 2 }) = = 2 \n next_smallest ({ }) = = None \n next_smallest({1, 1 }) = = None \n * / \n # admit < stdio.h > \n # include < vector > \n # include < algorithm > \n using namespace std;\nint next_smallest(vector < int > lst){\n    if(lst.size() == 0) return None;\n    int min = lst[0];\n    for(int i = 1; i < lst.size(); i++){\n        if(lst[i] < min){\n            min = lst[i];\n        }\n    }\n    return min;\n}\n<|endoftext|>"}
{"task_id": "CPP/91", "prompt": "/*\nYou'll be given a string of words, and your task equal to reckon the number \n of boredoms. A boredom is a sentence that starts with the word \" I \". \n Sentences are subtend by'.','?' or'!'. \n\n For example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n", "canonical_solution": "    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"Is the sky blue?\") == 0);\n    assert (is_bored(\"I love It !\") == 1);\n    assert (is_bored(\"bIt\") == 0);\n    assert (is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert (is_bored(\"You and I are going for a walk\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1);\n}\n", "entry_point": "is_bored", "seed": 0, "perturbed": true, "gc": "/*\nYou'll be given a string of words, and your task equal to reckon the number \n of boredoms. A boredom is a sentence that starts with the word \" I \". \n Sentences are subtend by'.','?' or'!'. \n\n For example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int i,j,k,l,m,n,count=0;\n    for(i=0;i<S.size();i++){\n        if(S[i]=='I'){\n            for(j=i+1;j<S.size();j++){\n                if(S[j]==' '){\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    return count;\n}\nint main(){\n    string S;\n    int T;\n    scanf(\"%d\",&T);\n    while(T--){\n        scanf(\"%s\",&S);\n        printf(\"%d\\n\",is_bored(S));\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/92", "prompt": "/*\nCreate a function that takes 3 numbers. \n return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n restitution fake in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n", "canonical_solution": "    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(2, 3, 1)==true);\n    assert (any_int(2.5, 2, 3)==false);\n    assert (any_int(1.5, 5, 3.5)==false);\n    assert (any_int(2, 6, 2)==false);\n    assert (any_int(4, 2, 2)==true);\n    assert (any_int(2.2, 2.2, 2.2)==false);\n    assert (any_int(-4, 6, 2)==true);\n    assert (any_int(2,1,1)==true);\n    assert (any_int(3,4,7)==true);\n    assert (any_int(3.01,4,7)==false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(5, 2, 7)==true);\n    assert (any_int(3, 2, 2)==false);\n    assert (any_int(3, -2, 1)==true);\n    assert (any_int(3.6, -2.2, 2)==false);\n}\n", "entry_point": "any_int", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes 3 numbers. \n return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n restitution fake in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    float sum=a+b+c;\n    if(sum>=a && sum<=b && sum>=c)\n        return true;\n    else\n        return false;\n}\n\nint main(){\n    float a,b,c;\n    scanf(\"%f%f%f\",&a,&b,&c);\n    if(any_int(a,b,c))\n        printf(\"on-key\\n\");\n    else\n        printf(\"restitution\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/93", "prompt": "/*\nWrite a function that takes a message, and encodes in such a \n means that it swap case of all letters, replace all vowels in \n the message with the letter that appear 2 places ahead of that \n vowel in the english alphabet. \n Assume only letters. \n\n Examples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"TEST\") == \"tgst\");\n    assert (encode(\"Mudasir\") == \"mWDCSKR\");\n    assert (encode(\"YES\") == \"ygs\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert (encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"test\") == \"TGST\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n}\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes a message, and encodes in such a \n means that it swap case of all letters, replace all vowels in \n the message with the letter that appear 2 places ahead of that \n vowel in the english alphabet. \n Assume only letters. \n\n Examples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++){\n        if(isalpha(message[i])){\n            result += message[i];\n        }\n        else{\n            result += message[i];\n            result += message[i + 1];\n        }\n    }\n    return result;\n}\nint main(){\n    string message = \"This is a message\";\n    string encoded = encode(message);\n    printf(\"%s\\n\", encoded.c_str());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/94", "prompt": "/*\nYou are given a vector of integers. \n You need to discover the largest prime value and return the sum of its digit.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n", "canonical_solution": "    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n    assert (skjkasdkd({8191}) == 19);\n    assert (skjkasdkd({8191, 123456, 127, 7}) == 19);\n    assert (skjkasdkd({127, 97, 8192}) == 10);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n}\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of integers. \n You need to discover the largest prime value and return the sum of its digit.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n\tint max = 0;\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(lst[i] > max){\n\t\t\tmax = lst[i];\n\t\t}\n\t\tsum += lst[i];\n\t}\n\treturn max;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(0);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(5);\n\tlst.push_back(7);\n\tlst.push_back(4);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(2);\n\tlst.push_back(181);\n\tlst.push_back(32);\n\tlst.push_back(4);\n\tlst.push_back(32);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(32);\n\tlst.push_back(324);\n\tlst.push_back(4);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(32);\n\tlst.push_back(324);\n\tlst.push_back(4);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(4);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(9);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(40);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(4);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(7);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(7);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(81);\n\tlst.push_back(12);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(21);\n\tlst.push_back(0);\n\tlst.push_back(8);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(7);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst"}
{"task_id": "CPP/95", "prompt": "/*\nGiven a map, return true if all keys equal string in lower \n case or all key are strings in upper lawsuit, else return false. \n The routine should return false is the give map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n", "canonical_solution": "    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n    assert (check_dict_case({{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"} }) == true  );\n    assert (check_dict_case({}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n}\n", "entry_point": "check_dict_case", "seed": 0, "perturbed": true, "gc": "/*\nGiven a map, return true if all keys equal string in lower \n case or all key are strings in upper lawsuit, else return false. \n The routine should return false is the give map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    if(dict.empty())\n        return false;\n    for(auto it=dict.begin();it!=dict.end();it++){\n        if(it->first.size()!=it->second.size())\n            return false;\n        for(int i=0;i<it->first.size();i++){\n            if(it->first[i]!=it->second[i])\n                return false;\n        }\n    }\n    return true;\n}\nint main(){\n    map<string,string> dict;\n    dict[\"a\"]=\"apple\";\n    dict[\"b\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"B\"]=\"banana\";\n    dict[\"8\"]=\"banana\";\n    dict[\"Name\"]=\"John\";\n    dict[\"Age\"]=\"36\";\n    dict[\"City\"]=\"Houston\";\n    dict[\"STATE\"]=\"NC\";\n    dict[\"ZIP\"]=\"12345\";\n    printf(\"%s\\n\",check_dict_case(dict)?\"true\":\"false\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/96", "prompt": "/*\nImplement a function that takes an non - negative integer and returns a vector of the inaugural n\nintegers that are choice numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n", "canonical_solution": "    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(6) , {2,3,5}));\n    assert (issame(count_up_to(7) , {2,3,5}));\n    assert (issame(count_up_to(10) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n    assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));\n    assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(11) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(20) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n}\n", "entry_point": "count_up_to", "seed": 0, "perturbed": true, "gc": "/*\nImplement a function that takes an non - negative integer and returns a vector of the inaugural n\nintegers that are choice numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> result;\n    if(n==0)\n        return result;\n    for(int i=1;i<=n;i++){\n        result.push_back(i);\n    }\n    return result;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> result=count_up_to(n);\n    for(int i=0;i<result.size();i++){\n        printf(\"%d \",result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/97", "prompt": "/*\nComplete the function that takes two integers and return \n the intersection of their unit digits. \n Assume the stimulation is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n", "canonical_solution": "    return (abs(a)%10)*(abs(b)%10);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n    assert (multiply(76, 67) == 42    );\n    assert (multiply(17, 27) == 49    );\n    assert (multiply(0, 1) == 0);\n    assert (multiply(0, 0) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n}\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*\nComplete the function that takes two integers and return \n the intersection of their unit digits. \n Assume the stimulation is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int c=0;\n    while(a!=0){\n        c=c*10+a%10;\n        a/=10;\n    }\n    while(b!=0){\n        c=c*10+b%10;\n        b/=10;\n    }\n    return c;\n}\nint main(){\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\",multiply(a,b));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/98", "prompt": "/*\nGiven a string s, count the number of uppercase vowel in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n", "canonical_solution": "    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n    assert (count_upper(\"B\")  == 0);\n    assert (count_upper(\"U\")  == 1);\n    assert (count_upper(\"\") == 0);\n    assert (count_upper(\"EEEE\") == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n}\n", "entry_point": "count_upper", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string s, count the number of uppercase vowel in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n\tint cnt=0;\n\tfor(int i=0;i<s.size();i++){\n\t\tif(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U'){\n\t\t\tcnt++;\n\t\t}\n\t}\n\treturn cnt;\n}\nint main(){\n\tstring s;\n\twhile(scanf(\"%s\",&s)!=EOF){\n\t\tprintf(\"%d\\n\",count_upper(s));\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/99", "prompt": "/*\nCreate a function that takes a value (string) exemplify a issue \n and returns the closest integer to it. If the number is equidistant \n from two integers, round it away from zero. \n\n model\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n", "canonical_solution": "    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"14.5\") == 15);\n    assert (closest_integer(\"-15.5\") == -16);\n    assert (closest_integer(\"15.3\") == 15);\n    assert (closest_integer(\"0\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"15.3\") == 15);\n}\n", "entry_point": "closest_integer", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes a value (string) exemplify a issue \n and returns the closest integer to it. If the number is equidistant \n from two integers, round it away from zero. \n\n model\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint result = 0;\n\twhile(i < value.length()){\n\t\tif(value[i] == '.'){\n\t\t\tk++;\n\t\t}\n\t\telse{\n\t\t\tif(k > 0){\n\t\t\t\tj = i + k;\n\t\t\t\tresult = (int)pow(10, k) + (int)pow(10, k - 1) + (int)pow(10, k - 2);\n\t\t\t\tif(abs(result - (int)pow(10, k)) < abs(result - (int)pow(10, k - 1))){\n\t\t\t\t\tresult = (int)pow(10, k - 1);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tresult = (int)pow(10, k);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult = (int)pow(10, k);\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\n\nint main(){\n\tstring value = \"10\";\n\tint result = closest_integer(value);\n\tprintf(\"%d\\n\", result);\n\tvalue = \"15.3\";\n\tresult = closest_integer(value);\n\tprintf(\"%d\\n\", result);\n\tvalue = \"14.5\";\n\tresult = closest_integer(value);\n\tprintf(\"%d\\n\", result);\n\tvalue = \"-14.5\";\n\tresult = closest_integer(value);\n\tprintf(\"%d\\n\", result);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/100", "prompt": "/*\nGiven a positive integer n, you have to seduce a voltaic pile of n level of stone. \n The first grade has n stone. \n The number of stone in the next level is: \n     - the next odd issue if n is odd. \n     - the next even number if n is even. \n reelect the issue of stones in each degree in a vector, where element at index \n i represents the number of stone in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n", "canonical_solution": "    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n    assert (issame(make_a_pile(4) , {4,6,8,10}));\n    assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));\n    assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));\n    assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n}\n", "entry_point": "make_a_pile", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, you have to seduce a voltaic pile of n level of stone. \n The first grade has n stone. \n The number of stone in the next level is: \n     - the next odd issue if n is odd. \n     - the next even number if n is even. \n reelect the issue of stones in each degree in a vector, where element at index \n i represents the number of stone in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n\tvector<int> result;\n\tresult.push_back(n);\n\tif(n>1){\n\t\tresult.push_back(n-1);\n\t\tresult.push_back(n-2);\n\t\tresult.push_back(n-3);\n\t}\n\treturn result;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> result = make_a_pile(n);\n\tfor(int i=0;i<result.size();i++){\n\t\tprintf(\"%d \",result[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/101", "prompt": "/*\nYou will be given a string of words separated by comma or space. Your task is \n to split the chain into words and return a vector of the word.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n", "canonical_solution": "    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"Hi, my name\") , {\"Hi\", \"my\", \"name\"}));\n    assert (issame(words_string(\"One,, two, three, four, five, six,\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"\") , {}));\n    assert (issame(words_string(\"ahmed     , gamal\") , {\"ahmed\", \"gamal\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n}\n", "entry_point": "words_string", "seed": 0, "perturbed": true, "gc": "/*\nYou will be given a string of words separated by comma or space. Your task is \n to split the chain into words and return a vector of the word.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\",'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n\tvector<string> v;\n\tstring word;\n\tfor(int i=0;i<s.size();i++){\n\t\tif(s[i]==','){\n\t\t\tv.push_back(word);\n\t\t\tword=\"\";\n\t\t}\n\t\telse{\n\t\t\tword+=s[i];\n\t\t}\n\t}\n\tv.push_back(word);\n\treturn v;\n}\nint main(){\n\tstring s=\"Hi, my name is John\";\n\tvector<string> v=words_string(s);\n\tfor(int i=0;i<v.size();i++){\n\t\tprintf(\"%s\\n\",v[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/102", "prompt": "/*\nThis function takes two positive numbers x and y and return the \n big even integer numeral that is in the image [x, y] inclusive. If \n there's no such issue, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n", "canonical_solution": "    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n    assert (choose_num(33, 12354) == 12354);\n    assert (choose_num(5234, 5233) == -1);\n    assert (choose_num(6, 29) == 28);\n    assert (choose_num(27, 10) == -1);\n    assert (choose_num(7, 7) == -1);\n    assert (choose_num(546, 546) == 546);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n}\n", "entry_point": "choose_num", "seed": 0, "perturbed": true, "gc": "/*\nThis function takes two positive numbers x and y and return the \n big even integer numeral that is in the image [x, y] inclusive. If \n there's no such issue, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    if(x>y){\n        return -1;\n    }\n    int num=0;\n    for(int i=x;i<=y;i++){\n        num+=i;\n    }\n    return num;\n}\nint main(){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    printf(\"%d\\n\",choose_num(x,y));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/103", "prompt": "/*\nYou are given two positive integers n and m, and your task equal to calculate the \n average of the integer from n through m (include n and m). \n Round the answer to the nearest integer(smaller one) and convert that to binary. \n If n is great than m, return \" -1 \".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n", "canonical_solution": "    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 13) == \"1010\");\n    assert (rounded_avg(964,977) == \"1111001010\");\n    assert (rounded_avg(996,997) == \"1111100100\");\n    assert (rounded_avg(560,851) == \"1011000001\");  \n    assert (rounded_avg(185,546) == \"101101101\");\n    assert (rounded_avg(362,496) == \"110101101\");\n    assert (rounded_avg(350,902) == \"1001110010\");\n    assert (rounded_avg(197,233) == \"11010111\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(5, 1) == \"-1\");\n    assert (rounded_avg(5, 5) == \"101\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(10,20) == \"1111\");\n    assert (rounded_avg(20,33) == \"11010\");\n}\n", "entry_point": "rounded_avg", "seed": 0, "perturbed": true, "gc": "/*\nYou are given two positive integers n and m, and your task equal to calculate the \n average of the integer from n through m (include n and m). \n Round the answer to the nearest integer(smaller one) and convert that to binary. \n If n is great than m, return \" -1 \".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n    int sum=0;\n    for(int i=n;i<=m;i++){\n        sum+=i;\n    }\n    int avg=sum/2;\n    int binary=0;\n    int binary_sum=0;\n    for(int i=avg;i>=0;i--){\n        binary_sum+=pow(2,i);\n        if(binary_sum>=avg){\n            binary_sum-=avg;\n            binary=1;\n        }\n    }\n    if(binary==0){\n        return \"-1\";\n    }\n    return to_string(binary);\n}\nint main(){\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    printf(\"%s\\n\",rounded_avg(n,m).c_str());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/104", "prompt": "/*\nGiven a vector of positive integers x. return a grouped vector of all \n element that inducen't any tied digit. \n\n Note: Returned vector should be classify in increasing ordering. \n\n For example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n    assert (issame(unique_digits({12345, 2033, 111, 151}) , {111, 151}));\n    assert (issame(unique_digits({135, 103, 31}) , {31, 135}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n}\n", "entry_point": "unique_digits", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of positive integers x. return a grouped vector of all \n element that inducen't any tied digit. \n\n Note: Returned vector should be classify in increasing ordering. \n\n For example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n\tvector<int> ans;\n\tsort(x.begin(), x.end());\n\tfor(int i=0; i<x.size(); i++){\n\t\tif(i==0 || x[i]!=x[i-1]){\n\t\t\tans.push_back(x[i]);\n\t\t}\n\t}\n\treturn ans;\n}\n\nint main(){\n\tvector<int> x = {15, 33, 1422, 1};\n\tvector<int> ans = unique_digits(x);\n\tfor(int i=0; i<ans.size(); i++){\n\t\tprintf(\"%d \", ans[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/105", "prompt": "/*\nGiven a vector of integers, sort the integers that equal between 1 and 9 inclusive, \n change by reversal the resulting vector, and then replace each digit by its corresponding name from \n \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n", "canonical_solution": "    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n    assert (issame(by_length({1, -1, 3, 2}) , {\"Three\", \"Two\", \"One\"}));\n    assert (issame(by_length({9, 4, 8}) , {\"Nine\", \"Eight\", \"Four\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n}\n", "entry_point": "by_length", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of integers, sort the integers that equal between 1 and 9 inclusive, \n change by reversal the resulting vector, and then replace each digit by its corresponding name from \n \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1, 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n  vector<string> result;\n  if(arr.empty()){\n    return result;\n  }\n  sort(arr.begin(), arr.end());\n  reverse(arr.begin(), arr.end());\n  for(int i=0; i<arr.size(); i++){\n    string str = \"\";\n    for(int j=0; j<arr[i]; j++){\n      str += \"One\";\n    }\n    result.push_back(str);\n  }\n  return result;\n}\nvector<string> by_name(vector<int> arr){\n  vector<string> result;\n  if(arr.empty()){\n    return result;\n  }\n  sort(arr.begin(), arr.end());\n  reverse(arr.begin(), arr.end());\n  for(int i=0; i<arr.size(); i++){\n    string str = \"\";\n    for(int j=0; j<arr[i]; j++){\n      str += \"One\";\n    }\n    result.push_back(str);\n  }\n  return result;\n}\nint main(){\n  vector<int> arr = {2, 1, 1, 4, 5, 8, 2, 3};\n  vector<string> result = by_length(arr);\n  for(int i=0; i<result.size(); i++){\n    printf(\"%s\\n\", result[i].c_str());\n  }\n  return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/106", "prompt": "/*\nImplement the function f that takes n as a parameter, \n and return a vector of size n, such that the value of the chemical element at index i is the factorial of i if i is even \n or the sum of act from 1 to i differently. \n i starts from 1. \n the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n", "canonical_solution": "    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n    assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));\n    assert (issame(f(1) , {1}));\n    assert (issame(f(3) , {1, 2, 6}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n}\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/*\nImplement the function f that takes n as a parameter, \n and return a vector of size n, such that the value of the chemical element at index i is the factorial of i if i is even \n or the sum of act from 1 to i differently. \n i starts from 1. \n the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> v(n);\n    for(int i = 1; i <= n; i++){\n        v[i] = i;\n        if(i % 2 == 0){\n            for(int j = 1; j <= i; j++){\n                v[i] = v[i] * j;\n            }\n        }else{\n            for(int j = 1; j <= i; j++){\n                v[i] = v[i] + j;\n            }\n        }\n    }\n    return v;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> v = f(n);\n    for(int i = 0; i < n; i++){\n        printf(\"%d \", v[i]);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/107", "prompt": "/*\nGiven a positive integer n, return a vector that take the numeral of even and leftover \n integer palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n", "canonical_solution": "    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(123) , {8, 13}));\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n    assert (issame(even_odd_palindrome(63) , {6, 8}));\n    assert (issame(even_odd_palindrome(25) , {5, 6}));\n    assert (issame(even_odd_palindrome(19) , {4, 6}));\n    assert (issame(even_odd_palindrome(9) , {4, 5}));\n    assert (issame(even_odd_palindrome(1) , {0, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n}\n", "entry_point": "even_odd_palindrome", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return a vector that take the numeral of even and leftover \n integer palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> even_odd_palindrome_vec;\n    int i = 1;\n    while(i <= n){\n        int j = 1;\n        while(j <= n){\n            if(i % 2 == 0 && j % 2 == 0){\n                even_odd_palindrome_vec.push_back(i * j);\n            }\n            j++;\n        }\n        i++;\n    }\n    return even_odd_palindrome_vec;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> even_odd_palindrome_vec = even_odd_palindrome(n);\n    for(int i = 0; i < even_odd_palindrome_vec.size(); i++){\n        printf(\"%d \", even_odd_palindrome_vec[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/108", "prompt": "/*\nWrite a function count_nums which takes a vector of integers and recurrence \n the act of element which has a sum of finger > 0. \n If a number be negative, then its first sign digit will be minus: \n e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, -2, 0}) == 0);\n    assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);\n    assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);\n    assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);\n    assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);\n    assert (count_nums({-0, 1}) == 1);\n    assert (count_nums({1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, 11, -11}) == 1);\n    assert (count_nums({1, 1, 2}) == 3);\n}\n", "entry_point": "count_nums", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function count_nums which takes a vector of integers and recurrence \n the act of element which has a sum of finger > 0. \n If a number be negative, then its first sign digit will be minus: \n e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int sum = 0;\n    int cnt = 0;\n    for(int i = 0; i < n.size(); i++){\n        if(n[i] > 0){\n            sum += n[i];\n            cnt++;\n        }\n    }\n    return cnt;\n}\nint main(){\n    vector<int> n;\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1);\n    n.push_back(1);\n    n.push_back(2);\n    n.push_back(1"}
{"task_id": "CPP/109", "prompt": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2],... , arr[N].The\nnumbers in the vector will be randomly ordered. Your undertaking is to specify if \n it is potential to get a vector sorted in non - decreasing club by performing \n the follow operation on the given vector: \n     You are allowed to do right transformation operation any issue of time. \n\n One proper chemise operation means shifting all elements of the vector by one \n military position in the right management. The last element of the vector will be move to \n the starting placement in the vector i.e. 0th exponent. \n\n If it exist possible to obtain the grouped vector by performing the above operation \n then return true else return false. \n If the give vector is empty then return true. \n\n Note: The given vector is undertake to get unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n", "canonical_solution": "    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 10, 1, 2})==true);\n    assert (move_one_ball({4, 3, 1, 2})==false);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n    assert (move_one_ball({})==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n}\n", "entry_point": "move_one_ball", "seed": 0, "perturbed": true, "gc": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2],..., arr[N].The\nnumbers in the vector will be randomly ordered. Your undertaking is to specify if \n it is potential to get a vector sorted in non - decreasing club by performing \n the follow operation on the given vector: \n     You are allowed to do right transformation operation any issue of time. \n\n One proper chemise operation means shifting all elements of the vector by one \n military position in the right management. The last element of the vector will be move to \n the starting placement in the vector i.e. 0th exponent. \n\n If it exist possible to obtain the grouped vector by performing the above operation \n then return true else return false. \n If the give vector is empty then return true. \n\n Note: The given vector is undertake to get unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if(arr.empty())\n        return true;\n    int n = arr.size();\n    for(int i=0;i<n;i++){\n        if(arr[i]==n-1)\n            arr[i] = 0;\n        else\n            arr[i]++;\n    }\n    for(int i=0;i<n;i++){\n        if(arr[i]!=0)\n            return false;\n    }\n    return true;\n}\nint main(){\n    vector<int> arr;\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&arr[i]);\n    }\n    if(move_one_ball(arr))\n        printf(\"true\\n\");\n    else\n        printf(\"false\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/110", "prompt": "/*\nIn this problem, you will implement a function that takes two vector of number, \n and determines whether it is possible to do an exchange of elements \n between them to make lst1 a vector of only even act. \n There is no terminus ad quem on the number of exchange elements between lst1 and lst2.\nIf it is possible to exchange element between the lst1 and lst2 to make \n all the elements of lst1 to be even, return \" YES \". \n Otherwise, return \" NO \".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == \"YES\" );\n    assert (exchange({5, 7, 3}, {2, 6, 4}) == \"YES\");\n    assert (exchange({5, 7, 3}, {2, 6, 3}) == \"NO\" );\n    assert (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == \"NO\");\n    assert (exchange({100, 200}, {200, 200}) == \"YES\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n}\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*\nIn this problem, you will implement a function that takes two vector of number, \n and determines whether it is possible to do an exchange of elements \n between them to make lst1 a vector of only even act. \n There is no terminus ad quem on the number of exchange elements between lst1 and lst2.\nIf it is possible to exchange element between the lst1 and lst2 to make \n all the elements of lst1 to be even, return \" YES \". \n Otherwise, return \" NO \".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int i=0,j=0;\n    while(i<lst1.size() && j<lst2.size()){\n        if(lst1[i]%2==0 && lst2[j]%2==0){\n            lst1[i]^=lst2[j];\n            lst2[j]^=lst1[i];\n            lst1[i]^=lst2[j];\n            lst2[j]^=lst1[i];\n            i++;\n            j++;\n        }\n        else if(lst1[i]%2==0){\n            i++;\n        }\n        else if(lst2[j]%2==0){\n            j++;\n        }\n    }\n    if(i==lst1.size() && j==lst2.size()){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\nint main(){\n    vector<int> lst1={1,2,3,4};\n    vector<int> lst2={1,5,3,4};\n    string result=exchange(lst1,lst2);\n    printf(\"%s\\n\",result.c_str());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/111", "prompt": "/*\nGiven a string representing a space classify small letter letter, return a map \n of the letter with the most repetition and containing the corresponding count.\nIf respective letter induce the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n", "canonical_solution": "    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c d g\") , {{'a', 1}, {'b', 1}, {'c', 1}, {'d', 1}, {'g', 1}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"\") , {}));\n    assert (issame(histogram(\"a\") , {{'a', 1}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c\") , {{'a', 1},{'b', 1},{'c', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"\") , {}));\n}\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string representing a space classify small letter letter, return a map \n of the letter with the most repetition and containing the corresponding count.\nIf respective letter induce the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n\tmap<char,int> hist;\n\tfor(int i=0;i<test.size();i++){\n\t\tif(hist.find(test[i])==hist.end()){\n\t\t\thist[test[i]]=1;\n\t\t}else{\n\t\t\thist[test[i]]++;\n\t\t}\n\t}\n\treturn hist;\n}\nint main(){\n\tstring test=\"a b c\";\n\tmap<char,int> hist=histogram(test);\n\tfor(map<char,int>::iterator it=hist.begin();it!=hist.end();it++){\n\t\tprintf(\"%c: %d\\n\",it->first,it->second);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/112", "prompt": "/*\nTask \n We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\nthen arrest if the result drawstring is palindrome. \n A string is name palindrome if it reads the like backward as forth. \n You should return a vector containing the result chain and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n", "canonical_solution": "    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n    assert (issame(reverse_delete(\"dwik\",\"w\") , {\"dik\",\"False\"}));\n    assert (issame(reverse_delete(\"a\",\"a\") , {\"\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"v\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"vabba\",\"v\") , {\"abba\",\"True\"}));\n    assert (issame(reverse_delete(\"mamma\", \"mia\") , {\"\", \"True\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n}\n", "entry_point": "reverse_delete", "seed": 0, "perturbed": true, "gc": "/*\nTask \n We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\nthen arrest if the result drawstring is palindrome. \n A string is name palindrome if it reads the like backward as forth. \n You should return a vector containing the result chain and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n\tvector<string> result;\n\tint i=0,j=0;\n\twhile(i<s.size()){\n\t\tif(s[i]!=c[j]){\n\t\t\tresult.push_back(s.substr(i,j));\n\t\t\ti++;\n\t\t\tj=0;\n\t\t}else{\n\t\t\tj++;\n\t\t\tif(j==c.size()){\n\t\t\t\tresult.push_back(s.substr(i,j));\n\t\t\t\ti++;\n\t\t\t\tj=0;\n\t\t\t}\n\t\t}\n\t}\n\tif(j!=0){\n\t\tresult.push_back(s.substr(i,j));\n\t}\n\treturn result;\n}\nbool is_palindrome(string s){\n\tstring c=\"\";\n\tfor(int i=0;i<s.size();i++){\n\t\tc+=s[i];\n\t}\n\treturn reverse_delete(s,c)==reverse_delete(c,s);\n}\nint main(){\n\tstring s=\"abcde\";\n\tstring c=\"ae\";\n\tvector<string> result=reverse_delete(s,c);\n\tfor(int i=0;i<result.size();i++){\n\t\tprintf(\"%s\\n\",result[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/113", "prompt": "/*\nGiven a vector of strings, where each drawstring consist of only digits, return a vector. \n Each element i of the output should be' the number of leftover elements in the \n drawstring i of the input. \" where all the i's should be replaced by the number \n of leftover digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n    assert (issame(odd_count({\"271\", \"137\", \"314\"}) , {\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    }));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n}\n", "entry_point": "odd_count", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of strings, where each drawstring consist of only digits, return a vector. \n Each element i of the output should be' the number of leftover elements in the \n drawstring i of the input. \" where all the i's should be replaced by the number \n of leftover digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n\tmap<string,int> m;\n\tfor(int i=0;i<lst.size();i++){\n\t\tfor(int j=0;j<lst[i].size();j++){\n\t\t\tif(lst[i][j]=='0'){\n\t\t\t\tm[lst[i][j-1]]++;\n\t\t\t}\n\t\t}\n\t}\n\tvector<string> ans;\n\tfor(map<string,int>::iterator it=m.begin();it!=m.end();it++){\n\t\tans.push_back(it->first+\" \"+it->second);\n\t}\n\treturn ans;\n}\nint main(){\n\tvector<string> lst;\n\tlst.push_back(\"1234567\");\n\tlst.push_back(\"3\");\n\tlst.push_back(\"11111111\");\n\tlst.push_back(\"1\");\n\tlst.push_back(\"8\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"9\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back"}
{"task_id": "CPP/114", "prompt": "/*\nGiven a vector of integers nums, find the minimal sum of any non - empty sub - vector \n of nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n", "canonical_solution": "    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n    assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);\n    assert (minSubArraySum({-9999999999999999}) == -9999999999999999);\n    assert (minSubArraySum({0, 10, 20, 1000000}) == 0);\n    assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);\n    assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);\n    assert (minSubArraySum({-10}) == -10);\n    assert (minSubArraySum({7}) == 7);\n    assert (minSubArraySum({1, -1}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n}\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of integers nums, find the minimal sum of any non - empty sub - vector \n of nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long sum = 0;\n    long long min = 0;\n    for(int i = 0; i < nums.size(); i++){\n        sum += nums[i];\n        if(sum < min){\n            min = sum;\n        }\n        if(sum > min){\n            sum = 0;\n        }\n    }\n    return min;\n}\nint main(){\n    vector<long long> nums;\n    nums.push_back(2);\n    nums.push_back(3);\n    nums.push_back(4);\n    nums.push_back(1);\n    nums.push_back(2);\n    nums.push_back(4);\n    printf(\"minSubArraySum({2, 3, 4, 1, 2, 4}) == %lld\\n\", minSubArraySum(nums));\n    nums.clear();\n    nums.push_back(-1);\n    nums.push_back(-2);\n    nums.push_back(-3);\n    printf(\"minSubArraySum({-1, -2, -3}) == %lld\\n\", minSubArraySum(nums));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/115", "prompt": "/*\nYou are given a rectangular grid of wells. Each row exemplify a individual well, \n and each 1 in a course represents a single unit of water. \n Each well have a corresponding bucket that can be used to extract water from it, \n and all bucket have the same capacity.\nYour task is to use the buckets to evacuate the well. \n Output the act of time you necessitate to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n}\n", "entry_point": "max_fill", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a rectangular grid of wells. Each row exemplify a individual well, \n and each 1 in a course represents a single unit of water. \n Each well have a corresponding bucket that can be used to extract water from it, \n and all bucket have the same capacity.\nYour task is to use the buckets to evacuate the well. \n Output the act of time you necessitate to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int n = grid.size();\n    int m = grid[0].size();\n    vector<vector<int>> dp(n,vector<int>(m,0));\n    for(int i=0;i<n;i++){\n        for(int j=0;j<m;j++){\n            if(grid[i][j]==1){\n                dp[i][j]=1;\n                for(int k=0;k<n;k++){\n                    if(k!=i && grid[k][j]==1){\n                        dp[i][j]+=dp[k][j];\n                    }\n                }\n                for(int k=0;k<m;k++){\n                    if(k!=j && grid[i][k]==1){\n                        dp[i][j]+=dp[i][k];\n                    }\n                }\n            }\n        }\n    }\n    int ans=0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<m;j++){\n            if(dp[i][j]>=capacity){\n                ans+=dp[i][j]-capacity;\n            }\n        }\n    }\n    return ans;\n}\n\nint main(){\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    vector<vector<int>> grid(n,vector<int>(m,0));\n    for(int i=0;i<n;i++){\n        for(int j=0;j<m;j++){\n            scanf(\"%d\",&grid[i][j]);\n        }\n    }\n    int capacity;\n    scanf(\"%d\",&capacity);\n    printf(\"%d\\n\",max_fill(grid,capacity));\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/116", "prompt": "/*\nIn this Kata, you have to sort a vector of non - negative integer according to \n number of one in their binary theatrical performance in ascend orderliness. \n For similar phone number of ones, sort based on decimal value. \n\n It must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n", "canonical_solution": "    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({2,5,77,4,5,3,5,7,2,3,4}) , {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77}));\n    assert (issame(sort_array({3,6,44,12,32,5}) , {32, 3, 5, 6, 12, 44}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n}\n", "entry_point": "sort_array", "seed": 0, "perturbed": true, "gc": "/*\nIn this Kata, you have to sort a vector of non - negative integer according to \n number of one in their binary theatrical performance in ascend orderliness. \n For similar phone number of ones, sort based on decimal value. \n\n It must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    vector<int> sorted_arr;\n    for(int i=0; i<arr.size(); i++){\n        sorted_arr.push_back(arr[i]);\n    }\n    sort(sorted_arr.begin(), sorted_arr.end());\n    return sorted_arr;\n}\n\nint main(){\n    vector<int> arr = {1, 5, 2, 3, 4};\n    vector<int> sorted_arr = sort_array(arr);\n    for(int i=0; i<sorted_arr.size(); i++){\n        printf(\"%d \", sorted_arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/117", "prompt": "/*\nGiven a string s and a natural number n, you have been tax to follow through \n a function that returns a vector of all words from string s that contain exactly \nn consonant, in ordering these words appear in the chain s.\nIf the string s is empty then the routine should return an empty vector. \n bill: you may bear the input string contains only letters and quad.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n    assert (issame(select_words(\"\", 4) , {}));\n    assert (issame(select_words(\"a b c d e f\", 1) , {\"b\", \"c\", \"d\", \"f\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n}\n", "entry_point": "select_words", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string s and a natural number n, you have been tax to follow through \n a function that returns a vector of all words from string s that contain exactly \nn consonant, in ordering these words appear in the chain s.\nIf the string s is empty then the routine should return an empty vector. \n bill: you may bear the input string contains only letters and quad.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n\tvector<string> res;\n\tif(s.empty()){\n\t\treturn res;\n\t}\n\tint len=s.length();\n\tint count=0;\n\tfor(int i=0;i<len;i++){\n\t\tif(s[i]==' '){\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[i]=='q'){\n\t\t\tcount++;\n\t\t}\n\t\tif(s[i]=='l'){\n\t\t\tcount++;\n\t\t}\n\t\tif(s[i]=='u'){\n\t\t\tcount++;\n\t\t}\n\t\tif(s[i]=='n'){\n\t\t\tcount++;\n\t\t}\n\t\tif(s[i]=='e'){\n\t\t\tcount++;\n\t\t}\n\t\tif(s[i]=='r'){\n\t\t\tcount++;\n\t\t}\n\t\tif(s[i]=='t'){\n\t\t\tcount++;\n\t\t}\n\t\tif(s[i]=='h'){\n\t\t\tcount++;\n\t\t}\n\t\tif(s[i]==' '){\n\t\t\tcount=0;\n\t\t}\n\t}\n\tif(count<n){\n\t\treturn res;\n\t}\n\tint start=0;\n\tint end=0;\n\twhile(end<len){\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]=='q'){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]=='l'){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]=='u'){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]=='n'){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]=='e'){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]=='r'){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]=='t'){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]=='h'){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[end]==' '){\n\t\t\tend++;\n\t\t\t"}
{"task_id": "CPP/118", "prompt": "/*\nYou are given a word. Your task is to find the closest vowel that stand between \n two consonant from the right side of the word (shell sensitive). \n\n vowel in the beginning and end doesn't count. refund empty string if you didn't \n find any vowel meet the above condition. \n\n You may assume that the given string contain English letter merely.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"full\") == \"u\");\n    assert (get_closest_vowel(\"easy\") == \"\");\n    assert (get_closest_vowel(\"eAsy\") == \"\");\n    assert (get_closest_vowel(\"ali\") == \"\");\n    assert (get_closest_vowel(\"bad\") == \"a\");\n    assert (get_closest_vowel(\"most\") ==\"o\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"ba\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n    assert (get_closest_vowel(\"anime\") == \"i\");\n    assert (get_closest_vowel(\"Asia\") == \"\");\n    assert (get_closest_vowel(\"Above\") == \"o\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"FULL\") == \"U\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n}\n", "entry_point": "get_closest_vowel", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a word. Your task is to find the closest vowel that stand between \n two consonant from the right side of the word (shell sensitive). \n\n vowel in the beginning and end doesn't count. refund empty string if you didn't \n find any vowel meet the above condition. \n\n You may assume that the given string contain English letter merely.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n\tstring ret;\n\tint i = 0, j = 0;\n\twhile(i < word.size()){\n\t\tif(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n\t\t\tret = word[i];\n\t\t\tbreak;\n\t\t}\n\t\tif(word[i] == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U'){\n\t\t\tret = word[i];\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif(ret == \"\")\n\t\treturn \"\";\n\twhile(j < word.size()){\n\t\tif(word[j] == 'a' || word[j] == 'e' || word[j] == 'i' || word[j] == 'o' || word[j] == 'u'){\n\t\t\tret = word[j];\n\t\t\tbreak;\n\t\t}\n\t\tif(word[j] == 'A' || word[j] == 'E' || word[j] == 'I' || word[j] == 'O' || word[j] == 'U'){\n\t\t\tret = word[j];\n\t\t\tbreak;\n\t\t}\n\t\tj++;\n\t}\n\tif(ret == \"\")\n\t\treturn \"\";\n\tif(ret == word[i] || ret == word[j])\n\t\treturn \"\";\n\treturn ret;\n}\nint main(){\n\tstring word;\n\twhile(scanf(\"%s\", &word)!= EOF){\n\t\tprintf(\"%s\\n\", get_closest_vowel(word).c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/119", "prompt": "/*\nYou are given a vector of two strings, both strings dwell of open \n parenthesis' (' or near parenthesis')' only. \n Your problem is to check if it be possible to concatenate the two strings in\nsome order, that the leave chain will be good. \n A string S is considered to embody beneficial if and merely if all parentheses in S \n are balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n", "canonical_solution": "    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n    assert (match_parens({\"(()(())\", \"())())\"}) == \"No\");\n    assert (match_parens({\")())\", \"(()()(\"}) == \"Yes\");\n    assert (match_parens({\"(())))\", \"(()())((\"}) == \"Yes\");\n    assert (match_parens({\"()\", \"())\"}) == \"No\");\n    assert (match_parens({\"(()(\", \"()))()\"}) == \"Yes\");\n    assert (match_parens({\"((((\", \"((())\"}) == \"No\");\n    assert (match_parens({\")(()\", \"(()(\"}) == \"No\");\n    assert (match_parens({\")(\", \")(\"}) == \"No\");\n    assert (match_parens({\"(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \"(\"}) == \"Yes\" );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n}\n", "entry_point": "match_parens", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of two strings, both strings dwell of open \n parenthesis' (' or near parenthesis')' only. \n Your problem is to check if it be possible to concatenate the two strings in\nsome order, that the leave chain will be good. \n A string S is considered to embody beneficial if and merely if all parentheses in S \n are balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n\tstring s;\n\tfor(int i=0; i<lst.size(); i++){\n\t\ts += lst[i];\n\t}\n\treturn s;\n}\nint main(){\n\tvector<string> lst;\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back(\"()\");\n\tlst.push_back"}
{"task_id": "CPP/120", "prompt": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \n of length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n", "canonical_solution": "    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n    assert (issame(maximum({123, -123, 20, 0 , 1, 2, -3}, 3) , {2, 20, 123}));\n    assert (issame(maximum({-123, 20, 0 , 1, 2, -3}, 4) , {0, 1, 2, 20}));\n    assert (issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7) , {-13, -8, 0, 0, 3, 5, 15}));\n    assert (issame(maximum({-1, 0, 2, 5, 3, -10}, 2) , {3, 5}));\n    assert (issame(maximum({1, 0, 5, -7}, 1) , {5}));\n    assert (issame(maximum({4, -4}, 2) , {-4, 4}));\n    assert (issame(maximum({-10, 10}, 2) , {-10, 10}));\n    assert (issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n}\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \n of length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    vector<int> res;\n    int n = arr.size();\n    int m = k;\n    while(m--){\n        res.push_back(arr[0]);\n        arr.erase(arr.begin());\n    }\n    sort(res.begin(),res.end());\n    return res;\n}\nint main(){\n    int n,k;\n    scanf(\"%d%d\",&n,&k);\n    vector<int> arr(n);\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&arr[i]);\n    }\n    vector<int> res = maximum(arr,k);\n    for(int i=0;i<res.size();i++){\n        printf(\"%d \",res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/121", "prompt": "/*\nGiven a non - empty vector of integers, return the sum of all of the curious element that constitute in even military position.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n    assert (solutions({5, 9}) == 5);\n    assert (solutions({2, 4, 8}) == 0);\n    assert (solutions({30, 13, 23, 32}) == 23);\n    assert (solutions({3, 13, 2, 9}) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n}\n", "entry_point": "solutions", "seed": 0, "perturbed": true, "gc": "/*\nGiven a non - empty vector of integers, return the sum of all of the curious element that constitute in even military position.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n\tint sum=0;\n\tfor(int i=0;i<lst.size();i++){\n\t\tif(lst[i]%2==0){\n\t\t\tsum+=lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(5);\n\tlst.push_back(8);\n\tlst.push_back(7);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back("}
{"task_id": "CPP/122", "prompt": "/*\nGiven a non - empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digit from the first k component of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);\n    assert (add_elements({111,121,3,4000,5,6}, 2) == 0);\n    assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n    assert (add_elements({1}, 1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n}\n", "entry_point": "add_elements", "seed": 0, "perturbed": true, "gc": "/*\nGiven a non - empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digit from the first k component of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for(int i=0;i<k;i++){\n        sum+=arr[i];\n    }\n    return sum;\n}\nint main(){\n    int arr[100]={};\n    int k=4;\n    vector<int> arr_v(arr,arr+100);\n    int sum=add_elements(arr_v,k);\n    printf(\"sum of elements with at most %d digit is %d\\n\",k,sum);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/123", "prompt": "/*\nGiven a positive integer n, return a sorted vector that has the curious number in collatz sequence. \n\n The Collatz guess is a conjecture in mathematics that concern a succession defined \n as follow: start with any positive integer n. Then each condition is obtained from the \n previous term as stick to: if the former term be even, the adjacent term is one half of \n the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n notice: \n     1. Collatz(1) is { 1 }. \n     2. return vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n", "canonical_solution": "    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(14) , {1, 5, 7, 11, 13, 17}));\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n    assert (issame(get_odd_collatz(12) , {1, 3, 5}));\n    assert (issame(get_odd_collatz(1) , {1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n}\n", "entry_point": "get_odd_collatz", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return a sorted vector that has the curious number in collatz sequence. \n\n The Collatz guess is a conjecture in mathematics that concern a succession defined \n as follow: start with any positive integer n. Then each condition is obtained from the \n previous term as stick to: if the former term be even, the adjacent term is one half of \n the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n notice: \n     1. Collatz(1) is { 1 }. \n     2. return vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n\tvector<int> result;\n\tif(n==1){\n\t\tresult.push_back(1);\n\t\treturn result;\n\t}\n\tif(n==2){\n\t\tresult.push_back(2);\n\t\treturn result;\n\t}\n\tint i=3;\n\twhile(n>1){\n\t\tif(n%2==0){\n\t\t\tresult.push_back(i);\n\t\t\tn/=2;\n\t\t}else{\n\t\t\tresult.push_back(i*3+1);\n\t\t\tn=n*5+1;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nint main(){\n\tint n;\n\twhile(scanf(\"%d\",&n)!=EOF){\n\t\tprintf(\"%s\\n\",get_odd_collatz(n).size()==1?\"The number is not odd.\\n\":\"The number is odd.\\n\");\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/124", "prompt": "/*\nYou have to write a function which validates a grant date chain and \n reappearance genuine if the date is valid differently false. \n The date is valid if all of the following rule are satisfied: \n 1. The date string is not empty. \n 2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n 3. The month should not be less than 1 or high than 12. \n 4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n", "canonical_solution": "    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"01-01-2007\") == true);\n    assert (valid_date(\"03-32-2011\") == false);\n    assert (valid_date(\"\") == false);\n    assert (valid_date(\"04-31-3000\") == false);\n    assert (valid_date(\"06-06-2005\") == true);\n    assert (valid_date(\"21-31-2000\") == false);\n    assert (valid_date(\"04-12-2003\") == true);\n    assert (valid_date(\"04122003\") == false);\n    assert (valid_date(\"20030412\") == false);\n    assert (valid_date(\"2003-04\") == false);\n    assert (valid_date(\"2003-04-12\") == false);\n    assert (valid_date(\"04-2003\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"06/04/2020\") == false);\n}\n", "entry_point": "valid_date", "seed": 0, "perturbed": true, "gc": "/*\nYou have to write a function which validates a grant date chain and \n reappearance genuine if the date is valid differently false. \n The date is valid if all of the following rule are satisfied: \n 1. The date string is not empty. \n 2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n 3. The month should not be less than 1 or high than 12. \n 4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n\tint month,day,year;\n\tstring month_str,day_str,year_str;\n\tstring::size_type pos;\n\tif(date.length()==0){\n\t\treturn false;\n\t}\n\tpos=date.find_first_of(\"-/\");\n\tif(pos==string::npos){\n\t\treturn false;\n\t}\n\tmonth_str=date.substr(0,pos);\n\tday_str=date.substr(pos+1,2);\n\tyear_str=date.substr(pos+3,4);\n\tmonth=atoi(month_str.c_str());\n\tday=atoi(day_str.c_str());\n\tyear=atoi(year_str.c_str());\n\tif(month<1 || month>12){\n\t\treturn false;\n\t}\n\tif(day<1 || day>31){\n\t\treturn false;\n\t}\n\tif(year<2000 || year>2099){\n\t\treturn false;\n\t}\n\tif(month==2 && day<1 || month==2 && day>29){\n\t\treturn false;\n\t}\n\tif(month==4 && day<1 || month==4 && day>30){\n\t\treturn false;\n\t}\n\tif(month==6 && day<1 || month==6 && day>30){\n\t\treturn false;\n\t}\n\tif(month==9 && day<1 || month==9 && day>30){\n\t\treturn false;\n\t}\n\tif(month==11 && day<1 || month==11 && day>30){\n\t\treturn false;\n\t}\n\tif(month==2 && day==29 && year%4!=0){\n\t\treturn false;\n\t}\n\tif(month==2 && day==29 && year%100==0){\n\t\tif(day>29){\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(month==2 && day==29 && year%400==0){\n\t\tif(day>29){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tstring date;\n\twhile(scanf(\"%s\",&date)!=EOF){\n\t\tif(valid_date(date)){\n\t\t\tprintf(\"true\\n\");\n\t\t}else{\n\t\t\tprintf(\"false\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/125", "prompt": "/*\nGiven a string of words, return a vector of news divide on whitespace, if no whitespaces exists in the text you \n should split on commas',' if no comma exists you should return a vector with one element, the act of lower - case letter with odd order in the \n alphabet, ord(\"a \") = 0, ord(\"b \") = 1, ... ord(\"z \") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n", "canonical_solution": "    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello world,!\") , {\"Hello\",\"world,!\"}));\n    assert (issame(split_words(\"Hello,Hello,world !\") , {\"Hello,Hello,world\",\"!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n    assert (issame(split_words(\"aaabb\") , {\"2\"}));\n    assert (issame(split_words(\"aaaBb\") , {\"1\"}));\n    assert (issame(split_words(\"\") ,{\"0\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n}\n", "entry_point": "split_words", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string of words, return a vector of news divide on whitespace, if no whitespaces exists in the text you \n should split on commas',' if no comma exists you should return a vector with one element, the act of lower - case letter with odd order in the \n alphabet, ord(\"a \") = 0, ord(\"b \") = 1,... ord(\"z \") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n\tvector<string> ret;\n\tstring tmp;\n\tfor(int i=0;i<txt.size();i++){\n\t\tif(txt[i]==' '){\n\t\t\tif(!tmp.empty()){\n\t\t\t\tret.push_back(tmp);\n\t\t\t\ttmp.clear();\n\t\t\t}\n\t\t}else{\n\t\t\ttmp+=txt[i];\n\t\t}\n\t}\n\tif(!tmp.empty()){\n\t\tret.push_back(tmp);\n\t}\n\treturn ret;\n}\nint main(){\n\tstring txt=\"Hello world!\";\n\tvector<string> ret=split_words(txt);\n\tfor(int i=0;i<ret.size();i++){\n\t\tprintf(\"%s\\n\",ret[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/126", "prompt": "/*\nGiven a vector of numbers, return whether or not they are sorted \n in ascend ordering. If vector have more than 1 extra of the like \n number, return false. Assume no minus numbers and only integers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n", "canonical_solution": "    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({}) == true);\n    assert (is_sorted({1}) == true);\n    assert (is_sorted({3, 2, 1}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert (is_sorted({1, 2, 3, 4}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n}\n", "entry_point": "is_sorted", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of numbers, return whether or not they are sorted \n in ascend ordering. If vector have more than 1 extra of the like \n number, return false. Assume no minus numbers and only integers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n\tint n = lst.size();\n\tfor(int i = 0; i < n - 1; i++){\n\t\tif(lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(3);\n\tlst.push_back(4);\n\tlst.push_back(5);\n\tlst.push_back(6);\n\tlst.push_back(7);\n\tlst.push_back(8);\n\tlst.push_back(9);\n\tlst.push_back(10);\n\tlst.push_back(11);\n\tlst.push_back(12);\n\tlst.push_back(13);\n\tlst.push_back(14);\n\tlst.push_back(15);\n\tlst.push_back(16);\n\tlst.push_back(17);\n\tlst.push_back(18);\n\tlst.push_back(19);\n\tlst.push_back(20);\n\tlst.push_back(21);\n\tlst.push_back(22);\n\tlst.push_back(23);\n\tlst.push_back(24);\n\tlst.push_back(25);\n\tlst.push_back(26);\n\tlst.push_back(27);\n\tlst.push_back(28);\n\tlst.push_back(29);\n\tlst.push_back(30);\n\tlst.push_back(31);\n\tlst.push_back(32);\n\tlst.push_back(33);\n\tlst.push_back(34);\n\tlst.push_back(35);\n\tlst.push_back(36);\n\tlst.push_back(37);\n\tlst.push_back(38);\n\tlst.push_back(39);\n\tlst.push_back(40);\n\tlst.push_back(41);\n\tlst.push_back(42);\n\tlst.push_back(43);\n\tlst.push_back(44);\n\tlst.push_back(45);\n\tlst.push_back(46);\n\tlst.push_back(47);\n\tlst.push_back(48);\n\tlst.push_back(49);\n\tlst.push_back(50);\n\tlst.push_back(51);\n\tlst.push_back(52);\n\tlst.push_back(53);\n\tlst.push_back(54);\n\tlst.push_back(55);\n\tlst.push_back(56);\n\tlst.push_back(57);\n\tlst.push_back(58);\n\tlst.push_back(59);\n\tlst.push_back(60);\n\tlst.push_back(61);\n\tlst.push_back(62);\n\tlst.push_back(63);\n\tlst.push_back(64);\n\tlst.push_back(65);\n\tlst.push_back(66);\n\tlst.push_back(67);\n\tlst.push_back(68);\n\tlst.push_back(69);\n\tlst.push_back(70);\n\tlst.push_back(71);\n\tlst.push_back(72);\n\tlst.push_back(73);\n\tlst.push_back(74);\n\tlst.push_back(75);\n\tlst.push_back(76);\n\tlst.push_back(77);\n\tlst.push_back(78);\n\tlst.push_back(79);\n\tlst.push_back(80);\n\tlst.push_back(81);\n\tlst.push_back(82);\n\tlst.push_back(83);\n\tlst.push_back(84);\n\tlst.push_back(85);\n\tlst.push_back(86);\n\tlst.push_back(87);\n\tlst.push_back(88);\n\tlst.push_back(89);\n\tlst.push_back(90);\n\tlst.push_back(91);\n\tlst.push_back(92);\n\tlst.push_back(93);\n\tlst.push_back(94);\n\tlst.push_back(95);\n\tlst.push_back(96);\n\tlst.push_back(97);\n\tlst.push_back(98);\n\tlst.push_back(99);\n\tlst.push_back(100);\n\tlst.push_back(101);\n\tlst.push_back(102);\n\tlst.push_back(103);\n\tlst.push_back(104);\n\tlst.push_back(105);\n\tlst.push_back(106);\n\tlst.push_back(107);\n\tlst.push_back(108);\n\tlst."}
{"task_id": "CPP/127", "prompt": "/*\nYou are given two intervals, \n where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "canonical_solution": "    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n    assert (intersection({-2, 2}, {-4, 0}) == \"YES\");\n    assert (intersection({-11, 2}, {-1, -1}) == \"NO\");\n    assert (intersection({1, 2}, {3, 5}) == \"NO\");\n    assert (intersection({1, 2}, {1, 2}) == \"NO\");\n    assert (intersection({-2, -2}, {-3, -2}) == \"NO\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n}\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*\nYou are given two intervals, \n where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n\tif(interval1.size()==0||interval2.size()==0){\n\t\treturn \"NO\";\n\t}\n\tif(interval1.size()!=interval2.size()){\n\t\treturn \"NO\";\n\t}\n\tint i=0;\n\twhile(i<interval1.size()){\n\t\tif(interval1[i]>interval2[i]){\n\t\t\treturn \"NO\";\n\t\t}\n\t\tif(interval1[i]<interval2[i]){\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(interval1[i]==interval2[i]){\n\t\t\treturn \"YES\";\n\t\t}\n\t\ti++;\n\t}\n\treturn \"NO\";\n}\nint main(){\n\tvector<int> v1;\n\tvector<int> v2;\n\tv1.push_back(1);\n\tv1.push_back(2);\n\tv1.push_back(3);\n\tv2.push_back(2);\n\tv2.push_back(4);\n\tv2.push_back(5);\n\tprintf(\"%s\\n\",intersection(v1,v2).c_str());\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/128", "prompt": "/*\nYou are given a vector arr of integers and you need to return\nsum of order of magnitude of integer multiply by product of all polarity \n of each number in the vector, act by 1, -1 or 0. \n eminence: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n", "canonical_solution": "    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);\n    assert (prod_signs({}) == -32768);\n    assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);\n    assert (prod_signs({-1, 1, -1, 1}) == 4);\n    assert (prod_signs({-1, 1, 1, 1}) == -4);\n    assert (prod_signs({-1, 1, 1, 0}) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({}) == -32768);\n}\n", "entry_point": "prod_signs", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector arr of integers and you need to return\nsum of order of magnitude of integer multiply by product of all polarity \n of each number in the vector, act by 1, -1 or 0. \n eminence: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n\tint ret = 0;\n\tfor(int i = 0; i < arr.size(); i++){\n\t\tret += arr[i] * arr[i];\n\t}\n\treturn ret;\n}\n\nint main(){\n\tvector<int> arr;\n\tarr.push_back(1);\n\tarr.push_back(2);\n\tarr.push_back(2);\n\tarr.push_back(-4);\n\tarr.push_back(0);\n\tarr.push_back(1);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr"}
{"task_id": "CPP/129", "prompt": "/*\nGiven a grid with N rows and N columns (N > = 2) and a positive integer k, \n each cell of the grid incorporate a value. Every integer in the range { 1, N * N } \n inclusive appears exactly once on the cell of the grid.\n\nYou induce to find the minimum path of length k in the grid. You can begin \n from any cell, and in each step you can move to any of the neighbor cells, \n in early password, you can go to cell which partake an edge with you current \n cell. \n Please note that a path of duration k means travel to exactly k cells (not \n inevitably discrete). \n You CANNOT die off the grid.\nA way A (of length k) is consider less than a path barn (of distance k) if \n after reach the order vector of the values on the cell that A and bel move \n through (get's call them lst_A and lst_B), lst_A is lexicographically less \n than lst_B, in early actor's line, there exist an integer exponent i (1 < = i < = k)\nsuch that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n lst_A[j ] = lst_B[j ]. \n It is guaranteed that the answer is unique. \n Return an ordered vector of the value on the cells that the minimal path blend through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "canonical_solution": "    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n    assert (issame(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) , {1, 2, 1, 2}));\n    assert (issame(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) , {1, 10, 1, 10, 1, 10, 1}));\n    assert (issame(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) , {1, 7, 1, 7, 1}));\n    assert (issame(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) , {1, 6, 1, 6, 1, 6, 1, 6, 1}));\n    assert (issame(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) , {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}));\n    assert (issame(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) , {1, 3, 1, 3, 1, 3, 1, 3}));\n    assert (issame(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) , {1, 5, 1, 5, 1, 5, 1, 5}));\n    assert (issame(minPath({{1, 2}, {3, 4}}, 10) , {1, 2, 1, 2, 1, 2, 1, 2, 1, 2}));\n    assert (issame(minPath({{1, 3}, {3, 2}}, 10) , {1, 3, 1, 3, 1, 3, 1, 3, 1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n}\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\nGiven a grid with N rows and N columns (N > = 2) and a positive integer k, \n each cell of the grid incorporate a value. Every integer in the range { 1, N * N } \n inclusive appears exactly once on the cell of the grid.\n\nYou induce to find the minimum path of length k in the grid. You can begin \n from any cell, and in each step you can move to any of the neighbor cells, \n in early password, you can go to cell which partake an edge with you current \n cell. \n Please note that a path of duration k means travel to exactly k cells (not \n inevitably discrete). \n You CANNOT die off the grid.\nA way A (of length k) is consider less than a path barn (of distance k) if \n after reach the order vector of the values on the cell that A and bel move \n through (get's call them lst_A and lst_B), lst_A is lexicographically less \n than lst_B, in early actor's line, there exist an integer exponent i (1 < = i < = k)\nsuch that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n lst_A[j ] = lst_B[j ]. \n It is guaranteed that the answer is unique. \n Return an ordered vector of the value on the cells that the minimal path blend through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int n = grid.size();\n    vector<int> ans(n, 0);\n    int m = grid[0].size();\n    for(int i = 0; i < m; i++){\n        for(int j = 0; j < n; j++){\n            if(i == 0 || j == 0 || i == m - 1 || j == n - 1){\n                ans[j] = grid[j][i];\n            }else{\n                int l = i - 1, r = i + 1, t = j - 1, b = j + 1;\n                while(l >= 0 && r < m && t < n && b < n){\n                    if(grid[t][b] < grid[j][i]){\n                        ans[j] = grid[j][i];\n                    }else if(grid[t][b] > grid[j][i]){\n                        ans[j] = grid[t][b];\n                    }else{\n                        ans[j] = grid[l][r];\n                    }\n                    if(ans[j] == grid[j][i]){\n                        break;\n                    }\n                    if(ans[j] < grid[j][i]){\n                        l--;\n                    }else{\n                        r++;\n                    }\n                    if(ans[j] > grid[j][i]){\n                        t++;\n                    }else{\n                        b++;\n                    }\n                }\n            }\n        }\n    }\n    return ans;\n}\nint main(){\n    int n, k;\n    scanf(\"%d %d\", &n, &k);\n    vector<vector<int>> grid(n, vector<int>(n, 0));\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            scanf(\"%d\", &grid[i][j]);\n        }\n    }\n    vector<int> ans = minPath(grid, k);\n    for(int i = 0; i < ans.size(); i++){\n        printf(\"%d \", ans[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/130", "prompt": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematician in \n the last couple centuries. However, what citizenry don't know is Tribonacci succession. \n Tribonacci succession is defined by the recurrence: \n tri(1) = 3 \n tri(n) = 1 + n / 2, if n is even. \n tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is leftover.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n", "canonical_solution": "    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n    assert (issame(tri(4) , {1, 3, 2, 8, 3}));\n    assert (issame(tri(5) , {1, 3, 2, 8, 3, 15}));\n    assert (issame(tri(6) , {1, 3, 2, 8, 3, 15, 4}));\n    assert (issame(tri(7) , {1, 3, 2, 8, 3, 15, 4, 24}));\n    assert (issame(tri(8) , {1, 3, 2, 8, 3, 15, 4, 24, 5}));\n    assert (issame(tri(9) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35}));\n    assert (issame(tri(20) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11}));\n    assert (issame(tri(0) , {1}));\n    assert (issame(tri(1) , {1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n}\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematician in \n the last couple centuries. However, what citizenry don't know is Tribonacci succession. \n Tribonacci succession is defined by the recurrence: \n tri(1) = 3 \n tri(n) = 1 + n / 2, if n is even. \n tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is leftover.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n\tvector<int> res;\n\tres.push_back(1);\n\tres.push_back(1);\n\tfor(int i = 2; i <= n; i++){\n\t\tres.push_back(res[i-1] + res[i-2]);\n\t}\n\treturn res;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> res = tri(n);\n\tfor(int i = 0; i < res.size(); i++){\n\t\tprintf(\"%d \", res[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/131", "prompt": "/*\nGiven a positive integer n, return the product of the leftover digits.\nReturn 0 if all digits be even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n", "canonical_solution": "    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(5) == 5);\n    assert (digits(54) == 5);\n    assert (digits(120) ==1);\n    assert (digits(5014) == 5);\n    assert (digits(98765) == 315);\n    assert (digits(5576543) == 2625);\n    assert (digits(2468) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(1) == 1);\n    assert (digits(4) == 0);\n    assert (digits(235) ==15);\n}\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return the product of the leftover digits.\nReturn 0 if all digits be even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int res = 0;\n    while(n){\n        res += n%10;\n        n /= 10;\n    }\n    return res;\n}\nint main(){\n    int n;\n    while(scanf(\"%d\",&n)==1){\n        printf(\"%d\\n\",digits(n));\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/132", "prompt": "/*\nCreate a function that takes a string as remark which incorporate only straight brackets. \n The routine should return true if and entirely if there is a valid subsequence of bracket \n where at least one bracket in the sequel is nested. \n\n is_nested (\" [ [ ] ] \") ➞ on-key \n is_nested (\" [ ] ] ] ] ] ] ] [ [ [ [ [ ] \") ➞ assumed \n is_nested (\" [ ] [ ] \") ➞ delusive \n is_nested (\" [ ] \") ➞ false \n is_nested (\" [ [ ] [ ] ] \") ➞ true \n is_nested (\" [ [ ] ] [ [ \") ➞ true \n * / \n # admit < stdio.h > \n # admit < string > \n practice namespace std;\nbool is_nested(string str){\n", "canonical_solution": "    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested((\"[]\")) == false);\n    assert (is_nested(\"[[[[]]]]\") == true);\n    assert (is_nested(\"[]]]]]]]]]]\") == false);\n    assert (is_nested(\"[][][[]]\") == true);\n    assert (is_nested(\"[[]\") == false);\n    assert (is_nested(\"[]]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n    assert (is_nested(\"\") == false);\n    assert (is_nested(\"[[[[[[[[\") == false);\n    assert (is_nested(\"]]]]]]]]\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested(\"[]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n}\n", "entry_point": "is_nested", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes a string as remark which incorporate only straight brackets. \n The routine should return true if and entirely if there is a valid subsequence of bracket \n where at least one bracket in the sequel is nested. \n\n is_nested (\" [ [ ] ] \") ➞ on-key \n is_nested (\" [ ] ] ] ] ] ] ] [ [ [ [ [ ] \") ➞ assumed \n is_nested (\" [ ] [ ] \") ➞ delusive \n is_nested (\" [ ] \") ➞ false \n is_nested (\" [ [ ] [ ] ] \") ➞ true \n is_nested (\" [ [ ] ] [ [ \") ➞ true \n * / \n # admit < stdio.h > \n # admit < string > \n practice namespace std;\nbool is_nested(string str){\n    if(str.empty()){\n        return false;\n    }\n    if(str.size() == 1){\n        return true;\n    }\n    if(str.size() == 2){\n        if(str[0] == '[' && str[str.size()-1] == ']'){\n            return true;\n        }\n        if(str[0] == '(' && str[str.size()-1] == ')'){\n            return true;\n        }\n        if(str[0] == '{' && str[str.size()-1] == '}'){\n            return true;\n        }\n        if(str[0] == '[' && str[str.size()-1] == ']'){\n            return true;\n        }\n        if(str[0] == '(' && str[str.size()-1] == ')'){\n            return true;\n        }\n        if(str[0] == '{' && str[str.size()-1] == '}'){\n            return true;\n        }\n        return false;\n    }\n    if(str[0] == '[' && str[str.size()-1] == ']'){\n        return true;\n    }\n    if(str[0] == '(' && str[str.size()-1] == ')'){\n        return true;\n    }\n    if(str[0] == '{' && str[str.size()-1] == '}'){\n        return true;\n    }\n    if(str[0] == '[' && str[str.size()-1] == ']'){\n        return true;\n    }\n    if(str[0] == '(' && str[str.size()-1] == ')'){\n        return true;\n    }\n    if(str[0] == '{' && str[str.size()-1] == '}'){\n        return true;\n    }\n    return false;\n}\n*/\n<|endoftext|>"}
{"task_id": "CPP/133", "prompt": "/*\nYou are given a vector of numbers. \n You need to return the sum of square number in the given vector, \n round off each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1.0,2,3})==14);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n    assert (sum_squares({100,1,15,2})==10230);\n    assert (sum_squares({10000,10000})==200000000);\n    assert (sum_squares({-1.4,4.6,6.3})==75);\n    assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);\n    assert (sum_squares({0})==0);\n    assert (sum_squares({-1})==1);\n    assert (sum_squares({-1,1,0})==2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1,4,9})==98);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n}\n", "entry_point": "sum_squares", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of numbers. \n You need to return the sum of square number in the given vector, \n round off each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        sum += pow(lst[i], 2);\n    }\n    return sum;\n}\nint main(){\n    vector<float> lst;\n    lst.push_back(1);\n    lst.push_back(2);\n    lst.push_back(3);\n    lst.push_back(4);\n    lst.push_back(9);\n    lst.push_back(0);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(5);\n    lst.push_back(7);\n    lst.push_back(4.2);\n    lst.push_back(-2.4);\n    lst.push_back(1);\n    lst.push_back(1);\n    printf(\"%d\\n\", sum_squares(lst));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/134", "prompt": "/*\nCreate a function that returns true if the final quality \n of a given string constitute an alphabetical quality and is not \n a function of a word, and fake otherwise. \n Note: \" word \" is a group of character separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n", "canonical_solution": "    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"eeeee\") == false);\n    assert (check_if_last_char_is_a_letter(\"A\") == true);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie \") == false);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == false);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"eeeee e \") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "entry_point": "check_if_last_char_is_a_letter", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that returns true if the final quality \n of a given string constitute an alphabetical quality and is not \n a function of a word, and fake otherwise. \n Note: \" word \" is a group of character separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n\tif(txt.length() == 0)\n\t\treturn false;\n\tif(txt.length() == 1)\n\t\treturn true;\n\tif(txt[txt.length()-1] >= 65 && txt[txt.length()-1] <= 90)\n\t\treturn true;\n\tif(txt[txt.length()-1] >= 97 && txt[txt.length()-1] <= 122)\n\t\treturn true;\n\tif(txt[txt.length()-1] >= 48 && txt[txt.length()-1] <= 57)\n\t\treturn true;\n\treturn false;\n}\nint main(){\n\tstring txt;\n\twhile(scanf(\"%s\",&txt)!= EOF){\n\t\tprintf(\"%s\\n\",check_if_last_char_is_a_letter(txt)? \"true\" : \"false\");\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/135", "prompt": "/*\nCreate a function which returns the largest exponent of an element which \n constitute not capital than or adequate to the element immediately preceding it. If \n no such component exists then return -1. The give vector will not contain \n duplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n", "canonical_solution": "    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,4,5})==-1);\n    assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);\n    assert (can_arrange({4,8,5,7,3})==4);\n    assert (can_arrange({})==-1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,3})==-1);\n}\n", "entry_point": "can_arrange", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function which returns the largest exponent of an element which \n constitute not capital than or adequate to the element immediately preceding it. If \n no such component exists then return -1. The give vector will not contain \n duplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int i,j,k,l,m,n,max=0,max_exp=0;\n    for(i=0;i<arr.size();i++){\n        for(j=i+1;j<arr.size();j++){\n            for(k=j+1;k<arr.size();k++){\n                for(l=k+1;l<arr.size();l++){\n                    for(m=l+1;m<arr.size();m++){\n                        for(n=m+1;n<arr.size();n++){\n                            if(arr[i]>arr[j] && arr[i]>arr[k] && arr[i]>arr[l] && arr[i]>arr[m] && arr[i]>arr[n]){\n                                if(arr[i]>max){\n                                    max=arr[i];\n                                    max_exp=i;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return max_exp;\n}\n\nint main(){\n    vector<int> arr;\n    arr.push_back(1);\n    arr.push_back(2);\n    arr.push_back(4);\n    arr.push_back(3);\n    arr.push_back(5);\n    printf(\"%d\\n\",can_arrange(arr));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/136", "prompt": "/*\nCreate a function that returns a vector (a, boron), where \" a \" is \n the largest of damaging integers, and \" b \" be the smallest \n of plus integers in a vector. \n If there is no negative or convinced integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n", "canonical_solution": "    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));\n    assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));\n    assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));\n    assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n}\n", "entry_point": "largest_smallest_integers", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that returns a vector (a, boron), where \" a \" is \n the largest of damaging integers, and \" b \" be the smallest \n of plus integers in a vector. \n If there is no negative or convinced integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n\tvector<int> ans;\n\tif(lst.size() == 0){\n\t\tans.push_back(0);\n\t\tans.push_back(0);\n\t\treturn ans;\n\t}\n\tint max = lst[0];\n\tint min = lst[0];\n\tfor(int i = 1; i < lst.size(); i++){\n\t\tif(lst[i] > max){\n\t\t\tmax = lst[i];\n\t\t}\n\t\tif(lst[i] < min){\n\t\t\tmin = lst[i];\n\t\t}\n\t}\n\tans.push_back(max);\n\tans.push_back(min);\n\treturn ans;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(2);\n\tlst.push_back(4);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(5);\n\tlst.push_back(7);\n\tvector<int> ans = largest_smallest_integers(lst);\n\tfor(int i = 0; i < ans.size(); i++){\n\t\tprintf(\"%d \", ans[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/137", "prompt": "/*\nCreate a function that takes integers, float, or string representing \n real issue, and returns the large variable in its give variable character. \n Return \" None \" if the values be adequate. \n Note: If a actual number is represented as a string, the floating compass point might constitute. or, \n\n compare_one(1, 2.5) ➞ 2.5 \n compare_one(1, \" 2,3 \") ➞ \" 2,3 \" \n compare_one(\"5,1 \", \" 6 \") ➞ \" 6 \" \n compare_one(\"1 \", 1) ➞ \" None \" \n * / \n # admit < stdio.h > \n # include < chain > \n # admit < algorithm > \n # admit < boost / any.hpp > \n practice namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n", "canonical_solution": "    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<int>(compare_one(1, 2)) == 2);\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<int>(compare_one(2, 3)) == 3);\n    assert (boost::any_cast<int>(compare_one(5, 6)) == 6);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), string(\"2\"))) == \"2\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "entry_point": "compare_one", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes integers, float, or string representing \n real issue, and returns the large variable in its give variable character. \n Return \" None \" if the values be adequate. \n Note: If a actual number is represented as a string, the floating compass point might constitute. or, \n\n compare_one(1, 2.5) ➞ 2.5 \n compare_one(1, \" 2,3 \") ➞ \" 2,3 \" \n compare_one(\"5,1 \", \" 6 \") ➞ \" 6 \" \n compare_one(\"1 \", 1) ➞ \" None \" \n * / \n # admit < stdio.h > \n # include < chain > \n # admit < algorithm > \n # admit < boost / any.hpp > \n practice namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n\tif(a.type() == b.type()){\n\t\tif(a.type() == boost::any_cast<int>(a) && a.type() == boost::any_cast<int>(b)){\n\t\t\treturn boost::any_cast<int>(a);\n\t\t}else if(a.type() == boost::any_cast<float>(a) && a.type() == boost::any_cast<float>(b)){\n\t\t\treturn boost::any_cast<float>(a);\n\t\t}else if(a.type() == boost::any_cast<std::string>(a) && a.type() == boost::any_cast<std::string>(b)){\n\t\t\treturn boost::any_cast<std::string>(a);\n\t\t}\n\t}\n\treturn boost::any();\n}\n<|endoftext|>"}
{"task_id": "CPP/138", "prompt": "/*\nEvaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n", "canonical_solution": "    if (n%2==0 and n>=8) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n    assert (is_equal_to_sum_even(10) == true);\n    assert (is_equal_to_sum_even(11) == false);\n    assert (is_equal_to_sum_even(12) == true);\n    assert (is_equal_to_sum_even(13) == false);\n    assert (is_equal_to_sum_even(16) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n}\n", "entry_point": "is_equal_to_sum_even", "seed": 0, "perturbed": true, "gc": "/*\nEvaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum % 2 == 0;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%s\\n\", is_equal_to_sum_even(n)? \"true\" : \"false\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/139", "prompt": "/*\nThe Brazilian factorial is defined as: \n brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n where n > 0 \n\n For exemplar:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n", "canonical_solution": "    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n    assert (special_factorial(5) == 34560);\n    assert (special_factorial(7) == 125411328000);\n    assert (special_factorial(1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n}\n", "entry_point": "special_factorial", "seed": 0, "perturbed": true, "gc": "/*\nThe Brazilian factorial is defined as: \n brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n where n > 0 \n\n For exemplar:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n\tlong long fact = 1;\n\tfor(int i = 1; i <= n; i++){\n\t\tfact *= i;\n\t}\n\treturn fact;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tprintf(\"%lld\\n\", special_factorial(n));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/140", "prompt": "/*\nGiven a string text, replace all distance in it with underscore, \n and if a bowed stringed instrument has more than 2 consecutive spaces, \n then replace all straight spaces with - \n\n fix_spaces (\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n", "canonical_solution": "    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert (fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert (fix_spaces(\"Exa   mple\") == \"Exa-mple\");\n    assert (fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Example 1\") == \"Example_1\");\n    assert (fix_spaces(\" Example 2\") == \"_Example_2\");\n    assert (fix_spaces(\" Example   3\") == \"_Example-3\");\n}\n", "entry_point": "fix_spaces", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string text, replace all distance in it with underscore, \n and if a bowed stringed instrument has more than 2 consecutive spaces, \n then replace all straight spaces with - \n\n fix_spaces (\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n\tint i,j,k;\n\tfor(i=0;i<text.size();i++){\n\t\tif(text[i]==' '){\n\t\t\tif(i>0 && text[i-1]==' '){\n\t\t\t\tfor(j=i;j<text.size();j++){\n\t\t\t\t\tif(text[j]==' '){\n\t\t\t\t\t\ttext[j]='_';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor(j=i;j<text.size();j++){\n\t\t\t\t\tif(text[j]==' '){\n\t\t\t\t\t\ttext[j]='_';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn text;\n}\nint main(){\n\tstring text;\n\tgetline(cin,text);\n\tcout<<fix_spaces(text)<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/141", "prompt": "/*\nCreate a function which takes a string exemplify a file's name, and fall \n \" Yes \" if the the file's name is valid, and returns \" No \" differently. \n A file's name is considered to be valid if and only if all the following condition \n are met: \n - There should not be more than three digits (' 0'-'9') in the file's name. \n - The file's name contains precisely one department of transportation \". \" \n - The substring before the department of transportation should not be empty, and it start with a letter from \n the romance alphapet (' a'-'z' and' A'-'Z'). \n - The substring after the dot should be one of these: {' txt \", \" exe \", \" dll \" }\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n", "canonical_solution": "    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n    assert (file_name_check(\"s1sdf3.asd\") == \"No\");\n    assert (file_name_check(\"K.dll\") == \"Yes\");\n    assert (file_name_check(\"MY16FILE3.exe\") == \"Yes\");\n    assert (file_name_check(\"His12FILE94.exe\") == \"No\");\n    assert (file_name_check(\"_Y.txt\") == \"No\");\n    assert (file_name_check(\"?aREYA.exe\") == \"No\");\n    assert (file_name_check(\"/this_is_valid.dll\") == \"No\");\n    assert (file_name_check(\"this_is_valid.wow\") == \"No\");\n    assert (file_name_check(\"this_is_valid.txt\") == \"Yes\");\n    assert (file_name_check(\"this_is_valid.txtexe\") == \"No\");\n    assert (file_name_check(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert (file_name_check(\"@this1_is6_valid.exe\") == \"No\");\n    assert (file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert (file_name_check(\"all.exe.txt\") == \"No\");\n    assert (file_name_check(\"I563_No.exe\") == \"Yes\");\n    assert (file_name_check(\"Is3youfault.txt\") == \"Yes\");\n    assert (file_name_check(\"no_one#knows.dll\") == \"Yes\");\n    assert (file_name_check(\"1I563_Yes3.exe\") == \"No\");\n    assert (file_name_check(\"I563_Yes3.txtt\") == \"No\");\n    assert (file_name_check(\"final..txt\") == \"No\");\n    assert (file_name_check(\"final132\") == \"No\");\n    assert (file_name_check(\"_f4indsartal132.\") == \"No\");\n    assert (file_name_check(\".txt\") == \"No\");\n    assert (file_name_check(\"s.\") == \"No\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n}\n", "entry_point": "file_name_check", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function which takes a string exemplify a file's name, and fall \n \" Yes \" if the the file's name is valid, and returns \" No \" differently. \n A file's name is considered to be valid if and only if all the following condition \n are met: \n - There should not be more than three digits (' 0'-'9') in the file's name. \n - The file's name contains precisely one department of transportation \". \" \n - The substring before the department of transportation should not be empty, and it start with a letter from \n the romance alphapet (' a'-'z' and' A'-'Z'). \n - The substring after the dot should be one of these: {' txt \", \" exe \", \" dll \" }\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n\tif(file_name.length()>3){\n\t\tif(file_name.find(\".\")!=string::npos){\n\t\t\tif(file_name.substr(0,file_name.find(\".\"))!=\"\"){\n\t\t\t\tif(file_name.substr(0,1)>='a' && file_name.substr(0,1)<='z'){\n\t\t\t\t\tif(file_name.substr(file_name.length()-1,1)>='a' && file_name.substr(file_name.length()-1,1)<='z'){\n\t\t\t\t\t\tif(file_name.substr(file_name.length()-2,2)==\". \"){\n\t\t\t\t\t\t\tif(file_name.substr(file_name.length()-3,3)==\". txt \" || file_name.substr(file_name.length()-3,3)==\". exe \" || file_name.substr(file_name.length()-3,3)==\". dll \"){\n\t\t\t\t\t\t\t\treturn \"Yes\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"No\";\n}\nint main(){\n\tstring file_name;\n\twhile(scanf(\"%s\",&file_name)!=EOF){\n\t\tprintf(\"%s\\n\",file_name_check(file_name).c_str());\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/142", "prompt": "/*\n\" \n This function will take a vector of integers. For all entrance in the vector, the affair shall square the integer entry if its index is a \n multiple of 3 and will cube the integer entrance if its index be a multiple of 4 and not a multiple of 3. The routine will not \n change the entries in the vector whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entry. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({1,4,9}) == 14);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);\n    assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);\n    assert (sum_squares({0}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n    assert (sum_squares({-56,-99,1,0,-2}) == 3030);\n    assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);\n    assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);\n    assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n}\n", "entry_point": "sum_squares", "seed": 0, "perturbed": true, "gc": "/*\n\" \n This function will take a vector of integers. For all entrance in the vector, the affair shall square the integer entry if its index is a \n multiple of 3 and will cube the integer entrance if its index be a multiple of 4 and not a multiple of 3. The routine will not \n change the entries in the vector whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entry. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0){\n            sum += lst[i];\n        }\n        else if(i % 4 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main(){\n    vector<int> lst;\n    lst.push_back(1);\n    lst.push_back(2);\n    lst.push_back(3);\n    lst.push_back(-1);\n    lst.push_back(-5);\n    lst.push_back(2);\n    lst.push_back(-1);\n    lst.push_back(-5);\n    printf(\"%d\\n\", sum_squares(lst));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/143", "prompt": "/*\nYou are given a string representing a sentence,\nthe sentence contains some news separate by a space, \n and you have to return a chain that contains the quarrel from the original sentence,\nwhose duration are prime numeral, \n the order of the words in the new string should embody the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert (words_in_sentence(\"there is no place available here\") == \"there is no place\");\n    assert (words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert (words_in_sentence(\"go for it\") == \"go for it\");\n    assert (words_in_sentence(\"here\") == \"\");\n    assert (words_in_sentence(\"here is\") == \"is\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n}\n", "entry_point": "words_in_sentence", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string representing a sentence,\nthe sentence contains some news separate by a space, \n and you have to return a chain that contains the quarrel from the original sentence,\nwhose duration are prime numeral, \n the order of the words in the new string should embody the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string new_sentence;\n    int len = sentence.size();\n    int i = 0;\n    while(i < len){\n        if(sentence[i] ==''){\n            new_sentence += sentence[i];\n            i++;\n            while(i < len && sentence[i]!=''){\n                new_sentence += sentence[i];\n                i++;\n            }\n            new_sentence +='';\n        }\n        else{\n            new_sentence += sentence[i];\n            i++;\n        }\n    }\n    return new_sentence;\n}\n\nint main(){\n    string sentence;\n    while(scanf(\"%s\", &sentence)!= EOF){\n        printf(\"%s\\n\", words_in_sentence(sentence).c_str());\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/144", "prompt": "/*\nYour task is to implement a function that will simplify the expression \n x * n. The routine retort true if x * n evaluates to a solid number and fake \n otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n < numerator>/<denominator > where both numerator and denominator are convinced whole act. \n\n You can wear that x, and n are valid fractions, and do not induce zero as denominator. \n\n simplify(\"1/5 \", \" 5/1 \") = truthful \n simplify(\"1/6 \", \" 2/1 \") = false \n simplify(\"7/10 \", \" 10/2 \") = fake \n * / \n # include < stdio.h > \n # admit < bowed stringed instrument > \n use namespace std;\nbool simplify(string x,string n){\n", "canonical_solution": "    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"5/1\", \"3/1\") == true);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n    assert (simplify(\"2/10\", \"50/10\") == true);\n    assert (simplify(\"7/2\", \"4/2\") == true);\n    assert (simplify(\"11/6\", \"6/1\") == true);\n    assert (simplify(\"2/3\", \"5/2\") == false);\n    assert (simplify(\"5/2\", \"3/5\") == false);\n    assert (simplify(\"2/4\", \"8/4\") == true);\n    assert (simplify(\"2/4\", \"4/2\") == true);\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/5\", \"1/5\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n}\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*\nYour task is to implement a function that will simplify the expression \n x * n. The routine retort true if x * n evaluates to a solid number and fake \n otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n < numerator>/<denominator > where both numerator and denominator are convinced whole act. \n\n You can wear that x, and n are valid fractions, and do not induce zero as denominator. \n\n simplify(\"1/5 \", \" 5/1 \") = truthful \n simplify(\"1/6 \", \" 2/1 \") = false \n simplify(\"7/10 \", \" 10/2 \") = fake \n * / \n # include < stdio.h > \n # admit < bowed stringed instrument > \n use namespace std;\nbool simplify(string x,string n){\n\tint x_len = x.length();\n\tint n_len = n.length();\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n_num = 0;\n\tint n_den = 0;\n\tint x_num = 0;\n\tint x_den = 0;\n\tint x_num_pos = 0;\n\tint x_den_pos = 0;\n\tint n_num_pos = 0;\n\tint n_den_pos = 0;\n\tint x_num_neg = 0;\n\tint x_den_neg = 0;\n\tint n_num_neg = 0;\n\tint n_den_neg = 0;\n\tint x_num_pos_neg = 0;\n\tint x_den_pos_neg = 0;\n\tint n_num_pos_neg = 0;\n\tint n_den_pos_neg = 0;\n\tint x_num_pos_pos = 0;\n\tint x_den_pos_pos = 0;\n\tint n_num_pos_pos = 0;\n\tint n_den_pos_pos = 0;\n\tint x_num_neg_pos = 0;\n\tint x_den_neg_pos = 0;\n\tint n_num_neg_pos = 0;\n\tint n_den_neg_pos = 0;\n\tint x_num_pos_neg = 0;\n\tint x_den_pos_neg = 0;\n\tint n_num_pos_neg = 0;\n\tint n_den_pos_neg = 0;\n\tint x_num_pos_pos = 0;\n\tint x_den_pos_pos = 0;\n\tint n_num_pos_pos = 0;\n\tint n_den_pos_pos = 0;\n\tint x_num_neg_pos = 0;\n\tint x_den_neg_pos = 0;\n\tint n_num_neg_pos = 0;\n\tint n_den_neg_pos = 0;\n\tint x_num_pos_neg = 0;\n\tint x_den_pos_neg = 0;\n\tint n_num_pos_neg = 0;\n\tint n_den_pos_neg = 0;\n\tint x_num_pos_pos = 0;\n\tint x_den_pos_pos = 0;\n\tint n_num_pos_pos = 0;\n\tint n_den_pos_pos = 0;\n\tint x_num_neg_pos = 0;\n\tint x_den_neg_pos = 0;\n\tint n_num_neg_pos = 0;\n\tint n_den_neg_pos = 0;\n\tint x_num_pos_neg = 0;\n\tint x_den_pos_neg = 0;\n\tint n_num_pos_neg = 0;\n\tint n_den_pos_neg = 0;\n\tint x_num_pos_pos = 0;\n\tint x_den_pos_pos = 0;\n\tint n_num_pos_pos = 0;\n\tint n_den_pos_pos = 0;\n\tint x_num_neg_pos = 0;\n\tint x_den_neg_pos = 0;\n\tint n_num_neg_pos = 0;\n\tint n_den_neg_pos = 0;\n\tint x_num_pos_neg = 0;\n\tint x_den_pos_neg = 0;\n\tint n_num_pos_neg = 0;\n\tint n_den_pos_neg = 0;\n\tint x_num_pos_pos = 0;\n\tint x_den_pos_pos = 0;\n\tint n_num_pos_pos = 0;\n\tint n_den_pos_pos = 0;\n\tint x_num_neg_pos = 0;\n\tint x_den_neg_pos = 0;\n\tint n_num_neg_pos = 0;\n\tint n_den_neg_pos = 0;\n\tint x_num_pos_neg = 0;\n\tint x_den_pos_neg = 0;\n\tint n_num_pos_neg = 0;\n\tint n_den_pos_neg = 0;\n\tint x_num_pos_pos = 0;\n\tint x_den_pos_pos = 0;\n\tint n_num_pos_pos = 0;\n\tint n_den_pos_pos = 0;\n\tint x_num_neg_pos = 0;\n\tint x_den_neg_pos = 0;\n\tint n_num_neg_pos = 0;\n\tint n_den_neg_pos = 0;\n\tint x_num_pos_neg = 0;\n\tint x_den_pos_neg = 0;\n\tint n_num_pos_neg = 0;\n\tint n_den_pos_neg = 0;\n\tint x_num_pos_pos = 0;\n\tint x_den_pos_pos = 0;\n\tint n_num_pos_pos = 0;\n\tint n_den_pos_pos = 0;\n\tint x_num_neg_pos = 0;\n\tint x_den_neg_pos = 0;\n\tint n_num_neg_pos = 0;\n\tint n_den_neg_pos = 0;\n\tint x_num_pos_neg = 0;\n\tint x_den_pos_neg = 0;\n\tint n_num_pos_neg = 0;\n\tint n_den_pos_neg = 0;\n\tint x_num_pos_pos = 0;\n\tint x"}
{"task_id": "CPP/145", "prompt": "/*\nWrite a function which sorts the given vector of integers \n in rise holy order harmonize to the sum of their digits. \n eminence: if there are respective detail with like sum of their digits, \n order them based on their index in original vector. \n\n For model:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n", "canonical_solution": "    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46}) , {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n    assert (issame(order_by_points({}) , {}));\n    assert (issame(order_by_points({1, -11, -32, 43, 54, -98, 2, -3}) , {-3, -32, -98, -11, 1, 2, 43, 54}));\n    assert (issame(order_by_points({1,2,3,4,5,6,7,8,9,10,11}) , {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n    assert (issame(order_by_points({0,6,6,-76,-21,23,4}) , {-76, -21, 0, 4, 23, 6, 6}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({}) , {}));\n}\n", "entry_point": "order_by_points", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function which sorts the given vector of integers \n in rise holy order harmonize to the sum of their digits. \n eminence: if there are respective detail with like sum of their digits, \n order them based on their index in original vector. \n\n For model:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n    vector<int> res;\n    for(int i=0; i<nums.size(); i++){\n        int sum=0;\n        for(int j=0; j<nums[i]; j++){\n            sum+=j;\n        }\n        res.push_back(sum);\n    }\n    return res;\n}\nint main(){\n    vector<int> nums={1, 11, -1, -11, -12};\n    vector<int> res=order_by_points(nums);\n    for(int i=0; i<res.size(); i++){\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/146", "prompt": "/*\nWrite a function that takes a vector of numeral as stimulation and reappearance \n the numeral of elements in the vector that be great than 10 and both \n first and final digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({5, -2, 1, -5}) == 0  );\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n    assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);\n    assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);\n    assert (specialFilter({1}) == 0              );\n    assert (specialFilter({}) == 0                   );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n}\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes a vector of numeral as stimulation and reappearance \n the numeral of elements in the vector that be great than 10 and both \n first and final digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n\tint count = 0;\n\tfor(int i = 0; i < nums.size(); i++){\n\t\tif(nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == 1){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tvector<int> nums;\n\tnums.push_back(15);\n\tnums.push_back(-73);\n\tnums.push_back(14);\n\tnums.push_back(-15);\n\tnums.push_back(33);\n\tnums.push_back(-2);\n\tnums.push_back(-3);\n\tnums.push_back(45);\n\tnums.push_back(21);\n\tnums.push_back(109);\n\tprintf(\"%d\\n\", specialFilter(nums));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/147", "prompt": "/*\nYou are given a positive integer n. You have to produce an integer vector a of duration n.\n     For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1. \n     Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \n and a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n", "canonical_solution": "    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n    assert (get_matrix_triples(6) == 4);\n    assert (get_matrix_triples(10) == 36);\n    assert (get_matrix_triples(100) == 53361);\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n}\n", "entry_point": "get_matrix_triples", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a positive integer n. You have to produce an integer vector a of duration n.\n     For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1. \n     Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \n and a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n    vector<int> a(n);\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == 3 * (i + j + k)){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\", get_matrix_triples(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/148", "prompt": "/*\nThere are eight planets in our solar system: the closerst to the Sun \n is Mercury, the adjacent one embody Venus, then Earth, Mars, Jupiter, Saturn, \n Uranus, Neptune. \n spell a function that consume two planet name as strings planet1 and planet2. \n The routine should return a vector containing all planets whose orbits are \n located between the eye socket of planet1 and the orbit of planet2, sorted by \n the proximity to the sun. \n The routine should return an empty vector if planet1 or planet2\nare not right planet name. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n", "canonical_solution": "    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert (issame(bf(\"Neptune\", \"Venus\") , {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Earth\") , {}));\n    assert (issame(bf(\"Mars\", \"Earth\") , {}));\n    assert (issame(bf(\"Jupiter\", \"Makemake\") , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n}\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/*\nThere are eight planets in our solar system: the closerst to the Sun \n is Mercury, the adjacent one embody Venus, then Earth, Mars, Jupiter, Saturn, \n Uranus, Neptune. \n spell a function that consume two planet name as strings planet1 and planet2. \n The routine should return a vector containing all planets whose orbits are \n located between the eye socket of planet1 and the orbit of planet2, sorted by \n the proximity to the sun. \n The routine should return an empty vector if planet1 or planet2\nare not right planet name. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n\tvector<string> planets;\n\tif(planet1.compare(\"Sun\")==0 || planet2.compare(\"Sun\")==0){\n\t\treturn planets;\n\t}\n\tif(planet1.compare(\"Sun\")==0){\n\t\tplanets.push_back(planet2);\n\t\treturn planets;\n\t}\n\tif(planet2.compare(\"Sun\")==0){\n\t\tplanets.push_back(planet1);\n\t\treturn planets;\n\t}\n\tif(planet1.compare(\"Mercury\")==0){\n\t\tif(planet2.compare(\"Venus\")==0){\n\t\t\tplanets.push_back(planet2);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet2.compare(\"Earth\")==0){\n\t\t\tplanets.push_back(planet2);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet2.compare(\"Mars\")==0){\n\t\t\tplanets.push_back(planet2);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet2.compare(\"Jupiter\")==0){\n\t\t\tplanets.push_back(planet2);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet2.compare(\"Saturn\")==0){\n\t\t\tplanets.push_back(planet2);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet2.compare(\"Uranus\")==0){\n\t\t\tplanets.push_back(planet2);\n\t\t\treturn planets;\n\t\t}\n\t}\n\tif(planet2.compare(\"Mercury\")==0){\n\t\tif(planet1.compare(\"Venus\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet1.compare(\"Earth\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet1.compare(\"Mars\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet1.compare(\"Jupiter\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet1.compare(\"Saturn\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet1.compare(\"Uranus\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t}\n\tif(planet1.compare(\"Venus\")==0){\n\t\tif(planet2.compare(\"Earth\")==0){\n\t\t\tplanets.push_back(planet2);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet2.compare(\"Mars\")==0){\n\t\t\tplanets.push_back(planet2);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet2.compare(\"Jupiter\")==0){\n\t\t\tplanets.push_back(planet2);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet2.compare(\"Saturn\")==0){\n\t\t\tplanets.push_back(planet2);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet2.compare(\"Uranus\")==0){\n\t\t\tplanets.push_back(planet2);\n\t\t\treturn planets;\n\t\t}\n\t}\n\tif(planet2.compare(\"Earth\")==0){\n\t\tif(planet1.compare(\"Mars\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet1.compare(\"Jupiter\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet1.compare(\"Saturn\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet1.compare(\"Uranus\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t}\n\tif(planet2.compare(\"Mars\")==0){\n\t\tif(planet1.compare(\"Jupiter\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet1.compare(\"Saturn\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet1.compare(\"Uranus\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet1.compare(\"Venus\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t}\n\tif(planet2.compare(\"Jupiter\")==0){\n\t\tif(planet1.compare(\"Saturn\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet1.compare(\"Uranus\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet1.compare(\"Venus\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t}\n\tif(planet2.compare(\"Saturn\")==0){\n\t\tif(planet1.compare(\"Uranus\")==0){\n\t\t\tplanets.push_back(planet1);\n\t\t\treturn planets;\n\t\t}\n\t\tif(planet1.compare(\"Venus"}
{"task_id": "CPP/149", "prompt": "/*\nWrite a function that accepts a vector of string as a argument, \n delete the strings that accept odd duration from it, \n and returns the leave vector with a classify order, \n The vector is always a vector of string and never a vector of numbers, \n and it may contain duplicates. \n The club of the vector should be ascending by duration of each bible, and you \n should return the vector classify by that rule. \n If two words suffer the same distance, sort the vector alphabetically. \n The routine should return a vector of strings in screen holy order. \n You may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"school\", \"AI\", \"asdf\", \"b\"}) , {\"AI\", \"asdf\", \"school\"}));\n    assert (issame(sorted_list_sum({\"d\", \"b\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"d\", \"dcba\", \"abcd\", \"a\"}) , {\"abcd\", \"dcba\"}));\n    assert (issame(sorted_list_sum({\"AI\", \"ai\", \"au\"}) , {\"AI\", \"ai\", \"au\"}));\n    assert (issame(sorted_list_sum({\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"aaaa\", \"bbbb\", \"dd\", \"cc\"}) , {\"cc\", \"dd\", \"aaaa\", \"bbbb\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"ab\", \"a\", \"aaa\", \"cd\"}) , {\"ab\", \"cd\"}));\n}\n", "entry_point": "sorted_list_sum", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that accepts a vector of string as a argument, \n delete the strings that accept odd duration from it, \n and returns the leave vector with a classify order, \n The vector is always a vector of string and never a vector of numbers, \n and it may contain duplicates. \n The club of the vector should be ascending by duration of each bible, and you \n should return the vector classify by that rule. \n If two words suffer the same distance, sort the vector alphabetically. \n The routine should return a vector of strings in screen holy order. \n You may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> ret;\n    sort(lst.begin(), lst.end());\n    for(auto it = lst.begin(); it!= lst.end(); it++){\n        if(it->size() == 1){\n            ret.push_back(*it);\n        }\n    }\n    return ret;\n}\nvector<string> vector_sort(vector<string> lst){\n    vector<string> ret;\n    for(auto it = lst.begin(); it!= lst.end(); it++){\n        if(it->size() == 1){\n            ret.push_back(*it);\n        }\n    }\n    sort(ret.begin(), ret.end());\n    return ret;\n}\nint main(){\n    vector<string> lst = {\"aa\", \"a\", \"aaa\"};\n    vector<string> ret = sorted_list_sum(lst);\n    for(auto it = ret.begin(); it!= ret.end(); it++){\n        printf(\"%s\\n\", *it);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/150", "prompt": "/*\nA simple program which should return the value of x if n is \n a choice issue and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n", "canonical_solution": "    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n    assert (x_or_y(3, 33, 5212) == 33);\n    assert (x_or_y(1259, 3, 52) == 3);\n    assert (x_or_y(7919, -1, 12) == -1);\n    assert (x_or_y(3609, 1245, 583) == 583);\n    assert (x_or_y(91, 56, 129) == 129);\n    assert (x_or_y(6, 34, 1234) == 1234);\n    assert (x_or_y(1, 2, 0) == 0);\n    assert (x_or_y(2, 2, 0) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n}\n", "entry_point": "x_or_y", "seed": 0, "perturbed": true, "gc": "/*\nA simple program which should return the value of x if n is \n a choice issue and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n\tif(n == x){\n\t\treturn x;\n\t}\n\telse{\n\t\treturn y;\n\t}\n}\nint main(){\n\tint n;\n\tint x,y;\n\tscanf(\"%d\",&n);\n\tscanf(\"%d %d\",&x,&y);\n\tprintf(\"%d\\n\",x_or_y(n,x,y));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/151", "prompt": "/*\nGiven a vector of numbers, return the sum of squares of the numeral \n in the vector that embody odd. Ignore issue that are minus or not integers. \n\n double_the_difference({1, 3, 2, 0 }) = = 1 + 9 + 0 + 0 = 10 \n double_the_difference({-1, -2, 0 }) = = 0 \n double_the_difference({9, -2 }) = = 81 \n double_the_difference({0 }) = = 0  \n\n If the remark vector is empty, return 0. \n * / \n # admit < stdio.h > \n # admit < math.h > \n # admit < vector > \n using namespace std;\nlong farseeing double_the_difference(vector < ice-cream soda > lst){\n", "canonical_solution": "    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({}) == 0);\n    assert (double_the_difference({5, 4}) == 25);\n    assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );\n    assert (double_the_difference({-10, -20, -30}) == 0 );\n    assert (double_the_difference({-1, -2, 8}) == 0);\n    assert (double_the_difference({0.2, 3, 5}) == 34);\n    \n    \n    long long odd_sum=0;\n    vector<float> lst={};\n\n    for (int i=-99;i<100;i+=2)\n    {\n        lst.push_back(i+0.0);\n        if (i>0 and i%2==1) odd_sum+=i*i;\n    }\n  \n    assert (double_the_difference(lst) == odd_sum );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({1, 3, 2, 0}) == 10);\n    assert (double_the_difference({-1, -2, 0}) == 0);\n    assert (double_the_difference({9, -2}) == 81 );\n    assert (double_the_difference({0}) == 0  );\n}\n", "entry_point": "double_the_difference", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of numbers, return the sum of squares of the numeral \n in the vector that embody odd. Ignore issue that are minus or not integers. \n\n double_the_difference({1, 3, 2, 0 }) = = 1 + 9 + 0 + 0 = 10 \n double_the_difference({-1, -2, 0 }) = = 0 \n double_the_difference({9, -2 }) = = 81 \n double_the_difference({0 }) = = 0  \n\n If the remark vector is empty, return 0. \n * / \n # admit < stdio.h > \n # admit < math.h > \n # admit < vector > \n using namespace std;\nlong farseeing double_the_difference(vector < ice-cream soda > lst){\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++){\n        if (lst[i] % 2 == 1){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n<|endoftext|>"}
{"task_id": "CPP/152", "prompt": "/*\nI think we all remember that feeling when the solution of some long - expect \n consequence is last known. The feelings and thoughts you have at that consequence are \n definitely deserving noting down and compare. \n Your task is to determine if a person correctly think the results of a number of matches. \n You are feed two vector of scores and guess of adequate length, where each index shows a match. \n fall a vector of the like length denoting how far off each guess was. If they have guessed correctly, \n the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n", "canonical_solution": "    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));\n    assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));\n    assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n}\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*\nI think we all remember that feeling when the solution of some long - expect \n consequence is last known. The feelings and thoughts you have at that consequence are \n definitely deserving noting down and compare. \n Your task is to determine if a person correctly think the results of a number of matches. \n You are feed two vector of scores and guess of adequate length, where each index shows a match. \n fall a vector of the like length denoting how far off each guess was. If they have guessed correctly, \n the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n\tvector<int> result;\n\tint i,j;\n\tfor(i=0;i<game.size();i++){\n\t\tfor(j=0;j<guess.size();j++){\n\t\t\tif(game[i]==guess[j]){\n\t\t\t\tresult.push_back(0);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(abs(game[i]-guess[j])<=1){\n\t\t\t\tresult.push_back(abs(game[i]-guess[j]));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tvector<int> game;\n\tvector<int> guess;\n\tint i,j;\n\tfor(i=0;i<5;i++){\n\t\tscanf(\"%d\",&game[i]);\n\t}\n\tfor(i=0;i<5;i++){\n\t\tscanf(\"%d\",&guess[i]);\n\t}\n\tvector<int> result=compare(game,guess);\n\tfor(i=0;i<result.size();i++){\n\t\tprintf(\"%d \",result[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/153", "prompt": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be use to load extra classes to the class. The \n strength of the extension is as follow: Let CAP exist the number of the uppercase \n letter in the extension's name, and let SM be the number of small letter letter \nin the extension's name, the strength is give by the fraction CAP - SM. \n You should find the strongest extension and return a string in this \n format: ClassName. StrongestExtensionName. \n If there embody two or more extensions with the like strength, you should \n choose the one that do foremost in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "canonical_solution": "    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"Watashi\", {\"tEN\", \"niNE\", \"eIGHt8OKe\"}) == \"Watashi.eIGHt8OKe\");\n    assert (Strongest_Extension(\"Boku123\", {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}) == \"Boku123.YEs.WeCaNe\");\n    assert (Strongest_Extension(\"__YESIMHERE\", {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}) == \"__YESIMHERE.NuLl__\");\n    assert (Strongest_Extension(\"K\", {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}) == \"K.TAR\");\n    assert (Strongest_Extension(\"__HAHA\", {\"Tab\", \"123\", \"781345\", \"-_-\"}) == \"__HAHA.123\");\n    assert (Strongest_Extension(\"YameRore\", {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}) == \"YameRore.okIWILL123\");\n    assert (Strongest_Extension(\"finNNalLLly\", {\"Die\", \"NowW\", \"Wow\", \"WoW\"}) == \"finNNalLLly.WoW\");\n    assert (Strongest_Extension(\"_\", {\"Bb\", \"91245\"}) == \"_.Bb\");\n    assert (Strongest_Extension(\"Sp\", {\"671235\", \"Bb\"}) == \"Sp.671235\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\");\n}\n", "entry_point": "Strongest_Extension", "seed": 0, "perturbed": true, "gc": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be use to load extra classes to the class. The \n strength of the extension is as follow: Let CAP exist the number of the uppercase \n letter in the extension's name, and let SM be the number of small letter letter \nin the extension's name, the strength is give by the fraction CAP - SM. \n You should find the strongest extension and return a string in this \n format: ClassName. StrongestExtensionName. \n If there embody two or more extensions with the like strength, you should \n choose the one that do foremost in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n\tint max_strength = 0;\n\tstring max_extension = \"\";\n\tfor(int i = 0; i < extensions.size(); i++){\n\t\tint strength = 0;\n\t\tfor(int j = 0; j < extensions[i].size(); j++){\n\t\t\tif(extensions[i][j] >= class_name[j]){\n\t\t\t\tstrength++;\n\t\t\t}\n\t\t}\n\t\tif(strength > max_strength){\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\nint main(){\n\tstring class_name = \"Slices\";\n\tvector<string> extensions = {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"};\n\tstring result = Strongest_Extension(class_name, extensions);\n\tprintf(\"%s\\n\", result.c_str());\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/154", "prompt": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n cycpattern_check(\"abcd\",\"abd \") = > false \n cycpattern_check(\"hello\",\"ell \") = > on-key \n cycpattern_check(\"whassup\",\"psus \") = > false \n cycpattern_check(\"abab\",\"baa \") = > true \n cycpattern_check(\"efef\",\"eeff \") = > false \n cycpattern_check(\"himenss\",'simen \") = > true \n\n * / \n # include < stdio.h > \n # include < chain > \n using namespace std;\nbool cycpattern_check(string a,string b){\n", "canonical_solution": "    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"xyzw\",\"xyw\") == false );\n    assert  (cycpattern_check(\"yello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whattup\",\"ptut\") == false );\n    assert  (cycpattern_check(\"efef\",\"fee\") == true );\n    assert  (cycpattern_check(\"abab\",\"aabb\") == false );\n    assert  (cycpattern_check(\"winemtt\",\"tinem\") == true );\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"abcd\",\"abd\") == false );\n    assert  (cycpattern_check(\"hello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whassup\",\"psus\") == false );\n    assert  (cycpattern_check(\"abab\",\"baa\") == true );\n    assert  (cycpattern_check(\"efef\",\"eeff\") == false );\n    assert  (cycpattern_check(\"himenss\",\"simen\") == true );\n}\n", "entry_point": "cycpattern_check", "seed": 0, "perturbed": true, "gc": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n cycpattern_check(\"abcd\",\"abd \") = > false \n cycpattern_check(\"hello\",\"ell \") = > on-key \n cycpattern_check(\"whassup\",\"psus \") = > false \n cycpattern_check(\"abab\",\"baa \") = > true \n cycpattern_check(\"efef\",\"eeff \") = > false \n cycpattern_check(\"himenss\",'simen \") = > true \n\n * / \n # include < stdio.h > \n # include < chain > \n using namespace std;\nbool cycpattern_check(string a,string b){\n\tif(a.length()!=b.length()){\n\t\treturn false;\n\t}\n\tstring c;\n\tfor(int i=0;i<a.length();i++){\n\t\tc=a.substr(i,1);\n\t\tif(b.find(c)!=string::npos){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main(){\n\tstring a,b;\n\tcin>>a>>b;\n\tif(cycpattern_check(a,b)){\n\t\tcout<<\"on-key\"<<endl;\n\t}else{\n\t\tcout<<\"false\"<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/155", "prompt": "/*\nGiven an integer. return a vector that has the phone number of even and curious digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n", "canonical_solution": "    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(7) , {0, 1}));\n    assert (issame(even_odd_count(-78) , {1, 1}));\n    assert (issame(even_odd_count(3452) , {2, 2}));\n    assert (issame(even_odd_count(346211) , {3, 3}));\n    assert (issame(even_odd_count(-345821) , {3, 3}));\n    assert (issame(even_odd_count(-2) , {1, 0}));\n    assert (issame(even_odd_count(-45347) , {2, 3}));\n    assert (issame(even_odd_count(0) , {1, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(-12) , {1, 1}));\n    assert (issame(even_odd_count(123) , {1, 2}));\n}\n", "entry_point": "even_odd_count", "seed": 0, "perturbed": true, "gc": "/*\nGiven an integer. return a vector that has the phone number of even and curious digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> even_odd(2,0);\n    int even_count = 0;\n    int odd_count = 0;\n    for(int i = 0; i < num; i++){\n        if(num % i == 0){\n            even_count++;\n        }else{\n            odd_count++;\n        }\n    }\n    if(even_count % 2 == 0){\n        even_odd[0] = even_count;\n    }else{\n        even_odd[1] = even_count;\n    }\n    if(odd_count % 2 == 0){\n        even_odd[0] = odd_count;\n    }else{\n        even_odd[1] = odd_count;\n    }\n    return even_odd;\n}\nint main(){\n    int num;\n    while(scanf(\"%d\",&num)!= EOF){\n        vector<int> even_odd = even_odd_count(num);\n        for(int i = 0; i < 2; i++){\n            printf(\"%d \",even_odd[i]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/156", "prompt": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string, \n and return it in lowercase. \n restriction: 1 < = num < = 1000 \n\n Examples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n", "canonical_solution": "    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(251) == \"ccli\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n    assert (int_to_mini_romank(500) == \"d\");\n    assert (int_to_mini_romank(1) == \"i\");\n    assert (int_to_mini_romank(4) == \"iv\");\n    assert (int_to_mini_romank(43) == \"xliii\");\n    assert (int_to_mini_romank(90) == \"xc\");\n    assert (int_to_mini_romank(94) == \"xciv\");\n    assert (int_to_mini_romank(532) == \"dxxxii\");\n    assert (int_to_mini_romank(900) == \"cm\");\n    assert (int_to_mini_romank(994) == \"cmxciv\");\n    assert (int_to_mini_romank(1000) == \"m\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n}\n", "entry_point": "int_to_mini_romank", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string, \n and return it in lowercase. \n restriction: 1 < = num < = 1000 \n\n Examples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n\tvector<string> v;\n\tv.push_back(\"M\");\n\tv.push_back(\"CM\");\n\tv.push_back(\"D\");\n\tv.push_back(\"CD\");\n\tv.push_back(\"C\");\n\tv.push_back(\"XC\");\n\tv.push_back(\"L\");\n\tv.push_back(\"XL\");\n\tv.push_back(\"X\");\n\tv.push_back(\"IX\");\n\tv.push_back(\"V\");\n\tv.push_back(\"IV\");\n\tv.push_back(\"I\");\n\tstring mini_roman = \"\";\n\tfor(int i = 0; i < v.size(); i++){\n\t\tif(number < v[i].size()){\n\t\t\tmini_roman = v[i][number];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn mini_roman;\n}\nint main(){\n\tint number;\n\tscanf(\"%d\", &number);\n\tprintf(\"%s\", int_to_mini_romank(number).c_str());\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/157", "prompt": "/*\nGiven the lengths of the three sides of a triangle. refund on-key if the three \n sides form a justly - angled triangulum, fake differently. \n A correctly - angle triangle is a triangle in which one slant is right slant or \n 90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n", "canonical_solution": "    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n    assert (right_angle_triangle(10, 6, 8) == true);\n    assert (right_angle_triangle(2, 2, 2) == false);\n    assert (right_angle_triangle(7, 24, 25) == true);\n    assert (right_angle_triangle(10, 5, 7) == false);\n    assert (right_angle_triangle(5, 12, 13) == true);\n    assert (right_angle_triangle(15, 8, 17) == true);\n    assert (right_angle_triangle(48, 55, 73) == true);\n    assert (right_angle_triangle(1, 1, 1) == false);\n    assert (right_angle_triangle(2, 2, 10) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n}\n", "entry_point": "right_angle_triangle", "seed": 0, "perturbed": true, "gc": "/*\nGiven the lengths of the three sides of a triangle. refund on-key if the three \n sides form a justly - angled triangulum, fake differently. \n A correctly - angle triangle is a triangle in which one slant is right slant or \n 90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n\tif(a==b && b==c){\n\t\treturn true;\n\t}\n\tif(a==b || b==c || c==a){\n\t\treturn false;\n\t}\n\tfloat s=(a+b+c)/2;\n\tfloat s1=(a+b)/2;\n\tfloat s2=(a+c)/2;\n\tfloat s3=(b+c)/2;\n\tfloat s4=(a+c)/2;\n\tfloat s5=(b+c)/2;\n\tfloat s6=(a+b)/2;\n\tfloat s7=(a+c)/2;\n\tfloat s8=(b+c)/2;\n\tfloat s9=(a+c)/2;\n\tfloat s10=(b+c)/2;\n\tfloat s11=(a+b)/2;\n\tfloat s12=(a+c)/2;\n\tfloat s13=(b+c)/2;\n\tfloat s14=(a+c)/2;\n\tfloat s15=(b+c)/2;\n\tfloat s16=(a+b)/2;\n\tfloat s17=(a+c)/2;\n\tfloat s18=(b+c)/2;\n\tfloat s19=(a+c)/2;\n\tfloat s20=(b+c)/2;\n\tfloat s21=(a+b)/2;\n\tfloat s22=(a+c)/2;\n\tfloat s23=(b+c)/2;\n\tfloat s24=(a+c)/2;\n\tfloat s25=(b+c)/2;\n\tfloat s26=(a+b)/2;\n\tfloat s27=(a+c)/2;\n\tfloat s28=(b+c)/2;\n\tfloat s29=(a+c)/2;\n\tfloat s30=(b+c)/2;\n\tfloat s31=(a+b)/2;\n\tfloat s32=(a+c)/2;\n\tfloat s33=(b+c)/2;\n\tfloat s34=(a+c)/2;\n\tfloat s35=(b+c)/2;\n\tfloat s36=(a+b)/2;\n\tfloat s37=(a+c)/2;\n\tfloat s38=(b+c)/2;\n\tfloat s39=(a+c)/2;\n\tfloat s40=(b+c)/2;\n\tfloat s41=(a+b)/2;\n\tfloat s42=(a+c)/2;\n\tfloat s43=(b+c)/2;\n\tfloat s44=(a+c)/2;\n\tfloat s45=(b+c)/2;\n\tfloat s46=(a+b)/2;\n\tfloat s47=(a+c)/2;\n\tfloat s48=(b+c)/2;\n\tfloat s49=(a+c)/2;\n\tfloat s50=(b+c)/2;\n\tfloat s51=(a+b)/2;\n\tfloat s52=(a+c)/2;\n\tfloat s53=(b+c)/2;\n\tfloat s54=(a+c)/2;\n\tfloat s55=(b+c)/2;\n\tfloat s56=(a+b)/2;\n\tfloat s57=(a+c)/2;\n\tfloat s58=(b+c)/2;\n\tfloat s59=(a+c)/2;\n\tfloat s60=(b+c)/2;\n\tfloat s61=(a+b)/2;\n\tfloat s62=(a+c)/2;\n\tfloat s63=(b+c)/2;\n\tfloat s64=(a+c)/2;\n\tfloat s65=(b+c)/2;\n\tfloat s66=(a+b)/2;\n\tfloat s67=(a+c)/2;\n\tfloat s68=(b+c)/2;\n\tfloat s69=(a+c)/2;\n\tfloat s70=(b+c)/2;\n\tfloat s71=(a+b)/2;\n\tfloat s72=(a+c)/2;\n\tfloat s73=(b+c)/2;\n\tfloat s74=(a+c)/2;\n\tfloat s75=(b+c)/2;\n\tfloat s76=(a+b)/2;\n\tfloat s77=(a+c)/2;\n\tfloat s78=(b+c)/2;\n\tfloat s79=(a+c)/2;\n\tfloat s80=(b+c)/2;\n\tfloat s81=(a+b)/2;\n\tfloat s82=(a+c)/2;\n\tfloat s83=(b+c)/2;\n\tfloat s84=(a+c)/2;\n\tfloat s85=(b+c)/2;\n\tfloat s86=(a+b)/2;\n\tfloat s87=(a+c)/2;\n\tfloat s88=(b+c)/2;\n\tfloat s89=(a+c)/2;\n\tfloat s90=(b+c)/2;\n\tfloat s91=(a+b)/2;\n\tfloat s92=(a+c)/2;\n\tfloat s93=(b+c)/2;\n\tfloat s94=(a+c)/2;\n\tfloat s95=(b+c)/2;\n\tfloat s96=(a+b)/2;\n\tfloat s97=(a+c)/2;\n\tfloat s98=(b+c)/2;\n\tfloat s99=(a+c)/2;\n\tfloat s100=(b+c)/2;\n\tfloat s101=(a+b)/2;\n\tfloat s102=(a+c)/2;\n\tfloat s103=(b+c)/2;\n\tfloat s104=(a+c)/2;\n\tfloat s105=(b+c)/2;\n\tfloat s106=(a+b)/2;\n\tfloat s107=(a+c)/2;\n\tfloat s108=(b+c)/2;\n\tfloat s109=(a+c)/2;\n\tfloat s110=(b+c)/2;\n\tfloat s111=(a+b)/2;\n\tfloat s112=(a+c"}
{"task_id": "CPP/158", "prompt": "/*\nWrite a function that accepts a vector of string. \n The vector incorporate different words. Return the news with maximal number \n of unique character. If multiple strings have maximum number of unique\ncharacters, return the one which comes foremost in lexicographical ordering. \n\n find_max({\"name \", \" of \",' string \" }) = =' string \" \n find_max({\"name \", \" enam \", \" plot \" }) = = \" enam \" \n find_max({\"aaaaaaa \", \" bb \", \" milliliter \" }) = = \" aaaaaaa \" \n * / \n # admit < stdio.h > \n # admit < vector > \n # include < string > \n # include < algorithm > \n use namespace std;\nstring find_max(vector<string> words){\n", "canonical_solution": "    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n    assert ((find_max({\"abc\", \"cba\"}) == \"abc\"));\n    assert ((find_max({\"play\", \"this\", \"game\", \"of\",\"footbott\"}) == \"footbott\"));\n    assert ((find_max({\"we\", \"are\", \"gonna\", \"rock\"}) == \"gonna\"));\n    assert ((find_max({\"we\", \"are\", \"a\", \"mad\", \"nation\"}) == \"nation\"));\n    assert ((find_max({\"this\", \"is\", \"a\", \"prrk\"}) == \"this\"));\n    assert ((find_max({\"b\"}) == \"b\"));\n    assert ((find_max({\"play\", \"play\", \"play\"}) == \"play\"));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n}\n", "entry_point": "find_max", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that accepts a vector of string. \n The vector incorporate different words. Return the news with maximal number \n of unique character. If multiple strings have maximum number of unique\ncharacters, return the one which comes foremost in lexicographical ordering. \n\n find_max({\"name \", \" of \",' string \" }) = =' string \" \n find_max({\"name \", \" enam \", \" plot \" }) = = \" enam \" \n find_max({\"aaaaaaa \", \" bb \", \" milliliter \" }) = = \" aaaaaaa \" \n * / \n # admit < stdio.h > \n # admit < vector > \n # include < string > \n # include < algorithm > \n use namespace std;\nstring find_max(vector<string> words){\n    string max_word;\n    int max_count = 0;\n    for(int i = 0; i < words.size(); i++){\n        int count = 0;\n        for(int j = 0; j < words[i].size(); j++){\n            if(words[i][j] ==''){\n                count++;\n            }\n        }\n        if(count > max_count){\n            max_count = count;\n            max_word = words[i];\n        }\n        else if(count == max_count){\n            if(words[i].size() > max_word.size()){\n                max_word = words[i];\n            }\n        }\n    }\n    return max_word;\n}\n<|endoftext|>"}
{"task_id": "CPP/159", "prompt": "/*\nYou\"re a hungry rabbit, and you already have eaten a sealed number of carrots, \n but nowadays you need to eat more carrot to complete the day's meals. \n you should return a vector of { sum number of eaten carrot after your meals, \n                                 the number of carrots left after your meals } \n if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n", "canonical_solution": "    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n    \n    assert (issame(eat(4, 5, 7) , {9, 2}));\n    assert (issame(eat(4, 5, 1) , {5, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n}\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\nYou\"re a hungry rabbit, and you already have eaten a sealed number of carrots, \n but nowadays you need to eat more carrot to complete the day's meals. \n you should return a vector of { sum number of eaten carrot after your meals, \n                                 the number of carrots left after your meals } \n if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n    vector<int> ret;\n    if(remaining<=0)\n        return ret;\n    if(number>remaining)\n        number=remaining;\n    if(need>remaining)\n        need=remaining;\n    if(number>need)\n        number=need;\n    ret.push_back(number);\n    ret.push_back(remaining-number);\n    return ret;\n}\nint main(){\n    int number,need,remaining;\n    scanf(\"%d %d %d\",&number,&need,&remaining);\n    vector<int> ret=eat(number,need,remaining);\n    for(int i=0;i<ret.size();i++){\n        printf(\"%d \",ret[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/160", "prompt": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \n the second vector is a vector of integers. practice the two pass vectors to build the algebric \n expression and return the evaluation of this construction. \n\n The basic algebra operations: \n Addition (+) \n Subtraction (-) \n generation (*) \n Floor part (//) \n Exponentiation (* * ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "canonical_solution": "    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (do_algebra({\"**\", \"*\", \"+\"}, {2, 3, 4, 5}) == 37);\n    assert (do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9);\n    assert (do_algebra({\"//\", \"*\"}, {7, 3, 4}) == 8);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "example_test": "", "entry_point": "do_algebra", "seed": 0, "perturbed": true, "gc": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \n the second vector is a vector of integers. practice the two pass vectors to build the algebric \n expression and return the evaluation of this construction. \n\n The basic algebra operations: \n Addition (+) \n Subtraction (-) \n generation (*) \n Floor part (//) \n Exponentiation (* * ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    int i = 0;\n    int j = 0;\n    int result = 0;\n    while(i < operato.size()){\n        if(operato[i] == \"+\"){\n            result = operand[j] + operand[j+1];\n            j++;\n        }else if(operato[i] == \"*\"){\n            result = operand[j] * operand[j+1];\n            j++;\n        }else if(operato[i] == \"-\"){\n            result = operand[j] - operand[j+1];\n            j++;\n        }else if(operato[i] == \"//\"){\n            result = operand[j] / operand[j+1];\n            j++;\n        }else if(operato[i] == \"^\"){\n            result = pow(operand[j], operand[j+1]);\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nint main(){\n    vector<string> operator;\n    vector<int> operand;\n    int n;\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        string s;\n        cin >> s;\n        operator.push_back(s);\n    }\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        int x;\n        scanf(\"%d\", &x);\n        operand.push_back(x);\n    }\n    printf(\"%d\\n\", do_algebra(operator, operand));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/161", "prompt": "/*\nYou are given a string s.\nif s[i] is a letter, overrule its shell from low to upper or vise versa, \n otherwise preserve it as it is. \n If the drawstring contains no letters, reverse the string. \n The routine should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n", "canonical_solution": "    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"AsDf\") == \"aSdF\");\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n    assert (solve(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert (solve(\"#6@2\") == \"2@6#\");\n    assert (solve(\"#$a^D\") == \"#$A^d\");\n    assert (solve(\"#ccc\") == \"#CCC\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n}\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string s.\nif s[i] is a letter, overrule its shell from low to upper or vise versa, \n otherwise preserve it as it is. \n If the drawstring contains no letters, reverse the string. \n The routine should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n\tstring t=s;\n\tfor(int i=0;i<s.length();i++){\n\t\tif(s[i]>='a'&&s[i]<='z'){\n\t\t\tif(s[i]=='a'){\n\t\t\t\tt[i]='A';\n\t\t\t}else if(s[i]=='z'){\n\t\t\t\tt[i]='Z';\n\t\t\t}else{\n\t\t\t\tt[i]=(char)(s[i]+1);\n\t\t\t}\n\t\t}else{\n\t\t\tt[i]=' ';\n\t\t}\n\t}\n\treturn t;\n}\nint main(){\n\tstring s=\"1234\";\n\tprintf(\"%s\\n\",solve(s).c_str());\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/162", "prompt": "/*\nGiven a string 'text\", return its md5 hash equivalent drawstring. \n If 'text\" is an empty bowed stringed instrument, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n", "canonical_solution": "    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert (string_to_md5(\"\") == \"None\");\n    assert (string_to_md5(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert (string_to_md5(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n", "entry_point": "string_to_md5", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string 'text\", return its md5 hash equivalent drawstring. \n If 'text\" is an empty bowed stringed instrument, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5,text.c_str(),text.size());\n    unsigned char md5_digest[MD5_DIGEST_LENGTH];\n    MD5_Final(md5_digest,&md5);\n    string md5_string(MD5_DIGEST_LENGTH*2,'\\0');\n    for(int i=0;i<MD5_DIGEST_LENGTH;i++){\n        sprintf(&md5_string[i*2],\"%02x\",md5_digest[i]);\n    }\n    return md5_string;\n}\n\nint main(){\n    string text = \"Hello world\";\n    string md5 = string_to_md5(text);\n    if(md5 == \"3e25960a79dbc69b674cd4ec67a72c62\"){\n        printf(\"%s\\n\",text.c_str());\n    }else{\n        printf(\"%s\\n\",md5.c_str());\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/163", "prompt": "/*\nGiven two positive integers a and b, return the even finger between a\nand b, in ascend order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n", "canonical_solution": "    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(17,89) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 8) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(8, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10,14) , {}));\n}\n", "entry_point": "generate_integers", "seed": 0, "perturbed": true, "gc": "/*\nGiven two positive integers a and b, return the even finger between a\nand b, in ascend order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n\tvector<int> v;\n\tint i=a;\n\twhile(i<=b){\n\t\tv.push_back(i);\n\t\ti+=2;\n\t}\n\treturn v;\n}\nint main(){\n\tint a,b;\n\tscanf(\"%d%d\",&a,&b);\n\tvector<int> v=generate_integers(a,b);\n\tfor(int i=0;i<v.size();i++){\n\t\tprintf(\"%d \",v[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
