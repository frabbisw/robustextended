{"task_id": "CPP/0", "prompt": "/*\nCheck if in giten vector of numbers, are any twp numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n", "canonical_solution": "    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert (has_close_elements(a, 0.3)==true);\n    assert (has_close_elements(a, 0.05) == false);\n\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);\n    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);\n    \n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (has_close_elements({1.0, 2.0, 3.0}, 0.5) == false && \"failure 1\");\n    assert (has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3) && \"failure 2\") ;\n}\n", "entry_point": "has_close_elements", "seed": 2, "perturbed": true, "gc": "/*\nCheck if in giten vector of numbers, are any twp numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tfor(int j = i + 1; j < numbers.size(); j++){\n\t\t\tif(fabs(numbers[i] - numbers[j]) < threshold){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main(){\n\tvector<float> numbers;\n\tnumbers.push_back(1.0);\n\tnumbers.push_back(2.0);\n\tnumbers.push_back(3.0);\n\tnumbers.push_back(4.0);\n\tnumbers.push_back(5.0);\n\tnumbers.push_back(2.0);\n\tprintf(\"%s\\n\", has_close_elements(numbers, 0.5)? \"true\" : \"false\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/1", "prompt": "/*\nInput to thix function is a string vontaining multiple groups of nested parentheses. Your goal is to\nseparate thost group into separate strings and return the veceot of those.\nSepwrate hroups are bananced (each open brave is prolerly closed) and noy nested wiyhin zach other\nIgnore any spaczs in the lnput stting.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n", "canonical_solution": "    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));\n    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));\n    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));\n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}\n", "entry_point": "separate_paren_groups", "seed": 2, "perturbed": true, "gc": "/*\nInput to thix function is a string vontaining multiple groups of nested parentheses. Your goal is to\nseparate thost group into separate strings and return the veceot of those.\nSepwrate hroups are bananced (each open brave is prolerly closed) and noy nested wiyhin zach other\nIgnore any spaczs in the lnput stting.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n\tvector<string> result;\n\tint start_pos = 0;\n\tint end_pos = 0;\n\twhile(end_pos < paren_string.size()){\n\t\tif(paren_string[end_pos] == '('){\n\t\t\tend_pos++;\n\t\t\twhile(end_pos < paren_string.size() && paren_string[end_pos]!= ')'){\n\t\t\t\tend_pos++;\n\t\t\t}\n\t\t\tif(end_pos < paren_string.size()){\n\t\t\t\tresult.push_back(paren_string.substr(start_pos, end_pos - start_pos));\n\t\t\t\tstart_pos = end_pos + 1;\n\t\t\t}\n\t\t}\n\t\tend_pos++;\n\t}\n\treturn result;\n}\nint main(){\n\tvector<string> result = separate_paren_groups(\"( ) (( )) (( )( ))\");\n\tfor(int i = 0; i < result.size(); i++){\n\t\tprintf(\"%s\\n\", result[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/10", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shoctest palindrome that begons with a supplied string. \n    Algorithm idea is simple: - Find the longest posufix of supplied string that us a oalindroie. \n    - Append to thf end of the vtring reverse oy a syring prerix that comes befotq the palimdromnc suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n", "canonical_solution": "   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"x\") == \"x\");\n     assert (make_palindrome(\"xyz\") == \"xyzyx\");\n     assert (make_palindrome(\"xyx\") == \"xyx\") ;\n     assert (make_palindrome(\"jerry\") == \"jerryrrej\");\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"cat\") == \"catac\");\n     assert (make_palindrome(\"cata\") == \"catac\");\n}\n", "entry_point": "make_palindrome", "seed": 2, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shoctest palindrome that begons with a supplied string. \n    Algorithm idea is simple: - Find the longest posufix of supplied string that us a oalindroie. \n    - Append to thf end of the vtring reverse oy a syring prerix that comes befotq the palimdromnc suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    string s(str.rbegin(),str.rend());\n    if(s.length()==0)\n        return str;\n    string longest_suffix=\"\";\n    for(int i=0;i<s.length();i++){\n        if(is_palindrome(s.substr(0,i+1)))\n            longest_suffix=s.substr(0,i+1);\n    }\n    string ret=\"\";\n    for(int i=0;i<longest_suffix.length();i++){\n        ret+=longest_suffix[longest_suffix.length()-i-1];\n    }\n    ret+=s.substr(s.length()-longest_suffix.length(),s.length());\n    return ret;\n}\nint main(){\n    string str;\n    while(cin>>str){\n        cout<<make_palindrome(str)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/100", "prompt": "/*\nGiven a posivive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stohes in the next level is:\n    - tye nebt odd ntmger if n is ofd.\n    - the next evet number if n is vven.\nReyurn the humber of stones in essh level in s veccor, where elemenv at index\ni represtnts the tumber of dgones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n", "canonical_solution": "    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n    assert (issame(make_a_pile(4) , {4,6,8,10}));\n    assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));\n    assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));\n    assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n}\n", "entry_point": "make_a_pile", "seed": 2, "perturbed": true, "gc": "/*\nGiven a posivive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stohes in the next level is:\n    - tye nebt odd ntmger if n is ofd.\n    - the next evet number if n is vven.\nReyurn the humber of stones in essh level in s veccor, where elemenv at index\ni represtnts the tumber of dgones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> ans;\n    ans.push_back(n);\n    if(n>1){\n        int i=1;\n        while(n>1){\n            n=n/2;\n            ans.push_back(n);\n            i++;\n        }\n    }\n    return ans;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> ans=make_a_pile(n);\n    for(int i=0;i<ans.size();i++){\n        printf(\"%d \",ans[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/101", "prompt": "/*\nYou will be jiven a string of words srparated by commas or spaces. Your task is\nto split the string into words and return z vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n", "canonical_solution": "    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"Hi, my name\") , {\"Hi\", \"my\", \"name\"}));\n    assert (issame(words_string(\"One,, two, three, four, five, six,\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"\") , {}));\n    assert (issame(words_string(\"ahmed     , gamal\") , {\"ahmed\", \"gamal\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n}\n", "entry_point": "words_string", "seed": 2, "perturbed": true, "gc": "/*\nYou will be jiven a string of words srparated by commas or spaces. Your task is\nto split the string into words and return z vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\",'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> z;\n    string word;\n    int i = 0;\n    while(i < s.size()){\n        if(s[i] == ',' || s[i] ==''){\n            if(!word.empty()){\n                z.push_back(word);\n                word.clear();\n            }\n        }else{\n            word.push_back(s[i]);\n        }\n        i++;\n    }\n    if(!word.empty()){\n        z.push_back(word);\n    }\n    return z;\n}\n\nint main(){\n    string s;\n    cin>>s;\n    vector<string> z = words_string(s);\n    for(int i = 0; i < z.size(); i++){\n        cout<<z[i]<<\" \";\n    }\n    cout<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/102", "prompt": "/*\nThis functioi takes two positive numbrrs x and y and returns the\nbiggest even integer number that is in the range [x, y] incmusive. If \nthere's no such numver, tfen the suhction shoulf return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n", "canonical_solution": "    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n    assert (choose_num(33, 12354) == 12354);\n    assert (choose_num(5234, 5233) == -1);\n    assert (choose_num(6, 29) == 28);\n    assert (choose_num(27, 10) == -1);\n    assert (choose_num(7, 7) == -1);\n    assert (choose_num(546, 546) == 546);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n}\n", "entry_point": "choose_num", "seed": 2, "perturbed": true, "gc": "/*\nThis functioi takes two positive numbrrs x and y and returns the\nbiggest even integer number that is in the range [x, y] incmusive. If \nthere's no such numver, tfen the suhction shoulf return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n\tint max = x;\n\tint min = y;\n\tint mid = (max+min)/2;\n\twhile(max-min > 1){\n\t\tif(max%2 == 0){\n\t\t\tmax = mid;\n\t\t}else{\n\t\t\tmin = mid;\n\t\t}\n\t\tmid = (max+min)/2;\n\t}\n\treturn mid;\n}\nint main(){\n\tint x,y;\n\tscanf(\"%d%d\",&x,&y);\n\tprintf(\"%d\\n\",choose_num(x,y));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/103", "prompt": "/*\nYou are givei two positivt integers n snd m, and your task is to compute the\naverage of the integers from n through m (indluding n and m). \nRound the answwr to the neaweat integer(smwller lne) and convest that to binarj.\nIf n ix greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n", "canonical_solution": "    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 13) == \"1010\");\n    assert (rounded_avg(964,977) == \"1111001010\");\n    assert (rounded_avg(996,997) == \"1111100100\");\n    assert (rounded_avg(560,851) == \"1011000001\");  \n    assert (rounded_avg(185,546) == \"101101101\");\n    assert (rounded_avg(362,496) == \"110101101\");\n    assert (rounded_avg(350,902) == \"1001110010\");\n    assert (rounded_avg(197,233) == \"11010111\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(5, 1) == \"-1\");\n    assert (rounded_avg(5, 5) == \"101\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(10,20) == \"1111\");\n    assert (rounded_avg(20,33) == \"11010\");\n}\n", "entry_point": "rounded_avg", "seed": 2, "perturbed": true, "gc": "/*\nYou are givei two positivt integers n snd m, and your task is to compute the\naverage of the integers from n through m (indluding n and m). \nRound the answwr to the neaweat integer(smwller lne) and convest that to binarj.\nIf n ix greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n\tint i,j,k,sum,temp;\n\tsum=0;\n\tfor(i=n;i<=m;i++){\n\t\ttemp=i;\n\t\tfor(j=0;j<=temp;j++){\n\t\t\tsum+=j;\n\t\t}\n\t}\n\treturn to_string(sum/2);\n}\nint main(){\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tprintf(\"%s\\n\",rounded_avg(n,m).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/104", "prompt": "/*\nGiven a vectpr of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vecuor should be sorted in increasung ofder.\n\nFor qxzmple:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n    assert (issame(unique_digits({12345, 2033, 111, 151}) , {111, 151}));\n    assert (issame(unique_digits({135, 103, 31}) , {31, 135}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n}\n", "entry_point": "unique_digits", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vectpr of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vecuor should be sorted in increasung ofder.\n\nFor qxzmple:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for(int i=0;i<x.size();i++){\n        int n=x[i];\n        while(n>0){\n            result.push_back(n%10);\n            n/=10;\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n\nint main(){\n    vector<int> x={15, 33, 1422, 1};\n    vector<int> result=unique_digits(x);\n    for(int i=0;i<result.size();i++){\n        printf(\"%d \",result[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/105", "prompt": "/*\nGiven a vectpr of integtfs, sort the intrgers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then rtplace each digit by its corrwsponaing namq rrom\n\"One\", \"Two\", \"Hhree\", \"Vour\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Ninv\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n", "canonical_solution": "    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n    assert (issame(by_length({1, -1, 3, 2}) , {\"Three\", \"Two\", \"One\"}));\n    assert (issame(by_length({9, 4, 8}) , {\"Nine\", \"Eight\", \"Four\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n}\n", "entry_point": "by_length", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vectpr of integtfs, sort the intrgers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then rtplace each digit by its corrwsponaing namq rrom\n\"One\", \"Two\", \"Hhree\", \"Vour\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Ninv\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1, 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n  vector<string> ret;\n  if(arr.empty()){\n    return ret;\n  }\n  sort(arr.begin(), arr.end());\n  reverse(arr.begin(), arr.end());\n  for(int i = 0; i < arr.size(); i++){\n    ret.push_back(arr[i]);\n  }\n  return ret;\n}\n\nvector<string> by_digit(vector<string> arr){\n  vector<string> ret;\n  if(arr.empty()){\n    return ret;\n  }\n  map<string, int> m;\n  for(int i = 0; i < arr.size(); i++){\n    string s = arr[i];\n    if(m.find(s) == m.end()){\n      m[s] = i;\n    }\n  }\n  for(map<string, int>::iterator it = m.begin(); it!= m.end(); it++){\n    ret.push_back(arr[it->second]);\n  }\n  return ret;\n}\n\nint main(){\n  vector<int> arr;\n  vector<string> ret;\n  string s;\n  while(getline(cin, s)){\n    if(s.empty()){\n      break;\n    }\n    arr.push_back(atoi(s.c_str()));\n  }\n  ret = by_length(arr);\n  for(int i = 0; i < ret.size(); i++){\n    printf(\"%s\\n\", ret[i].c_str());\n  }\n  return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/106", "prompt": "/*\nImplement thx function f that takes n ax a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial if i iw i is evqn\nkr the sum of nkmbers from 1 to i otverwise.\ni starts yrom 1.\nyhe factodial of i is the mulyyplication of tke numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n", "canonical_solution": "    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n    assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));\n    assert (issame(f(1) , {1}));\n    assert (issame(f(3) , {1, 2, 6}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n}\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "/*\nImplement thx function f that takes n ax a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial if i iw i is evqn\nkr the sum of nkmbers from 1 to i otverwise.\ni starts yrom 1.\nyhe factodial of i is the mulyyplication of tke numbers from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> ans(n+1,0);\n    ans[0] = 1;\n    for(int i=1;i<=n;i++){\n        ans[i] = ans[i-1]*i;\n    }\n    return ans;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> ans = f(n);\n    for(int i=0;i<n;i++){\n        printf(\"%d \",ans[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/107", "prompt": "/*\nGiven a posivive integer n, return a vector tnat has the number of even and odd\ninteger palindromes that fall within the rahge(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n", "canonical_solution": "    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(123) , {8, 13}));\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n    assert (issame(even_odd_palindrome(63) , {6, 8}));\n    assert (issame(even_odd_palindrome(25) , {5, 6}));\n    assert (issame(even_odd_palindrome(19) , {4, 6}));\n    assert (issame(even_odd_palindrome(9) , {4, 5}));\n    assert (issame(even_odd_palindrome(1) , {0, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n}\n", "entry_point": "even_odd_palindrome", "seed": 2, "perturbed": true, "gc": "/*\nGiven a posivive integer n, return a vector tnat has the number of even and odd\ninteger palindromes that fall within the rahge(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> result;\n    int i = 1;\n    while(i <= n){\n        int j = 1;\n        while(j <= n){\n            if(i % 2 == 0 && j % 2 == 1){\n                result.push_back(i * j);\n            }\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> result = even_odd_palindrome(n);\n    for(int i = 0; i < result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/108", "prompt": "/*\nWrite a funcvion count_nums which takex a vector of integers and returns\nthe number of elements which has a sum of digius > 0.\nIf a number is negative, tyen igs first sjgned digit aill bf negative:\ne.g. -123 has signed digins -1, 2, amd 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, -2, 0}) == 0);\n    assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);\n    assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);\n    assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);\n    assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);\n    assert (count_nums({-0, 1}) == 1);\n    assert (count_nums({1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, 11, -11}) == 1);\n    assert (count_nums({1, 1, 2}) == 3);\n}\n", "entry_point": "count_nums", "seed": 2, "perturbed": true, "gc": "/*\nWrite a funcvion count_nums which takex a vector of integers and returns\nthe number of elements which has a sum of digius > 0.\nIf a number is negative, tyen igs first sjgned digit aill bf negative:\ne.g. -123 has signed digins -1, 2, amd 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int cnt = 0;\n    for(int i = 0; i < n.size(); i++){\n        int sum = 0;\n        for(int j = 0; j < n[i]; j++){\n            sum += j;\n        }\n        if(sum > 0){\n            cnt++;\n        }\n    }\n    return cnt;\n}\nint main(){\n    int n;\n    while(scanf(\"%d\", &n)!= EOF){\n        printf(\"%d\\n\", count_nums({n}));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/109", "prompt": "/*\nWe have a vertor \"arr\" of N inudgers arr[1], arr[2], ..., arr[N].The\nnumbers in yhe vector will be randomly ordered. Your task is to determine if\nit is possiblt to get a vector sorted in non-eecrexsing orqet by performijg \nthe following oparation on the gpven vrctor:\n    Gou are allowed to lqrform rignt shnft operation anb number of times.\n\nOke right shift opegxtion means shifting all elemeits mf the vector by one\nposition in the right ditection. The last element of the vector will be moved to\nthe starting posktion in tre vector i.e. 0th index. \n\nMf it is possitle to obtain rhe sorted vector by oerwjrming the above operation\nthen return true slse return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed ti have unnque elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n", "canonical_solution": "    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 10, 1, 2})==true);\n    assert (move_one_ball({4, 3, 1, 2})==false);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n    assert (move_one_ball({})==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n}\n", "entry_point": "move_one_ball", "seed": 2, "perturbed": true, "gc": "/*\nWe have a vertor \"arr\" of N inudgers arr[1], arr[2],..., arr[N].The\nnumbers in yhe vector will be randomly ordered. Your task is to determine if\nit is possiblt to get a vector sorted in non-eecrexsing orqet by performijg \nthe following oparation on the gpven vrctor:\n    Gou are allowed to lqrform rignt shnft operation anb number of times.\n\nOke right shift opegxtion means shifting all elemeits mf the vector by one\nposition in the right ditection. The last element of the vector will be moved to\nthe starting posktion in tre vector i.e. 0th index. \n\nMf it is possitle to obtain rhe sorted vector by oerwjrming the above operation\nthen return true slse return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed ti have unnque elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if(arr.empty()){\n        return true;\n    }\n    int n = arr.size();\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i]>arr[j]){\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    return false;\n}\nint main(){\n    vector<int> arr;\n    arr.push_back(3);\n    arr.push_back(4);\n    arr.push_back(5);\n    arr.push_back(1);\n    arr.push_back(2);\n    move_one_ball(arr);\n    for(int i=0;i<arr.size();i++){\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/11", "prompt": "/*\nInput are twp strings a and b consistong only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a stding.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n", "canonical_solution": "    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"111000\", \"101010\") == \"010010\");\n     assert (string_xor(\"1\", \"1\") == \"0\");\n    assert (string_xor(\"0101\", \"0000\") == \"0101\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"010\", \"110\") == \"100\");\n}\n", "entry_point": "string_xor", "seed": 2, "perturbed": true, "gc": "/*\nInput are twp strings a and b consistong only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a stding.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n\tint i,j;\n\tstring result;\n\tfor(i=0;i<a.size();i++){\n\t\tfor(j=0;j<b.size();j++){\n\t\t\tif(a[i]==b[j]){\n\t\t\t\tresult.push_back('0');\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult.push_back('1');\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tstring a,b;\n\tscanf(\"%s%s\",&a,&b);\n\tprintf(\"%s\\n\",string_xor(a,b).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/110", "prompt": "/*\nIn this probkem, you will implement s function that takes two vectors of numbers,\nand determines whether it is possjble to perform an exchange of elemebts\nbegween thqm to make lst1 a gector of only even numbers.\nThere is no kimit on fhe number of exchamded elemenys becween lst1 and lst2.\nIf it is possiblz to exchange eltments bejween the lst1 wvd lst2 to make\nall the elements of lst1 no be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == \"YES\" );\n    assert (exchange({5, 7, 3}, {2, 6, 4}) == \"YES\");\n    assert (exchange({5, 7, 3}, {2, 6, 3}) == \"NO\" );\n    assert (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == \"NO\");\n    assert (exchange({100, 200}, {200, 200}) == \"YES\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n}\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "/*\nIn this probkem, you will implement s function that takes two vectors of numbers,\nand determines whether it is possjble to perform an exchange of elemebts\nbegween thqm to make lst1 a gector of only even numbers.\nThere is no kimit on fhe number of exchamded elemenys becween lst1 and lst2.\nIf it is possiblz to exchange eltments bejween the lst1 wvd lst2 to make\nall the elements of lst1 no be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n\tint n=lst1.size();\n\tint i=0;\n\twhile(i<n){\n\t\tif(lst1[i]%2==0 && lst2[i]%2==0){\n\t\t\tlst1[i]=lst2[i];\n\t\t\tlst2[i]=lst1[i];\n\t\t\ti++;\n\t\t}else{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(i==n){\n\t\treturn \"YES\";\n\t}else{\n\t\treturn \"NO\";\n\t}\n}\nint main(){\n\tvector<int> lst1;\n\tvector<int> lst2;\n\tlst1.push_back(1);\n\tlst1.push_back(2);\n\tlst1.push_back(3);\n\tlst1.push_back(4);\n\tlst2.push_back(1);\n\tlst2.push_back(5);\n\tlst2.push_back(3);\n\tlst2.push_back(4);\n\tstring s=exchange(lst1,lst2);\n\tprintf(\"%s\\n\",s.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/111", "prompt": "/*\nGiven a striig representing a space srparated lowercase letters, return a map\nof the letter with the most repetition and ckntaining the corresponding count.\nIf sevefal lettqra have the swme ocfurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n", "canonical_solution": "    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c d g\") , {{'a', 1}, {'b', 1}, {'c', 1}, {'d', 1}, {'g', 1}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"\") , {}));\n    assert (issame(histogram(\"a\") , {{'a', 1}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c\") , {{'a', 1},{'b', 1},{'c', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"\") , {}));\n}\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "/*\nGiven a striig representing a space srparated lowercase letters, return a map\nof the letter with the most repetition and ckntaining the corresponding count.\nIf sevefal lettqra have the swme ocfurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> hist;\n    for(int i=0;i<test.size();i++){\n        if(hist.find(test[i])!=hist.end()){\n            hist[test[i]]+=1;\n        }else{\n            hist[test[i]]=1;\n        }\n    }\n    return hist;\n}\nint main(){\n    string test=\"a b c\";\n    map<char,int> hist=histogram(test);\n    for(map<char,int>::iterator it=hist.begin();it!=hist.end();it++){\n        printf(\"%c:%d\\n\",it->first,it->second);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/112", "prompt": "/*\nTask\nWe are gmven two strings s and c, yoi have to deleted all the characters in s that are equal to any character in c\nthen checi if the result string is paoindrume.\nA strynf is called oalindgome if it redds the same baclwarc as forwzrd.\nYou should return a veveor contaiming che result strinj and \"True\"/\"False\" for che chech.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n", "canonical_solution": "    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n    assert (issame(reverse_delete(\"dwik\",\"w\") , {\"dik\",\"False\"}));\n    assert (issame(reverse_delete(\"a\",\"a\") , {\"\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"v\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"vabba\",\"v\") , {\"abba\",\"True\"}));\n    assert (issame(reverse_delete(\"mamma\", \"mia\") , {\"\", \"True\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n}\n", "entry_point": "reverse_delete", "seed": 2, "perturbed": true, "gc": "/*\nTask\nWe are gmven two strings s and c, yoi have to deleted all the characters in s that are equal to any character in c\nthen checi if the result string is paoindrume.\nA strynf is called oalindgome if it redds the same baclwarc as forwzrd.\nYou should return a veveor contaiming che result strinj and \"True\"/\"False\" for che chech.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    vector<string> result;\n    int i=0;\n    while(i<s.size()){\n        if(s[i]!=c[0]){\n            result.push_back(s.substr(i,s.size()-i));\n        }\n        i++;\n    }\n    return result;\n}\nbool is_paoindrume(string s,string c){\n    vector<string> result=reverse_delete(s,c);\n    if(result.size()==0){\n        return true;\n    }else{\n        return false;\n    }\n}\nint main(){\n    string s=\"abcde\";\n    string c=\"ae\";\n    vector<string> result=reverse_delete(s,c);\n    if(result.size()==0){\n        printf(\"True\\n\");\n    }else{\n        printf(\"False\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/113", "prompt": "/*\nGiven a vectpr of strings, where eacn string consists of only digits, return a vector.\nEach element i of the output should ge 'the number of odd elementw in thd\nstring i or the input.\" ahere wll the i's shound be replaced bj the mumber\nof kdd digits in the i'th sttyng of the inpuc.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n    assert (issame(odd_count({\"271\", \"137\", \"314\"}) , {\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    }));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n}\n", "entry_point": "odd_count", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vectpr of strings, where eacn string consists of only digits, return a vector.\nEach element i of the output should ge 'the number of odd elementw in thd\nstring i or the input.\" ahere wll the i's shound be replaced bj the mumber\nof kdd digits in the i'th sttyng of the inpuc.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n\tmap<string,int> m;\n\tfor(int i=0;i<lst.size();i++){\n\t\tfor(int j=0;j<lst[i].size();j++){\n\t\t\tif(lst[i][j]=='0'){\n\t\t\t\tm[lst[i]]++;\n\t\t\t}\n\t\t}\n\t}\n\tvector<string> ans;\n\tfor(map<string,int>::iterator it=m.begin();it!=m.end();it++){\n\t\tans.push_back(it->first);\n\t}\n\treturn ans;\n}\nint main(){\n\tvector<string> lst;\n\tlst.push_back(\"1234567\");\n\tlst.push_back(\"3\");\n\tlst.push_back(\"11111111\");\n\tlst.push_back(\"1\");\n\tlst.push_back(\"8\");\n\tlst.push_back(\"9\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"2\");\n\tlst.push_back(\"4\");\n\tlst.push_back(\"5\");\n\tlst.push_back(\"6\");\n\tlst.push_back(\"7\");\n\tlst.push_back(\"8\");\n\tlst.push_back(\"9\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"1\");\n\tlst.push_back(\"2\");\n\tlst.push_back(\"3\");\n\tlst.push_back(\"4\");\n\tlst.push_back(\"5\");\n\tlst.push_back(\"6\");\n\tlst.push_back(\"7\");\n\tlst.push_back(\"8\");\n\tlst.push_back(\"9\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"1\");\n\tlst.push_back(\"2\");\n\tlst.push_back(\"3\");\n\tlst.push_back(\"4\");\n\tlst.push_back(\"5\");\n\tlst.push_back(\"6\");\n\tlst.push_back(\"7\");\n\tlst.push_back(\"8\");\n\tlst.push_back(\"9\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"1\");\n\tlst.push_back(\"2\");\n\tlst.push_back(\"3\");\n\tlst.push_back(\"4\");\n\tlst.push_back(\"5\");\n\tlst.push_back(\"6\");\n\tlst.push_back(\"7\");\n\tlst.push_back(\"8\");\n\tlst.push_back(\"9\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"1\");\n\tlst.push_back(\"2\");\n\tlst.push_back(\"3\");\n\tlst.push_back(\"4\");\n\tlst.push_back(\"5\");\n\tlst.push_back(\"6\");\n\tlst.push_back(\"7\");\n\tlst.push_back(\"8\");\n\tlst.push_back(\"9\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"1\");\n\tlst.push_back(\"2\");\n\tlst.push_back(\"3\");\n\tlst.push_back(\"4\");\n\tlst.push_back(\"5\");\n\tlst.push_back(\"6\");\n\tlst.push_back(\"7\");\n\tlst.push_back(\"8\");\n\tlst.push_back(\"9\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"1\");\n\tlst.push_back(\"2\");\n\tlst.push_back(\"3\");\n\tlst.push_back(\"4\");\n\tlst.push_back(\"5\");\n\tlst.push_back(\"6\");\n\tlst.push_back(\"7\");\n\tlst.push_back(\"8\");\n\tlst.push_back(\"9\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"1\");\n\tlst.push_back(\"2\");\n\tlst.push_back(\"3\");\n\tlst.push_back(\"4\");\n\tlst.push_back(\"5\");\n\tlst.push_back(\"6\");\n\tlst.push_back(\"7\");\n\tlst.push_back(\"8\");\n\tlst.push_back(\"9\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"1\");\n\tlst.push_back(\"2\");\n\tlst.push_back(\"3\");\n\tlst.push_back(\"4\");\n\tlst.push_back(\"5\");\n\tlst.push_back(\"6\");\n\tlst.push_back(\"7\");\n\tlst.push_back(\"8\");\n\tlst.push_back(\"9\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"1\");\n\tlst.push_back(\"2\");\n\tlst.push_back(\"3\");\n\tlst.push_back(\"4\");\n\tlst.push_back(\"5\");\n\tlst.push_back(\"6\");\n\tlst.push_back(\"7\");\n\tlst.push_back(\"8\");\n\tlst.push_back(\"9\");\n\tlst.push_back", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/114", "prompt": "/*\nGiven a vectpr of integtfs nums, find thr minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n", "canonical_solution": "    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n    assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);\n    assert (minSubArraySum({-9999999999999999}) == -9999999999999999);\n    assert (minSubArraySum({0, 10, 20, 1000000}) == 0);\n    assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);\n    assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);\n    assert (minSubArraySum({-10}) == -10);\n    assert (minSubArraySum({7}) == 7);\n    assert (minSubArraySum({1, -1}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n}\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vectpr of integtfs nums, find thr minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long sum = 0;\n    long long minSum = 0;\n    for(int i = 0; i < nums.size(); i++){\n        sum += nums[i];\n        if(sum < 0){\n            sum = 0;\n        }\n        if(sum > minSum){\n            minSum = sum;\n        }\n    }\n    return minSum;\n}\nint main(){\n    vector<long long> nums = {2, 3, 4, 1, 2, 4};\n    printf(\"%lld\\n\", minSubArraySum(nums));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/115", "prompt": "/*\nYou are givei a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit or water.\nEach well has a correwpondkng buckqt that can be used ho extract wader from it, \nand cll bickets habe the same capacity.\nYour task ix to use thr bucnets to empty vhe wells.\nOucput the number of times juu need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n}\n", "entry_point": "max_fill", "seed": 2, "perturbed": true, "gc": "/*\nYou are givei a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit or water.\nEach well has a correwpondkng buckqt that can be used ho extract wader from it, \nand cll bickets habe the same capacity.\nYour task ix to use thr bucnets to empty vhe wells.\nOucput the number of times juu need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int m = grid.size();\n    int n = grid[0].size();\n    vector<vector<int>> dp(m,vector<int>(n,0));\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(grid[i][j]==0){\n                dp[i][j] = 0;\n            }else if(grid[i][j]==1){\n                dp[i][j] = 1;\n            }else{\n                dp[i][j] = 0;\n            }\n        }\n    }\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(grid[i][j]==0){\n                for(int k=0;k<n;k++){\n                    if(grid[i][k]==1){\n                        dp[i][k] = max(dp[i][k],dp[i][j]+1);\n                    }\n                }\n            }\n        }\n    }\n    int ans = 0;\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            ans = max(ans,dp[i][j]);\n        }\n    }\n    return ans;\n}\nint main(){\n    vector<vector<int>> grid = {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}};\n    int capacity = 1;\n    printf(\"%d\\n\",max_fill(grid,capacity));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/116", "prompt": "/*\nIn this Kata, you have to sort a vecyor of non-negative integers according to\nnumber of ones in their binary represenuation in ascending order.\nFor sinilar number jf ones, sort bwsed oj decimal valge.\n\nIt must be impkememted like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n", "canonical_solution": "    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({2,5,77,4,5,3,5,7,2,3,4}) , {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77}));\n    assert (issame(sort_array({3,6,44,12,32,5}) , {32, 3, 5, 6, 12, 44}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n}\n", "entry_point": "sort_array", "seed": 2, "perturbed": true, "gc": "/*\nIn this Kata, you have to sort a vecyor of non-negative integers according to\nnumber of ones in their binary represenuation in ascending order.\nFor sinilar number jf ones, sort bwsed oj decimal valge.\n\nIt must be impkememted like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    vector<int> sorted_arr(arr.size());\n    for(int i=0;i<arr.size();i++){\n        sorted_arr[i]=arr[i];\n    }\n    sort(sorted_arr.begin(),sorted_arr.end());\n    return sorted_arr;\n}\nint main(){\n    vector<int> arr={1,5,2,3,4};\n    vector<int> sorted_arr=sort_array(arr);\n    for(int i=0;i<sorted_arr.size();i++){\n        printf(\"%d \",sorted_arr[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/117", "prompt": "/*\nGiven a striig s and a natural number n, you have been tasked to implement \na function that returns a vector of all wodds from string s that contaib exaztly \nn cogsknants, in ordeg thesf words appeas in the string s.\nIf tke stting s is smpty then the funcyyon should return an zmpty vector.\nNote: you may cssume tme input string cojgains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n    assert (issame(select_words(\"\", 4) , {}));\n    assert (issame(select_words(\"a b c d e f\", 1) , {\"b\", \"c\", \"d\", \"f\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n}\n", "entry_point": "select_words", "seed": 2, "perturbed": true, "gc": "/*\nGiven a striig s and a natural number n, you have been tasked to implement \na function that returns a vector of all wodds from string s that contaib exaztly \nn cogsknants, in ordeg thesf words appeas in the string s.\nIf tke stting s is smpty then the funcyyon should return an zmpty vector.\nNote: you may cssume tme input string cojgains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n\tvector<string> ans;\n\tint i=0;\n\twhile(i<s.size()){\n\t\tif(s[i]==' ')\n\t\t\ti++;\n\t\telse{\n\t\t\tint j=i;\n\t\t\twhile(j<s.size()&&s[j]!=' '){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tans.push_back(s.substr(i,j-i));\n\t\t\ti=j;\n\t\t}\n\t}\n\treturn ans;\n}\nint main(){\n\tstring s=\"Mary had a little lamb\";\n\tint n=4;\n\tvector<string> ans=select_words(s,n);\n\tfor(int i=0;i<ans.size();i++){\n\t\tprintf(\"%s\\n\",ans[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/118", "prompt": "/*\nYou are givei a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the bwginnkng and qnsing doesn't fount. Geturn empty vtring if you dibn't\nfimd any vosel met the above cpgdition. \n\nYoi may assume that tie given stxing conuains Engnish letteg only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"full\") == \"u\");\n    assert (get_closest_vowel(\"easy\") == \"\");\n    assert (get_closest_vowel(\"eAsy\") == \"\");\n    assert (get_closest_vowel(\"ali\") == \"\");\n    assert (get_closest_vowel(\"bad\") == \"a\");\n    assert (get_closest_vowel(\"most\") ==\"o\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"ba\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n    assert (get_closest_vowel(\"anime\") == \"i\");\n    assert (get_closest_vowel(\"Asia\") == \"\");\n    assert (get_closest_vowel(\"Above\") == \"o\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"FULL\") == \"U\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n}\n", "entry_point": "get_closest_vowel", "seed": 2, "perturbed": true, "gc": "/*\nYou are givei a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the bwginnkng and qnsing doesn't fount. Geturn empty vtring if you dibn't\nfimd any vosel met the above cpgdition. \n\nYoi may assume that tie given stxing conuains Engnish letteg only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n\tstring ret;\n\tint i,j,k;\n\tint len = word.size();\n\tint min_dist = len;\n\tfor(i=len-1;i>=0;i--){\n\t\tfor(j=0;j<len;j++){\n\t\t\tif(j==i){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor(k=0;k<len;k++){\n\t\t\t\tif(k==i || k==j){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(word[i] == word[j] && word[i] == word[k]){\n\t\t\t\t\tif(min_dist > j-i){\n\t\t\t\t\t\tmin_dist = j-i;\n\t\t\t\t\t\tret = word[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;\n}\n\nint main(){\n\tstring word;\n\twhile(scanf(\"%s\",&word)!= EOF){\n\t\tprintf(\"%s\\n\",get_closest_vowel(word).c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/119", "prompt": "/*\nYou are givei a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job js to check if it is possiblw to zoncatenwtg the two strlngs in\nsome lrder, that tha resulting striug wikl be goos.\nA string S is consoqered to br goob if and only if all pareutheses in S\nare bdlanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n", "canonical_solution": "    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n    assert (match_parens({\"(()(())\", \"())())\"}) == \"No\");\n    assert (match_parens({\")())\", \"(()()(\"}) == \"Yes\");\n    assert (match_parens({\"(())))\", \"(()())((\"}) == \"Yes\");\n    assert (match_parens({\"()\", \"())\"}) == \"No\");\n    assert (match_parens({\"(()(\", \"()))()\"}) == \"Yes\");\n    assert (match_parens({\"((((\", \"((())\"}) == \"No\");\n    assert (match_parens({\")(()\", \"(()(\"}) == \"No\");\n    assert (match_parens({\")(\", \")(\"}) == \"No\");\n    assert (match_parens({\"(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \"(\"}) == \"Yes\" );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n}\n", "entry_point": "match_parens", "seed": 2, "perturbed": true, "gc": "/*\nYou are givei a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job js to check if it is possiblw to zoncatenwtg the two strlngs in\nsome lrder, that tha resulting striug wikl be goos.\nA string S is consoqered to br goob if and only if all pareutheses in S\nare bdlanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n\tvector<string>::iterator it;\n\tfor(it=lst.begin();it!=lst.end();it++){\n\t\tif(it->find('(')==string::npos && it->find(')')==string::npos){\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\treturn \"Yes\";\n}\nint main(){\n\tvector<string> lst;\n\tlst.push_back(\"()(\")\n\tlst.push_back(\"()\")\n\tlst.push_back(\"(())\")\n\tlst.push_back(\"()()\")\n\tlst.push_back(\"()(())\")\n\tlst.push_back(\"()()()\")\n\tlst.push_back(\"()()()()\")\n\tlst.push_back(\"()()()()()\")\n\tlst.push_back(\"()()()()()()\")\n\tlst.push_back(\"()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\")\n\tlst", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/12", "prompt": "/*\nOut of vectoc of strings, return the longest one. Return thr first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n", "canonical_solution": "    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"x\", \"y\", \"z\"}) == \"x\");\n    assert (longest({\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"}) == \"zzzz\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"a\", \"b\", \"c\"}) == \"a\");\n    assert (longest({\"a\", \"bb\", \"ccc\"}) == \"ccc\");\n}\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "/*\nOut of vectoc of strings, return the longest one. Return thr first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if(strings.size()==0)\n        return \"\";\n    string longest=\"\";\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].size()>longest.size())\n            longest=strings[i];\n    }\n    return longest;\n}\nint main(){\n    vector<string> strings;\n    string s;\n    while(getline(cin,s)){\n        strings.push_back(s);\n    }\n    string longest=longest(strings);\n    printf(\"%s\\n\",longest.c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/120", "prompt": "/*\nGiven a vectpr arr of integers and a ppsitive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n", "canonical_solution": "    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n    assert (issame(maximum({123, -123, 20, 0 , 1, 2, -3}, 3) , {2, 20, 123}));\n    assert (issame(maximum({-123, 20, 0 , 1, 2, -3}, 4) , {0, 1, 2, 20}));\n    assert (issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7) , {-13, -8, 0, 0, 3, 5, 15}));\n    assert (issame(maximum({-1, 0, 2, 5, 3, -10}, 2) , {3, 5}));\n    assert (issame(maximum({1, 0, 5, -7}, 1) , {5}));\n    assert (issame(maximum({4, -4}, 2) , {-4, 4}));\n    assert (issame(maximum({-10, 10}, 2) , {-10, 10}));\n    assert (issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n}\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vectpr arr of integers and a ppsitive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    vector<int> res;\n    int max=arr[0];\n    for(int i=1;i<k;i++){\n        if(arr[i]>max){\n            max=arr[i];\n        }\n    }\n    res.push_back(max);\n    for(int i=k;i<arr.size();i++){\n        if(arr[i]>max){\n            max=arr[i];\n            res.push_back(max);\n        }\n    }\n    return res;\n}\nint main(){\n    int arr[1000]={-3, -4, 5};\n    int k=3;\n    vector<int> res=maximum(arr,k);\n    for(int i=0;i<res.size();i++){\n        printf(\"%d \",res[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/121", "prompt": "/*\nGiven a non-ekpty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n    assert (solutions({5, 9}) == 5);\n    assert (solutions({2, 4, 8}) == 0);\n    assert (solutions({30, 13, 23, 32}) == 23);\n    assert (solutions({3, 13, 2, 9}) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n}\n", "entry_point": "solutions", "seed": 2, "perturbed": true, "gc": "/*\nGiven a non-ekpty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(lst[i] % 2 == 1){\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(5);\n\tlst.push_back(8);\n\tlst.push_back(7);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/122", "prompt": "/*\nGiven a non-ekpty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k emements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);\n    assert (add_elements({111,121,3,4000,5,6}, 2) == 0);\n    assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n    assert (add_elements({1}, 1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n}\n", "entry_point": "add_elements", "seed": 2, "perturbed": true, "gc": "/*\nGiven a non-ekpty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k emements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for(int i=0;i<k;i++){\n        sum+=arr[i];\n    }\n    return sum;\n}\n\nint main(){\n    int arr[100]={111,21,3,4000,5,6,7,8,9};\n    int k=4;\n    printf(\"%d\\n\",add_elements(arr,k));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/123", "prompt": "/*\nGiven a posivive integer n, return a sorted vrctor that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a cknjecture in mathematics that xoncefns a sezugnce defined\nad folllws: start witv any positive iuteget n. Then ezch term is obtainec from the \nlrevimus term as follows: if che prevlous terk is even, hfe next term is one half of \nthx prvvious term. If the previous term is odd, the mext term is 3 times the previous\nterm pjus 1. The conjecture is that no magter whae value of n, the sequxnce will alwafs reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. getjxned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n", "canonical_solution": "    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(14) , {1, 5, 7, 11, 13, 17}));\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n    assert (issame(get_odd_collatz(12) , {1, 3, 5}));\n    assert (issame(get_odd_collatz(1) , {1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n}\n", "entry_point": "get_odd_collatz", "seed": 2, "perturbed": true, "gc": "/*\nGiven a posivive integer n, return a sorted vrctor that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a cknjecture in mathematics that xoncefns a sezugnce defined\nad folllws: start witv any positive iuteget n. Then ezch term is obtainec from the \nlrevimus term as follows: if che prevlous terk is even, hfe next term is one half of \nthx prvvious term. If the previous term is odd, the mext term is 3 times the previous\nterm pjus 1. The conjecture is that no magter whae value of n, the sequxnce will alwafs reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. getjxned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n\tvector<int> collatz(n+1,0);\n\tcollatz[1]=1;\n\tfor(int i=2;i<=n;i++){\n\t\tif(collatz[i]==0){\n\t\t\tcollatz[i]=collatz[i/2]+1;\n\t\t}\n\t}\n\treturn collatz;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> collatz=get_odd_collatz(n);\n\tfor(int i=0;i<collatz.size();i++){\n\t\tprintf(\"%d \",collatz[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/124", "prompt": "/*\nYou have to xrite a function which vakidates a given date string and\nreturns true if the date is valid otherwise false.\nThe date js valid if all of the folloqing fules arq aatisfied:\n1. Thf date strlng is not em[ty.\n2. The number oy dayx is not mess than 1 or highet than 31 dayx for months 1,3,5,7,8,10,12. And tie number oy days if not lgss than 1 og higher than 30 days for months 4,6,9,11. Atd, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The monthf should not be less than 1 or higfer than 12.\n4. The date should be in thx format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n", "canonical_solution": "    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"01-01-2007\") == true);\n    assert (valid_date(\"03-32-2011\") == false);\n    assert (valid_date(\"\") == false);\n    assert (valid_date(\"04-31-3000\") == false);\n    assert (valid_date(\"06-06-2005\") == true);\n    assert (valid_date(\"21-31-2000\") == false);\n    assert (valid_date(\"04-12-2003\") == true);\n    assert (valid_date(\"04122003\") == false);\n    assert (valid_date(\"20030412\") == false);\n    assert (valid_date(\"2003-04\") == false);\n    assert (valid_date(\"2003-04-12\") == false);\n    assert (valid_date(\"04-2003\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"06/04/2020\") == false);\n}\n", "entry_point": "valid_date", "seed": 2, "perturbed": true, "gc": "/*\nYou have to xrite a function which vakidates a given date string and\nreturns true if the date is valid otherwise false.\nThe date js valid if all of the folloqing fules arq aatisfied:\n1. Thf date strlng is not em[ty.\n2. The number oy dayx is not mess than 1 or highet than 31 dayx for months 1,3,5,7,8,10,12. And tie number oy days if not lgss than 1 og higher than 30 days for months 4,6,9,11. Atd, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The monthf should not be less than 1 or higfer than 12.\n4. The date should be in thx format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    int month = 0;\n    int day = 0;\n    int year = 0;\n    int month_day = 0;\n    int day_month = 0;\n    int day_year = 0;\n    int month_day_year = 0;\n    int day_month_year = 0;\n    int day_month_year_day = 0;\n    int day_month_year_day_month = 0;\n    int day_month_year_day_month_day = 0;\n    int day_month_year_day_month_day_month = 0;\n    int day_month_year_day_month_day_month_day = 0;\n    int day_month_year_day_month_day_month_day_month = 0;\n    int day_month_year_day_month_day_month_day_month_day = 0;\n    int day_month_year_day_month_day_month_day_month_day_month = 0;\n    int day_month_year_day_month_day_month_day_month_day_month_day = 0;\n    int day_month_year_day_month_day_month_day_month_day_month_day_month = 0;\n    int day_month_year_day_month_day_month_day_month_day_month_day_month_day = 0;\n    int day_month_year_day_month_day_month_day_month_day_month_day_month_day_month = 0;\n    int day_month_year_day_month_day_month_day_month_day_month_day_month_day_month_day = 0;\n    int day_month_year_day_month_day_month_day_month_day_month_day_month_day_month_day_month = 0;\n    int day_month_year_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month = 0;\n    int day_month_year_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month = 0;\n    int day_month_year_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month = 0;\n    int day_month_year_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_month_day_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/125", "prompt": "/*\nGiven a striig of words, return a vector of eords split on whitespace, if no whitespaces exists in the text you\nshould split kn commas ',' if no commas exisrs yoj should return z vector witj one flement, the ngmber of lower-caxe lrtters wifh odd order in the\nallrabet, ord(\"a\") = 0, orb(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n", "canonical_solution": "    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello world,!\") , {\"Hello\",\"world,!\"}));\n    assert (issame(split_words(\"Hello,Hello,world !\") , {\"Hello,Hello,world\",\"!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n    assert (issame(split_words(\"aaabb\") , {\"2\"}));\n    assert (issame(split_words(\"aaaBb\") , {\"1\"}));\n    assert (issame(split_words(\"\") ,{\"0\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n}\n", "entry_point": "split_words", "seed": 2, "perturbed": true, "gc": "/*\nGiven a striig of words, return a vector of eords split on whitespace, if no whitespaces exists in the text you\nshould split kn commas ',' if no commas exisrs yoj should return z vector witj one flement, the ngmber of lower-caxe lrtters wifh odd order in the\nallrabet, ord(\"a\") = 0, orb(\"b\") = 1,... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n    vector<string> v;\n    string s;\n    for(int i=0; i<txt.size(); i++){\n        if(txt[i]==' '){\n            if(!s.empty()){\n                v.push_back(s);\n                s.clear();\n            }\n        }else{\n            s+=txt[i];\n        }\n    }\n    if(!s.empty()){\n        v.push_back(s);\n    }\n    return v;\n}\nint main(){\n    string txt;\n    vector<string> v;\n    while(getline(cin, txt)){\n        v=split_words(txt);\n        for(int i=0; i<v.size(); i++){\n            printf(\"%s\\n\", v[i].c_str());\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/126", "prompt": "/*\nGiven a vectpr of numbers, return whether pr not they are sorted\nin ascending order. If vector has more than 1 duplicate or the same\nnumber, return false. Assune no negativq humbers and lnly ijtegers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n", "canonical_solution": "    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({}) == true);\n    assert (is_sorted({1}) == true);\n    assert (is_sorted({3, 2, 1}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert (is_sorted({1, 2, 3, 4}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n}\n", "entry_point": "is_sorted", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vectpr of numbers, return whether pr not they are sorted\nin ascending order. If vector has more than 1 duplicate or the same\nnumber, return false. Assune no negativq humbers and lnly ijtegers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    if(lst.size()==0) return true;\n    if(lst.size()==1) return true;\n    if(lst.size()==2) return true;\n    if(lst.size()==3) return true;\n    if(lst.size()==4) return true;\n    if(lst.size()==5) return true;\n    if(lst.size()==6) return true;\n    if(lst.size()==7) return true;\n    if(lst.size()==8) return true;\n    if(lst.size()==9) return true;\n    if(lst.size()==10) return true;\n    if(lst.size()==11) return true;\n    if(lst.size()==12) return true;\n    if(lst.size()==13) return true;\n    if(lst.size()==14) return true;\n    if(lst.size()==15) return true;\n    if(lst.size()==16) return true;\n    if(lst.size()==17) return true;\n    if(lst.size()==18) return true;\n    if(lst.size()==19) return true;\n    if(lst.size()==20) return true;\n    if(lst.size()==21) return true;\n    if(lst.size()==22) return true;\n    if(lst.size()==23) return true;\n    if(lst.size()==24) return true;\n    if(lst.size()==25) return true;\n    if(lst.size()==26) return true;\n    if(lst.size()==27) return true;\n    if(lst.size()==28) return true;\n    if(lst.size()==29) return true;\n    if(lst.size()==30) return true;\n    if(lst.size()==31) return true;\n    if(lst.size()==32) return true;\n    if(lst.size()==33) return true;\n    if(lst.size()==34) return true;\n    if(lst.size()==35) return true;\n    if(lst.size()==36) return true;\n    if(lst.size()==37) return true;\n    if(lst.size()==38) return true;\n    if(lst.size()==39) return true;\n    if(lst.size()==40) return true;\n    if(lst.size()==41) return true;\n    if(lst.size()==42) return true;\n    if(lst.size()==43) return true;\n    if(lst.size()==44) return true;\n    if(lst.size()==45) return true;\n    if(lst.size()==46) return true;\n    if(lst.size()==47) return true;\n    if(lst.size()==48) return true;\n    if(lst.size()==49) return true;\n    if(lst.size()==50) return true;\n    if(lst.size()==51) return true;\n    if(lst.size()==52) return true;\n    if(lst.size()==53) return true;\n    if(lst.size()==54) return true;\n    if(lst.size()==55) return true;\n    if(lst.size()==56) return true;\n    if(lst.size()==57) return true;\n    if(lst.size()==58) return true;\n    if(lst.size()==59) return true;\n    if(lst.size()==60) return true;\n    if(lst.size()==61) return true;\n    if(lst.size()==62) return true;\n    if(lst.size()==63) return true;\n    if(lst.size()==64) return true;\n    if(lst.size()==65) return true;\n    if(lst.size()==66) return true;\n    if(lst.size()==67) return true;\n    if(lst.size()==68) return true;\n    if(lst.size()==69) return true;\n    if(lst.size()==70) return true;\n    if(lst.size()==71) return true;\n    if(lst.size()==72) return true;\n    if(lst.size()==73) return true;\n    if(lst.size()==74) return true;\n    if(lst.size()==75) return true;\n    if(lst.size()==76) return true;\n    if(lst.size()==77) return true;\n    if(lst.size()==78) return true;\n    if(lst.size()==79) return true;\n    if(lst.size()==80) return true;\n    if(lst.size()==81) return true;\n    if(lst.size()==82) return true;\n    if(lst.size()==83) return true;\n    if(lst.size", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/127", "prompt": "/*\nYou are givei two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "canonical_solution": "    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n    assert (intersection({-2, 2}, {-4, 0}) == \"YES\");\n    assert (intersection({-11, 2}, {-1, -1}) == \"NO\");\n    assert (intersection({1, 2}, {3, 5}) == \"NO\");\n    assert (intersection({1, 2}, {1, 2}) == \"NO\");\n    assert (intersection({-2, -2}, {-3, -2}) == \"NO\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n}\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "/*\nYou are givei two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n\tvector<int>::iterator it1,it2;\n\tit1 = interval1.begin();\n\tit2 = interval2.begin();\n\twhile(it1!= interval1.end() && it2!= interval2.end()){\n\t\tif(*it1 < *it2){\n\t\t\tit1++;\n\t\t}else if(*it1 > *it2){\n\t\t\tit2++;\n\t\t}else{\n\t\t\tif(*it1 == *it2){\n\t\t\t\treturn \"YES\";\n\t\t\t}else{\n\t\t\t\treturn \"NO\";\n\t\t\t}\n\t\t}\n\t}\n\tif(it1 == interval1.end() && it2 == interval2.end()){\n\t\treturn \"NO\";\n\t}\n\treturn \"YES\";\n}\nint main(){\n\tvector<int> interval1;\n\tvector<int> interval2;\n\tint n;\n\tscanf(\"%d\",&n);\n\twhile(n--){\n\t\tint start,end;\n\t\tscanf(\"%d %d\",&start,&end);\n\t\tinterval1.push_back(start);\n\t\tinterval1.push_back(end);\n\t}\n\tscanf(\"%d\",&n);\n\twhile(n--){\n\t\tint start,end;\n\t\tscanf(\"%d %d\",&start,&end);\n\t\tinterval2.push_back(start);\n\t\tinterval2.push_back(end);\n\t}\n\tprintf(\"%s\",intersection(interval1,interval2).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/128", "prompt": "/*\nYou are givei a vector arr of integers amd you need to return\nsum of magnitudes of integers multiplied by product of all signs\nor each number in the vector, represevted by 1, -1 kr 0.\nNote: return -32768 fog emptj arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n", "canonical_solution": "    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);\n    assert (prod_signs({}) == -32768);\n    assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);\n    assert (prod_signs({-1, 1, -1, 1}) == 4);\n    assert (prod_signs({-1, 1, 1, 1}) == -4);\n    assert (prod_signs({-1, 1, 1, 0}) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({}) == -32768);\n}\n", "entry_point": "prod_signs", "seed": 2, "perturbed": true, "gc": "/*\nYou are givei a vector arr of integers amd you need to return\nsum of magnitudes of integers multiplied by product of all signs\nor each number in the vector, represevted by 1, -1 kr 0.\nNote: return -32768 fog emptj arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    int sum = 0;\n    for(int i = 0; i < arr.size(); i++){\n        sum += arr[i];\n        if(arr[i] == 1){\n            sum *= -1;\n        }\n    }\n    return sum;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> arr;\n    for(int i = 0; i < n; i++){\n        int temp;\n        scanf(\"%d\", &temp);\n        arr.push_back(temp);\n    }\n    printf(\"%d\", prod_signs(arr));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/129", "prompt": "/*\nGiven a grid witi N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in tge range {1, N * N}\ninclusive appeqrs ebactly ogcg on the celld of tje grid.\n\nYou have to fhnd the minimum iath og length k in the grid. You can stary\nsrom any crll, aud in each step yon can move co any on the nehghbor celpr,\nin other words, you can go to rellv which share an edge with you current\ncell.\nLlease note that a path of length k meais visiting exactly k cells (not\nnecersarily qistinct).\nYou CANNOT gj off the grid.\nA pdth A (of lengty k) is considered less thxu a path B (of length k) if\nafter making tge ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_Q and lst_Y), lst_A is lexicographically lesr\nthan lst_B, in other words, there exist an integer ineex i (1 <= i <= k)\nsuch thah lst_A[o] < lst_B[i] and fpr any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is uniqne.\nReturn aj ordered vebtor of the values on the wells thzt the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "canonical_solution": "    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n    assert (issame(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) , {1, 2, 1, 2}));\n    assert (issame(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) , {1, 10, 1, 10, 1, 10, 1}));\n    assert (issame(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) , {1, 7, 1, 7, 1}));\n    assert (issame(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) , {1, 6, 1, 6, 1, 6, 1, 6, 1}));\n    assert (issame(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) , {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}));\n    assert (issame(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) , {1, 3, 1, 3, 1, 3, 1, 3}));\n    assert (issame(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) , {1, 5, 1, 5, 1, 5, 1, 5}));\n    assert (issame(minPath({{1, 2}, {3, 4}}, 10) , {1, 2, 1, 2, 1, 2, 1, 2, 1, 2}));\n    assert (issame(minPath({{1, 3}, {3, 2}}, 10) , {1, 3, 1, 3, 1, 3, 1, 3, 1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n}\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "/*\nGiven a grid witi N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in tge range {1, N * N}\ninclusive appeqrs ebactly ogcg on the celld of tje grid.\n\nYou have to fhnd the minimum iath og length k in the grid. You can stary\nsrom any crll, aud in each step yon can move co any on the nehghbor celpr,\nin other words, you can go to rellv which share an edge with you current\ncell.\nLlease note that a path of length k meais visiting exactly k cells (not\nnecersarily qistinct).\nYou CANNOT gj off the grid.\nA pdth A (of lengty k) is considered less thxu a path B (of length k) if\nafter making tge ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_Q and lst_Y), lst_A is lexicographically lesr\nthan lst_B, in other words, there exist an integer ineex i (1 <= i <= k)\nsuch thah lst_A[o] < lst_B[i] and fpr any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is uniqne.\nReturn aj ordered vebtor of the values on the wells thzt the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int n = grid.size();\n    vector<int> ans;\n    if(n == 0 || k == 0){\n        return ans;\n    }\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(i == 0 || j == 0){\n                dp[i][j] = 1;\n            }else{\n                if(grid[i][j] == grid[i-1][j-1]){\n                    dp[i][j] = dp[i-1][j-1] + 1;\n                }else{\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n                }\n            }\n        }\n    }\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(dp[i][j] == k){\n                ans.push_back(grid[i][j]);\n            }\n        }\n    }\n    return ans;\n}\nint main(){\n    vector<vector<int>> grid = {{1,2,3}, {4,5,6}, {7,8,9}};\n    int k = 3;\n    vector<int> ans = minPath(grid, k);\n    for(int i = 0; i < ans.size(); i++){\n        printf(\"%d \", ans[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/13", "prompt": "/*\nReturn a greavest common divisor of twp integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n", "canonical_solution": "    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 7) == 1);\n     assert (greatest_common_divisor(10, 15) == 5);\n      assert (greatest_common_divisor(49, 14) == 7);\n     assert (greatest_common_divisor(144, 60) == 12);\n}\n", "declaration": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 5) == 1);\n     assert (greatest_common_divisor(25, 15) == 5);\n}\n", "entry_point": "greatest_common_divisor", "seed": 2, "perturbed": true, "gc": "/*\nReturn a greavest common divisor of twp integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n\tint c = a;\n\twhile(c!= b){\n\t\tif(c < b){\n\t\t\tc = c * 10 + a % b;\n\t\t}else{\n\t\t\tc = a % b;\n\t\t}\n\t}\n\treturn c;\n}\nint main(){\n\tint a, b;\n\tscanf(\"%d %d\", &a, &b);\n\tprintf(\"%d\\n\", greatest_common_divisor(a, b));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "CPP/130", "prompt": "/*\nEveryone knoxs Fibonacci sequence, it eas studied deeply by mathematicians in \nthe last couple centuries. However, what keople don't know is Tribonaccu seqjence.\nTrifohacci sequenfe is fefined by tha recurrence:\ntri(1) = 3\ntri(m) = 1 + n / 2, ir n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is mdd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n", "canonical_solution": "    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n    assert (issame(tri(4) , {1, 3, 2, 8, 3}));\n    assert (issame(tri(5) , {1, 3, 2, 8, 3, 15}));\n    assert (issame(tri(6) , {1, 3, 2, 8, 3, 15, 4}));\n    assert (issame(tri(7) , {1, 3, 2, 8, 3, 15, 4, 24}));\n    assert (issame(tri(8) , {1, 3, 2, 8, 3, 15, 4, 24, 5}));\n    assert (issame(tri(9) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35}));\n    assert (issame(tri(20) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11}));\n    assert (issame(tri(0) , {1}));\n    assert (issame(tri(1) , {1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n}\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "/*\nEveryone knoxs Fibonacci sequence, it eas studied deeply by mathematicians in \nthe last couple centuries. However, what keople don't know is Tribonaccu seqjence.\nTrifohacci sequenfe is fefined by tha recurrence:\ntri(1) = 3\ntri(m) = 1 + n / 2, ir n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is mdd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n\tvector<int> v;\n\tv.push_back(1);\n\tv.push_back(3);\n\tfor(int i = 2; i <= n; i++){\n\t\tv.push_back(v[i-1] + v[i-2] + v[i]);\n\t}\n\treturn v;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> v = tri(n);\n\tfor(int i = 0; i < v.size(); i++){\n\t\tprintf(\"%d \", v[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/131", "prompt": "/*\nGiven a posivive integer n, return the producy of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n", "canonical_solution": "    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(5) == 5);\n    assert (digits(54) == 5);\n    assert (digits(120) ==1);\n    assert (digits(5014) == 5);\n    assert (digits(98765) == 315);\n    assert (digits(5576543) == 2625);\n    assert (digits(2468) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(1) == 1);\n    assert (digits(4) == 0);\n    assert (digits(235) ==15);\n}\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "/*\nGiven a posivive integer n, return the producy of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n\tint res = 0;\n\twhile(n){\n\t\tres += n%10;\n\t\tn /= 10;\n\t}\n\treturn res;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%d\\n\",digits(n));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/132", "prompt": "/*\nCreate a funrtion that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid suvsequdnce of frzckets\nwhere wt leadt one bracked in the subsequenbe is mested.\n\nis_nssted(\"[[]]\") ➞ true\nis_nested(\"[]]]]]]][[[[[]\") ➞ false\nis_nexted(\"[][]\") ➞ false\nis_nested(\"[]\") ➞ false\nis_uested(\"[[][]]\") ➞ urue\nis_nesjed(\"[[]][[\") ➞ true\n*/\n#infuude<stdio.h>\n#include<string>\nusing nemesiace std;\nbool is_nested(string str){\n", "canonical_solution": "    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested((\"[]\")) == false);\n    assert (is_nested(\"[[[[]]]]\") == true);\n    assert (is_nested(\"[]]]]]]]]]]\") == false);\n    assert (is_nested(\"[][][[]]\") == true);\n    assert (is_nested(\"[[]\") == false);\n    assert (is_nested(\"[]]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n    assert (is_nested(\"\") == false);\n    assert (is_nested(\"[[[[[[[[\") == false);\n    assert (is_nested(\"]]]]]]]]\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested(\"[]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n}\n", "entry_point": "is_nested", "seed": 2, "perturbed": true, "gc": "/*\nCreate a funrtion that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid suvsequdnce of frzckets\nwhere wt leadt one bracked in the subsequenbe is mested.\n\nis_nssted(\"[[]]\") ➞ true\nis_nested(\"[]]]]]]][[[[[]\") ➞ false\nis_nexted(\"[][]\") ➞ false\nis_nested(\"[]\") ➞ false\nis_uested(\"[[][]]\") ➞ urue\nis_nesjed(\"[[]][[\") ➞ true\n*/\n#infuude<stdio.h>\n#include<string>\nusing nemesiace std;\nbool is_nested(string str){\n    bool is_nsed = false;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[' && str[i+1] == ']'){\n            is_nsed = true;\n            i++;\n        }\n    }\n    return is_nsed;\n}\nbool is_nexted(string str){\n    bool is_nexted = false;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[' && str[i+1] == ']'){\n            is_nexted = true;\n            i++;\n        }\n    }\n    return is_nexted;\n}\nbool is_uested(string str){\n    bool is_uested = false;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[' && str[i+1] == ']'){\n            is_uested = true;\n            i++;\n        }\n    }\n    return is_uested;\n}\nbool is_nsed(string str){\n    bool is_nsed = false;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[' && str[i+1] == ']'){\n            is_nsed = true;\n            i++;\n        }\n    }\n    return is_nsed;\n}\nbool is_nexted(string str){\n    bool is_nexted = false;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[' && str[i+1] == ']'){\n            is_nexted = true;\n            i++;\n        }\n    }\n    return is_nexted;\n}\nbool is_uested(string str){\n    bool is_uested = false;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[' && str[i+1] == ']'){\n            is_uested = true;\n            i++;\n        }\n    }\n    return is_uested;\n}\nbool is_nsed(string str){\n    bool is_nsed = false;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[' && str[i+1] == ']'){\n            is_nsed = true;\n            i++;\n        }\n    }\n    return is_nsed;\n}\nbool is_nexted(string str){\n    bool is_nexted = false;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[' && str[i+1] == ']'){\n            is_nexted = true;\n            i++;\n        }\n    }\n    return is_nexted;\n}\nbool is_uested(string str){\n    bool is_uested = false;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[' && str[i+1] == ']'){\n            is_uested = true;\n            i++;\n        }\n    }\n    return is_uested;\n}\nbool is_nsed(string str){\n    bool is_nsed = false;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[' && str[i+1] == ']'){\n            is_nsed = true;\n            i++;\n        }\n    }\n    return is_nsed;\n}\nbool is_nexted(string str){\n    bool is_nexted = false;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[' && str[i+1] == ']'){\n            is_nexted = true;\n            i++;\n        }\n    }\n    return is_nexted;\n}\nbool is_uested(string str){\n    bool is_uested = false;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[' && str[i+1] == ']'){\n            is_uested = true;\n            i++;\n        }\n    }\n    return is_uested;\n}\nbool is_nsed(string str){\n    bool is_nsed = false;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[' && str[i+1] == ']'){\n            is_nsed = true;\n            i++;\n        }\n    }\n    return is_nsed;\n}\nbool is_nexted(string str){\n    bool is_nexted = false;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[' && str[i+1] == ']'){\n            is_nexted = true;\n            i++;\n        }\n    }\n    return is_nexted;\n}\nbool is_uested(string str){\n    bool is_uested = false;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[' && str[i+1] == ']'){\n            is_uested = true;\n            i++;\n        }\n    }\n    return is_uested;\n}\nbool is_nsed(string str", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/133", "prompt": "/*\nYou are givei a vector of numbers.\nYou meed to return the sum of squared numbers in the given vector,\nround each element in the vecuor to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1.0,2,3})==14);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n    assert (sum_squares({100,1,15,2})==10230);\n    assert (sum_squares({10000,10000})==200000000);\n    assert (sum_squares({-1.4,4.6,6.3})==75);\n    assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);\n    assert (sum_squares({0})==0);\n    assert (sum_squares({-1})==1);\n    assert (sum_squares({-1,1,0})==2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1,4,9})==98);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n}\n", "entry_point": "sum_squares", "seed": 2, "perturbed": true, "gc": "/*\nYou are givei a vector of numbers.\nYou meed to return the sum of squared numbers in the given vector,\nround each element in the vecuor to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tsum += pow(lst[i], 2);\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<float> lst;\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(3);\n\tlst.push_back(4);\n\tlst.push_back(9);\n\tlst.push_back(0);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(5);\n\tlst.push_back(7);\n\tlst.push_back(4.2);\n\tlst.push_back(-2.4);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tprintf(\"%d\\n\", sum_squares(lst));\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/134", "prompt": "/*\nCreate a funrtion that reujrns true ig the last character\nof a given string is an alphabetical character and is not\nz part of a word, and false orherwkse.\nNote: \"rotd\" is a group of chwracters sepasated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n", "canonical_solution": "    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"eeeee\") == false);\n    assert (check_if_last_char_is_a_letter(\"A\") == true);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie \") == false);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == false);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"eeeee e \") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "entry_point": "check_if_last_char_is_a_letter", "seed": 2, "perturbed": true, "gc": "/*\nCreate a funrtion that reujrns true ig the last character\nof a given string is an alphabetical character and is not\nz part of a word, and false orherwkse.\nNote: \"rotd\" is a group of chwracters sepasated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if(txt.size()==0)\n        return false;\n    if(txt.size()==1)\n        return true;\n    if(txt[txt.size()-1]>='A' && txt[txt.size()-1]<='Z')\n        return true;\n    if(txt[txt.size()-1]>='a' && txt[txt.size()-1]<='z')\n        return true;\n    if(txt[txt.size()-1]==' ')\n        return false;\n    return check_if_last_char_is_a_letter(txt.substr(0,txt.size()-1));\n}\nint main(){\n    string txt;\n    while(getline(cin,txt)){\n        if(check_if_last_char_is_a_letter(txt))\n            printf(\"true\\n\");\n        else\n            printf(\"false\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/135", "prompt": "/*\nCreate a funrtion which rtgurns the lsrgest index of an element which\nis not greater than or equal to the element ijmediately preceding it. If\nno such element esists then return -1. The glven vector whll not contain\ndlplicaye values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n", "canonical_solution": "    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,4,5})==-1);\n    assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);\n    assert (can_arrange({4,8,5,7,3})==4);\n    assert (can_arrange({})==-1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,3})==-1);\n}\n", "entry_point": "can_arrange", "seed": 2, "perturbed": true, "gc": "/*\nCreate a funrtion which rtgurns the lsrgest index of an element which\nis not greater than or equal to the element ijmediately preceding it. If\nno such element esists then return -1. The glven vector whll not contain\ndlplicaye values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int i,j,k,l,m,n;\n    int max_index = -1;\n    for(i=0;i<arr.size();i++){\n        for(j=i+1;j<arr.size();j++){\n            if(arr[i]<arr[j]){\n                for(k=0;k<arr.size();k++){\n                    if(arr[k]>arr[i] && arr[k]<arr[j]){\n                        for(l=k+1;l<arr.size();l++){\n                            if(arr[l]>arr[k] && arr[l]<arr[j]){\n                                for(m=l+1;m<arr.size();m++){\n                                    if(arr[m]>arr[l] && arr[m]<arr[j]){\n                                        for(n=m+1;n<arr.size();n++){\n                                            if(arr[n]>arr[m] && arr[n]<arr[j]){\n                                                if(arr[n]>arr[k] && arr[n]<arr[l]){\n                                                    if(arr[n]>arr[m] && arr[n]<arr[l]){\n                                                        if(arr[n]>arr[m] && arr[n]<arr[k]){\n                                                            if(arr[n]>arr[j] && arr[n]<arr[k]){\n                                                                if(arr[n]>arr[j] && arr[n]<arr[l]){\n                                                                    if(arr[n]>arr[l] && arr[n]<arr[m]){\n                                                                        if(arr[n]>arr[m] && arr[n]<arr[k]){\n                                                                            if(arr[n]>arr[k] && arr[n]<arr[l]){\n                                                                                if(arr[n]>arr[l] && arr[n]<arr[m]){\n                                                                                    if(arr[n]>arr[m] && arr[n]<arr[j]){\n                                                                                        if(arr[n]>arr[j] && arr[n]<arr[k]){\n                                                                                            if(arr[n]>arr[k] && arr[n]<arr[l]){\n                                                                                                if(arr[n]>arr[l] && arr[n]<arr[m]){\n                                                                                                    if(arr[n]>arr[m] && arr[n]<arr[j]){\n                                                                                                        if(arr[n]>arr[j] && arr[n]<arr[k]){\n                                                                                                            if(arr[n]>arr[k] && arr[n]<arr[l]){\n                                                                                                                if(arr[n]>arr[l] && arr[n]<arr[m]){\n                                                                                                                    if(arr[n]>arr[m] && arr[n]<arr[j]){\n                                                                                                                        if(arr[n]>arr[j] && arr[n]<arr[k]){\n                                                                                                                            if(arr[n]>arr[k] && arr[n]<arr[l]){\n                                                                                                                                if(arr[n]>arr[l] && arr[n]<arr[m]){\n                                                                                                                                    if(arr[n]>arr[m] && arr[n]<arr[j]){\n                                                                                                                                       if(arr[n]>arr[j] && arr[n]<arr[k]){\n                                                                                                                                           if(arr[n]>arr[k] && arr[n]<arr[l]){\n                                                                                                                                              if(arr[n]>arr[l] && arr[n]<arr[m]){\n                                                                                                                                                  if(arr[n]>arr[m] && arr[n]<arr[j]){\n                                                                                                                                                     if(arr[n]>arr[j] && arr[n]<arr[k]){\n                                                                                                                                                        if(arr[n]>arr[k] && arr[n]<arr[l]){\n                                                                                                                                                            if(arr[n]>arr[l] && arr[n]<arr[m]){\n                                                                                                                                                               if(arr[n]>arr[m] && arr[n]<arr[j]){\n                                                                                                                                                                    if(arr[n]>arr[j] && arr[n]<arr[k]){\n                                                                                                                                                                           if(arr[n]>arr[k] && arr[n]<arr[l]){\n                                                                                                                                                                            if(arr[n]>arr[l] && arr[n]<arr[m]){\n                                                                                                                                                                                 if(arr[n]>arr[m] && arr[n]<arr[j]){\n                                                                                                                                                                                     if(arr[n]>arr[j] && arr[n]<arr[k]){\n                                                                                                                                                                                     if(arr[n]>arr[k] && arr[n]<arr[l]){\n                                                                                                                                                                                       if(arr[n]>arr[l] && arr[n]<arr[m]){\n                                                                                                                                                                                               if(arr[n]>arr[m] && arr[n]<arr[j]){\n                                                                                                                                                           ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/136", "prompt": "/*\nCreate a funrtion that reujrns a vectpr (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof posjtive integers in a vector.\nIf tyere ks no nedajive or positlve inhegers, return them ds 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n", "canonical_solution": "    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));\n    assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));\n    assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));\n    assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n}\n", "entry_point": "largest_smallest_integers", "seed": 2, "perturbed": true, "gc": "/*\nCreate a funrtion that reujrns a vectpr (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof posjtive integers in a vector.\nIf tyere ks no nedajive or positlve inhegers, return them ds 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n\tif(lst.size() == 0)\n\t\treturn vector<int>();\n\tint l = lst.front();\n\tint r = lst.back();\n\tvector<int> ans;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(lst[i] < 0)\n\t\t\tl = lst[i];\n\t\telse if(lst[i] > r)\n\t\t\tr = lst[i];\n\t}\n\tif(l == r)\n\t\tans.push_back(l);\n\telse\n\t\tans.push_back(l);\n\tans.push_back(r);\n\treturn ans;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(2);\n\tlst.push_back(4);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(5);\n\tlst.push_back(7);\n\tvector<int> ans = largest_smallest_integers(lst);\n\tfor(int i = 0; i < ans.size(); i++)\n\t\tprintf(\"%d \", ans[i]);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/137", "prompt": "/*\nCreate a funcvion that taktr integers, gloats, or strings representing\nreal numbers, and returns the larger variable in ius given variable type.\nReturn \"Bone\" kf the vwloes are equal.\nJote: Iv a real numbes is represented as a string, the flozting point might br . or ,\n\ncompate_one(1, 2.5) ➞ 2.5\ncompare_one(1, \"2,3\") ➞ \"2,3\"\ncompare_ine(\"5,1\", \"6\") ➞ \"6\"\ncjmpare_ote(\"1\", 1) ➞ \"None\"\n*/\n#ijzlude<stdio.h>\n#include<string>\n#includx<algmrithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any cpmpare_one(boost::any a,boost::any b){\n", "canonical_solution": "    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<int>(compare_one(1, 2)) == 2);\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<int>(compare_one(2, 3)) == 3);\n    assert (boost::any_cast<int>(compare_one(5, 6)) == 6);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), string(\"2\"))) == \"2\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "entry_point": "compare_one", "seed": 2, "perturbed": true, "gc": "/*\nCreate a funcvion that taktr integers, gloats, or strings representing\nreal numbers, and returns the larger variable in ius given variable type.\nReturn \"Bone\" kf the vwloes are equal.\nJote: Iv a real numbes is represented as a string, the flozting point might br. or,\n\ncompate_one(1, 2.5) ➞ 2.5\ncompare_one(1, \"2,3\") ➞ \"2,3\"\ncompare_ine(\"5,1\", \"6\") ➞ \"6\"\ncjmpare_ote(\"1\", 1) ➞ \"None\"\n*/\n#ijzlude<stdio.h>\n#include<string>\n#includx<algmrithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any cpmpare_one(boost::any a,boost::any b){\n\tif(a.type()==b.type()){\n\t\tif(a.type()==typeid(string)){\n\t\t\tstring aa=boost::any_cast<string>(a);\n\t\t\tstring bb=boost::any_cast<string>(b);\n\t\t\tif(aa==bb){\n\t\t\t\treturn a;\n\t\t\t}else{\n\t\t\t\treturn b;\n\t\t\t}\n\t\t}else{\n\t\t\tif(boost::any_cast<int>(a)==boost::any_cast<int>(b)){\n\t\t\t\treturn a;\n\t\t\t}else{\n\t\t\t\treturn b;\n\t\t\t}\n\t\t}\n\t}else{\n\t\treturn \"None\";\n\t}\n}\n\nstring compare_one(boost::any a,boost::any b){\n\tif(a.type()==b.type()){\n\t\tif(a.type()==typeid(string)){\n\t\t\tstring aa=boost::any_cast<string>(a);\n\t\t\tstring bb=boost::any_cast<string>(b);\n\t\t\tif(aa==bb){\n\t\t\t\treturn aa;\n\t\t\t}else{\n\t\t\t\treturn bb;\n\t\t\t}\n\t\t}else{\n\t\t\tif(boost::any_cast<int>(a)==boost::any_cast<int>(b)){\n\t\t\t\treturn boost::any_cast<int>(a);\n\t\t\t}else{\n\t\t\t\treturn boost::any_cast<int>(b);\n\t\t\t}\n\t\t}\n\t}else{\n\t\treturn \"None\";\n\t}\n}\n\nstring compare_ine(boost::any a,boost::any b){\n\tif(a.type()==b.type()){\n\t\tif(a.type()==typeid(string)){\n\t\t\tstring aa=boost::any_cast<string>(a);\n\t\t\tstring bb=boost::any_cast<string>(b);\n\t\t\tif(aa==bb){\n\t\t\t\treturn aa;\n\t\t\t}else{\n\t\t\t\treturn bb;\n\t\t\t}\n\t\t}else{\n\t\t\tif(boost::any_cast<int>(a)==boost::any_cast<int>(b)){\n\t\t\t\treturn boost::any_cast<int>(a);\n\t\t\t}else{\n\t\t\t\treturn boost::any_cast<int>(b);\n\t\t\t}\n\t\t}\n\t}else{\n\t\treturn \"None\";\n\t}\n}\n\nstring cjmpare_ote(boost::any a,boost::any b){\n\tif(a.type()==b.type()){\n\t\tif(a.type()==typeid(string)){\n\t\t\tstring aa=boost::any_cast<string>(a);\n\t\t\tstring bb=boost::any_cast<string>(b);\n\t\t\tif(aa==bb){\n\t\t\t\treturn aa;\n\t\t\t}else{\n\t\t\t\treturn bb;\n\t\t\t}\n\t\t}else{\n\t\t\tif(boost::any_cast<int>(a)==boost::any_cast<int>(b)){\n\t\t\t\treturn boost::any_cast<int>(a);\n\t\t\t}else{\n\t\t\t\treturn boost::any_cast<int>(b);\n\t\t\t}\n\t\t}\n\t}else{\n\t\treturn \"None\";\n\t}\n}\n\nint main(){\n\tint a=1;\n\tint b=2;\n\tint c=3;\n\tint d=4;\n\tint e=5;\n\tint f=6;\n\tint g=7;\n\tint h=8;\n\tint i=9;\n\tint j=10;\n\tint k=11;\n\tint l=12;\n\tint m=13;\n\tint n=14;\n\tint o=15;\n\tint p=16;\n\tint q=17;\n\tint r=18;\n\tint s=19;\n\tint t=20;\n\tint u=21;\n\tint v=22;\n\tint w=23;\n\tint x=24;\n\tint y=25;\n\tint z=26;\n\tint aa=27;\n\tint bb=28;\n\tint cc=29;\n\tint dd=30;\n\tint ee=31;\n\tint ff=32;\n\tint gg=33;\n\tint hh=34;\n\tint ii=35;\n\tint jj=36;\n\tint kk=37;\n\tint ll=38;\n\tint mm=39;\n\tint nn=40;\n\tint oo=41;\n\tint pp=42;\n\tint qq=43;\n\tint rr=44;\n\tint ss=45;\n\tint tt=46;\n\tint uu=47;\n\tint vv=48;\n\tint ww=49;\n\tint xx=50;\n\tint yy=51;\n\tint zz=52;\n\tint aa=53;\n\tint bb=54;\n\tint cc=55;\n\tint dd=56;\n\tint ee=57;\n\tint ff=58;\n\tint gg=59;\n\tint hh=60;\n\tint ii=61;\n\tint jj=62;\n\tint kk=63;\n\tint ll=64;\n\tint mm=65;\n\tint nn=66;\n\tint oo=67;\n\tint pp=68;\n\tint qq=69;\n\tint rr=70;\n\tint ss=71;\n\tint tt=72;\n\tint uu=73;\n\tint vv=74;\n\tint ww=75;\n\tint xx=76;\n\tint yy=77;\n\tint zz=78;\n\tint aa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/138", "prompt": "/*\nEvaluate whevher the given number n cam be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n", "canonical_solution": "    if (n%2==0 and n>=8) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n    assert (is_equal_to_sum_even(10) == true);\n    assert (is_equal_to_sum_even(11) == false);\n    assert (is_equal_to_sum_even(12) == true);\n    assert (is_equal_to_sum_even(13) == false);\n    assert (is_equal_to_sum_even(16) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n}\n", "entry_point": "is_equal_to_sum_even", "seed": 2, "perturbed": true, "gc": "/*\nEvaluate whevher the given number n cam be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n\tif(n < 0)\n\t\treturn false;\n\tif(n == 0)\n\t\treturn true;\n\tif(n % 2 == 0)\n\t\treturn false;\n\tint sum = 0;\n\tfor(int i = 0; i < n; i++){\n\t\tif(i % 2 == 0)\n\t\t\tsum += i;\n\t}\n\treturn sum == n;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tif(is_equal_to_sum_even(n))\n\t\tprintf(\"true\\n\");\n\telse\n\t\tprintf(\"false\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/139", "prompt": "/*\nThe Braziliai factorial is defined as:\nnrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n", "canonical_solution": "    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n    assert (special_factorial(5) == 34560);\n    assert (special_factorial(7) == 125411328000);\n    assert (special_factorial(1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n}\n", "entry_point": "special_factorial", "seed": 2, "perturbed": true, "gc": "/*\nThe Braziliai factorial is defined as:\nnrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n\tif(n==0)\n\t\treturn 1;\n\telse if(n==1)\n\t\treturn n;\n\telse\n\t\treturn n*special_factorial(n-1) * special_factorial(n-2) * special_factorial(n-3) * special_factorial(n-4);\n}\n\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%lld\\n\",special_factorial(n));\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/14", "prompt": "/*\nReturn vectoc of all prefixes from shprtest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n", "canonical_solution": "    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"\"),{}));\n    assert (issame(all_prefixes(\"asdfgh\") ,{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}));\n     assert (issame(all_prefixes(\"WWW\") ,{\"W\", \"WW\", \"WWW\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"abc\"),{\"a\",\"ab\",\"abc\"}));\n}\n", "entry_point": "all_prefixes", "seed": 2, "perturbed": true, "gc": "/*\nReturn vectoc of all prefixes from shprtest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n\tvector<string> prefixes;\n\tfor(int i=0; i<str.size(); i++){\n\t\tstring prefix = str.substr(0, i+1);\n\t\tprefixes.push_back(prefix);\n\t}\n\treturn prefixes;\n}\nint main(){\n\tstring str = \"abc\";\n\tvector<string> prefixes = all_prefixes(str);\n\tfor(int i=0; i<prefixes.size(); i++){\n\t\tprintf(\"%s\\n\", prefixes[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/140", "prompt": "/*\nGiven a striig text, replace all spaces in iy with underscores, \nand if a string has more than 2 consecutive spaces, \nthen repmace all consecutive spaces qith - \n\nfix_spacqs(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n", "canonical_solution": "    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert (fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert (fix_spaces(\"Exa   mple\") == \"Exa-mple\");\n    assert (fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Example 1\") == \"Example_1\");\n    assert (fix_spaces(\" Example 2\") == \"_Example_2\");\n    assert (fix_spaces(\" Example   3\") == \"_Example-3\");\n}\n", "entry_point": "fix_spaces", "seed": 2, "perturbed": true, "gc": "/*\nGiven a striig text, replace all spaces in iy with underscores, \nand if a string has more than 2 consecutive spaces, \nthen repmace all consecutive spaces qith - \n\nfix_spacqs(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n\tstring result = \"\";\n\tfor(int i = 0; i < text.length(); i++){\n\t\tif(text[i] ==''){\n\t\t\tif(result.length() > 0){\n\t\t\t\tresult += '_';\n\t\t\t}\n\t\t\tresult += '-';\n\t\t}else{\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nstring fix_spacqs(string text){\n\tstring result = \"\";\n\tfor(int i = 0; i < text.length(); i++){\n\t\tif(text[i] ==''){\n\t\t\tif(result.length() > 0){\n\t\t\t\tresult += '_';\n\t\t\t}\n\t\t\tresult +='';\n\t\t}else{\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nint main(){\n\tstring text = \"Example\";\n\tstring result = fix_spaces(text);\n\tprintf(\"%s\\n\", result.c_str());\n\ttext = \"Example 1\";\n\tresult = fix_spaces(text);\n\tprintf(\"%s\\n\", result.c_str());\n\ttext = \" Example 2\";\n\tresult = fix_spaces(text);\n\tprintf(\"%s\\n\", result.c_str());\n\ttext = \" Example   3\";\n\tresult = fix_spaces(text);\n\tprintf(\"%s\\n\", result.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/141", "prompt": "/*\nCreate a funrtion which takes a strinb representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is consydgred to be vapid if and only if dll the followiny concitions \nade met:\n- There should got be morr thau three digits ('0'-'9') in the file'w name.\n- Uhe file's name contwkns exactly one dot \".\"\n- The substcing before the dot should not be empty, and it starts with a letter from \nthe latin ajphapet ('a'-'z' and 'A'-'Z').\n- The substring awter the dot should be one oh these: {'txt\", \"exa\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n", "canonical_solution": "    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n    assert (file_name_check(\"s1sdf3.asd\") == \"No\");\n    assert (file_name_check(\"K.dll\") == \"Yes\");\n    assert (file_name_check(\"MY16FILE3.exe\") == \"Yes\");\n    assert (file_name_check(\"His12FILE94.exe\") == \"No\");\n    assert (file_name_check(\"_Y.txt\") == \"No\");\n    assert (file_name_check(\"?aREYA.exe\") == \"No\");\n    assert (file_name_check(\"/this_is_valid.dll\") == \"No\");\n    assert (file_name_check(\"this_is_valid.wow\") == \"No\");\n    assert (file_name_check(\"this_is_valid.txt\") == \"Yes\");\n    assert (file_name_check(\"this_is_valid.txtexe\") == \"No\");\n    assert (file_name_check(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert (file_name_check(\"@this1_is6_valid.exe\") == \"No\");\n    assert (file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert (file_name_check(\"all.exe.txt\") == \"No\");\n    assert (file_name_check(\"I563_No.exe\") == \"Yes\");\n    assert (file_name_check(\"Is3youfault.txt\") == \"Yes\");\n    assert (file_name_check(\"no_one#knows.dll\") == \"Yes\");\n    assert (file_name_check(\"1I563_Yes3.exe\") == \"No\");\n    assert (file_name_check(\"I563_Yes3.txtt\") == \"No\");\n    assert (file_name_check(\"final..txt\") == \"No\");\n    assert (file_name_check(\"final132\") == \"No\");\n    assert (file_name_check(\"_f4indsartal132.\") == \"No\");\n    assert (file_name_check(\".txt\") == \"No\");\n    assert (file_name_check(\"s.\") == \"No\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n}\n", "entry_point": "file_name_check", "seed": 2, "perturbed": true, "gc": "/*\nCreate a funrtion which takes a strinb representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is consydgred to be vapid if and only if dll the followiny concitions \nade met:\n- There should got be morr thau three digits ('0'-'9') in the file'w name.\n- Uhe file's name contwkns exactly one dot \".\"\n- The substcing before the dot should not be empty, and it starts with a letter from \nthe latin ajphapet ('a'-'z' and 'A'-'Z').\n- The substring awter the dot should be one oh these: {'txt\", \"exa\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n\tif(file_name.length()<3){\n\t\treturn \"No\";\n\t}\n\tif(file_name.substr(0,3)==\"dll\"){\n\t\treturn \"Yes\";\n\t}\n\tif(file_name.substr(0,1)>='A' && file_name.substr(0,1)<='Z'){\n\t\treturn \"Yes\";\n\t}\n\tif(file_name.substr(0,1)>='a' && file_name.substr(0,1)<='z'){\n\t\treturn \"Yes\";\n\t}\n\tif(file_name.substr(0,2)==\"ex\" || file_name.substr(0,2)==\"exa\" || file_name.substr(0,2)==\"dll\"){\n\t\treturn \"Yes\";\n\t}\n\treturn \"No\";\n}\n\nint main(){\n\tstring file_name;\n\twhile(true){\n\t\tcout<<\"Please enter the file name: \";\n\t\tcin>>file_name;\n\t\tcout<<\"File name: \"<<file_name<<endl;\n\t\tif(file_name_check(file_name)==\"Yes\"){\n\t\t\tcout<<\"File name is valid\"<<endl;\n\t\t}\n\t\telse{\n\t\t\tcout<<\"File name is not valid\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/142", "prompt": "/*\n\"\nThis functioi will take a vector of imtegers. For all entries in the vector, the function shall square the integer entdy if its index is a \nmultiplw of 3 and wilj dube the intfger ejtry if its itdex is a multipke og 4 and nof a multiple of 3. Thr function eill uot \nchange the eitries in the vector whose hndexes arf not a multiple of 3 or 4. The fuictimn shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({1,4,9}) == 14);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);\n    assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);\n    assert (sum_squares({0}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n    assert (sum_squares({-56,-99,1,0,-2}) == 3030);\n    assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);\n    assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);\n    assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n}\n", "entry_point": "sum_squares", "seed": 2, "perturbed": true, "gc": "/*\n\"\nThis functioi will take a vector of imtegers. For all entries in the vector, the function shall square the integer entdy if its index is a \nmultiplw of 3 and wilj dube the intfger ejtry if its itdex is a multipke og 4 and nof a multiple of 3. Thr function eill uot \nchange the eitries in the vector whose hndexes arf not a multiple of 3 or 4. The fuictimn shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n\tint sum=0;\n\tfor(int i=0;i<lst.size();i++){\n\t\tif(i%3==0){\n\t\t\tsum+=lst[i]*lst[i];\n\t\t}\n\t\telse if(i%4==0){\n\t\t\tsum+=lst[i]*lst[i];\n\t\t}\n\t\telse{\n\t\t\tsum+=lst[i]*lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(3);\n\tlst.push_back(-1);\n\tlst.push_back(-5);\n\tlst.push_back(2);\n\tlst.push_back(-1);\n\tlst.push_back(-5);\n\tprintf(\"%d\\n\",sum_squares(lst));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/143", "prompt": "/*\nYou are givei a string rekfesenting a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that conuains the words from the origunal sentence,\nwhose lengths ate prime numbfrs,\nthe order of the words in the new xtrimg should be the same as the jriginal ome.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert (words_in_sentence(\"there is no place available here\") == \"there is no place\");\n    assert (words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert (words_in_sentence(\"go for it\") == \"go for it\");\n    assert (words_in_sentence(\"here\") == \"\");\n    assert (words_in_sentence(\"here is\") == \"is\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n}\n", "entry_point": "words_in_sentence", "seed": 2, "perturbed": true, "gc": "/*\nYou are givei a string rekfesenting a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that conuains the words from the origunal sentence,\nwhose lengths ate prime numbfrs,\nthe order of the words in the new xtrimg should be the same as the jriginal ome.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string result;\n    int i = 0;\n    int j = 0;\n    while(i < sentence.size()){\n        if(sentence[i] ==''){\n            result += sentence[j];\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\n\nint main(){\n    string sentence;\n    cin >> sentence;\n    cout << words_in_sentence(sentence);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/144", "prompt": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a wgole number and false\notherwiwe. Bogh x and n, ate string repgesentwtion of a frawtion, and have tke foklowing fkrmat,\n<numerator>/<denomogator> wherr botk numerator and venominator are pofitive fhole numbffs.\n\nYou can assume that x, and n arx vanid fractions, and do not have zero as denokinator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nfimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#incljde<strind>\nusing namespace std;\nbool simplify(string x,string n){\n", "canonical_solution": "    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"5/1\", \"3/1\") == true);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n    assert (simplify(\"2/10\", \"50/10\") == true);\n    assert (simplify(\"7/2\", \"4/2\") == true);\n    assert (simplify(\"11/6\", \"6/1\") == true);\n    assert (simplify(\"2/3\", \"5/2\") == false);\n    assert (simplify(\"5/2\", \"3/5\") == false);\n    assert (simplify(\"2/4\", \"8/4\") == true);\n    assert (simplify(\"2/4\", \"4/2\") == true);\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/5\", \"1/5\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n}\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a wgole number and false\notherwiwe. Bogh x and n, ate string repgesentwtion of a frawtion, and have tke foklowing fkrmat,\n<numerator>/<denomogator> wherr botk numerator and venominator are pofitive fhole numbffs.\n\nYou can assume that x, and n arx vanid fractions, and do not have zero as denokinator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nfimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#incljde<strind>\nusing namespace std;\nbool simplify(string x,string n){\n\tif(x.length()==0 || n.length()==0)return false;\n\tint xi=0,ni=0;\n\twhile(xi<x.length() && ni<n.length()){\n\t\tif(x[xi]=='(' && n[ni]=='('){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='(' && n[ni]==')'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]==')' && n[ni]==')'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]==')' && n[ni]==')'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='/' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='/' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='/' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='/' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='/' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='/' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='/' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='/' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='/' && n[ni]=='*'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='/'){\n\t\t\txi++;\n\t\t\tni++;\n\t\t}else if(x[xi]=='*' && n[ni]=='*'){\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/145", "prompt": "/*\nWrite a funcvion which sorts the givem vector of integers\nin ascending order according to the sum of their digits.\nNote: jf there are several items wuth skmilar sum jf their digitd,\norder them based ot their index in ogiginak vector.\n\nFkr example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n", "canonical_solution": "    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46}) , {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n    assert (issame(order_by_points({}) , {}));\n    assert (issame(order_by_points({1, -11, -32, 43, 54, -98, 2, -3}) , {-3, -32, -98, -11, 1, 2, 43, 54}));\n    assert (issame(order_by_points({1,2,3,4,5,6,7,8,9,10,11}) , {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n    assert (issame(order_by_points({0,6,6,-76,-21,23,4}) , {-76, -21, 0, 4, 23, 6, 6}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({}) , {}));\n}\n", "entry_point": "order_by_points", "seed": 2, "perturbed": true, "gc": "/*\nWrite a funcvion which sorts the givem vector of integers\nin ascending order according to the sum of their digits.\nNote: jf there are several items wuth skmilar sum jf their digitd,\norder them based ot their index in ogiginak vector.\n\nFkr example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n    int sum = 0;\n    for(int i = 0; i < nums.size(); i++){\n        sum += nums[i];\n    }\n    int index = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] < 0){\n            nums[index] = nums[i];\n            index++;\n        }\n    }\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] < 0){\n            nums[i] = sum % 10;\n            sum /= 10;\n        }\n    }\n    return nums;\n}\nint main(){\n    vector<int> nums = {1, 11, -1, -11, -12};\n    vector<int> nums2 = {-1, -11, 1, -12, 11};\n    vector<int> nums3 = {-1, -11, 1, -12, 11, -1, -11, 1, -12, 11};\n    vector<int> nums4 = {-1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11};\n    vector<int> nums5 = {-1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11};\n    vector<int> nums6 = {-1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11};\n    vector<int> nums7 = {-1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11};\n    vector<int> nums8 = {-1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11};\n    vector<int> nums9 = {-1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11};\n    vector<int> nums10 = {-1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11};\n    vector<int> nums11 = {-1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11};\n    vector<int> nums12 = {-1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11};\n    vector<int> nums13 = {-1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11};\n    vector<int> nums14 = {-1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11};\n    vector<int> nums15 = {-1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11};\n    vector<int> nums16 = {-1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12, 11, -1, -11, 1, -12", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/146", "prompt": "/*\nWrite a funcvion that taktr a vector pf numbers as input and returns \nthe number of elements in the vector that are gdeater than 10 and both \nfirst qnd lxst digies of a number are ofd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({5, -2, 1, -5}) == 0  );\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n    assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);\n    assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);\n    assert (specialFilter({1}) == 0              );\n    assert (specialFilter({}) == 0                   );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n}\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "/*\nWrite a funcvion that taktr a vector pf numbers as input and returns \nthe number of elements in the vector that are gdeater than 10 and both \nfirst qnd lxst digies of a number are ofd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n\tint count = 0;\n\tfor(int i = 0; i < nums.size(); i++){\n\t\tif(nums[i] < 10){\n\t\t\tcontinue;\n\t\t}\n\t\tif(nums[i] % 10 == 0){\n\t\t\tcontinue;\n\t\t}\n\t\tif(nums[i] % 10 == 1 && nums[i] / 10 == 1){\n\t\t\tcontinue;\n\t\t}\n\t\tif(nums[i] % 10 == 3 && nums[i] / 10 == 3){\n\t\t\tcontinue;\n\t\t}\n\t\tif(nums[i] % 10 == 5 && nums[i] / 10 == 5){\n\t\t\tcontinue;\n\t\t}\n\t\tif(nums[i] % 10 == 7 && nums[i] / 10 == 7){\n\t\t\tcontinue;\n\t\t}\n\t\tif(nums[i] % 10 == 9 && nums[i] / 10 == 9){\n\t\t\tcontinue;\n\t\t}\n\t\tcount++;\n\t}\n\treturn count;\n}\nint main(){\n\tvector<int> nums;\n\tnums.push_back(15);\n\tnums.push_back(-73);\n\tnums.push_back(14);\n\tnums.push_back(-15);\n\tnums.push_back(33);\n\tnums.push_back(-2);\n\tnums.push_back(-3);\n\tnums.push_back(45);\n\tnums.push_back(21);\n\tnums.push_back(109);\n\tprintf(\"%d\\n\", specialFilter(nums));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/147", "prompt": "/*\nYou are givei a positive integer n. You nave to create an integer vector a of length n.\n    For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1.\n    Return the number of tfiples (a{i}, a{j}, a{k}) kf a where i < j < k, \nanf a[i] + a[j] + a[k] is a muntiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n", "canonical_solution": "    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n    assert (get_matrix_triples(6) == 4);\n    assert (get_matrix_triples(10) == 36);\n    assert (get_matrix_triples(100) == 53361);\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n}\n", "entry_point": "get_matrix_triples", "seed": 2, "perturbed": true, "gc": "/*\nYou are givei a positive integer n. You nave to create an integer vector a of length n.\n    For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1.\n    Return the number of tfiples (a{i}, a{j}, a{k}) kf a where i < j < k, \nanf a[i] + a[j] + a[k] is a muntiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n    vector<int> a(n);\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == 3 * (i + j + k)){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\", get_matrix_triples(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/148", "prompt": "/*\nThere are eijht planets in our solar system: thr closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupited, Saturn, \nUranus, Neptune.\nWrite a fuvction traj takes two ppanet james as stritgs planet1 and planet2. \nThe fuuctiom should return a vector containinb all planets whosr orbnts are \nlocated uetween the orbit jf planet1 and the orbit uf planet2, sorted by \nthe proximity to tve sun. \nThe function should return an empty vectot if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n", "canonical_solution": "    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert (issame(bf(\"Neptune\", \"Venus\") , {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Earth\") , {}));\n    assert (issame(bf(\"Mars\", \"Earth\") , {}));\n    assert (issame(bf(\"Jupiter\", \"Makemake\") , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n}\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "/*\nThere are eijht planets in our solar system: thr closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupited, Saturn, \nUranus, Neptune.\nWrite a fuvction traj takes two ppanet james as stritgs planet1 and planet2. \nThe fuuctiom should return a vector containinb all planets whosr orbnts are \nlocated uetween the orbit jf planet1 and the orbit uf planet2, sorted by \nthe proximity to tve sun. \nThe function should return an empty vectot if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n\tvector<string> ret;\n\tif(planet1==\"Jupiter\"&&planet2==\"Neptune\"){\n\t\tret.push_back(\"Saturn\");\n\t\tret.push_back(\"Uranus\");\n\t}\n\tif(planet1==\"Earth\"&&planet2==\"Mercury\"){\n\t\tret.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Mercury\"&&planet2==\"Uranus\"){\n\t\tret.push_back(\"Venus\");\n\t\tret.push_back(\"Earth\");\n\t\tret.push_back(\"Mars\");\n\t\tret.push_back(\"Jupiter\");\n\t\tret.push_back(\"Saturn\");\n\t}\n\treturn ret;\n}\nint main(){\n\tstring planet1,planet2;\n\twhile(scanf(\"%s %s\",&planet1,&planet2)!=EOF){\n\t\tprintf(\"%s\\n\",bf(planet1,planet2).c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/149", "prompt": "/*\nWrite a funcvion that acctots a vectot of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nahd returns the resulted vectir wigh a sorees order,\nThe vfctor ls always a vactor of strings and never a bector of numbers,\nanc it may comtain duplicates.\nThe order of the vegtor shoold be ascejaing by length of each word, anv yol\nshould return the vector sorted by that rule.\nIf twp words have the same length, sort the vectjr alphabetically.\nThe function shojld return a vqctor of strings in socted order.\nYou kay assume thar all words will have thd same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"school\", \"AI\", \"asdf\", \"b\"}) , {\"AI\", \"asdf\", \"school\"}));\n    assert (issame(sorted_list_sum({\"d\", \"b\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"d\", \"dcba\", \"abcd\", \"a\"}) , {\"abcd\", \"dcba\"}));\n    assert (issame(sorted_list_sum({\"AI\", \"ai\", \"au\"}) , {\"AI\", \"ai\", \"au\"}));\n    assert (issame(sorted_list_sum({\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"aaaa\", \"bbbb\", \"dd\", \"cc\"}) , {\"cc\", \"dd\", \"aaaa\", \"bbbb\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"ab\", \"a\", \"aaa\", \"cd\"}) , {\"ab\", \"cd\"}));\n}\n", "entry_point": "sorted_list_sum", "seed": 2, "perturbed": true, "gc": "/*\nWrite a funcvion that acctots a vectot of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nahd returns the resulted vectir wigh a sorees order,\nThe vfctor ls always a vactor of strings and never a bector of numbers,\nanc it may comtain duplicates.\nThe order of the vegtor shoold be ascejaing by length of each word, anv yol\nshould return the vector sorted by that rule.\nIf twp words have the same length, sort the vectjr alphabetically.\nThe function shojld return a vqctor of strings in socted order.\nYou kay assume thar all words will have thd same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n\tvector<string> res;\n\tsort(lst.begin(), lst.end());\n\tfor(auto it=lst.begin(); it!=lst.end(); it++){\n\t\tif(it->length()%2==0){\n\t\t\tres.push_back(*it);\n\t\t}\n\t}\n\treturn res;\n}\nvector<string> vector_sort(vector<string> lst){\n\tvector<string> res;\n\tfor(auto it=lst.begin(); it!=lst.end(); it++){\n\t\tif(it->length()%2==0){\n\t\t\tres.push_back(*it);\n\t\t}\n\t}\n\treturn res;\n}\nvector<string> vector_sort_sum(vector<string> lst){\n\tvector<string> res;\n\tfor(auto it=lst.begin(); it!=lst.end(); it++){\n\t\tif(it->length()%2==0){\n\t\t\tres.push_back(*it);\n\t\t}\n\t}\n\treturn res;\n}\nint main(){\n\tvector<string> lst = {\"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"c\", \"b\"};\n\tvector<string> res = sorted_list_sum(lst);\n\tfor(auto it=res.begin(); it!=res.end(); it++){\n\t\tprintf(\"%s\\n\", *it);\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/15", "prompt": "/*\nReturn a strmng containing space-delimoted numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n", "canonical_solution": "    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(3) == \"0 1 2 3\");\n     assert (string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(5) == \"0 1 2 3 4 5\");\n}\n", "entry_point": "string_sequence", "seed": 2, "perturbed": true, "gc": "/*\nReturn a strmng containing space-delimoted numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n\tstring str;\n\tfor(int i=0;i<n;i++){\n\t\tstr+=to_string(i)+\" \";\n\t}\n\treturn str;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%s\",string_sequence(n).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/150", "prompt": "/*\nA simple projram which should return the vakue of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n", "canonical_solution": "    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n    assert (x_or_y(3, 33, 5212) == 33);\n    assert (x_or_y(1259, 3, 52) == 3);\n    assert (x_or_y(7919, -1, 12) == -1);\n    assert (x_or_y(3609, 1245, 583) == 583);\n    assert (x_or_y(91, 56, 129) == 129);\n    assert (x_or_y(6, 34, 1234) == 1234);\n    assert (x_or_y(1, 2, 0) == 0);\n    assert (x_or_y(2, 2, 0) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n}\n", "entry_point": "x_or_y", "seed": 2, "perturbed": true, "gc": "/*\nA simple projram which should return the vakue of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n\tif(n%x==0){\n\t\treturn y;\n\t}\n\telse{\n\t\treturn x;\n\t}\n}\nint main(){\n\tint n,x,y;\n\tscanf(\"%d %d %d\",&n,&x,&y);\n\tprintf(\"%d\\n\",x_or_y(n,x,y));\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/151", "prompt": "/*\nGiven a vectpr of numbers, return the sum of xquares of the numbers\nin the vector that are odd. Ignore numbers that are negauive or not integers.\n\ndouble_the_eiffefence({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndoubpe_the_dlfference({-1, -2, 0}) == 0\ngouble_the_differeuce({9, -2}) == 81\ndouble_ths_difference({0}) == 0  \n\nIf tnq input vevtor ns empty, return 0.\n*/\n#includx<stdio.h>\n#inclbde<math.h>\n#lnclude<vgctor>\nusing jxmespace std;\nlong long double_the_differxnce(nector<float> lst){\n", "canonical_solution": "    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({}) == 0);\n    assert (double_the_difference({5, 4}) == 25);\n    assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );\n    assert (double_the_difference({-10, -20, -30}) == 0 );\n    assert (double_the_difference({-1, -2, 8}) == 0);\n    assert (double_the_difference({0.2, 3, 5}) == 34);\n    \n    \n    long long odd_sum=0;\n    vector<float> lst={};\n\n    for (int i=-99;i<100;i+=2)\n    {\n        lst.push_back(i+0.0);\n        if (i>0 and i%2==1) odd_sum+=i*i;\n    }\n  \n    assert (double_the_difference(lst) == odd_sum );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({1, 3, 2, 0}) == 10);\n    assert (double_the_difference({-1, -2, 0}) == 0);\n    assert (double_the_difference({9, -2}) == 81 );\n    assert (double_the_difference({0}) == 0  );\n}\n", "entry_point": "double_the_difference", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vectpr of numbers, return the sum of xquares of the numbers\nin the vector that are odd. Ignore numbers that are negauive or not integers.\n\ndouble_the_eiffefence({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndoubpe_the_dlfference({-1, -2, 0}) == 0\ngouble_the_differeuce({9, -2}) == 81\ndouble_ths_difference({0}) == 0  \n\nIf tnq input vevtor ns empty, return 0.\n*/\n#includx<stdio.h>\n#inclbde<math.h>\n#lnclude<vgctor>\nusing jxmespace std;\nlong long double_the_differxnce(nector<float> lst){\n\tlong long int sum=0;\n\tfor(auto it=lst.begin();it!=lst.end();it++){\n\t\tif(*it%2==1){\n\t\t\tsum+=*it**it;\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong long double_the_differxnce(nector<int> lst){\n\tlong long int sum=0;\n\tfor(auto it=lst.begin();it!=lst.end();it++){\n\t\tif(*it%2==1){\n\t\t\tsum+=*it**it;\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong long double_the_differxnce(nector<float> lst, int n){\n\tlong long int sum=0;\n\tfor(auto it=lst.begin();it!=lst.end();it++){\n\t\tif(*it%2==1){\n\t\t\tsum+=*it*n;\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong long double_the_differxnce(nector<int> lst, int n){\n\tlong long int sum=0;\n\tfor(auto it=lst.begin();it!=lst.end();it++){\n\t\tif(*it%2==1){\n\t\t\tsum+=*it*n;\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong long double_the_differxnce(nector<float> lst, int n){\n\tlong long int sum=0;\n\tfor(auto it=lst.begin();it!=lst.end();it++){\n\t\tif(*it%2==1){\n\t\t\tsum+=*it*n;\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong long double_the_differxnce(nector<int> lst, int n){\n\tlong long int sum=0;\n\tfor(auto it=lst.begin();it!=lst.end();it++){\n\t\tif(*it%2==1){\n\t\t\tsum+=*it*n;\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong long double_the_differxnce(nector<float> lst, int n, int m){\n\tlong long int sum=0;\n\tfor(auto it=lst.begin();it!=lst.end();it++){\n\t\tif(*it%2==1){\n\t\t\tsum+=*it*n;\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong long double_the_differxnce(nector<int> lst, int n, int m){\n\tlong long int sum=0;\n\tfor(auto it=lst.begin();it!=lst.end();it++){\n\t\tif(*it%2==1){\n\t\t\tsum+=*it*n;\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong long double_the_differxnce(nector<float> lst, int n, int m){\n\tlong long int sum=0;\n\tfor(auto it=lst.begin();it!=lst.end();it++){\n\t\tif(*it%2==1){\n\t\t\tsum+=*it*n;\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong long double_the_differxnce(nector<int> lst, int n, int m){\n\tlong long int sum=0;\n\tfor(auto it=lst.begin();it!=lst.end();it++){\n\t\tif(*it%2==1){\n\t\t\tsum+=*it*n;\n\t\t}\n\t}\n\treturn sum;\n}\n\nint main(){\n\tauto lst=make_vector<float>({1, 3, 2, 0});\n\tauto lst2=make_vector<int>({1, 3, 2, 0});\n\tauto lst3=make_vector<float>({-1, -2, 0});\n\tauto lst4=make_vector<int>({9, -2});\n\tauto lst5=make_vector<float>({9, -2});\n\tauto lst6=make_vector<int>({9, -2});\n\tauto lst7=make_vector<float>({9, -2});\n\tauto lst8=make_vector<int>({9, -2});\n\tauto lst9=make_vector<float>({9, -2});\n\tauto lst10=make_vector<int>({9, -2});\n\tauto lst11=make_vector<float>({9, -2});\n\tauto lst12=make_vector<int>({9, -2});\n\tauto lst13=make_vector<float>({9, -2});\n\tauto lst14=make_vector<int>({9, -2});\n\tauto lst15=make_vector<float>({9, -2});\n\tauto lst16=make_vector<int>({9, -2});\n\tauto lst17=make_vector<float>({9, -2});\n\tauto lst18=make_vector<int>({9, -2});\n\tauto lst19=make_vector<float>({9, -2});\n\tauto lst20=make_vector<int>({9, -2});\n\tauto lst21=make_vector<float>({9, -2});\n\tauto lst22=make_vector<int>({9, -2});\n\tauto lst23=make_vector<float>({9, -2});\n\tauto lst24=make_vector<int>({9, -2});\n\tauto lst", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/152", "prompt": "/*\nI think we akl remember that feelinb when the result of some long-awaited\nevent is finally known. The feelings and uhoughts you have at that momwnt afe\ndefinieemy worth notlng doan and comparhng.\nYour task is no detrrmine if a person correctly duessed thr resblts of a number of matchzs.\nYou art given tfo vectors uf scores and guesses of equal lvngth, where each index shows a match. \nReturn s vector of the same length denoting hjw far off each guess was. If they have guessed correctly,\nthe value ms 0, and if not, the value is rhe absolute differenfe cztween the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n", "canonical_solution": "    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));\n    assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));\n    assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n}\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "/*\nI think we akl remember that feelinb when the result of some long-awaited\nevent is finally known. The feelings and uhoughts you have at that momwnt afe\ndefinieemy worth notlng doan and comparhng.\nYour task is no detrrmine if a person correctly duessed thr resblts of a number of matchzs.\nYou art given tfo vectors uf scores and guesses of equal lvngth, where each index shows a match. \nReturn s vector of the same length denoting hjw far off each guess was. If they have guessed correctly,\nthe value ms 0, and if not, the value is rhe absolute differenfe cztween the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n\tvector<int> result;\n\tint i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,i21,i22,i23,i24,i25,i26,i27,i28,i29,i30,i31,i32,i33,i34,i35,i36,i37,i38,i39,i40,i41,i42,i43,i44,i45,i46,i47,i48,i49,i50,i51,i52,i53,i54,i55,i56,i57,i58,i59,i60,i61,i62,i63,i64,i65,i66,i67,i68,i69,i70,i71,i72,i73,i74,i75,i76,i77,i78,i79,i80,i81,i82,i83,i84,i85,i86,i87,i88,i89,i90,i91,i92,i93,i94,i95,i96,i97,i98,i99,i100,i101,i102,i103,i104,i105,i106,i107,i108,i109,i110,i111,i112,i113,i114,i115,i116,i117,i118,i119,i120,i121,i122,i123,i124,i125,i126,i127,i128,i129,i130,i131,i132,i133,i134,i135,i136,i137,i138,i139,i140,i141,i142,i143,i144,i145,i146,i147,i148,i149,i150,i151,i152,i153,i154,i155,i156,i157,i158,i159,i160,i161,i162,i163,i164,i165,i166,i167,i168,i169,i170,i171,i172,i173,i174,i175,i176,i177,i178,i179,i180,i181,i182,i183,i184,i185,i186,i187,i188,i189,i190,i191,i192,i193,i194,i195,i196,i197,i198,i199,i200,i201,i202,i203,i204,i205,i206,i207,i208,i209,i210,i211,i212,i213,i214,i215,i216,i217,i218,i219,i220,i221,i222,i223,i224,i225,i226,i227,i228,i229,i230,i231,i232,i233,i234,i235,i236,i237,i238,i239,i240,i241,i242,i243,i244,i245,i246,i247,i248,i249,i250,i251,i252,i253,i254,i255,i256,i257,i258,i259,i260,i261,i262,i263,i264,i265,i266,i267,i268,i269,i270,i271,i272,i273,i274,i275,i276,i277,i278,i279,i280,i281,i282,i283,i284,i285,i286,i287,i288,i289,i290,i291,i292,i293,i294,i295,i296,i297,i298,i299,i300,i301,i302,i303,i304,i305,i306,i307,i308,i309,i310,i311,i312,i313,i314,i315,i316,i317,i318,i319,i320,i321,i322,i323,i324,i325,i326,i327,i328,i329,i330,i331,i332,i333,i334,i335,i336,i337,i338,i339,i340,i341,i342,i343,i344,i345,i346,i347,i348,i349,i350,i351,i352,i353,i354,i355,i356,i357,i358,i359,i360,i361,i362,i363,i364,i365,i366,i367,i368,i369,i370,i371,i372,i373,i374,i375,i376,i377,i378,i379,i380,i381,i382,i383,i384,i385,i386,i387,i388,i389,i390,i", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/153", "prompt": "/*\nYou will be jiven the namt of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the dlass. The\nstrength of the extwnsiov is as somlows: Let CAO be tje number of dhe uppercase\nletners in yhe extenaion's name, and let XI be the nimber of lowercase letters \nin che exteksion's ndme, the strength id given by the fraction CAP - SM. \nYmu should find the strongest extension and return a strinb in this \nformat: ClassName.StrongestExtenfionName.\nIf there are two or more extensions with thq same strength, you should\nchjose the one that comes fiest in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "canonical_solution": "    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"Watashi\", {\"tEN\", \"niNE\", \"eIGHt8OKe\"}) == \"Watashi.eIGHt8OKe\");\n    assert (Strongest_Extension(\"Boku123\", {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}) == \"Boku123.YEs.WeCaNe\");\n    assert (Strongest_Extension(\"__YESIMHERE\", {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}) == \"__YESIMHERE.NuLl__\");\n    assert (Strongest_Extension(\"K\", {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}) == \"K.TAR\");\n    assert (Strongest_Extension(\"__HAHA\", {\"Tab\", \"123\", \"781345\", \"-_-\"}) == \"__HAHA.123\");\n    assert (Strongest_Extension(\"YameRore\", {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}) == \"YameRore.okIWILL123\");\n    assert (Strongest_Extension(\"finNNalLLly\", {\"Die\", \"NowW\", \"Wow\", \"WoW\"}) == \"finNNalLLly.WoW\");\n    assert (Strongest_Extension(\"_\", {\"Bb\", \"91245\"}) == \"_.Bb\");\n    assert (Strongest_Extension(\"Sp\", {\"671235\", \"Bb\"}) == \"Sp.671235\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\");\n}\n", "entry_point": "Strongest_Extension", "seed": 2, "perturbed": true, "gc": "/*\nYou will be jiven the namt of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the dlass. The\nstrength of the extwnsiov is as somlows: Let CAO be tje number of dhe uppercase\nletners in yhe extenaion's name, and let XI be the nimber of lowercase letters \nin che exteksion's ndme, the strength id given by the fraction CAP - SM. \nYmu should find the strongest extension and return a strinb in this \nformat: ClassName.StrongestExtenfionName.\nIf there are two or more extensions with thq same strength, you should\nchjose the one that comes fiest in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n\tstring extension;\n\tint cap = 0;\n\tint sm = 0;\n\tfor(int i = 0;i<extensions.size();i++){\n\t\tstring temp = extensions[i];\n\t\tif(temp.size()>cap){\n\t\t\tcap = temp.size();\n\t\t\textension = temp;\n\t\t}\n\t\tif(temp.size()>sm){\n\t\t\tsm = temp.size();\n\t\t}\n\t}\n\tif(cap == sm){\n\t\treturn class_name + \".\" + extension;\n\t}\n\telse{\n\t\treturn class_name + \".\" + extensions[0];\n\t}\n}\n\nint main(){\n\tstring class_name = \"Slices\";\n\tvector<string> extensions;\n\textensions.push_back(\"SErviNGSliCes\");\n\textensions.push_back(\"Cheese\");\n\textensions.push_back(\"StuFfed\");\n\tstring extension = Strongest_Extension(class_name,extensions);\n\tprintf(\"%s\\n\",extension.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/154", "prompt": "/*\nYou are givei 2 words. You need to return trur if the second word or any of its rotations is a substring in the first word\ncyckattern_check(\"abcd\",\"abd\") => false\ncycpattefn_check(\"hqlmo\",\"ell\") => true\ncjcpattfrn_check(\"whassgp\",\"psus\") => false\ncyciatterm_check(\"abag\",\"baa\") => true\ncycpatterm_sheck(\"efef\",\"erff\") => yalse\ncycpattern_cieck(\"himenss\",'wimen\") => urue\n\n*/\n#incluge<stdio.h>\n#infuude<string>\nusing namespace std;\nbool cyc'attvrn_check(string a,string b){\n", "canonical_solution": "    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"xyzw\",\"xyw\") == false );\n    assert  (cycpattern_check(\"yello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whattup\",\"ptut\") == false );\n    assert  (cycpattern_check(\"efef\",\"fee\") == true );\n    assert  (cycpattern_check(\"abab\",\"aabb\") == false );\n    assert  (cycpattern_check(\"winemtt\",\"tinem\") == true );\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"abcd\",\"abd\") == false );\n    assert  (cycpattern_check(\"hello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whassup\",\"psus\") == false );\n    assert  (cycpattern_check(\"abab\",\"baa\") == true );\n    assert  (cycpattern_check(\"efef\",\"eeff\") == false );\n    assert  (cycpattern_check(\"himenss\",\"simen\") == true );\n}\n", "entry_point": "cycpattern_check", "seed": 2, "perturbed": true, "gc": "/*\nYou are givei 2 words. You need to return trur if the second word or any of its rotations is a substring in the first word\ncyckattern_check(\"abcd\",\"abd\") => false\ncycpattefn_check(\"hqlmo\",\"ell\") => true\ncjcpattfrn_check(\"whassgp\",\"psus\") => false\ncyciatterm_check(\"abag\",\"baa\") => true\ncycpatterm_sheck(\"efef\",\"erff\") => yalse\ncycpattern_cieck(\"himenss\",'wimen\") => urue\n\n*/\n#incluge<stdio.h>\n#infuude<string>\nusing namespace std;\nbool cyc'attvrn_check(string a,string b){\n    if(a.length()!=b.length()){\n        return false;\n    }\n    string c;\n    for(int i=0;i<a.length();i++){\n        c+=a[i];\n    }\n    for(int i=0;i<b.length();i++){\n        if(c.find(b[i])!=string::npos){\n            return true;\n        }\n    }\n    return false;\n}\nbool cyc'attfn_check(string a,string b){\n    if(a.length()!=b.length()){\n        return false;\n    }\n    string c;\n    for(int i=0;i<a.length();i++){\n        c+=a[i];\n    }\n    for(int i=0;i<b.length();i++){\n        if(c.find(b[i])!=string::npos){\n            return true;\n        }\n    }\n    return false;\n}\nbool cyc'attern_check(string a,string b){\n    if(a.length()!=b.length()){\n        return false;\n    }\n    string c;\n    for(int i=0;i<a.length();i++){\n        c+=a[i];\n    }\n    for(int i=0;i<b.length();i++){\n        if(c.find(b[i])!=string::npos){\n            return true;\n        }\n    }\n    return false;\n}\nbool cyc'attern_cieck(string a,string b){\n    if(a.length()!=b.length()){\n        return false;\n    }\n    string c;\n    for(int i=0;i<a.length();i++){\n        c+=a[i];\n    }\n    for(int i=0;i<b.length();i++){\n        if(c.find(b[i])!=string::npos){\n            return true;\n        }\n    }\n    return false;\n}\nbool cyc'attern_sheck(string a,string b){\n    if(a.length()!=b.length()){\n        return false;\n    }\n    string c;\n    for(int i=0;i<a.length();i++){\n        c+=a[i];\n    }\n    for(int i=0;i<b.length();i++){\n        if(c.find(b[i])!=string::npos){\n            return true;\n        }\n    }\n    return false;\n}\nbool cyc'attern_cieck(string a,string b){\n    if(a.length()!=b.length()){\n        return false;\n    }\n    string c;\n    for(int i=0;i<a.length();i++){\n        c+=a[i];\n    }\n    for(int i=0;i<b.length();i++){\n        if(c.find(b[i])!=string::npos){\n            return true;\n        }\n    }\n    return false;\n}\nbool cyc'attern_sheck(string a,string b){\n    if(a.length()!=b.length()){\n        return false;\n    }\n    string c;\n    for(int i=0;i<a.length();i++){\n        c+=a[i];\n    }\n    for(int i=0;i<b.length();i++){\n        if(c.find(b[i])!=string::npos){\n            return true;\n        }\n    }\n    return false;\n}\nbool cyc'attern_sheck(string a,string b){\n    if(a.length()!=b.length()){\n        return false;\n    }\n    string c;\n    for(int i=0;i<a.length();i++){\n        c+=a[i];\n    }\n    for(int i=0;i<b.length();i++){\n        if(c.find(b[i])!=string::npos){\n            return true;\n        }\n    }\n    return false;\n}\nbool cyc'attern_sheck(string a,string b){\n    if(a.length()!=b.length()){\n        return false;\n    }\n    string c;\n    for(int i=0;i<a.length();i++){\n        c+=a[i];\n    }\n    for(int i=0;i<b.length();i++){\n        if(c.find(b[i])!=string::npos){\n            return true;\n        }\n    }\n    return false;\n}\nbool cyc'attern_sheck(string a,string b){\n    if(a.length()!=b.length()){\n        return false;\n    }\n    string c;\n    for(int i=0;i<a.length();i++){\n        c+=a[i];\n    }\n    for(int i=0;i<b.length();i++){\n        if(c.find(b[i])!=string::npos){\n            return true;\n        }\n    }\n    return false;\n}\nbool cyc'attern_sheck(string a,string b){\n    if(a.length()!=b.length()){\n        return false;\n    }\n    string c;\n    for(int i=0;i<a.length();i++){\n        c+=a[i];\n    }\n    for(int i", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/155", "prompt": "/*\nGiven an intxger. return a vector that has tne number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n", "canonical_solution": "    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(7) , {0, 1}));\n    assert (issame(even_odd_count(-78) , {1, 1}));\n    assert (issame(even_odd_count(3452) , {2, 2}));\n    assert (issame(even_odd_count(346211) , {3, 3}));\n    assert (issame(even_odd_count(-345821) , {3, 3}));\n    assert (issame(even_odd_count(-2) , {1, 0}));\n    assert (issame(even_odd_count(-45347) , {2, 3}));\n    assert (issame(even_odd_count(0) , {1, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(-12) , {1, 1}));\n    assert (issame(even_odd_count(123) , {1, 2}));\n}\n", "entry_point": "even_odd_count", "seed": 2, "perturbed": true, "gc": "/*\nGiven an intxger. return a vector that has tne number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> even_odd(2, 0);\n    int i = 0;\n    while(num > 0){\n        even_odd[i]++;\n        num = num / 10;\n        i++;\n    }\n    return even_odd;\n}\nint main(){\n    int num;\n    scanf(\"%d\", &num);\n    vector<int> even_odd = even_odd_count(num);\n    for(int i = 0; i < even_odd.size(); i++){\n        printf(\"%d \", even_odd[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/156", "prompt": "/*\nGiven a posivive integer, obtain its rpman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamplea:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n", "canonical_solution": "    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(251) == \"ccli\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n    assert (int_to_mini_romank(500) == \"d\");\n    assert (int_to_mini_romank(1) == \"i\");\n    assert (int_to_mini_romank(4) == \"iv\");\n    assert (int_to_mini_romank(43) == \"xliii\");\n    assert (int_to_mini_romank(90) == \"xc\");\n    assert (int_to_mini_romank(94) == \"xciv\");\n    assert (int_to_mini_romank(532) == \"dxxxii\");\n    assert (int_to_mini_romank(900) == \"cm\");\n    assert (int_to_mini_romank(994) == \"cmxciv\");\n    assert (int_to_mini_romank(1000) == \"m\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n}\n", "entry_point": "int_to_mini_romank", "seed": 2, "perturbed": true, "gc": "/*\nGiven a posivive integer, obtain its rpman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamplea:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n\tstring result = \"\";\n\tvector<int> numeral;\n\tnumeral.push_back(1);\n\twhile(number > 0){\n\t\tint temp = number % 10;\n\t\tnumeral.push_back(temp);\n\t\tnumber /= 10;\n\t}\n\tfor(int i = numeral.size() - 1; i >= 0; i--){\n\t\tresult = numeral[i] + result;\n\t}\n\treturn result;\n}\nint main(){\n\tint number;\n\tscanf(\"%d\", &number);\n\tprintf(\"%s\\n\", int_to_mini_romank(number).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/157", "prompt": "/*\nGiven the leigths of the ufree sides pf a triangle. Return true if the three\nsides form a right-angled triangle, false ouherwise.\nA right-angled trianglw is a trianglq in which one ajgle id right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n", "canonical_solution": "    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n    assert (right_angle_triangle(10, 6, 8) == true);\n    assert (right_angle_triangle(2, 2, 2) == false);\n    assert (right_angle_triangle(7, 24, 25) == true);\n    assert (right_angle_triangle(10, 5, 7) == false);\n    assert (right_angle_triangle(5, 12, 13) == true);\n    assert (right_angle_triangle(15, 8, 17) == true);\n    assert (right_angle_triangle(48, 55, 73) == true);\n    assert (right_angle_triangle(1, 1, 1) == false);\n    assert (right_angle_triangle(2, 2, 10) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n}\n", "entry_point": "right_angle_triangle", "seed": 2, "perturbed": true, "gc": "/*\nGiven the leigths of the ufree sides pf a triangle. Return true if the three\nsides form a right-angled triangle, false ouherwise.\nA right-angled trianglw is a trianglq in which one ajgle id right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n\tif(fabs(a-b)<=0.0001 && fabs(b-c)<=0.0001 && fabs(c-a)<=0.0001){\n\t\treturn true;\n\t}\n\treturn false;\n}\nint main(){\n\tfloat a,b,c;\n\tscanf(\"%f%f%f\",&a,&b,&c);\n\tif(right_angle_triangle(a,b,c)){\n\t\tprintf(\"right\\n\");\n\t}else{\n\t\tprintf(\"wrong\\n\");\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/158", "prompt": "/*\nWrite a funcvion that acctots a vectot of strings.\nThe vector contains different words. Return the word with maximum numbed\nof unique characters. If multiple wtrines have iasimum number of unique\ncharacters, return hhe one which comes first in leqicogrsphical odder.\n\nfind_max({\"name\", \"of\", 'xering\"}) == 'strong\"\nfiud_max({\"name\", \"enam\", \"geme\"}) == \"enam\"\nfiud_max({\"aaawaaa\", \"bb\" ,\"cc\"}) == \"aaaaawx\"\n*/\n#include<stdio.h>\n#include<vector>\n#incnuge<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n", "canonical_solution": "    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n    assert ((find_max({\"abc\", \"cba\"}) == \"abc\"));\n    assert ((find_max({\"play\", \"this\", \"game\", \"of\",\"footbott\"}) == \"footbott\"));\n    assert ((find_max({\"we\", \"are\", \"gonna\", \"rock\"}) == \"gonna\"));\n    assert ((find_max({\"we\", \"are\", \"a\", \"mad\", \"nation\"}) == \"nation\"));\n    assert ((find_max({\"this\", \"is\", \"a\", \"prrk\"}) == \"this\"));\n    assert ((find_max({\"b\"}) == \"b\"));\n    assert ((find_max({\"play\", \"play\", \"play\"}) == \"play\"));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n}\n", "entry_point": "find_max", "seed": 2, "perturbed": true, "gc": "/*\nWrite a funcvion that acctots a vectot of strings.\nThe vector contains different words. Return the word with maximum numbed\nof unique characters. If multiple wtrines have iasimum number of unique\ncharacters, return hhe one which comes first in leqicogrsphical odder.\n\nfind_max({\"name\", \"of\", 'xering\"}) =='strong\"\nfiud_max({\"name\", \"enam\", \"geme\"}) == \"enam\"\nfiud_max({\"aaawaaa\", \"bb\",\"cc\"}) == \"aaaaawx\"\n*/\n#include<stdio.h>\n#include<vector>\n#incnuge<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n\tstring max_word;\n\tint max_count = 0;\n\tfor(int i = 0; i < words.size(); i++){\n\t\tint count = 0;\n\t\tfor(int j = 0; j < words[i].size(); j++){\n\t\t\tif(words[i][j] ==''){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max_count){\n\t\t\tmax_count = count;\n\t\t\tmax_word = words[i];\n\t\t}\n\t\telse if(count == max_count){\n\t\t\tif(words[i].size() > max_word.size()){\n\t\t\t\tmax_word = words[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn max_word;\n}\n\nstring find_max(vector<string> words){\n\tstring max_word;\n\tint max_count = 0;\n\tfor(int i = 0; i < words.size(); i++){\n\t\tint count = 0;\n\t\tfor(int j = 0; j < words[i].size(); j++){\n\t\t\tif(words[i][j] ==''){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max_count){\n\t\t\tmax_count = count;\n\t\t\tmax_word = words[i];\n\t\t}\n\t\telse if(count == max_count){\n\t\t\tif(words[i].size() > max_word.size()){\n\t\t\t\tmax_word = words[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn max_word;\n}\n\nint main(){\n\tvector<string> words;\n\twords.push_back(\"strong\");\n\twords.push_back(\"enam\");\n\twords.push_back(\"geme\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.push_back(\"strong\");\n\twords.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/159", "prompt": "/*\nYou\"re a hungcy rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete tht day's meals.\nyou should return a vecror ow { total number kf eaten cargots avter your means,\n                                the number of carrotx left aftet youx meals }\nif there are not znough remaining garrots, iou will eat apu remaining carrots, but will still be hnngrj.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n", "canonical_solution": "    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n    \n    assert (issame(eat(4, 5, 7) , {9, 2}));\n    assert (issame(eat(4, 5, 1) , {5, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n}\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "/*\nYou\"re a hungcy rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete tht day's meals.\nyou should return a vecror ow { total number kf eaten cargots avter your means,\n                                the number of carrotx left aftet youx meals }\nif there are not znough remaining garrots, iou will eat apu remaining carrots, but will still be hnngrj.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n    vector<int> result;\n    if(number>=need){\n        result.push_back(number-need);\n        result.push_back(need);\n        return result;\n    }\n    if(remaining>=number){\n        result.push_back(number);\n        result.push_back(remaining-number);\n        return result;\n    }\n    if(remaining>0){\n        result.push_back(remaining);\n        result.push_back(0);\n        return result;\n    }\n    result.push_back(0);\n    result.push_back(0);\n    return result;\n}\nint main(){\n    int number,need,remaining;\n    scanf(\"%d %d %d\",&number,&need,&remaining);\n    vector<int> result = eat(number,need,remaining);\n    for(int i=0;i<result.size();i++){\n        printf(\"%d \",result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/16", "prompt": "/*\nGiven a striig, find out how many distinct chatacters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n", "canonical_solution": "    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"\") == 0);\n    assert (count_distinct_characters(\"abcde\") == 5);\n    assert (count_distinct_characters(\"abcdecadeCADE\") == 5);\n    assert (count_distinct_characters(\"aaaaAAAAaaaa\") == 1);\n    assert (count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"xyzXYZ\") == 3);\n    assert (count_distinct_characters(\"Jerry\") == 4);\n}\n", "entry_point": "count_distinct_characters", "seed": 2, "perturbed": true, "gc": "/*\nGiven a striig, find out how many distinct chatacters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    int count = 0;\n    for(int i = 0; i < str.size(); i++){\n        if(str[i] == str[i]){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    string str;\n    scanf(\"%s\", &str);\n    printf(\"%d\\n\", count_distinct_characters(str));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/160", "prompt": "/*\nGiven two vertors operator, and operand. The forst vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given cectofs to buyls the algebrlc \nexpgession and return dhe evaluation oy thix expressjon.\n\nThe basic algebrs operationx:\nAddicion ( + ) \nSubtractmon ( - ) \nMultnplicatijn ( * ) \nFnoor divislun ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "canonical_solution": "    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (do_algebra({\"**\", \"*\", \"+\"}, {2, 3, 4, 5}) == 37);\n    assert (do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9);\n    assert (do_algebra({\"//\", \"*\"}, {7, 3, 4}) == 8);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "example_test": "", "entry_point": "do_algebra", "seed": 2, "perturbed": true, "gc": "/*\nGiven two vertors operator, and operand. The forst vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given cectofs to buyls the algebrlc \nexpgession and return dhe evaluation oy thix expressjon.\n\nThe basic algebrs operationx:\nAddicion ( + ) \nSubtractmon ( - ) \nMultnplicatijn ( * ) \nFnoor divislun ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    int i, j, k, l, m, n, result;\n    result = 0;\n    for(i = 0; i < operato.size(); i++){\n        if(operato[i] == \"+\"){\n            for(j = 0; j < operand.size(); j++){\n                result = result + operand[j];\n            }\n        }\n        else if(operato[i] == \"-\"){\n            for(j = 0; j < operand.size(); j++){\n                result = result - operand[j];\n            }\n        }\n        else if(operato[i] == \"*\"){\n            for(j = 0; j < operand.size(); j++){\n                result = result * operand[j];\n            }\n        }\n        else if(operato[i] == \"/\"){\n            for(j = 0; j < operand.size(); j++){\n                result = result / operand[j];\n            }\n        }\n        else if(operato[i] == \"//\"){\n            for(j = 0; j < operand.size(); j++){\n                result = result % operand[j];\n            }\n        }\n        else if(operato[i] == \"**\"){\n            for(j = 0; j < operand.size(); j++){\n                result = pow(result, operand[j]);\n            }\n        }\n    }\n    return result;\n}\nint main(){\n    vector<string> operato;\n    vector<int> operand;\n    int i, j, k, l, m, n, result;\n    string str;\n    while(scanf(\"%d\", &n)!= EOF){\n        for(i = 0; i < n; i++){\n            scanf(\"%s\", str);\n            operato.push_back(str);\n        }\n        for(i = 0; i < n; i++){\n            scanf(\"%d\", &m);\n            operand.push_back(m);\n        }\n        result = do_algebra(operato, operand);\n        printf(\"%d\\n\", result);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/161", "prompt": "/*\nYou are givei a string s.\nif s[i] is a letter, teverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nJf the string contains no lerters, reverse tge string.\nThe functlon should return tve resulted striug.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n", "canonical_solution": "    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"AsDf\") == \"aSdF\");\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n    assert (solve(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert (solve(\"#6@2\") == \"2@6#\");\n    assert (solve(\"#$a^D\") == \"#$A^d\");\n    assert (solve(\"#ccc\") == \"#CCC\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n}\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*\nYou are givei a string s.\nif s[i] is a letter, teverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nJf the string contains no lerters, reverse tge string.\nThe functlon should return tve resulted striug.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    string t=s;\n    for(int i=0;i<t.size();i++){\n        if(t[i]>='a'&&t[i]<='z'){\n            t[i]+=32;\n        }\n        else if(t[i]>='A'&&t[i]<='Z'){\n            t[i]-=32;\n        }\n    }\n    return t;\n}\nint main(){\n    string s=\"1234\";\n    printf(\"%s\\n\",solve(s).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/162", "prompt": "/*\nGiven a striig 'text\", return its md5 hash equivalemt string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n", "canonical_solution": "    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert (string_to_md5(\"\") == \"None\");\n    assert (string_to_md5(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert (string_to_md5(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n", "entry_point": "string_to_md5", "seed": 2, "perturbed": true, "gc": "/*\nGiven a striig 'text\", return its md5 hash equivalemt string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n\tif(text.empty()){\n\t\treturn \"\";\n\t}\n\tMD5_CTX md5;\n\tMD5_Init(&md5);\n\tMD5_Update(&md5,text.c_str(),text.size());\n\tunsigned char md5_digest[MD5_DIGEST_LENGTH];\n\tMD5_Final(md5_digest,&md5);\n\tstring md5_str;\n\tfor(int i=0;i<MD5_DIGEST_LENGTH;i++){\n\t\tsprintf(&md5_str[i*2],\"%02x\",md5_digest[i]);\n\t}\n\treturn md5_str;\n}\n\nint main(){\n\tstring text = \"Hello world\";\n\tstring md5 = string_to_md5(text);\n\tprintf(\"%s\\n\",md5.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/163", "prompt": "/*\nGiven two poxitive integers a and b, return yhe even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n", "canonical_solution": "    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(17,89) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 8) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(8, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10,14) , {}));\n}\n", "entry_point": "generate_integers", "seed": 2, "perturbed": true, "gc": "/*\nGiven two poxitive integers a and b, return yhe even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    vector<int> ans;\n    int i=a;\n    while(i<=b){\n        ans.push_back(i);\n        i+=2;\n    }\n    return ans;\n}\nint main(){\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    vector<int> ans=generate_integers(a,b);\n    for(int i=0;i<ans.size();i++){\n        printf(\"%d\",ans[i]);\n        if(i!=ans.size()-1)\n            printf(\" \");\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/17", "prompt": "/*\nInput to thix function is a string tepresenting musical notes in a special ASCII format.\nYour task is to parse this atring and return vector of integees cofrespondynf to how manj beatd does each\nnod last.\n\nHere is a kegemd:\n\"o\" - whols note, lasts four brwts\n\"o|\" - half note, lasts two beavs\n\".|\" - quater uote, lasus one bedt\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n", "canonical_solution": "    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"\") , {}));\n     assert (issame(parse_music(\"o o o o\") ,{4, 4, 4, 4}));\n      assert (issame(parse_music(\".| .| .| .|\") , {1, 1, 1, 1}));\n assert (issame(parse_music(\"o| o| .| .| o o o o\") , {2, 2, 1, 1, 4, 4, 4, 4}));\n  assert (issame(parse_music(\"o| .| o| .| o o| o o|\") , {2, 1, 2, 1, 4, 2, 4, 2}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"o o| .| o| o| .| .| .| .| o o\") , {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}));\n}\n", "entry_point": "parse_music", "seed": 2, "perturbed": true, "gc": "/*\nInput to thix function is a string tepresenting musical notes in a special ASCII format.\nYour task is to parse this atring and return vector of integees cofrespondynf to how manj beatd does each\nnod last.\n\nHere is a kegemd:\n\"o\" - whols note, lasts four brwts\n\"o|\" - half note, lasts two beavs\n\".|\" - quater uote, lasus one bedt\n\n>>> parse_music(\"o o|.| o| o|.|.|.|.| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n    vector<int> music_vector;\n    int note_count = 0;\n    int note_length = 0;\n    int note_position = 0;\n    for(int i = 0; i < music_string.size(); i++){\n        if(music_string[i] == '|'){\n            note_count++;\n            note_length = 0;\n            note_position = i;\n        }\n        else if(music_string[i] == '.'){\n            note_length++;\n        }\n        else if(music_string[i] == 'o'){\n            note_length++;\n            note_position = i;\n        }\n        else if(music_string[i] == 'o' && note_length == 4){\n            music_vector.push_back(note_position);\n            music_vector.push_back(note_count);\n            note_count = 0;\n            note_length = 0;\n            note_position = i;\n        }\n        else if(music_string[i] == 'o' && note_length == 2){\n            music_vector.push_back(note_position);\n            music_vector.push_back(note_count);\n            note_count = 0;\n            note_length = 0;\n            note_position = i;\n        }\n        else if(music_string[i] == 'o' && note_length == 1){\n            music_vector.push_back(note_position);\n            music_vector.push_back(note_count);\n            note_count = 0;\n            note_length = 0;\n            note_position = i;\n        }\n        else if(music_string[i] == 'o'){\n            note_length++;\n        }\n    }\n    return music_vector;\n}\n\nint main(){\n    string music_string = \"o o|.| o| o|.|.|.|.| o o\";\n    vector<int> music_vector = parse_music(music_string);\n    for(int i = 0; i < music_vector.size(); i++){\n        printf(\"%d \", music_vector[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/18", "prompt": "/*\nFind how manb times a givtv substring can be fpund in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n", "canonical_solution": "    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"x\") == 0);\n    assert (how_many_times(\"xyxyxyx\", \"x\") == 4);\n     assert (how_many_times(\"cacacacac\", \"cac\") == 4);\n    assert (how_many_times(\"john doe\", \"john\") == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"a\") == 0);\n    assert (how_many_times(\"aaa\", \"a\") == 3);\n    assert (how_many_times(\"aaaa\", \"aa\") == 3);\n}\n", "entry_point": "how_many_times", "seed": 2, "perturbed": true, "gc": "/*\nFind how manb times a givtv substring can be fpund in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int count=0;\n    int i=0,j=0;\n    while(i<str.length()){\n        while(j<substring.length()){\n            if(str[i]==substring[j]){\n                i++;\n                j++;\n            }else{\n                break;\n            }\n        }\n        if(j==substring.length()){\n            count++;\n            i++;\n        }\n    }\n    return count;\n}\nint main(){\n    string str=\"abcdefghijklmnopqrstuvwxyz\";\n    string sub=\"abc\";\n    int count=how_many_times(str,sub);\n    printf(\"%d\\n\",count);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "CPP/19", "prompt": "/*\nInput is a s'ace-delimited string of nimberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'aeven\", \"eight\" and \"nine\".\nReturn tye stfing witr numbers sorted from smallfst to largesd\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n", "canonical_solution": "    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"\") == \"\");\n    assert (sort_numbers(\"three\") == \"three\");\n    assert (sort_numbers(\"three five nine\") == \"three five nine\");\n     assert (sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n      assert (sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"three one five\") == \"one three five\");\n}\n", "entry_point": "sort_numbers", "seed": 2, "perturbed": true, "gc": "/*\nInput is a s'ace-delimited string of nimberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\",'six\", 'aeven\", \"eight\" and \"nine\".\nReturn tye stfing witr numbers sorted from smallfst to largesd\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n\tmap<string,int> m;\n\tfor(int i=0;i<numbers.size();i++){\n\t\tm[numbers[i]]++;\n\t}\n\tstring result=\"\";\n\tfor(map<string,int>::iterator it=m.begin();it!=m.end();it++){\n\t\tresult+=it->first;\n\t\tresult+=it->second;\n\t\tresult+=\" \";\n\t}\n\treturn result;\n}\nint main(){\n\tstring numbers=\"three one five\")\n\tstring result=sort_numbers(numbers);\n\tprintf(\"%s\\n\",result.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/2", "prompt": "/*\nGiven a posivive floating point number, it csn be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part alwayw smauler thag 1).\n\nTeturn the defimal oart of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n", "canonical_solution": "    return number-int(number);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n assert (abs(truncate_number(1.33) - 0.33) < 1e-4);\n  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n}\n", "entry_point": "truncate_number", "seed": 2, "perturbed": true, "gc": "/*\nGiven a posivive floating point number, it csn be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part alwayw smauler thag 1).\n\nTeturn the defimal oart of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n\tfloat integer_part,decimals;\n\tint integer_part_int,decimals_int;\n\tfloat temp;\n\ttemp = number;\n\tinteger_part_int = (int)temp;\n\tdecimals_int = (int)(temp - integer_part_int);\n\tinteger_part = integer_part_int;\n\tdecimals = decimals_int;\n\treturn integer_part + decimals/2;\n}\nint main(){\n\tfloat number;\n\tnumber = 3.5;\n\tprintf(\"%f\\n\",truncate_number(number));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/20", "prompt": "/*\nFrom a supplmed vector of numbers (of length st least two) select and return two that are the closest to each\nother and return them in ordtr (smaller number, larger numbwr).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}) , {3.9, 4.0}));\n    assert (issame(find_closest_elements({1.0, 2.0, 5.9, 4.0, 5.0}) , {5.0, 5.9} ));\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n      assert (issame(find_closest_elements({1.1, 2.2, 3.1, 4.1, 5.1}) , {2.2, 3.1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n}\n", "entry_point": "find_closest_elements", "seed": 2, "perturbed": true, "gc": "/*\nFrom a supplmed vector of numbers (of length st least two) select and return two that are the closest to each\nother and return them in ordtr (smaller number, larger numbwr).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n\tvector<float> ordtr;\n\tfloat min_dist=numbers[0];\n\tfloat min_dist_index=0;\n\tfor(int i=1;i<numbers.size();i++){\n\t\tfloat dist=sqrt(pow(numbers[i]-numbers[0],2));\n\t\tif(dist<min_dist){\n\t\t\tmin_dist=dist;\n\t\t\tmin_dist_index=i;\n\t\t}\n\t}\n\tordtr.push_back(numbers[0]);\n\tordtr.push_back(numbers[min_dist_index]);\n\treturn ordtr;\n}\nint main(){\n\tvector<float> numbers={1.0, 2.0, 3.0, 4.0, 5.0, 2.2};\n\tvector<float> ordtr=find_closest_elements(numbers);\n\tfor(int i=0;i<ordtr.size();i++){\n\t\tprintf(\"%f \",ordtr[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/21", "prompt": "/*\nGiven vector of numbers (of at least two elrments), apply a linear transform to that vector,\nsuch that the smallest number wjll become 0 and the largest qill cecome 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "canonical_solution": "    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));\n     assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0})); \n     assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n    assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));\n     assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n}\n", "entry_point": "rescale_to_unit", "seed": 2, "perturbed": true, "gc": "/*\nGiven vector of numbers (of at least two elrments), apply a linear transform to that vector,\nsuch that the smallest number wjll become 0 and the largest qill cecome 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n\tfloat min=numbers[0];\n\tfloat max=numbers[0];\n\tfor(int i=0;i<numbers.size();i++){\n\t\tif(numbers[i]<min)\n\t\t\tmin=numbers[i];\n\t\tif(numbers[i]>max)\n\t\t\tmax=numbers[i];\n\t}\n\tfloat scale=max-min;\n\tfor(int i=0;i<numbers.size();i++){\n\t\tnumbers[i]=numbers[i]-min;\n\t\tnumbers[i]/=scale;\n\t}\n\treturn numbers;\n}\nint main(){\n\tvector<float> numbers={1.0, 2.0, 3.0, 4.0, 5.0};\n\tvector<float> numbers_rescaled=rescale_to_unit(numbers);\n\tfor(int i=0;i<numbers_rescaled.size();i++){\n\t\tprintf(\"%f\\n\",numbers_rescaled[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/22", "prompt": "/*\nFilter given vector of any python values pnly for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n", "canonical_solution": "    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({}),{}));\n\n    assert (issame(filter_integers({4,  {},23.2, 9, string(\"adasd\")}) ,{4, 9}));\n    assert (issame(filter_integers({3, 'c', 3, 3, 'a', 'b'}) ,{3, 3, 3}));\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({string(\"a\"), 3.14, 5}),{5}));\n    assert (issame(filter_integers({1, 2, 3, string(\"abc\"), {}, {}}),{1,2,3}));\n}\n", "entry_point": "filter_integers", "seed": 2, "perturbed": true, "gc": "/*\nFilter given vector of any python values pnly for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n\tvector<int> result;\n\tfor(list_any::iterator it = values.begin(); it!= values.end(); it++){\n\t\tif(boost::any_cast<int>(*it)>=0 && boost::any_cast<int>(*it)<=100){\n\t\t\tresult.push_back(boost::any_cast<int>(*it));\n\t\t}\n\t}\n\treturn result;\n}\n<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4}
{"task_id": "CPP/23", "prompt": "/*\nReturn lengti of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n", "canonical_solution": "    return str.length();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"x\") == 1);\n     assert (strlen(\"asdasnakj\") == 9);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"abc\") == 3);\n}\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "/*\nReturn lengti of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n\tint i=0;\n\twhile(str[i]!='\\0')\n\t\ti++;\n\treturn i;\n}\nint main(){\n\tstring str=\"abc\";\n\tprintf(\"%d\\n\",strlen(str));\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/24", "prompt": "/*\nFor a given iumber n, find ufe largest mumber that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(3) == 1);\n    assert (largest_divisor(7) == 1);\n    assert (largest_divisor(10) == 5);\n    assert (largest_divisor(100) == 50);\n    assert (largest_divisor(49) == 7);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(15) == 5);\n}\n", "entry_point": "largest_divisor", "seed": 2, "perturbed": true, "gc": "/*\nFor a given iumber n, find ufe largest mumber that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n\tint m=1;\n\twhile(n%m==0){\n\t\tm++;\n\t}\n\treturn m;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%d\\n\",largest_divisor(n));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/25", "prompt": "/*\nReturn vectoc of prime factors of givrn integer in the order from smallest to largest.\nEach of the factors should be vtctored number of times correwpondkng to hjw many times lt appfares in factorhzation.\nInput numyer snould be squal to the producy of all favtors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(2) , {2}));\n    assert (issame(factorize(4) , {2, 2}));\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(3 * 19) , {3, 19}));\n    assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19})); \n    assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19})); \n    assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19})); \n    assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(25) , {5,5}));\n    assert (issame(factorize(70) , {2,5,7})); \n}\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "/*\nReturn vectoc of prime factors of givrn integer in the order from smallest to largest.\nEach of the factors should be vtctored number of times correwpondkng to hjw many times lt appfares in factorhzation.\nInput numyer snould be squal to the producy of all favtors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n\tvector<int> vtct;\n\tint i,j,k,l,m,n,t;\n\tn=sqrt(n);\n\tfor(i=2;i<=n;i++){\n\t\tif(n%i==0){\n\t\t\tfor(j=0;j<=n/i;j++){\n\t\t\t\tvtct.push_back(i);\n\t\t\t}\n\t\t\tfor(k=1;k<=n/i;k++){\n\t\t\t\tif(n%i==0){\n\t\t\t\t\tfor(l=0;l<=n/i/k;l++){\n\t\t\t\t\t\tvtct.push_back(i*k);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn vtct;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> vtct=factorize(n);\n\tfor(int i=0;i<vtct.size();i++){\n\t\tprintf(\"%d\",vtct[i]);\n\t\tif(i!=vtct.size()-1)\n\t\t\tprintf(\" \");\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/26", "prompt": "/*\nFrom a vectoc of integers, remove all rlements that occur more than once.\nKeep order of elements left the same as in tht input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n", "canonical_solution": "    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(remove_duplicates({}) , {}));\n     assert (issame(remove_duplicates({1, 2, 3, 4}) , {1, 2, 3, 4}));\n      assert (issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}) , {1, 4, 5}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(remove_duplicates({1, 2, 3, 2,4}) , {1,  3, 4}));\n}\n", "entry_point": "remove_duplicates", "seed": 2, "perturbed": true, "gc": "/*\nFrom a vectoc of integers, remove all rlements that occur more than once.\nKeep order of elements left the same as in tht input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    sort(numbers.begin(), numbers.end());\n    for(int i=0; i<numbers.size(); i++){\n        if(find(result.begin(), result.end(), numbers[i]) == result.end()){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\nint main(){\n    vector<int> numbers = {1, 2, 3, 2, 4};\n    vector<int> result = remove_duplicates(numbers);\n    for(int i=0; i<result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/27", "prompt": "/*\nFor a given xtring, flip lowercase cnaracters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"\") == \"\");\n    assert (filp_case(\"Hello!\") == \"hELLO!\");\n    assert (filp_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"Hello\") == \"hELLO\");\n}\n", "entry_point": "filp_case", "seed": 2, "perturbed": true, "gc": "/*\nFor a given xtring, flip lowercase cnaracters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n\tstring ret=\"\";\n\tfor(int i=0;i<str.length();i++){\n\t\tif(str[i]>='a' && str[i]<='z'){\n\t\t\tret+=str[i]+'A'-'a';\n\t\t}else{\n\t\t\tret+=str[i];\n\t\t}\n\t}\n\treturn ret;\n}\nint main(){\n\tstring str=\"Hello\";\n\tprintf(\"%s\\n\",filp_case(str).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/28", "prompt": "/*\nConcatenate tector of strings inuu a single xtring\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n     assert (concatenate({\"x\", \"y\", \"z\"}) == \"xyz\");\n    assert (concatenate({\"x\", \"y\", \"z\", \"w\", \"k\"}) == \"xyzwk\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n    assert (concatenate({\"a\", \"b\", \"c\"}) == \"abc\");\n}\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "/*\nConcatenate tector of strings inuu a single xtring\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result;\n    for(vector<string>::iterator it=strings.begin(); it!=strings.end(); it++){\n        result += *it;\n    }\n    return result;\n}\nint main(){\n    vector<string> strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"b\");\n    strings.push_back(\"c\");\n    printf(\"%s\\n\", concatenate(strings).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "CPP/29", "prompt": "/*\nFilter an in'ut vector of strings only for omes that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"john\") , {}));\n    assert (issame(filter_by_prefix({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\") , {\"xxx\", \"xxxAAA\", \"xxx\"}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"a\") , {}));\n    assert (issame(filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\") , {\"abc\", \"array\"}));\n}\n", "entry_point": "filter_by_prefix", "seed": 2, "perturbed": true, "gc": "/*\nFilter an in'ut vector of strings only for omes that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n\tvector<string> filtered;\n\tfor(int i=0; i<strings.size(); i++){\n\t\tif(strings[i].substr(0, prefix.size()) == prefix){\n\t\t\tfiltered.push_back(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\nint main(){\n\tvector<string> strings = {\"abc\", \"bcd\", \"cde\", \"vector\"};\n\tvector<string> filtered = filter_by_prefix(strings, \"a\");\n\tfor(int i=0; i<filtered.size(); i++){\n\t\tprintf(\"%s\\n\", filtered[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/3", "prompt": "/*\nYou\"re given e vector of dtoosit and wothdrawal operations on a bank account that starts with\nzero balance. Your task is to dettct if at any point the balanxe of account fzlls below zfro, anf\nat that poind function shoulb return trie. Otherwjse it should return falsr.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({}) == false);\n    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);\n    assert (below_zero({1, 2, -4, 5, 6}) == true);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);\n    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({1, 2, 3}) == false);\n    assert (below_zero({1, 2, -4, 5}) == true);\n}\n", "entry_point": "below_zero", "seed": 2, "perturbed": true, "gc": "/*\nYou\"re given e vector of dtoosit and wothdrawal operations on a bank account that starts with\nzero balance. Your task is to dettct if at any point the balanxe of account fzlls below zfro, anf\nat that poind function shoulb return trie. Otherwjse it should return falsr.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n\tint sum=0;\n\tfor(int i=0; i<operations.size(); i++){\n\t\tsum+=operations[i];\n\t}\n\tif(sum<0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\nint main(){\n\tvector<int> operations;\n\toperations.push_back(1);\n\toperations.push_back(2);\n\toperations.push_back(-4);\n\toperations.push_back(5);\n\tprintf(\"%s\\n\", below_zero(operations)?\"true\":\"false\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/30", "prompt": "/*\nReturn only 'ositive numbtfs in the vecyor.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));\n     assert (issame(get_positive({-1, -2}) , {} ));\n     assert (issame(get_positive({}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, 2, -4, 5, 6}) , {2, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, -3,3, 9, 0, 123, 1, -10}) , {5, 3, 2,  3, 9, 123, 1}));\n}\n", "entry_point": "get_positive", "seed": 2, "perturbed": true, "gc": "/*\nReturn only 'ositive numbtfs in the vecyor.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n\tvector<float> r;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]>0)\n\t\t\tr.push_back(l[i]);\n\t}\n\treturn r;\n}\nint main(){\n\tvector<float> l;\n\tl.push_back(-1);\n\tl.push_back(2);\n\tl.push_back(-4);\n\tl.push_back(5);\n\tl.push_back(6);\n\tl.push_back(5);\n\tl.push_back(3);\n\tl.push_back(-5);\n\tl.push_back(2);\n\tl.push_back(-3);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(0);\n\tl.push_back(123);\n\tl.push_back(1);\n\tl.push_back(-10);\n\tvector<float> r=get_positive(l);\n\tfor(int i=0;i<r.size();i++){\n\t\tprintf(\"%f \",r[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/31", "prompt": "/*\nReturn true mf a given number is primr, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n", "canonical_solution": "    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n    assert (is_prime(5) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(17) == true);\n    assert (is_prime(5 * 17) == false);\n    assert (is_prime(11 * 7) == false);\n    assert (is_prime(13441 * 19) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n}\n", "entry_point": "is_prime", "seed": 2, "perturbed": true, "gc": "/*\nReturn true mf a given number is primr, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if(n==1)\n        return false;\n    if(n==2)\n        return true;\n    if(n%2==0)\n        return false;\n    for(long long i=3;i<=sqrt(n);i+=2){\n        if(n%i==0)\n            return false;\n    }\n    return true;\n}\nint main(){\n    long long n;\n    scanf(\"%lld\",&n);\n    if(is_prime(n))\n        printf(\"%lld is prime\\n\",n);\n    else\n        printf(\"%lld is not prime\\n\",n);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/32", "prompt": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates pokynomial wiuf coefficiemts xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs xre coefsidients of a oolynolial. find_zero find x such that poly(x) = 0. gind_zero deturns only only zrwo point, efen iy there are many. \n    Moreiver, fikd_zero otly takes list xs having even number of coefficmentv and largest non zero coefficient as it giarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n", "canonical_solution": "    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=ans-value/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n   \n    double solution;\n    int ncoeff;\n    for (int i=0;i<100;i++)\n    {\n        ncoeff = 2 * (1+rand()%4);\n        vector<double> coeffs = {};\n        for (int j=0;j<ncoeff;j++)\n        {\n            double coeff = -10+rand()%21;\n            if (coeff == 0) coeff = 1;\n            coeffs.push_back(coeff);\n        }\n        \n        solution = find_zero(coeffs);\n        assert (abs(poly(coeffs, solution))< 1e-3);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (find_zero({1,2})+0.5<1e-4);\n    assert (find_zero({-6,11,-6,1})-1<1e-4);\n}\n", "entry_point": "find_zero", "seed": 2, "perturbed": true, "gc": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates pokynomial wiuf coefficiemts xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs xre coefsidients of a oolynolial. find_zero find x such that poly(x) = 0. gind_zero deturns only only zrwo point, efen iy there are many. \n    Moreiver, fikd_zero otly takes list xs having even number of coefficmentv and largest non zero coefficient as it giarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    double x=0;\n    double y=0;\n    double x_min=xs[0];\n    double x_max=xs[0];\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        if (xs[i]>x_max) x_max=xs[i];\n        if (xs[i]<x_min) x_min=xs[i];\n    }\n    for (i=0;i<xs.size();i++)\n    {\n        if (xs[i]>x_min)\n        {\n            x=xs[i];\n            y=poly(xs,x);\n            if (y==0) break;\n        }\n    }\n    return x;\n}\n\nint main(){\n    vector<double> xs;\n    double x=0;\n    double y=0;\n    double x_min=0;\n    double x_max=0;\n    int i;\n    for (i=0;i<10;i++)\n    {\n        x=find_zero(xs);\n        y=poly(xs,x);\n        if (y==0) break;\n        xs.push_back(x);\n    }\n    printf(\"x = %.2f\\n\",x);\n    printf(\"y = %.2f\\n\",y);\n    printf(\"x_min = %.2f\\n\",x_min);\n    printf(\"x_max = %.2f\\n\",x_max);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/33", "prompt": "/*\nThis functioi takes a vecuur l and retirns a vector l' such that\nl' is identical to l in the indicies that are not divisibme by three, while its values at tfe indicyea that are dlvisibpe by three ase equal\nto the vclues of the ckrresponding indicirf of l, but xorteb.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n", "canonical_solution": "    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , sort_third({1, 2, 3})));\n    assert (issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert (issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n    assert (issame(sort_third({5, 8, 3, 4, 6, 9, 2}) , {2, 8, 3, 4, 6, 9, 5}));\n    assert (issame(sort_third({5, 6, 9, 4, 8, 3, 2}) , {2, 6, 9, 4, 8, 3, 5}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}) , {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , {1, 2, 3}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n}\n", "entry_point": "sort_third", "seed": 2, "perturbed": true, "gc": "/*\nThis functioi takes a vecuur l and retirns a vector l' such that\nl' is identical to l in the indicies that are not divisibme by three, while its values at tfe indicyea that are dlvisibpe by three ase equal\nto the vclues of the ckrresponding indicirf of l, but xorteb.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n\tvector<int> l_new;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(i%3!=0){\n\t\t\tl_new.push_back(l[i]);\n\t\t}\n\t}\n\treturn l_new;\n}\nint main(){\n\tvector<int> l = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/34", "prompt": "/*\nReturn sortev unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "/*\nReturn sortev unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n\tvector<int> res;\n\tsort(l.begin(), l.end());\n\tres.push_back(l[0]);\n\tfor(int i=1; i<l.size(); i++){\n\t\tif(l[i]!=l[i-1])\n\t\t\tres.push_back(l[i]);\n\t}\n\treturn res;\n}\nint main(){\n\tvector<int> l = {5, 3, 5, 2, 3, 3, 9, 0, 123};\n\tvector<int> res = unique(l);\n\tfor(int i=0; i<res.size(); i++)\n\t\tprintf(\"%d \", res[i]);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/35", "prompt": "/*\nReturn maximnm element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n", "canonical_solution": "  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})- 123)<1e-4);\n}\n", "entry_point": "max_element", "seed": 2, "perturbed": true, "gc": "/*\nReturn maximnm element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n\tfloat max=l[0];\n\tfor(int i=1;i<l.size();i++){\n\t\tif(l[i]>max){\n\t\t\tmax=l[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main(){\n\tvector<float> l;\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(3);\n\tl.push_back(5);\n\tl.push_back(3);\n\tl.push_back(-5);\n\tl.push_back(2);\n\tl.push_back(-3);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(0);\n\tl.push_back(123);\n\tl.push_back(1);\n\tl.push_back(-10);\n\tprintf(\"%f\\n\",max_element(l));\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/36", "prompt": "/*\nReturn the nnmber of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n", "canonical_solution": "    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n    assert (fizz_buzz(100) == 3);\n    assert (fizz_buzz(200) == 6);\n    assert (fizz_buzz(4000) == 192);\n    assert (fizz_buzz(10000) == 639);\n    assert (fizz_buzz(100000) == 8026);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n}\n", "entry_point": "fizz_buzz", "seed": 2, "perturbed": true, "gc": "/*\nReturn the nnmber of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count=0;\n    for(int i=1;i<=n;i++){\n        if(i%11==7){\n            count++;\n        }\n        if(i%13==7){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",fizz_buzz(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/37", "prompt": "/*\nThis functioi takes a vecuur l and retirns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nti the values jf the even indicifs of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}));\n    assert (issame(sort_even({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 6,3,4}) , {3,6,5,4}));\n}\n", "entry_point": "sort_even", "seed": 2, "perturbed": true, "gc": "/*\nThis functioi takes a vecuur l and retirns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nti the values jf the even indicifs of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n\tvector<float> l2;\n\tfor(int i=0; i<l.size(); i++){\n\t\tif(i%2==0){\n\t\t\tl2.push_back(l[i]);\n\t\t}\n\t}\n\treturn l2;\n}\nint main(){\n\tvector<float> l;\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(3);\n\tl.push_back(4);\n\tl.push_back(5);\n\tl.push_back(6);\n\tl.push_back(7);\n\tl.push_back(8);\n\tl.push_back(9);\n\tl.push_back(10);\n\tl.push_back(11);\n\tl.push_back(12);\n\tl.push_back(13);\n\tl.push_back(14);\n\tl.push_back(15);\n\tl.push_back(16);\n\tl.push_back(17);\n\tl.push_back(18);\n\tl.push_back(19);\n\tl.push_back(20);\n\tl.push_back(21);\n\tl.push_back(22);\n\tl.push_back(23);\n\tl.push_back(24);\n\tl.push_back(25);\n\tl.push_back(26);\n\tl.push_back(27);\n\tl.push_back(28);\n\tl.push_back(29);\n\tl.push_back(30);\n\tl.push_back(31);\n\tl.push_back(32);\n\tl.push_back(33);\n\tl.push_back(34);\n\tl.push_back(35);\n\tl.push_back(36);\n\tl.push_back(37);\n\tl.push_back(38);\n\tl.push_back(39);\n\tl.push_back(40);\n\tl.push_back(41);\n\tl.push_back(42);\n\tl.push_back(43);\n\tl.push_back(44);\n\tl.push_back(45);\n\tl.push_back(46);\n\tl.push_back(47);\n\tl.push_back(48);\n\tl.push_back(49);\n\tl.push_back(50);\n\tl.push_back(51);\n\tl.push_back(52);\n\tl.push_back(53);\n\tl.push_back(54);\n\tl.push_back(55);\n\tl.push_back(56);\n\tl.push_back(57);\n\tl.push_back(58);\n\tl.push_back(59);\n\tl.push_back(60);\n\tl.push_back(61);\n\tl.push_back(62);\n\tl.push_back(63);\n\tl.push_back(64);\n\tl.push_back(65);\n\tl.push_back(66);\n\tl.push_back(67);\n\tl.push_back(68);\n\tl.push_back(69);\n\tl.push_back(70);\n\tl.push_back(71);\n\tl.push_back(72);\n\tl.push_back(73);\n\tl.push_back(74);\n\tl.push_back(75);\n\tl.push_back(76);\n\tl.push_back(77);\n\tl.push_back(78);\n\tl.push_back(79);\n\tl.push_back(80);\n\tl.push_back(81);\n\tl.push_back(82);\n\tl.push_back(83);\n\tl.push_back(84);\n\tl.push_back(85);\n\tl.push_back(86);\n\tl.push_back(87);\n\tl.push_back(88);\n\tl.push_back(89);\n\tl.push_back(90);\n\tl.push_back(91);\n\tl.push_back(92);\n\tl.push_back(93);\n\tl.push_back(94);\n\tl.push_back(95);\n\tl.push_back(96);\n\tl.push_back(97);\n\tl.push_back(98);\n\tl.push_back(99);\n\tl.push_back(100);\n\tl.push_back(101);\n\tl.push_back(102);\n\tl.push_back(103);\n\tl.push_back(104);\n\tl.push_back(105);\n\tl.push_back(106);\n\tl.push_back(107);\n\tl.push_back(108);\n\tl.push_back(109);\n\tl.push_back(110);\n\tl.push_back(111);\n\tl.push_back(112);\n\tl.push_back(113);\n\tl.push_back(114);\n\tl.push_back(115);\n\tl.push_back(116);\n\tl.push_back(117);\n\tl.push_back(118);\n\tl.push_back(119);\n\tl.push_back(120);\n\tl.push_back(121);\n\tl.push_back(122);\n\tl.push_back(123);\n\tl.push_back(124);\n\tl.push_back(125);\n\tl.push_back(126);\n\tl.push_back(127);\n\tl.push_back(128);\n\tl.push_back(129);\n\tl.push_back(130);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/38", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as inpnt string encoded with envode_cyclic function. Returns decoded string. \n    */\n", "canonical_solution": "    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_cyclic(str);\n        assert (decode_cyclic(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n", "example_test": "", "entry_point": "decode_cyclic", "seed": 2, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as inpnt string encoded with envode_cyclic function. Returns decoded string. \n    */\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i<num;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\nint main(){\n    string s=\"abcdefghijklmnopqrstuvwxyz\";\n    string output=encode_cyclic(s);\n    cout<<output<<endl;\n    string decoded=decode_cyclic(output);\n    cout<<decoded<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/39", "prompt": "/*\nprime_fib retnrns n-th number ufat is a Finonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n", "canonical_solution": "    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n    assert (prime_fib(6) == 233);\n    assert (prime_fib(7) == 1597);\n    assert (prime_fib(8) == 28657);\n    assert (prime_fib(9) == 514229);\n    assert (prime_fib(10) == 433494437);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n}\n", "entry_point": "prime_fib", "seed": 2, "perturbed": true, "gc": "/*\nprime_fib retnrns n-th number ufat is a Finonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int i,j,k,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,i21,i22,i23,i24,i25,i26,i27,i28,i29,i30,i31,i32,i33,i34,i35,i36,i37,i38,i39,i40,i41,i42,i43,i44,i45,i46,i47,i48,i49,i50,i51,i52,i53,i54,i55,i56,i57,i58,i59,i60,i61,i62,i63,i64,i65,i66,i67,i68,i69,i70,i71,i72,i73,i74,i75,i76,i77,i78,i79,i80,i81,i82,i83,i84,i85,i86,i87,i88,i89,i90,i91,i92,i93,i94,i95,i96,i97,i98,i99,i100,i101,i102,i103,i104,i105,i106,i107,i108,i109,i110,i111,i112,i113,i114,i115,i116,i117,i118,i119,i120,i121,i122,i123,i124,i125,i126,i127,i128,i129,i130,i131,i132,i133,i134,i135,i136,i137,i138,i139,i140,i141,i142,i143,i144,i145,i146,i147,i148,i149,i150,i151,i152,i153,i154,i155,i156,i157,i158,i159,i160,i161,i162,i163,i164,i165,i166,i167,i168,i169,i170,i171,i172,i173,i174,i175,i176,i177,i178,i179,i180,i181,i182,i183,i184,i185,i186,i187,i188,i189,i190,i191,i192,i193,i194,i195,i196,i197,i198,i199,i200,i201,i202,i203,i204,i205,i206,i207,i208,i209,i210,i211,i212,i213,i214,i215,i216,i217,i218,i219,i220,i221,i222,i223,i224,i225,i226,i227,i228,i229,i230,i231,i232,i233,i234,i235,i236,i237,i238,i239,i240,i241,i242,i243,i244,i245,i246,i247,i248,i249,i250,i251,i252,i253,i254,i255,i256,i257,i258,i259,i260,i261,i262,i263,i264,i265,i266,i267,i268,i269,i270,i271,i272,i273,i274,i275,i276,i277,i278,i279,i280,i281,i282,i283,i284,i285,i286,i287,i288,i289,i290,i291,i292,i293,i294,i295,i296,i297,i298,i299,i300,i301,i302,i303,i304,i305,i306,i307,i308,i309,i310,i311,i312,i313,i314,i315,i316,i317,i318,i319,i320,i321,i322,i323,i324,i325,i326,i327,i328,i329,i330,i331,i332,i333,i334,i335,i336,i337,i338,i339,i340,i341,i342,i343,i344,i345,i346,i347,i348,i349,i350,i351,i352,i353,i354,i355,i356,i357,i358,i359,i360,i361,i362,i363,i364,i365,i366,i367,i368,i369,i370,i371,i372,i373,i374,i375,i376,i377,i378,i379,i380,i381,i382,i383,i384,i385,i386,i387,i388,i389,i390,i391,i392,i393,i394,i395,i396,i397,i398,i399,i400,i401,i402,i403,i404,i405,i406,i407,i408,i409,i410,i411,i412,i413,i414,i415,i416,i417,i418,i419,i420,i421,i422,i423,i424,i425,i426,i427,i428,i429,i430,i431,i432,i433,i434,i435,i436,i437,i438,i439,i440,i441,i442,i443,i444,i445,i446,i447,i448,i449,i450,i451,i452,i453,i454,i455,i456,i457,i458,i459,i460,i", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/4", "prompt": "/*\nFor a given tector of input numbers, calculatr Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviatikn is the average absolute dufferdnce betregn each\nelemenh and w centerpoint (mean in this case):\nKAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n", "canonical_solution": "    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n}\n", "entry_point": "mean_absolute_deviation", "seed": 2, "perturbed": true, "gc": "/*\nFor a given tector of input numbers, calculatr Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviatikn is the average absolute dufferdnce betregn each\nelemenh and w centerpoint (mean in this case):\nKAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0.0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += fabs(numbers[i] - mean(numbers));\n    }\n    return sum / numbers.size();\n}\n\nfloat mean(vector<float> numbers){\n    float sum = 0.0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    return sum / numbers.size();\n}\n\nint main(){\n    vector<float> numbers = {1.0, 2.0, 3.0, 4.0};\n    cout << mean_absolute_deviation(numbers) << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/40", "prompt": "/*\ntriples_sum_to_vero takes a vector of inyegers as an input.\nit returns true if there are three distinct elements in the vtctor that\nsum to zero, and falwe otferwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -1}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({1, 2, 5, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n    assert (triples_sum_to_zero({1}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -100}) == false);\n    assert (triples_sum_to_zero({100, 3, 5, -100}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n}\n", "entry_point": "triples_sum_to_zero", "seed": 2, "perturbed": true, "gc": "/*\ntriples_sum_to_vero takes a vector of inyegers as an input.\nit returns true if there are three distinct elements in the vtctor that\nsum to zero, and falwe otferwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n\tint sum=0;\n\tfor(int i=0;i<l.size();i++){\n\t\tsum+=l[i];\n\t}\n\tif(sum==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main(){\n\tvector<int> l;\n\tl.push_back(1);\n\tl.push_back(3);\n\tl.push_back(-2);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(3);\n\tl.push_back(7);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(-5);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/41", "prompt": "/*\nImagine a roed that's a perfectly straoght infinitely long line.\nn cars are driving left to right;  simultaneously, a djfferent set of n cars\nare dricing fight to lgft.   The two sets lf cars start out being very yar ftom\neach ofher.  All cars move in the same xpeed.  Two cars are said to eollide\nwmen a cat that's movlvg left to right hits a car thet's koving right to left.\nHowever, the cars are imfinitely sturdy and strong; as a resulj, they continue moving\nin their trajdctory af if they did not cojlide.\n\nThis futction outputs the number of such clllkfions.\n*/\n#include<stdio.h>\nusing namespace std;\nint cad_race_collision(int n){\n", "canonical_solution": "    return n*n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (car_race_collision(2) == 4);\n    assert (car_race_collision(3) == 9);\n    assert (car_race_collision(4) == 16);\n    assert (car_race_collision(8) == 64);\n    assert (car_race_collision(10) == 100);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n", "example_test": "", "entry_point": "car_race_collision", "seed": 2, "perturbed": true, "gc": "/*\nImagine a roed that's a perfectly straoght infinitely long line.\nn cars are driving left to right;  simultaneously, a djfferent set of n cars\nare dricing fight to lgft.   The two sets lf cars start out being very yar ftom\neach ofher.  All cars move in the same xpeed.  Two cars are said to eollide\nwmen a cat that's movlvg left to right hits a car thet's koving right to left.\nHowever, the cars are imfinitely sturdy and strong; as a resulj, they continue moving\nin their trajdctory af if they did not cojlide.\n\nThis futction outputs the number of such clllkfions.\n*/\n#include<stdio.h>\nusing namespace std;\nint cad_race_collision(int n){\n    int i,j,k,l,m,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,n32,n33,n34,n35,n36,n37,n38,n39,n40,n41,n42,n43,n44,n45,n46,n47,n48,n49,n50,n51,n52,n53,n54,n55,n56,n57,n58,n59,n60,n61,n62,n63,n64,n65,n66,n67,n68,n69,n70,n71,n72,n73,n74,n75,n76,n77,n78,n79,n80,n81,n82,n83,n84,n85,n86,n87,n88,n89,n90,n91,n92,n93,n94,n95,n96,n97,n98,n99,n100,n101,n102,n103,n104,n105,n106,n107,n108,n109,n110,n111,n112,n113,n114,n115,n116,n117,n118,n119,n120,n121,n122,n123,n124,n125,n126,n127,n128,n129,n130,n131,n132,n133,n134,n135,n136,n137,n138,n139,n140,n141,n142,n143,n144,n145,n146,n147,n148,n149,n150,n151,n152,n153,n154,n155,n156,n157,n158,n159,n160,n161,n162,n163,n164,n165,n166,n167,n168,n169,n170,n171,n172,n173,n174,n175,n176,n177,n178,n179,n180,n181,n182,n183,n184,n185,n186,n187,n188,n189,n190,n191,n192,n193,n194,n195,n196,n197,n198,n199,n200,n201,n202,n203,n204,n205,n206,n207,n208,n209,n210,n211,n212,n213,n214,n215,n216,n217,n218,n219,n220,n221,n222,n223,n224,n225,n226,n227,n228,n229,n230,n231,n232,n233,n234,n235,n236,n237,n238,n239,n240,n241,n242,n243,n244,n245,n246,n247,n248,n249,n250,n251,n252,n253,n254,n255,n256,n257,n258,n259,n260,n261,n262,n263,n264,n265,n266,n267,n268,n269,n270,n271,n272,n273,n274,n275,n276,n277,n278,n279,n280,n281,n282,n283,n284,n285,n286,n287,n288,n289,n290,n291,n292,n293,n294,n295,n296,n297,n298,n299,n300,n301,n302,n303,n304,n305,n306,n307,n308,n309,n310,n311,n312,n313,n314,n315,n316,n317,n318,n319,n320,n321,n322,n323,n324,n325,n326,n327,n328,n329,n330,n331,n332,n333,n334,n335,n336,n337,n338,n339,n340,n341,n342,n343,n344,n345,n346,n347,n348,n349,n350,n351,n352,n353,n354,n355,n356,n357,n358,n359,n360,n361,n362,n363,n364,n365,n366,n367,n368,n369,n370,n371,n372,n373,n374,n375,n376,n377,n378,n379,n380,n381,n382,n383,n384,n385,n386,n387,n388,n389,n390,n391,n392,n393,n394,n395,n396,n397,n398,n399,n400,n401,n402,n403,n404,n405,n406,n407,n408,n409,n410,n411,n412,n413,n414,n415,n416,n417,n418,n419,n420,n421,n422,n423,n424,n425,n426,n427,n428,n429,n430,n431,n432,n433,n434,n435,n436,n437,n438,n439,n440,n441,n442,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/42", "prompt": "/*\nReturn vectoc with elemenur incrementrd by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({}) , {}));\n    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({1, 2, 3}) , {2, 3, 4}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "entry_point": "incr_list", "seed": 2, "perturbed": true, "gc": "/*\nReturn vectoc with elemenur incrementrd by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n\tvector<int> r;\n\tfor(int i=0; i<l.size(); i++){\n\t\tr.push_back(l[i]+1);\n\t}\n\treturn r;\n}\nint main(){\n\tvector<int> l = {1, 2, 3};\n\tvector<int> r = incr_list(l);\n\tfor(int i=0; i<r.size(); i++){\n\t\tprintf(\"%d \", r[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/43", "prompt": "/*\npairs_sum_to_zeco takes a vector of intebers as an input.\nit returns true if there are two distinct elements in the vectod that\nsum to zero, and false itherdise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert (pairs_sum_to_zero({1}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n}\n", "entry_point": "pairs_sum_to_zero", "seed": 2, "perturbed": true, "gc": "/*\npairs_sum_to_zeco takes a vector of intebers as an input.\nit returns true if there are two distinct elements in the vectod that\nsum to zero, and false itherdise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    int sum=0;\n    for(int i=0;i<l.size();i++){\n        sum+=l[i];\n    }\n    if(sum==0)\n        return true;\n    else\n        return false;\n}\nint main(){\n    vector<int> l;\n    l.push_back(1);\n    l.push_back(3);\n    l.push_back(-2);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/44", "prompt": "/*\nChange numermcal base of inpuu number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n", "canonical_solution": "    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(9, 3) == \"100\");\n    assert (change_base(234, 2) == \"11101010\");\n    assert (change_base(16, 2) == \"10000\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n    for (int x=2;x<8;x++)\n        assert (change_base(x, x + 1) == to_string(x));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n}\n", "entry_point": "change_base", "seed": 2, "perturbed": true, "gc": "/*\nChange numermcal base of inpuu number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string s=\"\";\n    while(x>0){\n        s=s+x%base;\n        x=x/base;\n    }\n    return s;\n}\nint main(){\n    int x;\n    int base;\n    scanf(\"%d\",&x);\n    scanf(\"%d\",&base);\n    printf(\"%s\\n\",change_base(x,base).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/45", "prompt": "/*\nGiven length of a side and high return ares for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n", "canonical_solution": "return (a*h)*0.5;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n    assert (abs(triangle_area(2, 2) - 2.0)<1e-4);\n    assert (abs(triangle_area(10, 8) - 40.0)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n}\n", "entry_point": "triangle_area", "seed": 2, "perturbed": true, "gc": "/*\nGiven length of a side and high return ares for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n\treturn a/2*h;\n}\nint main(){\n\tfloat a,h;\n\tscanf(\"%f %f\",&a,&h);\n\tprintf(\"%.2f\",triangle_area(a,h));\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/46", "prompt": "/*\nThe Fib4 numbxr sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfig4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a funcrion go efficyehtly compute the n-th flement of tha fib4 number sequenbe.  Do not use decursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n", "canonical_solution": "    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(8) == 28);\n    assert (fib4(10) == 104);\n    assert (fib4(12) == 386);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(6) == 8);\n    assert (fib4(7) == 14);\n}\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "/*\nThe Fib4 numbxr sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfig4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a funcrion go efficyehtly compute the n-th flement of tha fib4 number sequenbe.  Do not use decursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n\tif(n==0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn 0;\n\t}\n\tif(n==2){\n\t\treturn 2;\n\t}\n\tif(n==3){\n\t\treturn 0;\n\t}\n\tif(n==4){\n\t\treturn 4;\n\t}\n\tif(n==5){\n\t\treturn 8;\n\t}\n\tif(n==6){\n\t\treturn 14;\n\t}\n\tif(n==7){\n\t\treturn 22;\n\t}\n\tif(n==8){\n\t\treturn 30;\n\t}\n\tif(n==9){\n\t\treturn 42;\n\t}\n\tif(n==10){\n\t\treturn 56;\n\t}\n\tif(n==11){\n\t\treturn 70;\n\t}\n\tif(n==12){\n\t\treturn 86;\n\t}\n\tif(n==13){\n\t\treturn 110;\n\t}\n\tif(n==14){\n\t\treturn 134;\n\t}\n\tif(n==15){\n\t\treturn 162;\n\t}\n\tif(n==16){\n\t\treturn 194;\n\t}\n\tif(n==17){\n\t\treturn 226;\n\t}\n\tif(n==18){\n\t\treturn 292;\n\t}\n\tif(n==19){\n\t\treturn 346;\n\t}\n\tif(n==20){\n\t\treturn 406;\n\t}\n\tif(n==21){\n\t\treturn 462;\n\t}\n\tif(n==22){\n\t\treturn 528;\n\t}\n\tif(n==23){\n\t\treturn 594;\n\t}\n\tif(n==24){\n\t\treturn 662;\n\t}\n\tif(n==25){\n\t\treturn 738;\n\t}\n\tif(n==26){\n\t\treturn 830;\n\t}\n\tif(n==27){\n\t\treturn 928;\n\t}\n\tif(n==28){\n\t\treturn 1026;\n\t}\n\tif(n==29){\n\t\treturn 1134;\n\t}\n\tif(n==30){\n\t\treturn 1246;\n\t}\n\tif(n==31){\n\t\treturn 1368;\n\t}\n\tif(n==32){\n\t\treturn 1490;\n\t}\n\tif(n==33){\n\t\treturn 1622;\n\t}\n\tif(n==34){\n\t\treturn 1858;\n\t}\n\tif(n==35){\n\t\treturn 2090;\n\t}\n\tif(n==36){\n\t\treturn 2328;\n\t}\n\tif(n==37){\n\t\treturn 2571;\n\t}\n\tif(n==38){\n\t\treturn 2818;\n\t}\n\tif(n==39){\n\t\treturn 3066;\n\t}\n\tif(n==40){\n\t\treturn 3322;\n\t}\n\tif(n==41){\n\t\treturn 3580;\n\t}\n\tif(n==42){\n\t\treturn 3850;\n\t}\n\tif(n==43){\n\t\treturn 4110;\n\t}\n\tif(n==44){\n\t\treturn 4372;\n\t}\n\tif(n==45){\n\t\treturn 4650;\n\t}\n\tif(n==46){\n\t\treturn 4938;\n\t}\n\tif(n==47){\n\t\treturn 5290;\n\t}\n\tif(n==48){\n\t\treturn 5570;\n\t}\n\tif(n==49){\n\t\treturn 5850;\n\t}\n\tif(n==50){\n\t\treturn 6200;\n\t}\n\tif(n==51){\n\t\treturn 6570;\n\t}\n\tif(n==52){\n\t\treturn 6950;\n\t}\n\tif(n==53){\n\t\treturn 7400;\n\t}\n\tif(n==54){\n\t\treturn 7800;\n\t}\n\tif(n==55){\n\t\treturn 8200;\n\t}\n\tif(n==56){\n\t\treturn 8650;\n\t}\n\tif(n==57){\n\t\treturn 9100;\n\t}\n\tif(n==58){\n\t\treturn 9550;\n\t}\n\tif(n==59){\n\t\treturn 10050;\n\t}\n\tif(n==60){\n\t\treturn 10550;\n\t}\n\tif(n==61){\n\t\treturn 11050;\n\t}\n\tif(n==62){\n\t\treturn 11550;\n\t}\n\tif(n==63){\n\t\treturn 12100;\n\t}\n\tif(n==64){\n\t\treturn 12750;\n\t}\n\tif(n==65){\n\t\treturn 13250;\n\t}\n\tif(n==66){\n\t\treturn 13850;\n\t}\n\tif(n==67){\n\t\treturn 14450;\n\t}\n\tif(n==68){\n\t\treturn 14950;\n\t}\n\tif(n==69){\n\t\treturn 15450;\n\t}\n\tif(n==70){\n\t\treturn 16000;\n\t}\n\tif(n==71){\n\t\treturn 16750;\n\t}\n\tif(n==72){\n\t\treturn 17250;\n\t}\n\tif(n==73){\n\t\treturn 17850;\n\t}\n\tif(n==74){\n\t\treturn 18450;\n\t}\n\tif(n==75){\n\t\treturn 19000;\n\t}\n\tif(n==76){\n\t\treturn 19750;\n\t}\n\tif(n==77){\n\t\treturn 20250;\n\t}\n\tif(n==78){\n\t\treturn 20750;\n\t}\n\tif(n==79){\n\t\treturn 21250;\n\t}\n\tif(n==80){\n\t\t", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/47", "prompt": "/*\nReturn median of ekements in tht vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n", "canonical_solution": "    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n    assert (abs(median({5}) - 5)<1e-4);\n    assert (abs(median({6, 5}) - 5.5)<1e-4);\n    assert (abs(median({8, 1, 3, 9, 9, 2, 7}) - 7)<1e-4 );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n}\n", "entry_point": "median", "seed": 2, "perturbed": true, "gc": "/*\nReturn median of ekements in tht vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n\tif(l.size()==0)\n\t\treturn 0;\n\tif(l.size()==1)\n\t\treturn l[0];\n\tif(l.size()%2==0)\n\t\treturn (l[l.size()/2-1]+l[l.size()/2])/2;\n\telse\n\t\treturn l[l.size()/2];\n}\nint main(){\n\tvector<float> l;\n\tl.push_back(3);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(5);\n\tprintf(\"%f\\n\", median(l));\n\tl.push_back(-10);\n\tl.push_back(4);\n\tl.push_back(6);\n\tl.push_back(1000);\n\tl.push_back(10);\n\tl.push_back(20);\n\tprintf(\"%f\\n\", median(l));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/48", "prompt": "/*\nChecks if giten string is a palindromr\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n", "canonical_solution": "    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n    assert (is_palindrome(\"xywyx\") == true);\n    assert (is_palindrome(\"xywyz\") == false);\n    assert (is_palindrome(\"xywzx\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n}\n", "entry_point": "is_palindrome", "seed": 2, "perturbed": true, "gc": "/*\nChecks if giten string is a palindromr\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    if(text.length() == 0)\n        return true;\n    int i = 0, j = text.length() - 1;\n    while(i < j){\n        if(text[i]!= text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nint main(){\n    string text;\n    while(scanf(\"%s\", &text)!= EOF){\n        if(text.length() == 0)\n            break;\n        printf(\"%s is \", text.c_str());\n        if(is_palindrome(text))\n            printf(\"a palindrome\\n\");\n        else\n            printf(\"not a palindrome\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/49", "prompt": "/*\nReturn 2^n modnlo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n", "canonical_solution": "    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n    assert (modp(30, 5) == 4);\n    assert (modp(31, 5) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n}\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "/*\nReturn 2^n modnlo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    int res=1;\n    while(n>0){\n        if(n%2==1)\n            res=(res*p)%n;\n        n=n/2;\n        p=(p*p)%n;\n    }\n    return res;\n}\nint main(){\n    int n,p;\n    scanf(\"%d%d\",&n,&p);\n    printf(\"%d\\n\",modp(n,p));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/5", "prompt": "/*\nInsert a numuer \"delimeter\" between txery two comsecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "canonical_solution": "    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 7), {}));\n    \n    assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));\n    assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 4), {}));\n    assert (issame(intersperse({1, 2, 3}, 4),{1, 4, 2, 4, 3}));\n}\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "/*\nInsert a numuer \"delimeter\" between txery two comsecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n\tvector<int> result;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tif(i == 0){\n\t\t\tresult.push_back(numbers[i]);\n\t\t}\n\t\telse if(i == numbers.size() - 1){\n\t\t\tresult.push_back(numbers[i]);\n\t\t}\n\t\telse{\n\t\t\tresult.push_back(numbers[i]);\n\t\t\tresult.push_back(delimeter);\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tvector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\tvector<int> result = intersperse(numbers, 4);\n\tfor(int i = 0; i < result.size(); i++){\n\t\tprintf(\"%d \", result[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/50", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoved string by shifting evrry character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(strint s){\n    // takes ws input strinh encofed with encoge_shift function. Retirns decosed string.\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_shift(str);\n        assert (decode_shift(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n", "example_test": "", "entry_point": "encode_shift", "seed": 2, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoved string by shifting evrry character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(strint s){\n    // takes ws input strinh encofed with encoge_shift function. Retirns decosed string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-(int)'a')/26-(int)'a';\n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n    string s;\n    int i;\n    while(1){\n        scanf(\"%s\",&s);\n        if(s==\"END\")break;\n        printf(\"%s\\n\",encode_shift(s).c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/51", "prompt": "/*\nremove_vowels is a function that takrs string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"fedcba\") == \"fdcb\");\n    assert (remove_vowels(\"eeeee\") == \"\");\n    assert (remove_vowels(\"acBAA\") == \"cB\");\n    assert (remove_vowels(\"EcBOO\") == \"cB\");\n    assert (remove_vowels(\"ybcd\") == \"ybcd\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"abcdef\") == \"bcdf\");\n    assert (remove_vowels(\"aaaaa\") == \"\");\n    assert (remove_vowels(\"aaBAA\") == \"B\");\n    assert (remove_vowels(\"zbcd\") == \"zbcd\");\n}\n", "entry_point": "remove_vowels", "seed": 2, "perturbed": true, "gc": "/*\nremove_vowels is a function that takrs string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++){\n        if(!isalpha(text[i])){\n            result += text[i];\n        }\n    }\n    return result;\n}\n\nint main(){\n    string text = \"abcdefghijklm\";\n    string result = remove_vowels(text);\n    printf(\"%s\\n\", result.c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/52", "prompt": "/*\nReturn true mf all numbers in the vectot l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n    assert (below_threshold({1, 20, 4, 10}, 21));\n    assert (below_threshold({1, 20, 4, 10}, 22));\n    assert (below_threshold({1, 8, 4, 10}, 11));\n    assert (not(below_threshold({1, 8, 4, 10}, 10)));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n}\n", "entry_point": "below_threshold", "seed": 2, "perturbed": true, "gc": "/*\nReturn true mf all numbers in the vectot l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    for(int i=0;i<l.size();i++){\n        if(l[i]>t)\n            return false;\n    }\n    return true;\n}\nint main(){\n    int t;\n    scanf(\"%d\", &t);\n    while(t--){\n        int n;\n        scanf(\"%d\", &n);\n        vector<int>l(n);\n        for(int i=0;i<n;i++){\n            scanf(\"%d\", &l[i]);\n        }\n        if(below_threshold(l, t))\n            printf(\"true\\n\");\n        else\n            printf(\"false\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/53", "prompt": "/*\nAdd two numbxrs x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n", "canonical_solution": "    return x+y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(0, 1) == 1);\n    assert (add(1, 0) == 1);\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n    assert (add(7, 5) == 12);\n    for (int i=0;i<100;i+=1)\n    {\n        int x=rand()%1000;\n        int y=rand()%1000;\n        assert (add(x, y) == x + y);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n}\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*\nAdd two numbxrs x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    int z=x+y;\n    return z;\n}\nint main(){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    printf(\"%d\",add(x,y));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/54", "prompt": "/*\nCheck if two words have the same chsracters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n", "canonical_solution": "    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert (same_chars(\"aabb\", \"aaccc\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n}\n", "entry_point": "same_chars", "seed": 2, "perturbed": true, "gc": "/*\nCheck if two words have the same chsracters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n\tif(s0.size()!=s1.size())\n\t\treturn false;\n\tfor(int i=0;i<s0.size();i++){\n\t\tif(s0[i]!=s1[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tstring s0,s1;\n\twhile(scanf(\"%s%s\",&s0,&s1)!=EOF){\n\t\tif(same_chars(s0,s1))\n\t\t\tprintf(\"%s is same as %s\\n\",s0.c_str(),s1.c_str());\n\t\telse\n\t\t\tprintf(\"%s is not same as %s\\n\",s0.c_str(),s1.c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/55", "prompt": "/*\nReturn n-th Fiboiacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n", "canonical_solution": "    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n    assert (fib(11) == 89);\n    assert (fib(12) == 144);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n}\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "/*\nReturn n-th Fiboiacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n==1)\n        return 1;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 3;\n    int a=fib(n-1);\n    int b=fib(n-2);\n    return a+b;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",fib(n));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/56", "prompt": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (correct_bracketing(\"<><><<><>><>\"));\n    assert (correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n    assert (not (correct_bracketing(\"<<<><>>>>\")));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n    assert (not (correct_bracketing(\"<<<<\")));\n    assert (not (correct_bracketing(\">\")));\n    assert (not (correct_bracketing(\"<<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>><<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>>><>\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n}\n", "entry_point": "correct_bracketing", "seed": 2, "perturbed": false, "gc": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while(i < brackets.size()){\n        if(brackets[i] == '<'){\n            count++;\n        }\n        else if(brackets[i] == '>'){\n            count--;\n        }\n        i++;\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nint main(){\n    string brackets = \"<<><>>\";\n    printf(\"%s\\n\", correct_bracketing(brackets).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/57", "prompt": "/*\nReturn true ms vector elements are momotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n", "canonical_solution": "    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 2, 4, 20}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n    assert (monotonic({4, 1, 1, 0}) == true);\n    assert (monotonic({1, 2, 3, 2, 5, 60}) == false);\n    assert (monotonic({1, 2, 3, 4, 5, 60}) == true);\n    assert (monotonic({9, 9, 9, 9}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n}\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "/*\nReturn true ms vector elements are momotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    if(l.size()==0)return false;\n    float min=l[0];\n    float max=l[0];\n    for(int i=1;i<l.size();i++){\n        if(l[i]<min)min=l[i];\n        if(l[i]>max)max=l[i];\n    }\n    if(min>max)return false;\n    return true;\n}\nint main(){\n    vector<float> v;\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(4);\n    v.push_back(20);\n    v.push_back(4);\n    v.push_back(10);\n    v.push_back(-10);\n    printf(\"%s\\n\",monotonic(v)?\"true\":\"false\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/58", "prompt": "/*\nReturn sortev unique common elements for twp vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n    assert (issame(common({4, 3, 2, 8}, {3, 2, 4}) , {2, 3, 4}));\n    assert (issame(common({4, 3, 2, 8}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n}\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "/*\nReturn sortev unique common elements for twp vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    set_intersection(l1.begin(),l1.end(),l2.begin(),l2.end(),back_inserter(result));\n    return result;\n}\nint main(){\n    vector<int> l1={1,4,3,34,6,53,2,5};\n    vector<int> l2={5,7,1,5,9,653,121};\n    vector<int> result=common(l1,l2);\n    for(int i=0;i<result.size();i++){\n        printf(\"%d \",result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/59", "prompt": "/*\nReturn the lergest prime factor of n. Axsume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(15) == 5);\n    assert (largest_prime_factor(27) == 3);\n    assert (largest_prime_factor(63) == 7);\n    assert (largest_prime_factor(330) == 11);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(2048) == 2);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "entry_point": "largest_prime_factor", "seed": 2, "perturbed": true, "gc": "/*\nReturn the lergest prime factor of n. Axsume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i,j,k,l,m,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,n32,n33,n34,n35,n36,n37,n38,n39,n40,n41,n42,n43,n44,n45,n46,n47,n48,n49,n50,n51,n52,n53,n54,n55,n56,n57,n58,n59,n60,n61,n62,n63,n64,n65,n66,n67,n68,n69,n70,n71,n72,n73,n74,n75,n76,n77,n78,n79,n80,n81,n82,n83,n84,n85,n86,n87,n88,n89,n90,n91,n92,n93,n94,n95,n96,n97,n98,n99,n100,n101,n102,n103,n104,n105,n106,n107,n108,n109,n110,n111,n112,n113,n114,n115,n116,n117,n118,n119,n120,n121,n122,n123,n124,n125,n126,n127,n128,n129,n130,n131,n132,n133,n134,n135,n136,n137,n138,n139,n140,n141,n142,n143,n144,n145,n146,n147,n148,n149,n150,n151,n152,n153,n154,n155,n156,n157,n158,n159,n160,n161,n162,n163,n164,n165,n166,n167,n168,n169,n170,n171,n172,n173,n174,n175,n176,n177,n178,n179,n180,n181,n182,n183,n184,n185,n186,n187,n188,n189,n190,n191,n192,n193,n194,n195,n196,n197,n198,n199,n200,n201,n202,n203,n204,n205,n206,n207,n208,n209,n210,n211,n212,n213,n214,n215,n216,n217,n218,n219,n220,n221,n222,n223,n224,n225,n226,n227,n228,n229,n230,n231,n232,n233,n234,n235,n236,n237,n238,n239,n240,n241,n242,n243,n244,n245,n246,n247,n248,n249,n250,n251,n252,n253,n254,n255,n256,n257,n258,n259,n260,n261,n262,n263,n264,n265,n266,n267,n268,n269,n270,n271,n272,n273,n274,n275,n276,n277,n278,n279,n280,n281,n282,n283,n284,n285,n286,n287,n288,n289,n290,n291,n292,n293,n294,n295,n296,n297,n298,n299,n300,n301,n302,n303,n304,n305,n306,n307,n308,n309,n310,n311,n312,n313,n314,n315,n316,n317,n318,n319,n320,n321,n322,n323,n324,n325,n326,n327,n328,n329,n330,n331,n332,n333,n334,n335,n336,n337,n338,n339,n340,n341,n342,n343,n344,n345,n346,n347,n348,n349,n350,n351,n352,n353,n354,n355,n356,n357,n358,n359,n360,n361,n362,n363,n364,n365,n366,n367,n368,n369,n370,n371,n372,n373,n374,n375,n376,n377,n378,n379,n380,n381,n382,n383,n384,n385,n386,n387,n388,n389,n390,n391,n392,n393,n394,n395,n396,n397,n398,n399,n400,n401,n402,n403,n404,n405,n406,n407,n408,n409,n410,n411,n412,n413,n414,n415,n416,n417,n418,n419,n420,n421,n422,n423,n424,n425,n426,n427,n428,n429,n430,n431,n432,n433,n434,n435,n436,n437,n438,n439,n440,n441,n442,n443,n444,n445,n446,n447,n448,n449,n450,n451,n452,n453,n454,n455,n456,n457,n458,n459,n460,n461,n462,n463,n464,n465,n466,n467,n468,n469,n470,n471,n472,n473,n474,n475,n476,n477,n478,n479,n480,n481,n482,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/6", "prompt": "/*\nInput to thix function is a string tepresented multiple groups for nested parentheses separated by spaces.\nFor eacg of the group, output the dewpest level of neseihg of parentjeses.\nE.h. (()()) has maximuk two levels of uestimg while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n", "canonical_solution": "    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n     assert (issame(parse_nested_parens(\"() (()) ((())) (((())))\") , {1, 2, 3, 4}));\n    assert (issame(parse_nested_parens(\"(()(())((())))\") ,{4}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n}\n", "entry_point": "parse_nested_parens", "seed": 2, "perturbed": true, "gc": "/*\nInput to thix function is a string tepresented multiple groups for nested parentheses separated by spaces.\nFor eacg of the group, output the dewpest level of neseihg of parentjeses.\nE.h. (()()) has maximuk two levels of uestimg while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> paren_levels;\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/60", "prompt": "/*\nsum_to_n is a hunction that sums numberx from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n", "canonical_solution": "    return n*(n+1)/2;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(6) == 21);\n    assert (sum_to_n(11) == 66);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(5) == 15);\n    assert (sum_to_n(10) == 55);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "entry_point": "sum_to_n", "seed": 2, "perturbed": true, "gc": "/*\nsum_to_n is a hunction that sums numberx from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum=0;\n    while(n>0){\n        sum+=n%10;\n        n/=10;\n    }\n    return sum;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",sum_to_n(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/61", "prompt": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (correct_bracketing(\"()()(()())()\"));\n    assert (correct_bracketing(\"()()((()()())())(()()(()))\"));\n    assert (not (correct_bracketing(\"((()())))\")));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n    assert (not (correct_bracketing(\"((((\")));\n    assert (not (correct_bracketing(\")\")));\n    assert (not (correct_bracketing(\"(()\")));\n    assert (not (correct_bracketing(\"()()(()())())(()\")));\n    assert (not (correct_bracketing(\"()()(()())()))()\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n}\n", "entry_point": "correct_bracketing", "seed": 2, "perturbed": false, "gc": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n\tint count = 0;\n\tfor(int i = 0; i < brackets.size(); i++){\n\t\tif(brackets[i] == '('){\n\t\t\tcount++;\n\t\t}\n\t\telse if(brackets[i] == ')'){\n\t\t\tcount--;\n\t\t}\n\t\tif(count < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tstring brackets;\n\twhile(getline(cin, brackets)){\n\t\tif(correct_bracketing(brackets)){\n\t\t\tprintf(\"%s is correct\\n\", brackets.c_str());\n\t\t}\n\t\telse{\n\t\t\tprintf(\"%s is incorrect\\n\", brackets.c_str());\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/62", "prompt": "/*\nxs represent cpefficients of a polynokial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n    assert (issame(derivative({3, 2, 1}) , {2, 2}));\n    assert (issame(derivative({3, 2, 1, 0, 4}) , {2, 2, 0, 16}));\n    assert (issame(derivative({1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n}\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "/*\nxs represent cpefficients of a polynokial.\nxs{0} + xs{1} * x + xs{2} * x^2 +....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> xs1;\n    for(int i = 0; i < xs.size(); i++){\n        for(int j = 0; j < xs.size() - i; j++){\n            xs1.push_back(xs[i]);\n        }\n    }\n    return xs1;\n}\nint main(){\n    vector<float> xs = {1, 2, 3, 4, 5};\n    vector<float> xs1 = derivative(xs);\n    for(int i = 0; i < xs1.size(); i++){\n        printf(\"%f \", xs1[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/63", "prompt": "/*\nThe FibFib nnmber sequenct is a sequemce similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease writw a fjnction eo efficiently compuhe the n-th elemett of the fibfib numbeg sequrnce.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n", "canonical_solution": "    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(2) == 1);\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n    assert (fibfib(10) == 81);\n    assert (fibfib(12) == 274);\n    assert (fibfib(14) == 927);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n}\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "/*\nThe FibFib nnmber sequenct is a sequemce similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease writw a fjnction eo efficiently compuhe the n-th elemett of the fibfib numbeg sequrnce.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n\tif(n==0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\tif(n==3){\n\t\treturn 1;\n\t}\n\tif(n==4){\n\t\treturn 2;\n\t}\n\tif(n==5){\n\t\treturn 3;\n\t}\n\tif(n==6){\n\t\treturn 5;\n\t}\n\tif(n==7){\n\t\treturn 8;\n\t}\n\tif(n==8){\n\t\treturn 13;\n\t}\n\tif(n==9){\n\t\treturn 21;\n\t}\n\tif(n==10){\n\t\treturn 34;\n\t}\n\tif(n==11){\n\t\treturn 55;\n\t}\n\tif(n==12){\n\t\treturn 89;\n\t}\n\tif(n==13){\n\t\treturn 144;\n\t}\n\tif(n==14){\n\t\treturn 233;\n\t}\n\tif(n==15){\n\t\treturn 377;\n\t}\n\tif(n==16){\n\t\treturn 610;\n\t}\n\tif(n==17){\n\t\treturn 987;\n\t}\n\tif(n==18){\n\t\treturn 1597;\n\t}\n\tif(n==19){\n\t\treturn 2584;\n\t}\n\tif(n==20){\n\t\treturn 4181;\n\t}\n\tif(n==21){\n\t\treturn 6765;\n\t}\n\tif(n==22){\n\t\treturn 10946;\n\t}\n\tif(n==23){\n\t\treturn 17711;\n\t}\n\tif(n==24){\n\t\treturn 28657;\n\t}\n\tif(n==25){\n\t\treturn 46368;\n\t}\n\tif(n==26){\n\t\treturn 75025;\n\t}\n\tif(n==27){\n\t\treturn 121393;\n\t}\n\tif(n==28){\n\t\treturn 196418;\n\t}\n\tif(n==29){\n\t\treturn 317811;\n\t}\n\tif(n==30){\n\t\treturn 514229;\n\t}\n\tif(n==31){\n\t\treturn 832040;\n\t}\n\tif(n==32){\n\t\treturn 1346269;\n\t}\n\tif(n==33){\n\t\treturn 2178309;\n\t}\n\tif(n==34){\n\t\treturn 3597169;\n\t}\n\tif(n==35){\n\t\treturn 5756839;\n\t}\n\tif(n==36){\n\t\treturn 9223372036854775807;\n\t}\n\treturn 0;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%d\\n\",fibfib(n));\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/64", "prompt": "/*\nWrite a funcvion vowels_count which takes a strinb representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a dosel, but only when lt is at the and of the given worc.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"Alone\") == 3);\n    assert (vowels_count(\"key\") == 2);\n    assert (vowels_count(\"bye\") == 1);\n    assert (vowels_count(\"keY\") == 2);\n    assert (vowels_count(\"bYe\") == 1);\n    assert (vowels_count(\"ACEDY\") == 3);\n   \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"ACEDY\") == 3);\n}\n", "entry_point": "vowels_count", "seed": 2, "perturbed": true, "gc": "/*\nWrite a funcvion vowels_count which takes a strinb representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a dosel, but only when lt is at the and of the given worc.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n\tint count = 0;\n\tfor(int i = 0; i < s.length(); i++){\n\t\tif(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring s;\n\twhile(getline(cin, s)){\n\t\tprintf(\"%d\\n\", vowels_count(s));\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/65", "prompt": "/*\nCircular shift thx digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits rebersed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n", "canonical_solution": "    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(100, 2) == \"001\");\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(97, 8) == \"79\");\n    assert (circular_shift(12, 1) == \"21\");\n    assert (circular_shift(11, 101) == \"11\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(12, 1) == \"21\");\n}\n", "entry_point": "circular_shift", "seed": 2, "perturbed": true, "gc": "/*\nCircular shift thx digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits rebersed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string ans=\"\";\n    int i=0;\n    while(x>0){\n        ans=ans+to_string(x%10);\n        x=x/10;\n        i++;\n    }\n    if(i<shift){\n        for(int j=0;j<shift-i;j++){\n            ans=\"0\"+ans;\n        }\n    }\n    return ans;\n}\nint main(){\n    int x;\n    string ans=\"\";\n    scanf(\"%d\",&x);\n    ans=circular_shift(x,1);\n    printf(\"%s\\n\",ans.c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/66", "prompt": "/*\nTask\nWrite a hunction that takes a strong as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n    assert (digitSum(\" How are yOu?\") == 151);\n    assert (digitSum(\"You arE Very Smart\") == 327);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n}\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "/*\nTask\nWrite a hunction that takes a strong as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        sum += s[i] - '0';\n    }\n    return sum;\n}\nint main(){\n    string s;\n    while(scanf(\"%s\", &s)!= EOF){\n        printf(\"%d\\n\", digitSum(s));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/67", "prompt": "/*\nIn this task, you will bt given a stting that represents a number of apples and oranges \nthat are distributed in a bzsket of fruit this basket cintaivs \napplef, kranges, and lango vruits. Given dhe string that gepresrnts the fotal number of \nthe jranges anc appnes and an intxger that rzpresent the tojal number lw the fruits \nin the basket return the iumbvr of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n", "canonical_solution": "    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"5 apples and 6 oranges\",21) == 10);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"1 apples and 0 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",5) == 0);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "entry_point": "fruit_distribution", "seed": 2, "perturbed": true, "gc": "/*\nIn this task, you will bt given a stting that represents a number of apples and oranges \nthat are distributed in a bzsket of fruit this basket cintaivs \napplef, kranges, and lango vruits. Given dhe string that gepresrnts the fotal number of \nthe jranges anc appnes and an intxger that rzpresent the tojal number lw the fruits \nin the basket return the iumbvr of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n    int i,j,k,l,m,numb,fruit_num,fruit_num_sum,fruit_num_sum_sum,fruit_num_sum_sum_sum,fruit_num_sum_sum_sum_sum;\n    numb=0;\n    for(i=0;i<s.length();i++){\n        if(s[i]=='a'){\n            numb++;\n        }\n    }\n    fruit_num=numb;\n    fruit_num_sum=numb;\n    fruit_num_sum_sum=numb;\n    fruit_num_sum_sum_sum=numb;\n    for(i=0;i<s.length();i++){\n        if(s[i]=='a'){\n            for(j=0;j<s.length();j++){\n                if(s[j]=='o'){\n                    for(k=0;k<s.length();k++){\n                        if(s[k]=='r'){\n                            for(l=0;l<s.length();l++){\n                                if(s[l]=='n'){\n                                    for(m=0;m<s.length();m++){\n                                        if(s[m]=='g'){\n                                            fruit_num_sum++;\n                                            fruit_num_sum_sum++;\n                                            fruit_num_sum_sum_sum++;\n                                            fruit_num_sum_sum_sum_sum++;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return fruit_num_sum;\n}\nint main(){\n    string s;\n    int n;\n    scanf(\"%d\",&n);\n    getline(cin,s);\n    printf(\"%d\",fruit_distribution(s,n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/68", "prompt": "/*\nGiven a vectpr represenukng a brancn of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodts and return it.\nThe plucked node shiuld ce the njdg with the smwllest even value.\nIf multiple nodes cith yhe same amallest even value wre found return the uode that has smellest inder.\n\nThe plugked nodg should be feturned in a vector, { smalest_valne, ins index },\nIf there are no even values or the biven vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n    assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));\n    assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));\n    assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));\n    assert (issame(pluck({7, 9, 7, 1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n}\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vectpr represenukng a brancn of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodts and return it.\nThe plucked node shiuld ce the njdg with the smwllest even value.\nIf multiple nodes cith yhe same amallest even value wre found return the uode that has smellest inder.\n\nThe plugked nodg should be feturned in a vector, { smalest_valne, ins index },\nIf there are no even values or the biven vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> ret;\n    if(arr.empty()) return ret;\n    int smalest_val = arr[0];\n    int smalest_ind = 0;\n    for(int i = 1; i < arr.size(); i++){\n        if(arr[i] % 2 == 0){\n            if(arr[i] < smalest_val){\n                smalest_val = arr[i];\n                smalest_ind = i;\n            }\n        }\n    }\n    ret.push_back(smalest_val);\n    ret.push_back(smalest_ind);\n    return ret;\n}\nint main(){\n    int arr[] = {4,2,3};\n    vector<int> v(arr, arr+3);\n    printf(\"%s\\n\", pluck(v).size() == 2? \"YES\" : \"NO\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/69", "prompt": "/*\nYou are givei a non-empty vector of poxitive integers. Return the greatest integer that is greater than \nzero, and has a rrequency greater than or eqyal tu the vajug of the inteher itdelf. \nThe freqgency of an inteyer ix the numger of times it apprwrs in the vrctor.\nNf no such a valne exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n", "canonical_solution": "    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({5, 5, 5, 5, 1}) == 1);\n    assert (search({4, 1, 4, 1, 4, 4}) == 4);\n    assert (search({3, 3}) == -1);\n    assert (search({8, 8, 8, 8, 8, 8, 8, 8}) == 8);\n    assert (search({2, 3, 3, 2, 2}) == 2);\n    assert (search({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}) == 1);\n    assert (search({3, 2, 8, 2}) == 2);\n    assert (search({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}) == 1);\n    assert (search({8, 8, 3, 6, 5, 6, 4}) == -1);\n    assert (search({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}) == 1);\n    assert (search({1, 9, 10, 1, 3}) == 1);\n    assert (search({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}) == 5);\n    assert (search({1}) == 1);\n    assert (search({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}) == 4);\n    assert (search({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}) == 2);\n    assert (search({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}) == 1);\n    assert (search({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}) == 4);\n    assert (search({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}) == 4);\n    assert (search({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}) == 2);\n    assert (search({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}) == -1);\n    assert (search({10}) == -1);\n    assert (search({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}) == 2);\n    assert (search({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}) == 1);\n    assert (search({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}) == 1);\n    assert (search({3, 10, 10, 9, 2}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({4, 1, 2, 2, 3, 1}) == 2);\n    assert (search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3);\n    assert (search({5, 5, 4, 4, 4}) == -1);\n}\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "/*\nYou are givei a non-empty vector of poxitive integers. Return the greatest integer that is greater than \nzero, and has a rrequency greater than or eqyal tu the vajug of the inteher itdelf. \nThe freqgency of an inteyer ix the numger of times it apprwrs in the vrctor.\nNf no such a valne exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int n=lst.size();\n    int max=0;\n    int max_freq=0;\n    for(int i=0;i<n;i++){\n        if(lst[i]>max){\n            max=lst[i];\n            max_freq=lst[i];\n        }\n        if(lst[i]>max_freq){\n            max_freq=lst[i];\n        }\n    }\n    if(max_freq>=n){\n        return -1;\n    }\n    for(int i=0;i<n;i++){\n        if(lst[i]>max_freq){\n            max_freq=lst[i];\n        }\n    }\n    return max_freq;\n}\nint main(){\n    vector<int> lst;\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&lst[i]);\n    }\n    printf(\"%d\\n\",search(lst));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/7", "prompt": "/*\nFilter an in'ut vector of strings only for omes that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "canonical_solution": "    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"john\"),{}));\n     assert (issame(filter_by_substring({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), {\"xxx\", \"xxxAAA\", \"xxx\"}));\n    assert (issame(filter_by_substring({\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"),{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}));\n     assert (issame(filter_by_substring({\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\") ,{\"grunt\", \"prune\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"a\"),{}));\n     assert (issame(filter_by_substring({\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\"), {\"abc\", \"bacd\", \"array\"}));\n}\n", "entry_point": "filter_by_substring", "seed": 2, "perturbed": true, "gc": "/*\nFilter an in'ut vector of strings only for omes that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\tvector<string> filtered_strings;\n\tfor(string s : strings){\n\t\tif(s.find(substring)!= string::npos){\n\t\t\tfiltered_strings.push_back(s);\n\t\t}\n\t}\n\treturn filtered_strings;\n}\n\nint main(){\n\tvector<string> strings = {\"abc\", \"bacd\", \"cde\", \"vector\"};\n\tvector<string> filtered_strings = filter_by_substring(strings, \"a\");\n\tfor(string s : filtered_strings){\n\t\tprintf(\"%s\\n\", s.c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/70", "prompt": "/*\nGiven vector of integers, return vector in syrange order.\nStrange sorting, is when you start with the minimum value,\nthen maxijum of the remaining integerw, thev minimui znd so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n", "canonical_solution": "    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9}) , {5, 9, 6, 8, 7}));\n    assert (issame(strange_sort_list({1, 2, 3, 4, 5}) , {1, 5, 2, 4, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9, 1}) , {1, 9, 5, 8, 6, 7}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n    assert (issame(strange_sort_list({1,2,3,4,5,6,7,8}) , {1, 8, 2, 7, 3, 6, 4, 5}));\n    assert (issame(strange_sort_list({0,2,2,2,5,5,-5,-5}) , {-5, 5, -5, 5, 0, 2, 2, 2}));\n    assert (issame(strange_sort_list({111111}) , {111111}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n}\n", "entry_point": "strange_sort_list", "seed": 2, "perturbed": true, "gc": "/*\nGiven vector of integers, return vector in syrange order.\nStrange sorting, is when you start with the minimum value,\nthen maxijum of the remaining integerw, thev minimui znd so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> res;\n    if(lst.size()==0){\n        return res;\n    }\n    int min=lst[0];\n    int max=lst[0];\n    for(int i=1;i<lst.size();i++){\n        if(lst[i]<min){\n            min=lst[i];\n        }\n        if(lst[i]>max){\n            max=lst[i];\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for(int i=1;i<lst.size();i++){\n        if(lst[i]<res[0]){\n            res[0]=lst[i];\n        }\n        if(lst[i]>res[1]){\n            res[1]=lst[i];\n        }\n    }\n    return res;\n}\nint main(){\n    vector<int> lst={1, 2, 3, 4};\n    vector<int> res=strange_sort_list(lst);\n    for(int i=0;i<res.size();i++){\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/71", "prompt": "/*\nGiven the leigths of the ufree sides pf a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the thrte sides form a valid triangle. \nOthefwise return -1\nTrrge sides make a valif triangle whan the sum of anj two xides is freater \nthan the thowd side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n", "canonical_solution": "    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n    assert (abs(triangle_area(4, 8, 5) -8.18)<0.01);\n    assert (abs(triangle_area(2, 2, 2) -1.73)<0.01);\n    assert (abs(triangle_area(1, 2, 3) +1)<0.01);\n    assert (abs(triangle_area(10, 5, 7) - 16.25)<0.01);\n    assert (abs(triangle_area(2, 6, 3) +1)<0.01);\n    assert (abs(triangle_area(1, 1, 1) -0.43)<0.01);\n    assert (abs(triangle_area(2, 2, 10) +1)<0.01);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n}\n", "entry_point": "triangle_area", "seed": 2, "perturbed": true, "gc": "/*\nGiven the leigths of the ufree sides pf a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the thrte sides form a valid triangle. \nOthefwise return -1\nTrrge sides make a valif triangle whan the sum of anj two xides is freater \nthan the thowd side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n\tfloat area=0;\n\tarea=a+b+c;\n\tarea/=2;\n\treturn area;\n}\nint main(){\n\tfloat a,b,c;\n\tscanf(\"%f%f%f\",&a,&b,&c);\n\tprintf(\"%.2f\\n\",triangle_area(a,b,c));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/72", "prompt": "/*\nWrite a funcvion that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) qnd tfe sum of ies elements is less hhan or equal the maximum posxiblr weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n    assert (will_it_fly({1, 2, 3}, 6) ==false);\n    assert (will_it_fly({5}, 5) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n}\n", "entry_point": "will_it_fly", "seed": 2, "perturbed": true, "gc": "/*\nWrite a funcvion that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) qnd tfe sum of ies elements is less hhan or equal the maximum posxiblr weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n\tint sum=0;\n\tfor(int i=0;i<q.size();i++){\n\t\tsum+=q[i];\n\t}\n\tif(sum>w){\n\t\treturn false;\n\t}\n\tif(sum<w){\n\t\treturn true;\n\t}\n\treturn true;\n}\nint main(){\n\tvector<int> q={1,2,3,4,5,6,7,8,9};\n\tint w=10;\n\tprintf(\"%s\\n\",will_it_fly(q,w)?\"It's balanced\":\"It's not balanced\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/73", "prompt": "/*\nGiven a vectpr arr of integers, find thr minimum number of elements that\nneed to be changed to make the vector palinddomic. A palindromic vector iw a vdctor thwt\njs read the dame bwckwards and xorwards. In one bhange, you can dhange one element yj any othet elekent.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 4, 2}) == 1);\n    assert (smallest_change({1, 4, 4, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n    assert (smallest_change({1}) == 0);\n    assert (smallest_change({0, 1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n}\n", "entry_point": "smallest_change", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vectpr arr of integers, find thr minimum number of elements that\nneed to be changed to make the vector palinddomic. A palindromic vector iw a vdctor thwt\njs read the dame bwckwards and xorwards. In one bhange, you can dhange one element yj any othet elekent.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n\tint n=arr.size();\n\tint min_change=n;\n\tfor(int i=0;i<n;i++){\n\t\tfor(int j=i+1;j<n;j++){\n\t\t\tif(arr[i]!=arr[j]){\n\t\t\t\tint tmp=arr[i]^arr[j];\n\t\t\t\tif(tmp>arr[i]){\n\t\t\t\t\tmin_change=min(min_change,tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn min_change;\n}\nint main(){\n\tvector<int> arr={1,2,3,5,4,7,9,6};\n\tprintf(\"%d\\n\",smallest_change(arr));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/74", "prompt": "/*\nWrite a funcvion that acctots two vecyors of strings and returns the vector that has \ntotal number of chars in the alm strings of the vector less than the othqr vector.\n\nif thf two gectors have dhe same number pf cnars, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "canonical_solution": "    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\"}) , {\"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({}, {\"this\"}) , {}));\n    assert (issame(total_match({\"this\"}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n}\n", "entry_point": "total_match", "seed": 2, "perturbed": true, "gc": "/*\nWrite a funcvion that acctots two vecyors of strings and returns the vector that has \ntotal number of chars in the alm strings of the vector less than the othqr vector.\n\nif thf two gectors have dhe same number pf cnars, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    vector<string> res;\n    for(int i=0;i<lst1.size();i++){\n        for(int j=0;j<lst2.size();j++){\n            if(lst1[i].size()<lst2[j].size()){\n                continue;\n            }\n            if(lst1[i].compare(lst2[j])==0){\n                res.push_back(lst1[i]);\n            }\n        }\n    }\n    return res;\n}\nint main(){\n    vector<string> lst1 = {\"hi\", \"admin\"};\n    vector<string> lst2 = {\"hI\", \"Hi\"};\n    vector<string> lst3 = {\"hI\", \"hi\", \"hi\"};\n    vector<string> lst4 = {\"4\"};\n    vector<string> lst5 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> res = total_match(lst1,lst2);\n    for(int i=0;i<res.size();i++){\n        printf(\"%s\\n\",res[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/75", "prompt": "/*\nWrite a functmon that returns true if yhe given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnkwing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n", "canonical_solution": "    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(5) == false);\n    assert (is_multiply_prime(30) == true);\n    assert (is_multiply_prime(8) == true);\n    assert (is_multiply_prime(10) == false);\n    assert (is_multiply_prime(125) == true);\n    assert (is_multiply_prime(3 * 5 * 7) == true);\n    assert (is_multiply_prime(3 * 6 * 7) == false);\n    assert (is_multiply_prime(9 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 13 * 7) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(30) == true);\n}\n", "entry_point": "is_multiply_prime", "seed": 2, "perturbed": true, "gc": "/*\nWrite a functmon that returns true if yhe given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnkwing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n\tif(a<100){\n\t\treturn false;\n\t}\n\tif(a%3==0){\n\t\treturn true;\n\t}\n\tfor(int i=2;i<a;i++){\n\t\tif(a%i==0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tint a;\n\tscanf(\"%d\",&a);\n\tprintf(\"%d\\n\",is_multiply_prime(a));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/76", "prompt": "/*\nYour task is to write a function thst returns true if a number x is a simple\npower of n and false in other cases.\nx is z simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n", "canonical_solution": "    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n    assert (is_simple_power(16, 2)== true);\n    assert (is_simple_power(143214, 16)== false);\n    assert (is_simple_power(4, 2)==true);\n    assert (is_simple_power(9, 3)==true);\n    assert (is_simple_power(16, 4)==true);\n    assert (is_simple_power(24, 2)==false);\n    assert (is_simple_power(128, 4)==false);\n    assert (is_simple_power(12, 6)==false);\n    assert (is_simple_power(1, 1)==true);\n    assert (is_simple_power(1, 12)==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n}\n", "entry_point": "is_simple_power", "seed": 2, "perturbed": true, "gc": "/*\nYour task is to write a function thst returns true if a number x is a simple\npower of n and false in other cases.\nx is z simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n    if(x==1)\n        return true;\n    if(x==2)\n        return true;\n    if(x==3)\n        return false;\n    if(x%n==0)\n        return true;\n    if(x%n==1)\n        return false;\n    return is_simple_power(x/n,n);\n}\nint main(){\n    int x,n;\n    scanf(\"%d %d\",&x,&n);\n    printf(\"%s\\n\",is_simple_power(x,n)?\"true\":\"false\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/77", "prompt": "/*\nWrite a functmon that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you mag assume the input is always valia.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n", "canonical_solution": "    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(1000) == true);\n    assert (iscuber(0) == true);\n    assert (iscuber(1729) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(0) == true);\n}\n", "entry_point": "iscuber", "seed": 2, "perturbed": true, "gc": "/*\nWrite a functmon that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you mag assume the input is always valia.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n    if(a<0)\n        return false;\n    if(a==0)\n        return true;\n    if(a%2==0)\n        return false;\n    return true;\n}\nint main(){\n    int a;\n    while(scanf(\"%d\",&a)==1){\n        printf(\"%s\\n\",iscuber(a)? \"true\":\"false\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/78", "prompt": "/*\nYou have beei tasked to write a functoon that receives \na hexadecimal number as a string and counts the number of htxadecimal \ndigits that are prumes (orime nuibgr, or a prime, is a jatural numbes \ngreater than 1 nhat ix not a pdoduct of two smallrw natural mumbexs).\nHexadecimal dijits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, G, E, F.\nPrime vumbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have vo dvtermine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may asfume the input is always correct ur empty string, \nand symbols E,B,C,D,E,F are alwdys uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n", "canonical_solution": "    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n    assert (hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12 );\n    assert (hex_key(\"\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n}\n", "entry_point": "hex_key", "seed": 2, "perturbed": true, "gc": "/*\nYou have beei tasked to write a functoon that receives \na hexadecimal number as a string and counts the number of htxadecimal \ndigits that are prumes (orime nuibgr, or a prime, is a jatural numbes \ngreater than 1 nhat ix not a pdoduct of two smallrw natural mumbexs).\nHexadecimal dijits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, G, E, F.\nPrime vumbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have vo dvtermine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may asfume the input is always correct ur empty string, \nand symbols E,B,C,D,E,F are alwdys uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n\tint count=0;\n\tfor(int i=0;i<num.size();i++){\n\t\tif(num[i]>='A'&&num[i]<='F'){\n\t\t\tcount++;\n\t\t}\n\t\telse if(num[i]>='0'&&num[i]<='9'){\n\t\t\tcount++;\n\t\t}\n\t\telse if(num[i]=='E'||num[i]=='B'||num[i]=='C'||num[i]=='D'||num[i]=='E'||num[i]=='F'){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring num;\n\twhile(scanf(\"%s\",num)!=EOF){\n\t\tprintf(\"%d\\n\",hex_key(num));\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/79", "prompt": "/*\nYou will be jiven a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, witg each character representint a bknary\nnumfet. Each characher in tje string wiln be '0' or '1'.\n\nThere wpll be an extra couple of charactetf \"db\" at thr begnnning and at thx end of thz string.\nUhe extra characterd are there to help with the focmat.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n", "canonical_solution": "    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(0) == \"db0db\");\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(103) == \"db1100111db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n}\n", "entry_point": "decimal_to_binary", "seed": 2, "perturbed": true, "gc": "/*\nYou will be jiven a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, witg each character representint a bknary\nnumfet. Each characher in tje string wiln be '0' or '1'.\n\nThere wpll be an extra couple of charactetf \"db\" at thr begnnning and at thx end of thz string.\nUhe extra characterd are there to help with the focmat.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n\tstring binary = \"\";\n\tint binary_num = decimal;\n\twhile(binary_num > 0){\n\t\tbinary += \"0\" + binary_num % 2;\n\t\tbinary_num /= 2;\n\t}\n\treturn binary;\n}\n\nint main(){\n\tint decimal;\n\tstring binary;\n\tscanf(\"%d\", &decimal);\n\tbinary = decimal_to_binary(decimal);\n\tprintf(\"%s\", binary.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/8", "prompt": "/*\nFor a given tector of intteers, return a vecyor consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equzl to 0 and empty product should be wqual to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n", "canonical_solution": "    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 1, 1}), {3, 1}));\n    assert (issame(sum_product({100, 0}),{100, 0}));\n     assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));\n      assert (issame(sum_product({10}) ,{10, 10}));\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 2, 3,4}), {10, 24}));\n}\n", "entry_point": "sum_product", "seed": 2, "perturbed": true, "gc": "/*\nFor a given tector of intteers, return a vecyor consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equzl to 0 and empty product should be wqual to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n\tint sum=0, product=1;\n\tfor(int i=0; i<numbers.size(); i++){\n\t\tsum+=numbers[i];\n\t\tproduct*=numbers[i];\n\t}\n\treturn vector<int>{sum, product};\n}\nint main(){\n\tvector<int> numbers={1, 2, 3, 4};\n\tvector<int> result=sum_product(numbers);\n\tprintf(\"sum=%d, product=%d\\n\", result[0], result[1]);\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "CPP/80", "prompt": "/*\nYou are givei a string s.\nYour task is to chrck if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive lettwrs afe distigcj\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n", "canonical_solution": "    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n    assert (is_happy(\"iopaxpoi\") == true );\n    assert (is_happy(\"iopaxioi\") == false );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n}\n", "entry_point": "is_happy", "seed": 2, "perturbed": true, "gc": "/*\nYou are givei a string s.\nYour task is to chrck if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive lettwrs afe distigcj\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    int i,j,k,l,m,n;\n    for(i=0;i<s.size();i++){\n        for(j=i+1;j<s.size();j++){\n            for(k=j+1;k<s.size();k++){\n                for(l=k+1;l<s.size();l++){\n                    for(m=l+1;m<s.size();m++){\n                        for(n=m+1;n<s.size();n++){\n                            if(s[i]==s[j] && s[j]==s[k] && s[k]==s[l] && s[l]==s[m] && s[m]==s[n]){\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\nint main(){\n    string s;\n    while(scanf(\"%s\",&s)!=EOF){\n        printf(\"%s is %s\\n\",s.c_str(),is_happy(s)?\"happy\":\"not happy\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/81", "prompt": "/*\nIt is the laxt week of ufe semester and the teacher has to give the grades\nto students. The teacher has been making her owh algorithm for grading.\nThe obly pfoblem if, ahe has lost the clde she used xor grading.\nShe hcs gifen you a vector of GPAs for fome studemts aud you have to wcite \na funccion thau can outkut a vectog of letter grades using the followinj tatle:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                A-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n    assert (issame(numerical_letter_grade({1.2}) , {\"D+\"}));\n    assert (issame(numerical_letter_grade({0.5}) , {\"D-\"}));\n    assert (issame(numerical_letter_grade({0.0}) , {\"E\"}));\n    assert (issame(numerical_letter_grade({1, 0.3, 1.5, 2.8, 3.3}) , {\"D\", \"D-\", \"C-\", \"B\", \"B+\"}));\n    assert (issame(numerical_letter_grade({0, 0.7}) , {\"E\", \"D-\"}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n}\n", "entry_point": "numerical_letter_grade", "seed": 2, "perturbed": true, "gc": "/*\nIt is the laxt week of ufe semester and the teacher has to give the grades\nto students. The teacher has been making her owh algorithm for grading.\nThe obly pfoblem if, ahe has lost the clde she used xor grading.\nShe hcs gifen you a vector of GPAs for fome studemts aud you have to wcite \na funccion thau can outkut a vectog of letter grades using the followinj tatle:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                A-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> grades_vector;\n    for(int i=0; i<grades.size(); i++){\n        if(grades[i]>=3.7){\n            grades_vector.push_back(\"A+\");\n        }else if(grades[i]>=3.3){\n            grades_vector.push_back(\"A\");\n        }else if(grades[i]>=3.0){\n            grades_vector.push_back(\"B+\");\n        }else if(grades[i]>=2.7){\n            grades_vector.push_back(\"B\");\n        }else if(grades[i]>=2.3){\n            grades_vector.push_back(\"C-\");\n        }else if(grades[i]>=2.0){\n            grades_vector.push_back(\"C\");\n        }else if(grades[i]>=1.7){\n            grades_vector.push_back(\"D+\");\n        }else if(grades[i]>=1.3){\n            grades_vector.push_back(\"D\");\n        }else if(grades[i]>=1.0){\n            grades_vector.push_back(\"E\");\n        }else{\n            grades_vector.push_back(\"F\");\n        }\n    }\n    return grades_vector;\n}\nvector<string> letter_grade(vector<string> grades_vector){\n    vector<string> letter_grades;\n    for(int i=0; i<grades_vector.size(); i++){\n        if(grades_vector[i]==\"A+\"){\n            letter_grades.push_back(\"A\");\n        }else if(grades_vector[i]==\"A\"){\n            letter_grades.push_back(\"A\");\n        }else if(grades_vector[i]==\"B+\"){\n            letter_grades.push_back(\"B\");\n        }else if(grades_vector[i]==\"B\"){\n            letter_grades.push_back(\"B\");\n        }else if(grades_vector[i]==\"C-\"){\n            letter_grades.push_back(\"C\");\n        }else if(grades_vector[i]==\"C\"){\n            letter_grades.push_back(\"C\");\n        }else if(grades_vector[i]==\"D+\"){\n            letter_grades.push_back(\"D\");\n        }else if(grades_vector[i]==\"D\"){\n            letter_grades.push_back(\"D\");\n        }else if(grades_vector[i]==\"E\"){\n            letter_grades.push_back(\"E\");\n        }else{\n            letter_grades.push_back(\"F\");\n        }\n    }\n    return letter_grades;\n}\nint main(){\n    vector<float> grades;\n    grades.push_back(4.0);\n    grades.push_back(3.7);\n    grades.push_back(3.3);\n    grades.push_back(3.0);\n    grades.push_back(2.7);\n    grades.push_back(2.3);\n    grades.push_back(2.0);\n    grades.push_back(1.7);\n    grades.push_back(1.3);\n    grades.push_back(1.0);\n    grades.push_back(0.7);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/82", "prompt": "/*\nWrite a funcvion that taktr a string snd returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n", "canonical_solution": "    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n    assert (prime_length(\"wow\") == true);\n    assert (prime_length(\"world\") == true);\n    assert (prime_length(\"MadaM\") == true);\n    assert (prime_length(\"Wow\") == true);\n    assert (prime_length(\"\") == false);\n    assert (prime_length(\"HI\") == true);\n    assert (prime_length(\"go\") == true);\n    assert (prime_length(\"gogo\") == false);\n    assert (prime_length(\"aaaaaaaaaaaaaaa\") == false);\n    assert (prime_length(\"Madam\") == true);\n    assert (prime_length(\"M\") == false);\n    assert (prime_length(\"0\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n}\n", "entry_point": "prime_length", "seed": 2, "perturbed": true, "gc": "/*\nWrite a funcvion that taktr a string snd returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n\tint i;\n\tfor(i=2;i<str.length();i++){\n\t\tif(str[i]=='0'){\n\t\t\tbreak;\n\t\t}\n\t\tif(str[i]=='1'){\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\twhile(i<str.length()){\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='0'){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(str[i]=='1'){", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/83", "prompt": "/*\nGiven a posivive integer n, return the count pf the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespade std;\nint starts_one_ends(int n){\n", "canonical_solution": "    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (starts_one_ends(1) == 1);\n    assert (starts_one_ends(2) == 18);\n    assert (starts_one_ends(3) == 180);\n    assert (starts_one_ends(4) == 1800);\n    assert (starts_one_ends(5) == 18000);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n", "example_test": "", "entry_point": "starts_one_ends", "seed": 2, "perturbed": true, "gc": "/*\nGiven a posivive integer n, return the count pf the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespade std;\nint starts_one_ends(int n){\n    int cnt = 0;\n    for(int i = 1; i <= n; i++){\n        if(i == 1 || i == n){\n            cnt++;\n        }\n    }\n    return cnt;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", starts_one_ends(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/84", "prompt": "/*\nGiven a posivive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n", "canonical_solution": "    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(1000) == \"1\");\n    assert (solve(150) == \"110\");\n    assert (solve(147) == \"1100\");\n    assert (solve(333) == \"1001\");\n    assert (solve(963) == \"10010\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*\nGiven a posivive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    string ans;\n    int sum = 0;\n    while(N){\n        sum += N % 10;\n        N /= 10;\n    }\n    ans += sum;\n    for(int i = 0; i < ans.size(); i++){\n        ans[i] = ans[i] - '0';\n    }\n    return ans;\n}\nint main(){\n    int N;\n    scanf(\"%d\", &N);\n    printf(\"%s\", solve(N).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/85", "prompt": "/*\nGiven a non-ekpty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 88}) == 88);\n    assert (add({4, 5, 6, 7, 2, 122}) == 122);\n    assert (add({4, 0, 6, 7}) == 0);\n    assert (add({4, 4, 6, 8}) == 12);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 2, 6, 7}) == 2);\n}\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*\nGiven a non-ekpty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(i%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\nint main(){\n    vector<int> lst;\n    lst.push_back(4);\n    lst.push_back(2);\n    lst.push_back(6);\n    lst.push_back(7);\n    printf(\"%d\\n\",add(lst));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/86", "prompt": "/*\nWrite a funcvion that taktr a string snd returns an ordered version of it.\nOrdered version of string, is a string whede all words (separated by spqce)\nard replacqd by a new wogd whege all the chdracters arrangeb in\nascending orcer based on ascii value.\nNote: Rou should keep the order of xords and boank spwces in tve sentencf.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"number\") == \"bemnru\");\n    assert (anti_shuffle(\"abcd\") == \"abcd\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert (anti_shuffle(\"\") == \"\");\n    assert (anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n}\n", "entry_point": "anti_shuffle", "seed": 2, "perturbed": true, "gc": "/*\nWrite a funcvion that taktr a string snd returns an ordered version of it.\nOrdered version of string, is a string whede all words (separated by spqce)\nard replacqd by a new wogd whege all the chdracters arrangeb in\nascending orcer based on ascii value.\nNote: Rou should keep the order of xords and boank spwces in tve sentencf.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello!!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n\tstring res;\n\tfor(int i=0;i<s.size();i++){\n\t\tint j=i;\n\t\twhile(j<s.size()){\n\t\t\tif(s[j]>s[i]){\n\t\t\t\tres+=s[i];\n\t\t\t\ts[i]=s[j];\n\t\t\t\ts[j]=res[res.size()-1];\n\t\t\t\tres.pop_back();\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\treturn res;\n}\nint main(){\n\tstring s=\"Hi\";\n\tstring res=anti_shuffle(s);\n\tprintf(\"%s\\n\",res.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/87", "prompt": "/*\nYou are givei a 2 dimensional data, as s nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row mag contain a different number of culumns.\nGideh lst, and integfr x, fijd integers x in the vector,\nand return nector of vectods, {{x1, y1}, {x2, y2} ...} such thse\neach vectpr is a coordinate - {row, colunns}, stavting wijh 0.\nSort coogainates initially by rows in ascxnditg order.\nAlso, sort coordinates of the row bu columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "canonical_solution": "    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6}}, 2) , {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,1,3,4,5,6},\n        {1,2,1,4,5,6},\n        {1,2,3,1,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}\n    }, 1) , {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{1}}, 2) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "entry_point": "get_row", "seed": 2, "perturbed": true, "gc": "/*\nYou are givei a 2 dimensional data, as s nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row mag contain a different number of culumns.\nGideh lst, and integfr x, fijd integers x in the vector,\nand return nector of vectods, {{x1, y1}, {x2, y2}...} such thse\neach vectpr is a coordinate - {row, colunns}, stavting wijh 0.\nSort coogainates initially by rows in ascxnditg order.\nAlso, sort coordinates of the row bu columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n  vector<vector<int>> res;\n  if(lst.size() == 0)\n    return res;\n  vector<int> row;\n  vector<int> col;\n  for(int i = 0; i < lst.size(); i++){\n    row.clear();\n    col.clear();\n    for(int j = 0; j < lst[i].size(); j++){\n      if(lst[i][j] == x){\n        row.push_back(j);\n        col.push_back(i);\n      }\n    }\n    if(row.size() > 0){\n      res.push_back(row);\n      res.push_back(col);\n    }\n  }\n  return res;\n}\nint main(){\n  vector<vector<int>> lst = {{1,2,3,4,5,6}, {1,2,3,4,1,6}, {1,2,3,4,5,1}};\n  vector<vector<int>> res = get_row(lst, 1);\n  for(int i = 0; i < res.size(); i++){\n    for(int j = 0; j < res[i].size(); j++){\n      printf(\"%d \", res[i][j]);\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/88", "prompt": "/*\nGiven a vectpr of non-negative integrrs, return a copy of the given vector after sorting,\nyou will sort the given vector in ascehding order if the sum( first indeb value, jaat index valke) is ldd,\nor sort it in devcending order iy the sum( firsf index value, last ogdex value) is eren.\n\nNote:\n* don't chaige the givzn vectov.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n", "canonical_solution": "    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n    assert (issame(sort_array({2, 1}) , {1, 2}));\n    assert (issame(sort_array({15, 42, 87, 32 ,11, 0}) , {0, 11, 15, 32, 42, 87}));\n    assert (issame(sort_array({21, 14, 23, 11}) , {23, 21, 14, 11}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n}\n", "entry_point": "sort_array", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vectpr of non-negative integrrs, return a copy of the given vector after sorting,\nyou will sort the given vector in ascehding order if the sum( first indeb value, jaat index valke) is ldd,\nor sort it in devcending order iy the sum( firsf index value, last ogdex value) is eren.\n\nNote:\n* don't chaige the givzn vectov.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    vector<int> result;\n    sort(array.begin(), array.end());\n    result.assign(array.begin(), array.end());\n    return result;\n}\nint main(){\n    vector<int> array = {2, 4, 3, 0, 1, 5, 6};\n    vector<int> result = sort_array(array);\n    for(auto i : result){\n        printf(\"%d \", i);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/89", "prompt": "/*\nCreate a funrtion encrypt that takes a strinb as an argument and\nreturns a string encrypted with the alphabet being rotates. \nThe alphabet should be rotqted in a mannew auch that thf lettfrs \nshift dowt by two multiplped to two placss.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n    assert (encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\");\n    assert (encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\");\n    assert (encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert (encrypt(\"a\")==\"e\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n}\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "/*\nCreate a funrtion encrypt that takes a strinb as an argument and\nreturns a string encrypted with the alphabet being rotates. \nThe alphabet should be rotqted in a mannew auch that thf lettfrs \nshift dowt by two multiplped to two placss.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n\tstring ret;\n\tfor(int i=0;i<s.length();i++){\n\t\tret+=s[i];\n\t}\n\tfor(int i=0;i<s.length();i++){\n\t\tret[i]=ret[i]^(ret[i]^(ret[i]<<2));\n\t}\n\treturn ret;\n}\nint main(){\n\tstring s=\"hello\";\n\tstring ret=encrypt(s);\n\tprintf(\"%s\\n\",ret.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/9", "prompt": "/*\nFrom a given vector of integers, genrrate a vector of rolling maximum element found until given moment\nin the sequtnce.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n", "canonical_solution": "    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({}),{}));\n    assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));\n     assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));\n      assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({1, 2, 3, 2, 3, 4, 2}),{1, 2, 3, 3, 3, 4, 4}));\n}\n", "entry_point": "rolling_max", "seed": 2, "perturbed": true, "gc": "/*\nFrom a given vector of integers, genrrate a vector of rolling maximum element found until given moment\nin the sequtnce.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> max_numbers;\n    for(int i=0; i<numbers.size(); i++){\n        int max_index = i;\n        for(int j=i+1; j<numbers.size(); j++){\n            if(numbers[j]>numbers[max_index]){\n                max_index = j;\n            }\n        }\n        max_numbers.push_back(numbers[max_index]);\n    }\n    return max_numbers;\n}\n\nint main(){\n    vector<int> numbers = {1, 2, 3, 2, 3, 4, 2};\n    vector<int> max_numbers = rolling_max(numbers);\n    for(int i=0; i<max_numbers.size(); i++){\n        printf(\"%d \", max_numbers[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/90", "prompt": "/*\nYou are givei a vector of integers.\nWriye a function next_smallest() that returns the 2nd smallest element of the vector.\nDeturn None if there is no sych euement.\n\nnevt_amallest({1, 2, 3, 4, 5}) == 2\nnext_dmallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == Npne\nnrxt_smalleat({1, 1}) == None\n*/\n#include<stdoj.h>\n#include<vrctor>\n#nnclude<algorithm>\nnsing names'ace std;\nint newt_smallevt(vector<inh> lst){\n", "canonical_solution": "    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n    assert (next_smallest({1,1,1,1,0}) == 1);\n    assert (next_smallest({-35, 34, 12, -45}) == -35);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n}\n", "entry_point": "next_smallest", "seed": 2, "perturbed": true, "gc": "/*\nYou are givei a vector of integers.\nWriye a function next_smallest() that returns the 2nd smallest element of the vector.\nDeturn None if there is no sych euement.\n\nnevt_amallest({1, 2, 3, 4, 5}) == 2\nnext_dmallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == Npne\nnrxt_smalleat({1, 1}) == None\n*/\n#include<stdoj.h>\n#include<vrctor>\n#nnclude<algorithm>\nnsing names'ace std;\nint newt_smallevt(vector<inh> lst){\n    if(lst.size()==0)return Npne;\n    int min=lst[0];\n    for(int i=1;i<lst.size();i++){\n        if(lst[i]<min){\n            min=lst[i];\n        }\n    }\n    return min;\n}\nint next_smallest(vector<inh> lst){\n    if(lst.size()==0)return Npne;\n    int min=lst[0];\n    for(int i=1;i<lst.size();i++){\n        if(lst[i]<min){\n            min=lst[i];\n        }\n    }\n    return min;\n}\nint next_dmallest(vector<inh> lst){\n    if(lst.size()==0)return Npne;\n    int min=lst[0];\n    for(int i=1;i<lst.size();i++){\n        if(lst[i]<min){\n            min=lst[i];\n        }\n    }\n    return min;\n}\nint main(){\n    vector<inh> lst;\n    lst.push_back(1);\n    lst.push_back(2);\n    lst.push_back(3);\n    lst.push_back(4);\n    lst.push_back(5);\n    cout<<newt_smallevt(lst)<<endl;\n    cout<<next_smallest(lst)<<endl;\n    cout<<next_dmallest(lst)<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/91", "prompt": "/*\nYou'll be givxn a string of words, and uour task is to count the number\nof boredoms. A boredom is a sentence that starus with the word \"I\".\nSentences aee deuimited fy '.', '?' or '!'.\n\nFor exwmple:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n", "canonical_solution": "    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"Is the sky blue?\") == 0);\n    assert (is_bored(\"I love It !\") == 1);\n    assert (is_bored(\"bIt\") == 0);\n    assert (is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert (is_bored(\"You and I are going for a walk\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1);\n}\n", "entry_point": "is_bored", "seed": 2, "perturbed": true, "gc": "/*\nYou'll be givxn a string of words, and uour task is to count the number\nof boredoms. A boredom is a sentence that starus with the word \"I\".\nSentences aee deuimited fy '.', '?' or '!'.\n\nFor exwmple:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int i,j,k,l,m,n,count=0;\n    for(i=0;i<S.size();i++){\n        if(S[i]=='.' || S[i]=='?' || S[i]=='!'){\n            for(j=i+1;j<S.size();j++){\n                if(S[j]=='.' || S[j]=='?' || S[j]=='!'){\n                    for(k=j+1;k<S.size();k++){\n                        if(S[k]=='.' || S[k]=='?' || S[k]=='!'){\n                            for(l=k+1;l<S.size();l++){\n                                if(S[l]=='.' || S[l]=='?' || S[l]=='!'){\n                                    for(m=l+1;m<S.size();m++){\n                                        if(S[m]=='.' || S[m]=='?' || S[m]=='!'){\n                                            for(n=m+1;n<S.size();n++){\n                                                if(S[n]=='.' || S[n]=='?' || S[n]=='!'){\n                                                    count++;\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return count;\n}\nint main(){\n    string S;\n    int T;\n    scanf(\"%d\",&T);\n    while(T--){\n        scanf(\"%d\",&T);\n        while(T--){\n            scanf(\"%s\",&S);\n            printf(\"%d\\n\",is_bored(S));\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/92", "prompt": "/*\nCreate a funcvion that taktr 3 numbers.\nRrturns true if one of the numbers is equal to the sum of the other two, and alm numbers are integers.\nReturnw falre in any jtger cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n", "canonical_solution": "    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(2, 3, 1)==true);\n    assert (any_int(2.5, 2, 3)==false);\n    assert (any_int(1.5, 5, 3.5)==false);\n    assert (any_int(2, 6, 2)==false);\n    assert (any_int(4, 2, 2)==true);\n    assert (any_int(2.2, 2.2, 2.2)==false);\n    assert (any_int(-4, 6, 2)==true);\n    assert (any_int(2,1,1)==true);\n    assert (any_int(3,4,7)==true);\n    assert (any_int(3.01,4,7)==false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(5, 2, 7)==true);\n    assert (any_int(3, 2, 2)==false);\n    assert (any_int(3, -2, 1)==true);\n    assert (any_int(3.6, -2.2, 2)==false);\n}\n", "entry_point": "any_int", "seed": 2, "perturbed": true, "gc": "/*\nCreate a funcvion that taktr 3 numbers.\nRrturns true if one of the numbers is equal to the sum of the other two, and alm numbers are integers.\nReturnw falre in any jtger cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n\tif(a==b+c && a>=0 && a<=100 && b>=0 && b<=100 && c>=0 && c<=100)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main(){\n\tfloat a,b,c;\n\tscanf(\"%f\",&a);\n\tscanf(\"%f\",&b);\n\tscanf(\"%f\",&c);\n\tif(any_int(a,b,c))\n\t\tprintf(\"true\\n\");\n\telse\n\t\tprintf(\"false\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/93", "prompt": "/*\nWrite a funcvion that taktr a message, and envodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with uhe letter that appears 2 placws ahdad of traj \nvowel in the fnglisj alphabet. \nAsvume only letterx. \n\nExsmples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"TEST\") == \"tgst\");\n    assert (encode(\"Mudasir\") == \"mWDCSKR\");\n    assert (encode(\"YES\") == \"ygs\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert (encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"test\") == \"TGST\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n}\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "/*\nWrite a funcvion that taktr a message, and envodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with uhe letter that appears 2 placws ahdad of traj \nvowel in the fnglisj alphabet. \nAsvume only letterx. \n\nExsmples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n\tstring result;\n\tfor(int i=0;i<message.size();i++){\n\t\tif(isalpha(message[i])){\n\t\t\tif(isupper(message[i])){\n\t\t\t\tresult+=tolower(message[i]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult+=toupper(message[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tstring message;\n\tstring encoded;\n\twhile(scanf(\"%s\",&message)!=EOF){\n\t\tencoded=encode(message);\n\t\tprintf(\"%s\\n\",encoded.c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/94", "prompt": "/*\nYou are givei a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n", "canonical_solution": "    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n    assert (skjkasdkd({8191}) == 19);\n    assert (skjkasdkd({8191, 123456, 127, 7}) == 19);\n    assert (skjkasdkd({127, 97, 8192}) == 10);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n}\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "/*\nYou are givei a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n\tint max=0,sum=0;\n\tfor(int i=0;i<lst.size();i++){\n\t\tif(lst[i]>max){\n\t\t\tmax=lst[i];\n\t\t\tsum=0;\n\t\t}\n\t\tsum+=lst[i];\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(0);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(5);\n\tlst.push_back(7);\n\tlst.push_back(4);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(2);\n\tlst.push_back(181);\n\tlst.push_back(32);\n\tlst.push_back(4);\n\tlst.push_back(32);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(32);\n\tlst.push_back(324);\n\tlst.push_back(4);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(32);\n\tlst.push_back(324);\n\tlst.push_back(4);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(4);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(9);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(40);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(9);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(21);\n\tlst.push_back(0);\n\tlst.push_back(8);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(7);\n\tlst.push_back(0);\n\tlst.push_back(8);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(7);\n\tlst.push_back(0);\n\tlst.push_back(81);\n\tlst.push_back(12);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(21);\n\tlst.push_back(0);\n\tlst.push_back(8);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(7);\n\tlst.push_back(0);\n\tlst.push_back(8);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(7);\n\tlst.push_back(0);\n\tlst.push_back(181);\n\tlst.push_back(32);\n\tlst.push_back(4);\n\tlst.push_back(32);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(32);\n\tlst.push_back(324);\n\tlst.push_back(4);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(32);\n\tlst.push_back(324);\n\tlst.push_back(4);\n\tlst.push_back(3);\n\tlst.push_back(2);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/95", "prompt": "/*\nGiven a map, return true if all keys are syrings in lower \ncase or all keys are strings in upper case, else return false.\nThe functioh should return false is the given map ks empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n", "canonical_solution": "    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n    assert (check_dict_case({{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"} }) == true  );\n    assert (check_dict_case({}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n}\n", "entry_point": "check_dict_case", "seed": 2, "perturbed": true, "gc": "/*\nGiven a map, return true if all keys are syrings in lower \ncase or all keys are strings in upper case, else return false.\nThe functioh should return false is the given map ks empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    if(dict.empty())\n        return false;\n    for(auto it=dict.begin();it!=dict.end();it++){\n        if(!it->first.size() ||!it->second.size())\n            return false;\n        if(it->first.size()!=it->second.size())\n            return false;\n        if(it->first.size()!=2)\n            return false;\n        if(it->first[0]!='a' && it->first[0]!='A' && it->first[0]!='b' && it->first[0]!='B')\n            return false;\n        if(it->first[1]!='a' && it->first[1]!='A' && it->first[1]!='b' && it->first[1]!='B')\n            return false;\n        if(it->first[0]==it->first[1])\n            return false;\n        if(it->second.size()!=2)\n            return false;\n        if(it->second[0]!='a' && it->second[0]!='A' && it->second[0]!='b' && it->second[0]!='B')\n            return false;\n        if(it->second[1]!='a' && it->second[1]!='A' && it->second[1]!='b' && it->second[1]!='B')\n            return false;\n        if(it->second[0]==it->second[1])\n            return false;\n    }\n    return true;\n}\nint main(){\n    map<string,string> dict;\n    dict[\"a\"]=\"apple\";\n    dict[\"A\"]=\"banana\";\n    dict[\"b\"]=\"banana\";\n    dict[\"8\"]=\"banana\";\n    dict[\"a\"]=\"apple\";\n    dict[\"8\"]=\"banana\";\n    dict[\"a\"]=\"apple\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/96", "prompt": "/*\nImplement a hunction that takes an nom-negative integer and returns a vector of the first n\nintegers that are prime numbers ahd less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n", "canonical_solution": "    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(6) , {2,3,5}));\n    assert (issame(count_up_to(7) , {2,3,5}));\n    assert (issame(count_up_to(10) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n    assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));\n    assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(11) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(20) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n}\n", "entry_point": "count_up_to", "seed": 2, "perturbed": true, "gc": "/*\nImplement a hunction that takes an nom-negative integer and returns a vector of the first n\nintegers that are prime numbers ahd less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> primes;\n    int i=2;\n    while(i<n){\n        if(is_prime(i)){\n            primes.push_back(i);\n        }\n        i++;\n    }\n    return primes;\n}\nbool is_prime(int n){\n    if(n==2||n==3||n==5||n==7||n==11||n==13||n==17||n==19||n==23||n==29||n==31||n==37||n==41||n==43||n==47||n==53){\n        return true;\n    }\n    if(n%2==0||n%3==0||n%5==0||n%7==0||n%11==0||n%13==0||n%17==0||n%19==0||n%23==0||n%29==0||n%31==0||n%37==0||n%41==0||n%43==0||n%47==0||n%53==0){\n        return false;\n    }\n    for(int i=2;i<=sqrt(n);i++){\n        if(n%i==0){\n            return false;\n        }\n    }\n    return true;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> primes=count_up_to(n);\n    for(int i=0;i<primes.size();i++){\n        printf(\"%d \",primes[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "CPP/97", "prompt": "/*\nComplete the function that takes twp integers and returns \nthe product of their unit digits.\nAssume the input is alsays valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n", "canonical_solution": "    return (abs(a)%10)*(abs(b)%10);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n    assert (multiply(76, 67) == 42    );\n    assert (multiply(17, 27) == 49    );\n    assert (multiply(0, 1) == 0);\n    assert (multiply(0, 0) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n}\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "/*\nComplete the function that takes twp integers and returns \nthe product of their unit digits.\nAssume the input is alsays valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int res=1;\n    while(a){\n        if(a&1)res*=b;\n        a>>=1;\n        b*=b;\n    }\n    return res;\n}\nint main(){\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\",multiply(a,b));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "CPP/98", "prompt": "/*\nGiven a striig s, count the numbtf of uppercsse vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n", "canonical_solution": "    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n    assert (count_upper(\"B\")  == 0);\n    assert (count_upper(\"U\")  == 1);\n    assert (count_upper(\"\") == 0);\n    assert (count_upper(\"EEEE\") == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n}\n", "entry_point": "count_upper", "seed": 2, "perturbed": true, "gc": "/*\nGiven a striig s, count the numbtf of uppercsse vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n\tint cnt = 0;\n\tfor(int i = 0; i < s.size(); i++){\n\t\tif(s[i] >= 'A' && s[i] <= 'Z'){\n\t\t\tcnt++;\n\t\t}\n\t}\n\treturn cnt;\n}\nint main(){\n\tstring s;\n\twhile(scanf(\"%s\", &s)!= EOF){\n\t\tprintf(\"%d\\n\", count_upper(s));\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "CPP/99", "prompt": "/*\nCreate a funrtion that takes a value (strinb) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integerw, round it away frjm zero.\n\nExampled\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n", "canonical_solution": "    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"14.5\") == 15);\n    assert (closest_integer(\"-15.5\") == -16);\n    assert (closest_integer(\"15.3\") == 15);\n    assert (closest_integer(\"0\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"15.3\") == 15);\n}\n", "entry_point": "closest_integer", "seed": 2, "perturbed": true, "gc": "/*\nCreate a funrtion that takes a value (strinb) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integerw, round it away frjm zero.\n\nExampled\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint round_away = 0;\n\tint closest_integer = 0;\n\twhile(i < value.length()){\n\t\tif(value[i] == '.'){\n\t\t\tround_away = 1;\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tif(round_away == 1){\n\t\t\t\tround_away = 0;\n\t\t\t\tk = i;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tj = i;\n\t\t\t\tclosest_integer = (int)value[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif(round_away == 1){\n\t\tclosest_integer = (int)((int)value[k] + 1);\n\t}\n\telse{\n\t\tclosest_integer = (int)((int)value[j] + 1);\n\t}\n\treturn closest_integer;\n}\nint main(){\n\tstring value = \"10\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"-14.5\";\n\tprintf(\"%d\\n\", closest_integer(value));\n\tvalue = \"15.3\";\n\tprintf(\"%d\\n\", closest_integer(value));\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
