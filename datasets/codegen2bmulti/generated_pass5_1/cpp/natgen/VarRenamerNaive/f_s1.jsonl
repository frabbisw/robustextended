{"task_id": "CPP/0", "prompt": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include <stdio.h>\n#include <vector>\n#include <math.h>\nusing std;\nbool has_close_elements(vector < float > numbers, float threshold) {\n    int VAR_0, j;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (VAR_0 = 0; i<numbers.size(); VAR_0++)\n    \n    for (j = VAR_0 + 1; j < numbers.size(); j++)\n    if (abs(numbers [ VAR_0 ] - numbers [ j ]) < threshold)\n    return true;\n    \n    return false;\n    }\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert (has_close_elements(a, 0.3)==true);\n    assert (has_close_elements(a, 0.05) == false);\n\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);\n    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);\n    \n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (has_close_elements({1.0, 2.0, 3.0}, 0.5) == false && \"failure 1\");\n    assert (has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3) && \"failure 2\") ;\n}\n", "entry_point": "has_close_elements", "partial": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    int i,j;\n    \n    # print('@@this is the line to split##')\n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n", "gc": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include <stdio.h>\n#include <vector>\n#include <math.h>\nusing std;\nbool has_close_elements(vector < float > numbers, float threshold) {\n    int VAR_0, j;\n   \n    for (VAR_0 = 0; VAR_0 < numbers.size(); VAR_0++) {\n        for (j = VAR_0 + 1; j < numbers.size(); j++) {\n            if (fabs(numbers[VAR_0] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nint main() {\n    vector < float > numbers;\n    numbers.push_back(1.0);\n    numbers.push_back(2.0);\n    numbers.push_back(3.0);\n    numbers.push_back(4.0);\n    numbers.push_back(5.0);\n    numbers.push_back(2.0);\n    printf(\"%s\\n\", has_close_elements(numbers, 0.5)? \"true\" : \"false\");\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/1", "prompt": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < string > separate_paren_groups(string paren_string) {\n    vector < string > all_parens;\n    string current_paren;\n    int level = 0;\n    char VAR_0;\n    int i;\n    for (i = 0; i < paren_string.length(); i++)\n     {\n        VAR_0 = paren_string [ i ];\n        if (VAR_0 == ' ')\n         {\n           \n", "canonical_solution": "print(' @ this is the line to split ## ' level+=1;\n            current_paren+=VAR_0;\n            }\n        if (VAR_0 == ' ')\n         {\n            level-=1;\n            current_paren+=VAR_0;\n            if (level == 0) {\n                all_parens.push_back(current_paren);\n                current_paren = \"\";\n                }\n            }\n        }\n    return all_parens;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));\n    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));\n    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));\n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}\n", "entry_point": "separate_paren_groups", "partial": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        # print('@@this is the line to split##')\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n", "gc": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < string > separate_paren_groups(string paren_string) {\n    vector < string > all_parens;\n    string current_paren;\n    int level = 0;\n    char VAR_0;\n    int i;\n    for (i = 0; i < paren_string.length(); i++)\n     {\n        VAR_0 = paren_string [ i ];\n        if (VAR_0 =='')\n         {\n           \n         }\n        else if (VAR_0 == '(')\n         {\n            level++;\n            current_paren += VAR_0;\n         }\n        else if (VAR_0 == ')')\n         {\n            if (level == 0)\n             {\n                all_parens.push_back(current_paren);\n                current_paren = \"\";\n             }\n            else\n             {\n                level--;\n                current_paren += VAR_0;\n             }\n         }\n        else if (VAR_0 == '{')\n         {\n            if (level == 0)\n             {\n                all_parens.push_back(current_paren);\n                current_paren = \"\";\n             }\n            else\n             {\n                level++;\n                current_paren += VAR_0;\n             }\n         }\n        else if (VAR_0 == '}')\n         {\n            if (level == 0)\n             {\n                all_parens.push_back(current_paren);\n                current_paren = \"\";\n             }\n            else\n             {\n                level--;\n                current_paren += VAR_0;\n             }\n         }\n     }\n    if (level!= 0)\n     {\n        all_parens.push_back(current_paren);\n     }\n    return all_parens;\n}\nint main()\n{\n    vector < string > paren_groups = separate_paren_groups(\"( ) (( )) (( )( ))\");\n    for (int i = 0; i < paren_groups.size(); i++)\n     {\n        printf(\"%s\\n\", paren_groups[i].c_str());\n     }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/10", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\nint VAR_0;\nfor (VAR_0 = 0; VAR_0 < str.length(); VAR_0++)\n {\n    string rstr = str.substr(VAR_0);\n    if (is_palindrome(rstr))\n     {\n        string nstr;\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' nstr = str.substr(0, VAR_0);\n        string n2str(nstr.rbegin(), nstr.rend());\n        return str + n2str;\n        }\n    }\nstring n2str(str.rbegin(), str.rend());\nreturn str + n2str;\n}", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"x\") == \"x\");\n     assert (make_palindrome(\"xyz\") == \"xyzyx\");\n     assert (make_palindrome(\"xyx\") == \"xyx\") ;\n     assert (make_palindrome(\"jerry\") == \"jerryrrej\");\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"cat\") == \"catac\");\n     assert (make_palindrome(\"cata\") == \"catac\");\n}\n", "entry_point": "make_palindrome", "partial": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            # print('@@this is the line to split##')\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n", "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\nint VAR_0;\nfor (VAR_0 = 0; VAR_0 < str.length(); VAR_0++)\n {\n    string rstr = str.substr(VAR_0);\n    if (is_palindrome(rstr))\n     {\n        string nstr;\n       \n        for (int VAR_1 = 0; VAR_1 < rstr.length(); VAR_1++)\n         {\n            nstr += rstr.substr(VAR_1,1);\n         }\n        nstr += rstr.substr(rstr.length()-1,1);\n        str = nstr;\n        break;\n     }\n }\nreturn str;\n}\nint main(){\n    string str;\n    while(cin>>str){\n        cout<<make_palindrome(str)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/100", "prompt": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > make_a_pile(int n) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' vector < int > VAR_0 = {\n        n}\n    ;\n    for (int i = 1; i < n; i++)\n    VAR_0.push_back(VAR_0 [ VAR_0.size() - 1 ] + 2);\n    return VAR_0;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n    assert (issame(make_a_pile(4) , {4,6,8,10}));\n    assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));\n    assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));\n    assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n}\n", "entry_point": "make_a_pile", "partial": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    # print('@@this is the line to split##')\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n", "gc": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > make_a_pile(int n) {\n   \n    vector < int > res;\n    res.push_back(n);\n    if (n == 1) return res;\n    int i = 2;\n    while (i <= n) {\n        res.push_back(n - i);\n        i += 2;\n    }\n    return res;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > res = make_a_pile(n);\n    for (int i = 0; i < res.size(); i++) {\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/101", "prompt": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < string > words_string(string VAR_0) {\n    string current = \"\";\n    vector < string > out = {\n        }\n    ;\n    VAR_0 = VAR_0 + ' ';\n    for (int i = 0; i < VAR_0.length(); i++)\n    if (VAR_0 [ i ] == ' ' or VAR_0 [ i ] == ' ')\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (current.length() > 0)\n         {\n            out.push_back(current);\n            current = \"\";\n            }\n        }\n    else current = current + VAR_0 [ i ];\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"Hi, my name\") , {\"Hi\", \"my\", \"name\"}));\n    assert (issame(words_string(\"One,, two, three, four, five, six,\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"\") , {}));\n    assert (issame(words_string(\"ahmed     , gamal\") , {\"ahmed\", \"gamal\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n}\n", "entry_point": "words_string", "partial": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     # print('@@this is the line to split##')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n", "gc": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\",'six\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < string > words_string(string VAR_0) {\n    string current = \"\";\n    vector < string > out = {\n        }\n    ;\n    VAR_0 = VAR_0 +'';\n    for (int i = 0; i < VAR_0.length(); i++)\n    if (VAR_0 [ i ] =='' or VAR_0 [ i ] =='')\n   \n    {\n        current = current + VAR_0 [ i ];\n        out.push_back(current);\n        current = \"\";\n    }\n    return out;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/102", "prompt": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include <stdio.h>\nusing std;\nint choose_num(int x, int VAR_0) {\n    if (VAR_0 < x) return -1;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (VAR_0 == x and VAR_0 % 2 == 1) return - 1;\n    if (VAR_0 % 2 == 1) return VAR_0 - 1;\n    return VAR_0;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n    assert (choose_num(33, 12354) == 12354);\n    assert (choose_num(5234, 5233) == -1);\n    assert (choose_num(6, 29) == 28);\n    assert (choose_num(27, 10) == -1);\n    assert (choose_num(7, 7) == -1);\n    assert (choose_num(546, 546) == 546);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n}\n", "entry_point": "choose_num", "partial": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    # print('@@this is the line to split##')\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n", "gc": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include <stdio.h>\nusing std;\nint choose_num(int x, int VAR_0) {\n    if (VAR_0 < x) return -1;\n   \n    int i = 0;\n    while (x > 1) {\n        if (x % 2 == 0) {\n            x /= 2;\n            i++;\n        } else {\n            x = 3 * x + 1;\n        }\n    }\n    return i;\n}\n\nint main() {\n    int x, VAR_0;\n    scanf(\"%d %d\", &x, &VAR_0);\n    printf(\"%d\\n\", choose_num(x, VAR_0));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/103", "prompt": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include <stdio.h>\n#include <math.h>\n#include <string>\nusing std;\nstring rounded_avg(int n, int m) {\n    if (n > m) return \"-1\";\n    int VAR_0 =(m + n) / 2;\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' string out = \"\";\n    while (VAR_0 > 0)\n     {\n        out = to_string(VAR_0 % 2) + out;\n        VAR_0 = VAR_0 / 2;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 13) == \"1010\");\n    assert (rounded_avg(964,977) == \"1111001010\");\n    assert (rounded_avg(996,997) == \"1111100100\");\n    assert (rounded_avg(560,851) == \"1011000001\");  \n    assert (rounded_avg(185,546) == \"101101101\");\n    assert (rounded_avg(362,496) == \"110101101\");\n    assert (rounded_avg(350,902) == \"1001110010\");\n    assert (rounded_avg(197,233) == \"11010111\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(5, 1) == \"-1\");\n    assert (rounded_avg(5, 5) == \"101\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(10,20) == \"1111\");\n    assert (rounded_avg(20,33) == \"11010\");\n}\n", "entry_point": "rounded_avg", "partial": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    # print('@@this is the line to split##')\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n", "gc": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include <stdio.h>\n#include <math.h>\n#include <string>\nusing std;\nstring rounded_avg(int n, int m) {\n    if (n > m) return \"-1\";\n    int VAR_0 =(m + n) / 2;\n   \n    int VAR_1 = VAR_0 + 1;\n    int VAR_2 = VAR_1 + 1;\n    int VAR_3 = VAR_2 + 1;\n    int VAR_4 = VAR_3 + 1;\n    int VAR_5 = VAR_4 + 1;\n    int VAR_6 = VAR_5 + 1;\n    int VAR_7 = VAR_6 + 1;\n    int VAR_8 = VAR_7 + 1;\n    int VAR_9 = VAR_8 + 1;\n    int VAR_10 = VAR_9 + 1;\n    int VAR_11 = VAR_10 + 1;\n    int VAR_12 = VAR_11 + 1;\n    int VAR_13 = VAR_12 + 1;\n    int VAR_14 = VAR_13 + 1;\n    int VAR_15 = VAR_14 + 1;\n    int VAR_16 = VAR_15 + 1;\n    int VAR_17 = VAR_16 + 1;\n    int VAR_18 = VAR_17 + 1;\n    int VAR_19 = VAR_18 + 1;\n    int VAR_20 = VAR_19 + 1;\n    int VAR_21 = VAR_20 + 1;\n    int VAR_22 = VAR_21 + 1;\n    int VAR_23 = VAR_22 + 1;\n    int VAR_24 = VAR_23 + 1;\n    int VAR_25 = VAR_24 + 1;\n    int VAR_26 = VAR_25 + 1;\n    int VAR_27 = VAR_26 + 1;\n    int VAR_28 = VAR_27 + 1;\n    int VAR_29 = VAR_28 + 1;\n    int VAR_30 = VAR_29 + 1;\n    int VAR_31 = VAR_30 + 1;\n    int VAR_32 = VAR_31 + 1;\n    int VAR_33 = VAR_32 + 1;\n    int VAR_34 = VAR_33 + 1;\n    int VAR_35 = VAR_34 + 1;\n    int VAR_36 = VAR_35 + 1;\n    int VAR_37 = VAR_36 + 1;\n    int VAR_38 = VAR_37 + 1;\n    int VAR_39 = VAR_38 + 1;\n    int VAR_40 = VAR_39 + 1;\n    int VAR_41 = VAR_40 + 1;\n    int VAR_42 = VAR_41 + 1;\n    int VAR_43 = VAR_42 + 1;\n    int VAR_44 = VAR_43 + 1;\n    int VAR_45 = VAR_44 + 1;\n    int VAR_46 = VAR_45 + 1;\n    int VAR_47 = VAR_46 + 1;\n    int VAR_48 = VAR_47 + 1;\n    int VAR_49 = VAR_48 + 1;\n    int VAR_50 = VAR_49 + 1;\n    int VAR_51 = VAR_50 + 1;\n    int VAR_52 = VAR_51 + 1;\n    int VAR_53 = VAR_52 + 1;\n    int VAR_54 = VAR_53 + 1;\n    int VAR_55 = VAR_54 + 1;\n    int VAR_56 = VAR_55 + 1;\n    int VAR_57 = VAR_56 + 1;\n    int VAR_58 = VAR_57 + 1;\n    int VAR_59 = VAR_58 + 1;\n    int VAR_60 = VAR_59 + 1;\n    int VAR_61 = VAR_60 + 1;\n    int VAR_62 = VAR_61 + 1;\n    int VAR_63 = VAR_62 + 1;\n    int VAR_64 = VAR_63 + 1;\n    int VAR_65 = VAR_64 + 1;\n    int VAR_66 = VAR_65 + 1;\n    int VAR_67 = VAR_66 + 1;\n    int VAR_68 = VAR_67 + 1;\n    int VAR_69 = VAR_68 + 1;\n    int VAR_70 = VAR_69 + 1;\n    int VAR_71 = VAR_70 + 1;\n    int VAR_72 = VAR_71 + 1;\n    int VAR_73 = VAR_72 + 1;\n    int VAR_74 = VAR_73 + 1;\n    int VAR_75 = VAR_74 + 1;\n    int VAR_76 = VAR_75 + 1;\n    int VAR_77 = VAR_76 + 1;\n    int VAR_78 = VAR_77 + 1;\n    int VAR_79 = VAR_78 + 1;\n    int VAR_80 = VAR_79 + 1;\n    int VAR_81 = VAR_80 + 1;\n    int VAR_82 = VAR_81 + 1;\n    int VAR_83 = VAR_82 + 1;\n    int VAR_84 = VAR_83 + 1;\n    int VAR_85 = VAR_84 + 1;\n    int VAR_86 = VAR_85 + 1;\n    int VAR_87 = VAR_86 + 1;\n    int VAR_88 = VAR_87 + 1;\n    int VAR_89 = VAR_88 + 1;\n    ", "passed": 0, "run_status": 2}
{"task_id": "CPP/104", "prompt": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > unique_digits(vector < int > x) {\n    vector < int > out = {\n        }\n    ;\n    for (int i = 0; i < x.size(); i++)\n     {\n        int VAR_0 = x [ i ];\n        bool u = true;\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (VAR_0 == 0) u = false;\n        while (VAR_0 > 0 and u)\n         {\n            if (VAR_0 % 2 == 0) u = false;\n            VAR_0 = VAR_0 / 10;\n            }\n        if (u) out.push_back(x [ i ]);\n        }\n    sort(out.begin(), out.end());\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n    assert (issame(unique_digits({12345, 2033, 111, 151}) , {111, 151}));\n    assert (issame(unique_digits({135, 103, 31}) , {31, 135}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n}\n", "entry_point": "unique_digits", "partial": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            # print('@@this is the line to split##')\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "gc": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > unique_digits(vector < int > x) {\n    vector < int > out = {\n        }\n    ;\n    for (int i = 0; i < x.size(); i++)\n     {\n        int VAR_0 = x [ i ];\n        bool u = true;\n       \n        for (int j = 0; j < 10; j++)\n        {\n            if (VAR_0 % 10 == 0)\n            {\n                u = false;\n                break;\n            }\n            VAR_0 = VAR_0 / 10;\n        }\n        if (u)\n        {\n            out.push_back(VAR_0);\n        }\n    }\n    return out;\n}\n\nint main() {\n    vector < int > x = {\n        15, 33, 1422, 1\n    };\n    vector < int > out = unique_digits(x);\n    for (int i = 0; i < out.size(); i++)\n    {\n        printf(\"%d \", out [ i ]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/105", "prompt": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\nusing std;\nvector < string > by_length(vector < int > VAR_0) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' map < int, string > numto = {\n         {\n            0, \"Zero\"}\n        , {\n            1, \"One\"}\n        , {\n            2, \"Two\"}\n        , {\n            3, \"Three\"}\n        , {\n            4, \"Four\"}\n        , {\n            5, \"Five\"}\n        , {\n            6, \"Six\"}\n        , {\n            7, \"Seven\"}\n        , {\n            8, \"Eight\"}\n        , {\n            9, \"Nine\"}\n        }\n    ;\n    sort(VAR_0.begin(), VAR_0.end());\n    vector < string > out = {\n        }\n    ;\n    for (int i = VAR_0.size() - 1; i >= 0; i-=1)\n    if (VAR_0 [ i ] >= 1 and VAR_0 [ i ] <= 9)\n    out.push_back(numto [ VAR_0 [ i ] ]);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n    assert (issame(by_length({1, -1, 3, 2}) , {\"Three\", \"Two\", \"One\"}));\n    assert (issame(by_length({9, 4, 8}) , {\"Nine\", \"Eight\", \"Four\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n}\n", "entry_point": "by_length", "partial": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    # print('@@this is the line to split##')\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n", "gc": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1, 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\nusing std;\nvector < string > by_length(vector < int > VAR_0) {\n   \n   vector < string > result;\n   \n   if (VAR_0.size() == 0) {\n      return result;\n   }\n   \n   sort(VAR_0.begin(), VAR_0.end());\n   reverse(VAR_0.begin(), VAR_0.end());\n   \n   for (int i = 0; i < VAR_0.size(); i++) {\n      result.push_back(string(1, VAR_0[i] + '0'));\n   }\n   \n   return result;\n}\n\nint main() {\n   \n   vector < int > VAR_0;\n   \n   VAR_0.push_back(2);\n   VAR_0.push_back(1);\n   VAR_0.push_back(1);\n   VAR_0.push_back(4);\n   VAR_0.push_back(5);\n   VAR_0.push_back(8);\n   VAR_0.push_back(2);\n   VAR_0.push_back(3);\n   \n   vector < string > result = by_length(VAR_0);\n   \n   for (int i = 0; i < result.size(); i++) {\n      printf(\"%s\\n\", result[i].c_str());\n   }\n   \n   return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/106", "prompt": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > f(int n) {\n    int sum = 0, prod = 1;\n    vector < int > out = {\n        }\n    ;\n    for (int VAR_0 = 1; VAR_0 <= n; VAR_0++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        sum+=VAR_0;\n        prod *= VAR_0;\n        if (VAR_0 % 2 == 0) out.push_back(prod);\n        else out.push_back(sum);\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n    assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));\n    assert (issame(f(1) , {1}));\n    assert (issame(f(3) , {1, 2, 6}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n}\n", "entry_point": "f", "partial": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    # print('@@this is the line to split##')\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n", "gc": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > f(int n) {\n    int sum = 0, prod = 1;\n    vector < int > out = {\n        }\n    ;\n    for (int VAR_0 = 1; VAR_0 <= n; VAR_0++)\n   \n    {\n        sum = prod;\n        prod = sum * VAR_0;\n        out.push_back(sum);\n    }\n    return out;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > out = f(n);\n    for (int VAR_0 = 0; VAR_0 < out.size(); VAR_0++)\n    {\n        printf(\"%d \", out[VAR_0]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/107", "prompt": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < int > even_odd_palindrome(int n) {\n    int num1 = 0, num2 = 0;\n    for (int VAR_0 = 1; VAR_0 <= n; VAR_0++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' string w = to_string(VAR_0);\n        string p(w.rbegin(), w.rend());\n        if (w == p and VAR_0 % 2 == 1) num1+=1;\n        if (w == p and VAR_0 % 2 == 0) num2+=1;\n        }\n    return {\n        num2, num1}\n    ;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(123) , {8, 13}));\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n    assert (issame(even_odd_palindrome(63) , {6, 8}));\n    assert (issame(even_odd_palindrome(25) , {5, 6}));\n    assert (issame(even_odd_palindrome(19) , {4, 6}));\n    assert (issame(even_odd_palindrome(9) , {4, 5}));\n    assert (issame(even_odd_palindrome(1) , {0, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n}\n", "entry_point": "even_odd_palindrome", "partial": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        # print('@@this is the line to split##')\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n", "gc": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < int > even_odd_palindrome(int n) {\n    int num1 = 0, num2 = 0;\n    for (int VAR_0 = 1; VAR_0 <= n; VAR_0++)\n     {\n       \n       if (VAR_0 % 2 == 0)\n         num1++;\n       else\n         num2++;\n       \n     }\n    vector < int > ret;\n    ret.push_back(num1);\n    ret.push_back(num2);\n    return ret;\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > ret = even_odd_palindrome(n);\n    for (int i = 0; i < ret.size(); i++)\n    {\n        printf(\"%d \", ret[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/108", "prompt": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nint count_nums(vector < int > n) {\n    int num = 0;\n    for (int i = 0; i < n.size(); i++)\n    if (n [ i ] > 0) num+=1;\n    else\n     {\n        int sum = 0;\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' int VAR_0;\n        VAR_0 = abs(n [ i ]);\n        while (VAR_0 >= 10)\n         {\n            sum+=VAR_0 % 10;\n            VAR_0 = VAR_0 / 10;\n            }\n        sum-=VAR_0;\n        if (sum > 0) num+=1;\n        }\n    return num;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, -2, 0}) == 0);\n    assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);\n    assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);\n    assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);\n    assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);\n    assert (count_nums({-0, 1}) == 1);\n    assert (count_nums({1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, 11, -11}) == 1);\n    assert (count_nums({1, 1, 2}) == 3);\n}\n", "entry_point": "count_nums", "partial": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            # print('@@this is the line to split##')\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n", "gc": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nint count_nums(vector < int > n) {\n    int num = 0;\n    for (int i = 0; i < n.size(); i++)\n    if (n [ i ] > 0) num+=1;\n    else\n     {\n        int sum = 0;\n       \n        for (int i = 0; i < n.size(); i++)\n        if (n [ i ] < 0) sum+=n [ i ];\n        else sum+=n [ i ] % 10;\n        if (sum > 0) num+=1;\n     }\n    return num;\n}\nint main()\n{\n    vector < int > v;\n    v.push_back(1);\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(-1);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(1);\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(-1);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(1);\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(-1);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(1);\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(-1);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(1);\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(-1);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(1);\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(-1);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(1);\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(-1);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(1);\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(-1);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(1);\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(-1);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(1);\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(-1);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(1);\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(-1);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(1);\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(-1);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(1);\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(-1);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(1);\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(-1);\n    v.push_back(-11);\n    v.push_back(11);\n    v.push_back(-11);", "passed": 0, "run_status": 1}
{"task_id": "CPP/109", "prompt": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nbool move_one_ball(vector < int > VAR_0) {\n    int num = 0;\n    if (VAR_0.size() == 0) return true;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i =1;i<arr.size(); i++)\n    if (VAR_0 [ i ] < VAR_0 [ i - 1 ]) num+=1;\n    if (VAR_0 [ VAR_0.size() - 1 ] > VAR_0 [ 0 ]) num+=1;\n    if (num < 2) return true;\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 10, 1, 2})==true);\n    assert (move_one_ball({4, 3, 1, 2})==false);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n    assert (move_one_ball({})==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n}\n", "entry_point": "move_one_ball", "partial": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    int num=0;\n    if (arr.size()==0) return true;\n    # print('@@this is the line to split##')\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n", "gc": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2],..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nbool move_one_ball(vector < int > VAR_0) {\n    int num = 0;\n    if (VAR_0.size() == 0) return true;\n   \n    for (int i = 0; i < VAR_0.size(); i++) {\n        num = VAR_0[i];\n        VAR_0[i] = VAR_0[VAR_0.size() - 1];\n        VAR_0[VAR_0.size() - 1] = num;\n    }\n    return false;\n}\nint main() {\n    vector < int > VAR_0;\n    VAR_0.push_back(3);\n    VAR_0.push_back(4);\n    VAR_0.push_back(5);\n    VAR_0.push_back(1);\n    VAR_0.push_back(2);\n    move_one_ball(VAR_0);\n    for (int i = 0; i < VAR_0.size(); i++) {\n        printf(\"%d \", VAR_0[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/11", "prompt": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring string_xor(string a, string b) {\n    string output = \"\";\n    for (int VAR_0 = 0;(VAR_0 < a.length() and VAR_0 < b.length()); VAR_0++)\n     {\n        if (VAR_0 < a.length() and VAR_0 < b.length())\n         {\n            if (a [ VAR_0 ] == b [ VAR_0 ]) {\n                output+=' ';\n                }\n           \n", "canonical_solution": "print(' @ this is the line to split ## ' else output+=' ';\n            }\n        else\n         {\n            if (VAR_0 >= a.length()) {\n                output+=b [ VAR_0 ];\n                }\n            else output+=a [ VAR_0 ];\n            }\n        }\n    return output;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"111000\", \"101010\") == \"010010\");\n     assert (string_xor(\"1\", \"1\") == \"0\");\n    assert (string_xor(\"0101\", \"0000\") == \"0101\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"010\", \"110\") == \"100\");\n}\n", "entry_point": "string_xor", "partial": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            # print('@@this is the line to split##')\n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n", "gc": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring string_xor(string a, string b) {\n    string output = \"\";\n    for (int VAR_0 = 0;(VAR_0 < a.length() and VAR_0 < b.length()); VAR_0++)\n     {\n        if (VAR_0 < a.length() and VAR_0 < b.length())\n         {\n            if (a [ VAR_0 ] == b [ VAR_0 ]) {\n                output+=' ';\n                }\n           \n            else\n             {\n                output+='0';\n                }\n            }\n        else\n         {\n            output+='0';\n            }\n        }\n    return output;\n    }\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/110", "prompt": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nstring exchange(vector < int > lst1, vector < int > lst2) {\n    int num = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 =0;i<lst1.size(); VAR_0++)\n    if (lst1 [ VAR_0 ] % 2 == 0) num+=1;\n    for (int VAR_0 = 0; VAR_0 < lst2.size(); VAR_0++)\n    if (lst2 [ VAR_0 ] % 2 == 0) num+=1;\n    if (num >= lst1.size()) return \"YES\";\n    return \"NO\";\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == \"YES\" );\n    assert (exchange({5, 7, 3}, {2, 6, 4}) == \"YES\");\n    assert (exchange({5, 7, 3}, {2, 6, 3}) == \"NO\" );\n    assert (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == \"NO\");\n    assert (exchange({100, 200}, {200, 200}) == \"YES\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n}\n", "entry_point": "exchange", "partial": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int num=0;\n    # print('@@this is the line to split##')\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n", "gc": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nstring exchange(vector < int > lst1, vector < int > lst2) {\n    int num = 0;\n   \n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i] % 2 == 0) {\n            num++;\n        }\n    }\n    if (num == 0) {\n        return \"NO\";\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2[i] % 2 == 0) {\n            num--;\n        }\n    }\n    if (num == 0) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\nint main() {\n    vector < int > lst1 = {1, 2, 3, 4};\n    vector < int > lst2 = {1, 5, 3, 4};\n    string result = exchange(lst1, lst2);\n    printf(\"%s\\n\", result.c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/111", "prompt": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include <stdio.h>\n#include <string>\n#include <map>\nusing std;\nmap < char, int > histogram(string test) {\n    map < char, int > count = {\n        }\n    , out = {\n        }\n    ;\n    map < char, int > :: iterator it;\n    int max = 0;\n    for (int VAR_0 = 0; VAR_0 < test.length(); VAR_0++)\n    if (test [ VAR_0 ] != ' ')\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' count [ test [ VAR_0 ] ]+=1;\n        if (count [ test [ VAR_0 ] ] > max) max = count [ test [ VAR_0 ] ];\n        }\n    for (it = count.begin(); it != count.end(); it++)\n     {\n        char w1 = it -> first;\n        int w2 = it -> second;\n        if (w2 == max) out [ w1 ] = w2;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c d g\") , {{'a', 1}, {'b', 1}, {'c', 1}, {'d', 1}, {'g', 1}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"\") , {}));\n    assert (issame(histogram(\"a\") , {{'a', 1}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c\") , {{'a', 1},{'b', 1},{'c', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"\") , {}));\n}\n", "entry_point": "histogram", "partial": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            # print('@@this is the line to split##')\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n", "gc": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include <stdio.h>\n#include <string>\n#include <map>\nusing std;\nmap < char, int > histogram(string test) {\n    map < char, int > count = {\n        }\n   , out = {\n        }\n    ;\n    map < char, int > :: iterator it;\n    int max = 0;\n    for (int VAR_0 = 0; VAR_0 < test.length(); VAR_0++)\n    if (test [ VAR_0 ]!='')\n     {\n       \n        it = out.find (test [ VAR_0 ]);\n        if (it == out.end ())\n         {\n           out [ test [ VAR_0 ] ] = 1;\n         }\n        else\n         {\n           it -> second ++;\n         }\n        if (it -> second > max)\n         {\n           max = it -> second;\n         }\n     }\n    return out;\n}\nint main()\n{\n    string test = \"a b c\";\n    map < char, int > hist = histogram (test);\n    for (map < char, int > :: iterator it = hist.begin (); it!= hist.end (); it++)\n     {\n       printf (\"%c: %d\\n\", it -> first, it -> second);\n     }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/112", "prompt": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing std;\nvector < string > reverse_delete(string s, string c) {\n    string VAR_0 = \"\";\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i =0;i<s.length(); i++)\n    if (find(c.begin(), c.end(), s [ i ]) == c.end())\n    VAR_0 = VAR_0 + s [ i ];\nif (VAR_0.length() == 0) return {\n        VAR_0, \"True\"}\n    ;\n    string w(VAR_0.rbegin(), VAR_0.rend());\n    if (w == VAR_0) return {\n        VAR_0, \"True\"}\n    ;\n    return {\n        VAR_0, \"False\"}\n    ;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n    assert (issame(reverse_delete(\"dwik\",\"w\") , {\"dik\",\"False\"}));\n    assert (issame(reverse_delete(\"a\",\"a\") , {\"\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"v\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"vabba\",\"v\") , {\"abba\",\"True\"}));\n    assert (issame(reverse_delete(\"mamma\", \"mia\") , {\"\", \"True\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n}\n", "entry_point": "reverse_delete", "partial": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    # print('@@this is the line to split##')\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n", "gc": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing std;\nvector < string > reverse_delete(string s, string c) {\n    string VAR_0 = \"\";\n   \n    for (int i = 0; i < s.size(); i++) {\n        if (s[i]!= c[0]) {\n            VAR_0 = VAR_0 + s[i];\n        }\n    }\n    reverse(VAR_0.begin(), VAR_0.end());\n    for (int i = 0; i < VAR_0.size(); i++) {\n        if (VAR_0[i] == c[0]) {\n            VAR_0.erase(VAR_0.begin() + i);\n            i--;\n        }\n    }\n    reverse(VAR_0.begin(), VAR_0.end());\n    vector < string > VAR_1;\n    VAR_1.push_back(VAR_0);\n    return VAR_1;\n}\n\nbool check(string s, string c) {\n    vector < string > VAR_0 = reverse_delete(s, c);\n    for (int i = 0; i < VAR_0.size(); i++) {\n        if (VAR_0[i] == s) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    string s = \"abcde\";\n    string c = \"ae\";\n    vector < string > VAR_1 = reverse_delete(s, c);\n    for (int i = 0; i < VAR_1.size(); i++) {\n        printf(\"%s\\n\", VAR_1[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/113", "prompt": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <map>\nusing std;\nvector < string > odd_count(vector < string > lst) {\n    vector < string > out = {\n        }\n    ;\n    for (int i = 0; i < lst.size(); i++)\n     {\n        int sum = 0;\n        for (int VAR_0 = 0; VAR_0 < lst [ i ].length(); VAR_0++)\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (lst [ i ] [ VAR_0 ] >= 48 and lst [ i ] [ VAR_0 ] <= 57 and lst [ i ] [ VAR_0 ] % 2 == 1)\n        sum+=1;\n        string s = \"the number of odd elements in the string i of the input.\";\n        string s2 = \"\";\n        for (int VAR_0 = 0; VAR_0 < s.length(); VAR_0++)\n        if (s [ VAR_0 ] == ' ') s2 = s2 + to_string(sum);\n        else s2 = s2 + s [ VAR_0 ];\n        out.push_back(s2);\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n    assert (issame(odd_count({\"271\", \"137\", \"314\"}) , {\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    }));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n}\n", "entry_point": "odd_count", "partial": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                # print('@@this is the line to split##')\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n", "gc": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <map>\nusing std;\nvector < string > odd_count(vector < string > lst) {\n    vector < string > out = {\n        }\n    ;\n    for (int i = 0; i < lst.size(); i++)\n     {\n        int sum = 0;\n        for (int VAR_0 = 0; VAR_0 < lst [ i ].length(); VAR_0++)\n       \n            if (lst [ i ] [ VAR_0 ] == '1')\n            {\n                sum++;\n            }\n        out.push_back(to_string(sum));\n    }\n    return out;\n}\nint main()\n{\n    vector < string > lst = {\n        \"1234567\",\n        \"3\",\n        \"11111111\",\n        \"1\",\n        \"8\",\n        \"9\",\n        \"0\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\",\n        \"1\",\n        \"0\",\n        \"9\",\n", "passed": 0, "run_status": 1}
{"task_id": "CPP/114", "prompt": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nlong long minSubArraySum(vector < long long > nums) {\n    long long VAR_0, min;\n    VAR_0 = nums [ 0 ];\n    min = nums [ 0 ];\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i =1;i<nums.size(); i++)\n     {\n        if (VAR_0 < 0) VAR_0 = VAR_0 + nums [ i ];\n        else VAR_0 = nums [ i ];\n        if (VAR_0 < min) min = VAR_0;\n        }\n    return min;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n    assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);\n    assert (minSubArraySum({-9999999999999999}) == -9999999999999999);\n    assert (minSubArraySum({0, 10, 20, 1000000}) == 0);\n    assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);\n    assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);\n    assert (minSubArraySum({-10}) == -10);\n    assert (minSubArraySum({7}) == 7);\n    assert (minSubArraySum({1, -1}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n}\n", "entry_point": "minSubArraySum", "partial": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    # print('@@this is the line to split##')\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n", "gc": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nlong long minSubArraySum(vector < long long > nums) {\n    long long VAR_0, min;\n    VAR_0 = nums [ 0 ];\n    min = nums [ 0 ];\n   \n    for ( int i = 1; i < nums.size(); i++ ) {\n        VAR_0 = minSubArraySum ( nums, i, VAR_0 );\n    }\n    return VAR_0;\n}\n\nlong long minSubArraySum ( vector < long long > nums, int i, long long VAR_0 ) {\n    long long VAR_1, VAR_2, VAR_3, VAR_4;\n    VAR_1 = nums [ i ];\n    VAR_2 = VAR_0;\n    VAR_3 = VAR_0;\n    VAR_4 = VAR_0;\n    for ( int j = i; j < nums.size(); j++ ) {\n        VAR_1 = VAR_1 + nums [ j ];\n        VAR_2 = VAR_2 + nums [ j ];\n        VAR_3 = VAR_3 + nums [ j ];\n        VAR_4 = VAR_4 + nums [ j ];\n        if ( VAR_1 < VAR_2 ) {\n            VAR_2 = VAR_1;\n        }\n        if ( VAR_3 < VAR_4 ) {\n            VAR_4 = VAR_3;\n        }\n    }\n    return VAR_2;\n}\n\nint main() {\n    vector < long long > nums;\n    nums.push_back ( 2 );\n    nums.push_back ( 3 );\n    nums.push_back ( 4 );\n    nums.push_back ( 1 );\n    nums.push_back ( 2 );\n    nums.push_back ( 4 );\n    printf ( \"%lld\\n\", minSubArraySum ( nums ) );\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/115", "prompt": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint max_fill(vector < vector < int > > grid, int capacity) {\n    int out = 0;\n    for (int VAR_0 = 0; VAR_0 < grid.size(); VAR_0++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' int sum = 0;\n        for (int j = 0; j < grid [ VAR_0 ].size(); j++)\n        sum+=grid [ VAR_0 ] [ j ];\n        if (sum > 0) out+=(sum - 1) / capacity + 1;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n}\n", "entry_point": "max_fill", "partial": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        # print('@@this is the line to split##')\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n", "gc": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint max_fill(vector < vector < int > > grid, int capacity) {\n    int out = 0;\n    for (int VAR_0 = 0; VAR_0 < grid.size(); VAR_0++)\n     {\n       \n        for (int VAR_1 = 0; VAR_1 < grid[VAR_0].size(); VAR_1++)\n        {\n            if (grid[VAR_0][VAR_1] == 1)\n            {\n                if (capacity > 0)\n                {\n                    grid[VAR_0][VAR_1] = 0;\n                    capacity--;\n                }\n                else\n                {\n                    out++;\n                }\n            }\n        }\n    }\n    return out;\n}\n\nint main()\n{\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/116", "prompt": "/*\nIn this Kata, you have to sort a vector of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > sort_array(vector < int > arr) {\n    vector < int > bin = {\n        }\n    ;\n    int m;\n    \n    for (int i = 0; i < arr.size(); i++)\n     {\n        int b = 0, n = abs(arr [ i ]);\n        while (n > 0)\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n            b+=n % 2; n = n / 2;\n            }\n        bin.push_back(b);\n        }\n    for (int i = 0; i < arr.size(); i++)\n    for (int VAR_0 = 1; VAR_0 < arr.size(); VAR_0++)\n    if (bin [ VAR_0 ] < bin [ VAR_0 - 1 ] or(bin [ VAR_0 ] == bin [ VAR_0 - 1 ] and arr [ VAR_0 ] < arr [ VAR_0 - 1 ]))\n     {\n        m = arr [ VAR_0 ]; arr [ VAR_0 ] = arr [ VAR_0 - 1 ]; arr [ VAR_0 - 1 ] = m;\n        m = bin [ VAR_0 ]; bin [ VAR_0 ] = bin [ VAR_0 - 1 ]; bin [ VAR_0 - 1 ] = m;\n        }\n    return arr;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({2,5,77,4,5,3,5,7,2,3,4}) , {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77}));\n    assert (issame(sort_array({3,6,44,12,32,5}) , {32, 3, 5, 6, 12, 44}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n}\n", "entry_point": "sort_array", "partial": "/*\nIn this Kata, you have to sort a vector of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        # print('@@this is the line to split##')\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n", "gc": "/*\nIn this Kata, you have to sort a vector of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > sort_array(vector < int > arr) {\n    vector < int > bin = {\n        }\n    ;\n    int m;\n    \n    for (int i = 0; i < arr.size(); i++)\n     {\n        int b = 0, n = abs(arr [ i ]);\n        while (n > 0)\n       \n        {\n            b = b * 2 + (n % 2);\n            n /= 2;\n        }\n        bin.push_back(b);\n    }\n    \n    return bin;\n}\n\nint main() {\n    vector < int > arr = {\n        1, 5, 2, 3, 4\n    };\n    \n    vector < int > bin = sort_array(arr);\n    \n    for (int i = 0; i < bin.size(); i++)\n    {\n        printf(\"%d \", bin [ i ]);\n    }\n    \n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/117", "prompt": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing std;\nvector < string > select_words(string VAR_0, int n) {\n    string vowels = \"aeiouAEIOU\";\n    string current = \"\";\n    vector < string > out = {\n        }\n    ;\n    int numc = 0;\n    VAR_0 = VAR_0 + ' ';\n    for (int i = 0; i < VAR_0.length(); i++)\n    if (VAR_0 [ i ] == ' ')\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (numc == n) out.push_back(current);\n        current = \"\";\n        numc = 0;\n        }\n    else\n     {\n        current = current + VAR_0 [ i ];\n        if ((VAR_0 [ i ] >= 65 and VAR_0 [ i ] <= 90) or(VAR_0 [ i ] >= 97 and VAR_0 [ i ] <= 122))\n        if (find(vowels.begin(), vowels.end(), VAR_0 [ i ]) == vowels.end())\n        numc+=1;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n    assert (issame(select_words(\"\", 4) , {}));\n    assert (issame(select_words(\"a b c d e f\", 1) , {\"b\", \"c\", \"d\", \"f\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n}\n", "entry_point": "select_words", "partial": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        # print('@@this is the line to split##')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n", "gc": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing std;\nvector < string > select_words(string VAR_0, int n) {\n    string vowels = \"aeiouAEIOU\";\n    string current = \"\";\n    vector < string > out = {\n        }\n    ;\n    int numc = 0;\n    VAR_0 = VAR_0 +'';\n    for (int i = 0; i < VAR_0.length(); i++)\n    if (VAR_0 [ i ] =='')\n   \n    {\n        numc++;\n        if (numc == n)\n        {\n            out.push_back(current);\n            current = \"\";\n            numc = 0;\n        }\n    }\n    return out;\n}\nint main()\n{\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/118", "prompt": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing std;\nstring get_closest_vowel(string word) {\n    string out = \"\";\n    string VAR_0 = \"AEIOUaeiou\";\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i = word.length() - 2; i >= 1; i-=1)\n    if (find(VAR_0.begin(), VAR_0.end(), word [ i ]) != VAR_0.end())\n    if (find(VAR_0.begin(), VAR_0.end(), word [ i + 1 ]) == VAR_0.end())\n    if (find(VAR_0.begin(), VAR_0.end(), word [ i - 1 ]) == VAR_0.end())\n    return out + word [ i ];\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"full\") == \"u\");\n    assert (get_closest_vowel(\"easy\") == \"\");\n    assert (get_closest_vowel(\"eAsy\") == \"\");\n    assert (get_closest_vowel(\"ali\") == \"\");\n    assert (get_closest_vowel(\"bad\") == \"a\");\n    assert (get_closest_vowel(\"most\") ==\"o\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"ba\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n    assert (get_closest_vowel(\"anime\") == \"i\");\n    assert (get_closest_vowel(\"Asia\") == \"\");\n    assert (get_closest_vowel(\"Above\") == \"o\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"FULL\") == \"U\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n}\n", "entry_point": "get_closest_vowel", "partial": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    # print('@@this is the line to split##')\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n", "gc": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing std;\nstring get_closest_vowel(string word) {\n    string out = \"\";\n    string VAR_0 = \"AEIOUaeiou\";\n   \n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (VAR_0.find(word[i])!= string::npos) {\n            out = word[i];\n            break;\n        }\n    }\n    return out;\n}\n\nint main() {\n    string word = \"yogurt\";\n    string out = get_closest_vowel(word);\n    printf(\"%s\\n\", out.c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/119", "prompt": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nstring match_parens(vector < string > lst) {\n    string l1 = lst [ 0 ] + lst [ 1 ];\n    int VAR_0, count = 0;\n    bool can = true;\n    for (VAR_0 = 0; VAR_0 < l1.length(); VAR_0++)\n     {\n        if (l1 [ VAR_0 ] == ' ') count+=1;\n        if (l1 [ VAR_0 ] == ' ') count-=1;\n        if (count < 0) can = false;\n       \n", "canonical_solution": "print(' @ this is the line to split ## '}\n    if (count != 0) return \"No\";\n    if (can == true) return \"Yes\";\n    l1 = lst [ 1 ] + lst [ 0 ];\n    can = true;\n    for (VAR_0 = 0; VAR_0 < l1.length(); VAR_0++)\n     {\n        if (l1 [ VAR_0 ] == ' ') count+=1;\n        if (l1 [ VAR_0 ] == ' ') count-=1;\n        if (count < 0) can = false;\n        }\n    if (can == true) return \"Yes\";\n    return \"No\";\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n    assert (match_parens({\"(()(())\", \"())())\"}) == \"No\");\n    assert (match_parens({\")())\", \"(()()(\"}) == \"Yes\");\n    assert (match_parens({\"(())))\", \"(()())((\"}) == \"Yes\");\n    assert (match_parens({\"()\", \"())\"}) == \"No\");\n    assert (match_parens({\"(()(\", \"()))()\"}) == \"Yes\");\n    assert (match_parens({\"((((\", \"((())\"}) == \"No\");\n    assert (match_parens({\")(()\", \"(()(\"}) == \"No\");\n    assert (match_parens({\")(\", \")(\"}) == \"No\");\n    assert (match_parens({\"(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \"(\"}) == \"Yes\" );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n}\n", "entry_point": "match_parens", "partial": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n            # print('@@this is the line to split##')\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n", "gc": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nstring match_parens(vector < string > lst) {\n    string l1 = lst [ 0 ] + lst [ 1 ];\n    int VAR_0, count = 0;\n    bool can = true;\n    for (VAR_0 = 0; VAR_0 < l1.length(); VAR_0++)\n     {\n        if (l1 [ VAR_0 ] =='') count+=1;\n        if (l1 [ VAR_0 ] =='') count-=1;\n        if (count < 0) can = false;\n       \n     }\n    if (can) return \"Yes\";\n    else return \"No\";\n}\n\nint main() {\n    vector < string > lst;\n    lst.push_back(\"()(\"));\n    lst.push_back(\"()(\");\n    lst.push_back(\"()()\");\n    lst.push_back(\"()()()\");\n    lst.push_back(\"()()()()\");\n    lst.push_back(\"()()()()()\");\n    lst.push_back(\"()()()()()()\");\n    lst.push_back(\"()()()()()()()\");\n    lst.push_back(\"()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()", "passed": 0, "run_status": 2}
{"task_id": "CPP/12", "prompt": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nstring longest(vector < string > strings) {\n    string out;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 = 0; i<strings.size(); VAR_0++)\n    \n     {\n        if (strings [ VAR_0 ].length() > out.length()) out = strings [ VAR_0 ];\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"x\", \"y\", \"z\"}) == \"x\");\n    assert (longest({\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"}) == \"zzzz\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"a\", \"b\", \"c\"}) == \"a\");\n    assert (longest({\"a\", \"bb\", \"ccc\"}) == \"ccc\");\n}\n", "entry_point": "longest", "partial": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    string out;\n    # print('@@this is the line to split##')\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n", "gc": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nstring longest(vector < string > strings) {\n    string out;\n   \n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].size() > out.size()) {\n            out = strings[i];\n        }\n    }\n    return out;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/120", "prompt": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\n", "canonical_solution": "print(' @ this is the line to split ## ' vector < int > maximum(vector < int > VAR_0, int k) {\n    sort(VAR_0.begin(), VAR_0.end());\n    vector < int > out(VAR_0.end() - k, VAR_0.end());\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n    assert (issame(maximum({123, -123, 20, 0 , 1, 2, -3}, 3) , {2, 20, 123}));\n    assert (issame(maximum({-123, 20, 0 , 1, 2, -3}, 4) , {0, 1, 2, 20}));\n    assert (issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7) , {-13, -8, 0, 0, 3, 5, 15}));\n    assert (issame(maximum({-1, 0, 2, 5, 3, -10}, 2) , {3, 5}));\n    assert (issame(maximum({1, 0, 5, -7}, 1) , {5}));\n    assert (issame(maximum({4, -4}, 2) , {-4, 4}));\n    assert (issame(maximum({-10, 10}, 2) , {-10, 10}));\n    assert (issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n}\n", "entry_point": "maximum", "partial": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n# print('@@this is the line to split##')\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n", "gc": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\n\nclass Solution {\npublic:\n    vector<int> maxKFrequent(vector<int>& nums, int k) {\n        vector<int> res;\n        if (nums.size() == 0 || k == 0) return res;\n        sort(nums.begin(), nums.end());\n        int n = nums.size();\n        int max_count = 0;\n        for (int i = 0; i < k; i++) {\n            max_count = 0;\n            for (int j = 0; j < n; j++) {\n                if (nums[j] == nums[i]) {\n                    max_count++;\n                    if (max_count > k) {\n                        res.push_back(nums[i]);\n                        max_count = 1;\n                    }\n                } else {\n                    max_count = 0;\n                }\n            }\n        }\n        return res;\n    }\n};\n\nint main(int argc, char** argv) {\n    Solution s;\n    vector<int> arr = {-3, -4, 5};\n    vector<int> res = s.maxKFrequent(arr, 3);\n    for (auto e : res) {\n        printf(\"%d \", e);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/121", "prompt": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint solutions(vector < int > lst) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' int sum = 0;\n    for (int VAR_0 = 0; VAR_0 * 2 < lst.size(); VAR_0++)\n    if (lst [ VAR_0 * 2 ] % 2 == 1) sum+=lst [ VAR_0 * 2 ];\n    return sum;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n    assert (solutions({5, 9}) == 5);\n    assert (solutions({2, 4, 8}) == 0);\n    assert (solutions({30, 13, 23, 32}) == 23);\n    assert (solutions({3, 13, 2, 9}) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n}\n", "entry_point": "solutions", "partial": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n    # print('@@this is the line to split##')\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n", "gc": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint solutions(vector < int > lst) {\n   \n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nint main() {\n    vector < int > lst;\n    lst.push_back(5);\n    lst.push_back(8);\n    lst.push_back(7);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.", "passed": 0, "run_status": 1}
{"task_id": "CPP/122", "prompt": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint add_elements(vector < int > arr, int k) {\n    int sum = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 = 0; VAR_0 < k; VAR_0++)\n    if (arr [ VAR_0 ] > = -99 and arr [ VAR_0 ] <= 99)\n    sum+=arr [ VAR_0 ];\n    return sum;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);\n    assert (add_elements({111,121,3,4000,5,6}, 2) == 0);\n    assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n    assert (add_elements({1}, 1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n}\n", "entry_point": "add_elements", "partial": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    # print('@@this is the line to split##')\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n", "gc": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint add_elements(vector < int > arr, int k) {\n    int sum = 0;\n   \n    for (int i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    vector < int > arr;\n    int k;\n    scanf(\"%d\", &k);\n    while (k--) {\n        int num;\n        scanf(\"%d\", &num);\n        arr.push_back(num);\n    }\n    printf(\"%d\\n\", add_elements(arr, k));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/123", "prompt": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > get_odd_collatz(int VAR_0) {\n    vector < int > out = {\n        1}\n    ;\n    while (VAR_0 != 1)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (VAR_0 % 2 == 1) {\n            out.push_back(VAR_0); VAR_0 = VAR_0 * 3 + 1;}\n        else VAR_0 = VAR_0 / 2;\n        }\n    sort(out.begin(), out.end());\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(14) , {1, 5, 7, 11, 13, 17}));\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n    assert (issame(get_odd_collatz(12) , {1, 3, 5}));\n    assert (issame(get_odd_collatz(1) , {1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n}\n", "entry_point": "get_odd_collatz", "partial": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    # print('@@this is the line to split##')\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "gc": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > get_odd_collatz(int VAR_0) {\n    vector < int > out = {\n        1}\n    ;\n    while (VAR_0!= 1)\n   \n    {\n        if (VAR_0 % 2 == 0)\n        {\n            VAR_0 /= 2;\n        }\n        else\n        {\n            VAR_0 = 3 * VAR_0 + 1;\n        }\n        out.push_back(VAR_0);\n    }\n    return out;\n}\nint main()\n{\n    int VAR_0;\n    std::vector < int > VAR_1;\n    std::cin >> VAR_0;\n    VAR_1 = get_odd_collatz(VAR_0);\n    for (auto VAR_2 = VAR_1.begin(); VAR_2!= VAR_1.end(); ++VAR_2)\n    {\n        std::cout << *VAR_2 << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/124", "prompt": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool valid_date(string date) {\n    int VAR_0, dd, yy, i;\n    if (date.length() != 10) return false;\n    for (int i = 0; i < 10; i++)\n    if (i == 2 or i == 5)\n     {\n        if (date [ i ] != ' ') return false;\n        }\n    else\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (date [ i ] < 48 or date [ i ] > 57) return false;\n    \n    VAR_0 = atoi(date.substr(0, 2).c_str());\n    dd = atoi(date.substr(3, 2).c_str());\n    yy = atoi(date.substr(6, 4).c_str());\n    if (VAR_0 < 1 or VAR_0 > 12) return false;\n    if (dd < 1 or dd > 31) return false;\n    if (dd == 31 and(VAR_0 == 4 or VAR_0 == 6 or VAR_0 == 9 or VAR_0 == 11 or VAR_0 == 2)) return false;\n    if (dd == 30 and VAR_0 == 2) return false;\n    return true;\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"01-01-2007\") == true);\n    assert (valid_date(\"03-32-2011\") == false);\n    assert (valid_date(\"\") == false);\n    assert (valid_date(\"04-31-3000\") == false);\n    assert (valid_date(\"06-06-2005\") == true);\n    assert (valid_date(\"21-31-2000\") == false);\n    assert (valid_date(\"04-12-2003\") == true);\n    assert (valid_date(\"04122003\") == false);\n    assert (valid_date(\"20030412\") == false);\n    assert (valid_date(\"2003-04\") == false);\n    assert (valid_date(\"2003-04-12\") == false);\n    assert (valid_date(\"04-2003\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"06/04/2020\") == false);\n}\n", "entry_point": "valid_date", "partial": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            # print('@@this is the line to split##')\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n", "gc": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool valid_date(string date) {\n    int VAR_0, dd, yy, i;\n    if (date.length()!= 10) return false;\n    for (int i = 0; i < 10; i++)\n    if (i == 2 or i == 5)\n     {\n        if (date [ i ]!='') return false;\n        }\n    else\n   \n    if (date [ i ]!= '-') return false;\n    VAR_0 = date [ 0 ] - '0';\n    dd = VAR_0;\n    yy = date [ 1 ] - '0';\n    if (yy < 2000 or yy > 2100) return false;\n    if (dd < 1 or dd > 31) return false;\n    if (dd < 1 or dd > 30) return false;\n    if (dd < 1 or dd > 29) return false;\n    if (yy < 1 or yy > 12) return false;\n    if (yy < 4 or yy > 12) return false;\n    if (yy < 10 or yy > 12) return false;\n    if (yy < 1 or yy > 29) return false;\n    if (yy < 1 or yy > 29) return false;\n    if (yy < 1 or yy > 29) return false;\n    return true;\n}\nint main()\n{\n    string date;\n    while (scanf(\"%s\", &date)!= EOF)\n    {\n        if (valid_date(date))\n        {\n            printf(\"%s is a valid date\\n\", date.c_str());\n        }\n        else\n        {\n            printf(\"%s is not a valid date\\n\", date.c_str());\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/125", "prompt": "/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing std;\nvector < string > split_words(string VAR_0) {\n    int i;\n    string current = \"\";\n    vector < string > out = {\n        }\n    ;\n    if (find(VAR_0.begin(), VAR_0.end(), ' ') != VAR_0.end())\n     {\n        VAR_0 = VAR_0 + ' ';\n        for (i = 0; i < VAR_0.length(); i++)\n        if (VAR_0 [ i ] == ' ') {\n            if (current.length() > 0) out.push_back(current); current = \"\";\n            }\n        else current = current + VAR_0 [ i ];\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' return out;\n        }\n    if (find(VAR_0.begin(), VAR_0.end(), ' ') != VAR_0.end())\n     {\n        VAR_0 = VAR_0 + ' ';\n        for (i = 0; i < VAR_0.length(); i++)\n        if (VAR_0 [ i ] == ' ') {\n            if (current.length() > 0) out.push_back(current); current = \"\";\n            }\n        else current = current + VAR_0 [ i ];\n        return out;\n        }\n    int num = 0;\n    for (i = 0; i < VAR_0.length(); i++)\n    if (VAR_0 [ i ] >= 97 and VAR_0 [ i ] <= 122 and VAR_0 [ i ] % 2 == 0)\n    num+=1;\n    return {\n        to_string(num)}\n    ;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello world,!\") , {\"Hello\",\"world,!\"}));\n    assert (issame(split_words(\"Hello,Hello,world !\") , {\"Hello,Hello,world\",\"!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n    assert (issame(split_words(\"aaabb\") , {\"2\"}));\n    assert (issame(split_words(\"aaaBb\") , {\"1\"}));\n    assert (issame(split_words(\"\") ,{\"0\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n}\n", "entry_point": "split_words", "partial": "/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n            # print('@@this is the line to split##')\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n", "gc": "/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1,... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing std;\nvector < string > split_words(string VAR_0) {\n    int i;\n    string current = \"\";\n    vector < string > out = {\n        }\n    ;\n    if (find(VAR_0.begin(), VAR_0.end(),'')!= VAR_0.end())\n     {\n        VAR_0 = VAR_0 +'';\n        for (i = 0; i < VAR_0.length(); i++)\n        if (VAR_0 [ i ] =='') {\n            if (current.length() > 0) out.push_back(current); current = \"\";\n            }\n        else current = current + VAR_0 [ i ];\n       \n        }\n    else if (find(VAR_0.begin(), VAR_0.end(), ',')!= VAR_0.end())\n     {\n        VAR_0 = VAR_0 + ',';\n        for (i = 0; i < VAR_0.length(); i++)\n        if (VAR_0 [ i ] == ',') {\n            if (current.length() > 0) out.push_back(current); current = \"\";\n            }\n        else current = current + VAR_0 [ i ];\n       \n        }\n    else if (find(VAR_0.begin(), VAR_0.end(), 'a')!= VAR_0.end())\n     {\n        VAR_0 = VAR_0 + 'a';\n        for (i = 0; i < VAR_0.length(); i++)\n        if (VAR_0 [ i ] == 'a') {\n            if (current.length() > 0) out.push_back(current); current = \"\";\n            }\n        else current = current + VAR_0 [ i ];\n       \n        }\n    else if (find(VAR_0.begin(), VAR_0.end(), 'z')!= VAR_0.end())\n     {\n        VAR_0 = VAR_0 + 'z';\n        for (i = 0; i < VAR_0.length(); i++)\n        if (VAR_0 [ i ] == 'z') {\n            if (current.length() > 0) out.push_back(current); current = \"\";\n            }\n        else current = current + VAR_0 [ i ];\n       \n        }\n    else if (find(VAR_0.begin(), VAR_0.end(), ',')!= VAR_0.end())\n     {\n        VAR_0 = VAR_0 + ',';\n        for (i = 0; i < VAR_0.length(); i++)\n        if (VAR_0 [ i ] == ',') {\n            if (current.length() > 0) out.push_back(current); current = \"\";\n            }\n        else current = current + VAR_0 [ i ];\n       \n        }\n    else if (find(VAR_0.begin(), VAR_0.end(), 'a')!= VAR_0.end())\n     {\n        VAR_0 = VAR_0 + 'a';\n        for (i = 0; i < VAR_0.length(); i++)\n        if (VAR_0 [ i ] == 'a') {\n            if (current.length() > 0) out.push_back(current); current = \"\";\n            }\n        else current = current + VAR_0 [ i ];\n       \n        }\n    else if (find(VAR_0.begin(), VAR_0.end(), 'z')!= VAR_0.end())\n     {\n        VAR_0 = VAR_0 + 'z';\n        for (i = 0; i < VAR_0.length(); i++)\n        if (VAR_0 [ i ] == 'z') {\n            if (current.length() > 0) out.push_back(current); current = \"\";\n            }\n        else current = current + VAR_0 [ i ];\n       \n        }\n    else if (find(VAR_0.begin(), VAR_0.end(), ',')!= VAR_0.end())\n     {\n        VAR_0 = VAR_0 + ',';\n        for (i = 0; i < VAR_0.length(); i++)\n        if (VAR_0 [ i ] == ',') {\n            if (current.length() > 0) out.push_back(current); current = \"\";\n            }\n        else current = current + VAR_0 [ i ];\n       \n        }\n    else if (find(VAR_0.begin(), VAR_0.end(), 'a')!= VAR_0.end())\n     {\n        VAR_0 = VAR_0 + 'a';\n        for (i = 0; i < VAR_0.length(); i++)\n        if (VAR_0 [ i ] == 'a') {\n            if (current.length() > 0) out.push_back(current); current = \"\";\n            }\n        else current = current + VAR_0 [ i ];\n       \n        }\n    else if (find(VAR_0.begin(), VAR_0.end(), 'z')!= VAR_0.end())\n     {\n        VAR_0 = VAR_0 + 'z';\n        for (i = 0; i < VAR_0.length(); i++)\n        if (VAR_0 [ i ] == 'z') {\n            if (current.length() > 0) out.push_back(current); current = \"\";\n            }\n        else current = current + VAR_0 [ i ];\n       \n        }\n    else if (find(VAR_0.begin(), VAR_0.end", "passed": 0, "run_status": 2}
{"task_id": "CPP/126", "prompt": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nbool is_sorted(vector < int > lst) {\n    for (int VAR_0 = 1; VAR_0 < lst.size(); VAR_0++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (lst [ VAR_0 ] < lst [ VAR_0 - 1 ]) return false;\n        if (VAR_0 >= 2 and lst [ VAR_0 ] == lst [ VAR_0 - 1 ] and lst [ VAR_0 ] == lst [ VAR_0 - 2 ]) return false;\n        }\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({}) == true);\n    assert (is_sorted({1}) == true);\n    assert (is_sorted({3, 2, 1}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert (is_sorted({1, 2, 3, 4}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n}\n", "entry_point": "is_sorted", "partial": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    for (int i=1;i<lst.size();i++)\n    # print('@@this is the line to split##')\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n", "gc": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nbool is_sorted(vector < int > lst) {\n    for (int VAR_0 = 1; VAR_0 < lst.size(); VAR_0++)\n   \n    {\n        if (lst[VAR_0] < lst[VAR_0 - 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    vector < int > lst;\n    lst.push_back(1);\n    lst.push_back(2);\n    lst.push_back(3);\n    lst.push_back(4);\n    lst.push_back(5);\n    lst.push_back(6);\n    lst.push_back(7);\n    lst.push_back(8);\n    lst.push_back(9);\n    lst.push_back(10);\n    lst.push_back(11);\n    lst.push_back(12);\n    lst.push_back(13);\n    lst.push_back(14);\n    lst.push_back(15);\n    lst.push_back(16);\n    lst.push_back(17);\n    lst.push_back(18);\n    lst.push_back(19);\n    lst.push_back(20);\n    lst.push_back(21);\n    lst.push_back(22);\n    lst.push_back(23);\n    lst.push_back(24);\n    lst.push_back(25);\n    lst.push_back(26);\n    lst.push_back(27);\n    lst.push_back(28);\n    lst.push_back(29);\n    lst.push_back(30);\n    lst.push_back(31);\n    lst.push_back(32);\n    lst.push_back(33);\n    lst.push_back(34);\n    lst.push_back(35);\n    lst.push_back(36);\n    lst.push_back(37);\n    lst.push_back(38);\n    lst.push_back(39);\n    lst.push_back(40);\n    lst.push_back(41);\n    lst.push_back(42);\n    lst.push_back(43);\n    lst.push_back(44);\n    lst.push_back(45);\n    lst.push_back(46);\n    lst.push_back(47);\n    lst.push_back(48);\n    lst.push_back(49);\n    lst.push_back(50);\n    lst.push_back(51);\n    lst.push_back(52);\n    lst.push_back(53);\n    lst.push_back(54);\n    lst.push_back(55);\n    lst.push_back(56);\n    lst.push_back(57);\n    lst.push_back(58);\n    lst.push_back(59);\n    lst.push_back(60);\n    lst.push_back(61);\n    lst.push_back(62);\n    lst.push_back(63);\n    lst.push_back(64);\n    lst.push_back(65);\n    lst.push_back(66);\n    lst.push_back(67);\n    lst.push_back(68);\n    lst.push_back(69);\n    lst.push_back(70);\n    lst.push_back(71);\n    lst.push_back(72);\n    lst.push_back(73);\n    lst.push_back(74);\n    lst.push_back(75);\n    lst.push_back(76);\n    lst.push_back(77);\n    lst.push_back(78);\n    lst.push_back(79);\n    lst.push_back(80);\n    lst.push_back(81);\n    lst.push_back(82);\n    lst.push_back(83);\n    lst.push_back(84);\n    lst.push_back(85);\n    lst.push_back(86);\n    lst.push_back(87);\n    lst.push_back(88);\n    lst.push_back(89);\n    lst.push_back(90);\n    lst.push_back(91);\n    lst.push_back(92);\n    lst.push_back(93);\n    lst.push_back(94);\n    lst.push_back(95);\n    lst.push_back(96);\n    lst.push_back(97);\n    lst.push_back(98);\n    lst.push_back(99);\n    lst.push_back(100);\n    lst.push_back(101);\n    lst.push_back(102);\n    lst.push_back(103);\n    lst.push_back(104);\n    lst.push_back(105);\n    lst.push_back(106);\n    lst.push_back(107);\n    lst.push_back(108);\n    lst.push_", "passed": 0, "run_status": 1}
{"task_id": "CPP/127", "prompt": "/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nstring intersection(vector < int > interval1, vector < int > interval2) {\n    int inter1, inter2, l, VAR_0;\n    inter1 = max(interval1 [ 0 ], interval2 [ 0 ]);\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' inter2 = min(interval1 [ 1 ], interval2 [ 1 ]);\n    l = inter2 - inter1;\n    if (l < 2) return \"NO\";\n    for (VAR_0 = 2; VAR_0 * VAR_0 <= l; VAR_0++)\n    if (l % VAR_0 == 0) return \"NO\";\n    return \"YES\";\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n    assert (intersection({-2, 2}, {-4, 0}) == \"YES\");\n    assert (intersection({-11, 2}, {-1, -1}) == \"NO\");\n    assert (intersection({1, 2}, {3, 5}) == \"NO\");\n    assert (intersection({1, 2}, {1, 2}) == \"NO\");\n    assert (intersection({-2, -2}, {-3, -2}) == \"NO\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n}\n", "entry_point": "intersection", "partial": "/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    # print('@@this is the line to split##')\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n", "gc": "/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nstring intersection(vector < int > interval1, vector < int > interval2) {\n    int inter1, inter2, l, VAR_0;\n    inter1 = max(interval1 [ 0 ], interval2 [ 0 ]);\n   \n    for (int i = 1; i < interval1.size(); i++) {\n        inter1 = min(inter1, max(interval1 [ i ], interval2 [ i ]));\n    }\n    \n    for (int i = 1; i < interval2.size(); i++) {\n        inter2 = min(interval1 [ 0 ], max(interval2 [ i ], interval1 [ i ]));\n    }\n    \n    l = inter1 - inter2;\n    VAR_0 = 1;\n    for (int i = 0; i < l; i++) {\n        VAR_0 *= 2;\n    }\n    \n    if (l % 2 == 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\nint main() {\n    vector < int > interval1;\n    vector < int > interval2;\n    string ans;\n    int i, j, n;\n    \n    while (scanf(\"%d\", &n)!= EOF) {\n        for (i = 0; i < n; i++) {\n            scanf(\"%d\", &interval1 [ i ]);\n        }\n        for (i = 0; i < n; i++) {\n            scanf(\"%d\", &interval2 [ i ]);\n        }\n        ans = intersection(interval1, interval2);\n        printf(\"%s\\n\", ans.c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/128", "prompt": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nint prod_signs(vector < int > arr) {\n    if (arr.size() == 0) return -32768;\n    int VAR_0, sum = 0, prods = 1;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (VAR_0 = 0; i<arr.size(); VAR_0++)\n    \n     {\n        sum+=abs(arr [ VAR_0 ]);\n        if (arr [ VAR_0 ] == 0) prods = 0;\n        if (arr [ VAR_0 ] < 0) prods = - prods;\n        }\n    return sum * prods;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);\n    assert (prod_signs({}) == -32768);\n    assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);\n    assert (prod_signs({-1, 1, -1, 1}) == 4);\n    assert (prod_signs({-1, 1, 1, 1}) == -4);\n    assert (prod_signs({-1, 1, 1, 0}) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({}) == -32768);\n}\n", "entry_point": "prod_signs", "partial": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    # print('@@this is the line to split##')\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n", "gc": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nint prod_signs(vector < int > arr) {\n    if (arr.size() == 0) return -32768;\n    int VAR_0, sum = 0, prods = 1;\n   \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == 0) {\n            sum = 0;\n            prods = 1;\n        } else {\n            sum += arr[i] * prods;\n            prods *= arr[i];\n        }\n    }\n    return sum;\n}\n\nint main() {\n    vector < int > arr;\n    arr.push_back(1);\n    arr.push_back(2);\n    arr.push_back(2);\n    arr.push_back(-4);\n    arr.push_back(0);\n    arr.push_back(1);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back", "passed": 0, "run_status": 1}
{"task_id": "CPP/129", "prompt": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > minPath(vector < vector < int > > VAR_0, int k) {\n    int i, j, x, y, min;\n    for (i = 0; i < VAR_0.size(); i++)\n    for (j = 0; j < VAR_0 [ i ].size(); j++)\n    if (VAR_0 [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' min = VAR_0.size() * VAR_0.size();\n    if (x > 0 and VAR_0 [ x - 1 ] [ y ] < min) min = VAR_0 [ x - 1 ] [ y ];\n    if (x < VAR_0.size() - 1 and VAR_0 [ x + 1 ] [ y ] < min) min = VAR_0 [ x + 1 ] [ y ];\n    if (y > 0 and VAR_0 [ x ] [ y - 1 ] < min) min = VAR_0 [ x ] [ y - 1 ];\n    if (y < VAR_0.size() - 1 and VAR_0 [ x ] [ y + 1 ] < min) min = VAR_0 [ x ] [ y + 1 ];\n    vector < int > out = {\n        }\n    ;\n    for (i = 0; i < k; i++)\n    if (i % 2 == 0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n    assert (issame(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) , {1, 2, 1, 2}));\n    assert (issame(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) , {1, 10, 1, 10, 1, 10, 1}));\n    assert (issame(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) , {1, 7, 1, 7, 1}));\n    assert (issame(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) , {1, 6, 1, 6, 1, 6, 1, 6, 1}));\n    assert (issame(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) , {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}));\n    assert (issame(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) , {1, 3, 1, 3, 1, 3, 1, 3}));\n    assert (issame(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) , {1, 5, 1, 5, 1, 5, 1, 5}));\n    assert (issame(minPath({{1, 2}, {3, 4}}, 10) , {1, 2, 1, 2, 1, 2, 1, 2, 1, 2}));\n    assert (issame(minPath({{1, 3}, {3, 2}}, 10) , {1, 3, 1, 3, 1, 3, 1, 3, 1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n}\n", "entry_point": "minPath", "partial": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n            # print('@@this is the line to split##')\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n", "gc": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > minPath(vector < vector < int > > VAR_0, int k) {\n    int i, j, x, y, min;\n    for (i = 0; i < VAR_0.size(); i++)\n    for (j = 0; j < VAR_0 [ i ].size(); j++)\n    if (VAR_0 [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n   \n    for (i = 0; i < VAR_0.size(); i++)\n    for (j = 0; j < VAR_0 [ i ].size(); j++)\n    if (VAR_0 [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n    \n    for (i = 0; i < VAR_0.size(); i++)\n    for (j = 0; j < VAR_0 [ i ].size(); j++)\n    if (VAR_0 [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n    \n    for (i = 0; i < VAR_0.size(); i++)\n    for (j = 0; j < VAR_0 [ i ].size(); j++)\n    if (VAR_0 [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n    \n    for (i = 0; i < VAR_0.size(); i++)\n    for (j = 0; j < VAR_0 [ i ].size(); j++)\n    if (VAR_0 [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n    \n    for (i = 0; i < VAR_0.size(); i++)\n    for (j = 0; j < VAR_0 [ i ].size(); j++)\n    if (VAR_0 [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n    \n    for (i = 0; i < VAR_0.size(); i++)\n    for (j = 0; j < VAR_0 [ i ].size(); j++)\n    if (VAR_0 [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n    \n    for (i = 0; i < VAR_0.size(); i++)\n    for (j = 0; j < VAR_0 [ i ].size(); j++)\n    if (VAR_0 [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n    \n    for (i = 0; i < VAR_0.size(); i++)\n    for (j = 0; j < VAR_0 [ i ].size(); j++)\n    if (VAR_0 [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n    \n    for (i = 0; i < VAR_0.size(); i++)\n    for (j = 0; j < VAR_0 [ i ].size(); j++)\n    if (VAR_0 [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n    \n    for (i = 0; i < VAR_0.size(); i++)\n    for (j = 0; j < VAR_0 [ i ].size(); j++)\n    if (VAR_0 [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n    \n    for (i = 0; i < VAR_0.size(); i++)\n    for (j = 0; j < VAR_0 [ i ].size(); j++)\n    if (VAR_0 [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n    \n    for (i = 0; i < VAR_0.size(); i++)\n    for (j = 0; j < VAR_0 [ i ].size(); j++)\n    if (VAR_0 [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n    \n    for (i = 0; i < VAR_0.size(); i++)\n    for (j = 0; j < VAR_0 [ i ].size(); j++)\n    if (VAR_0 [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n    \n    for (i = 0; i < VAR_0.size(); i++)\n    for (j = 0; j < VAR_0 [ i ].size(); j++)\n    if (VAR_0 [ i ] [ j ] == 1) {\n        ", "passed": 0, "run_status": 2}
{"task_id": "CPP/13", "prompt": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include <stdio.h>\nusing std;\nint greatest_common_divisor(int VAR_0, int b) {\n    int out, m;\n    while (true) {\n        if (VAR_0 < b)\n", "canonical_solution": "print(' @ this is the line to split ## ' {\n            m = VAR_0; VAR_0 = b; b = m;\n            }\n        VAR_0 = VAR_0 % b;\n        if (VAR_0 == 0) return b;\n        }\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 7) == 1);\n     assert (greatest_common_divisor(10, 15) == 5);\n      assert (greatest_common_divisor(49, 14) == 7);\n     assert (greatest_common_divisor(144, 60) == 12);\n}\n", "declaration": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 5) == 1);\n     assert (greatest_common_divisor(25, 15) == 5);\n}\n", "entry_point": "greatest_common_divisor", "partial": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        # print('@@this is the line to split##')\n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n", "gc": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include <stdio.h>\nusing std;\nint greatest_common_divisor(int VAR_0, int b) {\n    int out, m;\n    while (true) {\n        if (VAR_0 < b)\n            VAR_0 = VAR_0 - b;\n        else\n            return VAR_0;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/130", "prompt": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > tri(int n) {\n    vector < int > out = {\n        1, 3}\n    ;\n    if (n == 0) return {\n        1}\n    ;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 = 2; VAR_0 <= n; VAR_0++)\n     {\n        if (VAR_0 % 2 == 0) out.push_back(1 + VAR_0 / 2);\n        else out.push_back(out [ VAR_0 - 1 ] + out [ VAR_0 - 2 ] + 1 +(VAR_0 + 1) / 2);\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n    assert (issame(tri(4) , {1, 3, 2, 8, 3}));\n    assert (issame(tri(5) , {1, 3, 2, 8, 3, 15}));\n    assert (issame(tri(6) , {1, 3, 2, 8, 3, 15, 4}));\n    assert (issame(tri(7) , {1, 3, 2, 8, 3, 15, 4, 24}));\n    assert (issame(tri(8) , {1, 3, 2, 8, 3, 15, 4, 24, 5}));\n    assert (issame(tri(9) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35}));\n    assert (issame(tri(20) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11}));\n    assert (issame(tri(0) , {1}));\n    assert (issame(tri(1) , {1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n}\n", "entry_point": "tri", "partial": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    # print('@@this is the line to split##')\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n", "gc": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > tri(int n) {\n    vector < int > out = {\n        1, 3}\n    ;\n    if (n == 0) return {\n        1}\n    ;\n   \n    if (n == 1) return {\n        1, 3}\n    ;\n    \n    if (n == 2) return {\n        1, 3, 2}\n    ;\n    \n    for (int i = 2; i < n; i++) {\n        out.push_back(out[i - 1] + out[i - 2] + out[i]);\n    }\n    return out;\n}\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > out = tri(n);\n    for (int i = 0; i < out.size(); i++) {\n        printf(\"%d \", out[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/131", "prompt": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nint digits(int n) {\n    int prod = 1, has = 0;\n    string s = to_string(n);\n    for (int VAR_0 = 0; VAR_0 < s.length(); VAR_0++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (s [ VAR_0 ] % 2 == 1) {\n        has = 1;\n        prod = prod *(s [ VAR_0 ] - 48);\n        }\n    if (has == 0) return 0;\n    return prod;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(5) == 5);\n    assert (digits(54) == 5);\n    assert (digits(120) ==1);\n    assert (digits(5014) == 5);\n    assert (digits(98765) == 315);\n    assert (digits(5576543) == 2625);\n    assert (digits(2468) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(1) == 1);\n    assert (digits(4) == 0);\n    assert (digits(235) ==15);\n}\n", "entry_point": "digits", "partial": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        # print('@@this is the line to split##')\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n", "gc": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nint digits(int n) {\n    int prod = 1, has = 0;\n    string s = to_string(n);\n    for (int VAR_0 = 0; VAR_0 < s.length(); VAR_0++)\n   \n    {\n        if (s[VAR_0] == '0')\n            has = 0;\n        else\n            has = 1;\n        if (has == 1)\n            prod = prod * 10 + s[VAR_0] - '0';\n    }\n    return prod;\n}\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", digits(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/132", "prompt": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") ➞ true\nis_nested(\"[]]]]]]][[[[[]\") ➞ false\nis_nested(\"[][]\") ➞ false\nis_nested(\"[]\") ➞ false\nis_nested(\"[[][]]\") ➞ true\nis_nested(\"[[]][[\") ➞ true\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool is_nested(string str) {\n    int VAR_0 = 0, maxcount = 0;\n    for (int i = 0; i < str.length(); i++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (str [ i ] == ' ') VAR_0+=1;\n        if (str [ i ] == ' ') VAR_0-=1;\n        if (VAR_0 < 0) VAR_0 = 0;\n        if (VAR_0 > maxcount) maxcount = VAR_0;\n        if (VAR_0 <= maxcount - 2) return true;\n        }\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested((\"[]\")) == false);\n    assert (is_nested(\"[[[[]]]]\") == true);\n    assert (is_nested(\"[]]]]]]]]]]\") == false);\n    assert (is_nested(\"[][][[]]\") == true);\n    assert (is_nested(\"[[]\") == false);\n    assert (is_nested(\"[]]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n    assert (is_nested(\"\") == false);\n    assert (is_nested(\"[[[[[[[[\") == false);\n    assert (is_nested(\"]]]]]]]]\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested(\"[]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n}\n", "entry_point": "is_nested", "partial": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") ➞ true\nis_nested(\"[]]]]]]][[[[[]\") ➞ false\nis_nested(\"[][]\") ➞ false\nis_nested(\"[]\") ➞ false\nis_nested(\"[[][]]\") ➞ true\nis_nested(\"[[]][[\") ➞ true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        # print('@@this is the line to split##')\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n", "gc": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") ➞ true\nis_nested(\"[]]]]]]][[[[[]\") ➞ false\nis_nested(\"[][]\") ➞ false\nis_nested(\"[]\") ➞ false\nis_nested(\"[[][]]\") ➞ true\nis_nested(\"[[]][[\") ➞ true\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool is_nested(string str) {\n    int VAR_0 = 0, maxcount = 0;\n    for (int i = 0; i < str.length(); i++)\n     {\n       \n        if (str[i] == '[')\n        {\n            VAR_0++;\n            if (VAR_0 > maxcount)\n            {\n                maxcount = VAR_0;\n            }\n        }\n        else if (str[i] == ']')\n        {\n            VAR_0--;\n            if (VAR_0 < maxcount)\n            {\n                maxcount = VAR_0;\n            }\n        }\n    }\n    return (maxcount > 0);\n}\n\nint main()\n{\n    string str = \"[[]]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[[]]]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[]][[]]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[]][[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%s\\n\", is_nested(str)? \"true\" : \"false\");\n    str = \"[[][]\";\n    printf(\"%", "passed": 0, "run_status": 1}
{"task_id": "CPP/133", "prompt": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nint sum_squares(vector < float > lst) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' int sum = 0;\n    for (int VAR_0 = 0; VAR_0 < lst.size(); VAR_0++)\n    sum+=ceil(lst [ VAR_0 ]) * ceil(lst [ VAR_0 ]);\n    return sum;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1.0,2,3})==14);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n    assert (sum_squares({100,1,15,2})==10230);\n    assert (sum_squares({10000,10000})==200000000);\n    assert (sum_squares({-1.4,4.6,6.3})==75);\n    assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);\n    assert (sum_squares({0})==0);\n    assert (sum_squares({-1})==1);\n    assert (sum_squares({-1,1,0})==2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1,4,9})==98);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n}\n", "entry_point": "sum_squares", "partial": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    # print('@@this is the line to split##')\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n", "gc": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nint sum_squares(vector < float > lst) {\n   \n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        sum += pow(lst[i], 2);\n    }\n    return sum;\n}\n\nint main() {\n    vector < float > lst;\n    lst.push_back(1);\n    lst.push_back(2);\n    lst.push_back(3);\n    printf(\"%d\\n\", sum_squares(lst));\n    lst.push_back(4);\n    lst.push_back(9);\n    printf(\"%d\\n\", sum_squares(lst));\n    lst.push_back(1);\n    lst.push_back(4);\n    lst.push_back(9);\n    printf(\"%d\\n\", sum_squares(lst));\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(5);\n    lst.push_back(7);\n    printf(\"%d\\n\", sum_squares(lst));\n    lst.push_back(1.4);\n    lst.push_back(4.2);\n    lst.push_back(0);\n    printf(\"%d\\n\", sum_squares(lst));\n    lst.push_back(-2.4);\n    lst.push_back(1);\n    lst.push_back(1);\n    printf(\"%d\\n\", sum_squares(lst));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/134", "prompt": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool check_if_last_char_is_a_letter(string txt) {\n    if (txt.length() == 0) return false;\n    char VAR_0 = txt [ txt.length() - 1 ];\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (VAR_0 < 65 or(VAR_0 > 90 and VAR_0 < 97) or VAR_0 > 122) return false;\n    if (txt.length() == 1) return true;\n    VAR_0 = txt [ txt.length() - 2 ];\n    if ((VAR_0 >= 65 and VAR_0 <= 90) or(VAR_0 >= 97 and VAR_0 <= 122)) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"eeeee\") == false);\n    assert (check_if_last_char_is_a_letter(\"A\") == true);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie \") == false);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == false);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"eeeee e \") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "entry_point": "check_if_last_char_is_a_letter", "partial": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    # print('@@this is the line to split##')\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n", "gc": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool check_if_last_char_is_a_letter(string txt) {\n    if (txt.length() == 0) return false;\n    char VAR_0 = txt [ txt.length() - 1 ];\n   \n    if (VAR_0 >= 'a' && VAR_0 <= 'z') {\n        for (int i = txt.length() - 2; i >= 0; i--) {\n            if (txt [ i ] >= 'a' && txt [ i ] <= 'z') {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    string txt;\n    while (scanf(\"%s\", &txt)!= EOF) {\n        printf(\"%s\\n\", check_if_last_char_is_a_letter(txt)? \"true\" : \"false\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/135", "prompt": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint can_arrange(vector < int > arr) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' int max = -1;\n    for (int VAR_0 = 0; VAR_0 < arr.size(); VAR_0++)\n    if (arr [ VAR_0 ] <= VAR_0) max = VAR_0;\n    return max;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,4,5})==-1);\n    assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);\n    assert (can_arrange({4,8,5,7,3})==4);\n    assert (can_arrange({})==-1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,3})==-1);\n}\n", "entry_point": "can_arrange", "partial": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    # print('@@this is the line to split##')\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n", "gc": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint can_arrange(vector < int > arr) {\n   \n   int n = arr.size();\n   int i = 0;\n   int j = 0;\n   \n   while (i < n) {\n      if (arr[i] <= arr[j]) {\n         i++;\n      } else {\n         j = i;\n         i = j + 1;\n      }\n   }\n   \n   return j;\n}\n\nint main() {\n   \n   vector < int > arr = {1,2,4,3,5};\n   \n   printf(\"%d\\n\", can_arrange(arr));\n   \n   return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/136", "prompt": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > largest_smallest_integers(vector < int > lst) {\n    int maxneg = 0, minpos = 0;\n    for (int VAR_0 = 0; VAR_0 < lst.size(); VAR_0++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (lst [ VAR_0 ] < 0 and(maxneg == 0 or lst [ VAR_0 ] > maxneg)) maxneg = lst [ VAR_0 ];\n        if (lst [ VAR_0 ] > 0 and(minpos == 0 or lst [ VAR_0 ] < minpos)) minpos = lst [ VAR_0 ];\n        }\n    return {\n        maxneg, minpos}\n    ;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));\n    assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));\n    assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));\n    assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n}\n", "entry_point": "largest_smallest_integers", "partial": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    # print('@@this is the line to split##')\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n", "gc": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > largest_smallest_integers(vector < int > lst) {\n    int maxneg = 0, minpos = 0;\n    for (int VAR_0 = 0; VAR_0 < lst.size(); VAR_0++)\n   \n    {\n        if (lst[VAR_0] < 0)\n        {\n            maxneg = max(maxneg, lst[VAR_0]);\n        }\n        else\n        {\n            minpos = min(minpos, lst[VAR_0]);\n        }\n    }\n    return vector < int > {maxneg, minpos};\n}\nint main()\n{\n    vector < int > lst = {2, 4, 1, 3, 5, 7};\n    vector < int > lst2 = {0, 0};\n    vector < int > lst3 = {0};\n    vector < int > lst4 = {};\n    vector < int > lst5 = {};\n    vector < int > lst6 = {};\n    vector < int > lst7 = {};\n    vector < int > lst8 = {};\n    vector < int > lst9 = {};\n    vector < int > lst10 = {};\n    vector < int > lst11 = {};\n    vector < int > lst12 = {};\n    vector < int > lst13 = {};\n    vector < int > lst14 = {};\n    vector < int > lst15 = {};\n    vector < int > lst16 = {};\n    vector < int > lst17 = {};\n    vector < int > lst18 = {};\n    vector < int > lst19 = {};\n    vector < int > lst20 = {};\n    vector < int > lst21 = {};\n    vector < int > lst22 = {};\n    vector < int > lst23 = {};\n    vector < int > lst24 = {};\n    vector < int > lst25 = {};\n    vector < int > lst26 = {};\n    vector < int > lst27 = {};\n    vector < int > lst28 = {};\n    vector < int > lst29 = {};\n    vector < int > lst30 = {};\n    vector < int > lst31 = {};\n    vector < int > lst32 = {};\n    vector < int > lst33 = {};\n    vector < int > lst34 = {};\n    vector < int > lst35 = {};\n    vector < int > lst36 = {};\n    vector < int > lst37 = {};\n    vector < int > lst38 = {};\n    vector < int > lst39 = {};\n    vector < int > lst40 = {};\n    vector < int > lst41 = {};\n    vector < int > lst42 = {};\n    vector < int > lst43 = {};\n    vector < int > lst44 = {};\n    vector < int > lst45 = {};\n    vector < int > lst46 = {};\n    vector < int > lst47 = {};\n    vector < int > lst48 = {};\n    vector < int > lst49 = {};\n    vector < int > lst50 = {};\n    vector < int > lst51 = {};\n    vector < int > lst52 = {};\n    vector < int > lst53 = {};\n    vector < int > lst54 = {};\n    vector < int > lst55 = {};\n    vector < int > lst56 = {};\n    vector < int > lst57 = {};\n    vector < int > lst58 = {};\n    vector < int > lst59 = {};\n    vector < int > lst60 = {};\n    vector < int > lst61 = {};\n    vector < int > lst62 = {};\n    vector < int > lst63 = {};\n    vector < int > lst64 = {};\n    vector < int > lst65 = {};\n    vector < int > lst66 = {};\n    vector < int > lst67 = {};\n    vector < int > lst68 = {};\n    vector < int > lst69 = {};\n    vector < int > lst70 = {};\n    vector < int > lst71 = {};\n    vector < int > lst72 = {};\n    vector < int > lst73 = {};\n    vector < int > lst74 = {};\n    vector < int > lst75 = {};\n    vector < int > lst76 = {};\n    vector < int > lst77 = {};\n    vector < int > lst78 = {};\n    vector < int > lst79 = {};\n    vector < int > lst80 = {};\n    vector < int > lst81 = {};\n    vector < int > lst82 = {};\n    vector < int > lst83 = {};\n    vector < int > lst84 = {};\n    vector < int > lst85 = {};\n    vector < int > lst86 = {};\n    vector < int > lst87 = {};\n    vector < int > lst88 = {};\n    vector < int > lst89 = {};\n    vector < int > lst90 = {};\n    vector < int > lst91 = {};\n    vector < int > lst92 = {};\n    vector < int > lst93 = {};\n    vector < int > lst94 = {};\n    vector < int > lst95 = {};\n    vector < int > lst96 = {};\n    vector < int > lst97 = {};\n    vector < int > lst98 = {};\n    vector < int > lst99 = {};\n    vector < int > lst100 = {};\n    vector < int > lst101 = {};\n    vector < int > lst102 = {};", "passed": 0, "run_status": 1}
{"task_id": "CPP/137", "prompt": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) ➞ 2.5\ncompare_one(1, \"2,3\") ➞ \"2,3\"\ncompare_one(\"5,1\", \"6\") ➞ \"6\"\ncompare_one(\"1\", 1) ➞ \"None\"\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\n#include <boost/any.hpp>\nusing std;\nboost :: any compare_one(boost :: any a, boost :: any b) {\n    double numa, numb;\n    boost :: any out;\n    if (a.type() == typeid(string))\n     {\n        string VAR_0;\n        VAR_0 = boost :: any_cast < string >(a);\n        if (find(VAR_0.begin(), VAR_0.end(), ' ') != VAR_0.end())\n        for (int i = 0; i < VAR_0.length(); i++)\n        if (VAR_0 [ i ] == ' ') VAR_0 = VAR_0.substr(0, i) + ' ' + VAR_0.substr(i + 1);\n        numa = atof(VAR_0.c_str());\n        }\n    else {\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (a.type() == typeid(int)) numa = boost :: any_cast < int >(a);\n        if (a.type() == typeid(double)) numa = boost :: any_cast < double >(a);\n        }\n    if (b.type() == typeid(string))\n     {\n        string VAR_0;\n        VAR_0 = boost :: any_cast < string >(b);\n        if (find(VAR_0.begin(), VAR_0.end(), ' ') != VAR_0.end())\n        for (int i = 0; i < VAR_0.length(); i++)\n        if (VAR_0 [ i ] == ' ') VAR_0 = VAR_0.substr(0, i) + ' ' + VAR_0.substr(i + 1);\n        numb = atof(VAR_0.c_str());\n        }\n    else {\n        if (b.type() == typeid(int)) numb = boost :: any_cast < int >(b);\n        if (b.type() == typeid(double)) numb = boost :: any_cast < double >(b);\n        }\n    \n    if (numa == numb) return string(\"None\");\n    if (numa < numb) return b;\n    if (numa > numb) return a;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<int>(compare_one(1, 2)) == 2);\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<int>(compare_one(2, 3)) == 3);\n    assert (boost::any_cast<int>(compare_one(5, 6)) == 6);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), string(\"2\"))) == \"2\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "entry_point": "compare_one", "partial": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) ➞ 2.5\ncompare_one(1, \"2,3\") ➞ \"2,3\"\ncompare_one(\"5,1\", \"6\") ➞ \"6\"\ncompare_one(\"1\", 1) ➞ \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        # print('@@this is the line to split##')\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n", "gc": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be. or,\n\ncompare_one(1, 2.5) ➞ 2.5\ncompare_one(1, \"2,3\") ➞ \"2,3\"\ncompare_one(\"5,1\", \"6\") ➞ \"6\"\ncompare_one(\"1\", 1) ➞ \"None\"\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\n#include <boost/any.hpp>\nusing std;\nboost :: any compare_one(boost :: any a, boost :: any b) {\n    double numa, numb;\n    boost :: any out;\n    if (a.type() == typeid(string))\n     {\n        string VAR_0;\n        VAR_0 = boost :: any_cast < string >(a);\n        if (find(VAR_0.begin(), VAR_0.end(),'')!= VAR_0.end())\n        for (int i = 0; i < VAR_0.length(); i++)\n        if (VAR_0 [ i ] =='') VAR_0 = VAR_0.substr(0, i) +'' + VAR_0.substr(i + 1);\n        numa = atof(VAR_0.c_str());\n        }\n    else {\n       \n        numa = boost :: any_cast < double >(a);\n    }\n    if (b.type() == typeid(string))\n     {\n        string VAR_1;\n        VAR_1 = boost :: any_cast < string >(b);\n        if (find(VAR_1.begin(), VAR_1.end(),'')!= VAR_1.end())\n        for (int i = 0; i < VAR_1.length(); i++)\n        if (VAR_1 [ i ] =='') VAR_1 = VAR_1.substr(0, i) +'' + VAR_1.substr(i + 1);\n        numb = atof(VAR_1.c_str());\n        }\n    else {\n       \n        numb = boost :: any_cast < double >(b);\n    }\n    if (numa > numb) out = a;\n    else out = b;\n    return out;\n}\n\nint main() {\n    double numa, numb;\n    numa = 1.5;\n    numb = 2.5;\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"2,3\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = 1;\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"1\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"1,2\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"1,2,3\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"1,2,3,4\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"1,2,3,4,5\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"1,2,3,4,5,6\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"1,2,3,4,5,6,7\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"1,2,3,4,5,6,7,8\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"1,2,3,4,5,6,7,8,9\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"1,2,3,4,5,6,7,8,9,10\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"1,2,3,4,5,6,7,8,9,10,11\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"1,2,3,4,5,6,7,8,9,10,11,12\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"1,2,3,4,5,6,7,8,9,10,11,12,13\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"1,2,3,4,5,6,7,8,9,10,11,12,13,14\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa = 1.5;\n    numb = \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\";\n    printf(\"%f\\n\", compare_one(numa, numb));\n    numa =", "passed": 0, "run_status": 2}
{"task_id": "CPP/138", "prompt": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include <stdio.h>\nusing std;\nbool is_equal_to_sum_even(int VAR_0) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (VAR_0 % 2 == 0 and VAR_0 >= 8) return true;\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n    assert (is_equal_to_sum_even(10) == true);\n    assert (is_equal_to_sum_even(11) == false);\n    assert (is_equal_to_sum_even(12) == true);\n    assert (is_equal_to_sum_even(13) == false);\n    assert (is_equal_to_sum_even(16) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n}\n", "entry_point": "is_equal_to_sum_even", "partial": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    # print('@@this is the line to split##')\n    if (n%2==0 and n>=8) return true;\n    return false;\n}\n", "gc": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include <stdio.h>\nusing std;\nbool is_equal_to_sum_even(int VAR_0) {\n   \n   if (VAR_0 < 0) {\n      return false;\n   }\n   \n   int sum = 0;\n   \n   for (int i = 0; i < VAR_0; i++) {\n      if (i % 2 == 0) {\n         sum += i;\n      }\n   }\n   \n   return (sum == VAR_0);\n}\n\n/*\n\n#include <stdio.h>\n#include <stdlib.h>\nusing namespace std;\n\nint main() {\n   \n   int VAR_0;\n   \n   scanf(\"%d\", &VAR_0);\n   \n   if (is_equal_to_sum_even(VAR_0) == true) {\n      printf(\"true\\n\");\n   } else {\n      printf(\"false\\n\");\n   }\n   \n   return 0;\n}\n*/\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/139", "prompt": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include <stdio.h>\nusing std;\nlong long special_factorial(int n) {\n    long long fact = 1, bfact = 1;\n    for (int VAR_0 = 1; VAR_0 <= n; VAR_0++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        fact = fact * VAR_0;\n        bfact = bfact * fact;\n        }\n    return bfact;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n    assert (special_factorial(5) == 34560);\n    assert (special_factorial(7) == 125411328000);\n    assert (special_factorial(1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n}\n", "entry_point": "special_factorial", "partial": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    # print('@@this is the line to split##')\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n", "gc": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include <stdio.h>\nusing std;\nlong long special_factorial(int n) {\n    long long fact = 1, bfact = 1;\n    for (int VAR_0 = 1; VAR_0 <= n; VAR_0++)\n   \n        fact *= VAR_0;\n    return fact;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%lld\\n\", special_factorial(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/14", "prompt": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < string > all_prefixes(string str) {\n    vector < string > out;\n    string VAR_0 = \"\";\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i =0;i<str.length(); i++)\n     {\n        VAR_0 = VAR_0 + str [ i ];\n        out.push_back(VAR_0);\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"\"),{}));\n    assert (issame(all_prefixes(\"asdfgh\") ,{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}));\n     assert (issame(all_prefixes(\"WWW\") ,{\"W\", \"WW\", \"WWW\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"abc\"),{\"a\",\"ab\",\"abc\"}));\n}\n", "entry_point": "all_prefixes", "partial": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    # print('@@this is the line to split##')\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n", "gc": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < string > all_prefixes(string str) {\n    vector < string > out;\n    string VAR_0 = \"\";\n   \n    for (int i = 0; i < str.length(); i++) {\n        for (int j = 0; j < str.length(); j++) {\n            if (str[i] == str[j]) {\n                VAR_0 = VAR_0 + str[i];\n            }\n        }\n        out.push_back(VAR_0);\n        VAR_0 = \"\";\n    }\n    return out;\n}\n\nint main() {\n    string str = \"abc\";\n    vector < string > out = all_prefixes(str);\n    for (int i = 0; i < out.size(); i++) {\n        printf(\"%s\\n\", out[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/140", "prompt": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring fix_spaces(string text) {\n    string VAR_0 = \"\";\n    int spacelen = 0;\n    for (int i = 0; i < text.length(); i++)\n    if (text [ i ] == ' ') spacelen+=1;\n    else\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (spacelen == 1) VAR_0 = VAR_0 + ' ';\n        if (spacelen == 2) VAR_0 = VAR_0 + \"__\";\n        if (spacelen > 2) VAR_0 = VAR_0 + ' ';\n        spacelen = 0;\n        VAR_0 = VAR_0 + text [ i ];\n        }\n    if (spacelen == 1) VAR_0 = VAR_0 + ' ';\n    if (spacelen == 2) VAR_0 = VAR_0 + \"__\";\n    if (spacelen > 2) VAR_0 = VAR_0 + ' ';\n    return VAR_0;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert (fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert (fix_spaces(\"Exa   mple\") == \"Exa-mple\");\n    assert (fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Example 1\") == \"Example_1\");\n    assert (fix_spaces(\" Example 2\") == \"_Example_2\");\n    assert (fix_spaces(\" Example   3\") == \"_Example-3\");\n}\n", "entry_point": "fix_spaces", "partial": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        # print('@@this is the line to split##')\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n", "gc": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring fix_spaces(string text) {\n    string VAR_0 = \"\";\n    int spacelen = 0;\n    for (int i = 0; i < text.length(); i++)\n    if (text [ i ] =='') spacelen+=1;\n    else\n     {\n       \n       if (spacelen > 1) VAR_0 += \"_\";\n       VAR_0 += text [ i ];\n       spacelen = 0;\n     }\n    return VAR_0;\n}\nint main()\n{\n    string text = \"Example\";\n    printf(\"%s\\n\", fix_spaces(text).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/141", "prompt": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring file_name_check(string VAR_0) {\n    int numdigit = 0, numdot = 0;\n    if (VAR_0.length() < 5) return \"No\";\n    char w = VAR_0 [ 0 ];\n    if (w < 65 or(w > 90 and w < 97) or w > 122) return \"No\";\n    string last = VAR_0.substr(VAR_0.length() - 4, 4);\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (last != \".txt\" and last != \".exe\" and last != \".dll\") return \"No\";\n    for (int i = 0; i < VAR_0.length(); i++)\n     {\n        if (VAR_0 [ i ] >= 48 and VAR_0 [ i ] <= 57) numdigit+=1;\n        if (VAR_0 [ i ] == ' ') numdot+=1;\n        }\n    if (numdigit > 3 or numdot != 1) return \"No\";\n    return \"Yes\";}", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n    assert (file_name_check(\"s1sdf3.asd\") == \"No\");\n    assert (file_name_check(\"K.dll\") == \"Yes\");\n    assert (file_name_check(\"MY16FILE3.exe\") == \"Yes\");\n    assert (file_name_check(\"His12FILE94.exe\") == \"No\");\n    assert (file_name_check(\"_Y.txt\") == \"No\");\n    assert (file_name_check(\"?aREYA.exe\") == \"No\");\n    assert (file_name_check(\"/this_is_valid.dll\") == \"No\");\n    assert (file_name_check(\"this_is_valid.wow\") == \"No\");\n    assert (file_name_check(\"this_is_valid.txt\") == \"Yes\");\n    assert (file_name_check(\"this_is_valid.txtexe\") == \"No\");\n    assert (file_name_check(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert (file_name_check(\"@this1_is6_valid.exe\") == \"No\");\n    assert (file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert (file_name_check(\"all.exe.txt\") == \"No\");\n    assert (file_name_check(\"I563_No.exe\") == \"Yes\");\n    assert (file_name_check(\"Is3youfault.txt\") == \"Yes\");\n    assert (file_name_check(\"no_one#knows.dll\") == \"Yes\");\n    assert (file_name_check(\"1I563_Yes3.exe\") == \"No\");\n    assert (file_name_check(\"I563_Yes3.txtt\") == \"No\");\n    assert (file_name_check(\"final..txt\") == \"No\");\n    assert (file_name_check(\"final132\") == \"No\");\n    assert (file_name_check(\"_f4indsartal132.\") == \"No\");\n    assert (file_name_check(\".txt\") == \"No\");\n    assert (file_name_check(\"s.\") == \"No\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n}\n", "entry_point": "file_name_check", "partial": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    # print('@@this is the line to split##')\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n", "gc": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring file_name_check(string VAR_0) {\n    int numdigit = 0, numdot = 0;\n    if (VAR_0.length() < 5) return \"No\";\n    char w = VAR_0 [ 0 ];\n    if (w < 65 or(w > 90 and w < 97) or w > 122) return \"No\";\n    string last = VAR_0.substr(VAR_0.length() - 4, 4);\n   \n    if (last == \"txt\" or last == \"exe\" or last == \"dll\") {\n        numdigit = VAR_0.length() - 4;\n    }\n    else {\n        return \"No\";\n    }\n    if (numdigit < 3) return \"No\";\n    for (int i = 0; i < numdigit; i++) {\n        if (VAR_0 [ i ] < 48 or VAR_0 [ i ] > 57) return \"No\";\n    }\n    if (VAR_0 [ numdigit ]!= '.') return \"No\";\n    if (VAR_0 [ numdigit + 1 ] == '\\0') return \"No\";\n    if (VAR_0 [ numdigit + 1 ] < 65 or(VAR_0 [ numdigit + 1 ] > 90 and VAR_0 [ numdigit + 1 ] < 97) or VAR_0 [ numdigit + 1 ] > 122) return \"No\";\n    if (VAR_0 [ numdigit + 2 ]!= '\\0') return \"No\";\n    if (VAR_0 [ numdigit + 3 ]!= '\\0') return \"No\";\n    if (VAR_0 [ numdigit + 4 ]!= '\\0') return \"No\";\n    if (VAR_0 [ numdigit + 5 ]!= '\\0') return \"No\";\n    if (VAR_0 [ numdigit + 6 ]!= '\\0') return \"No\";\n    if (VAR_0 [ numdigit + 7 ]!= '\\0') return \"No\";\n    if (VAR_0 [ numdigit + 8 ]!= '\\0') return \"No\";\n    if (VAR_0 [ numdigit + 9 ]!= '\\0') return \"No\";\n    return \"Yes\";\n}\n\nint main() {\n    string VAR_0 = \"example.txt\";\n    printf(\"%s\\n\", file_name_check(VAR_0).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/142", "prompt": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint sum_squares(vector < int > lst) {\n    int sum = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 =0;i<lst.size(); VAR_0++)\n    if (VAR_0 % 3 == 0) sum+=lst [ VAR_0 ] * lst [ VAR_0 ];\n    else\nif (VAR_0 % 4 == 0) sum+=lst [ VAR_0 ] * lst [ VAR_0 ] * lst [ VAR_0 ];\n    else sum+=lst [ VAR_0 ];\n    return sum;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({1,4,9}) == 14);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);\n    assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);\n    assert (sum_squares({0}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n    assert (sum_squares({-56,-99,1,0,-2}) == 3030);\n    assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);\n    assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);\n    assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n}\n", "entry_point": "sum_squares", "partial": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum=0;\n    # print('@@this is the line to split##')\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n", "gc": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint sum_squares(vector < int > lst) {\n    int sum = 0;\n   \n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nint main() {\n    vector < int > lst;\n    lst.push_back(1);\n    lst.push_back(2);\n    lst.push_back(3);\n    lst.push_back(-1);\n    lst.push_back(-5);\n    lst.push_back(2);\n    lst.push_back(-1);\n    lst.push_back(-5);\n    printf(\"%d\\n\", sum_squares(lst));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/143", "prompt": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring words_in_sentence(string sentence) {\n    string out = \"\";\n    string VAR_0 = \"\";\n    sentence = sentence + ' ';\n    \n    for (int i = 0; i < sentence.size(); i++)\n    if (sentence [ i ] != ' ') VAR_0 = VAR_0 + sentence [ i ];\n    else\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' bool isp = true;\n        int l = VAR_0.length();\n        if (l < 2) isp = false;\n        for (int j = 2; j * j <= l; j++)\n        if (l % j == 0) isp = false;\n        if (isp) out = out + VAR_0 + ' ';\n        VAR_0 = \"\";}\n    if (out.length() > 0)\n    out.pop_back();\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert (words_in_sentence(\"there is no place available here\") == \"there is no place\");\n    assert (words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert (words_in_sentence(\"go for it\") == \"go for it\");\n    assert (words_in_sentence(\"here\") == \"\");\n    assert (words_in_sentence(\"here is\") == \"is\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n}\n", "entry_point": "words_in_sentence", "partial": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        # print('@@this is the line to split##')\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n", "gc": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring words_in_sentence(string sentence) {\n    string out = \"\";\n    string VAR_0 = \"\";\n    sentence = sentence +'';\n    \n    for (int i = 0; i < sentence.size(); i++)\n    if (sentence [ i ]!='') VAR_0 = VAR_0 + sentence [ i ];\n    else\n     {\n       \n       if (VAR_0.size() > 0)\n       {\n         out = out + VAR_0;\n         VAR_0 = \"\";\n       }\n       else\n       {\n         out = out + VAR_0;\n         VAR_0 = \"\";\n       }\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n", "passed": 0, "run_status": 2}
{"task_id": "CPP/144", "prompt": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool simplify(string x, string n) {\n    int a, b, c, d, VAR_0;\n    for (VAR_0 = 0; VAR_0 < x.size(); VAR_0++)\n    if (x [ VAR_0 ] == ' ') {\n        a = atoi(x.substr(0, VAR_0).c_str());\n        b = atoi(x.substr(VAR_0 + 1).c_str());\n       \n", "canonical_solution": "print(' @ this is the line to split ## '}\n    for (VAR_0 = 0; VAR_0 < n.size(); VAR_0++)\n    if (n [ VAR_0 ] == ' ') {\n        c = atoi(n.substr(0, VAR_0).c_str());\n        d = atoi(n.substr(VAR_0 + 1).c_str());\n        }\n    if ((a * c) %(b * d) == 0) return true;\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"5/1\", \"3/1\") == true);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n    assert (simplify(\"2/10\", \"50/10\") == true);\n    assert (simplify(\"7/2\", \"4/2\") == true);\n    assert (simplify(\"11/6\", \"6/1\") == true);\n    assert (simplify(\"2/3\", \"5/2\") == false);\n    assert (simplify(\"5/2\", \"3/5\") == false);\n    assert (simplify(\"2/4\", \"8/4\") == true);\n    assert (simplify(\"2/4\", \"4/2\") == true);\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/5\", \"1/5\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n}\n", "entry_point": "simplify", "partial": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n            # print('@@this is the line to split##')\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n", "gc": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool simplify(string x, string n) {\n    int a, b, c, d, VAR_0;\n    for (VAR_0 = 0; VAR_0 < x.size(); VAR_0++)\n    if (x [ VAR_0 ] =='') {\n        a = atoi(x.substr(0, VAR_0).c_str());\n        b = atoi(x.substr(VAR_0 + 1).c_str());\n       \n        c = a / b;\n        d = a % b;\n        if (d == 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    string x, n;\n    scanf(\"%s %s\", &x, &n);\n    printf(\"%s\\n\", simplify(x, n)? \"true\" : \"false\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/145", "prompt": "/*\nWrite a function which sorts the given vector of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <string>\nusing std;\nvector < int > order_by_points(vector < int > nums) {\n    vector < int > sumdigit = {\n        }\n    ;\n    for (int i = 0; i < nums.size(); i++)\n     {\n        string w = to_string(abs(nums [ i ]));\n        int sum = 0;\n        for (int VAR_0 = 1; VAR_0 < w.length(); VAR_0++)\n        sum+=w [ VAR_0 ] - 48;\n        if (nums [ i ] > 0) sum+=w [ 0 ] - 48;\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' else sum-=w [ 0 ] - 48;\n        sumdigit.push_back(sum);\n        }\n    int m;\n    for (int i = 0; i < nums.size(); i++)\n    for (int VAR_0 = 1; VAR_0 < nums.size(); VAR_0++)\n    if (sumdigit [ VAR_0 - 1 ] > sumdigit [ VAR_0 ])\n     {\n        m = sumdigit [ VAR_0 ]; sumdigit [ VAR_0 ] = sumdigit [ VAR_0 - 1 ]; sumdigit [ VAR_0 - 1 ] = m;\n        m = nums [ VAR_0 ]; nums [ VAR_0 ] = nums [ VAR_0 - 1 ]; nums [ VAR_0 - 1 ] = m;\n        }\n    return nums;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46}) , {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n    assert (issame(order_by_points({}) , {}));\n    assert (issame(order_by_points({1, -11, -32, 43, 54, -98, 2, -3}) , {-3, -32, -98, -11, 1, 2, 43, 54}));\n    assert (issame(order_by_points({1,2,3,4,5,6,7,8,9,10,11}) , {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n    assert (issame(order_by_points({0,6,6,-76,-21,23,4}) , {-76, -21, 0, 4, 23, 6, 6}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({}) , {}));\n}\n", "entry_point": "order_by_points", "partial": "/*\nWrite a function which sorts the given vector of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        # print('@@this is the line to split##')\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n", "gc": "/*\nWrite a function which sorts the given vector of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <string>\nusing std;\nvector < int > order_by_points(vector < int > nums) {\n    vector < int > sumdigit = {\n        }\n    ;\n    for (int i = 0; i < nums.size(); i++)\n     {\n        string w = to_string(abs(nums [ i ]));\n        int sum = 0;\n        for (int VAR_0 = 1; VAR_0 < w.length(); VAR_0++)\n        sum+=w [ VAR_0 ] - 48;\n        if (nums [ i ] > 0) sum+=w [ 0 ] - 48;\n       \n        sumdigit.push_back(sum);\n     }\n    return sumdigit;\n}\n\nint main() {\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/146", "prompt": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nint specialFilter(vector < int > nums) {\n    int num = 0;\n    for (int VAR_0 = 0; VAR_0 < nums.size(); VAR_0++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (nums [ VAR_0 ] > 10)\n     {\n        string w = to_string(nums [ VAR_0 ]);\n        if (w [ 0 ] % 2 == 1 and w [ w.length() - 1 ] % 2 == 1) num+=1;\n        }\n    return num;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({5, -2, 1, -5}) == 0  );\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n    assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);\n    assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);\n    assert (specialFilter({1}) == 0              );\n    assert (specialFilter({}) == 0                   );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n}\n", "entry_point": "specialFilter", "partial": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    # print('@@this is the line to split##')\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n", "gc": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nint specialFilter(vector < int > nums) {\n    int num = 0;\n    for (int VAR_0 = 0; VAR_0 < nums.size(); VAR_0++)\n   \n    {\n        if (nums[VAR_0] > 10 && nums[VAR_0] % 2 == 1)\n        {\n            num++;\n        }\n    }\n    return num;\n}\n\nint main()\n{\n    vector < int > nums;\n    nums.push_back(15);\n    nums.push_back(-73);\n    nums.push_back(14);\n    nums.push_back(-15);\n    nums.push_back(33);\n    nums.push_back(-2);\n    nums.push_back(-3);\n    nums.push_back(45);\n    nums.push_back(21);\n    nums.push_back(109);\n    printf(\"%d\\n\", specialFilter(nums));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/147", "prompt": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint get_matrix_triples(int n) {\n    vector < int > a;\n    vector < vector < int > > sum = {\n         {\n            0, 0, 0}\n        }\n    ;\n    vector < vector < int > > sum2 = {\n         {\n            0, 0, 0}\n        }\n    ;\n    for (int VAR_0 = 1; VAR_0 <= n; VAR_0++)\n     {\n        a.push_back((VAR_0 * VAR_0 - VAR_0 + 1) % 3);\n        sum.push_back(sum [ sum.size() - 1 ]);\n        sum [ VAR_0 ] [ a [ VAR_0 - 1 ] ]+=1;\n        }\n    for (int times = 1; times < 3; times++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        for (int VAR_0 = 1; VAR_0 <= n; VAR_0++)\n         {\n            sum2.push_back(sum2 [ sum2.size() - 1 ]);\n            if (VAR_0 >= 1)\n            for (int j = 0; j <= 2; j++)\n            sum2 [ VAR_0 ] [(a [ VAR_0 - 1 ] + j) % 3 ]+=sum [ VAR_0 - 1 ] [ j ];\n            }\n        sum = sum2;\n        sum2 = {\n             {\n                0, 0, 0}\n            }\n        ;\n        }\n    \n    return sum [ n ] [ 0 ];\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n    assert (get_matrix_triples(6) == 4);\n    assert (get_matrix_triples(10) == 36);\n    assert (get_matrix_triples(100) == 53361);\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n}\n", "entry_point": "get_matrix_triples", "partial": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    # print('@@this is the line to split##')\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n", "gc": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint get_matrix_triples(int n) {\n    vector < int > a;\n    vector < vector < int > > sum = {\n         {\n            0, 0, 0}\n        }\n    ;\n    vector < vector < int > > sum2 = {\n         {\n            0, 0, 0}\n        }\n    ;\n    for (int VAR_0 = 1; VAR_0 <= n; VAR_0++)\n     {\n        a.push_back((VAR_0 * VAR_0 - VAR_0 + 1) % 3);\n        sum.push_back(sum [ sum.size() - 1 ]);\n        sum [ VAR_0 ] [ a [ VAR_0 - 1 ] ]+=1;\n        }\n    for (int times = 1; times < 3; times++)\n   \n    {\n        for (int VAR_0 = 1; VAR_0 <= n; VAR_0++)\n     {\n        for (int VAR_1 = VAR_0 + 1; VAR_1 <= n; VAR_1++)\n        {\n            sum2.push_back(sum [ VAR_0 ]);\n            sum2 [ VAR_1 ] [ a [ VAR_1 - VAR_0 ] ]+=1;\n        }\n    }\n    }\n    int count = 0;\n    for (int VAR_0 = 1; VAR_0 <= n; VAR_0++)\n    {\n        for (int VAR_1 = VAR_0 + 1; VAR_1 <= n; VAR_1++)\n        {\n            for (int VAR_2 = VAR_1 + 1; VAR_2 <= n; VAR_2++)\n            {\n                if (sum [ VAR_0 ] [ a [ VAR_1 - VAR_0 ] ] * sum [ VAR_1 ] [ a [ VAR_2 - VAR_1 ] ] * sum [ VAR_2 ] [ a [ VAR_0 ] ] == 3)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\", get_matrix_triples(n));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/148", "prompt": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < string > bf(string planet1, string planet2) {\n    vector < string > planets = {\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    ;\n    int pos1 = -1, pos2 = -1, VAR_0;\n    for (VAR_0 = 0; VAR_0 < planets.size(); VAR_0++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (planets [ VAR_0 ] == planet1) pos1 = VAR_0;\n        if (planets [ VAR_0 ] == planet2) pos2 = VAR_0;\n        }\n    if (pos1 == -1 or pos2 == -1) return {\n        }\n    ;\n    if (pos1 > pos2) {\n        VAR_0 = pos1; pos1 = pos2; pos2 = VAR_0;}\n    vector < string > out = {\n        }\n    ;\n    for (VAR_0 = pos1 + 1; VAR_0 < pos2; VAR_0++)\n    out.push_back(planets [ VAR_0 ]);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert (issame(bf(\"Neptune\", \"Venus\") , {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Earth\") , {}));\n    assert (issame(bf(\"Mars\", \"Earth\") , {}));\n    assert (issame(bf(\"Jupiter\", \"Makemake\") , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n}\n", "entry_point": "bf", "partial": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    # print('@@this is the line to split##')\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n", "gc": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < string > bf(string planet1, string planet2) {\n    vector < string > planets = {\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    ;\n    int pos1 = -1, pos2 = -1, VAR_0;\n    for (VAR_0 = 0; VAR_0 < planets.size(); VAR_0++)\n     {\n       \n        if (planet1 == planets[VAR_0])\n         {\n            pos1 = VAR_0;\n            break;\n         }\n     }\n    for (VAR_0 = 0; VAR_0 < planets.size(); VAR_0++)\n     {\n       \n        if (planet2 == planets[VAR_0])\n         {\n            pos2 = VAR_0;\n            break;\n         }\n     }\n    if (pos1 == -1 || pos2 == -1)\n     {\n        return {};\n     }\n    vector < string > result;\n    for (VAR_0 = 0; VAR_0 < planets.size(); VAR_0++)\n     {\n       \n        if (pos1!= VAR_0 && pos2!= VAR_0)\n         {\n            result.push_back(planets[VAR_0]);\n         }\n     }\n    return result;\n}\n\nint main()\n{\n    string planet1, planet2;\n    cin >> planet1 >> planet2;\n    vector < string > result = bf(planet1, planet2);\n    for (VAR_0 = 0; VAR_0 < result.size(); VAR_0++)\n     {\n        cout << result[VAR_0] << endl;\n     }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/149", "prompt": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing std;\nvector < string > sorted_list_sum(vector < string > lst) {\n    vector < string > VAR_0 = {\n        }\n    ;\n    for (int i = 0; i < lst.size(); i++)\n    if (lst [ i ].length() % 2 == 0) VAR_0.push_back(lst [ i ]);\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' string mid;\n    sort(VAR_0.begin(), VAR_0.end());\n    for (int i = 0; i < VAR_0.size(); i++)\n    for (int j = 1; j < VAR_0.size(); j++)\n    if (VAR_0 [ j ].length() < VAR_0 [ j - 1 ].length())\n     {\n        mid = VAR_0 [ j ]; VAR_0 [ j ] = VAR_0 [ j - 1 ]; VAR_0 [ j - 1 ] = mid;\n        }\n    return VAR_0;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"school\", \"AI\", \"asdf\", \"b\"}) , {\"AI\", \"asdf\", \"school\"}));\n    assert (issame(sorted_list_sum({\"d\", \"b\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"d\", \"dcba\", \"abcd\", \"a\"}) , {\"abcd\", \"dcba\"}));\n    assert (issame(sorted_list_sum({\"AI\", \"ai\", \"au\"}) , {\"AI\", \"ai\", \"au\"}));\n    assert (issame(sorted_list_sum({\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"aaaa\", \"bbbb\", \"dd\", \"cc\"}) , {\"cc\", \"dd\", \"aaaa\", \"bbbb\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"ab\", \"a\", \"aaa\", \"cd\"}) , {\"ab\", \"cd\"}));\n}\n", "entry_point": "sorted_list_sum", "partial": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    # print('@@this is the line to split##')\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n", "gc": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing std;\nvector < string > sorted_list_sum(vector < string > lst) {\n    vector < string > VAR_0 = {\n        }\n    ;\n    for (int i = 0; i < lst.size(); i++)\n    if (lst [ i ].length() % 2 == 0) VAR_0.push_back(lst [ i ]);\n   \n    sort(VAR_0.begin(), VAR_0.end());\n    return VAR_0;\n}\nint main() {\n    vector < string > lst = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_0 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_1 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_2 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_3 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_4 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_5 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_6 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_7 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_8 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_9 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_10 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_11 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_12 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_13 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_14 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_15 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_16 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_17 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_18 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_19 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_20 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_21 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_22 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_23 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_24 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_25 = {\n        \"aa\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"b\", \"c\", \"d\"\n    };\n    vector < string > VAR_26 = {\n        \"", "passed": 0, "run_status": 1}
{"task_id": "CPP/15", "prompt": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring string_sequence(int n) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' string out = \"0\";\n    for (int VAR_0 = 1; VAR_0 <= n; VAR_0++)\n    out = out + \" \" + to_string(VAR_0);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(3) == \"0 1 2 3\");\n     assert (string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(5) == \"0 1 2 3 4 5\");\n}\n", "entry_point": "string_sequence", "partial": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    # print('@@this is the line to split##')\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n", "gc": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring string_sequence(int n) {\n   \n   string s;\n   int i;\n   \n   for(i=0; i<n; i++) {\n      s += to_string(i);\n      s += \" \";\n   }\n   \n   return s;\n}\n\nint main() {\n   \n   int n;\n   \n   scanf(\"%d\", &n);\n   \n   printf(\"%s\", string_sequence(n).c_str());\n   \n   return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/150", "prompt": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include <stdio.h>\nusing std;\nint x_or_y(int n, int x, int y) {\n    bool isp = true;\n    if (n < 2) isp = false;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 = 2; VAR_0 * VAR_0 <= n; VAR_0++)\n    if (n % VAR_0 == 0) isp = false;\n    if (isp) return x;\n    return y;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n    assert (x_or_y(3, 33, 5212) == 33);\n    assert (x_or_y(1259, 3, 52) == 3);\n    assert (x_or_y(7919, -1, 12) == -1);\n    assert (x_or_y(3609, 1245, 583) == 583);\n    assert (x_or_y(91, 56, 129) == 129);\n    assert (x_or_y(6, 34, 1234) == 1234);\n    assert (x_or_y(1, 2, 0) == 0);\n    assert (x_or_y(2, 2, 0) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n}\n", "entry_point": "x_or_y", "partial": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    # print('@@this is the line to split##')\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n", "gc": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include <stdio.h>\nusing std;\nint x_or_y(int n, int x, int y) {\n    bool isp = true;\n    if (n < 2) isp = false;\n   \n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            isp = false;\n            break;\n        }\n    }\n    if (isp) {\n        return x;\n    }\n    else {\n        return y;\n    }\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", x_or_y(n, 1, 0));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/151", "prompt": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nlong long double_the_difference(vector < float > lst) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' long long sum = 0;\n    for (int VAR_0 = 0; VAR_0 < lst.size(); VAR_0++)\n    if (lst [ VAR_0 ] - round(lst [ VAR_0 ]) < 1e-4)\n    if (lst [ VAR_0 ] > 0 and(int)(round(lst [ VAR_0 ])) % 2 == 1) sum+=(int)(round(lst [ VAR_0 ])) *(int)(round(lst [ VAR_0 ]));\n    return sum;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({}) == 0);\n    assert (double_the_difference({5, 4}) == 25);\n    assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );\n    assert (double_the_difference({-10, -20, -30}) == 0 );\n    assert (double_the_difference({-1, -2, 8}) == 0);\n    assert (double_the_difference({0.2, 3, 5}) == 34);\n    \n    \n    long long odd_sum=0;\n    vector<float> lst={};\n\n    for (int i=-99;i<100;i+=2)\n    {\n        lst.push_back(i+0.0);\n        if (i>0 and i%2==1) odd_sum+=i*i;\n    }\n  \n    assert (double_the_difference(lst) == odd_sum );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({1, 3, 2, 0}) == 10);\n    assert (double_the_difference({-1, -2, 0}) == 0);\n    assert (double_the_difference({9, -2}) == 81 );\n    assert (double_the_difference({0}) == 0  );\n}\n", "entry_point": "double_the_difference", "partial": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    # print('@@this is the line to split##')\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n", "gc": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nlong long double_the_difference(vector < float > lst) {\n   \n    long long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\nint main() {\n    vector < float > lst;\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(2);\n    lst.push_back(0);\n    lst.push_back(9);\n    lst.push_back(-1);\n    lst.push_back(-2);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back(0);\n    lst.push_back", "passed": 0, "run_status": 2}
{"task_id": "CPP/152", "prompt": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nvector < int > compare(vector < int > game, vector < int > guess) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' vector < int > out;\n    for (int VAR_0 = 0; VAR_0 < game.size(); VAR_0++)\n    out.push_back(abs(game [ VAR_0 ] - guess [ VAR_0 ]));\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));\n    assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));\n    assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n}\n", "entry_point": "compare", "partial": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    # print('@@this is the line to split##')\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n", "gc": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nvector < int > compare(vector < int > game, vector < int > guess) {\n   \n    int i, j;\n    int score, guess_score, diff;\n    vector < int > result;\n    \n    for (i = 0; i < game.size(); i++) {\n        score = game[i];\n        guess_score = guess[i];\n        diff = abs(score - guess_score);\n        result.push_back(diff);\n    }\n    return result;\n}\n\nint main() {\n    \n    vector < int > game = {1,2,3,4,5,1};\n    vector < int > guess = {1,2,3,4,2,-2};\n    vector < int > result = compare(game, guess);\n    for (i = 0; i < result.size(); i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/153", "prompt": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nstring Strongest_Extension(string class_name, vector < string > extensions) {\n    string strongest = \"\";\n    int max = -1000;\n    for (int VAR_0 = 0; VAR_0 < extensions.size(); VAR_0++)\n     {\n        int strength = 0;\n        for (int j = 0; j < extensions [ VAR_0 ].length(); j++)\n         {\n           \n", "canonical_solution": "print(' @ this is the line to split ## ' char chr = extensions [ VAR_0 ] [ j ];\n            if (chr >= 65 and chr <= 90) strength+=1;\n            if (chr >= 97 and chr <= 122) strength-=1;\n            }\n        if (strength > max) {\n            max = strength;\n            strongest = extensions [ VAR_0 ];\n            }\n        }\n    return class_name + ' ' + strongest;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"Watashi\", {\"tEN\", \"niNE\", \"eIGHt8OKe\"}) == \"Watashi.eIGHt8OKe\");\n    assert (Strongest_Extension(\"Boku123\", {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}) == \"Boku123.YEs.WeCaNe\");\n    assert (Strongest_Extension(\"__YESIMHERE\", {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}) == \"__YESIMHERE.NuLl__\");\n    assert (Strongest_Extension(\"K\", {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}) == \"K.TAR\");\n    assert (Strongest_Extension(\"__HAHA\", {\"Tab\", \"123\", \"781345\", \"-_-\"}) == \"__HAHA.123\");\n    assert (Strongest_Extension(\"YameRore\", {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}) == \"YameRore.okIWILL123\");\n    assert (Strongest_Extension(\"finNNalLLly\", {\"Die\", \"NowW\", \"Wow\", \"WoW\"}) == \"finNNalLLly.WoW\");\n    assert (Strongest_Extension(\"_\", {\"Bb\", \"91245\"}) == \"_.Bb\");\n    assert (Strongest_Extension(\"Sp\", {\"671235\", \"Bb\"}) == \"Sp.671235\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\");\n}\n", "entry_point": "Strongest_Extension", "partial": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            # print('@@this is the line to split##')\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n", "gc": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nstring Strongest_Extension(string class_name, vector < string > extensions) {\n    string strongest = \"\";\n    int max = -1000;\n    for (int VAR_0 = 0; VAR_0 < extensions.size(); VAR_0++)\n     {\n        int strength = 0;\n        for (int j = 0; j < extensions [ VAR_0 ].length(); j++)\n         {\n           \n            if (extensions [ VAR_0 ].at(j) >= class_name.at(j))\n             {\n                strength++;\n             }\n            else\n             {\n                break;\n             }\n         }\n        if (strength > max)\n         {\n            max = strength;\n            strongest = extensions [ VAR_0 ];\n         }\n     }\n    return strongest;\n}\nint main()\n{\n    string class_name = \"Slices\";\n    vector < string > extensions = {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"};\n    string result = Strongest_Extension(class_name, extensions);\n    printf(\"%s.%s\\n\", class_name.c_str(), result.c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/154", "prompt": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool cycpattern_check(string a, string b) {\n    for (int VAR_0 = 0; VAR_0 < b.size(); VAR_0++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' string rotate = b.substr(VAR_0) + b.substr(0, VAR_0);\n        if (a.find(rotate) != string :: npos) return true;\n        }\n    return false;\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"xyzw\",\"xyw\") == false );\n    assert  (cycpattern_check(\"yello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whattup\",\"ptut\") == false );\n    assert  (cycpattern_check(\"efef\",\"fee\") == true );\n    assert  (cycpattern_check(\"abab\",\"aabb\") == false );\n    assert  (cycpattern_check(\"winemtt\",\"tinem\") == true );\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"abcd\",\"abd\") == false );\n    assert  (cycpattern_check(\"hello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whassup\",\"psus\") == false );\n    assert  (cycpattern_check(\"abab\",\"baa\") == true );\n    assert  (cycpattern_check(\"efef\",\"eeff\") == false );\n    assert  (cycpattern_check(\"himenss\",\"simen\") == true );\n}\n", "entry_point": "cycpattern_check", "partial": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a,string b){\n    for (int i=0;i<b.size();i++)\n    {\n        # print('@@this is the line to split##')\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n", "gc": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool cycpattern_check(string a, string b) {\n    for (int VAR_0 = 0; VAR_0 < b.size(); VAR_0++)\n     {\n       \n       for (int VAR_1 = 0; VAR_1 < a.size(); VAR_1++)\n       {\n          if (a[VAR_1] == b[VAR_0])\n          {\n             return true;\n          }\n       }\n     }\n     return false;\n}\nint main() {\n    string a, b;\n    scanf(\"%s%s\", &a, &b);\n    printf(\"%s\\n\", cycpattern_check(a, b)? \"Yes\" : \"No\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/155", "prompt": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include <stdio.h>\n#include <math.h>\n#include <string>\n#include <vector>\nusing std;\nvector < int > even_odd_count(int num) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' string w = to_string(abs(num));\n    int n1 = 0, n2 = 0;\n    for (int VAR_0 = 0; VAR_0 < w.length(); VAR_0++)\n    if (w [ VAR_0 ] % 2 == 1) n1+=1;\n    else n2+=1;\n    return {\n        n2, n1}\n    ;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(7) , {0, 1}));\n    assert (issame(even_odd_count(-78) , {1, 1}));\n    assert (issame(even_odd_count(3452) , {2, 2}));\n    assert (issame(even_odd_count(346211) , {3, 3}));\n    assert (issame(even_odd_count(-345821) , {3, 3}));\n    assert (issame(even_odd_count(-2) , {1, 0}));\n    assert (issame(even_odd_count(-45347) , {2, 3}));\n    assert (issame(even_odd_count(0) , {1, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(-12) , {1, 1}));\n    assert (issame(even_odd_count(123) , {1, 2}));\n}\n", "entry_point": "even_odd_count", "partial": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    # print('@@this is the line to split##')\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n", "gc": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include <stdio.h>\n#include <math.h>\n#include <string>\n#include <vector>\nusing std;\nvector < int > even_odd_count(int num) {\n   \n    vector < int > even_odd_count;\n    int count_even = 0, count_odd = 0;\n    \n    while (num > 0) {\n        count_even += num % 10 % 2;\n        count_odd += num % 10 / 2;\n        num /= 10;\n    }\n    \n    even_odd_count.push_back(count_even);\n    even_odd_count.push_back(count_odd);\n    \n    return even_odd_count;\n}\n\nint main() {\n    \n    vector < int > even_odd_count = even_odd_count(123);\n    \n    for (int i = 0; i < even_odd_count.size(); i++) {\n        printf(\"%d \", even_odd_count[i]);\n    }\n    \n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/156", "prompt": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nstring int_to_mini_romank(int number) {\n    string current = \"\";\n    vector < string > rep = {\n        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    ;\n    vector < int > num = {\n        1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    ;\n    int VAR_0 = 0;\n    while (number > 0)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        while (number >= num [ VAR_0 ])\n         {\n            current = current + rep [ VAR_0 ];\n            number-=num [ VAR_0 ];\n            }\n        if (number > 0) VAR_0+=1;\n        }\n    return current;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(251) == \"ccli\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n    assert (int_to_mini_romank(500) == \"d\");\n    assert (int_to_mini_romank(1) == \"i\");\n    assert (int_to_mini_romank(4) == \"iv\");\n    assert (int_to_mini_romank(43) == \"xliii\");\n    assert (int_to_mini_romank(90) == \"xc\");\n    assert (int_to_mini_romank(94) == \"xciv\");\n    assert (int_to_mini_romank(532) == \"dxxxii\");\n    assert (int_to_mini_romank(900) == \"cm\");\n    assert (int_to_mini_romank(994) == \"cmxciv\");\n    assert (int_to_mini_romank(1000) == \"m\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n}\n", "entry_point": "int_to_mini_romank", "partial": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    # print('@@this is the line to split##')\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n", "gc": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nstring int_to_mini_romank(int number) {\n    string current = \"\";\n    vector < string > rep = {\n        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    ;\n    vector < int > num = {\n        1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    ;\n    int VAR_0 = 0;\n    while (number > 0)\n   \n    {\n        while (number >= num[VAR_0])\n        {\n            number -= num[VAR_0];\n            current += rep[VAR_0];\n        }\n        VAR_0++;\n    }\n    return current;\n}\n\nint main() {\n    int number;\n    scanf(\"%d\", &number);\n    printf(\"%s\", int_to_mini_romank(number).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/157", "prompt": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include <stdio.h>\n#include <math.h>\nusing std;\n", "canonical_solution": "print(' @ this is the line to split ## ' bool right_angle_triangle(float VAR_0, float b, float c) {\n    if (abs(VAR_0 * VAR_0 + b * b - c * c) < 1e-4 or abs(VAR_0 * VAR_0 + c * c - b * b) < 1e-4 or abs(b * b + c * c - VAR_0 * VAR_0) < 1e-4) return true;\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n    assert (right_angle_triangle(10, 6, 8) == true);\n    assert (right_angle_triangle(2, 2, 2) == false);\n    assert (right_angle_triangle(7, 24, 25) == true);\n    assert (right_angle_triangle(10, 5, 7) == false);\n    assert (right_angle_triangle(5, 12, 13) == true);\n    assert (right_angle_triangle(15, 8, 17) == true);\n    assert (right_angle_triangle(48, 55, 73) == true);\n    assert (right_angle_triangle(1, 1, 1) == false);\n    assert (right_angle_triangle(2, 2, 10) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n}\n", "entry_point": "right_angle_triangle", "partial": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n# print('@@this is the line to split##')\nbool right_angle_triangle(float a,float b,float c){\n    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n", "gc": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include <stdio.h>\n#include <math.h>\nusing std;\n\nbool right_angle_triangle(int a, int b, int c)\n{\n\tif (a == 0 || b == 0 || c == 0)\n\t\treturn false;\n\treturn (fabs(a - b) > fabs(b - c) && fabs(a - b) > fabs(c - b));\n}\n\nint main()\n{\n\tint a, b, c;\n\tscanf(\"%d%d%d\", &a, &b, &c);\n\tprintf(\"%s\\n\", right_angle_triangle(a, b, c)? \"right\" : \"not right\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/158", "prompt": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing std;\nstring find_max(vector < string > words) {\n    string max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < words.size(); i++)\n     {\n        string VAR_0 = \"\";\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int j = 0; j < words [ i ].length(); j++)\n        if (find(VAR_0.begin(), VAR_0.end(), words [ i ] [ j ]) == VAR_0.end())\n        VAR_0 = VAR_0 + words [ i ] [ j ];\n        if (VAR_0.length() > maxu or(VAR_0.length() == maxu and words [ i ] < max))\n        \n         {\n            max = words [ i ];\n            maxu = VAR_0.length();\n            }\n        }\n    return max;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n    assert ((find_max({\"abc\", \"cba\"}) == \"abc\"));\n    assert ((find_max({\"play\", \"this\", \"game\", \"of\",\"footbott\"}) == \"footbott\"));\n    assert ((find_max({\"we\", \"are\", \"gonna\", \"rock\"}) == \"gonna\"));\n    assert ((find_max({\"we\", \"are\", \"a\", \"mad\", \"nation\"}) == \"nation\"));\n    assert ((find_max({\"this\", \"is\", \"a\", \"prrk\"}) == \"this\"));\n    assert ((find_max({\"b\"}) == \"b\"));\n    assert ((find_max({\"play\", \"play\", \"play\"}) == \"play\"));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n}\n", "entry_point": "find_max", "partial": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        # print('@@this is the line to split##')\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n", "gc": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\",'string\"}) =='string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\",\"cc\"}) == \"aaaaaaa\"\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing std;\nstring find_max(vector < string > words) {\n    string max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < words.size(); i++)\n     {\n        string VAR_0 = \"\";\n       \n        for (int j = 0; j < words[i].size(); j++)\n        {\n            VAR_0 += words[i][j];\n        }\n        if (VAR_0.size() > maxu)\n        {\n            maxu = VAR_0.size();\n            max = VAR_0;\n        }\n    }\n    return max;\n}\nint main()\n{\n    vector < string > words;\n    words.push_back(\"name\");\n    words.push_back(\"of\");\n    words.push_back(\"string\");\n    words.push_back(\"enam\");\n    words.push_back(\"game\");\n    words.push_back(\"aaaaaaa\");\n    words.push_back(\"bb\");\n    words.push_back(\"cc\");\n    words.push_back(\"dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd", "passed": 0, "run_status": 1}
{"task_id": "CPP/159", "prompt": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\n", "canonical_solution": "print(' @ this is the line to split ## ' vector < int > eat(int number, int VAR_0, int remaining) {\n    if (VAR_0 > remaining) return {\n        number + remaining, 0}\n    ;\n    return {\n        number + VAR_0, remaining - VAR_0}\n    ;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n    \n    assert (issame(eat(4, 5, 7) , {9, 2}));\n    assert (issame(eat(4, 5, 1) , {5, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n}\n", "entry_point": "eat", "partial": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n# print('@@this is the line to split##')\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n", "gc": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\n\nclass Solution {\npublic:\n    std::vector<int> eat(int number, int need, int remaining) {\n        std::vector<int> result;\n        if (number < need) {\n            result.push_back(number);\n            return result;\n        }\n        int i = 0;\n        while (i < number) {\n            if (remaining == 0) {\n                result.push_back(number - i);\n                return result;\n            }\n            if (remaining >= need) {\n                result.push_back(need);\n                remaining -= need;\n                i += need;\n            } else {\n                result.push_back(remaining);\n                remaining = 0;\n                i += remaining;\n            }\n        }\n        return result;\n    }\n};\n\nint main(void)\n{\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/16", "prompt": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing std;\nint count_distinct_characters(string str) {\n    vector < char > distinct = {\n        }\n    ;\n    transform(str.begin(), str.end(), str.begin(), :: tolower);\n    for (int VAR_0 = 0; VAR_0 < str.size(); VAR_0++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        bool isin = false;\n        for (int j = 0; j<distinct.size(); j++)\n        if (distinct [ j ] == str [ VAR_0 ])\n        isin = true;\n        if (isin == false) distinct.push_back(str [ VAR_0 ]);\n        \n        }\n    return distinct.size();\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"\") == 0);\n    assert (count_distinct_characters(\"abcde\") == 5);\n    assert (count_distinct_characters(\"abcdecadeCADE\") == 5);\n    assert (count_distinct_characters(\"aaaaAAAAaaaa\") == 1);\n    assert (count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"xyzXYZ\") == 3);\n    assert (count_distinct_characters(\"Jerry\") == 4);\n}\n", "entry_point": "count_distinct_characters", "partial": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    # print('@@this is the line to split##')\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n", "gc": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing std;\nint count_distinct_characters(string str) {\n    vector < char > distinct = {\n        }\n    ;\n    transform(str.begin(), str.end(), str.begin(), :: tolower);\n    for (int VAR_0 = 0; VAR_0 < str.size(); VAR_0++)\n   \n    {\n        for (int VAR_1 = VAR_0 + 1; VAR_1 < str.size(); VAR_1++)\n        {\n            if (str[VAR_0] == str[VAR_1])\n            {\n                distinct.push_back(str[VAR_0]);\n            }\n        }\n    }\n    return distinct.size();\n}\nint main()\n{\n    string str = \"xyzXYZ\";\n    printf(\"%d\\n\", count_distinct_characters(str));\n    str = \"Jerry\";\n    printf(\"%d\\n\", count_distinct_characters(str));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/160", "prompt": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <string>\nusing std;\n#include <algorithm>\n#include <stdlib.h> int do_algebra(vector < string > operato, vector < int > operand) {\n    vector < int > num = {\n        }\n    ;\n    vector < int > posto = {\n        }\n    ;\n    for (int VAR_0 = 0; VAR_0 < operand.size(); VAR_0++)\n    posto.push_back(VAR_0);\n    for (int VAR_0 = 0; VAR_0 < operato.size(); VAR_0++)\n    if (operato [ VAR_0 ] == \"**\") {\n        while (posto [ posto [ VAR_0 ] ] != posto [ VAR_0 ]) posto [ VAR_0 ] = posto [ posto [ VAR_0 ] ];\n        while (posto [ posto [ VAR_0 + 1 ] ] != posto [ VAR_0 + 1 ]) posto [ VAR_0 + 1 ] = posto [ posto [ VAR_0 + 1 ] ];\n        operand [ posto [ VAR_0 ] ] = pow(operand [ posto [ VAR_0 ] ], operand [ posto [ VAR_0 + 1 ] ]);\n        posto [ VAR_0 + 1 ] = posto [ VAR_0 ];\n        }\n    for (int VAR_0 = 0; VAR_0 < operato.size(); VAR_0++)\n    if (operato [ VAR_0 ] == \"*\" or operato [ VAR_0 ] == \"//\")\n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        while (posto [ posto [ VAR_0 ] ] != posto [ VAR_0 ]) posto [ VAR_0 ] = posto [ posto [ VAR_0 ] ];\n        while (posto [ posto [ VAR_0 + 1 ] ] != posto [ VAR_0 + 1 ]) posto [ VAR_0 + 1 ] = posto [ posto [ VAR_0 + 1 ] ];\n        if (operato [ VAR_0 ] == \"*\")\n        operand [ posto [ VAR_0 ] ] = operand [ posto [ VAR_0 ] ] * operand [ posto [ VAR_0 + 1 ] ];\n        else\n        operand [ posto [ VAR_0 ] ] = operand [ posto [ VAR_0 ] ] / operand [ posto [ VAR_0 + 1 ] ];\n        posto [ VAR_0 + 1 ] = posto [ VAR_0 ];\n        }\n    for (int VAR_0 = 0; i<operato.size(); VAR_0++)\n    \n    if (operato [ VAR_0 ] == \"+\" or operato [ VAR_0 ] == \"-\") {\n        while (posto [ posto [ VAR_0 ] ] != posto [ VAR_0 ]) posto [ VAR_0 ] = posto [ posto [ VAR_0 ] ];\n        while (posto [ posto [ VAR_0 + 1 ] ] != posto [ VAR_0 + 1 ]) posto [ VAR_0 + 1 ] = posto [ posto [ VAR_0 + 1 ] ];\n        if (operato [ VAR_0 ] == \"+\")\n        operand [ posto [ VAR_0 ] ] = operand [ posto [ VAR_0 ] ] + operand [ posto [ VAR_0 + 1 ] ];\n        else\n        operand [ posto [ VAR_0 ] ] = operand [ posto [ VAR_0 ] ] - operand [ posto [ VAR_0 + 1 ] ];\n        posto [ VAR_0 + 1 ] = posto [ VAR_0 ];\n        }\n    return operand [ 0 ];\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (do_algebra({\"**\", \"*\", \"+\"}, {2, 3, 4, 5}) == 37);\n    assert (do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9);\n    assert (do_algebra({\"//\", \"*\"}, {7, 3, 4}) == 8);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "example_test": "", "entry_point": "do_algebra", "partial": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        # print('@@this is the line to split##')\n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n", "gc": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <string>\nusing std;\n#include <algorithm>\n#include <stdlib.h> int do_algebra(vector < string > operato, vector < int > operand) {\n    vector < int > num = {\n        }\n    ;\n    vector < int > posto = {\n        }\n    ;\n    for (int VAR_0 = 0; VAR_0 < operand.size(); VAR_0++)\n    posto.push_back(VAR_0);\n    for (int VAR_0 = 0; VAR_0 < operato.size(); VAR_0++)\n    if (operato [ VAR_0 ] == \"**\") {\n        while (posto [ posto [ VAR_0 ] ]!= posto [ VAR_0 ]) posto [ VAR_0 ] = posto [ posto [ VAR_0 ] ];\n        while (posto [ posto [ VAR_0 + 1 ] ]!= posto [ VAR_0 + 1 ]) posto [ VAR_0 + 1 ] = posto [ posto [ VAR_0 + 1 ] ];\n        operand [ posto [ VAR_0 ] ] = pow(operand [ posto [ VAR_0 ] ], operand [ posto [ VAR_0 + 1 ] ]);\n        posto [ VAR_0 + 1 ] = posto [ VAR_0 ];\n        }\n    for (int VAR_0 = 0; VAR_0 < operato.size(); VAR_0++)\n    if (operato [ VAR_0 ] == \"*\" or operato [ VAR_0 ] == \"//\")\n    while (posto [ posto [ VAR_0 ] ]!= posto [ VAR_0 ]) posto [ VAR_0 ] = posto [ posto [ VAR_0 ] ];\n    for (int VAR_0 = 0; VAR_0 < operato.size(); VAR_0++)\n    if (operato [ VAR_0 ] == \"+\" or operato [ VAR_0 ] == \"-\")\n    while (posto [ posto [ VAR_0 ] ]!= posto [ VAR_0 ]) posto [ VAR_0 ] = posto [ posto [ VAR_0 ] ];\n    for (int VAR_0 = 0; VAR_0 < operato.size(); VAR_0++)\n    if (operato [ VAR_0 ] == \"*\")\n    while (posto [ posto [ VAR_0 ] ]!= posto [ VAR_0 ]) posto [ VAR_0 ] = posto [ posto [ VAR_0 ] ];\n    for (int VAR_0 = 0; VAR_0 < operato.size(); VAR_0++)\n    if (operato [ VAR_0 ] == \"/\")\n    while (posto [ posto [ VAR_0 ] ]!= posto [ VAR_0 ]) posto [ VAR_0 ] = posto [ posto [ VAR_0 ] ];\n    for (int VAR_0 = 0; VAR_0 < operato.size(); VAR_0++)\n    if (operato [ VAR_0 ] == \"**\")\n    while (posto [ posto [ VAR_0 ] ]!= posto [ VAR_0 ]) posto [ VAR_0 ] = posto [ posto [ VAR_0 ] ];\n    for (int VAR_0 = 0; VAR_0 < operato.size(); VAR_0++)\n    if (operato [ VAR_0 ] == \"+\" or operato [ VAR_0 ] == \"-\")\n    while (posto [ posto [ VAR_0 ] ]!= posto [ VAR_0 ]) posto [ VAR_0 ] = posto [ posto [ VAR_0 ] ];\n    for (int VAR_0 = 0; VAR_0 < operato.size(); VAR_0++)\n    if (operato [ VAR_0 ] == \"*\")\n    while (posto [ posto [ VAR_0 ] ]!= posto [ VAR_0 ]) posto [ VAR_0 ] = posto [ posto [ VAR_0 ] ];\n    for (int VAR_0 = 0; VAR_0 < operato.size(); VAR_0++)\n    if (operato [ VAR_0 ] == \"/\")\n    while (posto [ posto [ VAR_0 ] ]!= posto [ VAR_0 ]) posto [ VAR_0 ] = posto [ posto [ VAR_0 ] ];\n    for (int VAR_0 = 0; VAR_0 < operato.size(); VAR_0++)\n    if (operato [ VAR_0 ] == \"**\")\n    while (posto [ posto [ VAR_0 ] ]!= posto [ VAR_0 ]) posto [ VAR_0 ] = posto [ posto [ VAR_0 ] ];\n    for (int VAR_0 = 0; VAR_0 < operato.size(); VAR_0++)\n    if (operato [ VAR_0 ] == \"+\" or operato [ VAR_0 ] == \"-\")\n    while (posto [ posto [ VAR_0 ] ]!= posto [ VAR_0 ]) posto [ VAR_0 ] = posto [ posto [ VAR_0 ] ];\n    for (int VAR_0 = 0; VAR_0 < operato.size(); VAR_0++)\n    if (operato [ VAR_0 ] == \"*\")\n    ", "passed": 0, "run_status": 2}
{"task_id": "CPP/161", "prompt": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring solve(string s) {\n    int nletter = 0;\n    string out = \"\";\n    for (int i = 0; i < s.length(); i++)\n     {\n        char VAR_0 = s [ i ];\n        if (VAR_0 >= 65 and VAR_0 <= 90) VAR_0 = VAR_0 + 32;\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' else\nif (VAR_0 >= 97 and VAR_0 <= 122) VAR_0 = VAR_0 - 32;\n        else nletter+=1;\n        out = out + VAR_0;\n        }\n    if (nletter == s.length())\n     {\n        string p(s.rbegin(), s.rend());\n        return p;\n        }\n    else return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"AsDf\") == \"aSdF\");\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n    assert (solve(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert (solve(\"#6@2\") == \"2@6#\");\n    assert (solve(\"#$a^D\") == \"#$A^d\");\n    assert (solve(\"#ccc\") == \"#CCC\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n}\n", "entry_point": "solve", "partial": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        # print('@@this is the line to split##')\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n", "gc": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring solve(string s) {\n    int nletter = 0;\n    string out = \"\";\n    for (int i = 0; i < s.length(); i++)\n     {\n        char VAR_0 = s [ i ];\n        if (VAR_0 >= 65 and VAR_0 <= 90) VAR_0 = VAR_0 + 32;\n       \n        if (VAR_0 >= 97 and VAR_0 <= 122) VAR_0 = VAR_0 - 32;\n        if (VAR_0 >= 65 and VAR_0 <= 90) nletter++;\n        out += VAR_0;\n     }\n    if (nletter == 0) out = \"\";\n    return out;\n}\n\nint main()\n{\n    string s;\n    getline(cin, s);\n    cout << solve(s);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/162", "prompt": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include <stdio.h>\n#include <string>\n#include <openssl/md5.h>\nusing std;\nstring string_to_md5(string text) {\n    unsigned char md [ 16 ];\n    if (text.length() == 0) return \"None\";\n    MD5_CTX c;\n    int VAR_0;\n    MD5_Init( & c);\n    MD5_Update( & c,(unsigned char *) text.c_str(), text.length());\n    MD5_Final(md, & c);\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' string out_str = \"\";\n    for (int VAR_0 = 0; VAR_0 < 16; VAR_0++)\n     {\n        char w;\n        if (md [ VAR_0 ] < 160) w = 48 + md [ VAR_0 ] / 16;\n        else w = 87 + md [ VAR_0 ] / 16;\n        out_str = out_str + w;\n        if (md [ VAR_0 ] % 16 < 10) w = 48 + md [ VAR_0 ] % 16;\n        else w = 87 + md [ VAR_0 ] % 16;\n        out_str = out_str + w;\n        }\n    return out_str;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert (string_to_md5(\"\") == \"None\");\n    assert (string_to_md5(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert (string_to_md5(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n", "entry_point": "string_to_md5", "partial": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    # print('@@this is the line to split##')\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\n", "gc": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include <stdio.h>\n#include <string>\n#include <openssl/md5.h>\nusing std;\nstring string_to_md5(string text) {\n    unsigned char md [ 16 ];\n    if (text.length() == 0) return \"None\";\n    MD5_CTX c;\n    int VAR_0;\n    MD5_Init( & c);\n    MD5_Update( & c,(unsigned char *) text.c_str(), text.length());\n    MD5_Final(md, & c);\n   \n    string result;\n    for (int i = 0; i < 16; i++) {\n        VAR_0 = md[i];\n        result += (char) VAR_0;\n    }\n    return result;\n}\n\nint main() {\n    string text = \"Hello world\";\n    string result = string_to_md5(text);\n    printf(\"%s\\n\", result.c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/163", "prompt": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > generate_integers(int a, int b) {\n    int m;\n    if (b < a)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' m = a; a = b; b = m;\n        }\n    \n    vector < int > out = {\n        }\n    ;\n    for (int VAR_0 = a; VAR_0 <= b; VAR_0++)\n    if (VAR_0 < 10 and VAR_0 % 2 == 0) out.push_back(VAR_0);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(17,89) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 8) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(8, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10,14) , {}));\n}\n", "entry_point": "generate_integers", "partial": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    int m;\n    if (b<a)\n    {\n        # print('@@this is the line to split##')\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n", "gc": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > generate_integers(int a, int b) {\n    int m;\n    if (b < a)\n     {\n       \n        return vector < int > ();\n     }\n    vector < int > v;\n    m = a;\n    while (m <= b)\n    {\n        v.push_back(m % 10);\n        m = m / 10;\n    }\n    return v;\n}\nint main()\n{\n    int a, b;\n    scanf(\"%d %d\", &a, &b);\n    vector < int > v = generate_integers(a, b);\n    for (int i = 0; i < v.size(); i++)\n    {\n        printf(\"%d \", v[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "CPP/17", "prompt": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < int > parse_music(string VAR_0) {\n    string current = \"\";\n    vector < int > out = {\n        }\n    ;\n    if (VAR_0.length() > 0)\n    VAR_0 = VAR_0 + ' ';\n    for (int i = 0; i < VAR_0.length(); i++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (VAR_0 [ i ] == ' ')\n         {\n            if (current == \"o\") out.push_back(4);\n            if (current == \"o|\") out.push_back(2);\n            if (current == \".|\") out.push_back(1);\n            current = \"\";\n            }\n        else current+=VAR_0 [ i ];\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"\") , {}));\n     assert (issame(parse_music(\"o o o o\") ,{4, 4, 4, 4}));\n      assert (issame(parse_music(\".| .| .| .|\") , {1, 1, 1, 1}));\n assert (issame(parse_music(\"o| o| .| .| o o o o\") , {2, 2, 1, 1, 4, 4, 4, 4}));\n  assert (issame(parse_music(\"o| .| o| .| o o| o o|\") , {2, 1, 2, 1, 4, 2, 4, 2}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"o o| .| o| o| .| .| .| .| o o\") , {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}));\n}\n", "entry_point": "parse_music", "partial": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        # print('@@this is the line to split##')\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n", "gc": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o|.| o| o|.|.|.|.| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < int > parse_music(string VAR_0) {\n    string current = \"\";\n    vector < int > out = {\n        }\n    ;\n    if (VAR_0.length() > 0)\n    VAR_0 = VAR_0 +'';\n    for (int i = 0; i < VAR_0.length(); i++)\n     {\n       \n       if (VAR_0[i] == 'o')\n       {\n         out.push_back(4);\n       }\n       else if (VAR_0[i] == 'o|')\n       {\n         out.push_back(2);\n       }\n       else if (VAR_0[i] == '.')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] == '|')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] =='')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] == 'o')\n       {\n         out.push_back(4);\n       }\n       else if (VAR_0[i] == 'o|')\n       {\n         out.push_back(2);\n       }\n       else if (VAR_0[i] == '.')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] == '|')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] =='')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] == 'o')\n       {\n         out.push_back(4);\n       }\n       else if (VAR_0[i] == 'o|')\n       {\n         out.push_back(2);\n       }\n       else if (VAR_0[i] == '.')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] == '|')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] =='')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] == 'o')\n       {\n         out.push_back(4);\n       }\n       else if (VAR_0[i] == 'o|')\n       {\n         out.push_back(2);\n       }\n       else if (VAR_0[i] == '.')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] == '|')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] =='')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] == 'o')\n       {\n         out.push_back(4);\n       }\n       else if (VAR_0[i] == 'o|')\n       {\n         out.push_back(2);\n       }\n       else if (VAR_0[i] == '.')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] == '|')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] =='')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] == 'o')\n       {\n         out.push_back(4);\n       }\n       else if (VAR_0[i] == 'o|')\n       {\n         out.push_back(2);\n       }\n       else if (VAR_0[i] == '.')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] == '|')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] =='')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] == 'o')\n       {\n         out.push_back(4);\n       }\n       else if (VAR_0[i] == 'o|')\n       {\n         out.push_back(2);\n       }\n       else if (VAR_0[i] == '.')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] == '|')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] =='')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] == 'o')\n       {\n         out.push_back(4);\n       }\n       else if (VAR_0[i] == 'o|')\n       {\n         out.push_back(2);\n       }\n       else if (VAR_0[i] == '.')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] == '|')\n       {\n         out.push_back(1);\n       }\n       else if (VAR_0[i] =='')\n       {\n         out.push_back(", "passed": 0, "run_status": 2}
{"task_id": "CPP/18", "prompt": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nint how_many_times(string str, string substring) {\n    int out = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (str.length() == 0) return 0;\n    for (int VAR_0 = 0; VAR_0 <= str.length() - substring.length(); VAR_0++)\n    if (str.substr(VAR_0, substring.length()) == substring)\n    out+=1;\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"x\") == 0);\n    assert (how_many_times(\"xyxyxyx\", \"x\") == 4);\n     assert (how_many_times(\"cacacacac\", \"cac\") == 4);\n    assert (how_many_times(\"john doe\", \"john\") == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"a\") == 0);\n    assert (how_many_times(\"aaa\", \"a\") == 3);\n    assert (how_many_times(\"aaaa\", \"aa\") == 3);\n}\n", "entry_point": "how_many_times", "partial": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int out=0;\n    # print('@@this is the line to split##')\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n", "gc": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nint how_many_times(string str, string substring) {\n    int out = 0;\n   \n    for (int i = 0; i < str.size(); i++) {\n        if (str.substr(i, substring.size()) == substring) {\n            out++;\n        }\n    }\n    return out;\n}\n\nint main() {\n    string str = \"abcabcabc\";\n    string sub = \"abc\";\n    printf(\"%d\\n\", how_many_times(str, sub));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/19", "prompt": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include <stdio.h>\n#include <string>\n#include <map>\nusing std;\nstring sort_numbers(string numbers) {\n    map < string, int > tonum = {\n         {\n            \"zero\", 0}\n        , {\n            \"one\", 1}\n        , {\n            \"two\", 2}\n        , {\n            \"three\", 3}\n        , {\n            \"four\", 4}\n        , {\n            \"five\", 5}\n        , {\n            \"six\", 6}\n        , {\n            \"seven\", 7}\n        , {\n            \"eight\", 8}\n        , {\n            \"nine\", 9}\n        }\n    ;\n    map < int, string > numto = {\n         {\n            0, \"zero\"}\n        , {\n            1, \"one\"}\n        , {\n            2, \"two\"}\n        , {\n            3, \"three\"}\n        , {\n            4, \"four\"}\n        , {\n            5, \"five\"}\n        , {\n            6, \"six\"}\n        , {\n            7, \"seven\"}\n        , {\n            8, \"eight\"}\n        , {\n            9, \"nine\"}\n        }\n    ;\n    int count [ 10 ];\n    for (int VAR_0 = 0; VAR_0 < 10; VAR_0++)\n    count [ VAR_0 ] = 0;\n    string out = \"\", current = \"\";\n    if (numbers.length() > 0) numbers = numbers + ' ';\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 = 0; i<numbers.length(); VAR_0++)\n    \n    if (numbers [ VAR_0 ] == ' ')\n     {\n        count [ tonum [ current ] ]+=1;\n        current = \"\";\n        }\n    else current+=numbers [ VAR_0 ];\n    for (int VAR_0 = 0; VAR_0 < 10; VAR_0++)\n    for (int j = 0; j < count [ VAR_0 ]; j++)\n    out = out + numto [ VAR_0 ] + ' ';\n    if (out.length() > 0) out.pop_back();\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"\") == \"\");\n    assert (sort_numbers(\"three\") == \"three\");\n    assert (sort_numbers(\"three five nine\") == \"three five nine\");\n     assert (sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n      assert (sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"three one five\") == \"one three five\");\n}\n", "entry_point": "sort_numbers", "partial": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    # print('@@this is the line to split##')\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n", "gc": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\",'six\",'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include <stdio.h>\n#include <string>\n#include <map>\nusing std;\nstring sort_numbers(string numbers) {\n    map < string, int > tonum = {\n         {\n            \"zero\", 0}\n       , {\n            \"one\", 1}\n       , {\n            \"two\", 2}\n       , {\n            \"three\", 3}\n       , {\n            \"four\", 4}\n       , {\n            \"five\", 5}\n       , {\n            \"six\", 6}\n       , {\n            \"seven\", 7}\n       , {\n            \"eight\", 8}\n       , {\n            \"nine\", 9}\n        }\n    ;\n    map < int, string > numto = {\n         {\n            0, \"zero\"}\n       , {\n            1, \"one\"}\n       , {\n            2, \"two\"}\n       , {\n            3, \"three\"}\n       , {\n            4, \"four\"}\n       , {\n            5, \"five\"}\n       , {\n            6, \"six\"}\n       , {\n            7, \"seven\"}\n       , {\n            8, \"eight\"}\n       , {\n            9, \"nine\"}\n        }\n    ;\n    int count [ 10 ];\n    for (int VAR_0 = 0; VAR_0 < 10; VAR_0++)\n    count [ VAR_0 ] = 0;\n    string out = \"\", current = \"\";\n    if (numbers.length() > 0) numbers = numbers +'';\n   \n    for (int VAR_0 = 0; VAR_0 < numbers.length(); VAR_0++)\n    {\n        if (numbers [ VAR_0 ] =='')\n        {\n            if (current.length() > 0)\n            {\n                out += current;\n                current = \"\";\n            }\n        }\n        else\n        {\n            current += numbers [ VAR_0 ];\n        }\n    }\n    if (current.length() > 0)\n    {\n        out += current;\n    }\n    for (int VAR_0 = 0; VAR_0 < 10; VAR_0++)\n    {\n        if (tonum.find (numto [ VAR_0 ])!= tonum.end())\n        {\n            if (count [ tonum [ numto [ VAR_0 ] ] ] < tonum [ numto [ VAR_0 ] ] + 1)\n            {\n                count [ tonum [ numto [ VAR_0 ] ] ] = tonum [ numto [ VAR_0 ] ] + 1;\n            }\n        }\n    }\n    for (int VAR_0 = 0; VAR_0 < 10; VAR_0++)\n    {\n        if (count [ VAR_0 ] > 0)\n        {\n            out += numto [ VAR_0 ];\n            out += \" \";\n            out += to_string (count [ VAR_0 ]);\n            out += \" \";\n        }\n    }\n    return out;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/2", "prompt": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include <stdio.h>\n#include <math.h>\nusing std;\n", "canonical_solution": "print(' @ this is the line to split ## ' float truncate_number(float VAR_0) {\n    return VAR_0 - int(VAR_0);\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n assert (abs(truncate_number(1.33) - 0.33) < 1e-4);\n  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n}\n", "entry_point": "truncate_number", "partial": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n# print('@@this is the line to split##')\nfloat truncate_number(float number){\n    return number-int(number);\n}\n", "gc": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include <stdio.h>\n#include <math.h>\nusing std;\n\nint truncate_number(double number)\n{\n    int int_part = (int)number;\n    double dec_part = number - int_part;\n    if (dec_part > 0.5)\n        return int_part + 1;\n    else\n        return int_part;\n}\n\nint main()\n{\n    double number;\n    scanf(\"%lf\", &number);\n    printf(\"%d.%d\\n\", truncate_number(number), (int)number - truncate_number(number));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/20", "prompt": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nvector < float > find_closest_elements(vector < float > numbers) {\n    vector < float > VAR_0 = {\n        }\n    ;\n    for (int i = 0; i < numbers.size(); i++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int j = i + 1; j<numbers.size(); j++)\n    \n    if (VAR_0.size() == 0 or abs(numbers [ i ] - numbers [ j ]) < abs(VAR_0 [ 0 ] - VAR_0 [ 1 ]))\n    VAR_0 = {\n        numbers [ i ], numbers [ j ]}\n    ;\n    if (VAR_0 [ 0 ] > VAR_0 [ 1 ])\n    VAR_0 = {\n        VAR_0 [ 1 ], VAR_0 [ 0 ]}\n    ;\n    return VAR_0;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}) , {3.9, 4.0}));\n    assert (issame(find_closest_elements({1.0, 2.0, 5.9, 4.0, 5.0}) , {5.0, 5.9} ));\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n      assert (issame(find_closest_elements({1.1, 2.2, 3.1, 4.1, 5.1}) , {2.2, 3.1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n}\n", "entry_point": "find_closest_elements", "partial": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    # print('@@this is the line to split##')\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n", "gc": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nvector < float > find_closest_elements(vector < float > numbers) {\n    vector < float > VAR_0 = {\n        }\n    ;\n    for (int i = 0; i < numbers.size(); i++)\n   \n    {\n        VAR_0.push_back(numbers[i]);\n    }\n    return VAR_0;\n}\nint main() {\n    vector < float > numbers = {\n        1.0, 2.0, 3.0, 4.0, 5.0, 2.2\n    };\n    vector < float > VAR_1 = find_closest_elements(numbers);\n    for (int i = 0; i < VAR_1.size(); i++)\n    {\n        printf(\"%f\\n\", VAR_1[i]);\n    }\n    return 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/21", "prompt": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nvector < float > rescale_to_unit(vector < float > numbers) {\n    float min = 100000, max = -100000;\n    for (int VAR_0 = 0; VAR_0 < numbers.size(); VAR_0++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (numbers [ VAR_0 ] < min) min = numbers [ VAR_0 ];\n        if (numbers [ VAR_0 ] > max) max = numbers [ VAR_0 ];\n        }\n    for (int VAR_0 = 0; i<numbers.size(); VAR_0++)\n    numbers [ VAR_0 ] =(numbers [ VAR_0 ] - min) /(max - min);\n    return numbers;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));\n     assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0})); \n     assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n    assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));\n     assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n}\n", "entry_point": "rescale_to_unit", "partial": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        # print('@@this is the line to split##')\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n", "gc": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nvector < float > rescale_to_unit(vector < float > numbers) {\n    float min = 100000, max = -100000;\n    for (int VAR_0 = 0; VAR_0 < numbers.size(); VAR_0++)\n   \n    {\n        if (numbers[VAR_0] < min) min = numbers[VAR_0];\n        if (numbers[VAR_0] > max) max = numbers[VAR_0];\n    }\n    float scale = 1.0 / (max - min);\n    for (int VAR_0 = 0; VAR_0 < numbers.size(); VAR_0++)\n    {\n        numbers[VAR_0] = numbers[VAR_0] * scale;\n    }\n    return numbers;\n}\n\nint main() {\n    vector < float > numbers;\n    numbers.push_back(1.0);\n    numbers.push_back(2.0);\n    numbers.push_back(3.0);\n    numbers.push_back(4.0);\n    numbers.push_back(5.0);\n    vector < float > numbers_rescaled = rescale_to_unit(numbers);\n    for (int VAR_0 = 0; VAR_0 < numbers_rescaled.size(); VAR_0++)\n    {\n        printf(\"%f\\n\", numbers_rescaled[VAR_0]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/22", "prompt": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <boost/any.hpp>\n#include <list> typedef std :: list < boost :: any > list_any;\nusing std;\nvector < int > filter_integers(list_any values) {\n    list_any :: iterator VAR_0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' boost :: any anyone;\n    vector < int > out;\n    for (VAR_0 = values.begin(); VAR_0 != values.end(); VAR_0++)\n     {\n        anyone = * VAR_0;\n        if (anyone.type() == typeid(int))\n        out.push_back(boost :: any_cast < int >( * VAR_0));\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({}),{}));\n\n    assert (issame(filter_integers({4,  {},23.2, 9, string(\"adasd\")}) ,{4, 9}));\n    assert (issame(filter_integers({3, 'c', 3, 3, 'a', 'b'}) ,{3, 3, 3}));\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({string(\"a\"), 3.14, 5}),{5}));\n    assert (issame(filter_integers({1, 2, 3, string(\"abc\"), {}, {}}),{1,2,3}));\n}\n", "entry_point": "filter_integers", "partial": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    # print('@@this is the line to split##')\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n", "gc": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <boost/any.hpp>\n#include <list> typedef std :: list < boost :: any > list_any;\nusing std;\nvector < int > filter_integers(list_any values) {\n    list_any :: iterator VAR_0;\n   \n    for (VAR_0 = values.begin(); VAR_0!= values.end(); VAR_0++) {\n        if (boost :: any_cast < int > ( * VAR_0 ) > 0) {\n            values.erase ( VAR_0 );\n        }\n    }\n    return values;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/23", "prompt": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nVAR_0(' @ this is the line to split ## ' int strlen(string str) {\n    return str.length();\n   \n", "canonical_solution": "}", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"x\") == 1);\n     assert (strlen(\"asdasnakj\") == 9);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"abc\") == 3);\n}\n", "entry_point": "strlen", "partial": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\n# print('@@this is the line to split##')\nint strlen(string str){\n    return str.length();\n}\n", "gc": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nVAR_0(' @ this is the line to split ##'int strlen(string str) {\n    return str.length();\n   \n})\n\nint main() {\n    string str = \"abc\";\n    printf(\"%d\\n\", strlen(str));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/24", "prompt": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include <stdio.h>\nusing std;\nint largest_divisor(int n) {\n    for (int VAR_0 = 2; VAR_0 * VAR_0 <= n; VAR_0++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (n % VAR_0 == 0) return n / VAR_0;\n    return 1;\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(3) == 1);\n    assert (largest_divisor(7) == 1);\n    assert (largest_divisor(10) == 5);\n    assert (largest_divisor(100) == 50);\n    assert (largest_divisor(49) == 7);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(15) == 5);\n}\n", "entry_point": "largest_divisor", "partial": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        # print('@@this is the line to split##')\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n", "gc": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include <stdio.h>\nusing std;\nint largest_divisor(int n) {\n    for (int VAR_0 = 2; VAR_0 * VAR_0 <= n; VAR_0++)\n   \n    if (n % VAR_0 == 0)\n        return VAR_0;\n    return n;\n}\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", largest_divisor(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/25", "prompt": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > factorize(int n) {\n    vector < int > out = {\n        }\n    ;\n    for (int VAR_0 = 2; VAR_0 * VAR_0 <= n; VAR_0++)\n    if (n % VAR_0 == 0)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        n = n / VAR_0;\n        out.push_back(VAR_0);\n        VAR_0-=1;\n        }\n    out.push_back(n);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(2) , {2}));\n    assert (issame(factorize(4) , {2, 2}));\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(3 * 19) , {3, 19}));\n    assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19})); \n    assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19})); \n    assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19})); \n    assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(25) , {5,5}));\n    assert (issame(factorize(70) , {2,5,7})); \n}\n", "entry_point": "factorize", "partial": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        # print('@@this is the line to split##')\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n", "gc": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > factorize(int n) {\n    vector < int > out = {\n        }\n    ;\n    for (int VAR_0 = 2; VAR_0 * VAR_0 <= n; VAR_0++)\n    if (n % VAR_0 == 0)\n   \n    {\n        out.push_back(VAR_0);\n        n /= VAR_0;\n    }\n    return out;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > out = factorize(n);\n    for (int VAR_0 = 0; VAR_0 < out.size(); VAR_0++)\n    {\n        printf(\"%d \", out[VAR_0]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/26", "prompt": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > remove_duplicates(vector < int > numbers) {\n    vector < int > out = {\n        }\n    ;\n    vector < int > has1 = {\n        }\n    ;\n    vector < int > has2 = {\n        }\n    ;\n    for (int VAR_0 = 0; VAR_0 < numbers.size(); VAR_0++)\n     {\n        if (find(has2.begin(), has2.end(), numbers [ VAR_0 ]) != has2.end()) continue;\n        if (find(has1.begin(), has1.end(), numbers [ VAR_0 ]) != has1.end())\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n            \n            has2.push_back(numbers [ VAR_0 ]);\n            }\n        else has1.push_back(numbers [ VAR_0 ]);\n        }\n    for (int VAR_0 = 0; VAR_0 < numbers.size(); VAR_0++)\n    if (find(has2.begin(), has2.end(), numbers [ VAR_0 ]) == has2.end())\n    out.push_back(numbers [ VAR_0 ]);\n    return out;\n    \n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(remove_duplicates({}) , {}));\n     assert (issame(remove_duplicates({1, 2, 3, 4}) , {1, 2, 3, 4}));\n      assert (issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}) , {1, 4, 5}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(remove_duplicates({1, 2, 3, 2,4}) , {1,  3, 4}));\n}\n", "entry_point": "remove_duplicates", "partial": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        # print('@@this is the line to split##')\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n", "gc": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > remove_duplicates(vector < int > numbers) {\n    vector < int > out = {\n        }\n    ;\n    vector < int > has1 = {\n        }\n    ;\n    vector < int > has2 = {\n        }\n    ;\n    for (int VAR_0 = 0; VAR_0 < numbers.size(); VAR_0++)\n     {\n        if (find(has2.begin(), has2.end(), numbers [ VAR_0 ])!= has2.end()) continue;\n        if (find(has1.begin(), has1.end(), numbers [ VAR_0 ])!= has1.end())\n       \n        {\n            has1.push_back(numbers [ VAR_0 ]);\n        }\n        else\n        {\n            has2.push_back(numbers [ VAR_0 ]);\n        }\n     }\n    return has1;\n}\nint main()\n{\n    vector < int > numbers = {\n        1, 2, 3, 2, 4\n    };\n    vector < int > has1 = remove_duplicates(numbers);\n    for (int VAR_0 = 0; VAR_0 < has1.size(); VAR_0++)\n    {\n        printf(\"%d \", has1 [ VAR_0 ]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/27", "prompt": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring filp_case(string str) {\n    string out = \"\";\n    for (int i = 0; i < str.length(); i++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' char VAR_0 = str [ i ];\n        if (VAR_0 >= 97 and VAR_0 <= 122) {\n            VAR_0-=32;}\n        else\n        if (VAR_0 >= 65 and VAR_0 <= 90) {\n            VAR_0+=32;}\n        out = out + VAR_0;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"\") == \"\");\n    assert (filp_case(\"Hello!\") == \"hELLO!\");\n    assert (filp_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"Hello\") == \"hELLO\");\n}\n", "entry_point": "filp_case", "partial": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        # print('@@this is the line to split##')\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n", "gc": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring filp_case(string str) {\n    string out = \"\";\n    for (int i = 0; i < str.length(); i++)\n     {\n       \n        if (str[i] >= 'a' && str[i] <= 'z')\n            out += (str[i] - 'a' + 'A');\n        else\n            out += str[i];\n     }\n    return out;\n}\nint main() {\n    string str;\n    getline(cin, str);\n    printf(\"%s\\n\", filp_case(str).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/28", "prompt": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nstring concatenate(vector < string > strings) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' string out = \"\";\n    for (int VAR_0 = 0; VAR_0 < strings.size(); VAR_0++)\n    out = out + strings [ VAR_0 ];\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n     assert (concatenate({\"x\", \"y\", \"z\"}) == \"xyz\");\n    assert (concatenate({\"x\", \"y\", \"z\", \"w\", \"k\"}) == \"xyzwk\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n    assert (concatenate({\"a\", \"b\", \"c\"}) == \"abc\");\n}\n", "entry_point": "concatenate", "partial": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    # print('@@this is the line to split##')\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n", "gc": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nstring concatenate(vector < string > strings) {\n   \n   string result;\n   for (int i = 0; i < strings.size(); i++) {\n      result += strings[i];\n   }\n   return result;\n}\n\nint main() {\n   \n   vector < string > strings;\n   strings.push_back(\"a\");\n   strings.push_back(\"b\");\n   strings.push_back(\"c\");\n   \n   string result = concatenate(strings);\n   printf(\"%s\\n\", result.c_str());\n   \n   return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/29", "prompt": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < string > filter_by_prefix(vector < string > strings, string prefix) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' vector < string > out = {\n        }\n    ;\n    for (int VAR_0 = 0; VAR_0 < strings.size(); VAR_0++)\n    if (strings [ VAR_0 ].substr(0, prefix.length()) == prefix) out.push_back(strings [ VAR_0 ]);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"john\") , {}));\n    assert (issame(filter_by_prefix({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\") , {\"xxx\", \"xxxAAA\", \"xxx\"}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"a\") , {}));\n    assert (issame(filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\") , {\"abc\", \"array\"}));\n}\n", "entry_point": "filter_by_prefix", "partial": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    # print('@@this is the line to split##')\n    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n", "gc": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < string > filter_by_prefix(vector < string > strings, string prefix) {\n   \n   vector < string > filtered;\n   for (int i = 0; i < strings.size(); i++) {\n      if (strings[i].substr(0, prefix.size()) == prefix) {\n         filtered.push_back(strings[i]);\n      }\n   }\n   return filtered;\n}\n\nint main() {\n   \n   vector < string > strings = { \"abc\", \"bcd\", \"cde\", \"vector\" };\n   \n   vector < string > filtered = filter_by_prefix(strings, \"a\");\n   \n   for (int i = 0; i < filtered.size(); i++) {\n      printf(\"%s\\n\", filtered[i].c_str());\n   }\n   \n   return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/3", "prompt": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nbool below_zero(vector < int > operations) {\n    int num = 0;\n    for (int VAR_0 = 0; VAR_0 < operations.size(); VAR_0++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        num+=operations [ VAR_0 ];\n        if (num < 0) return true;\n        }\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({}) == false);\n    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);\n    assert (below_zero({1, 2, -4, 5, 6}) == true);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);\n    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({1, 2, 3}) == false);\n    assert (below_zero({1, 2, -4, 5}) == true);\n}\n", "entry_point": "below_zero", "partial": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    # print('@@this is the line to split##')\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n", "gc": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nbool below_zero(vector < int > operations) {\n    int num = 0;\n    for (int VAR_0 = 0; VAR_0 < operations.size(); VAR_0++)\n   \n    {\n        if (operations[VAR_0] < 0)\n        {\n            num += operations[VAR_0];\n        }\n    }\n    if (num < 0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\nint main()\n{\n    vector < int > operations;\n    operations.push_back(1);\n    operations.push_back(2);\n    operations.push_back(-4);\n    operations.push_back(5);\n    printf(\"%d\\n\", below_zero(operations));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/30", "prompt": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nvector < float > get_positive(vector < float > l) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' vector < float > out = {\n        }\n    ;\n    for (int VAR_0 = 0; VAR_0 < l.size(); VAR_0++)\n    if (l [ VAR_0 ] > 0) out.push_back(l [ VAR_0 ]);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));\n     assert (issame(get_positive({-1, -2}) , {} ));\n     assert (issame(get_positive({}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, 2, -4, 5, 6}) , {2, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, -3,3, 9, 0, 123, 1, -10}) , {5, 3, 2,  3, 9, 123, 1}));\n}\n", "entry_point": "get_positive", "partial": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    # print('@@this is the line to split##')\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n", "gc": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nvector < float > get_positive(vector < float > l) {\n   \n    vector < float > r;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            r.push_back(l[i]);\n        }\n    }\n    return r;\n}\n\nint main() {\n    vector < float > l;\n    l.push_back(5);\n    l.push_back(3);\n    l.push_back(-5);\n    l.push_back(2);\n    l.push_back(-3);\n    l.push_back(3);\n    l.push_back(9);\n    l.push_back(0);\n    l.push_back(123);\n    l.push_back(1);\n    l.push_back(-10);\n    vector < float > r = get_positive(l);\n    for (int i = 0; i < r.size(); i++) {\n        printf(\"%f \", r[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/31", "prompt": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include <stdio.h>\nusing std;\nbool is_prime(long long n) {\n    if (n < 2) return false;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (long long VAR_0 = 2; VAR_0 * VAR_0 <= n; VAR_0++)\n    if (n % VAR_0 == 0) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n    assert (is_prime(5) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(17) == true);\n    assert (is_prime(5 * 17) == false);\n    assert (is_prime(11 * 7) == false);\n    assert (is_prime(13441 * 19) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n}\n", "entry_point": "is_prime", "partial": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n<2) return false;\n    # print('@@this is the line to split##')\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n", "gc": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include <stdio.h>\nusing std;\nbool is_prime(long long n) {\n    if (n < 2) return false;\n   \n    if (n == 2 || n == 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    \n    long long sqrt = (long long)sqrt(n);\n    for (long long i = 5; i <= sqrt; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/32", "prompt": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\ndouble VAR_0 = 0;\ndouble value;\nvalue = poly(xs, VAR_0);\nwhile (abs(value) > 1e-6)\n {\n    double driv = 0;\n    for (int i = 1; i < xs.size(); i++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' driv+=xs [ i ] * pow(VAR_0, i - 1) * i;\n        }\n    VAR_0 = VAR_0 - value / driv;\n    value = poly(xs, VAR_0);\n    }\nreturn VAR_0;\n\n}", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n   \n    double solution;\n    int ncoeff;\n    for (int i=0;i<100;i++)\n    {\n        ncoeff = 2 * (1+rand()%4);\n        vector<double> coeffs = {};\n        for (int j=0;j<ncoeff;j++)\n        {\n            double coeff = -10+rand()%21;\n            if (coeff == 0) coeff = 1;\n            coeffs.push_back(coeff);\n        }\n        \n        solution = find_zero(coeffs);\n        assert (abs(poly(coeffs, solution))< 1e-3);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (find_zero({1,2})+0.5<1e-4);\n    assert (find_zero({-6,11,-6,1})-1<1e-4);\n}\n", "entry_point": "for", "partial": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            # print('@@this is the line to split##')\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=ans-value/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n", "gc": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\ndouble VAR_0 = 0;\ndouble value;\nvalue = poly(xs, VAR_0);\nwhile (abs(value) > 1e-6)\n {\n    double driv = 0;\n    for (int i = 1; i < xs.size(); i++)\n     {\n       \n       driv += xs[i] * pow(VAR_0, i);\n     }\n    VAR_0 = VAR_0 - driv;\n    value = poly(xs, VAR_0);\n }\nreturn VAR_0;\n}\n\nint main(){\n    vector<double> xs;\n    double x;\n    double y;\n    double x0;\n    double y0;\n    double x1;\n    double y1;\n    double x2;\n    double y2;\n    double x3;\n    double y3;\n    double x4;\n    double y4;\n    double x5;\n    double y5;\n    double x6;\n    double y6;\n    double x7;\n    double y7;\n    double x8;\n    double y8;\n    double x9;\n    double y9;\n    double x10;\n    double y10;\n    double x11;\n    double y11;\n    double x12;\n    double y12;\n    double x13;\n    double y13;\n    double x14;\n    double y14;\n    double x15;\n    double y15;\n    double x16;\n    double y16;\n    double x17;\n    double y17;\n    double x18;\n    double y18;\n    double x19;\n    double y19;\n    double x20;\n    double y20;\n    double x21;\n    double y21;\n    double x22;\n    double y22;\n    double x23;\n    double y23;\n    double x24;\n    double y24;\n    double x25;\n    double y25;\n    double x26;\n    double y26;\n    double x27;\n    double y27;\n    double x28;\n    double y28;\n    double x29;\n    double y29;\n    double x30;\n    double y30;\n    double x31;\n    double y31;\n    double x32;\n    double y32;\n    double x33;\n    double y33;\n    double x34;\n    double y34;\n    double x35;\n    double y35;\n    double x36;\n    double y36;\n    double x37;\n    double y37;\n    double x38;\n    double y38;\n    double x39;\n    double y39;\n    double x40;\n    double y40;\n    double x41;\n    double y41;\n    double x42;\n    double y42;\n    double x43;\n    double y43;\n    double x44;\n    double y44;\n    double x45;\n    double y45;\n    double x46;\n    double y46;\n    double x47;\n    double y47;\n    double x48;\n    double y48;\n    double x49;\n    double y49;\n    double x50;\n    double y50;\n    double x51;\n    double y51;\n    double x52;\n    double y52;\n    double x53;\n    double y53;\n    double x54;\n    double y54;\n    double x55;\n    double y55;\n    double x56;\n    double y56;\n    double x57;\n    double y57;\n    double x58;\n    double y58;\n    double x59;\n    double y59;\n    double x60;\n    double y60;\n    double x61;\n    double y61;\n    double x62;\n    double y62;\n    double x63;\n    double y63;\n    double x64;\n    double y64;\n    double x65;\n    double y65;\n    double x66;\n    double y66;\n    double x67;\n    double y67;\n    double x68;\n    double y68;\n    double x69;\n    double y69;\n    double x70;\n    double y70;\n    double x71;\n    double y71;\n    double x72;\n    double y72;\n    double x73;\n    double y73;\n    double x74;\n    double y74;\n    double x75;\n    double y75;\n    double x76;\n    double y76;\n    double x77;\n    double y77;\n    double x78;\n    double y78;\n    double x79;\n    double y79;\n    double x80;\n    double y80;\n    double x81;\n    double y81;\n    double x82;\n    double y82;\n    double x83;\n    double y83;\n    double x84;\n    double y84;\n    double x85;\n    double y85;\n    double x86;\n    ", "passed": 0, "run_status": 2}
{"task_id": "CPP/33", "prompt": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > sort_third(vector < int > l) {\n    vector < int > third = {\n        }\n    ;\n    int VAR_0;\n    for (VAR_0 = 0; VAR_0 * 3 < l.size(); VAR_0++)\n    third.push_back(l [ VAR_0 * 3 ]);\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' sort(third.begin(), third.end());\n    \n    vector < int > out = {\n        }\n    ;\n    for (VAR_0 = 0; VAR_0 < l.size(); VAR_0++)\n     {\n        if (VAR_0 % 3 == 0) {\n            out.push_back(third [ VAR_0 / 3 ]);}\n        else out.push_back(l [ VAR_0 ]);\n        }\n    return out;\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , sort_third({1, 2, 3})));\n    assert (issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert (issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n    assert (issame(sort_third({5, 8, 3, 4, 6, 9, 2}) , {2, 8, 3, 4, 6, 9, 5}));\n    assert (issame(sort_third({5, 6, 9, 4, 8, 3, 2}) , {2, 6, 9, 4, 8, 3, 5}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}) , {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , {1, 2, 3}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n}\n", "entry_point": "sort_third", "partial": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    # print('@@this is the line to split##')\n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n", "gc": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > sort_third(vector < int > l) {\n    vector < int > third = {\n        }\n    ;\n    int VAR_0;\n    for (VAR_0 = 0; VAR_0 * 3 < l.size(); VAR_0++)\n    third.push_back(l [ VAR_0 * 3 ]);\n   \n    for (VAR_0 = 1; VAR_0 * 3 < l.size(); VAR_0++)\n    third.push_back(l [ VAR_0 * 3 ]);\n   \n    for (VAR_0 = 2; VAR_0 * 3 < l.size(); VAR_0++)\n    third.push_back(l [ VAR_0 * 3 ]);\n   \n    return third;\n}\n\nint main() {\n    vector < int > l = {\n        1, 2, 3\n    };\n    vector < int > l2 = {\n        5, 6, 3, 4, 8, 9, 2\n    };\n    vector < int > l3 = {\n        2, 6, 3, 4, 8, 9, 5\n    };\n    vector < int > l4 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7\n    };\n    vector < int > l5 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11\n    };\n    vector < int > l6 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13\n    };\n    vector < int > l7 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15\n    };\n    vector < int > l8 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17\n    };\n    vector < int > l9 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17, 19\n    };\n    vector < int > l10 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17, 19, 21\n    };\n    vector < int > l11 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17, 19, 21, 23\n    };\n    vector < int > l12 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17, 19, 21, 23, 25\n    };\n    vector < int > l13 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17, 19, 21, 23, 25, 27\n    };\n    vector < int > l14 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29\n    };\n    vector < int > l15 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31\n    };\n    vector < int > l16 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33\n    };\n    vector < int > l17 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35\n    };\n    vector < int > l18 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37\n    };\n    vector < int > l19 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39\n    };\n    vector < int > l20 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41\n    };\n    vector < int > l21 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43\n    };\n    vector < int > l22 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45\n    };\n    vector < int > l23 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47\n    };\n    vector < int > l24 = {\n        1, 2, 3, 5, 6, 8, 9, 4, 7, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49\n    };\n    vector < int > l25 = {\n        1, 2, 3, 5, 6, 8, 9, 4", "passed": 0, "run_status": 1}
{"task_id": "CPP/34", "prompt": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > unique(vector < int > l) {\n    vector < int > VAR_0 = {\n        }\n    ;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i =0;i<l.size(); i++)\n    if (find(VAR_0.begin(), VAR_0.end(), l [ i ]) == VAR_0.end())\n    VAR_0.push_back(l [ i ]);\n    sort(VAR_0.begin(), VAR_0.end());\n    return VAR_0;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "entry_point": "unique", "partial": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    vector<int> out={};\n    # print('@@this is the line to split##')\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "gc": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > unique(vector < int > l) {\n    vector < int > VAR_0 = {\n        }\n    ;\n   \n    sort(l.begin(), l.end());\n    unique(l, 0);\n    return VAR_0;\n}\nvoid unique(vector < int > l, int i) {\n    if (i == l.size()) {\n        return;\n    }\n    for (int j = i + 1; j < l.size(); j++) {\n        if (l[i] == l[j]) {\n            l.erase(l.begin() + j);\n            unique(l, j);\n        }\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/35", "prompt": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nfloat max_element(vector < float > l) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' float max = -10000;\n    for (int VAR_0 = 0; VAR_0 < l.size(); VAR_0++)\n    if (max < l [ VAR_0 ]) max = l [ VAR_0 ];\n    return max;\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})- 123)<1e-4);\n}\n", "entry_point": "max_element", "partial": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n  # print('@@this is the line to split##')\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n", "gc": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nfloat max_element(vector < float > l) {\n   \n   float max = l[0];\n   for (int i = 1; i < l.size(); i++) {\n      if (l[i] > max) {\n         max = l[i];\n      }\n   }\n   return max;\n}\n\nint main() {\n   vector < float > l;\n   l.push_back(1);\n   l.push_back(2);\n   l.push_back(3);\n   l.push_back(5);\n   l.push_back(3);\n   l.push_back(-5);\n   l.push_back(2);\n   l.push_back(-3);\n   l.push_back(3);\n   l.push_back(9);\n   l.push_back(0);\n   l.push_back(123);\n   l.push_back(1);\n   l.push_back(-10);\n   printf(\"%f\\n\", max_element(l));\n   return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/36", "prompt": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include <stdio.h>\nusing std;\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int VAR_0 = 0; VAR_0 < n; VAR_0++)\n    if (VAR_0 % 11 == 0 or VAR_0 % 13 == 0)\n     {\n        int q = VAR_0;\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nwhile (q > 0)\n         {\n            if (q % 10 == 7) count+=1;\n            q = q / 10;\n            }\n        }\n    return count;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n    assert (fizz_buzz(100) == 3);\n    assert (fizz_buzz(200) == 6);\n    assert (fizz_buzz(4000) == 192);\n    assert (fizz_buzz(10000) == 639);\n    assert (fizz_buzz(100000) == 8026);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n}\n", "entry_point": "fizz_buzz", "partial": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        # print('@@this is the line to split##')\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n", "gc": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include <stdio.h>\nusing std;\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int VAR_0 = 0; VAR_0 < n; VAR_0++)\n    if (VAR_0 % 11 == 0 or VAR_0 % 13 == 0)\n     {\n        int q = VAR_0;\n       \n        while (q % 11 == 0 or q % 13 == 0)\n        {\n            q = q / 11;\n            q = q / 13;\n            q = q * 3;\n            q = q + 1;\n        }\n        count += q;\n    }\n    return count;\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\", fizz_buzz(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/37", "prompt": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < float > sort_even(vector < float > l) {\n    vector < float > out = {\n        }\n    ;\n    vector < float > even = {\n        }\n    ;\n    for (int VAR_0 = 0; VAR_0 * 2 < l.size(); VAR_0++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' even.push_back(l [ VAR_0 * 2 ]);\n    sort(even.begin(), even.end());\n    for (int VAR_0 = 0; VAR_0 < l.size(); VAR_0++)\n     {\n        if (VAR_0 % 2 == 0) out.push_back(even [ VAR_0 / 2 ]);\n        if (VAR_0 % 2 == 1) out.push_back(l [ VAR_0 ]);\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}));\n    assert (issame(sort_even({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 6,3,4}) , {3,6,5,4}));\n}\n", "entry_point": "sort_even", "partial": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        # print('@@this is the line to split##')\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n", "gc": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < float > sort_even(vector < float > l) {\n    vector < float > out = {\n        }\n    ;\n    vector < float > even = {\n        }\n    ;\n    for (int VAR_0 = 0; VAR_0 * 2 < l.size(); VAR_0++)\n   \n    {\n        for (int VAR_1 = VAR_0 * 2; VAR_1 < l.size(); VAR_1 += 2)\n        {\n            if (l[VAR_1] < l[VAR_0])\n            {\n                swap(l[VAR_0], l[VAR_1]);\n            }\n        }\n    }\n    for (int VAR_0 = 0; VAR_0 * 2 < l.size(); VAR_0++)\n    {\n        for (int VAR_1 = VAR_0 * 2; VAR_1 < l.size(); VAR_1 += 2)\n        {\n            if (l[VAR_1] == l[VAR_0])\n            {\n                even.push_back(l[VAR_0]);\n            }\n        }\n    }\n    for (int VAR_0 = 0; VAR_0 * 2 < l.size(); VAR_0++)\n    {\n        for (int VAR_1 = VAR_0 * 2; VAR_1 < l.size(); VAR_1 += 2)\n        {\n            if (l[VAR_1] < l[VAR_0])\n            {\n                swap(l[VAR_0], l[VAR_1]);\n            }\n        }\n    }\n    for (int VAR_0 = 0; VAR_0 * 2 < l.size(); VAR_0++)\n    {\n        for (int VAR_1 = VAR_0 * 2; VAR_1 < l.size(); VAR_1 += 2)\n        {\n            if (l[VAR_1] == l[VAR_0])\n            {\n                even.push_back(l[VAR_0]);\n            }\n        }\n    }\n    for (int VAR_0 = 0; VAR_0 * 2 < l.size(); VAR_0++)\n    {\n        for (int VAR_1 = VAR_0 * 2; VAR_1 < l.size(); VAR_1 += 2)\n        {\n            if (l[VAR_1] < l[VAR_0])\n            {\n                swap(l[VAR_0], l[VAR_1]);\n            }\n        }\n    }\n    for (int VAR_0 = 0; VAR_0 * 2 < l.size(); VAR_0++)\n    {\n        for (int VAR_1 = VAR_0 * 2; VAR_1 < l.size(); VAR_1 += 2)\n        {\n            if (l[VAR_1] == l[VAR_0])\n            {\n                even.push_back(l[VAR_0]);\n            }\n        }\n    }\n    for (int VAR_0 = 0; VAR_0 * 2 < l.size(); VAR_0++)\n    {\n        for (int VAR_1 = VAR_0 * 2; VAR_1 < l.size(); VAR_1 += 2)\n        {\n            if (l[VAR_1] < l[VAR_0])\n            {\n                swap(l[VAR_0], l[VAR_1]);\n            }\n        }\n    }\n    for (int VAR_0 = 0; VAR_0 * 2 < l.size(); VAR_0++)\n    {\n        for (int VAR_1 = VAR_0 * 2; VAR_1 < l.size(); VAR_1 += 2)\n        {\n            if (l[VAR_1] == l[VAR_0])\n            {\n                even.push_back(l[VAR_0]);\n            }\n        }\n    }\n    for (int VAR_0 = 0; VAR_0 * 2 < l.size(); VAR_0++)\n    {\n        for (int VAR_1 = VAR_0 * 2; VAR_1 < l.size(); VAR_1 += 2)\n        {\n            if (l[VAR_1] < l[VAR_0])\n            {\n                swap(l[VAR_0], l[VAR_1]);\n            }\n        }\n    }\n    for (int VAR_0 = 0; VAR_0 * 2 < l.size(); VAR_0++)\n    {\n        for (int VAR_1 = VAR_0 * 2; VAR_1 < l.size(); VAR_1 += 2)\n        {\n            if (l[VAR_1] == l[VAR_0])\n            {\n                even.push_back(l[VAR_0]);\n            }\n        }\n    }\n    for (int VAR_0 = 0; VAR_0 * 2 < l.size(); VAR_0++)\n    {\n        for (int VAR_1 = VAR_0 * 2; VAR_1 < l.size(); VAR_1 += 2)\n        {\n            if (l[VAR_1] < l[VAR_0])\n            {\n                swap(l[VAR_0], l[VAR_1]);\n            }\n        }\n    }\n    for (int VAR_0 = 0; VAR_0 * 2 < l.size(); VAR_0++)\n    {\n        for (int VAR_1 = VAR_0 * 2; VAR_1 < l.size(); VAR_1 += 2)\n        {\n            if (l[VAR_1] == l[VAR_0])\n", "passed": 0, "run_status": 2}
{"task_id": "CPP/38", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\nint l = s.length();\nint num =(l + 2) / 3;\nstring VAR_0, output;\nint i;\nfor (i = 0; i * 3 < l; i++)\n {\n    VAR_0 = s.substr(i * 3, 3);\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (VAR_0.length() == 3) VAR_0 = VAR_0 [ 2 ] + VAR_0.substr(0, 2);\n    output = output + VAR_0;\n    }\nreturn output;\n\n\n}", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_cyclic(str);\n        assert (decode_cyclic(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n", "example_test": "", "entry_point": "decode_cyclic", "partial": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        # print('@@this is the line to split##')\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n\n\n}\n", "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\nint l = s.length();\nint num =(l + 2) / 3;\nstring VAR_0, output;\nint i;\nfor (i = 0; i * 3 < l; i++)\n {\n    VAR_0 = s.substr(i * 3, 3);\n   \n    if (VAR_0.length() == 3) VAR_0 = VAR_0.substr(1) + VAR_0[0];\n    output = output + VAR_0;\n }\nreturn output;\n}\n\nint main(){\n    string s;\n    cin>>s;\n    string output=decode_cyclic(s);\n    cout<<output;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/39", "prompt": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include <stdio.h>\nusing std;\nint prime_fib(int n) {\n    int VAR_0, f2, m;\n    VAR_0 = 1; f2 = 2;\n    int count = 0;\n    while (count < n)\n     {\n        VAR_0 = VAR_0 + f2;\n        m = VAR_0; VAR_0 = f2; f2 = m;\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' bool isprime = true;\n        for (int w = 2; w * w <= VAR_0; w++)\n        if (VAR_0 % w == 0)\n         {\n            isprime = false; break;\n            }\n        if (isprime) count+=1;\n        if (count == n) return VAR_0;\n        }\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n    assert (prime_fib(6) == 233);\n    assert (prime_fib(7) == 1597);\n    assert (prime_fib(8) == 28657);\n    assert (prime_fib(9) == 514229);\n    assert (prime_fib(10) == 433494437);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n}\n", "entry_point": "prime_fib", "partial": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        # print('@@this is the line to split##')\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n", "gc": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include <stdio.h>\nusing std;\nint prime_fib(int n) {\n    int VAR_0, f2, m;\n    VAR_0 = 1; f2 = 2;\n    int count = 0;\n    while (count < n)\n     {\n        VAR_0 = VAR_0 + f2;\n        m = VAR_0; VAR_0 = f2; f2 = m;\n       \n        if (m % 2 == 0)\n         {\n            count = count + 1;\n            continue;\n         }\n        if (m > 1)\n         {\n            count = count + 1;\n            continue;\n         }\n        if (m == 1)\n         {\n            count = count + 1;\n            continue;\n         }\n     }\n     return VAR_0;\n }\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/4", "prompt": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nfloat mean_absolute_deviation(vector < float > numbers) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int VAR_0 = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (VAR_0 = 0; i<numbers.size(); VAR_0++)\n    sum+=numbers [ VAR_0 ];\n    avg = sum / numbers.size();\n    msum = 0;\n    for (VAR_0 = 0; VAR_0 < numbers.size(); VAR_0++)\n    msum+=abs(numbers [ VAR_0 ] - avg);\n    return msum / numbers.size();\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n}\n", "entry_point": "mean_absolute_deviation", "partial": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    # print('@@this is the line to split##')\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n", "gc": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nfloat mean_absolute_deviation(vector < float > numbers) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int VAR_0 = 0;\n   \n    for (int i = 0; i < numbers.size(); i++) {\n        sum += fabs(numbers[i] - mean(numbers));\n    }\n    avg = sum / numbers.size();\n    msum = 0;\n    mavg = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        msum += fabs(numbers[i] - avg);\n        mavg += fabs(numbers[i] - mavg);\n    }\n    return msum / mavg;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/40", "prompt": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nbool triples_sum_to_zero(vector < int > VAR_0) {\n    for (int i = 0; i < VAR_0.size(); i++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int j =i+1;j<l.size(); j++)\n    for (int k = j + 1; k < VAR_0.size(); k++)\n    if (VAR_0 [ i ] + VAR_0 [ j ] + VAR_0 [ k ] == 0) return true;\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -1}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({1, 2, 5, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n    assert (triples_sum_to_zero({1}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -100}) == false);\n    assert (triples_sum_to_zero({100, 3, 5, -100}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n}\n", "entry_point": "triples_sum_to_zero", "partial": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    # print('@@this is the line to split##')\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n", "gc": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nbool triples_sum_to_zero(vector < int > VAR_0) {\n    for (int i = 0; i < VAR_0.size(); i++)\n   \n    {\n        int sum = 0;\n        for (int j = 0; j < VAR_0.size(); j++)\n        {\n            if (i!= j)\n            {\n                sum += VAR_0[j];\n            }\n        }\n        if (sum == 0)\n        {\n            return true;\n        }\n    }\n    return false;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/41", "prompt": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include <stdio.h>\nusing std;\n", "canonical_solution": "print(' @ this is the line to split ## ' int car_race_collision(int VAR_0) {\n    return VAR_0 * VAR_0;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (car_race_collision(2) == 4);\n    assert (car_race_collision(3) == 9);\n    assert (car_race_collision(4) == 16);\n    assert (car_race_collision(8) == 64);\n    assert (car_race_collision(10) == 100);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n", "example_test": "", "entry_point": "car_race_collision", "partial": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\n# print('@@this is the line to split##')\nint car_race_collision(int n){\n    return n*n;\n}\n", "gc": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include <stdio.h>\nusing std;\n\nint main()\n{\n    int n, m;\n    scanf(\"%d %d\", &n, &m);\n    int collisions = 0;\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < m; j++)\n        {\n            if (i == j)\n            {\n                continue;\n            }\n            if (i > j)\n            {\n                collisions += (i - j) * (i - j);\n            }\n            else\n            {\n                collisions += (m - j) * (m - j);\n            }\n        }\n    }\n    printf(\"%d\\n\", collisions);\n    return 0;\n}<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/42", "prompt": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > incr_list(vector < int > l) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 =0;i<l.size(); VAR_0++)\n    l [ VAR_0 ]+=1;\n    return l;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({}) , {}));\n    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({1, 2, 3}) , {2, 3, 4}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "entry_point": "incr_list", "partial": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    # print('@@this is the line to split##')\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n", "gc": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > incr_list(vector < int > l) {\n   \n   vector < int > r;\n   for (int i = 0; i < l.size(); i++) {\n      r.push_back(l[i] + 1);\n   }\n   return r;\n}\n\nint main() {\n   \n   vector < int > l;\n   l.push_back(1);\n   l.push_back(2);\n   l.push_back(3);\n   \n   vector < int > r = incr_list(l);\n   for (int i = 0; i < r.size(); i++) {\n      printf(\"%d \", r[i]);\n   }\n   printf(\"\\n\");\n   return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/43", "prompt": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nbool pairs_sum_to_zero(vector < int > l) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 =0;i<l.size(); VAR_0++)\n    for (int j = VAR_0 + 1; j < l.size(); j++)\n    if (l [ VAR_0 ] + l [ j ] == 0) return true;\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert (pairs_sum_to_zero({1}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n}\n", "entry_point": "pairs_sum_to_zero", "partial": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    # print('@@this is the line to split##')\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n", "gc": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nbool pairs_sum_to_zero(vector < int > l) {\n   \n   int sum = 0;\n   for(int i = 0; i < l.size(); i++) {\n      sum += l[i];\n   }\n   \n   for(int i = 0; i < l.size(); i++) {\n      if(l[i] == 0) {\n         for(int j = i+1; j < l.size(); j++) {\n            if(l[j] == 0) {\n               return true;\n            }\n         }\n      }\n   }\n   return false;\n}\n\nint main() {\n   vector < int > l;\n   l.push_back(1);\n   l.push_back(3);\n   l.push_back(5);\n   l.push_back(0);\n   l.push_back(1);\n   l.push_back(2);\n   l.push_back(3);\n   l.push_back(7);\n   l.push_back(2);\n   l.push_back(4);\n   l.push_back(-5);\n   l.push_back(3);\n   l.push_back(5);\n   l.push_back(7);\n   l.push_back(2);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_back(1);\n   l.push_", "passed": 0, "run_status": 1}
{"task_id": "CPP/44", "prompt": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring change_base(int VAR_0, int base) {\n    string out = \"\";\n    while (VAR_0 > 0)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        out = to_string(VAR_0 % base) + out;\n        VAR_0 = VAR_0 / base;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(9, 3) == \"100\");\n    assert (change_base(234, 2) == \"11101010\");\n    assert (change_base(16, 2) == \"10000\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n    for (int x=2;x<8;x++)\n        assert (change_base(x, x + 1) == to_string(x));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n}\n", "entry_point": "change_base", "partial": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    # print('@@this is the line to split##')\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n", "gc": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring change_base(int VAR_0, int base) {\n    string out = \"\";\n    while (VAR_0 > 0)\n   \n    {\n        int temp = VAR_0 % base;\n        VAR_0 = VAR_0 / base;\n        out = temp + out;\n    }\n    return out;\n}\nint main() {\n    int VAR_0;\n    scanf(\"%d\", &VAR_0);\n    printf(\"%s\\n\", change_base(VAR_0, 2).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/45", "prompt": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include <stdio.h>\n#include <math.h>\nusing std;\n", "canonical_solution": "print(' @ this is the line to split ## ' float triangle_area(float VAR_0, float h) {\n    return(VAR_0 * h) * 0.5;\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n    assert (abs(triangle_area(2, 2) - 2.0)<1e-4);\n    assert (abs(triangle_area(10, 8) - 40.0)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n}\n", "entry_point": "triangle_area", "partial": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n# print('@@this is the line to split##')\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\n", "gc": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include <stdio.h>\n#include <math.h>\nusing std;\n\nint triangle_area(int side, int high)\n{\n\treturn side * (high - side) / 2;\n}\n\nint main()\n{\n\tint side, high;\n\tscanf(\"%d %d\", &side, &high);\n\tprintf(\"%d\\n\", triangle_area(side, high));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/46", "prompt": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include <stdio.h>\nusing std;\nint fib4(int n) {\n    int VAR_0 [ 100 ];\n    VAR_0 [ 0 ] = 0;\n    VAR_0 [ 1 ] = 0;\n    VAR_0 [ 2 ] = 2;\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' VAR_0 [ 3 ] = 0;\n    for (int i = 4; i <= n; i++)\n     {\n        VAR_0 [ i ] = VAR_0 [ i - 1 ] + VAR_0 [ i - 2 ] + VAR_0 [ i - 3 ] + VAR_0 [ i - 4 ];\n        }\n    return VAR_0 [ n ];\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(8) == 28);\n    assert (fib4(10) == 104);\n    assert (fib4(12) == 386);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(6) == 8);\n    assert (fib4(7) == 14);\n}\n", "entry_point": "fib4", "partial": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    # print('@@this is the line to split##')\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n", "gc": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include <stdio.h>\nusing std;\nint fib4(int n) {\n    int VAR_0 [ 100 ];\n    VAR_0 [ 0 ] = 0;\n    VAR_0 [ 1 ] = 0;\n    VAR_0 [ 2 ] = 2;\n   \n    for (int i = 3; i <= n; i++) {\n        VAR_0 [ i ] = VAR_0 [ i - 1 ] + VAR_0 [ i - 2 ];\n    }\n    return VAR_0 [ n ];\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", fib4(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/47", "prompt": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\nusing std;\n", "canonical_solution": "print(' @ this is the line to split ## ' float median(vector < float > VAR_0) {\n    sort(VAR_0.begin(), VAR_0.end());\n    if (VAR_0.size() % 2 == 1) return VAR_0 [ VAR_0.size() / 2 ];\n    return 0.5 *(VAR_0 [ VAR_0.size() / 2 ] + VAR_0 [ VAR_0.size() / 2 - 1 ]);\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n    assert (abs(median({5}) - 5)<1e-4);\n    assert (abs(median({6, 5}) - 5.5)<1e-4);\n    assert (abs(median({8, 1, 3, 9, 9, 2, 7}) - 7)<1e-4 );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n}\n", "entry_point": "median", "partial": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n# print('@@this is the line to split##')\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n", "gc": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\nusing std;\n\ndouble median(vector<double> l)\n{\n\tif (l.size() == 0)\n\t\treturn 0;\n\tif (l.size() % 2 == 0)\n\t\treturn (l[l.size()/2] + l[l.size()/2 - 1])/2;\n\telse\n\t\treturn l[l.size()/2];\n}\n\nint main()\n{\n\tvector<double> l = {3, 1, 2, 4, 5};\n\tprintf(\"%f\\n\", median(l));\n\tl = {-10, 4, 6, 1000, 10, 20};\n\tprintf(\"%f\\n\", median(l));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/48", "prompt": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include <stdio.h>\n#include <string>\nusing std;\n", "canonical_solution": "print(' @ this is the line to split ## ' bool is_palindrome(string VAR_0) {\n    string pr(VAR_0.rbegin(), VAR_0.rend());\n    return pr == VAR_0;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n    assert (is_palindrome(\"xywyx\") == true);\n    assert (is_palindrome(\"xywyz\") == false);\n    assert (is_palindrome(\"xywzx\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n}\n", "entry_point": "is_palindrome", "partial": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\n# print('@@this is the line to split##')\nbool is_palindrome(string text){\n    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n", "gc": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include <stdio.h>\n#include <string>\nusing std;\n\nbool is_palindrome(const std::string& str)\n{\n    int i, j;\n    for (i = 0, j = str.size() - 1; i < j; i++, j--)\n    {\n        if (str[i]!= str[j])\n            return false;\n    }\n    return true;\n}\n\nint main()\n{\n    std::string str;\n    std::getline(std::cin, str);\n    if (str.empty())\n        return 0;\n    if (is_palindrome(str))\n        printf(\"%s is a palindrome\\n\", str.c_str());\n    else\n        printf(\"%s is not a palindrome\\n\", str.c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/49", "prompt": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include <stdio.h>\nusing std;\nint modp(int n, int p) {\n    int VAR_0 = 1;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i = 0; i < n; i++)\n    VAR_0 =(VAR_0 * 2) % p;\n    return VAR_0;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n    assert (modp(30, 5) == 4);\n    assert (modp(31, 5) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n}\n", "entry_point": "modp", "partial": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    int out=1;\n    # print('@@this is the line to split##')\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n", "gc": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include <stdio.h>\nusing std;\nint modp(int n, int p) {\n    int VAR_0 = 1;\n   \n    while (n > 0) {\n        if (n & 1) {\n            VAR_0 = (VAR_0 * p) % p;\n        }\n        n >>= 1;\n        p = (p * p) % p;\n    }\n    return VAR_0;\n}\n\nint main() {\n    int n, p;\n    scanf(\"%d %d\", &n, &p);\n    printf(\"%d\\n\", modp(n, p));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/5", "prompt": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > intersperse(vector < int > VAR_0, int delimeter) {\n    vector < int > out = {\n        }\n    ;\n    if (VAR_0.size() > 0) out.push_back(VAR_0 [ 0 ]);\n    for (int i = 1; i < VAR_0.size(); i++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        out.push_back(delimeter);\n        out.push_back(VAR_0 [ i ]);\n        \n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 7), {}));\n    \n    assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));\n    assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 4), {}));\n    assert (issame(intersperse({1, 2, 3}, 4),{1, 4, 2, 4, 3}));\n}\n", "entry_point": "intersperse", "partial": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    # print('@@this is the line to split##')\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n", "gc": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > intersperse(vector < int > VAR_0, int delimeter) {\n    vector < int > out = {\n        }\n    ;\n    if (VAR_0.size() > 0) out.push_back(VAR_0 [ 0 ]);\n    for (int i = 1; i < VAR_0.size(); i++)\n   \n    {\n        out.push_back(VAR_0 [ i ]);\n        out.push_back(delimeter);\n    }\n    return out;\n}\n\nint main() {\n    vector < int > VAR_0 = {1, 2, 3};\n    printf(\"%s\\n\", intersperse(VAR_0, 4).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/50", "prompt": "#include <stdio.h>\n#include <string>\nusing std;\nstring encode_shift(string s) {\n    string out;\n    int VAR_0;\n    for (VAR_0 = 0; VAR_0 < s.length(); VAR_0++)\n     {\n        int w =((int) s [ VAR_0 ] + 5 -(int) ' ') % 26 +(int) ' '; out = out +(char) w;\n        }\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' return out;\n    }\nstring decode_shift(string s) {\n    string out;\n    int VAR_0;\n    for (VAR_0 = 0; VAR_0 < s.length(); VAR_0++)\n     {\n        int w =((int) s [ VAR_0 ] + 21 -(int) ' ') % 26 +(int) ' '; out = out +(char) w;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_shift(str);\n        assert (decode_shift(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n", "example_test": "", "entry_point": "encode_shift", "partial": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    # print('@@this is the line to split##')\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "gc": "#include <stdio.h>\n#include <string>\nusing std;\nstring encode_shift(string s) {\n    string out;\n    int VAR_0;\n    for (VAR_0 = 0; VAR_0 < s.length(); VAR_0++)\n     {\n        int w =((int) s [ VAR_0 ] + 5 -(int)'') % 26 +(int)''; out = out +(char) w;\n        }\n   \n    return out;\n}\n\nstring decode_shift(string s) {\n    string out;\n    int VAR_0;\n    for (VAR_0 = 0; VAR_0 < s.length(); VAR_0++)\n     {\n        int w = (int) s [ VAR_0 ] -(int)''; out = out +(char) w;\n        }\n   \n    return out;\n}\n\nint main() {\n    string s;\n    cin >> s;\n    cout << encode_shift(s) << endl;\n    cout << decode_shift(encode_shift(s)) << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/51", "prompt": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing std;\nstring remove_vowels(string text) {\n    string out = \"\";\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' string vowels = \"AEIOUaeiou\";\n    for (int VAR_0 = 0; VAR_0 < text.length(); VAR_0++)\n    if (find(vowels.begin(), vowels.end(), text [ VAR_0 ]) == vowels.end())\n    out = out + text [ VAR_0 ];\n    return out;\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"fedcba\") == \"fdcb\");\n    assert (remove_vowels(\"eeeee\") == \"\");\n    assert (remove_vowels(\"acBAA\") == \"cB\");\n    assert (remove_vowels(\"EcBOO\") == \"cB\");\n    assert (remove_vowels(\"ybcd\") == \"ybcd\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"abcdef\") == \"bcdf\");\n    assert (remove_vowels(\"aaaaa\") == \"\");\n    assert (remove_vowels(\"aaBAA\") == \"B\");\n    assert (remove_vowels(\"zbcd\") == \"zbcd\");\n}\n", "entry_point": "remove_vowels", "partial": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string out=\"\";\n    # print('@@this is the line to split##')\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n", "gc": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing std;\nstring remove_vowels(string text) {\n    string out = \"\";\n   \n    for (int i = 0; i < text.size(); i++) {\n        if (text[i]!= 'a' && text[i]!= 'e' && text[i]!= 'i' && text[i]!= 'o' && text[i]!= 'u' && text[i]!= 'A' && text[i]!= 'E' && text[i]!= 'I' && text[i]!= 'O' && text[i]!= 'U') {\n            out += text[i];\n        }\n    }\n    return out;\n}\n\nint main() {\n    string text;\n    getline(cin, text);\n    cout << remove_vowels(text) << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/52", "prompt": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nbool below_threshold(vector < int > l, int t) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 =0;i<l.size(); VAR_0++)\n    if (l [ VAR_0 ] >= t) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n    assert (below_threshold({1, 20, 4, 10}, 21));\n    assert (below_threshold({1, 20, 4, 10}, 22));\n    assert (below_threshold({1, 8, 4, 10}, 11));\n    assert (not(below_threshold({1, 8, 4, 10}, 10)));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n}\n", "entry_point": "below_threshold", "partial": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    # print('@@this is the line to split##')\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n", "gc": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nbool below_threshold(vector < int > l, int t) {\n   \n   for (int i = 0; i < l.size(); i++) {\n      if (l[i] > t) return false;\n   }\n   return true;\n}\n\nint main() {\n   \n   vector < int > l;\n   l.push_back(1);\n   l.push_back(2);\n   l.push_back(4);\n   l.push_back(10);\n   \n   printf(\"%s\\n\", below_threshold(l, 100)? \"true\" : \"false\");\n   printf(\"%s\\n\", below_threshold(l, 5)? \"true\" : \"false\");\n   \n   return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/53", "prompt": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include <stdio.h>\n#include <stdlib.h>\nusing std;\n", "canonical_solution": "print(' @ this is the line to split ## ' int add(int VAR_0, int y) {\n    return VAR_0 + y;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(0, 1) == 1);\n    assert (add(1, 0) == 1);\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n    assert (add(7, 5) == 12);\n    for (int i=0;i<100;i+=1)\n    {\n        int x=rand()%1000;\n        int y=rand()%1000;\n        assert (add(x, y) == x + y);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n}\n", "entry_point": "add", "partial": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n# print('@@this is the line to split##')\nint add(int x,int y){\n    return x+y;\n}\n", "gc": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include <stdio.h>\n#include <stdlib.h>\nusing std;\n\nint add(int x, int y)\n{\n\tint sum = x + y;\n\treturn sum;\n}\n\nint main()\n{\n\tint x, y;\n\tscanf(\"%d %d\", &x, &y);\n\tprintf(\"%d\\n\", add(x, y));\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/54", "prompt": "/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing std;\nbool same_chars(string s0, string s1) {\n    for (int VAR_0 = 0; VAR_0 < s0.length(); VAR_0++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (find(s1.begin(), s1.end(), s0 [ VAR_0 ]) == s1.end())\n    return false;\n    for (int VAR_0 = 0; VAR_0 < s1.length(); VAR_0++)\n    if (find(s0.begin(), s0.end(), s1 [ VAR_0 ]) == s0.end())\n    return false;\n    return true;}", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert (same_chars(\"aabb\", \"aaccc\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n}\n", "entry_point": "same_chars", "partial": "/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n    for (int i=0;i<s0.length();i++)\n    # print('@@this is the line to split##')\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n", "gc": "/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing std;\nbool same_chars(string s0, string s1) {\n    for (int VAR_0 = 0; VAR_0 < s0.length(); VAR_0++)\n   \n    {\n        for (int VAR_1 = 0; VAR_1 < s1.length(); VAR_1++)\n   \n        {\n            if (s0[VAR_0] == s1[VAR_1])\n            {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main()\n{\n    string s0, s1;\n    while (scanf(\"%s%s\", &s0, &s1)!= EOF)\n    {\n        if (s0.length() == s1.length())\n        {\n            printf(\"%d\\n\", same_chars(s0, s1)? 1 : 0);\n        }\n        else\n        {\n            printf(\"%d\\n\", same_chars(s0, s1)? 1 : 0);\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/55", "prompt": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include <stdio.h>\nusing std;\nint fib(int n) {\n    int VAR_0 [ 1000 ];\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' VAR_0 [ 0 ] = 0; VAR_0 [ 1 ] = 1;\n    for (int i = 2; i <= n; i++)\n    VAR_0 [ i ] = VAR_0 [ i - 1 ] + VAR_0 [ i - 2 ];\n    return VAR_0 [ n ];\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n    assert (fib(11) == 89);\n    assert (fib(12) == 144);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n}\n", "entry_point": "fib", "partial": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    int f[1000];\n    # print('@@this is the line to split##')\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n", "gc": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include <stdio.h>\nusing std;\nint fib(int n) {\n    int VAR_0 [ 1000 ];\n   \n    if (n == 0) return VAR_0 [ 0 ];\n    if (n == 1) return VAR_0 [ 1 ];\n    if (n == 2) return VAR_0 [ 2 ];\n    if (n == 3) return VAR_0 [ 3 ];\n    if (n == 4) return VAR_0 [ 4 ];\n    if (n == 5) return VAR_0 [ 5 ];\n    if (n == 6) return VAR_0 [ 6 ];\n    if (n == 7) return VAR_0 [ 7 ];\n    if (n == 8) return VAR_0 [ 8 ];\n    if (n == 9) return VAR_0 [ 9 ];\n    if (n == 10) return VAR_0 [ 10 ];\n    if (n == 11) return VAR_0 [ 11 ];\n    if (n == 12) return VAR_0 [ 12 ];\n    if (n == 13) return VAR_0 [ 13 ];\n    if (n == 14) return VAR_0 [ 14 ];\n    if (n == 15) return VAR_0 [ 15 ];\n    if (n == 16) return VAR_0 [ 16 ];\n    if (n == 17) return VAR_0 [ 17 ];\n    if (n == 18) return VAR_0 [ 18 ];\n    if (n == 19) return VAR_0 [ 19 ];\n    if (n == 20) return VAR_0 [ 20 ];\n    if (n == 21) return VAR_0 [ 21 ];\n    if (n == 22) return VAR_0 [ 22 ];\n    if (n == 23) return VAR_0 [ 23 ];\n    if (n == 24) return VAR_0 [ 24 ];\n    if (n == 25) return VAR_0 [ 25 ];\n    if (n == 26) return VAR_0 [ 26 ];\n    if (n == 27) return VAR_0 [ 27 ];\n    if (n == 28) return VAR_0 [ 28 ];\n    if (n == 29) return VAR_0 [ 29 ];\n    if (n == 30) return VAR_0 [ 30 ];\n    if (n == 31) return VAR_0 [ 31 ];\n    if (n == 32) return VAR_0 [ 32 ];\n    if (n == 33) return VAR_0 [ 33 ];\n    if (n == 34) return VAR_0 [ 34 ];\n    if (n == 35) return VAR_0 [ 35 ];\n    if (n == 36) return VAR_0 [ 36 ];\n    if (n == 37) return VAR_0 [ 37 ];\n    if (n == 38) return VAR_0 [ 38 ];\n    if (n == 39) return VAR_0 [ 39 ];\n    if (n == 40) return VAR_0 [ 40 ];\n    if (n == 41) return VAR_0 [ 41 ];\n    if (n == 42) return VAR_0 [ 42 ];\n    if (n == 43) return VAR_0 [ 43 ];\n    if (n == 44) return VAR_0 [ 44 ];\n    if (n == 45) return VAR_0 [ 45 ];\n    if (n == 46) return VAR_0 [ 46 ];\n    if (n == 47) return VAR_0 [ 47 ];\n    if (n == 48) return VAR_0 [ 48 ];\n    if (n == 49) return VAR_0 [ 49 ];\n    if (n == 50) return VAR_0 [ 50 ];\n    if (n == 51) return VAR_0 [ 51 ];\n    if (n == 52) return VAR_0 [ 52 ];\n    if (n == 53) return VAR_0 [ 53 ];\n    if (n == 54) return VAR_0 [ 54 ];\n    if (n == 55) return VAR_0 [ 55 ];\n    if (n == 56) return VAR_0 [ 56 ];\n    if (n == 57) return VAR_0 [ 57 ];\n    if (n == 58) return VAR_0 [ 58 ];\n    if (n == 59) return VAR_0 [ 59 ];\n    if (n == 60) return VAR_0 [ 60 ];\n    if (n == 61) return VAR_0 [ 61 ];\n    if (n == 62) return VAR_0 [ 62 ];\n    if (n == 63) return VAR_0 [ 63 ];\n    if (n == 64) return VAR_0 [ 64 ];\n    if (n == 65) return VAR_0 [ 65 ];\n    if (n == 66) return VAR_0 [ 66 ];\n    if (n == 67) return VAR_0 [ 67 ];\n    if (n == 68) return VAR_0 [ 68 ];\n    if (n == 69) return VAR_0 [ 69 ];\n    if (n == 70) return VAR_0 [ 70 ];\n    if (n == 71) return VAR_0 [ 71 ];\n    if (n == 72) return VAR_0 [ 72 ];\n    if (n == 73) return VAR_0 [ 73 ];\n    if (n == 74) return VAR_0 [ 74 ];\n    if (n == 75) return VAR_0 [ 75 ];\n    if (n == 76) return VAR_0 [ 76 ];\n    if (n == 77) return VAR_0 [ 77 ];\n    if (n == 78) return VAR_0 [ 78 ];\n    if (n == 79) return VAR_0 [ 79 ];\n    if (n == 80) return VAR_0 [ 80 ];\n    if (n == 81) return VAR_0 [ 81 ];\n    if (n == 82) return VAR_0 [ 82 ];\n    if (n == 83) return VAR_0 [ 83 ];\n    if (n == 84) return VAR_0 [ 84 ];\n    if (n == 85) return VAR_0 [ 85 ];\n    if (n == 86) return VAR_0 [ 86 ];\n    if (n == 87) return VAR_0 [ 87 ];\n    if (n == 88) return VAR_0 [ 88 ];\n    if (n == 89) return VAR_0 [ 89 ];\n    if (n == 90) return VAR_0 [ 90 ];\n    if (n == 91) return V", "passed": 0, "run_status": 2}
{"task_id": "CPP/56", "prompt": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool correct_bracketing(string brackets) {\n    int level = 0;\n    for (int VAR_0 = 0; VAR_0 < brackets.length(); VAR_0++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (brackets [ VAR_0 ] == ' ') level+=1;\n        if (brackets [ VAR_0 ] == ' ') level-=1;\n        if (level < 0) return false;\n        }\n    if (level != 0) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (correct_bracketing(\"<><><<><>><>\"));\n    assert (correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n    assert (not (correct_bracketing(\"<<<><>>>>\")));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n    assert (not (correct_bracketing(\"<<<<\")));\n    assert (not (correct_bracketing(\">\")));\n    assert (not (correct_bracketing(\"<<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>><<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>>><>\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n}\n", "entry_point": "correct_bracketing", "partial": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        # print('@@this is the line to split##')\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "gc": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool correct_bracketing(string brackets) {\n    int level = 0;\n    for (int VAR_0 = 0; VAR_0 < brackets.length(); VAR_0++)\n     {\n       \n        if (brackets[VAR_0] == '<')\n            level++;\n        else if (brackets[VAR_0] == '>')\n            level--;\n        else if (brackets[VAR_0] == '>' && level == 0)\n            return false;\n        else if (brackets[VAR_0] == '<' && level == 0)\n            return true;\n    }\n    return false;\n}\n\nint main()\n{\n    string brackets = \"<<><>>\";\n    printf(\"%s\\n\", correct_bracketing(brackets).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/57", "prompt": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nbool monotonic(vector < float > l) {\n    int incr, decr;\n    incr = 0; decr = 0;\n    for (int VAR_0 = 1; VAR_0 < l.size(); VAR_0++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (l [ VAR_0 ] > l [ VAR_0 - 1 ]) incr = 1;\n        if (l [ VAR_0 ] < l [ VAR_0 - 1 ]) decr = 1;\n        }\n    if (incr + decr == 2) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 2, 4, 20}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n    assert (monotonic({4, 1, 1, 0}) == true);\n    assert (monotonic({1, 2, 3, 2, 5, 60}) == false);\n    assert (monotonic({1, 2, 3, 4, 5, 60}) == true);\n    assert (monotonic({9, 9, 9, 9}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n}\n", "entry_point": "monotonic", "partial": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    # print('@@this is the line to split##')\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n", "gc": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nbool monotonic(vector < float > l) {\n    int incr, decr;\n    incr = 0; decr = 0;\n    for (int VAR_0 = 1; VAR_0 < l.size(); VAR_0++)\n   \n    {\n        if (l[VAR_0] < l[VAR_0-1])\n            incr++;\n        else if (l[VAR_0] > l[VAR_0-1])\n            decr++;\n    }\n    if (incr == 0 && decr == 0)\n        return true;\n    else\n        return false;\n}\n\nint main() {\n    vector < float > l;\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(10);\n    l.push_back(-10);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(0);\n    l.push_back(-10);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(1);\n    l.push_back", "passed": 0, "run_status": 1}
{"task_id": "CPP/58", "prompt": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > common(vector < int > l1, vector < int > l2) {\n    vector < int > VAR_0 = {\n        }\n    ;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i =0;i<l1.size(); i++)\n    if (find(VAR_0.begin(), VAR_0.end(), l1 [ i ]) == VAR_0.end())\n    if (find(l2.begin(), l2.end(), l1 [ i ]) != l2.end())\n    VAR_0.push_back(l1 [ i ]);\n    sort(VAR_0.begin(), VAR_0.end());\n    return VAR_0;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n    assert (issame(common({4, 3, 2, 8}, {3, 2, 4}) , {2, 3, 4}));\n    assert (issame(common({4, 3, 2, 8}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n}\n", "entry_point": "common", "partial": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    # print('@@this is the line to split##')\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "gc": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > common(vector < int > l1, vector < int > l2) {\n    vector < int > VAR_0 = {\n        }\n    ;\n   \n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    vector < int > VAR_1 = {\n        }\n    ;\n    vector < int > VAR_2 = {\n        }\n    ;\n    vector < int > VAR_3 = {\n        }\n    ;\n    vector < int > VAR_4 = {\n        }\n    ;\n    vector < int > VAR_5 = {\n        }\n    ;\n    vector < int > VAR_6 = {\n        }\n    ;\n    vector < int > VAR_7 = {\n        }\n    ;\n    vector < int > VAR_8 = {\n        }\n    ;\n    vector < int > VAR_9 = {\n        }\n    ;\n    vector < int > VAR_10 = {\n        }\n    ;\n    vector < int > VAR_11 = {\n        }\n    ;\n    vector < int > VAR_12 = {\n        }\n    ;\n    vector < int > VAR_13 = {\n        }\n    ;\n    vector < int > VAR_14 = {\n        }\n    ;\n    vector < int > VAR_15 = {\n        }\n    ;\n    vector < int > VAR_16 = {\n        }\n    ;\n    vector < int > VAR_17 = {\n        }\n    ;\n    vector < int > VAR_18 = {\n        }\n    ;\n    vector < int > VAR_19 = {\n        }\n    ;\n    vector < int > VAR_20 = {\n        }\n    ;\n    vector < int > VAR_21 = {\n        }\n    ;\n    vector < int > VAR_22 = {\n        }\n    ;\n    vector < int > VAR_23 = {\n        }\n    ;\n    vector < int > VAR_24 = {\n        }\n    ;\n    vector < int > VAR_25 = {\n        }\n    ;\n    vector < int > VAR_26 = {\n        }\n    ;\n    vector < int > VAR_27 = {\n        }\n    ;\n    vector < int > VAR_28 = {\n        }\n    ;\n    vector < int > VAR_29 = {\n        }\n    ;\n    vector < int > VAR_30 = {\n        }\n    ;\n    vector < int > VAR_31 = {\n        }\n    ;\n    vector < int > VAR_32 = {\n        }\n    ;\n    vector < int > VAR_33 = {\n        }\n    ;\n    vector < int > VAR_34 = {\n        }\n    ;\n    vector < int > VAR_35 = {\n        }\n    ;\n    vector < int > VAR_36 = {\n        }\n    ;\n    vector < int > VAR_37 = {\n        }\n    ;\n    vector < int > VAR_38 = {\n        }\n    ;\n    vector < int > VAR_39 = {\n        }\n    ;\n    vector < int > VAR_40 = {\n        }\n    ;\n    vector < int > VAR_41 = {\n        }\n    ;\n    vector < int > VAR_42 = {\n        }\n    ;\n    vector < int > VAR_43 = {\n        }\n    ;\n    vector < int > VAR_44 = {\n        }\n    ;\n    vector < int > VAR_45 = {\n        }\n    ;\n    vector < int > VAR_46 = {\n        }\n    ;\n    vector < int > VAR_47 = {\n        }\n    ;\n    vector < int > VAR_48 = {\n        }\n    ;\n    vector < int > VAR_49 = {\n        }\n    ;\n    vector < int > VAR_50 = {\n        }\n    ;\n    vector < int > VAR_51 = {\n        }\n    ;\n    vector < int > VAR_52 = {\n        }\n    ;\n    vector < int > VAR_53 = {\n        }\n    ;\n    vector < int > VAR_54 = {\n        }\n    ;\n    vector < int > VAR_55 = {\n        }\n    ;\n    vector < int > VAR_56 = {\n        }\n    ;\n    vector < int > VAR_57 = {\n        }\n    ;\n    vector < int > VAR_58 = {\n        }\n    ;\n    vector < int > VAR_59 = {\n        }\n    ;\n    vector < int > VAR_60 = {\n        }\n    ;\n    vector < int > VAR_61 = {\n        }\n    ;\n    vector < int > VAR_62 = {\n        }\n    ;\n    vector < int > VAR_63 = {\n        }\n    ;\n    vector < int > VAR_64 = {\n        }\n    ;\n    vector < int > VAR_65 = {\n        }\n    ;\n    vector < int > VAR_66 = {\n        }\n    ;\n    vector < int > VAR_67 = {\n        }\n    ;\n    vector < int > VAR_68 = {\n        }\n    ;\n    vector < int > VAR_69 = {\n        }\n    ;\n    vector < int > VAR_70 = {\n        }\n    ;\n    vector < int > VAR_71 = {\n        }\n    ;\n    vector < int > VAR_72 = {\n        }\n    ;\n    vector < int > VAR_73 = {\n        }\n    ;\n    vector < int > VAR_74 = {\n        }\n    ;\n    vector < int > VAR_75 = {\n        }\n    ;\n    vector < int > VAR_", "passed": 0, "run_status": 2}
{"task_id": "CPP/59", "prompt": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include <stdio.h>\nusing std;\nint largest_prime_factor(int n) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 = 2; VAR_0 * VAR_0 <= n; VAR_0++)\n    while (n % VAR_0 == 0 and n > VAR_0) n = n / VAR_0;\n    return n;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(15) == 5);\n    assert (largest_prime_factor(27) == 3);\n    assert (largest_prime_factor(63) == 7);\n    assert (largest_prime_factor(330) == 11);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(2048) == 2);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "entry_point": "largest_prime_factor", "partial": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    # print('@@this is the line to split##')\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n", "gc": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include <stdio.h>\nusing std;\nint largest_prime_factor(int n) {\n   \n   int i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138, n139, n140, n141, n142, n143, n144, n145, n146, n147, n148, n149, n150, n151, n152, n153, n154, n155, n156, n157, n158, n159, n160, n161, n162, n163, n164, n165, n166, n167, n168, n169, n170, n171, n172, n173, n174, n175, n176, n177, n178, n179, n180, n181, n182, n183, n184, n185, n186, n187, n188, n189, n190, n191, n192, n193, n194, n195, n196, n197, n198, n199, n200, n201, n202, n203, n204, n205, n206, n207, n208, n209, n210, n211, n212, n213, n214, n215, n216, n217, n218, n219, n220, n221, n222, n223, n224, n225, n226, n227, n228, n229, n230, n231, n232, n233, n234, n235, n236, n237, n238, n239, n240, n241, n242, n243, n244, n245, n246, n247, n248, n249, n250, n251, n252, n253, n254, n255, n256, n257, n258, n259, n260, n261, n262, n263, n264, n265, n266, n267, n268, n269, n270, n271, n272, n273, n274, n275, n276, n277, n278, n279, n280, n281, n282, n283, n284, n285, n286, n287, n288, n289, n290, n291, n292, n293, n294, n295, n296, n297, n298, n299, n300, n301, n302, n303, n304, n305, n306, n307, n308, n309, n310, n311, n312, n313, n314, n315, n316, n317, n318, n319, n320, n321, n322, n323, n324, n325, n326, n327, n328, n329, n330, n331, n332, n333, n334, n335, n336, n337, n338, n339, n340, n341, n342, n343, n344, n345, n346, n347, n348, n349, n350, n351, n352, n353, n354, n355, n356, n357, n358, n359, n360, n361, n362, n363, n364, n365, n366, n367, n368, n369, n370, n371, n372, n373, n374, n375, n376, n377, n378, n379, n380, n381, n382, n383, n384, n385, n386, n387, n388, n389, n390, n391, n392, n393, n394, n395, n396, n397, n398, n399, n400, n401, n402, n403, n404, n405, n406, n407, n408, n409, n410, n411, n412, n413, n414, n415, n416, n417, n418, n419, n420, n421, n422, n423, n424, n425, n426, n427, n428, n429, n430, n431, n432, n433, n434, n435, n436, n437, n438, n439, n440, n441, n442, n443, n444, n445, n446, n447, n448, n449, n450, n451, n452, n453, n454, n455, n456, n457, n458, n459, n460, n461, n462, n463, n464, n465, n466, n467, n468, n469, n470, n471, n472, n473, n474, n475, n476, n477, n478, n479, n480, n481, n482, n", "passed": 0, "run_status": 2}
{"task_id": "CPP/6", "prompt": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < int > parse_nested_parens(string paren_string) {\n    vector < int > all_levels;\n    string current_paren;\n    int level = 0, max_level = 0;\n    char VAR_0;\n    int i;\n    for (i = 0; i < paren_string.length(); i++)\n     {\n        VAR_0 = paren_string [ i ];\n        if (VAR_0 == ' ')\n         {\n            level+=1;\n           \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (level > max_level) max_level = level;\n            current_paren+=VAR_0;\n            }\n        if (VAR_0 == ' ')\n         {\n            level-=1;\n            current_paren+=VAR_0;\n            if (level == 0) {\n                all_levels.push_back(max_level);\n                current_paren = \"\";\n                max_level = 0;\n                }\n            }\n        }\n    return all_levels;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n     assert (issame(parse_nested_parens(\"() (()) ((())) (((())))\") , {1, 2, 3, 4}));\n    assert (issame(parse_nested_parens(\"(()(())((())))\") ,{4}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n}\n", "entry_point": "parse_nested_parens", "partial": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        # print('@@this is the line to split##')\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n", "gc": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < int > parse_nested_parens(string paren_string) {\n    vector < int > all_levels;\n    string current_paren;\n    int level = 0, max_level = 0;\n    char VAR_0;\n    int i;\n    for (i = 0; i < paren_string.length(); i++)\n     {\n        VAR_0 = paren_string [ i ];\n        if (VAR_0 =='')\n         {\n            level+=1;\n           \n        }\n        else if (VAR_0 == ')')\n         {\n            if (level > max_level)\n             {\n                max_level = level;\n                all_levels.push_back(max_level);\n             }\n            level-=1;\n            current_paren = \"\";\n         }\n        else if (VAR_0 == '(')\n         {\n            if (level == 0)\n             {\n                current_paren = \"\";\n             }\n            else\n             {\n                current_paren += VAR_0;\n             }\n            level+=1;\n         }\n        else if (VAR_0 == ')')\n         {\n            if (level == 0)\n             {\n                current_paren += VAR_0;\n             }\n            else\n             {\n                current_paren += VAR_0;\n             }\n            level-=1;\n         }\n     }\n    return all_levels;\n}\n\nint main()\n{\n    vector < int > all_levels = parse_nested_parens(\"(()()) ((())) () ((())()())\");\n    for (int i = 0; i < all_levels.size(); i++)\n     {\n        printf(\"%d \", all_levels [ i ]);\n     }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/60", "prompt": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include <stdio.h>\nusing std;\n", "canonical_solution": "print(' @ this is the line to split ## ' int sum_to_n(int VAR_0) {\n    return VAR_0 *(VAR_0 + 1) / 2;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(6) == 21);\n    assert (sum_to_n(11) == 66);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(5) == 15);\n    assert (sum_to_n(10) == 55);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "entry_point": "sum_to_n", "partial": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\n# print('@@this is the line to split##')\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\n", "gc": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include <stdio.h>\nusing std;\n\nint sum_to_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", sum_to_n(n));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/61", "prompt": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool correct_bracketing(string brackets) {\n    int level = 0;\n    for (int VAR_0 = 0; VAR_0 < brackets.length(); VAR_0++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (brackets [ VAR_0 ] == ' ') level+=1;\n        if (brackets [ VAR_0 ] == ' ') level-=1;\n        if (level < 0) return false;\n        }\n    if (level != 0) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (correct_bracketing(\"()()(()())()\"));\n    assert (correct_bracketing(\"()()((()()())())(()()(()))\"));\n    assert (not (correct_bracketing(\"((()())))\")));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n    assert (not (correct_bracketing(\"((((\")));\n    assert (not (correct_bracketing(\")\")));\n    assert (not (correct_bracketing(\"(()\")));\n    assert (not (correct_bracketing(\"()()(()())())(()\")));\n    assert (not (correct_bracketing(\"()()(()())()))()\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n}\n", "entry_point": "correct_bracketing", "partial": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        # print('@@this is the line to split##')\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "gc": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool correct_bracketing(string brackets) {\n    int level = 0;\n    for (int VAR_0 = 0; VAR_0 < brackets.length(); VAR_0++)\n     {\n       \n        if (brackets[VAR_0] == '(')\n        {\n            level++;\n        }\n        else if (brackets[VAR_0] == ')')\n        {\n            level--;\n            if (level < 0)\n            {\n                return false;\n            }\n        }\n        if (level < 0)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\n{\n    string brackets = \"(()())\";\n    printf(\"%s\\n\", correct_bracketing(brackets).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/62", "prompt": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nvector < float > derivative(vector < float > xs) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' vector < float > out = {\n        }\n    ;\n    for (int VAR_0 = 1; VAR_0 < xs.size(); VAR_0++)\n    out.push_back(VAR_0 * xs [ VAR_0 ]);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n    assert (issame(derivative({3, 2, 1}) , {2, 2}));\n    assert (issame(derivative({3, 2, 1, 0, 4}) , {2, 2, 0, 16}));\n    assert (issame(derivative({1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n}\n", "entry_point": "derivative", "partial": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    # print('@@this is the line to split##')\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n", "gc": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 +....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing std;\nvector < float > derivative(vector < float > xs) {\n   \n   int n = xs.size();\n   vector < float > d(n);\n   \n   for (int i = 1; i < n; i++) {\n      for (int j = 0; j < i; j++) {\n         d[i] += xs[j] * xs[i - j - 1];\n      }\n   }\n   \n   return d;\n}\n\nint main() {\n   \n   vector < float > xs = {3, 1, 2, 4, 5};\n   vector < float > d = derivative(xs);\n   \n   for (int i = 0; i < d.size(); i++) {\n      printf(\"%f \", d[i]);\n   }\n   printf(\"\\n\");\n   \n   return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/63", "prompt": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include <stdio.h>\nusing std;\nint fibfib(int n) {\n    int VAR_0 [ 100 ];\n    VAR_0 [ 0 ] = 0;\n    VAR_0 [ 1 ] = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' VAR_0 [ 2 ] = 1;\n    for (int i = 3; i <= n; i++)\n    VAR_0 [ i ] = VAR_0 [ i - 1 ] + VAR_0 [ i - 2 ] + VAR_0 [ i - 3 ];\n    return VAR_0 [ n ];\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(2) == 1);\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n    assert (fibfib(10) == 81);\n    assert (fibfib(12) == 274);\n    assert (fibfib(14) == 927);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n}\n", "entry_point": "fibfib", "partial": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    # print('@@this is the line to split##')\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n", "gc": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include <stdio.h>\nusing std;\nint fibfib(int n) {\n    int VAR_0 [ 100 ];\n    VAR_0 [ 0 ] = 0;\n    VAR_0 [ 1 ] = 0;\n   \n    int VAR_1 [ 100 ];\n    VAR_1 [ 0 ] = 0;\n    VAR_1 [ 1 ] = 1;\n   \n    int VAR_2 [ 100 ];\n    VAR_2 [ 0 ] = 0;\n    VAR_2 [ 1 ] = 1;\n   \n    int VAR_3 [ 100 ];\n    VAR_3 [ 0 ] = 0;\n    VAR_3 [ 1 ] = 1;\n   \n    int VAR_4 [ 100 ];\n    VAR_4 [ 0 ] = 0;\n    VAR_4 [ 1 ] = 1;\n   \n    int VAR_5 [ 100 ];\n    VAR_5 [ 0 ] = 0;\n    VAR_5 [ 1 ] = 1;\n   \n    int VAR_6 [ 100 ];\n    VAR_6 [ 0 ] = 0;\n    VAR_6 [ 1 ] = 1;\n   \n    int VAR_7 [ 100 ];\n    VAR_7 [ 0 ] = 0;\n    VAR_7 [ 1 ] = 1;\n   \n    int VAR_8 [ 100 ];\n    VAR_8 [ 0 ] = 0;\n    VAR_8 [ 1 ] = 1;\n   \n    int VAR_9 [ 100 ];\n    VAR_9 [ 0 ] = 0;\n    VAR_9 [ 1 ] = 1;\n   \n    int VAR_10 [ 100 ];\n    VAR_10 [ 0 ] = 0;\n    VAR_10 [ 1 ] = 1;\n   \n    int VAR_11 [ 100 ];\n    VAR_11 [ 0 ] = 0;\n    VAR_11 [ 1 ] = 1;\n   \n    int VAR_12 [ 100 ];\n    VAR_12 [ 0 ] = 0;\n    VAR_12 [ 1 ] = 1;\n   \n    int VAR_13 [ 100 ];\n    VAR_13 [ 0 ] = 0;\n    VAR_13 [ 1 ] = 1;\n   \n    int VAR_14 [ 100 ];\n    VAR_14 [ 0 ] = 0;\n    VAR_14 [ 1 ] = 1;\n   \n    int VAR_15 [ 100 ];\n    VAR_15 [ 0 ] = 0;\n    VAR_15 [ 1 ] = 1;\n   \n    int VAR_16 [ 100 ];\n    VAR_16 [ 0 ] = 0;\n    VAR_16 [ 1 ] = 1;\n   \n    int VAR_17 [ 100 ];\n    VAR_17 [ 0 ] = 0;\n    VAR_17 [ 1 ] = 1;\n   \n    int VAR_18 [ 100 ];\n    VAR_18 [ 0 ] = 0;\n    VAR_18 [ 1 ] = 1;\n   \n    int VAR_19 [ 100 ];\n    VAR_19 [ 0 ] = 0;\n    VAR_19 [ 1 ] = 1;\n   \n    int VAR_20 [ 100 ];\n    VAR_20 [ 0 ] = 0;\n    VAR_20 [ 1 ] = 1;\n   \n    int VAR_21 [ 100 ];\n    VAR_21 [ 0 ] = 0;\n    VAR_21 [ 1 ] = 1;\n   \n    int VAR_22 [ 100 ];\n    VAR_22 [ 0 ] = 0;\n    VAR_22 [ 1 ] = 1;\n   \n    int VAR_23 [ 100 ];\n    VAR_23 [ 0 ] = 0;\n    VAR_23 [ 1 ] = 1;\n   \n    int VAR_24 [ 100 ];\n    VAR_24 [ 0 ] = 0;\n    VAR_24 [ 1 ] = 1;\n   \n    int VAR_25 [ 100 ];\n    VAR_25 [ 0 ] = 0;\n    VAR_25 [ 1 ] = 1;\n   \n    int VAR_26 [ 100 ];\n    VAR_26 [ 0 ] = 0;\n    VAR_26 [ 1 ] = 1;\n   \n    int VAR_27 [ 100 ];\n    VAR_27 [ 0 ] = 0;\n    VAR_27 [ 1 ] = 1;\n   \n    int VAR_28 [ 100 ];\n    VAR_28 [ 0 ] = 0;\n    VAR_28 [ 1 ] = 1;\n   \n    int VAR_29 [ 100 ];\n    VAR_29 [ 0 ] = 0;\n    VAR_29 [ 1 ] = 1;\n   \n    int VAR_30 [ 100 ];\n    VAR_30 [ 0 ] = 0;\n    VAR_30 [ 1 ] = 1;\n   \n    int VAR_31 [ 100 ];\n    VAR_31 [ 0 ] = 0;\n    VAR_31 [ 1 ] = 1;\n   \n    int VAR_32 [ 100 ];\n    VAR_32 [ 0 ] = 0;\n    VAR_32 [ 1 ] = 1;\n   \n    int VAR_33 [ 100 ];\n    VAR_33 [ 0 ] = 0;\n    VAR_33 [ 1 ] = 1;\n   \n    int VAR_34 [ 100 ];\n    VAR_34 [ 0 ] = 0;\n    VAR_34 [ 1 ] = 1;\n   \n    int VAR_35 [ 100 ];\n    VAR_35 [ 0 ] = 0;\n    VAR_35 [ 1 ] = 1;\n   \n    int VAR_36 [ 100 ];\n    VAR_36 [ 0 ] = 0;\n    VAR_36 [ 1 ] = 1;\n   \n    int VAR_37 [ 100 ];\n    VAR_37 [ 0 ] = 0;\n    VAR_37 [ 1 ] = 1;\n   \n", "passed": 0, "run_status": 2}
{"task_id": "CPP/64", "prompt": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing std;\nint vowels_count(string VAR_0) {\n    string vowels = \"aeiouAEIOU\";\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' int count = 0;\n    for (int i = 0; i < VAR_0.length(); i++)\n    if (find(vowels.begin(), vowels.end(), VAR_0 [ i ]) != vowels.end())\n    count+=1;\n    if (VAR_0 [ VAR_0.length() - 1 ] == ' ' or VAR_0 [ VAR_0.length() - 1 ] == ' ') count+=1;\n    return count;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"Alone\") == 3);\n    assert (vowels_count(\"key\") == 2);\n    assert (vowels_count(\"bye\") == 1);\n    assert (vowels_count(\"keY\") == 2);\n    assert (vowels_count(\"bYe\") == 1);\n    assert (vowels_count(\"ACEDY\") == 3);\n   \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"ACEDY\") == 3);\n}\n", "entry_point": "vowels_count", "partial": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    # print('@@this is the line to split##')\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n", "gc": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing std;\nint vowels_count(string VAR_0) {\n    string vowels = \"aeiouAEIOU\";\n   \n    int count = 0;\n    for (int i = 0; i < VAR_0.length(); i++) {\n        if (vowels.find(VAR_0[i])!= string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    string VAR_0 = \"abcde\";\n    printf(\"%d\\n\", vowels_count(VAR_0));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/65", "prompt": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring circular_shift(int x, int shift) {\n    string VAR_0;\n    VAR_0 = to_string(x);\n    if (VAR_0.length() < shift)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        string s(VAR_0.rbegin(), VAR_0.rend());\n        return s;\n        }\n    VAR_0 = VAR_0.substr(VAR_0.length() - shift) + VAR_0.substr(0, VAR_0.length() - shift);\n    return VAR_0;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(100, 2) == \"001\");\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(97, 8) == \"79\");\n    assert (circular_shift(12, 1) == \"21\");\n    assert (circular_shift(11, 101) == \"11\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(12, 1) == \"21\");\n}\n", "entry_point": "circular_shift", "partial": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    # print('@@this is the line to split##')\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n", "gc": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring circular_shift(int x, int shift) {\n    string VAR_0;\n    VAR_0 = to_string(x);\n    if (VAR_0.length() < shift)\n   \n    return VAR_0;\n    else {\n        string VAR_1;\n        VAR_1 = VAR_0;\n        for (int i = 0; i < shift - VAR_0.length(); i++)\n            VAR_1 = VAR_1 + \"0\";\n        return VAR_1;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "CPP/66", "prompt": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nint digitSum(string s) {\n    int sum = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 =0;i<s.length(); VAR_0++)\n    if (s [ VAR_0 ] >= 65 and s [ VAR_0 ] <= 90)\n    sum+=s [ VAR_0 ];\n    return sum;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n    assert (digitSum(\" How are yOu?\") == 151);\n    assert (digitSum(\"You arE Very Smart\") == 327);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n}\n", "entry_point": "digitSum", "partial": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum=0;\n    # print('@@this is the line to split##')\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n", "gc": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nint digitSum(string s) {\n    int sum = 0;\n   \n    for(int i = 0; i < s.length(); i++) {\n        sum += s[i] - '0';\n    }\n    return sum;\n}\nint main() {\n    string s;\n    scanf(\"%s\", &s);\n    printf(\"%d\", digitSum(s));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/67", "prompt": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nint fruit_distribution(string s, int n) {\n    string num1 = \"\", num2 = \"\";\n    int is12;\n    is12 = 0;\n    for (int VAR_0 = 0; VAR_0 < s.size(); VAR_0++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (s [ VAR_0 ] >= 48 and s [ VAR_0 ] <= 57)\n     {\n        if (is12 == 0) num1 = num1 + s [ VAR_0 ];\n        if (is12 == 1) num2 = num2 + s [ VAR_0 ];\n        }\n    else\n    if (is12 == 0 and num1.length() > 0) is12 = 1;\n    return n - atoi(num1.c_str()) - atoi(num2.c_str());\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"5 apples and 6 oranges\",21) == 10);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"1 apples and 0 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",5) == 0);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "entry_point": "fruit_distribution", "partial": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        # print('@@this is the line to split##')\n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n", "gc": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nint fruit_distribution(string s, int n) {\n    string num1 = \"\", num2 = \"\";\n    int is12;\n    is12 = 0;\n    for (int VAR_0 = 0; VAR_0 < s.size(); VAR_0++)\n   \n    {\n        if (s[VAR_0] == '1')\n        {\n            num1 += s[VAR_0];\n        }\n        else if (s[VAR_0] == '2')\n        {\n            num2 += s[VAR_0];\n            is12 = 1;\n        }\n    }\n    int num3 = 0;\n    for (int VAR_1 = 0; VAR_1 < num1.size(); VAR_1++)\n   \n    {\n        if (num1[VAR_1] == '1')\n        {\n            num3 += 1;\n        }\n        else if (num1[VAR_1] == '2')\n        {\n            num3 += 2;\n        }\n    }\n    int num4 = 0;\n    for (int VAR_2 = 0; VAR_2 < num2.size(); VAR_2++)\n   \n    {\n        if (num2[VAR_2] == '1')\n        {\n            num4 += 1;\n        }\n        else if (num2[VAR_2] == '2')\n        {\n            num4 += 2;\n        }\n    }\n    int num5 = 0;\n    for (int VAR_3 = 0; VAR_3 < num3.size(); VAR_3++)\n   \n    {\n        if (num3[VAR_3] == '1')\n        {\n            num5 += 1;\n        }\n        else if (num3[VAR_3] == '2')\n        {\n            num5 += 2;\n        }\n    }\n    int num6 = 0;\n    for (int VAR_4 = 0; VAR_4 < num4.size(); VAR_4++)\n   \n    {\n        if (num4[VAR_4] == '1')\n        {\n            num6 += 1;\n        }\n        else if (num4[VAR_4] == '2')\n        {\n            num6 += 2;\n        }\n    }\n    int num7 = 0;\n    for (int VAR_5 = 0; VAR_5 < num5.size(); VAR_5++)\n   \n    {\n        if (num5[VAR_5] == '1')\n        {\n            num7 += 1;\n        }\n        else if (num5[VAR_5] == '2')\n        {\n            num7 += 2;\n        }\n    }\n    int num8 = 0;\n    for (int VAR_6 = 0; VAR_6 < num6.size(); VAR_6++)\n   \n    {\n        if (num6[VAR_6] == '1')\n        {\n            num8 += 1;\n        }\n        else if (num6[VAR_6] == '2')\n        {\n            num8 += 2;\n        }\n    }\n    int num9 = 0;\n    for (int VAR_7 = 0; VAR_7 < num7.size(); VAR_7++)\n   \n    {\n        if (num7[VAR_7] == '1')\n        {\n            num9 += 1;\n        }\n        else if (num7[VAR_7] == '2')\n        {\n            num9 += 2;\n        }\n    }\n    int num10 = 0;\n    for (int VAR_8 = 0; VAR_8 < num8.size(); VAR_8++)\n   \n    {\n        if (num8[VAR_8] == '1')\n        {\n            num10 += 1;\n        }\n        else if (num8[VAR_8] == '2')\n        {\n            num10 += 2;\n        }\n    }\n    int num11 = 0;\n    for (int VAR_9 = 0; VAR_9 < num9.size(); VAR_9++)\n   \n    {\n        if (num9[VAR_9] == '1')\n        {\n            num11 += 1;\n        }\n        else if (num9[VAR_9] == '2')\n        {\n            num11 += 2;\n        }\n    }\n    int num12 = 0;\n    for (int VAR_10 = 0; VAR_10 < num10.size(); VAR_10++)\n   \n    {\n        if (num10[VAR_10] == '1')\n        {\n            num12 += 1;\n        }\n        else if (num10[VAR_10] == '2')\n        {\n            num12 += 2;\n        }\n    }\n    int num13 = 0;\n    for (int VAR_11 = 0; VAR_11 < num11.size(); VAR_11++)\n   \n    {\n        if (num11[VAR_11] == '1')\n        {\n            num13 += 1;\n        }\n        else if (num11[VAR_11] == '2')\n        {\n            num13 += 2;\n        }\n    }\n    int num14 = 0;\n    for (int VAR_12 = 0; VAR_12 < num12.size(); VAR_12++)\n   \n    {\n        if (num12[VAR_12] == '1')\n        {\n            num14 += 1;\n", "passed": 0, "run_status": 2}
{"task_id": "CPP/68", "prompt": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > pluck(vector < int > arr) {\n    vector < int > out = {\n        }\n    ;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 =0;i<arr.size(); VAR_0++)\n    if (arr [ VAR_0 ] % 2 == 0 and(out.size() == 0 or arr [ VAR_0 ] < out [ 0 ]))\n    out = {\n        arr [ VAR_0 ], VAR_0}\n    ;\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n    assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));\n    assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));\n    assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));\n    assert (issame(pluck({7, 9, 7, 1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n}\n", "entry_point": "pluck", "partial": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    # print('@@this is the line to split##')\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n", "gc": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > pluck(vector < int > arr) {\n    vector < int > out = {\n        }\n    ;\n   \n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        if (arr[i] % 2 == 0) {\n            out.push_back(arr[i]);\n        }\n    }\n    \n    return out;\n}\n\nint main() {\n    vector < int > arr = {4,2,3};\n    vector < int > arr2 = {1,2,3};\n    vector < int > arr3 = {};\n    vector < int > arr4 = {5, 0, 3, 0, 4, 2};\n    \n    vector < int > out = pluck(arr);\n    for (int i = 0; i < out.size(); i++) {\n        printf(\"%d \", out[i]);\n    }\n    printf(\"\\n\");\n    \n    out = pluck(arr2);\n    for (int i = 0; i < out.size(); i++) {\n        printf(\"%d \", out[i]);\n    }\n    printf(\"\\n\");\n    \n    out = pluck(arr3);\n    for (int i = 0; i < out.size(); i++) {\n        printf(\"%d \", out[i]);\n    }\n    printf(\"\\n\");\n    \n    out = pluck(arr4);\n    for (int i = 0; i < out.size(); i++) {\n        printf(\"%d \", out[i]);\n    }\n    printf(\"\\n\");\n    \n    return 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/69", "prompt": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint search(vector < int > lst) {\n    vector < vector < int > > VAR_0 = {\n        }\n    ;\n    int max = -1;\n    for (int i = 0; i < lst.size(); i++)\n     {\n        bool has = false;\n        for (int j = 0; j < VAR_0.size(); j++)\n        if (lst [ i ] == VAR_0 [ j ] [ 0 ]) {\n           \n", "canonical_solution": "print(' @ this is the line to split ## ' VAR_0 [ j ] [ 1 ]+=1;\n            has = true;\n            if (VAR_0 [ j ] [ 1 ] >= VAR_0 [ j ] [ 0 ] and VAR_0 [ j ] [ 0 ] > max) max = VAR_0 [ j ] [ 0 ];\n            }\n        if (not(has)) {\n            VAR_0.push_back( {\n                lst [ i ], 1}\n            );\n            if (max == -1 and lst [ i ] == 1) max = 1;\n            }\n        }\n    return max;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({5, 5, 5, 5, 1}) == 1);\n    assert (search({4, 1, 4, 1, 4, 4}) == 4);\n    assert (search({3, 3}) == -1);\n    assert (search({8, 8, 8, 8, 8, 8, 8, 8}) == 8);\n    assert (search({2, 3, 3, 2, 2}) == 2);\n    assert (search({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}) == 1);\n    assert (search({3, 2, 8, 2}) == 2);\n    assert (search({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}) == 1);\n    assert (search({8, 8, 3, 6, 5, 6, 4}) == -1);\n    assert (search({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}) == 1);\n    assert (search({1, 9, 10, 1, 3}) == 1);\n    assert (search({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}) == 5);\n    assert (search({1}) == 1);\n    assert (search({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}) == 4);\n    assert (search({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}) == 2);\n    assert (search({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}) == 1);\n    assert (search({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}) == 4);\n    assert (search({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}) == 4);\n    assert (search({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}) == 2);\n    assert (search({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}) == -1);\n    assert (search({10}) == -1);\n    assert (search({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}) == 2);\n    assert (search({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}) == 1);\n    assert (search({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}) == 1);\n    assert (search({3, 10, 10, 9, 2}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({4, 1, 2, 2, 3, 1}) == 2);\n    assert (search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3);\n    assert (search({5, 5, 4, 4, 4}) == -1);\n}\n", "entry_point": "search", "partial": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            # print('@@this is the line to split##')\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n", "gc": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint search(vector < int > lst) {\n    vector < vector < int > > VAR_0 = {\n        }\n    ;\n    int max = -1;\n    for (int i = 0; i < lst.size(); i++)\n     {\n        bool has = false;\n        for (int j = 0; j < VAR_0.size(); j++)\n        if (lst [ i ] == VAR_0 [ j ] [ 0 ]) {\n           \n            has = true;\n            break;\n        }\n        if (has) {\n            max = max > VAR_0 [ j ] [ 1 ]? max : VAR_0 [ j ] [ 1 ];\n        }\n        else {\n            VAR_0.push_back ( { lst [ i ], 1 } );\n        }\n    }\n    return max;\n}\nint main()\n{\n    vector < int > lst = { 4, 1, 2, 2, 3, 1 };\n    printf (\"%d\\n\", search (lst));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/7", "prompt": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < string > filter_by_substring(vector < string > strings, string substring) {\n    vector < string > out;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 = 0; i<strings.size(); VAR_0++)\n    \n     {\n        if (strings [ VAR_0 ].find(substring) != strings [ VAR_0 ].npos)\n        out.push_back(strings [ VAR_0 ]);\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"john\"),{}));\n     assert (issame(filter_by_substring({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), {\"xxx\", \"xxxAAA\", \"xxx\"}));\n    assert (issame(filter_by_substring({\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"),{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}));\n     assert (issame(filter_by_substring({\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\") ,{\"grunt\", \"prune\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"a\"),{}));\n     assert (issame(filter_by_substring({\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\"), {\"abc\", \"bacd\", \"array\"}));\n}\n", "entry_point": "filter_by_substring", "partial": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    # print('@@this is the line to split##')\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n", "gc": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < string > filter_by_substring(vector < string > strings, string substring) {\n    vector < string > out;\n   \n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)!= string::npos) {\n            out.push_back(strings[i]);\n        }\n    }\n    return out;\n}\n\n/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std::vector;\nusing std::string;\nvector < string > filter_by_substring(vector < string > strings, string substring) {\n    vector < string > out;\n   \n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)!= string::npos) {\n            out.push_back(strings[i]);\n        }\n    }\n    return out;\n}\n\n/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std::vector;\nusing std::string;\nvector < string > filter_by_substring(vector < string > strings, string substring) {\n    vector < string > out;\n   \n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)!= string::npos) {\n            out.push_back(strings[i]);\n        }\n    }\n    return out;\n}\n\n/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std::vector;\nusing std::string;\nvector < string > filter_by_substring(vector < string > strings, string substring) {\n    vector < string > out;\n   \n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)!= string::npos) {\n            out.push_back(strings[i]);\n        }\n    }\n    return out;\n}\n\n/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std::vector;\nusing std::string;\nvector < string > filter_by_substring(vector < string > strings, string substring) {\n    vector < string > out;\n   \n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)!= string::npos) {\n            out.push_back(strings[i]);\n        }\n    }\n    return out;\n}\n\n/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std::vector;\nusing std::string;\nvector < string > filter_by_substring(vector < string > strings, string substring) {\n    vector < string > out;\n   \n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)!= string::npos) {\n            out.push_back(strings[i]);\n        }\n    }\n    return out;\n}\n\n/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std::vector;\nusing std::string;\nvector < string > filter_by_substring(vector < string > strings, string substring) {\n    vector < string > out;\n   \n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)!= string::npos) {\n            out.push_back(strings[i]);\n        }\n    }\n    return out;\n}\n\n/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std::vector;\nusing std::string;\nvector < string > filter_by_sub", "passed": 1, "run_status": 0}
{"task_id": "CPP/70", "prompt": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > strange_sort_list(vector < int > VAR_0) {\n    vector < int > out = {\n        }\n    ;\n    sort(VAR_0.begin(), VAR_0.end());\n    int l = 0, r = VAR_0.size() - 1;\n    while (l < r)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        out.push_back(VAR_0 [ l ]);\n        l+=1;\n        out.push_back(VAR_0 [ r ]);\n        r-=1;\n        }\n    if (l == r) out.push_back(VAR_0 [ l ]);\n    return out;\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9}) , {5, 9, 6, 8, 7}));\n    assert (issame(strange_sort_list({1, 2, 3, 4, 5}) , {1, 5, 2, 4, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9, 1}) , {1, 9, 5, 8, 6, 7}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n    assert (issame(strange_sort_list({1,2,3,4,5,6,7,8}) , {1, 8, 2, 7, 3, 6, 4, 5}));\n    assert (issame(strange_sort_list({0,2,2,2,5,5,-5,-5}) , {-5, 5, -5, 5, 0, 2, 2, 2}));\n    assert (issame(strange_sort_list({111111}) , {111111}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n}\n", "entry_point": "strange_sort_list", "partial": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    # print('@@this is the line to split##')\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n", "gc": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > strange_sort_list(vector < int > VAR_0) {\n    vector < int > out = {\n        }\n    ;\n    sort(VAR_0.begin(), VAR_0.end());\n    int l = 0, r = VAR_0.size() - 1;\n    while (l < r)\n   \n    {\n        int m = l + (r - l) / 2;\n        if (VAR_0[m] < VAR_0[r])\n            r = m;\n        else if (VAR_0[m] > VAR_0[r])\n            l = m + 1;\n        else\n            r = m;\n    }\n    return out;\n}\nint main() {\n    vector < int > VAR_0 = {\n        1, 2, 3, 4\n    };\n    vector < int > VAR_1 = strange_sort_list(VAR_0);\n    for (auto i : VAR_1)\n        printf(\"%d \", i);\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/71", "prompt": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include <stdio.h>\n#include <math.h>\nusing std;\nfloat triangle_area(float VAR_0, float b, float c) {\n    if (VAR_0 + b <= c or VAR_0 + c <= b or b + c <= VAR_0) return -1;\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' float h =(VAR_0 + b + c) / 2;\n    float area;\n    area = pow(h *(h - VAR_0) *(h - b) *(h - c), 0.5);\n    return area;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n    assert (abs(triangle_area(4, 8, 5) -8.18)<0.01);\n    assert (abs(triangle_area(2, 2, 2) -1.73)<0.01);\n    assert (abs(triangle_area(1, 2, 3) +1)<0.01);\n    assert (abs(triangle_area(10, 5, 7) - 16.25)<0.01);\n    assert (abs(triangle_area(2, 6, 3) +1)<0.01);\n    assert (abs(triangle_area(1, 1, 1) -0.43)<0.01);\n    assert (abs(triangle_area(2, 2, 10) +1)<0.01);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n}\n", "entry_point": "triangle_area", "partial": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    # print('@@this is the line to split##')\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n", "gc": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include <stdio.h>\n#include <math.h>\nusing std;\nfloat triangle_area(float VAR_0, float b, float c) {\n    if (VAR_0 + b <= c or VAR_0 + c <= b or b + c <= VAR_0) return -1;\n   \n    return 0.5 * (b + c) * (b + c) / 2;\n}\n\nint main() {\n    float a, b, c;\n    scanf(\"%f%f%f\", &a, &b, &c);\n    printf(\"%.2f\\n\", triangle_area(a, b, c));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/72", "prompt": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nbool will_it_fly(vector < int > VAR_0, int w) {\n    int sum = 0;\n    for (int i = 0; i < VAR_0.size(); i++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (VAR_0 [ i ] != VAR_0 [ VAR_0.size() - 1 - i ]) return false;\n        sum+=VAR_0 [ i ];\n        }\n    if (sum > w) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n    assert (will_it_fly({1, 2, 3}, 6) ==false);\n    assert (will_it_fly({5}, 5) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n}\n", "entry_point": "will_it_fly", "partial": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    # print('@@this is the line to split##')\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n", "gc": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nbool will_it_fly(vector < int > VAR_0, int w) {\n    int sum = 0;\n    for (int i = 0; i < VAR_0.size(); i++)\n   \n    {\n        sum += VAR_0[i];\n    }\n    if (sum > w)\n    {\n        return false;\n    }\n    else\n    {\n        return true;\n    }\n}\n\nint main() {\n    vector < int > VAR_0;\n    int w;\n    scanf(\"%d\", &w);\n    for (int i = 0; i < w; i++)\n    {\n        int VAR_1;\n        scanf(\"%d\", &VAR_1);\n        VAR_0.push_back(VAR_1);\n    }\n    printf(\"%s\", will_it_fly(VAR_0, w)? \"true\" : \"false\");\n    return 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/73", "prompt": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint smallest_change(vector < int > arr) {\n    int out = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 =0;i<arr.size() - 1 - VAR_0; VAR_0++)\n    \n    if (arr [ VAR_0 ] != arr [ arr.size() - 1 - VAR_0 ])\n    out+=1;\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 4, 2}) == 1);\n    assert (smallest_change({1, 4, 4, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n    assert (smallest_change({1}) == 0);\n    assert (smallest_change({0, 1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n}\n", "entry_point": "smallest_change", "partial": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int out=0;\n    # print('@@this is the line to split##')\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n", "gc": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint smallest_change(vector < int > arr) {\n    int out = 0;\n   \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            out++;\n        }\n    }\n    return out;\n}\n\nint main() {\n    vector < int > arr;\n    arr.push_back(1);\n    arr.push_back(2);\n    arr.push_back(3);\n    arr.push_back(5);\n    arr.push_back(4);\n    arr.push_back(7);\n    arr.push_back(9);\n    arr.push_back(6);\n    printf(\"%d\\n\", smallest_change(arr));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/74", "prompt": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < string > total_match(vector < string > lst1, vector < string > lst2) {\n    int num1, num2, VAR_0;\n    num1 = 0; num2 = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (VAR_0 = 0; i<lst1.size(); VAR_0++)\n    num1+=lst1 [ VAR_0 ].length();\n    for (VAR_0 = 0; VAR_0 < lst2.size(); VAR_0++)\n    num2+=lst2 [ VAR_0 ].length();\n    if (num1 > num2) return lst2;\n    return lst1;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\"}) , {\"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({}, {\"this\"}) , {}));\n    assert (issame(total_match({\"this\"}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n}\n", "entry_point": "total_match", "partial": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    # print('@@this is the line to split##')\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n", "gc": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < string > total_match(vector < string > lst1, vector < string > lst2) {\n    int num1, num2, VAR_0;\n    num1 = 0; num2 = 0;\n   \n    for (int i = 0; i < lst1.size(); i++) {\n        for (int j = 0; j < lst2.size(); j++) {\n            if (lst1[i] == lst2[j]) {\n                num1++;\n                num2++;\n            }\n        }\n    }\n    VAR_0 = num1;\n    if (num2 == lst2.size()) {\n        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\n\nint main() {\n    vector < string > lst1 = { \"hi\", \"admin\" };\n    vector < string > lst2 = { \"hI\", \"Hi\" };\n    vector < string > lst3 = { \"hI\", \"hi\", \"hi\" };\n    vector < string > lst4 = { \"4\" };\n    vector < string > lst5 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst6 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst7 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst8 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst9 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst10 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst11 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst12 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst13 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst14 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst15 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst16 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst17 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst18 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst19 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst20 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst21 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst22 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst23 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst24 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst25 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst26 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst27 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst28 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst29 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst30 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst31 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst32 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst33 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst34 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst35 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst36 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst37 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst38 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst39 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst40 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst41 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst42 = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n    vector < string > lst43 = { \"1\", \"2\", \"3\", \"4\", \"5\"", "passed": 0, "run_status": 1}
{"task_id": "CPP/75", "prompt": "/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include <stdio.h>\nusing std;\nbool is_multiply_prime(int a) {\n    int num = 0;\n    for (int VAR_0 = 2; VAR_0 * VAR_0 <= a; VAR_0++)\n    while (a % VAR_0 == 0 and a > VAR_0)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        a = a / VAR_0;\n        num+=1;\n        }\n    if (num == 2) return true;\n    return false;}", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(5) == false);\n    assert (is_multiply_prime(30) == true);\n    assert (is_multiply_prime(8) == true);\n    assert (is_multiply_prime(10) == false);\n    assert (is_multiply_prime(125) == true);\n    assert (is_multiply_prime(3 * 5 * 7) == true);\n    assert (is_multiply_prime(3 * 6 * 7) == false);\n    assert (is_multiply_prime(9 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 13 * 7) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(30) == true);\n}\n", "entry_point": "is_multiply_prime", "partial": "/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    # print('@@this is the line to split##')\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n", "gc": "/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include <stdio.h>\nusing std;\nbool is_multiply_prime(int a) {\n    int num = 0;\n    for (int VAR_0 = 2; VAR_0 * VAR_0 <= a; VAR_0++)\n    while (a % VAR_0 == 0 and a > VAR_0)\n   \n    return false;\n}\n\nint main()\n{\n    int a = 0;\n    scanf(\"%d\", &a);\n    printf(\"%d\\n\", is_multiply_prime(a));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/76", "prompt": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include <stdio.h>\n#include <math.h>\nusing std;\nbool is_simple_power(int x, int n) {\n    int VAR_0 = 1, count = 0;\n    while (VAR_0 <= x and count < 100)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (VAR_0 == x) return true;\n        VAR_0 = VAR_0 * n; count+=1;\n        }\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n    assert (is_simple_power(16, 2)== true);\n    assert (is_simple_power(143214, 16)== false);\n    assert (is_simple_power(4, 2)==true);\n    assert (is_simple_power(9, 3)==true);\n    assert (is_simple_power(16, 4)==true);\n    assert (is_simple_power(24, 2)==false);\n    assert (is_simple_power(128, 4)==false);\n    assert (is_simple_power(12, 6)==false);\n    assert (is_simple_power(1, 1)==true);\n    assert (is_simple_power(1, 12)==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n}\n", "entry_point": "is_simple_power", "partial": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n    int p=1,count=0;\n    while (p<=x and count<100)\n    # print('@@this is the line to split##')\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n", "gc": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include <stdio.h>\n#include <math.h>\nusing std;\nbool is_simple_power(int x, int n) {\n    int VAR_0 = 1, count = 0;\n    while (VAR_0 <= x and count < 100)\n   \n    {\n        if (x % VAR_0 == 0)\n        {\n            VAR_0 *= n;\n            count++;\n        }\n        VAR_0++;\n    }\n    return count == 100;\n}\n\nint main() {\n    int x, n;\n    scanf(\"%d %d\", &x, &n);\n    printf(\"%s\", is_simple_power(x, n)? \"true\" : \"false\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/77", "prompt": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include <stdio.h>\n#include <math.h>\nusing std;\nbool iscuber(int a) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 =0;i*i*i<=abs(a); VAR_0++)\n    \n    if (VAR_0 * VAR_0 * VAR_0 == abs(a)) return true;\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(1000) == true);\n    assert (iscuber(0) == true);\n    assert (iscuber(1729) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(0) == true);\n}\n", "entry_point": "iscuber", "partial": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n    # print('@@this is the line to split##')\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n", "gc": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include <stdio.h>\n#include <math.h>\nusing std;\nbool iscuber(int a) {\n   \n    if(a == 0)\n        return true;\n    if(a == 1)\n        return false;\n    if(a % 2 == 0)\n        return false;\n    if(a % 3 == 0)\n        return false;\n    if(a % 5 == 0)\n        return false;\n    if(a % 7 == 0)\n        return false;\n    if(a % 11 == 0)\n        return false;\n    if(a % 13 == 0)\n        return false;\n    if(a % 17 == 0)\n        return false;\n    if(a % 19 == 0)\n        return false;\n    if(a % 23 == 0)\n        return false;\n    if(a % 29 == 0)\n        return false;\n    if(a % 31 == 0)\n        return false;\n    if(a % 37 == 0)\n        return false;\n    if(a % 41 == 0)\n        return false;\n    if(a % 43 == 0)\n        return false;\n    if(a % 47 == 0)\n        return false;\n    if(a % 53 == 0)\n        return false;\n    if(a % 59 == 0)\n        return false;\n    if(a % 61 == 0)\n        return false;\n    if(a % 67 == 0)\n        return false;\n    if(a % 71 == 0)\n        return false;\n    if(a % 73 == 0)\n        return false;\n    if(a % 79 == 0)\n        return false;\n    if(a % 83 == 0)\n        return false;\n    if(a % 89 == 0)\n        return false;\n    if(a % 97 == 0)\n        return false;\n    if(a % 101 == 0)\n        return false;\n    if(a % 103 == 0)\n        return false;\n    if(a % 107 == 0)\n        return false;\n    if(a % 109 == 0)\n        return false;\n    if(a % 113 == 0)\n        return false;\n    if(a % 127 == 0)\n        return false;\n    if(a % 131 == 0)\n        return false;\n    if(a % 137 == 0)\n        return false;\n    if(a % 139 == 0)\n        return false;\n    if(a % 149 == 0)\n        return false;\n    if(a % 151 == 0)\n        return false;\n    if(a % 157 == 0)\n        return false;\n    if(a % 163 == 0)\n        return false;\n    if(a % 167 == 0)\n        return false;\n    if(a % 173 == 0)\n        return false;\n    if(a % 179 == 0)\n        return false;\n    if(a % 181 == 0)\n        return false;\n    if(a % 191 == 0)\n        return false;\n    if(a % 193 == 0)\n        return false;\n    if(a % 197 == 0)\n        return false;\n    if(a % 199 == 0)\n        return false;\n    if(a % 211 == 0)\n        return false;\n    if(a % 223 == 0)\n        return false;\n    if(a % 227 == 0)\n        return false;\n    if(a % 229 == 0)\n        return false;\n    if(a % 233 == 0)\n        return false;\n    if(a % 239 == 0)\n        return false;\n    if(a % 241 == 0)\n        return false;\n    if(a % 251 == 0)\n        return false;\n    if(a % 257 == 0)\n        return false;\n    if(a % 263 == 0)\n        return false;\n    if(a % 269 == 0)\n        return false;\n    if(a % 271 == 0)\n        return false;\n    if(a % 277 == 0)\n        return false;\n    if(a % 281 == 0)\n        return false;\n    if(a % 283 == 0)\n        return false;\n    if(a % 293 == 0)\n        return false;\n    if(a % 307 == 0)\n        return false;\n    if(a % 311 == 0)\n        return false;\n    if(a % 313 == 0)\n        return false;\n    if(a % 317 == 0)\n        return false;\n    if(a % 331 == 0)\n        return false;\n    if(a % 337 == 0)\n        return false;\n    if(a % 347 == 0)\n        return false;\n    if(a % 349 == 0)\n        return false;\n    if(a % 353 == 0)\n        return false;\n    if(a % 359 == 0)\n        return false;\n    if(a % 367 == 0)\n        return false;\n    if(a % 373 == 0)\n        return false;\n    if(a % 379 == 0)\n        return false;\n    if(a % 383 == 0)\n        return false;\n    if(a % 389 == 0)\n        return false;\n    if(a % 397 == 0)\n        return false;\n    if(a % 401 == 0)\n        return false;\n    if(a % 409 == 0)\n        return false;\n    if(a % 419 == 0)\n        return false;\n    if(a % 421 == 0)\n        return false;\n    if(a % 431 == 0)\n        return false;\n    if(a % 433 == 0)\n        return false;\n    if(a % 439 == 0)\n        return false;\n    if(a % 443 == 0)\n        return false;\n    if(a % 449 == 0)\n        return false;\n    if(a % 457 == 0)\n        return false;\n    if(a % 461 == 0)\n        return false;\n    if(a % 463 == 0)\n        return false;\n    if(a % 467 == 0)\n        return false;\n    if(a % 4", "passed": 0, "run_status": 2}
{"task_id": "CPP/78", "prompt": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing std;\nint hex_key(string num) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' string key = \"2357BD\";\n    int out = 0;\n    for (int VAR_0 = 0; VAR_0 < num.length(); VAR_0++)\n    if (find(key.begin(), key.end(), num [ VAR_0 ]) != key.end()) out+=1;\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n    assert (hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12 );\n    assert (hex_key(\"\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n}\n", "entry_point": "hex_key", "partial": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    # print('@@this is the line to split##')\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n", "gc": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing std;\nint hex_key(string num) {\n   \n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    string num;\n    while (scanf(\"%s\", &num)!= EOF) {\n        printf(\"%d\\n\", hex_key(num));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/79", "prompt": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring decimal_to_binary(int VAR_0) {\n    string out = \"\";\n    if (VAR_0 == 0) return \"db0db\";\n    while (VAR_0 > 0)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        out = to_string(VAR_0 % 2) + out;\n        VAR_0 = VAR_0 / 2;\n        }\n    out = \"db\" + out + \"db\";\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(0) == \"db0db\");\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(103) == \"db1100111db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n}\n", "entry_point": "decimal_to_binary", "partial": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    # print('@@this is the line to split##')\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n", "gc": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring decimal_to_binary(int VAR_0) {\n    string out = \"\";\n    if (VAR_0 == 0) return \"db0db\";\n    while (VAR_0 > 0)\n   \n    return out;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/8", "prompt": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > sum_product(vector < int > numbers) {\n    int sum = 0, product = 1;\n    for (int VAR_0 = 0; VAR_0 < numbers.size(); VAR_0++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        sum+=numbers [ VAR_0 ];\n        product *= numbers [ VAR_0 ];\n        }\n    return {\n        sum, product}\n    ;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 1, 1}), {3, 1}));\n    assert (issame(sum_product({100, 0}),{100, 0}));\n     assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));\n      assert (issame(sum_product({10}) ,{10, 10}));\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 2, 3,4}), {10, 24}));\n}\n", "entry_point": "sum_product", "partial": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    # print('@@this is the line to split##')\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n", "gc": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > sum_product(vector < int > numbers) {\n    int sum = 0, product = 1;\n    for (int VAR_0 = 0; VAR_0 < numbers.size(); VAR_0++)\n   \n    {\n        sum += numbers[VAR_0];\n        product *= numbers[VAR_0];\n    }\n    return vector < int > (1, sum)\n       , vector < int > (1, product);\n}\nint main() {\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/80", "prompt": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool is_happy(string s) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (s.length() < 3) return false;\n    for (int VAR_0 = 2; VAR_0 < s.length(); VAR_0++)\n    if (s [ VAR_0 ] == s [ VAR_0 - 1 ] or s [ VAR_0 ] == s [ VAR_0 - 2 ]) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n    assert (is_happy(\"iopaxpoi\") == true );\n    assert (is_happy(\"iopaxioi\") == false );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n}\n", "entry_point": "is_happy", "partial": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    # print('@@this is the line to split##')\n    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n", "gc": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool is_happy(string s) {\n   \n    if (s.length() < 3) return false;\n    \n    int i = 0;\n    while (i < s.length() - 2) {\n        if (s[i] == s[i+1] && s[i+2] == s[i+1]) {\n            i += 3;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    string s;\n    while (scanf(\"%s\", &s)!= EOF) {\n        printf(\"%s is %s\\n\", s.c_str(), is_happy(s)? \"happy\" : \"not happy\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/81", "prompt": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < string > numerical_letter_grade(vector < float > grades) {\n    vector < string > out = {\n        }\n    ;\n    for (int VAR_0 = 0; VAR_0 < grades.size(); VAR_0++)\n     {\n        if (grades [ VAR_0 ] >= 3.9999) out.push_back(\"A+\");\n        if (grades [ VAR_0 ] > 3.7001 and grades [ VAR_0 ] < 3.9999) out.push_back(\"A\");\n        if (grades [ VAR_0 ] > 3.3001 and grades [ VAR_0 ] <= 3.7001) out.push_back(\"A-\");\n        if (grades [ VAR_0 ] > 3.0001 and grades [ VAR_0 ] <= 3.3001) out.push_back(\"B+\");\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (grades [ VAR_0 ] > 2.7001 and grades [ VAR_0 ] <= 3.0001) out.push_back(\"B\");\n        if (grades [ VAR_0 ] > 2.3001 and grades [ VAR_0 ] <= 2.7001) out.push_back(\"B-\");\n        if (grades [ VAR_0 ] > 2.0001 and grades [ VAR_0 ] <= 2.3001) out.push_back(\"C+\");\n        if (grades [ VAR_0 ] > 1.7001 and grades [ VAR_0 ] <= 2.0001) out.push_back(\"C\");\n        if (grades [ VAR_0 ] > 1.3001 and grades [ VAR_0 ] <= 1.7001) out.push_back(\"C-\");\n        if (grades [ VAR_0 ] > 1.0001 and grades [ VAR_0 ] <= 1.3001) out.push_back(\"D+\");\n        if (grades [ VAR_0 ] > 0.7001 and grades [ VAR_0 ] <= 1.0001) out.push_back(\"D\");\n        if (grades [ VAR_0 ] > 0.0001 and grades [ VAR_0 ] <= 0.7001) out.push_back(\"D-\");\n        if (grades [ VAR_0 ] <= 0.0001) out.push_back(\"E\");\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n    assert (issame(numerical_letter_grade({1.2}) , {\"D+\"}));\n    assert (issame(numerical_letter_grade({0.5}) , {\"D-\"}));\n    assert (issame(numerical_letter_grade({0.0}) , {\"E\"}));\n    assert (issame(numerical_letter_grade({1, 0.3, 1.5, 2.8, 3.3}) , {\"D\", \"D-\", \"C-\", \"B\", \"B+\"}));\n    assert (issame(numerical_letter_grade({0, 0.7}) , {\"E\", \"D-\"}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n}\n", "entry_point": "numerical_letter_grade", "partial": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        # print('@@this is the line to split##')\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n", "gc": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nvector < string > numerical_letter_grade(vector < float > grades) {\n    vector < string > out = {\n        }\n    ;\n    for (int VAR_0 = 0; VAR_0 < grades.size(); VAR_0++)\n     {\n        if (grades [ VAR_0 ] >= 3.9999) out.push_back(\"A+\");\n        if (grades [ VAR_0 ] > 3.7001 and grades [ VAR_0 ] < 3.9999) out.push_back(\"A\");\n        if (grades [ VAR_0 ] > 3.3001 and grades [ VAR_0 ] <= 3.7001) out.push_back(\"A-\");\n        if (grades [ VAR_0 ] > 3.0001 and grades [ VAR_0 ] <= 3.3001) out.push_back(\"B+\");\n       \n        if (grades [ VAR_0 ] > 2.7001 and grades [ VAR_0 ] <= 3.0001) out.push_back(\"B\");\n        if (grades [ VAR_0 ] > 2.3001 and grades [ VAR_0 ] <= 2.7001) out.push_back(\"B-\");\n        if (grades [ VAR_0 ] > 2.0001 and grades [ VAR_0 ] <= 2.3001) out.push_back(\"C+\");\n        if (grades [ VAR_0 ] > 1.7001 and grades [ VAR_0 ] <= 2.0001) out.push_back(\"C\");\n        if (grades [ VAR_0 ] > 1.3001 and grades [ VAR_0 ] <= 1.7001) out.push_back(\"C-\");\n        if (grades [ VAR_0 ] > 1.0001 and grades [ VAR_0 ] <= 1.3001) out.push_back(\"D+\");\n        if (grades [ VAR_0 ] > 0.7001 and grades [ VAR_0 ] <= 1.0001) out.push_back(\"D\");\n        if (grades [ VAR_0 ] > 0.3001 and grades [ VAR_0 ] <= 0.7001) out.push_back(\"D-\");\n        if (grades [ VAR_0 ] == 0) out.push_back(\"E\");\n     }\n    return out;\n}\n\nint main() {\n    vector < float > grades = {4.0, 3, 1.7, 2, 3.5};\n    vector < string > out = numerical_letter_grade(grades);\n    for (int VAR_0 = 0; VAR_0 < out.size(); VAR_0++)\n     {\n        printf(\"%s\\n\", out [ VAR_0 ].c_str());\n     }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/82", "prompt": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool prime_length(string str) {\n    int l, VAR_0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' l = str.length();\n    if (l < 2) return false;\n    for (VAR_0 = 2; VAR_0 * VAR_0 <= l; VAR_0++)\n    if (l % VAR_0 == 0) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n    assert (prime_length(\"wow\") == true);\n    assert (prime_length(\"world\") == true);\n    assert (prime_length(\"MadaM\") == true);\n    assert (prime_length(\"Wow\") == true);\n    assert (prime_length(\"\") == false);\n    assert (prime_length(\"HI\") == true);\n    assert (prime_length(\"go\") == true);\n    assert (prime_length(\"gogo\") == false);\n    assert (prime_length(\"aaaaaaaaaaaaaaa\") == false);\n    assert (prime_length(\"Madam\") == true);\n    assert (prime_length(\"M\") == false);\n    assert (prime_length(\"0\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n}\n", "entry_point": "prime_length", "partial": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int l,i;\n    # print('@@this is the line to split##')\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n", "gc": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nbool prime_length(string str) {\n    int l, VAR_0;\n   \n    l = str.length();\n    VAR_0 = 1;\n    while (VAR_0 < l) {\n        if (str[VAR_0] == '0') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '1') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '2') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '3') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '4') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '5') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '6') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '7') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '8') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '9') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'a') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'b') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'c') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'd') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'e') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'f') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'g') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'h') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'i') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'j') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'k') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'l') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] =='m') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'n') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'o') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'p') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'q') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'r') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] =='s') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 't') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'u') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'v') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'w') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'x') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'y') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'z') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '0') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '1') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '2') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '3') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '4') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '5') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '6') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '7') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '8') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == '9') {\n            VAR_0++;\n            continue;\n        }\n        if (str[VAR_0] == 'a') {\n            ", "passed": 0, "run_status": 2}
{"task_id": "CPP/83", "prompt": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include <stdio.h>\nusing std;\nint starts_one_ends(int VAR_0) {\n    if (VAR_0 < 1) return 0;\n    if (VAR_0 == 1) return 1;\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' int out = 18;\n    for (int i = 2; i < VAR_0; i++)\n    out = out * 10;\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (starts_one_ends(1) == 1);\n    assert (starts_one_ends(2) == 18);\n    assert (starts_one_ends(3) == 180);\n    assert (starts_one_ends(4) == 1800);\n    assert (starts_one_ends(5) == 18000);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n", "example_test": "", "entry_point": "starts_one_ends", "partial": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    # print('@@this is the line to split##')\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n", "gc": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include <stdio.h>\nusing std;\nint starts_one_ends(int VAR_0) {\n    if (VAR_0 < 1) return 0;\n    if (VAR_0 == 1) return 1;\n   \n    int count = 0;\n    for (int i = 1; i <= VAR_0; i++) {\n        if (i == 1) {\n            count += starts_one_ends(i);\n        } else {\n            count += starts_one_ends(i - 1);\n        }\n    }\n    return count;\n}\n\nint main() {\n    int VAR_0;\n    scanf(\"%d\", &VAR_0);\n    printf(\"%d\\n\", starts_one_ends(VAR_0));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/84", "prompt": "/*\nGiven a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring solve(int N) {\n    string str, bi = \"\";\n    str = to_string(N);\n    int i, VAR_0 = 0;\n    for (int i = 0; i < str.length(); i++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' VAR_0+=str [ i ] - 48;\n    while (VAR_0 > 0)\n     {\n        bi = to_string(VAR_0 % 2) + bi;\n        VAR_0 = VAR_0 / 2;\n        }\n    return bi;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(1000) == \"1\");\n    assert (solve(150) == \"110\");\n    assert (solve(147) == \"1100\");\n    assert (solve(333) == \"1001\");\n    assert (solve(963) == \"10010\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n", "example_test": "", "entry_point": "solve", "partial": "/*\nGiven a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        # print('@@this is the line to split##')\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n", "gc": "/*\nGiven a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring solve(int N) {\n    string str, bi = \"\";\n    str = to_string(N);\n    int i, VAR_0 = 0;\n    for (int i = 0; i < str.length(); i++)\n   \n    {\n        if (str[i] == '0') VAR_0++;\n        else VAR_0--;\n        bi += str[i];\n    }\n    if (VAR_0 == 0) bi = \"1\";\n    return bi;\n}\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    printf(\"%s\", solve(N).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/85", "prompt": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint add(vector < int > lst) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' int sum = 0;\n    for (int VAR_0 = 0; VAR_0 * 2 + 1 < lst.size(); VAR_0++)\n    if (lst [ VAR_0 * 2 + 1 ] % 2 == 0) sum+=lst [ VAR_0 * 2 + 1 ];\n    return sum;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 88}) == 88);\n    assert (add({4, 5, 6, 7, 2, 122}) == 122);\n    assert (add({4, 0, 6, 7}) == 0);\n    assert (add({4, 4, 6, 8}) == 12);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 2, 6, 7}) == 2);\n}\n", "entry_point": "add", "partial": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    # print('@@this is the line to split##')\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n", "gc": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nint add(vector < int > lst) {\n   \n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nint main() {\n    vector < int > lst;\n    lst.push_back(4);\n    lst.push_back(2);\n    lst.push_back(6);\n    lst.push_back(7);\n    printf(\"%d\\n\", add(lst));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/86", "prompt": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing std;\nstring anti_shuffle(string s) {\n    string out = \"\";\n    string VAR_0 = \"\";\n    s = s + ' ';\n    for (int i = 0; i < s.length(); i++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (s [ i ] == ' ')\n     {\n        sort(VAR_0.begin(), VAR_0.end());\n        if (out.length() > 0) out = out + ' ';\n        out = out + VAR_0;\n        VAR_0 = \"\";\n        }\n    else VAR_0 = VAR_0 + s [ i ];\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"number\") == \"bemnru\");\n    assert (anti_shuffle(\"abcd\") == \"abcd\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert (anti_shuffle(\"\") == \"\");\n    assert (anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n}\n", "entry_point": "anti_shuffle", "partial": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    # print('@@this is the line to split##')\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n", "gc": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello!!!Wdlor\"\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing std;\nstring anti_shuffle(string s) {\n    string out = \"\";\n    string VAR_0 = \"\";\n    s = s +'';\n    for (int i = 0; i < s.length(); i++)\n   \n    {\n        int j = 0;\n        while (j < s.length() && s[j]!='')\n        {\n            VAR_0 = s[j];\n            j++;\n        }\n        out += VAR_0;\n        s = s.substr(j);\n    }\n    return out;\n}\n\nint main()\n{\n    string s = \"Hi\";\n    printf(\"%s\\n\", anti_shuffle(s).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/87", "prompt": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < vector < int > > get_row(vector < vector < int > > lst, int x) {\n  vector < vector < int > > out = {\n    }\n  ;\n \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 =0;i<lst.size(); VAR_0++)\n  for (int j = lst [ VAR_0 ].size() - 1; j >= 0; j-=1)\n  if (lst [ VAR_0 ] [ j ] == x) out.push_back( {\n    VAR_0, j}\n  );\n  return out;\n  }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6}}, 2) , {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,1,3,4,5,6},\n        {1,2,1,4,5,6},\n        {1,2,3,1,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}\n    }, 1) , {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{1}}, 2) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "entry_point": "get_row", "partial": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    # print('@@this is the line to split##')\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n", "gc": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2}...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < vector < int > > get_row(vector < vector < int > > lst, int x) {\n  vector < vector < int > > out = {\n    }\n  ;\n \n  if (lst.size() == 0) {\n    return out;\n  }\n \n  vector < vector < int > > out_row = {\n    }\n  ;\n \n  for (int i = 0; i < lst.size(); i++) {\n    vector < int > row = lst[i];\n    sort(row.begin(), row.end());\n    out_row.push_back(row);\n  }\n \n  for (int i = 0; i < out_row.size(); i++) {\n    vector < int > row = out_row[i];\n    sort(row.begin(), row.end(), std::greater<int>());\n    out.push_back(row);\n  }\n \n  return out;\n}\n \nint main() {\n  vector < vector < int > > lst = {\n    {1, 2, 3, 4, 5, 6},\n    {1, 2, 3, 4, 1, 6},\n    {1, 2, 3, 4, 5, 1}\n  };\n  vector < vector < int > > out = get_row(lst, 1);\n  for (int i = 0; i < out.size(); i++) {\n    for (int j = 0; j < out[i].size(); j++) {\n      printf(\"%d \", out[i][j]);\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/88", "prompt": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > sort_array(vector < int > VAR_0) {\n    if (VAR_0.size() == 0) return {\n        }\n    ;\n    if ((VAR_0 [ 0 ] + VAR_0 [ VAR_0.size() - 1 ]) % 2 == 1)\n     {\n        sort(VAR_0.begin(), VAR_0.end());\n        return VAR_0;\n       \n", "canonical_solution": "print(' @ this is the line to split ## '}\n    else\n     {\n        sort(VAR_0.begin(), VAR_0.end());\n        vector < int > out = {\n            }\n        ;\n        for (int i = VAR_0.size() - 1; i >= 0; i-=1)\n        out.push_back(VAR_0 [ i ]);\n        return out;\n        }\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n    assert (issame(sort_array({2, 1}) , {1, 2}));\n    assert (issame(sort_array({15, 42, 87, 32 ,11, 0}) , {0, 11, 15, 32, 42, 87}));\n    assert (issame(sort_array({21, 14, 23, 11}) , {23, 21, 14, 11}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n}\n", "entry_point": "sort_array", "partial": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n        # print('@@this is the line to split##')\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n", "gc": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nvector < int > sort_array(vector < int > VAR_0) {\n    if (VAR_0.size() == 0) return {\n        }\n    ;\n    if ((VAR_0 [ 0 ] + VAR_0 [ VAR_0.size() - 1 ]) % 2 == 1)\n     {\n        sort(VAR_0.begin(), VAR_0.end());\n        return VAR_0;\n       \n     }\n    else\n     {\n        sort(VAR_0.rbegin(), VAR_0.rend());\n        return VAR_0;\n     }\n}\nint main()\n{\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/89", "prompt": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring encrypt(string s) {\n    string out;\n    int VAR_0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (VAR_0 = 0; i<s.length(); VAR_0++)\n    \n     {\n        int w =((int) s [ VAR_0 ] + 4 -(int) ' ') % 26 +(int) ' '; out = out +(char) w;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n    assert (encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\");\n    assert (encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\");\n    assert (encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert (encrypt(\"a\")==\"e\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n}\n", "entry_point": "encrypt", "partial": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string out;\n    int i;\n    # print('@@this is the line to split##')\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "gc": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nstring encrypt(string s) {\n    string out;\n    int VAR_0;\n   \n    for (int i = 0; i < s.size(); i++) {\n        VAR_0 = s[i] - 'a';\n        out += (VAR_0 * 2) + 'a';\n    }\n    return out;\n}\n\nint main() {\n    string s;\n    while (scanf(\"%s\", &s)!= EOF) {\n        printf(\"%s\\n\", encrypt(s).c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/9", "prompt": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > rolling_max(vector < int > numbers) {\n    vector < int > out;\n    int max = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 = 0; i<numbers.size(); VAR_0++)\n    \n     {\n        if (numbers [ VAR_0 ] > max) max = numbers [ VAR_0 ];\n        out.push_back(max);\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({}),{}));\n    assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));\n     assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));\n      assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({1, 2, 3, 2, 3, 4, 2}),{1, 2, 3, 3, 3, 4, 4}));\n}\n", "entry_point": "rolling_max", "partial": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    # print('@@this is the line to split##')\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n", "gc": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > rolling_max(vector < int > numbers) {\n    vector < int > out;\n    int max = 0;\n   \n    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (numbers[i] < max) {\n            out.push_back(max);\n            max = numbers[i];\n        }\n    }\n    out.push_back(max);\n    return out;\n}\n\nint main() {\n    vector < int > numbers = {1, 2, 3, 2, 3, 4, 2};\n    vector < int > out = rolling_max(numbers);\n    for (int i = 0; i < out.size(); i++) {\n        printf(\"%d \", out[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/90", "prompt": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nint next_smallest(vector < int > VAR_0) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' sort(VAR_0.begin(), VAR_0.end());\n    for (int i = 1; i < VAR_0.size(); i++)\n    if (VAR_0 [ i ] != VAR_0 [ i - 1 ]) return VAR_0 [ i ];\n    return -1;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n    assert (next_smallest({1,1,1,1,0}) == 1);\n    assert (next_smallest({-35, 34, 12, -45}) == -35);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n}\n", "entry_point": "next_smallest", "partial": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    # print('@@this is the line to split##')\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n", "gc": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing std;\nint next_smallest(vector < int > VAR_0) {\n   \n   if (VAR_0.size() == 0) {\n      return -1;\n   }\n   \n   int min = VAR_0[0];\n   int min_index = 0;\n   \n   for (int i = 1; i < VAR_0.size(); i++) {\n      if (VAR_0[i] < min) {\n         min = VAR_0[i];\n         min_index = i;\n      }\n   }\n   \n   return min_index;\n}\n\nint main() {\n   \n   vector < int > VAR_0 = {1, 2, 3, 4, 5};\n   \n   printf(\"%d\\n\", next_smallest(VAR_0));\n   \n   return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/91", "prompt": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nint is_bored(string S) {\n    bool isstart = true;\n    bool isi = false;\n    int sum = 0;\n    for (int VAR_0 = 0; VAR_0 < S.length(); VAR_0++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (S [ VAR_0 ] == ' ' and isi) {\n            isi = false; sum+=1;}\n        if (S [ VAR_0 ] == ' ' and isstart) {\n            isi = true;}\n        else isi = false;\nif (S [ VAR_0 ] != ' ') {\n            isstart = false;}\n        if (S [ VAR_0 ] == ' ' or S [ VAR_0 ] == ' ' or S [ VAR_0 ] == ' ') isstart = true;\n        }\n    return sum;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"Is the sky blue?\") == 0);\n    assert (is_bored(\"I love It !\") == 1);\n    assert (is_bored(\"bIt\") == 0);\n    assert (is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert (is_bored(\"You and I are going for a walk\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1);\n}\n", "entry_point": "is_bored", "partial": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    # print('@@this is the line to split##')\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n", "gc": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include <stdio.h>\n#include <string>\nusing std;\nint is_bored(string S) {\n    bool isstart = true;\n    bool isi = false;\n    int sum = 0;\n    for (int VAR_0 = 0; VAR_0 < S.length(); VAR_0++)\n   \n    {\n        if (S[VAR_0] == '.' || S[VAR_0] == '?' || S[VAR_0] == '!')\n        {\n            if (isi)\n            {\n                sum++;\n                isi = false;\n            }\n            else\n            {\n                isi = true;\n            }\n        }\n        else\n        {\n            isi = false;\n        }\n    }\n    return sum;\n}\nint main()\n{\n    string S;\n    cin >> S;\n    cout << is_bored(S) << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/92", "prompt": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include <stdio.h>\n#include <math.h>\nusing std;\nbool any_int(float VAR_0, float b, float c) {\n    if (round(VAR_0) != VAR_0) return false;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (round(b) != b) return false;\n    if (round(c) != c) return false;\n    if (VAR_0 + b == c or VAR_0 + c == b or b + c == VAR_0) return true;\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(2, 3, 1)==true);\n    assert (any_int(2.5, 2, 3)==false);\n    assert (any_int(1.5, 5, 3.5)==false);\n    assert (any_int(2, 6, 2)==false);\n    assert (any_int(4, 2, 2)==true);\n    assert (any_int(2.2, 2.2, 2.2)==false);\n    assert (any_int(-4, 6, 2)==true);\n    assert (any_int(2,1,1)==true);\n    assert (any_int(3,4,7)==true);\n    assert (any_int(3.01,4,7)==false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(5, 2, 7)==true);\n    assert (any_int(3, 2, 2)==false);\n    assert (any_int(3, -2, 1)==true);\n    assert (any_int(3.6, -2.2, 2)==false);\n}\n", "entry_point": "any_int", "partial": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if (round(a)!=a) return false;\n    # print('@@this is the line to split##')\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n", "gc": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include <stdio.h>\n#include <math.h>\nusing std;\nbool any_int(float VAR_0, float b, float c) {\n    if (round(VAR_0)!= VAR_0) return false;\n   \n    if (round(b)!= b) return false;\n    if (round(c)!= c) return false;\n    \n    return true;\n}\n\nint main() {\n    float VAR_0 = 3.6;\n    float b = -2.2;\n    float c = 2;\n    \n    if (any_int(VAR_0, b, c)) {\n        printf(\"true\\n\");\n    } else {\n        printf(\"false\\n\");\n    }\n    \n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/93", "prompt": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing std;\nstring encode(string message) {\n    string vowels = \"aeiouAEIOU\";\n    string out = \"\";\n    for (int i = 0; i < message.length(); i++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        char VAR_0 = message [ i ];\n        if (VAR_0 >= 97 and VAR_0 <= 122) {\n            VAR_0 = VAR_0 - 32;}\n        else\nif (VAR_0 >= 65 and VAR_0 <= 90) VAR_0 = VAR_0 + 32;\n        if (find(vowels.begin(), vowels.end(), VAR_0) != vowels.end()) VAR_0 = VAR_0 + 2;\n        out = out + VAR_0;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"TEST\") == \"tgst\");\n    assert (encode(\"Mudasir\") == \"mWDCSKR\");\n    assert (encode(\"YES\") == \"ygs\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert (encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"test\") == \"TGST\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n}\n", "entry_point": "encode", "partial": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    # print('@@this is the line to split##')\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n", "gc": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing std;\nstring encode(string message) {\n    string vowels = \"aeiouAEIOU\";\n    string out = \"\";\n    for (int i = 0; i < message.length(); i++)\n   \n    {\n        if (vowels.find(message[i])!= string::npos)\n        {\n            out += message[i];\n            out += message[i + 2];\n        }\n        else\n        {\n            out += message[i];\n            out += message[i + 1];\n        }\n    }\n    return out;\n}\n\nint main()\n{\n    string message = \"This is a message\";\n    string encoded = encode(message);\n    printf(\"%s\\n\", encoded.c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/94", "prompt": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nint skjkasdkd(vector < int > lst) {\n    int largest = 0;\n    for (int VAR_0 = 0; VAR_0 < lst.size(); VAR_0++)\n    if (lst [ VAR_0 ] > largest)\n     {\n        bool prime = true;\n        for (int j = 2; j * j <= lst [ VAR_0 ]; j++)\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (lst [ VAR_0 ] % j == 0) prime = false;\n        if (prime) largest = lst [ VAR_0 ];\n        }\n    int sum = 0;\n    string s;\n    s = to_string(largest);\n    for (int VAR_0 = 0; VAR_0 < s.length(); VAR_0++)\n    sum+=s [ VAR_0 ] - 48;\n    return sum;\n    }\n#undef NDEBUG\n#include <assert.h>", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n    assert (skjkasdkd({8191}) == 19);\n    assert (skjkasdkd({8191, 123456, 127, 7}) == 19);\n    assert (skjkasdkd({127, 97, 8192}) == 10);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n}\n", "entry_point": "skjkasdkd", "partial": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                # print('@@this is the line to split##')\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n", "gc": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing std;\nint skjkasdkd(vector < int > lst) {\n    int largest = 0;\n    for (int VAR_0 = 0; VAR_0 < lst.size(); VAR_0++)\n    if (lst [ VAR_0 ] > largest)\n     {\n        bool prime = true;\n        for (int j = 2; j * j <= lst [ VAR_0 ]; j++)\n       \n        if (lst [ VAR_0 ] % j == 0)\n         {\n            prime = false;\n            break;\n         }\n        if (prime)\n         {\n            largest = lst [ VAR_0 ];\n         }\n     }\n    return largest;\n}\nint main()\n{\n    vector < int > lst;\n    lst.push_back(0);\n    lst.push_back(3);\n    lst.push_back(2);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(5);\n    lst.push_back(7);\n    lst.push_back(4);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(2);\n    lst.push_back(181);\n    lst.push_back(32);\n    lst.push_back(4);\n    lst.push_back(32);\n    lst.push_back(3);\n    lst.push_back(2);\n    lst.push_back(32);\n    lst.push_back(324);\n    lst.push_back(4);\n    lst.push_back(3);\n    lst.push_back(2);\n    lst.push_back(4);\n    lst.push_back(2);\n    lst.push_back(5);\n    lst.push_back(1);\n    lst.push_back(2);\n    lst.push_back(5);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(2);\n    lst.push_back(4);\n    lst.push_back(2);\n    lst.push_back(5);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(1);\n    lst.", "passed": 0, "run_status": 1}
{"task_id": "CPP/95", "prompt": "/*\nGiven a map, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include <stdio.h>\n#include <string>\n#include <map>\nusing std;\nbool check_dict_case(map < string, string > dict) {\n    map < string, string > :: iterator it;\n    int islower = 0, isupper = 0;\n    if (dict.size() == 0) return false;\n    for (it = dict.begin(); it != dict.end(); it++)\n     {\n        string key = it -> first;\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int VAR_0 =0;i<key.length(); VAR_0++)\n         {\n            if (key [ VAR_0 ] < 65 or(key [ VAR_0 ] > 90 and key [ VAR_0 ] < 97) or key [ VAR_0 ] > 122) return false;\n            if (key [ VAR_0 ] >= 65 and key [ VAR_0 ] <= 90) isupper = 1;\n            if (key [ VAR_0 ] >= 97 and key [ VAR_0 ] <= 122) islower = 1;\n            if (isupper + islower == 2) return false;\n            }\n        \n        }\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n    assert (check_dict_case({{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"} }) == true  );\n    assert (check_dict_case({}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n}\n", "entry_point": "check_dict_case", "partial": "/*\nGiven a map, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n        # print('@@this is the line to split##')\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n", "gc": "/*\nGiven a map, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include <stdio.h>\n#include <string>\n#include <map>\nusing std;\nbool check_dict_case(map < string, string > dict) {\n    map < string, string > :: iterator it;\n    int islower = 0, isupper = 0;\n    if (dict.size() == 0) return false;\n    for (it = dict.begin(); it!= dict.end(); it++)\n     {\n        string key = it -> first;\n       \n        if (islower)\n            islower = islower == key.size() && key.compare(0, key.size(), key, 0, key.size()) == 0;\n        else\n            islower = isupper == key.size() && key.compare(0, key.size(), key, 0, key.size()) == 0;\n        if (islower)\n            isupper = isupper == key.size() && key.compare(0, key.size(), key, 0, key.size()) == 0;\n        else\n            isupper = islower == key.size() && key.compare(0, key.size(), key, 0, key.size()) == 0;\n    }\n    return islower && isupper;\n}\nint main() {\n    map < string, string > dict;\n    dict.insert(pair<string, string>(\"a\", \"apple\"));\n    dict.insert(pair<string, string>(\"b\", \"banana\"));\n    dict.insert(pair<string, string>(\"c\", \"car\"));\n    dict.insert(pair<string, string>(\"d\", \"dog\"));\n    dict.insert(pair<string, string>(\"e\", \"elephant\"));\n    dict.insert(pair<string, string>(\"f\", \"fish\"));\n    dict.insert(pair<string, string>(\"g\", \"goat\"));\n    dict.insert(pair<string, string>(\"h\", \"horse\"));\n    dict.insert(pair<string, string>(\"i\", \"insect\"));\n    dict.insert(pair<string, string>(\"j\", \"jelly\"));\n    dict.insert(pair<string, string>(\"k\", \"kitten\"));\n    dict.insert(pair<string, string>(\"l\", \"lion\"));\n    dict.insert(pair<string, string>(\"m\", \"mouse\"));\n    dict.insert(pair<string, string>(\"n\", \"nose\"));\n    dict.insert(pair<string, string>(\"o\", \"octopus\"));\n    dict.insert(pair<string, string>(\"p\", \"pig\"));\n    dict.insert(pair<string, string>(\"q\", \"queen\"));\n    dict.insert(pair<string, string>(\"r\", \"rat\"));\n    dict.insert(pair<string, string>(\"s\", \"sheep\"));\n    dict.insert(pair<string, string>(\"t\", \"tiger\"));\n    dict.insert(pair<string, string>(\"u\", \"unicorn\"));\n    dict.insert(pair<string, string>(\"v\", \"vegetable\"));\n    dict.insert(pair<string, string>(\"w\", \"wolf\"));\n    dict.insert(pair<string, string>(\"x\", \"x\"));\n    dict.insert(pair<string, string>(\"y\", \"y\"));\n    dict.insert(pair<string, string>(\"z\", \"z\"));\n    dict.insert(pair<string, string>(\"A\", \"Apple\"));\n    dict.insert(pair<string, string>(\"B\", \"Banana\"));\n    dict.insert(pair<string, string>(\"C\", \"Car\"));\n    dict.insert(pair<string, string>(\"D\", \"Dog\"));\n    dict.insert(pair<string, string>(\"E\", \"Elephant\"));\n    dict.insert(pair<string, string>(\"F\", \"Fish\"));\n    dict.insert(pair<string, string>(\"G\", \"Goat\"));\n    dict.insert(pair<string, string>(\"H\", \"Horse\"));\n    dict.insert(pair<string, string>(\"I\", \"Insect\"));\n    dict.insert(pair<string, string>(\"J\", \"Jelly\"));\n    dict.insert(pair<string, string>(\"K\", \"Kitten\"));\n    dict.insert(pair<string, string>(\"L\", \"Lion\"));\n    dict.insert(pair<string, string>(\"M\", \"Mouse\"));\n    dict.insert(pair<string, string>(\"N\", \"Nose\"));\n    dict.insert(pair<string, string>(\"O\", \"Octopus\"));\n    dict.insert(pair<string, string>(\"P\", \"Pig\"));\n    dict.insert(pair<string, string>(\"Q\", \"Queen\"));\n    dict.insert(pair<string, string>(\"R\", \"Rat\"));\n    dict.insert(pair<string, string>(\"S\", \"Sheep\"));\n    dict.insert(pair<string, string>(\"T\", \"Tiger\"));\n    dict.insert(pair<string, string>(\"U\", \"Unicorn\"));\n    dict.insert(pair<string, string>(\"V\", \"Vegetable\"));\n    dict.insert(pair<string, string>(\"W\", \"Wolf\"));\n    dict.insert(pair<string, string>(\"X\", \"X\"));\n    dict.insert(pair<string, string>(\"Y\", \"Y\"));\n    dict.insert(pair<string, string>(\"Z\", \"Z\"));\n    printf(\"%s\\n\", check_dict_case(dict)? \"true\" : \"false\");\n    return 0", "passed": 0, "run_status": 1}
{"task_id": "CPP/96", "prompt": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > count_up_to(int n) {\n    vector < int > out = {\n        }\n    ;\n    int VAR_0, j;\n    for (VAR_0 = 2; VAR_0 < n; VAR_0++)\n    if (out.size() == 0) {\n        out.push_back(VAR_0);}\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' else\n     {\n        bool isp = true;\n        for (j = 0; out [ j ] * out [ j ] <= VAR_0; j++)\n        if (VAR_0 % out [ j ] == 0) isp = false;\n        if (isp) out.push_back(VAR_0);\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(6) , {2,3,5}));\n    assert (issame(count_up_to(7) , {2,3,5}));\n    assert (issame(count_up_to(10) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n    assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));\n    assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(11) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(20) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n}\n", "entry_point": "count_up_to", "partial": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        # print('@@this is the line to split##')\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n", "gc": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include <stdio.h>\n#include <vector>\nusing std;\nvector < int > count_up_to(int n) {\n    vector < int > out = {\n        }\n    ;\n    int VAR_0, j;\n    for (VAR_0 = 2; VAR_0 < n; VAR_0++)\n    if (out.size() == 0) {\n        out.push_back(VAR_0);}\n   \n    for (j = 2; j < n; j++)\n    if (out.size() > 0) {\n        out.push_back(out[out.size() - 1] * j);}\n    return out;\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > primes = count_up_to(n);\n    for (int i = 0; i < primes.size(); i++)\n    {\n        printf(\"%d \", primes[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/97", "prompt": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include <stdio.h>\n#include <math.h>\nusing std;\n", "canonical_solution": "print(' @ this is the line to split ## ' int multiply(int VAR_0, int b) {\n    return(abs(VAR_0) % 10) *(abs(b) % 10);\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n    assert (multiply(76, 67) == 42    );\n    assert (multiply(17, 27) == 49    );\n    assert (multiply(0, 1) == 0);\n    assert (multiply(0, 0) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n}\n", "entry_point": "multiply", "partial": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n# print('@@this is the line to split##')\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\n", "gc": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include <stdio.h>\n#include <math.h>\nusing std;\n\nint multiply(int a, int b) {\n    int res = 1;\n    while (a) {\n        if (a & 1) res = res * b;\n        a >>= 1;\n        b *= b;\n    }\n    return res;\n}\n\nint main() {\n    int a, b;\n    scanf(\"%d%d\", &a, &b);\n    printf(\"%d\\n\", multiply(a, b));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/98", "prompt": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing std;\nint count_upper(string s) {\n    string uvowel = \"AEIOU\";\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' int count = 0;\n    for (int VAR_0 = 0; VAR_0 * 2 < s.length(); VAR_0++)\n    if (find(uvowel.begin(), uvowel.end(), s [ VAR_0 * 2 ]) != uvowel.end())\n    count+=1;\n    return count;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n    assert (count_upper(\"B\")  == 0);\n    assert (count_upper(\"U\")  == 1);\n    assert (count_upper(\"\") == 0);\n    assert (count_upper(\"EEEE\") == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n}\n", "entry_point": "count_upper", "partial": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    # print('@@this is the line to split##')\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n", "gc": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing std;\nint count_upper(string s) {\n    string uvowel = \"AEIOU\";\n   \n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (uvowel.find(s[i])!= string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main(int argc, char const *argv[])\n{\n    string s;\n    while (scanf(\"%s\", s.c_str())!= EOF) {\n        printf(\"%d\\n\", count_upper(s));\n    }\n    return 0;\n}<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/99", "prompt": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include <stdio.h>\n#include <math.h>\n#include <string>\nusing std;\n", "canonical_solution": "print(' @ this is the line to split ## ' int closest_integer(string value) {\n    double VAR_0;\n    VAR_0 = atof(value.c_str());\n    return round(VAR_0);\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"14.5\") == 15);\n    assert (closest_integer(\"-15.5\") == -16);\n    assert (closest_integer(\"15.3\") == 15);\n    assert (closest_integer(\"0\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"15.3\") == 15);\n}\n", "entry_point": "closest_integer", "partial": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n# print('@@this is the line to split##')\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n", "gc": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include <stdio.h>\n#include <math.h>\n#include <string>\nusing std;\n\nint closest_integer(const std::string& num) {\n    int closest = 0;\n    int closest_dist = 0;\n    for (int i = 0; i < num.size(); i++) {\n        int dist = abs(num[i] - closest);\n        if (dist > closest_dist) {\n            closest_dist = dist;\n            closest = num[i];\n        }\n    }\n    return closest;\n}\n\nint main() {\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
